//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-12 19:21:11

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'is'", "'isnt'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int For_Item_Down_To=33;
	public const int For_Item_Each=34;
	public const int For_Item_To=35;
	public const int For_Item_When=36;
	public const int Func_Args=37;
	public const int Func_Def=38;
	public const int Generic_Patameters=39;
	public const int Global_Block=40;
	public const int IDENT=41;
	public const int INDENT=42;
	public const int Ident_List=43;
	public const int Import=44;
	public const int Left_Bracket=45;
	public const int LineComment=46;
	public const int Match_Tuple=47;
	public const int NEWLINE=48;
	public const int NUMBER=49;
	public const int Namespace=50;
	public const int Right_Bracket=51;
	public const int Root=52;
	public const int SP=53;
	public const int STRING=54;
	public const int Stmt_Block=55;
	public const int Stmt_Defer=56;
	public const int Stmt_Finally=57;
	public const int Stmt_For=58;
	public const int Stmt_If=59;
	public const int Stmt_Loop=60;
	public const int Stmt_Return=61;
	public const int Stmt_Try=62;
	public const int Stmt_Typedef=63;
	public const int Stmt_Unless=64;
	public const int Stmt_Until=65;
	public const int Stmt_Using=66;
	public const int Stmt_While=67;
	public const int Type_IDENT=68;
	public const int Type_Ref=69;
	public const int Type_Tuple=70;
	public const int White_Space=71;
	public const int DOUBLE=153;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }


	    public string Alias(string op) 
	    {
			if (op == "is") return "==";
			if (op == "isnt") return "!=";
			if (op == "not") return "!";
			if (op == "and") return "&&";
			if (op == "or") return "||";
			return op;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:32:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(32, 1);
		try
		{
			// SugarWalker.g:33:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:33:4: ^( Root a= global_block )
			{
			DebugLocation(33, 4);
			DebugLocation(33, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(33, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(34, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(37, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:39:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		List<AttrAstNode> a = default(List<AttrAstNode>);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(39, 1);
		try
		{
			// SugarWalker.g:44:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:44:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(44, 4);
			DebugLocation(44, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(44, 19);
				// SugarWalker.g:44:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||LA1_0==Stmt_Typedef||LA1_0==Stmt_Using||LA1_0==98))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:44:20: a= node
						{
						DebugLocation(44, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(44, 27);
						 foreach (var x in a) value.List.Add(x); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(45, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:47:1: node returns [List<AttrAstNode> value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private List<AttrAstNode> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		List<AttrAstNode> value = default(List<AttrAstNode>);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		List<GlobalAlloc> e = default(List<GlobalAlloc>);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);


			value = new List<AttrAstNode>();

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(47, 1);
		try
		{
			// SugarWalker.g:52:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 98:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:52:4: a= func_def
				{
				DebugLocation(52, 6);
				PushFollow(Follow._func_def_in_node139);
				a=func_def();
				PopFollow();

				DebugLocation(52, 17);
				 value.Add(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:53:4: b= import_def
				{
				DebugLocation(53, 6);
				PushFollow(Follow._import_def_in_node150);
				b=import_def();
				PopFollow();

				DebugLocation(53, 19);
				 value.Add(b); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:54:4: c= enum_def
				{
				DebugLocation(54, 6);
				PushFollow(Follow._enum_def_in_node161);
				c=enum_def();
				PopFollow();

				DebugLocation(54, 17);
				 value.Add(c); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:55:4: d= class_def
				{
				DebugLocation(55, 6);
				PushFollow(Follow._class_def_in_node172);
				d=class_def();
				PopFollow();

				DebugLocation(55, 18);
				 value.Add(d); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:56:4: e= global_alloc
				{
				DebugLocation(56, 6);
				PushFollow(Follow._global_alloc_in_node183);
				e=global_alloc();
				PopFollow();

				DebugLocation(56, 21);
				 foreach (var x in e) value.Add(x); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:57:4: f= global_using
				{
				DebugLocation(57, 6);
				PushFollow(Follow._global_using_in_node194);
				f=global_using();
				PopFollow();

				DebugLocation(57, 21);
				 value.Add(f); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:58:4: g= global_typedef
				{
				DebugLocation(58, 6);
				PushFollow(Follow._global_typedef_in_node205);
				g=global_typedef();
				PopFollow();

				DebugLocation(58, 23);
				 value.Add(g); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:59:4: h= namespace_def
				{
				DebugLocation(59, 6);
				PushFollow(Follow._namespace_def_in_node216);
				h=namespace_def();
				PopFollow();

				DebugLocation(59, 22);
				 value.Add(h); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(60, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:62:1: global_using returns [GlobalUsing value] : a= stmt_using ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		StmtUsing a = default(StmtUsing);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(62, 1);
		try
		{
			// SugarWalker.g:63:2: (a= stmt_using )
			DebugEnterAlt(1);
			// SugarWalker.g:63:4: a= stmt_using
			{
			DebugLocation(63, 5);
			PushFollow(Follow._stmt_using_in_global_using234);
			a=stmt_using();
			PopFollow();

			DebugLocation(64, 2);

					value = new GlobalUsing(a.List);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(67, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:69:1: global_alloc returns [List<GlobalAlloc> value] : ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) );
	[GrammarRule("global_alloc")]
	private List<GlobalAlloc> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		List<GlobalAlloc> value = default(List<GlobalAlloc>);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<GlobalAlloc>();

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(69, 1);
		try
		{
			// SugarWalker.g:74:2: ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) )
			int alt8=3;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt8 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt8 = 2;
				}
				break;
			case 98:
				{
				alt8 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:74:4: ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(74, 4);
				DebugLocation(74, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc258); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(74, 23);
				// SugarWalker.g:74:23: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:74:24: attr= attribute
					{
					DebugLocation(74, 28);
					PushFollow(Follow._attribute_in_global_alloc263);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(74, 42);
				PushFollow(Follow._type_name_in_global_alloc269);
				a=type_name();
				PopFollow();

				DebugLocation(74, 54);
				PushFollow(Follow._ident_list_in_global_alloc273);
				b=ident_list();
				PopFollow();

				DebugLocation(74, 66);
				// SugarWalker.g:74:66: (c= expr_list )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>=Expr_Access && LA4_0<=Expr_Tuple)||LA4_0==IDENT||LA4_0==Match_Tuple||LA4_0==NUMBER||LA4_0==STRING||LA4_0==75||LA4_0==78||LA4_0==82||LA4_0==85||LA4_0==89||LA4_0==95||LA4_0==98||LA4_0==102||LA4_0==104||LA4_0==110||LA4_0==113||LA4_0==117||LA4_0==150||LA4_0==DOUBLE))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:74:67: c= expr_list
					{
					DebugLocation(74, 68);
					PushFollow(Follow._expr_list_in_global_alloc278);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(75, 2);

						value.Add(new GlobalAlloc(a, b, c, attr, true));
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:78:4: ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(78, 4);
				DebugLocation(78, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc290); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(78, 25);
				// SugarWalker.g:78:25: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:78:26: attr= attribute
					{
					DebugLocation(78, 30);
					PushFollow(Follow._attribute_in_global_alloc295);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(78, 44);
				PushFollow(Follow._type_name_in_global_alloc301);
				a=type_name();
				PopFollow();

				DebugLocation(78, 56);
				PushFollow(Follow._ident_list_in_global_alloc305);
				b=ident_list();
				PopFollow();

				DebugLocation(78, 68);
				// SugarWalker.g:78:68: (c= expr_list )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>=Expr_Access && LA6_0<=Expr_Tuple)||LA6_0==IDENT||LA6_0==Match_Tuple||LA6_0==NUMBER||LA6_0==STRING||LA6_0==75||LA6_0==78||LA6_0==82||LA6_0==85||LA6_0==89||LA6_0==95||LA6_0==98||LA6_0==102||LA6_0==104||LA6_0==110||LA6_0==113||LA6_0==117||LA6_0==150||LA6_0==DOUBLE))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:78:69: c= expr_list
					{
					DebugLocation(78, 70);
					PushFollow(Follow._expr_list_in_global_alloc310);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(79, 2);

						value.Add(new GlobalAlloc(a, b, c, attr, false));
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:82:4: ^( ':=' (attr= attribute )? d= ident_list e= expr_list )
				{
				DebugLocation(82, 4);
				DebugLocation(82, 6);
				Match(input,98,Follow._98_in_global_alloc322); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(82, 11);
				// SugarWalker.g:82:11: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:82:12: attr= attribute
					{
					DebugLocation(82, 16);
					PushFollow(Follow._attribute_in_global_alloc327);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(82, 30);
				PushFollow(Follow._ident_list_in_global_alloc333);
				d=ident_list();
				PopFollow();

				DebugLocation(82, 43);
				PushFollow(Follow._expr_list_in_global_alloc337);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(83, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new GlobalAlloc("auto", new List<string> { d[i] }, new List<Expr>{ e[k] }, attr, true));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(91, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:93:1: global_typedef returns [GlobalTypeDef value] : a= stmt_typedef ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		StmtTypeDef a = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(93, 1);
		try
		{
			// SugarWalker.g:94:2: (a= stmt_typedef )
			DebugEnterAlt(1);
			// SugarWalker.g:94:4: a= stmt_typedef
			{
			DebugLocation(94, 5);
			PushFollow(Follow._stmt_typedef_in_global_typedef358);
			a=stmt_typedef();
			PopFollow();

			DebugLocation(95, 2);

					value = new GlobalTypeDef(a.Type, a.Name);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:100:1: attribute_args returns [string value] : (a= ( NUMBER ) |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(100, 1);
		try
		{
			// SugarWalker.g:101:2: (a= ( NUMBER ) |a= STRING |b= ident )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt9 = 1;
				}
				break;
			case STRING:
				{
				alt9 = 2;
				}
				break;
			case IDENT:
				{
				alt9 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:101:4: a= ( NUMBER )
				{
				DebugLocation(101, 5);
				// SugarWalker.g:101:6: ( NUMBER )
				DebugEnterAlt(1);
				// SugarWalker.g:101:7: NUMBER
				{
				DebugLocation(101, 7);
				Match(input,NUMBER,Follow._NUMBER_in_attribute_args379); 

				}

				DebugLocation(102, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:105:4: a= STRING
				{
				DebugLocation(105, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args390); 
				DebugLocation(106, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:109:4: b= ident
				{
				DebugLocation(109, 5);
				PushFollow(Follow._ident_in_attribute_args400);
				b=ident();
				PopFollow();

				DebugLocation(110, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:115:1: attribute_item returns [Attr value] : ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		CommonTree c = default(CommonTree);
		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(115, 1);
		try
		{
			// SugarWalker.g:120:2: ( ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:120:4: ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* )
			{
			DebugLocation(120, 4);
			DebugLocation(120, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item424); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(120, 16);
			// SugarWalker.g:120:16: (a= ident |c= 'const' )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==124))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:120:17: a= ident
				{
				DebugLocation(120, 18);
				PushFollow(Follow._ident_in_attribute_item429);
				a=ident();
				PopFollow();

				DebugLocation(120, 25);
				 value.Name = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:120:48: c= 'const'
				{
				DebugLocation(120, 49);
				c=(CommonTree)Match(input,124,Follow._124_in_attribute_item437); 
				DebugLocation(120, 58);
				 value.Name = "const"; 

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(120, 86);
			// SugarWalker.g:120:86: (b= attribute_args )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==IDENT||LA11_0==NUMBER||LA11_0==STRING))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:120:87: b= attribute_args
					{
					DebugLocation(120, 88);
					PushFollow(Follow._attribute_args_in_attribute_item445);
					b=attribute_args();
					PopFollow();

					DebugLocation(120, 104);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:123:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(123, 1);
		try
		{
			// SugarWalker.g:128:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:128:4: (a= attribute_item )+
			{
			DebugLocation(128, 4);
			// SugarWalker.g:128:4: (a= attribute_item )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==Attribute))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:128:5: a= attribute_item
					{
					DebugLocation(128, 6);
					PushFollow(Follow._attribute_item_in_attribute473);
					a=attribute_item();
					PopFollow();

					DebugLocation(128, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:131:1: namespace_def returns [Namespace value] : ^( Namespace a= ident b= global_block ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(131, 1);
		try
		{
			// SugarWalker.g:132:2: ( ^( Namespace a= ident b= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:132:4: ^( Namespace a= ident b= global_block )
			{
			DebugLocation(132, 4);
			DebugLocation(132, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def494); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(132, 17);
			PushFollow(Follow._ident_in_namespace_def498);
			a=ident();
			PopFollow();

			DebugLocation(132, 25);
			PushFollow(Follow._global_block_in_namespace_def502);
			b=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(133, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:138:1: import_def returns [Import value] : ^( Import (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(138, 1);
		try
		{
			// SugarWalker.g:143:2: ( ^( Import (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:143:4: ^( Import (a= STRING )* )
			{
			DebugLocation(143, 4);
			DebugLocation(143, 6);
			Match(input,Import,Follow._Import_in_import_def527); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(143, 13);
				// SugarWalker.g:143:13: (a= STRING )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if ((LA13_0==STRING))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:143:14: a= STRING
						{
						DebugLocation(143, 15);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def532); 
						DebugLocation(143, 23);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:146:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(146, 1);
		try
		{
			// SugarWalker.g:147:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:147:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(147, 4);
			DebugLocation(147, 6);
			Match(input,Enum,Follow._Enum_in_enum_def553); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(147, 11);
			// SugarWalker.g:147:11: (attr= attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==Attribute))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:147:12: attr= attribute
				{
				DebugLocation(147, 16);
				PushFollow(Follow._attribute_in_enum_def558);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(147, 30);
			PushFollow(Follow._ident_in_enum_def564);
			a=ident();
			PopFollow();

			DebugLocation(147, 38);
			PushFollow(Follow._ident_list_in_enum_def568);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(148, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:153:1: class_def returns [Class value] : ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(153, 1);
		try
		{
			// SugarWalker.g:154:2: ( ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:154:4: ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(154, 4);
			DebugLocation(154, 6);
			Match(input,Class,Follow._Class_in_class_def588); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(154, 12);
			// SugarWalker.g:154:12: (attr= attribute )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==Attribute))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:154:13: attr= attribute
				{
				DebugLocation(154, 17);
				PushFollow(Follow._attribute_in_class_def593);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(154, 31);
			PushFollow(Follow._ident_in_class_def599);
			a=ident();
			PopFollow();

			DebugLocation(154, 38);
			// SugarWalker.g:154:38: (b= generic_parameter )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==Generic_Patameters))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:154:39: b= generic_parameter
				{
				DebugLocation(154, 40);
				PushFollow(Follow._generic_parameter_in_class_def604);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(154, 61);
			// SugarWalker.g:154:61: (c= func_args )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Func_Args))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:154:62: c= func_args
				{
				DebugLocation(154, 63);
				PushFollow(Follow._func_args_in_class_def611);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(154, 76);
			// SugarWalker.g:154:76: (d= ident_list )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==Ident_List))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:154:77: d= ident_list
				{
				DebugLocation(154, 78);
				PushFollow(Follow._ident_list_in_class_def618);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(154, 92);
			// SugarWalker.g:154:92: (e= global_block )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==Global_Block))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:154:93: e= global_block
				{
				DebugLocation(154, 94);
				PushFollow(Follow._global_block_in_class_def625);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(155, 2);

					value = new Class(a, b, c, d, e, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:160:1: type_name returns [string value] : ^( Type_IDENT ( 'const' )? ( 'unsigned' )? a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		string value = default(string);


		string a = default(string);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(160, 1);
		try
		{
			// SugarWalker.g:165:2: ( ^( Type_IDENT ( 'const' )? ( 'unsigned' )? a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:165:4: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* )
			{
			DebugLocation(165, 4);
			DebugLocation(165, 7);
			Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name653); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(166, 7);
			// SugarWalker.g:166:7: ( 'const' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==124))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:166:8: 'const'
				{
				DebugLocation(166, 8);
				Match(input,124,Follow._124_in_type_name662); 
				DebugLocation(166, 16);
				 value += "const "; 

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(167, 4);
			// SugarWalker.g:167:4: ( 'unsigned' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==145))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:167:5: 'unsigned'
				{
				DebugLocation(167, 5);
				Match(input,145,Follow._145_in_type_name672); 
				DebugLocation(167, 16);
				 value += "unsigned "; 

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(168, 8);
			PushFollow(Follow._ident_in_type_name686);
			a=ident();
			PopFollow();

			DebugLocation(168, 15);
			 value+=a; 
			DebugLocation(169, 5);
			// SugarWalker.g:169:5: ( '<' (b= type_name )* '>' )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==99))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:169:7: '<' (b= type_name )* '>'
				{
				DebugLocation(169, 7);
				Match(input,99,Follow._99_in_type_name696); 
				DebugLocation(169, 11);
				 value+="<"; bool isFirst = true; 
				DebugLocation(170, 6);
				// SugarWalker.g:170:6: (b= type_name )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==Type_IDENT))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:170:7: b= type_name
						{
						DebugLocation(170, 8);
						PushFollow(Follow._type_name_in_type_name708);
						b=type_name();
						PopFollow();

						DebugLocation(171, 3);

									if (!isFirst) value+=", ";
									isFirst = false;
									value+=b;
								

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(176, 3);
				Match(input,107,Follow._107_in_type_name718); 
				DebugLocation(176, 7);
				 value+=">"; 

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(177, 4);
			// SugarWalker.g:177:4: ( '*' | '[' ']' | '&' )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=4;
				try { DebugEnterDecision(24, false);
				switch (input.LA(1))
				{
				case 81:
					{
					alt24 = 1;
					}
					break;
				case 114:
					{
					alt24 = 2;
					}
					break;
				case 77:
					{
					alt24 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:177:6: '*'
					{
					DebugLocation(177, 6);
					Match(input,81,Follow._81_in_type_name729); 
					DebugLocation(177, 10);
					 value+="*"; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarWalker.g:178:6: '[' ']'
					{
					DebugLocation(178, 6);
					Match(input,114,Follow._114_in_type_name738); 
					DebugLocation(178, 10);
					Match(input,115,Follow._115_in_type_name740); 
					DebugLocation(178, 14);
					 value+="[]"; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarWalker.g:179:6: '&'
					{
					DebugLocation(179, 6);
					Match(input,77,Follow._77_in_type_name749); 
					DebugLocation(179, 10);
					 value+="&"; 

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:183:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 15);
		TraceIn("func_args", 15);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		Stmt a = default(Stmt);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(183, 1);
		try
		{
			// SugarWalker.g:188:2: ( ^( Func_Args (a= stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:188:4: ^( Func_Args (a= stmt_alloc )* )
			{
			DebugLocation(188, 4);
			DebugLocation(188, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args779); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(188, 16);
				// SugarWalker.g:188:16: (a= stmt_alloc )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if (((LA25_0>=Expr_Access && LA25_0<=Expr_Tuple)||LA25_0==IDENT||LA25_0==Match_Tuple||LA25_0==NUMBER||LA25_0==STRING||LA25_0==75||LA25_0==78||LA25_0==82||LA25_0==85||LA25_0==89||LA25_0==95||LA25_0==98||LA25_0==102||LA25_0==104||LA25_0==110||LA25_0==113||LA25_0==117||LA25_0==150||LA25_0==DOUBLE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:188:17: a= stmt_alloc
						{
						DebugLocation(188, 18);
						PushFollow(Follow._stmt_alloc_in_func_args784);
						a=stmt_alloc();
						PopFollow();

						DebugLocation(189, 2);

								var b = (ExprAlloc)a;
								if (b.Type == "auto")
								{
									b.Type = "decltype";
								}
								value.Add(b);
							

						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 15);
			LeaveRule("func_args", 15);
			LeaveRule_func_args();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:199:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 16);
		TraceIn("generic_parameter", 16);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(199, 1);
		try
		{
			// SugarWalker.g:204:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:204:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(204, 4);
			DebugLocation(204, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter811); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(204, 25);
				// SugarWalker.g:204:25: (a= ident )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==IDENT))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:204:26: a= ident
						{
						DebugLocation(204, 27);
						PushFollow(Follow._ident_in_generic_parameter816);
						a=ident();
						PopFollow();

						DebugLocation(204, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 16);
			LeaveRule("generic_parameter", 16);
			LeaveRule_generic_parameter();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:207:1: func_def returns [FuncDef value] : ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 17);
		TraceIn("func_def", 17);
		FuncDef value = default(FuncDef);


		CommonTree deconstructor = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		string b = default(string);
		List<string> x = default(List<string>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(207, 1);
		try
		{
			// SugarWalker.g:212:2: ( ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:212:4: ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(212, 4);
			DebugLocation(212, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def842); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(212, 15);
			// SugarWalker.g:212:15: (attr= attribute )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==Attribute))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:212:16: attr= attribute
				{
				DebugLocation(212, 20);
				PushFollow(Follow._attribute_in_func_def847);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(212, 33);
			// SugarWalker.g:212:33: (a= type_name )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==Type_IDENT))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:212:34: a= type_name
				{
				DebugLocation(212, 35);
				PushFollow(Follow._type_name_in_func_def854);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(212, 48);
			// SugarWalker.g:212:48: (deconstructor= '~' )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==152))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:212:49: deconstructor= '~'
				{
				DebugLocation(212, 62);
				deconstructor=(CommonTree)Match(input,152,Follow._152_in_func_def861); 

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(212, 70);
			PushFollow(Follow._ident_in_func_def867);
			b=ident();
			PopFollow();

			DebugLocation(212, 77);
			// SugarWalker.g:212:77: (x= generic_parameter )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==Generic_Patameters))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:212:78: x= generic_parameter
				{
				DebugLocation(212, 79);
				PushFollow(Follow._generic_parameter_in_func_def872);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(212, 101);
			// SugarWalker.g:212:101: (args= func_args )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==Func_Args))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:212:102: args= func_args
				{
				DebugLocation(212, 106);
				PushFollow(Follow._func_args_in_func_def880);
				args=func_args();
				PopFollow();

				DebugLocation(212, 117);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(213, 2);
			// SugarWalker.g:213:2: (e= stmt_block |f= expr )
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==Stmt_Block))
			{
				alt32 = 1;
			}
			else if (((LA32_0>=Expr_Access && LA32_0<=Expr_Tuple)||LA32_0==IDENT||LA32_0==Match_Tuple||LA32_0==NUMBER||LA32_0==STRING||LA32_0==75||LA32_0==78||LA32_0==82||LA32_0==85||LA32_0==89||LA32_0==95||LA32_0==98||LA32_0==102||LA32_0==104||LA32_0==110||LA32_0==113||LA32_0==117||LA32_0==150||LA32_0==DOUBLE))
			{
				alt32 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:213:4: e= stmt_block
				{
				DebugLocation(213, 5);
				PushFollow(Follow._stmt_block_in_func_def891);
				e=stmt_block();
				PopFollow();

				DebugLocation(214, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:228:4: f= expr
				{
				DebugLocation(228, 5);
				PushFollow(Follow._expr_in_func_def901);
				f=expr();
				PopFollow();

				DebugLocation(229, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if (a == "void" || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(32); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 17);
			LeaveRule("func_def", 17);
			LeaveRule_func_def();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:255:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 18);
		TraceIn("stmt_block", 18);
		StmtBlock value = default(StmtBlock);


		List<Stmt> a = default(List<Stmt>);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(255, 4);
		try
		{
			// SugarWalker.g:260:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:260:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(260, 4);
			DebugLocation(260, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block929); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(260, 17);
				// SugarWalker.g:260:17: (a= stmt )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if (((LA33_0>=Expr_Access && LA33_0<=Expr_Tuple)||LA33_0==IDENT||LA33_0==Match_Tuple||LA33_0==NUMBER||LA33_0==STRING||(LA33_0>=Stmt_Defer && LA33_0<=Stmt_While)||LA33_0==75||LA33_0==78||LA33_0==82||LA33_0==85||LA33_0==89||LA33_0==95||LA33_0==98||LA33_0==102||LA33_0==104||LA33_0==110||(LA33_0>=112 && LA33_0<=113)||LA33_0==117||LA33_0==150||LA33_0==DOUBLE))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:260:18: a= stmt
						{
						DebugLocation(260, 19);
						PushFollow(Follow._stmt_in_stmt_block934);
						a=stmt();
						PopFollow();

						DebugLocation(260, 25);
						 foreach (var x in a ) value.StmtList.Add(x); 

						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 18);
			LeaveRule("stmt_block", 18);
			LeaveRule_stmt_block();
		}
		DebugLocation(261, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:263:1: stmt returns [List<Stmt> value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_defer |b= stmt_translate );
	[GrammarRule("stmt")]
	private List<Stmt> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 19);
		TraceIn("stmt", 19);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);
		List<Stmt> b = default(List<Stmt>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(263, 1);
		try
		{
			// SugarWalker.g:268:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_defer |b= stmt_translate )
			int alt34=8;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 75:
			case 78:
			case 82:
			case 85:
			case 89:
			case 95:
			case 102:
			case 104:
			case 110:
			case 113:
			case 117:
			case 150:
			case DOUBLE:
				{
				alt34 = 1;
				}
				break;
			case 98:
				{
				int LA34_2 = input.LA(2);

				if ((LA34_2==DOWN))
				{
					int LA34_10 = input.LA(3);

					if (((LA34_10>=Expr_Access && LA34_10<=Expr_Tuple)||LA34_10==IDENT||LA34_10==Match_Tuple||LA34_10==NUMBER||LA34_10==STRING||LA34_10==75||LA34_10==78||LA34_10==82||LA34_10==85||LA34_10==89||LA34_10==95||LA34_10==98||LA34_10==102||LA34_10==104||LA34_10==110||LA34_10==113||LA34_10==117||LA34_10==150||LA34_10==DOUBLE))
					{
						alt34 = 1;
					}
					else if ((LA34_10==Ident_List))
					{
						alt34 = 8;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 34, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Stmt_Return:
				{
				alt34 = 2;
				}
				break;
			case Stmt_If:
			case Stmt_Unless:
				{
				alt34 = 3;
				}
				break;
			case Stmt_Loop:
			case Stmt_Until:
			case Stmt_While:
				{
				alt34 = 4;
				}
				break;
			case Stmt_For:
				{
				alt34 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt34 = 6;
				}
				break;
			case Stmt_Defer:
			case Stmt_Finally:
				{
				alt34 = 7;
				}
				break;
			case 112:
				{
				alt34 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:268:4: a= stmt_expr
				{
				DebugLocation(268, 5);
				PushFollow(Follow._stmt_expr_in_stmt965);
				a=stmt_expr();
				PopFollow();

				DebugLocation(268, 16);
				 value.Add(new StmtExpr(a)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:269:4: a= stmt_return
				{
				DebugLocation(269, 5);
				PushFollow(Follow._stmt_return_in_stmt974);
				a=stmt_return();
				PopFollow();

				DebugLocation(269, 18);
				 value.Add(a); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:270:4: a= stmt_if
				{
				DebugLocation(270, 5);
				PushFollow(Follow._stmt_if_in_stmt983);
				a=stmt_if();
				PopFollow();

				DebugLocation(270, 14);
				 value.Add(a); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:271:4: a= stmt_while
				{
				DebugLocation(271, 5);
				PushFollow(Follow._stmt_while_in_stmt992);
				a=stmt_while();
				PopFollow();

				DebugLocation(271, 17);
				 value.Add(a); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:272:4: a= stmt_for
				{
				DebugLocation(272, 5);
				PushFollow(Follow._stmt_for_in_stmt1001);
				a=stmt_for();
				PopFollow();

				DebugLocation(272, 15);
				 value.Add(a); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:273:4: a= stmt_try
				{
				DebugLocation(273, 5);
				PushFollow(Follow._stmt_try_in_stmt1010);
				a=stmt_try();
				PopFollow();

				DebugLocation(273, 15);
				 value.Add(a); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:274:4: a= stmt_defer
				{
				DebugLocation(274, 5);
				PushFollow(Follow._stmt_defer_in_stmt1019);
				a=stmt_defer();
				PopFollow();

				DebugLocation(274, 17);
				 value.Add(a); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:275:4: b= stmt_translate
				{
				DebugLocation(275, 5);
				PushFollow(Follow._stmt_translate_in_stmt1028);
				b=stmt_translate();
				PopFollow();

				DebugLocation(275, 21);
				 foreach (var x in b) value.Add(x); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 19);
			LeaveRule("stmt", 19);
			LeaveRule_stmt();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_translate();
	partial void LeaveRule_stmt_translate();

	// $ANTLR start "stmt_translate"
	// SugarWalker.g:278:1: stmt_translate returns [List<Stmt> value] : ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) );
	[GrammarRule("stmt_translate")]
	private List<Stmt> stmt_translate()
	{
		EnterRule_stmt_translate();
		EnterRule("stmt_translate", 20);
		TraceIn("stmt_translate", 20);
		List<Stmt> value = default(List<Stmt>);


		Expr a = default(Expr);
		Expr b = default(Expr);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt_translate");
		DebugLocation(278, 1);
		try
		{
			// SugarWalker.g:283:2: ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==112))
			{
				alt35 = 1;
			}
			else if ((LA35_0==98))
			{
				alt35 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:283:4: ^( '?=' a= expr b= expr )
				{
				DebugLocation(283, 4);
				DebugLocation(283, 6);
				Match(input,112,Follow._112_in_stmt_translate1051); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(283, 12);
				PushFollow(Follow._expr_in_stmt_translate1055);
				a=expr();
				PopFollow();

				DebugLocation(283, 19);
				PushFollow(Follow._expr_in_stmt_translate1059);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(284, 2);

						StmtBlock block = new StmtBlock();
						block.StmtList.Add(new StmtExpr(new ExprAssign(a, b)));
						StmtIf stmt_if = new StmtIf(new ExprBin("==", a, new ExprConst("nullptr", ConstType.Ident)), block, null);
						value.Add(stmt_if);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:290:4: ^( ':=' d= ident_list e= expr_list )
				{
				DebugLocation(290, 4);
				DebugLocation(290, 6);
				Match(input,98,Follow._98_in_stmt_translate1069); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(290, 12);
				PushFollow(Follow._ident_list_in_stmt_translate1073);
				d=ident_list();
				PopFollow();

				DebugLocation(290, 25);
				PushFollow(Follow._expr_list_in_stmt_translate1077);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(291, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new StmtExpr(new ExprAlloc("auto", new List<string> { d[i] }, new List<Expr>{ e[k] }, true)));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_translate", 20);
			LeaveRule("stmt_translate", 20);
			LeaveRule_stmt_translate();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_translate"); }
		return value;

	}
	// $ANTLR end "stmt_translate"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:301:1: stmt_defer returns [Stmt value] : ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) );
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 21);
		TraceIn("stmt_defer", 21);
		Stmt value = default(Stmt);


		List<Stmt> a = default(List<Stmt>);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(301, 1);
		try
		{
			// SugarWalker.g:302:2: ( ^( Stmt_Defer a= stmt ) | ^( Stmt_Finally a= stmt ) )
			int alt36=2;
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==Stmt_Defer))
			{
				alt36 = 1;
			}
			else if ((LA36_0==Stmt_Finally))
			{
				alt36 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:302:4: ^( Stmt_Defer a= stmt )
				{
				DebugLocation(302, 4);
				DebugLocation(302, 6);
				Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer1097); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(302, 18);
				PushFollow(Follow._stmt_in_stmt_defer1101);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(303, 2);

						value = new StmtDefer(a[0]);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:306:4: ^( Stmt_Finally a= stmt )
				{
				DebugLocation(306, 4);
				DebugLocation(306, 6);
				Match(input,Stmt_Finally,Follow._Stmt_Finally_in_stmt_defer1111); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(306, 20);
				PushFollow(Follow._stmt_in_stmt_defer1115);
				a=stmt();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(307, 2);

						value = new StmtFinally(a[0]);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 21);
			LeaveRule("stmt_defer", 21);
			LeaveRule_stmt_defer();
		}
		DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:312:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 22);
		TraceIn("stmt_expr", 22);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(312, 1);
		try
		{
			// SugarWalker.g:313:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt37=3;
			try { DebugEnterDecision(37, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt37 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cast:
			case Expr_Chain:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_List:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 75:
			case 78:
			case 82:
			case 85:
			case 89:
			case 95:
			case 98:
			case 102:
			case 104:
			case 110:
			case 113:
			case 117:
			case 150:
			case DOUBLE:
				{
				alt37 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt37 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:313:4: a= stmt_using
				{
				DebugLocation(313, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1136);
				a=stmt_using();
				PopFollow();

				DebugLocation(313, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:314:4: b= expr
				{
				DebugLocation(314, 5);
				PushFollow(Follow._expr_in_stmt_expr1145);
				b=expr();
				PopFollow();

				DebugLocation(314, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:315:4: c= stmt_typedef
				{
				DebugLocation(315, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1154);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(315, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 22);
			LeaveRule("stmt_expr", 22);
			LeaveRule_stmt_expr();
		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:318:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 23);
		TraceIn("stmt_using", 23);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(318, 1);
		try
		{
			// SugarWalker.g:323:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:323:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(323, 4);
			DebugLocation(323, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1177); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(323, 17);
				// SugarWalker.g:323:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=3;
					try { DebugEnterDecision(38, false);
					int LA38_0 = input.LA(1);

					if ((LA38_0==IDENT))
					{
						alt38 = 1;
					}
					else if ((LA38_0==136))
					{
						alt38 = 2;
					}


					} finally { DebugExitDecision(38); }
					switch ( alt38 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:323:19: a= ident
						{
						DebugLocation(323, 20);
						PushFollow(Follow._ident_in_stmt_using1183);
						a=ident();
						PopFollow();

						DebugLocation(323, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:324:10: b= 'namespace'
						{
						DebugLocation(324, 11);
						b=(CommonTree)Match(input,136,Follow._136_in_stmt_using1198); 
						DebugLocation(324, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop38;
					}
				}

				loop38:
					;

				} finally { DebugExitSubRule(38); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 23);
			LeaveRule("stmt_using", 23);
			LeaveRule_stmt_using();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:327:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 24);
		TraceIn("stmt_typedef", 24);
		StmtTypeDef value = default(StmtTypeDef);


		string a = default(string);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(327, 1);
		try
		{
			// SugarWalker.g:328:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:328:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(328, 4);
			DebugLocation(328, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1219); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(328, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1223);
			a=type_name();
			PopFollow();

			DebugLocation(328, 32);
			PushFollow(Follow._ident_in_stmt_typedef1227);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(329, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 24);
			LeaveRule("stmt_typedef", 24);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:334:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 25);
		TraceIn("stmt_alloc", 25);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(334, 1);
		try
		{
			// SugarWalker.g:335:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:335:4: a= expr
			{
			DebugLocation(335, 5);
			PushFollow(Follow._expr_in_stmt_alloc1248);
			a=expr();
			PopFollow();

			DebugLocation(335, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 25);
			LeaveRule("stmt_alloc", 25);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:338:1: stmt_if returns [Stmt value] : ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) );
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 26);
		TraceIn("stmt_if", 26);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(338, 1);
		try
		{
			// SugarWalker.g:339:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) | ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? ) )
			int alt41=2;
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==Stmt_If))
			{
				alt41 = 1;
			}
			else if ((LA41_0==Stmt_Unless))
			{
				alt41 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:339:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(339, 4);
				DebugLocation(339, 6);
				Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1266); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(339, 15);
				PushFollow(Follow._expr_in_stmt_if1270);
				a=expr();
				PopFollow();

				DebugLocation(339, 22);
				PushFollow(Follow._stmt_block_in_stmt_if1274);
				b=stmt_block();
				PopFollow();

				DebugLocation(339, 34);
				// SugarWalker.g:339:34: (c= stmt_block )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==Stmt_Block))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:339:35: c= stmt_block
					{
					DebugLocation(339, 36);
					PushFollow(Follow._stmt_block_in_stmt_if1279);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(39); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(340, 2);

						value = new StmtIf(a, b, c);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:343:4: ^( Stmt_Unless a= expr b= stmt_block (c= stmt_block )? )
				{
				DebugLocation(343, 4);
				DebugLocation(343, 6);
				Match(input,Stmt_Unless,Follow._Stmt_Unless_in_stmt_if1291); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(343, 19);
				PushFollow(Follow._expr_in_stmt_if1295);
				a=expr();
				PopFollow();

				DebugLocation(343, 26);
				PushFollow(Follow._stmt_block_in_stmt_if1299);
				b=stmt_block();
				PopFollow();

				DebugLocation(343, 38);
				// SugarWalker.g:343:38: (c= stmt_block )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==Stmt_Block))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:343:39: c= stmt_block
					{
					DebugLocation(343, 40);
					PushFollow(Follow._stmt_block_in_stmt_if1304);
					c=stmt_block();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(40); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(344, 2);

						value = new StmtIf(new ExprPrefix("!", new ExprBracket(a)), b, c);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 26);
			LeaveRule("stmt_if", 26);
			LeaveRule_stmt_if();
		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:349:1: stmt_while returns [Stmt value] : ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) );
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 27);
		TraceIn("stmt_while", 27);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(349, 1);
		try
		{
			// SugarWalker.g:350:2: ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Until a= expr b= stmt_block ) | ^( Stmt_Loop (a= expr )? b= stmt_block ) )
			int alt43=3;
			try { DebugEnterDecision(43, false);
			switch (input.LA(1))
			{
			case Stmt_While:
				{
				alt43 = 1;
				}
				break;
			case Stmt_Until:
				{
				alt43 = 2;
				}
				break;
			case Stmt_Loop:
				{
				alt43 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:350:4: ^( Stmt_While a= expr b= stmt_block )
				{
				DebugLocation(350, 4);
				DebugLocation(350, 6);
				Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1326); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(350, 18);
				PushFollow(Follow._expr_in_stmt_while1330);
				a=expr();
				PopFollow();

				DebugLocation(350, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1334);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(351, 2);

						value = new StmtWhile(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:354:4: ^( Stmt_Until a= expr b= stmt_block )
				{
				DebugLocation(354, 4);
				DebugLocation(354, 6);
				Match(input,Stmt_Until,Follow._Stmt_Until_in_stmt_while1344); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(354, 18);
				PushFollow(Follow._expr_in_stmt_while1348);
				a=expr();
				PopFollow();

				DebugLocation(354, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1352);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(355, 2);

						value = new StmtWhile(new ExprPrefix("!", new ExprBracket(a)), b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:358:4: ^( Stmt_Loop (a= expr )? b= stmt_block )
				{
				DebugLocation(358, 4);
				DebugLocation(358, 6);
				Match(input,Stmt_Loop,Follow._Stmt_Loop_in_stmt_while1362); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(358, 16);
				// SugarWalker.g:358:16: (a= expr )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if (((LA42_0>=Expr_Access && LA42_0<=Expr_Tuple)||LA42_0==IDENT||LA42_0==Match_Tuple||LA42_0==NUMBER||LA42_0==STRING||LA42_0==75||LA42_0==78||LA42_0==82||LA42_0==85||LA42_0==89||LA42_0==95||LA42_0==98||LA42_0==102||LA42_0==104||LA42_0==110||LA42_0==113||LA42_0==117||LA42_0==150||LA42_0==DOUBLE))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:358:17: a= expr
					{
					DebugLocation(358, 18);
					PushFollow(Follow._expr_in_stmt_while1367);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(358, 27);
				PushFollow(Follow._stmt_block_in_stmt_while1373);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(359, 2);

						if (a == null)
						{
							value = new StmtWhile(new ExprConst("true", ConstType.Ident), b);
						}
						else
						{
							/*Expr iter = new ExprConst("_t_loop_iterator", ConstType.Ident);
							Expr start = new ExprAlloc("auto", "_t_loop_iterator", a, true);
							Expr condition = new ExprBin("!=", iter, new ExprConst("0", ConstType.Number));
							Expr next = new ExprPrefix("--", iter);
							value = new StmtFor(start, condition, next, b);*/
							throw new Exception("Not Implement!");
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 27);
			LeaveRule("stmt_while", 27);
			LeaveRule_stmt_while();
		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarWalker.g:376:1: for_item returns [ForItem value] : ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_When b= expr ) );
	[GrammarRule("for_item")]
	private ForItem for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 28);
		TraceIn("for_item", 28);
		ForItem value = default(ForItem);


		string a = default(string);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr d = default(Expr);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(376, 1);
		try
		{
			// SugarWalker.g:377:2: ( ^( For_Item_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? ) | ^( For_Item_Each a= ident b= expr ) | ^( For_Item_When b= expr ) )
			int alt46=4;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case For_Item_To:
				{
				alt46 = 1;
				}
				break;
			case For_Item_Down_To:
				{
				alt46 = 2;
				}
				break;
			case For_Item_Each:
				{
				alt46 = 3;
				}
				break;
			case For_Item_When:
				{
				alt46 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:377:4: ^( For_Item_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(377, 4);
				DebugLocation(377, 6);
				Match(input,For_Item_To,Follow._For_Item_To_in_for_item1393); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(377, 19);
				PushFollow(Follow._ident_in_for_item1397);
				a=ident();
				PopFollow();

				DebugLocation(377, 27);
				PushFollow(Follow._expr_in_for_item1401);
				b=expr();
				PopFollow();

				DebugLocation(377, 34);
				PushFollow(Follow._expr_in_for_item1405);
				c=expr();
				PopFollow();

				DebugLocation(377, 40);
				// SugarWalker.g:377:40: (d= expr )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if (((LA44_0>=Expr_Access && LA44_0<=Expr_Tuple)||LA44_0==IDENT||LA44_0==Match_Tuple||LA44_0==NUMBER||LA44_0==STRING||LA44_0==75||LA44_0==78||LA44_0==82||LA44_0==85||LA44_0==89||LA44_0==95||LA44_0==98||LA44_0==102||LA44_0==104||LA44_0==110||LA44_0==113||LA44_0==117||LA44_0==150||LA44_0==DOUBLE))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:377:41: d= expr
					{
					DebugLocation(377, 42);
					PushFollow(Follow._expr_in_for_item1410);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(44); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(378, 2);

						value = new ForItemTo(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:381:4: ^( For_Item_Down_To a= ident b= expr c= expr (d= expr )? )
				{
				DebugLocation(381, 4);
				DebugLocation(381, 6);
				Match(input,For_Item_Down_To,Follow._For_Item_Down_To_in_for_item1422); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(381, 24);
				PushFollow(Follow._ident_in_for_item1426);
				a=ident();
				PopFollow();

				DebugLocation(381, 32);
				PushFollow(Follow._expr_in_for_item1430);
				b=expr();
				PopFollow();

				DebugLocation(381, 39);
				PushFollow(Follow._expr_in_for_item1434);
				c=expr();
				PopFollow();

				DebugLocation(381, 45);
				// SugarWalker.g:381:45: (d= expr )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if (((LA45_0>=Expr_Access && LA45_0<=Expr_Tuple)||LA45_0==IDENT||LA45_0==Match_Tuple||LA45_0==NUMBER||LA45_0==STRING||LA45_0==75||LA45_0==78||LA45_0==82||LA45_0==85||LA45_0==89||LA45_0==95||LA45_0==98||LA45_0==102||LA45_0==104||LA45_0==110||LA45_0==113||LA45_0==117||LA45_0==150||LA45_0==DOUBLE))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:381:46: d= expr
					{
					DebugLocation(381, 47);
					PushFollow(Follow._expr_in_for_item1439);
					d=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(45); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(382, 2);

						value = new ForItemDownTo(a, b, c, d);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:385:4: ^( For_Item_Each a= ident b= expr )
				{
				DebugLocation(385, 4);
				DebugLocation(385, 6);
				Match(input,For_Item_Each,Follow._For_Item_Each_in_for_item1451); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(385, 21);
				PushFollow(Follow._ident_in_for_item1455);
				a=ident();
				PopFollow();

				DebugLocation(385, 29);
				PushFollow(Follow._expr_in_for_item1459);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(386, 2);

						value = new ForItemEach(a, b);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:389:4: ^( For_Item_When b= expr )
				{
				DebugLocation(389, 4);
				DebugLocation(389, 6);
				Match(input,For_Item_When,Follow._For_Item_When_in_for_item1469); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(389, 21);
				PushFollow(Follow._expr_in_for_item1473);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(390, 2);

						value = new ForItemWhen(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item", 28);
			LeaveRule("for_item", 28);
			LeaveRule_for_item();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return value;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_for_item_list();
	partial void LeaveRule_for_item_list();

	// $ANTLR start "for_item_list"
	// SugarWalker.g:395:1: for_item_list returns [List<ForItem> value] : (a= for_item )+ ;
	[GrammarRule("for_item_list")]
	private List<ForItem> for_item_list()
	{
		EnterRule_for_item_list();
		EnterRule("for_item_list", 29);
		TraceIn("for_item_list", 29);
		List<ForItem> value = default(List<ForItem>);


		ForItem a = default(ForItem);


			value = new List<ForItem>();

		try { DebugEnterRule(GrammarFileName, "for_item_list");
		DebugLocation(395, 1);
		try
		{
			// SugarWalker.g:400:2: ( (a= for_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:400:4: (a= for_item )+
			{
			DebugLocation(400, 4);
			// SugarWalker.g:400:4: (a= for_item )+
			int cnt47=0;
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if (((LA47_0>=For_Item_Down_To && LA47_0<=For_Item_When)))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:400:5: a= for_item
					{
					DebugLocation(400, 6);
					PushFollow(Follow._for_item_in_for_item_list1500);
					a=for_item();
					PopFollow();

					DebugLocation(400, 16);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt47 >= 1)
						goto loop47;

					EarlyExitException eee47 = new EarlyExitException( 47, input );
					DebugRecognitionException(eee47);
					throw eee47;
				}
				cnt47++;
			}
			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("for_item_list", 29);
			LeaveRule("for_item_list", 29);
			LeaveRule_for_item_list();
		}
		DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item_list"); }
		return value;

	}
	// $ANTLR end "for_item_list"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:403:1: stmt_for returns [Stmt value] : ^( Stmt_For a= for_item_list b= stmt_block ) ;
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 30);
		TraceIn("stmt_for", 30);
		Stmt value = default(Stmt);


		List<ForItem> a = default(List<ForItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(403, 1);
		try
		{
			// SugarWalker.g:404:2: ( ^( Stmt_For a= for_item_list b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:404:4: ^( Stmt_For a= for_item_list b= stmt_block )
			{
			DebugLocation(404, 4);
			DebugLocation(404, 6);
			Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1521); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(404, 16);
			PushFollow(Follow._for_item_list_in_stmt_for1525);
			a=for_item_list();
			PopFollow();

			DebugLocation(404, 32);
			PushFollow(Follow._stmt_block_in_stmt_for1529);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(405, 2);

					value = new StmtFor(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 30);
			LeaveRule("stmt_for", 30);
			LeaveRule_stmt_for();
		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:410:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 31);
		TraceIn("stmt_try", 31);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Stmt b = default(Stmt);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(410, 1);
		try
		{
			// SugarWalker.g:411:2: ( ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:411:4: ^( Stmt_Try a= stmt_block b= stmt_alloc c= stmt_block )
			{
			DebugLocation(411, 4);
			DebugLocation(411, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1549); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(411, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1553);
			a=stmt_block();
			PopFollow();

			DebugLocation(411, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try1557);
			b=stmt_alloc();
			PopFollow();

			DebugLocation(411, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1561);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(412, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 31);
			LeaveRule("stmt_try", 31);
			LeaveRule_stmt_try();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:417:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 32);
		TraceIn("stmt_return", 32);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(417, 1);
		try
		{
			// SugarWalker.g:418:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:418:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(418, 4);
			DebugLocation(418, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return1581); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(418, 18);
				// SugarWalker.g:418:18: (a= expr )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if (((LA48_0>=Expr_Access && LA48_0<=Expr_Tuple)||LA48_0==IDENT||LA48_0==Match_Tuple||LA48_0==NUMBER||LA48_0==STRING||LA48_0==75||LA48_0==78||LA48_0==82||LA48_0==85||LA48_0==89||LA48_0==95||LA48_0==98||LA48_0==102||LA48_0==104||LA48_0==110||LA48_0==113||LA48_0==117||LA48_0==150||LA48_0==DOUBLE))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:418:19: a= expr
					{
					DebugLocation(418, 20);
					PushFollow(Follow._expr_in_stmt_return1586);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(419, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 32);
			LeaveRule("stmt_return", 32);
			LeaveRule_stmt_return();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:424:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 33);
		TraceIn("ident", 33);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(424, 1);
		try
		{
			// SugarWalker.g:429:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:429:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(429, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1614); 
			DebugLocation(429, 12);
			 value += a.Text; 
			DebugLocation(429, 34);
			// SugarWalker.g:429:34: ( '::' a= IDENT )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==97))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:429:35: '::' a= IDENT
					{
					DebugLocation(429, 35);
					Match(input,97,Follow._97_in_ident1619); 
					DebugLocation(429, 41);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1623); 
					DebugLocation(429, 48);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 33);
			LeaveRule("ident", 33);
			LeaveRule_ident();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:432:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 34);
		TraceIn("ident_list", 34);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(432, 1);
		try
		{
			// SugarWalker.g:437:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:437:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(437, 4);
			DebugLocation(437, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list1648); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(437, 17);
				// SugarWalker.g:437:17: (a= ident )*
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					int LA50_0 = input.LA(1);

					if ((LA50_0==IDENT))
					{
						alt50 = 1;
					}


					} finally { DebugExitDecision(50); }
					switch ( alt50 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:437:18: a= ident
						{
						DebugLocation(437, 19);
						PushFollow(Follow._ident_in_ident_list1653);
						a=ident();
						PopFollow();

						DebugLocation(437, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop50;
					}
				}

				loop50:
					;

				} finally { DebugExitSubRule(50); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 34);
			LeaveRule("ident_list", 34);
			LeaveRule_ident_list();
		}
		DebugLocation(438, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:440:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 35);
		TraceIn("alloc_expr", 35);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(440, 1);
		try
		{
			// SugarWalker.g:441:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==Expr_Alloc_Equal))
			{
				alt53 = 1;
			}
			else if ((LA53_0==Expr_Alloc_Bracket))
			{
				alt53 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:441:4: ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(441, 4);
				DebugLocation(441, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr1675); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(441, 24);
				PushFollow(Follow._type_name_in_alloc_expr1679);
				a=type_name();
				PopFollow();

				DebugLocation(441, 36);
				PushFollow(Follow._ident_list_in_alloc_expr1683);
				b=ident_list();
				PopFollow();

				DebugLocation(441, 48);
				// SugarWalker.g:441:48: (c= expr_list )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if (((LA51_0>=Expr_Access && LA51_0<=Expr_Tuple)||LA51_0==IDENT||LA51_0==Match_Tuple||LA51_0==NUMBER||LA51_0==STRING||LA51_0==75||LA51_0==78||LA51_0==82||LA51_0==85||LA51_0==89||LA51_0==95||LA51_0==98||LA51_0==102||LA51_0==104||LA51_0==110||LA51_0==113||LA51_0==117||LA51_0==150||LA51_0==DOUBLE))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:441:49: c= expr_list
					{
					DebugLocation(441, 50);
					PushFollow(Follow._expr_list_in_alloc_expr1688);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(442, 2);

						value = new ExprAlloc(a, b, c, true);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:445:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(445, 4);
				DebugLocation(445, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr1700); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(445, 26);
				PushFollow(Follow._type_name_in_alloc_expr1704);
				a=type_name();
				PopFollow();

				DebugLocation(445, 38);
				PushFollow(Follow._ident_list_in_alloc_expr1708);
				b=ident_list();
				PopFollow();

				DebugLocation(445, 50);
				// SugarWalker.g:445:50: (c= expr_list )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if (((LA52_0>=Expr_Access && LA52_0<=Expr_Tuple)||LA52_0==IDENT||LA52_0==Match_Tuple||LA52_0==NUMBER||LA52_0==STRING||LA52_0==75||LA52_0==78||LA52_0==82||LA52_0==85||LA52_0==89||LA52_0==95||LA52_0==98||LA52_0==102||LA52_0==104||LA52_0==110||LA52_0==113||LA52_0==117||LA52_0==150||LA52_0==DOUBLE))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:445:51: c= expr_list
					{
					DebugLocation(445, 52);
					PushFollow(Follow._expr_list_in_alloc_expr1713);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(52); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(446, 2);

						value = new ExprAlloc(a, b, c, false);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 35);
			LeaveRule("alloc_expr", 35);
			LeaveRule_alloc_expr();
		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:451:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 36);
		TraceIn("expr_tuple", 36);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(451, 1);
		try
		{
			// SugarWalker.g:456:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:456:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(456, 4);
			DebugLocation(456, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple1740); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(456, 17);
			// SugarWalker.g:456:17: (a= expr )+
			int cnt54=0;
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if (((LA54_0>=Expr_Access && LA54_0<=Expr_Tuple)||LA54_0==IDENT||LA54_0==Match_Tuple||LA54_0==NUMBER||LA54_0==STRING||LA54_0==75||LA54_0==78||LA54_0==82||LA54_0==85||LA54_0==89||LA54_0==95||LA54_0==98||LA54_0==102||LA54_0==104||LA54_0==110||LA54_0==113||LA54_0==117||LA54_0==150||LA54_0==DOUBLE))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:456:18: a= expr
					{
					DebugLocation(456, 19);
					PushFollow(Follow._expr_in_expr_tuple1745);
					a=expr();
					PopFollow();

					DebugLocation(456, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt54 >= 1)
						goto loop54;

					EarlyExitException eee54 = new EarlyExitException( 54, input );
					DebugRecognitionException(eee54);
					throw eee54;
				}
				cnt54++;
			}
			loop54:
				;

			} finally { DebugExitSubRule(54); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 36);
			LeaveRule("expr_tuple", 36);
			LeaveRule_expr_tuple();
		}
		DebugLocation(457, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:459:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 37);
		TraceIn("match_tuple", 37);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(459, 1);
		try
		{
			// SugarWalker.g:464:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:464:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(464, 4);
			DebugLocation(464, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple1772); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(464, 18);
				// SugarWalker.g:464:18: (a= expr )*
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=2;
					try { DebugEnterDecision(55, false);
					int LA55_0 = input.LA(1);

					if (((LA55_0>=Expr_Access && LA55_0<=Expr_Tuple)||LA55_0==IDENT||LA55_0==Match_Tuple||LA55_0==NUMBER||LA55_0==STRING||LA55_0==75||LA55_0==78||LA55_0==82||LA55_0==85||LA55_0==89||LA55_0==95||LA55_0==98||LA55_0==102||LA55_0==104||LA55_0==110||LA55_0==113||LA55_0==117||LA55_0==150||LA55_0==DOUBLE))
					{
						alt55 = 1;
					}


					} finally { DebugExitDecision(55); }
					switch ( alt55 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:464:19: a= expr
						{
						DebugLocation(464, 20);
						PushFollow(Follow._expr_in_match_tuple1777);
						a=expr();
						PopFollow();

						DebugLocation(464, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop55;
					}
				}

				loop55:
					;

				} finally { DebugExitSubRule(55); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 37);
			LeaveRule("match_tuple", 37);
			LeaveRule_match_tuple();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:467:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 38);
		TraceIn("expr_list", 38);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(467, 1);
		try
		{
			// SugarWalker.g:472:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:472:4: (a= expr )+
			{
			DebugLocation(472, 4);
			// SugarWalker.g:472:4: (a= expr )+
			int cnt56=0;
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if (((LA56_0>=Expr_Access && LA56_0<=Expr_Tuple)||LA56_0==IDENT||LA56_0==Match_Tuple||LA56_0==NUMBER||LA56_0==STRING||LA56_0==75||LA56_0==78||LA56_0==82||LA56_0==85||LA56_0==89||LA56_0==95||LA56_0==98||LA56_0==102||LA56_0==104||LA56_0==110||LA56_0==113||LA56_0==117||LA56_0==150||LA56_0==DOUBLE))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:472:5: a= expr
					{
					DebugLocation(472, 6);
					PushFollow(Follow._expr_in_expr_list1805);
					a=expr();
					PopFollow();

					DebugLocation(472, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt56 >= 1)
						goto loop56;

					EarlyExitException eee56 = new EarlyExitException( 56, input );
					DebugRecognitionException(eee56);
					throw eee56;
				}
				cnt56++;
			}
			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 38);
			LeaveRule("expr_list", 38);
			LeaveRule_expr_list();
		}
		DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:475:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 39);
		TraceIn("call_expr", 39);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(475, 1);
		try
		{
			// SugarWalker.g:476:2: ( ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:476:4: ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? )
			{
			DebugLocation(476, 4);
			DebugLocation(476, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr1825); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(476, 17);
			PushFollow(Follow._expr_in_call_expr1829);
			a=expr();
			PopFollow();

			DebugLocation(476, 23);
			// SugarWalker.g:476:23: (b= generic_parameter )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==Generic_Patameters))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:476:24: b= generic_parameter
				{
				DebugLocation(476, 25);
				PushFollow(Follow._generic_parameter_in_call_expr1834);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(476, 46);
			// SugarWalker.g:476:46: (c= expr_list )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if (((LA58_0>=Expr_Access && LA58_0<=Expr_Tuple)||LA58_0==IDENT||LA58_0==Match_Tuple||LA58_0==NUMBER||LA58_0==STRING||LA58_0==75||LA58_0==78||LA58_0==82||LA58_0==85||LA58_0==89||LA58_0==95||LA58_0==98||LA58_0==102||LA58_0==104||LA58_0==110||LA58_0==113||LA58_0==117||LA58_0==150||LA58_0==DOUBLE))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:476:47: c= expr_list
				{
				DebugLocation(476, 48);
				PushFollow(Follow._expr_list_in_call_expr1841);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(477, 2);

					value = new ExprCall(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 39);
			LeaveRule("call_expr", 39);
			LeaveRule_call_expr();
		}
		DebugLocation(480, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:482:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 40);
		TraceIn("dict_expr", 40);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(482, 1);
		try
		{
			// SugarWalker.g:483:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:483:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(483, 4);
			DebugLocation(483, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr1863); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(483, 17);
			PushFollow(Follow._expr_in_dict_expr1867);
			a=expr();
			PopFollow();

			DebugLocation(483, 23);
			// SugarWalker.g:483:23: (b= expr_list )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if (((LA59_0>=Expr_Access && LA59_0<=Expr_Tuple)||LA59_0==IDENT||LA59_0==Match_Tuple||LA59_0==NUMBER||LA59_0==STRING||LA59_0==75||LA59_0==78||LA59_0==82||LA59_0==85||LA59_0==89||LA59_0==95||LA59_0==98||LA59_0==102||LA59_0==104||LA59_0==110||LA59_0==113||LA59_0==117||LA59_0==150||LA59_0==DOUBLE))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:483:24: b= expr_list
				{
				DebugLocation(483, 25);
				PushFollow(Follow._expr_list_in_dict_expr1872);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(59); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(484, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 40);
			LeaveRule("dict_expr", 40);
			LeaveRule_dict_expr();
		}
		DebugLocation(487, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:489:1: lambda_expr returns [ExprLambda value] : ( ^( Expr_Lambda '->' (b= func_args )? a= expr ) | ^( Expr_Lambda '=>' (b= func_args )? a= expr ) );
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 41);
		TraceIn("lambda_expr", 41);
		ExprLambda value = default(ExprLambda);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(489, 1);
		try
		{
			// SugarWalker.g:490:2: ( ^( Expr_Lambda '->' (b= func_args )? a= expr ) | ^( Expr_Lambda '=>' (b= func_args )? a= expr ) )
			int alt62=2;
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==Expr_Lambda))
			{
				int LA62_1 = input.LA(2);

				if ((LA62_1==DOWN))
				{
					int LA62_2 = input.LA(3);

					if ((LA62_2==90))
					{
						alt62 = 1;
					}
					else if ((LA62_2==106))
					{
						alt62 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 62, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 62, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:490:4: ^( Expr_Lambda '->' (b= func_args )? a= expr )
				{
				DebugLocation(490, 4);
				DebugLocation(490, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr1894); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(490, 18);
				Match(input,90,Follow._90_in_lambda_expr1896); 
				DebugLocation(490, 23);
				// SugarWalker.g:490:23: (b= func_args )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==Func_Args))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:490:24: b= func_args
					{
					DebugLocation(490, 25);
					PushFollow(Follow._func_args_in_lambda_expr1901);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(60); }

				DebugLocation(490, 39);
				PushFollow(Follow._expr_in_lambda_expr1907);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(491, 2);

						value = new ExprLambda(a, b, true);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:494:4: ^( Expr_Lambda '=>' (b= func_args )? a= expr )
				{
				DebugLocation(494, 4);
				DebugLocation(494, 6);
				Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr1917); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(494, 18);
				Match(input,106,Follow._106_in_lambda_expr1919); 
				DebugLocation(494, 23);
				// SugarWalker.g:494:23: (b= func_args )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==Func_Args))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:494:24: b= func_args
					{
					DebugLocation(494, 25);
					PushFollow(Follow._func_args_in_lambda_expr1924);
					b=func_args();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(61); }

				DebugLocation(494, 39);
				PushFollow(Follow._expr_in_lambda_expr1930);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(495, 2);

						value = new ExprLambda(a, b, false);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 41);
			LeaveRule("lambda_expr", 41);
			LeaveRule_lambda_expr();
		}
		DebugLocation(498, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:500:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 42);
		TraceIn("new_expr", 42);
		Expr value = default(Expr);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(500, 1);
		try
		{
			// SugarWalker.g:501:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt64=2;
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==Expr_New_Type))
			{
				alt64 = 1;
			}
			else if ((LA64_0==Expr_New_Array))
			{
				alt64 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:501:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(501, 4);
				DebugLocation(501, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr1950); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(501, 21);
				PushFollow(Follow._type_name_in_new_expr1954);
				a=type_name();
				PopFollow();

				DebugLocation(501, 33);
				// SugarWalker.g:501:33: (b= expr_list )?
				int alt63=2;
				try { DebugEnterSubRule(63);
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if (((LA63_0>=Expr_Access && LA63_0<=Expr_Tuple)||LA63_0==IDENT||LA63_0==Match_Tuple||LA63_0==NUMBER||LA63_0==STRING||LA63_0==75||LA63_0==78||LA63_0==82||LA63_0==85||LA63_0==89||LA63_0==95||LA63_0==98||LA63_0==102||LA63_0==104||LA63_0==110||LA63_0==113||LA63_0==117||LA63_0==150||LA63_0==DOUBLE))
				{
					alt63 = 1;
				}
				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:501:33: b= expr_list
					{
					DebugLocation(501, 33);
					PushFollow(Follow._expr_list_in_new_expr1958);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(63); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(502, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:505:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(505, 4);
				DebugLocation(505, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr1969); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(505, 22);
				PushFollow(Follow._type_name_in_new_expr1973);
				a=type_name();
				PopFollow();

				DebugLocation(505, 34);
				PushFollow(Follow._expr_list_in_new_expr1977);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(506, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 42);
			LeaveRule("new_expr", 42);
			LeaveRule_new_expr();
		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:511:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 43);
		TraceIn("call_with_expr", 43);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(511, 1);
		try
		{
			// SugarWalker.g:512:2: ( ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:512:4: ^( Expr_Call_With a= expr b= ident (c= expr_list )? )
			{
			DebugLocation(512, 4);
			DebugLocation(512, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr1997); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(512, 22);
			PushFollow(Follow._expr_in_call_with_expr2001);
			a=expr();
			PopFollow();

			DebugLocation(512, 29);
			PushFollow(Follow._ident_in_call_with_expr2005);
			b=ident();
			PopFollow();

			DebugLocation(512, 37);
			// SugarWalker.g:512:37: (c= expr_list )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if (((LA65_0>=Expr_Access && LA65_0<=Expr_Tuple)||LA65_0==IDENT||LA65_0==Match_Tuple||LA65_0==NUMBER||LA65_0==STRING||LA65_0==75||LA65_0==78||LA65_0==82||LA65_0==85||LA65_0==89||LA65_0==95||LA65_0==98||LA65_0==102||LA65_0==104||LA65_0==110||LA65_0==113||LA65_0==117||LA65_0==150||LA65_0==DOUBLE))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:512:37: c= expr_list
				{
				DebugLocation(512, 37);
				PushFollow(Follow._expr_list_in_call_with_expr2009);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(65); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(513, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b, ConstType.Ident), null, Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 43);
			LeaveRule("call_with_expr", 43);
			LeaveRule_call_with_expr();
		}
		DebugLocation(525, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarWalker.g:527:1: cast_expr returns [ExprCast value] : ^( Expr_Cast a= type_name b= expr ) ;
	[GrammarRule("cast_expr")]
	private ExprCast cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 44);
		TraceIn("cast_expr", 44);
		ExprCast value = default(ExprCast);


		string a = default(string);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(527, 1);
		try
		{
			// SugarWalker.g:528:2: ( ^( Expr_Cast a= type_name b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:528:4: ^( Expr_Cast a= type_name b= expr )
			{
			DebugLocation(528, 4);
			DebugLocation(528, 6);
			Match(input,Expr_Cast,Follow._Expr_Cast_in_cast_expr2030); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(528, 17);
			PushFollow(Follow._type_name_in_cast_expr2034);
			a=type_name();
			PopFollow();

			DebugLocation(528, 29);
			PushFollow(Follow._expr_in_cast_expr2038);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(529, 2);

					value = new ExprCast(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("cast_expr", 44);
			LeaveRule("cast_expr", 44);
			LeaveRule_cast_expr();
		}
		DebugLocation(532, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return value;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarWalker.g:534:1: list_expr returns [ExprList value] : ^( Expr_List (a= expr_list )? ) ;
	[GrammarRule("list_expr")]
	private ExprList list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 45);
		TraceIn("list_expr", 45);
		ExprList value = default(ExprList);


		List<Expr> a = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(534, 1);
		try
		{
			// SugarWalker.g:535:2: ( ^( Expr_List (a= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:535:4: ^( Expr_List (a= expr_list )? )
			{
			DebugLocation(535, 4);
			DebugLocation(535, 6);
			Match(input,Expr_List,Follow._Expr_List_in_list_expr2058); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(535, 17);
				// SugarWalker.g:535:17: (a= expr_list )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if (((LA66_0>=Expr_Access && LA66_0<=Expr_Tuple)||LA66_0==IDENT||LA66_0==Match_Tuple||LA66_0==NUMBER||LA66_0==STRING||LA66_0==75||LA66_0==78||LA66_0==82||LA66_0==85||LA66_0==89||LA66_0==95||LA66_0==98||LA66_0==102||LA66_0==104||LA66_0==110||LA66_0==113||LA66_0==117||LA66_0==150||LA66_0==DOUBLE))
				{
					alt66 = 1;
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:535:17: a= expr_list
					{
					DebugLocation(535, 17);
					PushFollow(Follow._expr_list_in_list_expr2062);
					a=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(66); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(536, 2);

					value = new ExprList(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("list_expr", 45);
			LeaveRule("list_expr", 45);
			LeaveRule_list_expr();
		}
		DebugLocation(539, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return value;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_chain_expr();
	partial void LeaveRule_chain_expr();

	// $ANTLR start "chain_expr"
	// SugarWalker.g:541:1: chain_expr returns [Expr value] : ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) ;
	[GrammarRule("chain_expr")]
	private Expr chain_expr()
	{
		EnterRule_chain_expr();
		EnterRule("chain_expr", 46);
		TraceIn("chain_expr", 46);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		Expr a = default(Expr);


			Expr last;

		try { DebugEnterRule(GrammarFileName, "chain_expr");
		DebugLocation(541, 1);
		try
		{
			// SugarWalker.g:546:2: ( ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:546:4: ^( Expr_Chain a= expr op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )* )
			{
			DebugLocation(546, 4);
			DebugLocation(546, 6);
			Match(input,Expr_Chain,Follow._Expr_Chain_in_chain_expr2088); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(547, 5);
			PushFollow(Follow._expr_in_chain_expr2095);
			a=expr();
			PopFollow();

			DebugLocation(548, 4);

							last=a;
						
			DebugLocation(551, 6);

			op=(CommonTree)input.LT(1);
			if (input.LA(1)==73||input.LA(1)==99||input.LA(1)==103||input.LA(1)==105||(input.LA(1)>=107 && input.LA(1)<=108)||(input.LA(1)>=133 && input.LA(1)<=134))
			{
				input.Consume();
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(551, 64);
			PushFollow(Follow._expr_in_chain_expr2141);
			a=expr();
			PopFollow();

			DebugLocation(552, 4);

							value = new ExprBin(Alias(op.Text), last, a);
							last = a;
						
			DebugLocation(556, 4);
			// SugarWalker.g:556:4: (op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==73||LA67_0==99||LA67_0==103||LA67_0==105||(LA67_0>=107 && LA67_0<=108)||(LA67_0>=133 && LA67_0<=134)))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:557:5: op= ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' ) a= expr
					{
					DebugLocation(557, 7);

					op=(CommonTree)input.LT(1);
					if (input.LA(1)==73||input.LA(1)==99||input.LA(1)==103||input.LA(1)==105||(input.LA(1)>=107 && input.LA(1)<=108)||(input.LA(1)>=133 && input.LA(1)<=134))
					{
						input.Consume();
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(557, 65);
					PushFollow(Follow._expr_in_chain_expr2193);
					a=expr();
					PopFollow();

					DebugLocation(558, 4);

									value = new ExprBin("&&", value, new ExprBin(Alias(op.Text), last, a));
									last = a;
								

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("chain_expr", 46);
			LeaveRule("chain_expr", 46);
			LeaveRule_chain_expr();
		}
		DebugLocation(563, 1);
		} finally { DebugExitRule(GrammarFileName, "chain_expr"); }
		return value;

	}
	// $ANTLR end "chain_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:564:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 47);
		TraceIn("expr", 47);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		ExprCast cast = default(ExprCast);
		ExprList list = default(ExprList);
		Expr expr_new = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr chain = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(564, 1);
		try
		{
			// SugarWalker.g:565:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |cast= cast_expr |list= list_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) |chain= chain_expr | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING )
			int alt68=26;
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt68 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt68 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt68 = 3;
				}
				break;
			case Expr_Call:
				{
				alt68 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt68 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt68 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt68 = 7;
				}
				break;
			case Expr_Cast:
				{
				alt68 = 8;
				}
				break;
			case Expr_List:
				{
				alt68 = 9;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt68 = 10;
				}
				break;
			case Expr_Infix:
				{
				alt68 = 11;
				}
				break;
			case Expr_Cond:
				{
				alt68 = 12;
				}
				break;
			case Expr_Cond_Not_Null:
				{
				alt68 = 13;
				}
				break;
			case Expr_Not_Null:
				{
				alt68 = 14;
				}
				break;
			case Expr_Access:
				{
				alt68 = 15;
				}
				break;
			case Expr_Chain:
				{
				alt68 = 16;
				}
				break;
			case Expr_Bin:
				{
				alt68 = 17;
				}
				break;
			case 75:
			case 78:
			case 82:
			case 85:
			case 89:
			case 95:
			case 102:
			case 104:
			case 110:
			case 117:
			case 150:
				{
				alt68 = 18;
				}
				break;
			case 113:
				{
				alt68 = 19;
				}
				break;
			case Expr_Bracket:
				{
				alt68 = 20;
				}
				break;
			case Expr_Suffix:
				{
				alt68 = 21;
				}
				break;
			case Expr_Prefix:
				{
				alt68 = 22;
				}
				break;
			case 98:
				{
				alt68 = 23;
				}
				break;
			case IDENT:
				{
				alt68 = 24;
				}
				break;
			case NUMBER:
			case DOUBLE:
				{
				alt68 = 25;
				}
				break;
			case STRING:
				{
				alt68 = 26;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:565:7: tuple= expr_tuple
				{
				DebugLocation(565, 12);
				PushFollow(Follow._expr_tuple_in_expr2225);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(566, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:569:4: alloc= alloc_expr
				{
				DebugLocation(569, 9);
				PushFollow(Follow._alloc_expr_in_expr2235);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(570, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:573:4: match= match_tuple
				{
				DebugLocation(573, 9);
				PushFollow(Follow._match_tuple_in_expr2245);
				match=match_tuple();
				PopFollow();

				DebugLocation(574, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:577:4: call= call_expr
				{
				DebugLocation(577, 8);
				PushFollow(Follow._call_expr_in_expr2255);
				call=call_expr();
				PopFollow();

				DebugLocation(578, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:581:4: call_with= call_with_expr
				{
				DebugLocation(581, 13);
				PushFollow(Follow._call_with_expr_in_expr2265);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(582, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:585:4: dict= dict_expr
				{
				DebugLocation(585, 8);
				PushFollow(Follow._dict_expr_in_expr2275);
				dict=dict_expr();
				PopFollow();

				DebugLocation(586, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:589:4: lambda= lambda_expr
				{
				DebugLocation(589, 10);
				PushFollow(Follow._lambda_expr_in_expr2285);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(590, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:593:4: cast= cast_expr
				{
				DebugLocation(593, 8);
				PushFollow(Follow._cast_expr_in_expr2295);
				cast=cast_expr();
				PopFollow();

				DebugLocation(594, 2);

						value = cast;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:597:4: list= list_expr
				{
				DebugLocation(597, 8);
				PushFollow(Follow._list_expr_in_expr2305);
				list=list_expr();
				PopFollow();

				DebugLocation(598, 2);

						value = list;
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:601:4: expr_new= new_expr
				{
				DebugLocation(601, 12);
				PushFollow(Follow._new_expr_in_expr2315);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(602, 2);

						value = expr_new;
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:605:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(605, 4);
				DebugLocation(605, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr2324); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(605, 27);
				PushFollow(Follow._ident_in_expr2328);
				ident_text=ident();
				PopFollow();

				DebugLocation(605, 35);
				PushFollow(Follow._expr_in_expr2332);
				a=expr();
				PopFollow();

				DebugLocation(605, 42);
				PushFollow(Follow._expr_in_expr2336);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(606, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:609:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(609, 4);
				DebugLocation(609, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr2346); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(609, 17);
				PushFollow(Follow._expr_in_expr2350);
				a=expr();
				PopFollow();

				DebugLocation(609, 24);
				PushFollow(Follow._expr_in_expr2354);
				b=expr();
				PopFollow();

				DebugLocation(609, 31);
				PushFollow(Follow._expr_in_expr2358);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(610, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:613:4: ^( Expr_Cond_Not_Null a= expr b= expr )
				{
				DebugLocation(613, 4);
				DebugLocation(613, 6);
				Match(input,Expr_Cond_Not_Null,Follow._Expr_Cond_Not_Null_in_expr2368); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(613, 26);
				PushFollow(Follow._expr_in_expr2372);
				a=expr();
				PopFollow();

				DebugLocation(613, 33);
				PushFollow(Follow._expr_in_expr2376);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(614, 2);

						value = new ExprCond(new ExprBin("!=", a, new ExprConst("nullptr", ConstType.Ident)), a, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:617:4: ^( Expr_Not_Null a= expr )
				{
				DebugLocation(617, 4);
				DebugLocation(617, 6);
				Match(input,Expr_Not_Null,Follow._Expr_Not_Null_in_expr2386); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(617, 21);
				PushFollow(Follow._expr_in_expr2390);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(618, 2);

						value = new ExprBin("!=", a, new ExprConst("nullptr", ConstType.Ident));
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:621:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(621, 4);
				DebugLocation(621, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr2400); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(621, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=90 && input.LA(1)<=93)||input.LA(1)==97)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(621, 57);
				PushFollow(Follow._expr_in_expr2426);
				a=expr();
				PopFollow();

				DebugLocation(621, 73);
				PushFollow(Follow._ident_in_expr2430);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(622, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:625:4: chain= chain_expr
				{
				DebugLocation(625, 10);
				PushFollow(Follow._chain_expr_in_expr2443);
				chain=chain_expr();
				PopFollow();

				DebugLocation(626, 2);

						value = chain;
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:629:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'is' | 'isnt' | 'and' | 'or' ) a= expr b= expr )
				{
				DebugLocation(629, 4);
				DebugLocation(629, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr2452); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(629, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=73 && input.LA(1)<=74)||(input.LA(1)>=76 && input.LA(1)<=77)||input.LA(1)==81||input.LA(1)==83||input.LA(1)==87||input.LA(1)==94||input.LA(1)==99||input.LA(1)==101||input.LA(1)==103||input.LA(1)==105||(input.LA(1)>=107 && input.LA(1)<=109)||input.LA(1)==116||input.LA(1)==119||(input.LA(1)>=133 && input.LA(1)<=134)||input.LA(1)==138||input.LA(1)==149||input.LA(1)==151)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(636, 9);
				PushFollow(Follow._expr_in_expr2583);
				a=expr();
				PopFollow();

				DebugLocation(636, 16);
				PushFollow(Follow._expr_in_expr2587);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(637, 2);

						value = new ExprBin(Alias(op.Text), a, b);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:640:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(640, 4);
				DebugLocation(640, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==75||input.LA(1)==78||input.LA(1)==82||input.LA(1)==85||input.LA(1)==89||input.LA(1)==95||input.LA(1)==102||input.LA(1)==104||input.LA(1)==110||input.LA(1)==117||input.LA(1)==150)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(640, 88);
				PushFollow(Follow._expr_in_expr2645);
				a=expr();
				PopFollow();

				DebugLocation(640, 95);
				PushFollow(Follow._expr_in_expr2649);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(641, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:644:4: ^( '@' text_ident= ident )
				{
				DebugLocation(644, 4);
				DebugLocation(644, 6);
				Match(input,113,Follow._113_in_expr2659); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(644, 20);
				PushFollow(Follow._ident_in_expr2663);
				text_ident=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(645, 2);

						value = new ExprAccess(new ExprConst("this", ConstType.Ident), "->", text_ident);
					

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:648:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(648, 4);
				DebugLocation(648, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr2673); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(648, 20);
				PushFollow(Follow._expr_in_expr2677);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(649, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:652:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(652, 4);
				DebugLocation(652, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr2687); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(652, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==84||input.LA(1)==88)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(652, 36);
				PushFollow(Follow._expr_in_expr2701);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(653, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:656:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(656, 4);
				DebugLocation(656, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr2711); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(656, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==72||input.LA(1)==77||input.LA(1)==81||(input.LA(1)>=83 && input.LA(1)<=84)||(input.LA(1)>=87 && input.LA(1)<=88)||input.LA(1)==152)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(656, 72);
				PushFollow(Follow._expr_in_expr2749);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(657, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// SugarWalker.g:660:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(660, 4);
				DebugLocation(660, 6);
				Match(input,98,Follow._98_in_expr2759); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(660, 12);
				PushFollow(Follow._expr_in_expr2763);
				a=expr();
				PopFollow();

				DebugLocation(660, 19);
				PushFollow(Follow._expr_in_expr2767);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(661, 2);

						if (!(a is ExprConst))
						{
							throw new Exception("Assert failed.");
						}
						value = new ExprAlloc("auto", new List<string> { ((ExprConst)a).Text }, new List<Expr> { b }, true);
					

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// SugarWalker.g:668:4: text_ident= ident
				{
				DebugLocation(668, 15);
				PushFollow(Follow._ident_in_expr2780);
				text_ident=ident();
				PopFollow();

				DebugLocation(669, 2);

						if (text_ident == "nil") text_ident = "nullptr";
						value = new ExprConst(text_ident, ConstType.Ident);
					

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// SugarWalker.g:673:4: text= ( NUMBER | DOUBLE )
				{
				DebugLocation(673, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(674, 5);

				        value = new ExprConst(text.Text, ConstType.Number);
				    

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// SugarWalker.g:677:4: text= STRING
				{
				DebugLocation(677, 9);
				text=(CommonTree)Match(input,STRING,Follow._STRING_in_expr2811); 
				DebugLocation(678, 2);

				        value = new ExprConst(text.Text, ConstType.String);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 47);
			LeaveRule("expr", 47);
			LeaveRule_expr();
		}
		DebugLocation(681, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0x8004104000006848UL,0x400000004UL});
		public static readonly BitSet _func_def_in_node139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc258 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc263 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _type_name_in_global_alloc269 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc273 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_global_alloc278 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc290 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc295 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _type_name_in_global_alloc301 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc305 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_global_alloc310 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _98_in_global_alloc322 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc327 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc333 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_global_alloc337 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item424 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item429 = new BitSet(new ulong[]{0x42020000000008UL});
		public static readonly BitSet _124_in_attribute_item437 = new BitSet(new ulong[]{0x42020000000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item445 = new BitSet(new ulong[]{0x42020000000008UL});
		public static readonly BitSet _attribute_item_in_attribute473 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def494 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def498 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _global_block_in_namespace_def502 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def527 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_import_def532 = new BitSet(new ulong[]{0x40000000000008UL});
		public static readonly BitSet _Enum_in_enum_def553 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def558 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def564 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_enum_def568 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def588 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_class_def593 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def599 = new BitSet(new ulong[]{0x9A000000008UL});
		public static readonly BitSet _generic_parameter_in_class_def604 = new BitSet(new ulong[]{0x92000000008UL});
		public static readonly BitSet _func_args_in_class_def611 = new BitSet(new ulong[]{0x90000000008UL});
		public static readonly BitSet _ident_list_in_class_def618 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _global_block_in_class_def625 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_IDENT_in_type_name653 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _124_in_type_name662 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_type_name672 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_type_name686 = new BitSet(new ulong[]{0x8UL,0x4000800022000UL});
		public static readonly BitSet _99_in_type_name696 = new BitSet(new ulong[]{0x0UL,0x80000000010UL});
		public static readonly BitSet _type_name_in_type_name708 = new BitSet(new ulong[]{0x0UL,0x80000000010UL});
		public static readonly BitSet _107_in_type_name718 = new BitSet(new ulong[]{0x8UL,0x4000000022000UL});
		public static readonly BitSet _81_in_type_name729 = new BitSet(new ulong[]{0x8UL,0x4000000022000UL});
		public static readonly BitSet _114_in_type_name738 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_type_name740 = new BitSet(new ulong[]{0x8UL,0x4000000022000UL});
		public static readonly BitSet _77_in_type_name749 = new BitSet(new ulong[]{0x8UL,0x4000000022000UL});
		public static readonly BitSet _Func_Args_in_func_args779 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_alloc_in_func_args784 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter811 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter816 = new BitSet(new ulong[]{0x20000000008UL});
		public static readonly BitSet _Func_Def_in_func_def842 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_func_def847 = new BitSet(new ulong[]{0x20000000000UL,0x10UL,0x1000000UL});
		public static readonly BitSet _type_name_in_func_def854 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_func_def861 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_func_def867 = new BitSet(new ulong[]{0xC282A1FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _generic_parameter_in_func_def872 = new BitSet(new ulong[]{0xC28221FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _func_args_in_func_def880 = new BitSet(new ulong[]{0xC28201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _stmt_block_in_func_def891 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def901 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block929 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block934 = new BitSet(new ulong[]{0xFF428201FFFFF008UL,0x2341448224480FUL,0x2400000UL});
		public static readonly BitSet _stmt_expr_in_stmt965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_translate_in_stmt1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_translate1051 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1055 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_stmt_translate1059 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _98_in_stmt_translate1069 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_list_in_stmt_translate1073 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_stmt_translate1077 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer1097 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1101 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Finally_in_stmt_defer1111 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1115 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1177 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1183 = new BitSet(new ulong[]{0x20000000008UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_stmt_using1198 = new BitSet(new ulong[]{0x20000000008UL,0x0UL,0x100UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1219 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1223 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1227 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1266 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1270 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1274 = new BitSet(new ulong[]{0x80000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1279 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Unless_in_stmt_if1291 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1295 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1299 = new BitSet(new ulong[]{0x80000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1304 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1326 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1330 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1334 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Until_in_stmt_while1344 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1348 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1352 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Loop_in_stmt_while1362 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1367 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1373 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_To_in_for_item1393 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1397 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_for_item1401 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_for_item1405 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_for_item1410 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Down_To_in_for_item1422 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1426 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_for_item1430 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_for_item1434 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_for_item1439 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_Each_in_for_item1451 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_for_item1455 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_for_item1459 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _For_Item_When_in_for_item1469 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_for_item1473 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _for_item_in_for_item_list1500 = new BitSet(new ulong[]{0x1E00000002UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1521 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _for_item_list_in_stmt_for1525 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1529 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1549 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1553 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try1557 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1561 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return1581 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1586 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident1614 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_ident1619 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_ident1623 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _Ident_List_in_ident_list1648 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list1653 = new BitSet(new ulong[]{0x20000000008UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr1675 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1679 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1683 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_alloc_expr1688 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr1700 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1704 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1708 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_alloc_expr1713 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple1740 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple1745 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple1772 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple1777 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr_list1805 = new BitSet(new ulong[]{0x428201FFFFF002UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _Expr_Call_in_call_expr1825 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr1829 = new BitSet(new ulong[]{0x428281FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _generic_parameter_in_call_expr1834 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_call_expr1841 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr1863 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr1867 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_dict_expr1872 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr1894 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _90_in_lambda_expr1896 = new BitSet(new ulong[]{0x428221FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _func_args_in_lambda_expr1901 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_lambda_expr1907 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr1917 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _106_in_lambda_expr1919 = new BitSet(new ulong[]{0x428221FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _func_args_in_lambda_expr1924 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_lambda_expr1930 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr1950 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1954 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_new_expr1958 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr1969 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1973 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_new_expr1977 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr1997 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr2001 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_call_with_expr2005 = new BitSet(new ulong[]{0x428201FFFFF008UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_list_in_call_with_expr2009 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cast_in_cast_expr2030 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_cast_expr2034 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_cast_expr2038 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_List_in_list_expr2058 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_list_in_list_expr2062 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Chain_in_chain_expr2088 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_chain_expr2095 = new BitSet(new ulong[]{0x0UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _set_in_chain_expr2107 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_chain_expr2141 = new BitSet(new ulong[]{0x8UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _set_in_chain_expr2159 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_chain_expr2193 = new BitSet(new ulong[]{0x8UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _expr_tuple_in_expr2225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr2235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr2245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr2255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr2265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr2275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expr_in_expr2295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr2305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr2315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr2324 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr2328 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2332 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2336 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr2346 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2350 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2354 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2358 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_Not_Null_in_expr2368 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2372 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2376 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Not_Null_in_expr2386 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2390 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr2400 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2404 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2426 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_expr2430 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _chain_expr_in_expr2443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Bin_in_expr2452 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2456 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2583 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2587 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr2599 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2645 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2649 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _113_in_expr2659 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr2663 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr2673 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2677 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr2687 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2691 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2701 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr2711 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2715 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2749 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _98_in_expr2759 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2763 = new BitSet(new ulong[]{0x428201FFFFF000UL,0x22414482244800UL,0x2400000UL});
		public static readonly BitSet _expr_in_expr2767 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr2780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr2790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr2811 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
