//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-04-20 14:06:59

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "DOUBLE", "EXPONENT", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_For", "Stmt_If", "Stmt_While", "'('", "')'", "'*'", "'+'", "'-'", "'/'", "'='", "'else'", "'if'", "'import'", "'while'"
	};
	public const int EOF=-1;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int Block=4;
	public const int DEDENT=5;
	public const int DOUBLE=6;
	public const int EXPONENT=7;
	public const int Expr_Alloc=8;
	public const int Expr_Bin=9;
	public const int Expr_Block=10;
	public const int Expr_Call=11;
	public const int Func_Def=12;
	public const int IDENT=13;
	public const int INDENT=14;
	public const int INT=15;
	public const int Left_Bracket=16;
	public const int NEWLINE=17;
	public const int Right_Bracket=18;
	public const int Root=19;
	public const int SP=20;
	public const int STRING=21;
	public const int Stmt_For=22;
	public const int Stmt_If=23;
	public const int Stmt_While=24;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:22:8: public root returns [Root value] : (a= node )+ ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		AstNode a = default(AstNode);


			value = new Root();

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(22, 1);
		try
		{
			// SugarWalker.g:27:2: ( (a= node )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:27:4: (a= node )+
			{
			DebugLocation(27, 4);
			// SugarWalker.g:27:4: (a= node )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENT||LA1_0==34))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:27:5: a= node
					{
					DebugLocation(27, 7);
					PushFollow(Follow._node_in_root87);
					a=node();
					PopFollow();

					DebugLocation(27, 15);
					 value.List.Add(a); 

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:30:8: public node returns [AstNode value] : (a= func_def |b= imports );
	[GrammarRule("node")]
	public AstNode node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstNode value = default(AstNode);


		FuncDef a = default(FuncDef);
		Import b = default(Import);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:31:2: (a= func_def |b= imports )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==IDENT))
			{
				alt2 = 1;
			}
			else if ((LA2_0==34))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:31:4: a= func_def
				{
				DebugLocation(31, 6);
				PushFollow(Follow._func_def_in_node113);
				a=func_def();
				PopFollow();

				DebugLocation(31, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:32:4: b= imports
				{
				DebugLocation(32, 6);
				PushFollow(Follow._imports_in_node124);
				b=imports();
				PopFollow();

				DebugLocation(32, 16);
				 value = b; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(33, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_imports();
	partial void LeaveRule_imports();

	// $ANTLR start "imports"
	// SugarWalker.g:35:8: public imports returns [Import value] : 'import' (a= STRING )? ( INDENT (b= STRING )+ DEDENT )? ;
	[GrammarRule("imports")]
	public Import imports()
	{
		EnterRule_imports();
		EnterRule("imports", 3);
		TraceIn("imports", 3);
		Import value = default(Import);


		CommonTree a = default(CommonTree);
		CommonTree b = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(35, 1);
		try
		{
			// SugarWalker.g:40:2: ( 'import' (a= STRING )? ( INDENT (b= STRING )+ DEDENT )? )
			DebugEnterAlt(1);
			// SugarWalker.g:40:4: 'import' (a= STRING )? ( INDENT (b= STRING )+ DEDENT )?
			{
			DebugLocation(40, 4);
			Match(input,34,Follow._34_in_imports148); 
			DebugLocation(40, 13);
			// SugarWalker.g:40:13: (a= STRING )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==STRING))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:40:14: a= STRING
				{
				DebugLocation(40, 16);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_imports155); 
				DebugLocation(40, 25);
				 value.NameList.Add(a.Text); 

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(41, 4);
			// SugarWalker.g:41:4: ( INDENT (b= STRING )+ DEDENT )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==INDENT))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:41:5: INDENT (b= STRING )+ DEDENT
				{
				DebugLocation(41, 5);
				Match(input,INDENT,Follow._INDENT_in_imports165); 
				DebugLocation(41, 12);
				// SugarWalker.g:41:12: (b= STRING )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==STRING))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:41:13: b= STRING
						{
						DebugLocation(41, 15);
						b=(CommonTree)Match(input,STRING,Follow._STRING_in_imports172); 
						DebugLocation(41, 24);
						 value.NameList.Add(b.Text); 

						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(41, 59);
				Match(input,DEDENT,Follow._DEDENT_in_imports178); 

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("imports", 3);
			LeaveRule("imports", 3);
			LeaveRule_imports();
		}
		DebugLocation(42, 1);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return value;

	}
	// $ANTLR end "imports"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:44:8: public func_def returns [FuncDef value] : a= IDENT b= IDENT c= stmt_block ;
	[GrammarRule("func_def")]
	public FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 4);
		TraceIn("func_def", 4);
		FuncDef value = default(FuncDef);


		CommonTree a = default(CommonTree);
		CommonTree b = default(CommonTree);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(44, 1);
		try
		{
			// SugarWalker.g:45:2: (a= IDENT b= IDENT c= stmt_block )
			DebugEnterAlt(1);
			// SugarWalker.g:45:4: a= IDENT b= IDENT c= stmt_block
			{
			DebugLocation(45, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def199); 
			DebugLocation(45, 13);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def203); 
			DebugLocation(45, 21);
			PushFollow(Follow._stmt_block_in_func_def207);
			c=stmt_block();
			PopFollow();

			DebugLocation(46, 2);

					value = new FuncDef(a.Text, b.Text, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 4);
			LeaveRule("func_def", 4);
			LeaveRule_func_def();
		}
		DebugLocation(49, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:51:8: public stmt_block returns [StmtBlock value] : INDENT (a= stmt )+ DEDENT ;
	[GrammarRule("stmt_block")]
	public StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 5);
		TraceIn("stmt_block", 5);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(51, 4);
		try
		{
			// SugarWalker.g:56:2: ( INDENT (a= stmt )+ DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:56:4: INDENT (a= stmt )+ DEDENT
			{
			DebugLocation(56, 4);
			Match(input,INDENT,Follow._INDENT_in_stmt_block234); 
			DebugLocation(56, 11);
			// SugarWalker.g:56:11: (a= stmt )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==DOUBLE||LA6_0==IDENT||LA6_0==INT||LA6_0==STRING||(LA6_0>=27 && LA6_0<=31)))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:56:12: a= stmt
					{
					DebugLocation(56, 13);
					PushFollow(Follow._stmt_in_stmt_block239);
					a=stmt();
					PopFollow();

					DebugLocation(56, 19);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(56, 49);
			Match(input,DEDENT,Follow._DEDENT_in_stmt_block245); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 5);
			LeaveRule("stmt_block", 5);
			LeaveRule_stmt_block();
		}
		DebugLocation(57, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:59:8: public stmt returns [Stmt value] : a= expr ;
	[GrammarRule("stmt")]
	public Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 6);
		TraceIn("stmt", 6);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(59, 1);
		try
		{
			// SugarWalker.g:60:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:60:4: a= expr
			{
			DebugLocation(60, 5);
			PushFollow(Follow._expr_in_stmt268);
			a=expr();
			PopFollow();

			DebugLocation(60, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 6);
			LeaveRule("stmt", 6);
			LeaveRule_stmt();
		}
		DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:63:8: public expr returns [Expr value] : ( ^( '=' a= expr b= expr ) | ^( '+' a= expr b= expr ) | ^( '-' a= expr b= expr ) | ^( '*' a= expr b= expr ) | ^( '/' a= expr b= expr ) | INT | DOUBLE | IDENT | STRING );
	[GrammarRule("expr")]
	public Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 7);
		TraceIn("expr", 7);
		Expr value = default(Expr);


		CommonTree INT1 = default(CommonTree);
		CommonTree DOUBLE2 = default(CommonTree);
		CommonTree IDENT3 = default(CommonTree);
		CommonTree STRING4 = default(CommonTree);
		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(63, 1);
		try
		{
			// SugarWalker.g:64:5: ( ^( '=' a= expr b= expr ) | ^( '+' a= expr b= expr ) | ^( '-' a= expr b= expr ) | ^( '*' a= expr b= expr ) | ^( '/' a= expr b= expr ) | INT | DOUBLE | IDENT | STRING )
			int alt7=9;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case 31:
				{
				alt7 = 1;
				}
				break;
			case 28:
				{
				alt7 = 2;
				}
				break;
			case 29:
				{
				alt7 = 3;
				}
				break;
			case 27:
				{
				alt7 = 4;
				}
				break;
			case 30:
				{
				alt7 = 5;
				}
				break;
			case INT:
				{
				alt7 = 6;
				}
				break;
			case DOUBLE:
				{
				alt7 = 7;
				}
				break;
			case IDENT:
				{
				alt7 = 8;
				}
				break;
			case STRING:
				{
				alt7 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:64:7: ^( '=' a= expr b= expr )
				{
				DebugLocation(64, 7);
				DebugLocation(64, 9);
				Match(input,31,Follow._31_in_expr291); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(64, 14);
				PushFollow(Follow._expr_in_expr295);
				a=expr();
				PopFollow();

				DebugLocation(64, 21);
				PushFollow(Follow._expr_in_expr299);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(65, 2);

						value = new ExprAssign(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:68:4: ^( '+' a= expr b= expr )
				{
				DebugLocation(68, 4);
				DebugLocation(68, 6);
				Match(input,28,Follow._28_in_expr309); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(68, 11);
				PushFollow(Follow._expr_in_expr313);
				a=expr();
				PopFollow();

				DebugLocation(68, 18);
				PushFollow(Follow._expr_in_expr317);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(69, 2);

						value = new ExprBin("+", a, b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:72:4: ^( '-' a= expr b= expr )
				{
				DebugLocation(72, 4);
				DebugLocation(72, 6);
				Match(input,29,Follow._29_in_expr327); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(72, 11);
				PushFollow(Follow._expr_in_expr331);
				a=expr();
				PopFollow();

				DebugLocation(72, 18);
				PushFollow(Follow._expr_in_expr335);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(73, 2);

						value = new ExprBin("-", a, b);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:76:4: ^( '*' a= expr b= expr )
				{
				DebugLocation(76, 4);
				DebugLocation(76, 6);
				Match(input,27,Follow._27_in_expr345); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(76, 11);
				PushFollow(Follow._expr_in_expr349);
				a=expr();
				PopFollow();

				DebugLocation(76, 18);
				PushFollow(Follow._expr_in_expr353);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(77, 2);

						value = new ExprBin("*", a, b);
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:80:4: ^( '/' a= expr b= expr )
				{
				DebugLocation(80, 4);
				DebugLocation(80, 6);
				Match(input,30,Follow._30_in_expr363); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(80, 11);
				PushFollow(Follow._expr_in_expr367);
				a=expr();
				PopFollow();

				DebugLocation(80, 18);
				PushFollow(Follow._expr_in_expr371);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(81, 2);

						value = new ExprBin("/", a, b);
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:84:4: INT
				{
				DebugLocation(84, 4);
				INT1=(CommonTree)Match(input,INT,Follow._INT_in_expr380); 
				DebugLocation(85, 5);

				        value = new ExprConst(INT1.Text);
				    

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:88:4: DOUBLE
				{
				DebugLocation(88, 4);
				DOUBLE2=(CommonTree)Match(input,DOUBLE,Follow._DOUBLE_in_expr391); 
				DebugLocation(89, 2);

						value = new ExprConst(DOUBLE2.Text);
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:92:4: IDENT
				{
				DebugLocation(92, 4);
				IDENT3=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr399); 
				DebugLocation(93, 2);

						value = new ExprConst(IDENT3.Text);
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:96:4: STRING
				{
				DebugLocation(96, 4);
				STRING4=(CommonTree)Match(input,STRING,Follow._STRING_in_expr407); 
				DebugLocation(97, 2);

						value = new ExprConst(STRING4.Text);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 7);
			LeaveRule("expr", 7);
			LeaveRule_expr();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root87 = new BitSet(new ulong[]{0x400002002UL});
		public static readonly BitSet _func_def_in_node113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _imports_in_node124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _34_in_imports148 = new BitSet(new ulong[]{0x204002UL});
		public static readonly BitSet _STRING_in_imports155 = new BitSet(new ulong[]{0x4002UL});
		public static readonly BitSet _INDENT_in_imports165 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _STRING_in_imports172 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _DEDENT_in_imports178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_func_def199 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENT_in_func_def203 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_func_def207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block234 = new BitSet(new ulong[]{0xF820A040UL});
		public static readonly BitSet _stmt_in_stmt_block239 = new BitSet(new ulong[]{0xF820A060UL});
		public static readonly BitSet _DEDENT_in_stmt_block245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _31_in_expr291 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr295 = new BitSet(new ulong[]{0xF820A040UL});
		public static readonly BitSet _expr_in_expr299 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _28_in_expr309 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr313 = new BitSet(new ulong[]{0xF820A040UL});
		public static readonly BitSet _expr_in_expr317 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _29_in_expr327 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr331 = new BitSet(new ulong[]{0xF820A040UL});
		public static readonly BitSet _expr_in_expr335 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _27_in_expr345 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr349 = new BitSet(new ulong[]{0xF820A040UL});
		public static readonly BitSet _expr_in_expr353 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _30_in_expr363 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr367 = new BitSet(new ulong[]{0xF820A040UL});
		public static readonly BitSet _expr_in_expr371 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INT_in_expr380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_expr391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_expr399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr407 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
