//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-07 11:10:48

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'@'", "'['", "'\\'", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'const'", "'defer'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'let'", "'loop'", "'namespace'", "'new'", "'return'", "'select'", "'try'", "'typedef'", "'unsigned'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc_Bracket=12;
	public const int Expr_Alloc_Equal=13;
	public const int Expr_Bin=14;
	public const int Expr_Bracket=15;
	public const int Expr_Call=16;
	public const int Expr_Call_With=17;
	public const int Expr_Cond=18;
	public const int Expr_Dict=19;
	public const int Expr_Infix=20;
	public const int Expr_Lambda=21;
	public const int Expr_New_Array=22;
	public const int Expr_New_Type=23;
	public const int Expr_Prefix=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int Generic_Patameters=29;
	public const int Global_Block=30;
	public const int IDENT=31;
	public const int INDENT=32;
	public const int Ident_List=33;
	public const int Import=34;
	public const int Left_Bracket=35;
	public const int LineComment=36;
	public const int Linq_From=37;
	public const int Linq_Let=38;
	public const int Linq_Prefix=39;
	public const int Linq_Where=40;
	public const int Match_Tuple=41;
	public const int NEWLINE=42;
	public const int NUMBER=43;
	public const int Namespace=44;
	public const int Right_Bracket=45;
	public const int Root=46;
	public const int SP=47;
	public const int STRING=48;
	public const int Stmt_Block=49;
	public const int Stmt_Defer=50;
	public const int Stmt_For=51;
	public const int Stmt_ForEach=52;
	public const int Stmt_If=53;
	public const int Stmt_Linq=54;
	public const int Stmt_Loop=55;
	public const int Stmt_Return=56;
	public const int Stmt_Try=57;
	public const int Stmt_Typedef=58;
	public const int Stmt_Using=59;
	public const int Stmt_While=60;
	public const int Type_IDENT=61;
	public const int Type_Ref=62;
	public const int Type_Tuple=63;
	public const int DOUBLE=137;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:24:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:24:4: ^( Root a= global_block )
			{
			DebugLocation(24, 4);
			DebugLocation(24, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(24, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(25, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:30:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		AttrAstNode a = default(AttrAstNode);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:35:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:35:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(35, 4);
			DebugLocation(35, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(35, 19);
				// SugarWalker.g:35:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||(LA1_0>=Stmt_Typedef && LA1_0<=Stmt_Using)||LA1_0==90))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:35:20: a= node
						{
						DebugLocation(35, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(35, 27);
						 value.List.Add(a); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(36, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:38:1: node returns [AttrAstNode value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private AttrAstNode node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AttrAstNode value = default(AttrAstNode);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		GlobalAlloc e = default(GlobalAlloc);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(38, 1);
		try
		{
			// SugarWalker.g:39:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 90:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:39:4: a= func_def
				{
				DebugLocation(39, 6);
				PushFollow(Follow._func_def_in_node134);
				a=func_def();
				PopFollow();

				DebugLocation(39, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:40:4: b= import_def
				{
				DebugLocation(40, 6);
				PushFollow(Follow._import_def_in_node145);
				b=import_def();
				PopFollow();

				DebugLocation(40, 19);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:41:4: c= enum_def
				{
				DebugLocation(41, 6);
				PushFollow(Follow._enum_def_in_node156);
				c=enum_def();
				PopFollow();

				DebugLocation(41, 17);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:42:4: d= class_def
				{
				DebugLocation(42, 6);
				PushFollow(Follow._class_def_in_node167);
				d=class_def();
				PopFollow();

				DebugLocation(42, 18);
				 value = d; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:43:4: e= global_alloc
				{
				DebugLocation(43, 6);
				PushFollow(Follow._global_alloc_in_node178);
				e=global_alloc();
				PopFollow();

				DebugLocation(43, 21);
				 value = e; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:44:4: f= global_using
				{
				DebugLocation(44, 6);
				PushFollow(Follow._global_using_in_node189);
				f=global_using();
				PopFollow();

				DebugLocation(44, 21);
				 value = f; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:45:4: g= global_typedef
				{
				DebugLocation(45, 6);
				PushFollow(Follow._global_typedef_in_node200);
				g=global_typedef();
				PopFollow();

				DebugLocation(45, 23);
				 value = g; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:46:4: h= namespace_def
				{
				DebugLocation(46, 6);
				PushFollow(Follow._namespace_def_in_node211);
				h=namespace_def();
				PopFollow();

				DebugLocation(46, 22);
				 value = h; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:49:1: global_using returns [GlobalUsing value] : a= stmt_using ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		StmtUsing a = default(StmtUsing);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(49, 1);
		try
		{
			// SugarWalker.g:50:2: (a= stmt_using )
			DebugEnterAlt(1);
			// SugarWalker.g:50:4: a= stmt_using
			{
			DebugLocation(50, 5);
			PushFollow(Follow._stmt_using_in_global_using229);
			a=stmt_using();
			PopFollow();

			DebugLocation(51, 2);

					value = new GlobalUsing(a.List);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:56:1: global_alloc returns [GlobalAlloc value] : ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? a= ident c= expr_list ) );
	[GrammarRule("global_alloc")]
	private GlobalAlloc global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		GlobalAlloc value = default(GlobalAlloc);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(56, 1);
		try
		{
			// SugarWalker.g:57:2: ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? a= ident c= expr_list ) )
			int alt8=3;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt8 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt8 = 2;
				}
				break;
			case 90:
				{
				alt8 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:57:4: ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(57, 4);
				DebugLocation(57, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc248); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(57, 23);
				// SugarWalker.g:57:23: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:57:24: attr= attribute
					{
					DebugLocation(57, 28);
					PushFollow(Follow._attribute_in_global_alloc253);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(57, 42);
				PushFollow(Follow._type_name_in_global_alloc259);
				a=type_name();
				PopFollow();

				DebugLocation(57, 54);
				PushFollow(Follow._ident_list_in_global_alloc263);
				b=ident_list();
				PopFollow();

				DebugLocation(57, 66);
				// SugarWalker.g:57:66: (c= expr_list )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>=Expr_Access && LA4_0<=Expr_Tuple)||LA4_0==IDENT||LA4_0==Match_Tuple||LA4_0==NUMBER||LA4_0==STRING||LA4_0==67||LA4_0==70||LA4_0==74||LA4_0==77||LA4_0==81||LA4_0==87||LA4_0==90||LA4_0==94||LA4_0==96||(LA4_0>=102 && LA4_0<=103)||LA4_0==108||LA4_0==134||LA4_0==DOUBLE))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:57:67: c= expr_list
					{
					DebugLocation(57, 68);
					PushFollow(Follow._expr_list_in_global_alloc268);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(58, 2);

						value = new GlobalAlloc(a, b, c, attr, true);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:61:4: ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(61, 4);
				DebugLocation(61, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc280); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(61, 25);
				// SugarWalker.g:61:25: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:61:26: attr= attribute
					{
					DebugLocation(61, 30);
					PushFollow(Follow._attribute_in_global_alloc285);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(61, 44);
				PushFollow(Follow._type_name_in_global_alloc291);
				a=type_name();
				PopFollow();

				DebugLocation(61, 56);
				PushFollow(Follow._ident_list_in_global_alloc295);
				b=ident_list();
				PopFollow();

				DebugLocation(61, 68);
				// SugarWalker.g:61:68: (c= expr_list )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>=Expr_Access && LA6_0<=Expr_Tuple)||LA6_0==IDENT||LA6_0==Match_Tuple||LA6_0==NUMBER||LA6_0==STRING||LA6_0==67||LA6_0==70||LA6_0==74||LA6_0==77||LA6_0==81||LA6_0==87||LA6_0==90||LA6_0==94||LA6_0==96||(LA6_0>=102 && LA6_0<=103)||LA6_0==108||LA6_0==134||LA6_0==DOUBLE))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:61:69: c= expr_list
					{
					DebugLocation(61, 70);
					PushFollow(Follow._expr_list_in_global_alloc300);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(62, 2);

						value = new GlobalAlloc(a, b, c, attr, false);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:65:4: ^( ':=' (attr= attribute )? a= ident c= expr_list )
				{
				DebugLocation(65, 4);
				DebugLocation(65, 6);
				Match(input,90,Follow._90_in_global_alloc312); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(65, 11);
				// SugarWalker.g:65:11: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:65:12: attr= attribute
					{
					DebugLocation(65, 16);
					PushFollow(Follow._attribute_in_global_alloc317);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(65, 30);
				PushFollow(Follow._ident_in_global_alloc323);
				a=ident();
				PopFollow();

				DebugLocation(65, 38);
				PushFollow(Follow._expr_list_in_global_alloc327);
				c=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(66, 2);

						value = new GlobalAlloc("auto", new List<string> { a }, c, attr, true);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:71:1: global_typedef returns [GlobalTypeDef value] : a= stmt_typedef ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		StmtTypeDef a = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(71, 1);
		try
		{
			// SugarWalker.g:72:2: (a= stmt_typedef )
			DebugEnterAlt(1);
			// SugarWalker.g:72:4: a= stmt_typedef
			{
			DebugLocation(72, 5);
			PushFollow(Follow._stmt_typedef_in_global_typedef348);
			a=stmt_typedef();
			PopFollow();

			DebugLocation(73, 2);

					value = new GlobalTypeDef(a.Type, a.Name);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(76, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:78:1: attribute_args returns [string value] : (a= ( NUMBER ) |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(78, 1);
		try
		{
			// SugarWalker.g:79:2: (a= ( NUMBER ) |a= STRING |b= ident )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt9 = 1;
				}
				break;
			case STRING:
				{
				alt9 = 2;
				}
				break;
			case IDENT:
			case 103:
				{
				alt9 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:79:4: a= ( NUMBER )
				{
				DebugLocation(79, 5);
				// SugarWalker.g:79:6: ( NUMBER )
				DebugEnterAlt(1);
				// SugarWalker.g:79:7: NUMBER
				{
				DebugLocation(79, 7);
				Match(input,NUMBER,Follow._NUMBER_in_attribute_args369); 

				}

				DebugLocation(80, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:83:4: a= STRING
				{
				DebugLocation(83, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args380); 
				DebugLocation(84, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:87:4: b= ident
				{
				DebugLocation(87, 5);
				PushFollow(Follow._ident_in_attribute_args390);
				b=ident();
				PopFollow();

				DebugLocation(88, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(91, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:93:1: attribute_item returns [Attr value] : ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		CommonTree c = default(CommonTree);
		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(93, 1);
		try
		{
			// SugarWalker.g:98:2: ( ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:98:4: ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* )
			{
			DebugLocation(98, 4);
			DebugLocation(98, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item414); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(98, 16);
			// SugarWalker.g:98:16: (a= ident |c= 'const' )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT||LA10_0==103))
			{
				alt10 = 1;
			}
			else if ((LA10_0==112))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:98:17: a= ident
				{
				DebugLocation(98, 18);
				PushFollow(Follow._ident_in_attribute_item419);
				a=ident();
				PopFollow();

				DebugLocation(98, 25);
				 value.Name = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:98:48: c= 'const'
				{
				DebugLocation(98, 49);
				c=(CommonTree)Match(input,112,Follow._112_in_attribute_item427); 
				DebugLocation(98, 58);
				 value.Name = "const"; 

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(98, 86);
			// SugarWalker.g:98:86: (b= attribute_args )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==IDENT||LA11_0==NUMBER||LA11_0==STRING||LA11_0==103))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:98:87: b= attribute_args
					{
					DebugLocation(98, 88);
					PushFollow(Follow._attribute_args_in_attribute_item435);
					b=attribute_args();
					PopFollow();

					DebugLocation(98, 104);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:101:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(101, 1);
		try
		{
			// SugarWalker.g:106:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:106:4: (a= attribute_item )+
			{
			DebugLocation(106, 4);
			// SugarWalker.g:106:4: (a= attribute_item )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==Attribute))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:106:5: a= attribute_item
					{
					DebugLocation(106, 6);
					PushFollow(Follow._attribute_item_in_attribute463);
					a=attribute_item();
					PopFollow();

					DebugLocation(106, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:109:1: namespace_def returns [Namespace value] : ^( Namespace a= ident b= global_block ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(109, 1);
		try
		{
			// SugarWalker.g:110:2: ( ^( Namespace a= ident b= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:110:4: ^( Namespace a= ident b= global_block )
			{
			DebugLocation(110, 4);
			DebugLocation(110, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def484); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(110, 17);
			PushFollow(Follow._ident_in_namespace_def488);
			a=ident();
			PopFollow();

			DebugLocation(110, 25);
			PushFollow(Follow._global_block_in_namespace_def492);
			b=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(111, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:116:1: import_def returns [Import value] : ^( Import (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(116, 1);
		try
		{
			// SugarWalker.g:121:2: ( ^( Import (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:121:4: ^( Import (a= STRING )* )
			{
			DebugLocation(121, 4);
			DebugLocation(121, 6);
			Match(input,Import,Follow._Import_in_import_def517); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(121, 13);
				// SugarWalker.g:121:13: (a= STRING )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if ((LA13_0==STRING))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:121:14: a= STRING
						{
						DebugLocation(121, 15);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def522); 
						DebugLocation(121, 23);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:124:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(124, 1);
		try
		{
			// SugarWalker.g:125:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:125:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(125, 4);
			DebugLocation(125, 6);
			Match(input,Enum,Follow._Enum_in_enum_def543); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(125, 11);
			// SugarWalker.g:125:11: (attr= attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==Attribute))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:125:12: attr= attribute
				{
				DebugLocation(125, 16);
				PushFollow(Follow._attribute_in_enum_def548);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(125, 30);
			PushFollow(Follow._ident_in_enum_def554);
			a=ident();
			PopFollow();

			DebugLocation(125, 38);
			PushFollow(Follow._ident_list_in_enum_def558);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(126, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:131:1: class_def returns [Class value] : ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(131, 1);
		try
		{
			// SugarWalker.g:132:2: ( ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:132:4: ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(132, 4);
			DebugLocation(132, 6);
			Match(input,Class,Follow._Class_in_class_def578); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(132, 12);
			// SugarWalker.g:132:12: (attr= attribute )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==Attribute))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:13: attr= attribute
				{
				DebugLocation(132, 17);
				PushFollow(Follow._attribute_in_class_def583);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(132, 31);
			PushFollow(Follow._ident_in_class_def589);
			a=ident();
			PopFollow();

			DebugLocation(132, 38);
			// SugarWalker.g:132:38: (b= generic_parameter )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==Generic_Patameters))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:39: b= generic_parameter
				{
				DebugLocation(132, 40);
				PushFollow(Follow._generic_parameter_in_class_def594);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(132, 61);
			// SugarWalker.g:132:61: (c= func_args )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Func_Args))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:62: c= func_args
				{
				DebugLocation(132, 63);
				PushFollow(Follow._func_args_in_class_def601);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(132, 76);
			// SugarWalker.g:132:76: (d= ident_list )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==Ident_List))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:77: d= ident_list
				{
				DebugLocation(132, 78);
				PushFollow(Follow._ident_list_in_class_def608);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(132, 92);
			// SugarWalker.g:132:92: (e= global_block )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==Global_Block))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:93: e= global_block
				{
				DebugLocation(132, 94);
				PushFollow(Follow._global_block_in_class_def615);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(133, 2);

					value = new Class(a, b, c, d, e, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:138:1: type_name returns [string value] : ^( Type_IDENT ( 'const' )? ( 'unsigned' )? a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		string value = default(string);


		string a = default(string);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(138, 1);
		try
		{
			// SugarWalker.g:143:2: ( ^( Type_IDENT ( 'const' )? ( 'unsigned' )? a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:143:4: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* )
			{
			DebugLocation(143, 4);
			DebugLocation(143, 7);
			Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name643); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(144, 7);
			// SugarWalker.g:144:7: ( 'const' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==112))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:144:8: 'const'
				{
				DebugLocation(144, 8);
				Match(input,112,Follow._112_in_type_name652); 
				DebugLocation(144, 16);
				 value += "const "; 

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(145, 4);
			// SugarWalker.g:145:4: ( 'unsigned' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==129))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:145:5: 'unsigned'
				{
				DebugLocation(145, 5);
				Match(input,129,Follow._129_in_type_name662); 
				DebugLocation(145, 16);
				 value += "unsigned "; 

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(146, 8);
			PushFollow(Follow._ident_in_type_name676);
			a=ident();
			PopFollow();

			DebugLocation(146, 15);
			 value+=a; 
			DebugLocation(147, 5);
			// SugarWalker.g:147:5: ( '<' (b= type_name )* '>' )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==92))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:147:7: '<' (b= type_name )* '>'
				{
				DebugLocation(147, 7);
				Match(input,92,Follow._92_in_type_name686); 
				DebugLocation(147, 11);
				 value+="<"; bool isFirst = true; 
				DebugLocation(148, 6);
				// SugarWalker.g:148:6: (b= type_name )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==Type_IDENT))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:148:7: b= type_name
						{
						DebugLocation(148, 8);
						PushFollow(Follow._type_name_in_type_name698);
						b=type_name();
						PopFollow();

						DebugLocation(149, 3);

									if (!isFirst) value+=", ";
									isFirst = false;
									value+=b;
								

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(154, 3);
				Match(input,99,Follow._99_in_type_name708); 
				DebugLocation(154, 7);
				 value+=">"; 

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(155, 4);
			// SugarWalker.g:155:4: ( '*' | '[' ']' | '&' )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=4;
				try { DebugEnterDecision(24, false);
				switch (input.LA(1))
				{
				case 73:
					{
					alt24 = 1;
					}
					break;
				case 104:
					{
					alt24 = 2;
					}
					break;
				case 69:
					{
					alt24 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:155:6: '*'
					{
					DebugLocation(155, 6);
					Match(input,73,Follow._73_in_type_name719); 
					DebugLocation(155, 10);
					 value+="*"; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarWalker.g:156:6: '[' ']'
					{
					DebugLocation(156, 6);
					Match(input,104,Follow._104_in_type_name728); 
					DebugLocation(156, 10);
					Match(input,106,Follow._106_in_type_name730); 
					DebugLocation(156, 14);
					 value+="[]"; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarWalker.g:157:6: '&'
					{
					DebugLocation(157, 6);
					Match(input,69,Follow._69_in_type_name739); 
					DebugLocation(157, 10);
					 value+="&"; 

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:161:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 15);
		TraceIn("func_args", 15);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		Stmt a = default(Stmt);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(161, 1);
		try
		{
			// SugarWalker.g:166:2: ( ^( Func_Args (a= stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:166:4: ^( Func_Args (a= stmt_alloc )* )
			{
			DebugLocation(166, 4);
			DebugLocation(166, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args769); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(166, 16);
				// SugarWalker.g:166:16: (a= stmt_alloc )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if (((LA25_0>=Expr_Access && LA25_0<=Expr_Tuple)||LA25_0==IDENT||LA25_0==Match_Tuple||LA25_0==NUMBER||LA25_0==STRING||LA25_0==67||LA25_0==70||LA25_0==74||LA25_0==77||LA25_0==81||LA25_0==87||LA25_0==90||LA25_0==94||LA25_0==96||(LA25_0>=102 && LA25_0<=103)||LA25_0==108||LA25_0==134||LA25_0==DOUBLE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:166:17: a= stmt_alloc
						{
						DebugLocation(166, 18);
						PushFollow(Follow._stmt_alloc_in_func_args774);
						a=stmt_alloc();
						PopFollow();

						DebugLocation(167, 2);

								var b = (ExprAlloc)a;
								if (b.Type == "auto")
								{
									b.Type = "decltype";
								}
								value.Add(b);
							

						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 15);
			LeaveRule("func_args", 15);
			LeaveRule_func_args();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:177:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 16);
		TraceIn("generic_parameter", 16);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(177, 1);
		try
		{
			// SugarWalker.g:182:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:182:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(182, 4);
			DebugLocation(182, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter801); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(182, 25);
				// SugarWalker.g:182:25: (a= ident )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==IDENT||LA26_0==103))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:182:26: a= ident
						{
						DebugLocation(182, 27);
						PushFollow(Follow._ident_in_generic_parameter806);
						a=ident();
						PopFollow();

						DebugLocation(182, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 16);
			LeaveRule("generic_parameter", 16);
			LeaveRule_generic_parameter();
		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:185:1: func_def returns [FuncDef value] : ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 17);
		TraceIn("func_def", 17);
		FuncDef value = default(FuncDef);


		CommonTree deconstructor = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		string b = default(string);
		List<string> x = default(List<string>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(185, 1);
		try
		{
			// SugarWalker.g:190:2: ( ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:190:4: ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(190, 4);
			DebugLocation(190, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def832); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(190, 15);
			// SugarWalker.g:190:15: (attr= attribute )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==Attribute))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:190:16: attr= attribute
				{
				DebugLocation(190, 20);
				PushFollow(Follow._attribute_in_func_def837);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(190, 33);
			// SugarWalker.g:190:33: (a= type_name )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==Type_IDENT))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:190:34: a= type_name
				{
				DebugLocation(190, 35);
				PushFollow(Follow._type_name_in_func_def844);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(190, 48);
			// SugarWalker.g:190:48: (deconstructor= '~' )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==136))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:190:49: deconstructor= '~'
				{
				DebugLocation(190, 62);
				deconstructor=(CommonTree)Match(input,136,Follow._136_in_func_def851); 

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(190, 70);
			PushFollow(Follow._ident_in_func_def857);
			b=ident();
			PopFollow();

			DebugLocation(190, 77);
			// SugarWalker.g:190:77: (x= generic_parameter )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==Generic_Patameters))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:190:78: x= generic_parameter
				{
				DebugLocation(190, 79);
				PushFollow(Follow._generic_parameter_in_func_def862);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(190, 101);
			// SugarWalker.g:190:101: (args= func_args )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==Func_Args))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:190:102: args= func_args
				{
				DebugLocation(190, 106);
				PushFollow(Follow._func_args_in_func_def870);
				args=func_args();
				PopFollow();

				DebugLocation(190, 117);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(191, 2);
			// SugarWalker.g:191:2: (e= stmt_block |f= expr )
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==Stmt_Block))
			{
				alt32 = 1;
			}
			else if (((LA32_0>=Expr_Access && LA32_0<=Expr_Tuple)||LA32_0==IDENT||LA32_0==Match_Tuple||LA32_0==NUMBER||LA32_0==STRING||LA32_0==67||LA32_0==70||LA32_0==74||LA32_0==77||LA32_0==81||LA32_0==87||LA32_0==90||LA32_0==94||LA32_0==96||(LA32_0>=102 && LA32_0<=103)||LA32_0==108||LA32_0==134||LA32_0==DOUBLE))
			{
				alt32 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:191:4: e= stmt_block
				{
				DebugLocation(191, 5);
				PushFollow(Follow._stmt_block_in_func_def881);
				e=stmt_block();
				PopFollow();

				DebugLocation(192, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:206:4: f= expr
				{
				DebugLocation(206, 5);
				PushFollow(Follow._expr_in_func_def891);
				f=expr();
				PopFollow();

				DebugLocation(207, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if (a == "void" || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(32); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 17);
			LeaveRule("func_def", 17);
			LeaveRule_func_def();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:233:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 18);
		TraceIn("stmt_block", 18);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(233, 4);
		try
		{
			// SugarWalker.g:238:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:238:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(238, 4);
			DebugLocation(238, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block919); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(238, 17);
				// SugarWalker.g:238:17: (a= stmt )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if (((LA33_0>=Expr_Access && LA33_0<=Expr_Tuple)||LA33_0==IDENT||LA33_0==Match_Tuple||LA33_0==NUMBER||LA33_0==STRING||(LA33_0>=Stmt_Defer && LA33_0<=Stmt_While)||LA33_0==67||LA33_0==70||LA33_0==74||LA33_0==77||LA33_0==81||LA33_0==87||LA33_0==90||LA33_0==94||LA33_0==96||(LA33_0>=102 && LA33_0<=103)||LA33_0==108||LA33_0==134||LA33_0==DOUBLE))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:238:18: a= stmt
						{
						DebugLocation(238, 19);
						PushFollow(Follow._stmt_in_stmt_block924);
						a=stmt();
						PopFollow();

						DebugLocation(238, 25);
						 value.StmtList.Add(a); 

						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 18);
			LeaveRule("stmt_block", 18);
			LeaveRule_stmt_block();
		}
		DebugLocation(239, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:241:1: stmt returns [Stmt value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_linq |a= stmt_defer );
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 19);
		TraceIn("stmt", 19);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(241, 1);
		try
		{
			// SugarWalker.g:242:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_linq |a= stmt_defer )
			int alt34=8;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 67:
			case 70:
			case 74:
			case 77:
			case 81:
			case 87:
			case 90:
			case 94:
			case 96:
			case 102:
			case 103:
			case 108:
			case 134:
			case DOUBLE:
				{
				alt34 = 1;
				}
				break;
			case Stmt_Return:
				{
				alt34 = 2;
				}
				break;
			case Stmt_If:
				{
				alt34 = 3;
				}
				break;
			case Stmt_Loop:
			case Stmt_While:
				{
				alt34 = 4;
				}
				break;
			case Stmt_For:
			case Stmt_ForEach:
				{
				alt34 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt34 = 6;
				}
				break;
			case Stmt_Linq:
				{
				alt34 = 7;
				}
				break;
			case Stmt_Defer:
				{
				alt34 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:242:4: a= stmt_expr
				{
				DebugLocation(242, 5);
				PushFollow(Follow._stmt_expr_in_stmt950);
				a=stmt_expr();
				PopFollow();

				DebugLocation(242, 16);
				 value = new StmtExpr(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:243:4: a= stmt_return
				{
				DebugLocation(243, 5);
				PushFollow(Follow._stmt_return_in_stmt959);
				a=stmt_return();
				PopFollow();

				DebugLocation(243, 18);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:244:4: a= stmt_if
				{
				DebugLocation(244, 5);
				PushFollow(Follow._stmt_if_in_stmt968);
				a=stmt_if();
				PopFollow();

				DebugLocation(244, 14);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:245:4: a= stmt_while
				{
				DebugLocation(245, 5);
				PushFollow(Follow._stmt_while_in_stmt977);
				a=stmt_while();
				PopFollow();

				DebugLocation(245, 17);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:246:4: a= stmt_for
				{
				DebugLocation(246, 5);
				PushFollow(Follow._stmt_for_in_stmt986);
				a=stmt_for();
				PopFollow();

				DebugLocation(246, 15);
				 value = a; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:247:4: a= stmt_try
				{
				DebugLocation(247, 5);
				PushFollow(Follow._stmt_try_in_stmt995);
				a=stmt_try();
				PopFollow();

				DebugLocation(247, 15);
				 value = a; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:248:4: a= stmt_linq
				{
				DebugLocation(248, 5);
				PushFollow(Follow._stmt_linq_in_stmt1004);
				a=stmt_linq();
				PopFollow();

				DebugLocation(248, 16);
				 value = a; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:249:4: a= stmt_defer
				{
				DebugLocation(249, 5);
				PushFollow(Follow._stmt_defer_in_stmt1013);
				a=stmt_defer();
				PopFollow();

				DebugLocation(249, 17);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 19);
			LeaveRule("stmt", 19);
			LeaveRule_stmt();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:252:1: stmt_defer returns [Stmt value] : ^( Stmt_Defer a= stmt ) ;
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 20);
		TraceIn("stmt_defer", 20);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(252, 1);
		try
		{
			// SugarWalker.g:253:2: ( ^( Stmt_Defer a= stmt ) )
			DebugEnterAlt(1);
			// SugarWalker.g:253:4: ^( Stmt_Defer a= stmt )
			{
			DebugLocation(253, 4);
			DebugLocation(253, 6);
			Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer1031); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(253, 18);
			PushFollow(Follow._stmt_in_stmt_defer1035);
			a=stmt();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(254, 2);

					value = new StmtDefer(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 20);
			LeaveRule("stmt_defer", 20);
			LeaveRule_stmt_defer();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:259:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 21);
		TraceIn("stmt_expr", 21);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(259, 1);
		try
		{
			// SugarWalker.g:260:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt35=3;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt35 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 67:
			case 70:
			case 74:
			case 77:
			case 81:
			case 87:
			case 90:
			case 94:
			case 96:
			case 102:
			case 103:
			case 108:
			case 134:
			case DOUBLE:
				{
				alt35 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt35 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:260:4: a= stmt_using
				{
				DebugLocation(260, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1056);
				a=stmt_using();
				PopFollow();

				DebugLocation(260, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:261:4: b= expr
				{
				DebugLocation(261, 5);
				PushFollow(Follow._expr_in_stmt_expr1065);
				b=expr();
				PopFollow();

				DebugLocation(261, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:262:4: c= stmt_typedef
				{
				DebugLocation(262, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1074);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(262, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 21);
			LeaveRule("stmt_expr", 21);
			LeaveRule_stmt_expr();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:265:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 22);
		TraceIn("stmt_using", 22);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(265, 1);
		try
		{
			// SugarWalker.g:270:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:270:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(270, 4);
			DebugLocation(270, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1097); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(270, 17);
				// SugarWalker.g:270:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=3;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==IDENT||LA36_0==103))
					{
						alt36 = 1;
					}
					else if ((LA36_0==123))
					{
						alt36 = 2;
					}


					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:270:19: a= ident
						{
						DebugLocation(270, 20);
						PushFollow(Follow._ident_in_stmt_using1103);
						a=ident();
						PopFollow();

						DebugLocation(270, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:271:10: b= 'namespace'
						{
						DebugLocation(271, 11);
						b=(CommonTree)Match(input,123,Follow._123_in_stmt_using1118); 
						DebugLocation(271, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 22);
			LeaveRule("stmt_using", 22);
			LeaveRule_stmt_using();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:274:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 23);
		TraceIn("stmt_typedef", 23);
		StmtTypeDef value = default(StmtTypeDef);


		string a = default(string);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(274, 1);
		try
		{
			// SugarWalker.g:275:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:275:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(275, 4);
			DebugLocation(275, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1139); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(275, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1143);
			a=type_name();
			PopFollow();

			DebugLocation(275, 32);
			PushFollow(Follow._ident_in_stmt_typedef1147);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(276, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 23);
			LeaveRule("stmt_typedef", 23);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:281:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 24);
		TraceIn("stmt_alloc", 24);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(281, 1);
		try
		{
			// SugarWalker.g:282:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:282:4: a= expr
			{
			DebugLocation(282, 5);
			PushFollow(Follow._expr_in_stmt_alloc1168);
			a=expr();
			PopFollow();

			DebugLocation(282, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 24);
			LeaveRule("stmt_alloc", 24);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(283, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:285:1: stmt_if returns [Stmt value] : ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 25);
		TraceIn("stmt_if", 25);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(285, 1);
		try
		{
			// SugarWalker.g:286:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:286:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
			{
			DebugLocation(286, 4);
			DebugLocation(286, 6);
			Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1186); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(286, 15);
			PushFollow(Follow._expr_in_stmt_if1190);
			a=expr();
			PopFollow();

			DebugLocation(286, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1194);
			b=stmt_block();
			PopFollow();

			DebugLocation(286, 34);
			// SugarWalker.g:286:34: (c= stmt_block )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==Stmt_Block))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:286:35: c= stmt_block
				{
				DebugLocation(286, 36);
				PushFollow(Follow._stmt_block_in_stmt_if1199);
				c=stmt_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(37); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(287, 2);

					value = new StmtIf(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 25);
			LeaveRule("stmt_if", 25);
			LeaveRule_stmt_if();
		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:292:1: stmt_while returns [Stmt value] : ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Loop b= stmt_block ) );
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 26);
		TraceIn("stmt_while", 26);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(292, 1);
		try
		{
			// SugarWalker.g:293:2: ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Loop b= stmt_block ) )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==Stmt_While))
			{
				alt38 = 1;
			}
			else if ((LA38_0==Stmt_Loop))
			{
				alt38 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:293:4: ^( Stmt_While a= expr b= stmt_block )
				{
				DebugLocation(293, 4);
				DebugLocation(293, 6);
				Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1221); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(293, 18);
				PushFollow(Follow._expr_in_stmt_while1225);
				a=expr();
				PopFollow();

				DebugLocation(293, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1229);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(294, 2);

						value = new StmtWhile(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:297:4: ^( Stmt_Loop b= stmt_block )
				{
				DebugLocation(297, 4);
				DebugLocation(297, 6);
				Match(input,Stmt_Loop,Follow._Stmt_Loop_in_stmt_while1239); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(297, 17);
				PushFollow(Follow._stmt_block_in_stmt_while1243);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(298, 2);

						value = new StmtWhile(new ExprConst("true", ConstType.Ident), b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 26);
			LeaveRule("stmt_while", 26);
			LeaveRule_stmt_while();
		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:303:1: stmt_for returns [Stmt value] : ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) );
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 27);
		TraceIn("stmt_for", 27);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		StmtBlock d = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(303, 1);
		try
		{
			// SugarWalker.g:304:2: ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) )
			int alt39=2;
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==Stmt_For))
			{
				alt39 = 1;
			}
			else if ((LA39_0==Stmt_ForEach))
			{
				alt39 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:304:4: ^( Stmt_For a= expr b= expr c= expr d= stmt_block )
				{
				DebugLocation(304, 4);
				DebugLocation(304, 6);
				Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1263); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(304, 16);
				PushFollow(Follow._expr_in_stmt_for1267);
				a=expr();
				PopFollow();

				DebugLocation(304, 23);
				PushFollow(Follow._expr_in_stmt_for1271);
				b=expr();
				PopFollow();

				DebugLocation(304, 30);
				PushFollow(Follow._expr_in_stmt_for1275);
				c=expr();
				PopFollow();

				DebugLocation(304, 37);
				PushFollow(Follow._stmt_block_in_stmt_for1279);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(305, 2);

						
						value = new StmtFor(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:309:4: ^( Stmt_ForEach a= expr b= expr d= stmt_block )
				{
				DebugLocation(309, 4);
				DebugLocation(309, 6);
				Match(input,Stmt_ForEach,Follow._Stmt_ForEach_in_stmt_for1289); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(309, 20);
				PushFollow(Follow._expr_in_stmt_for1293);
				a=expr();
				PopFollow();

				DebugLocation(309, 27);
				PushFollow(Follow._expr_in_stmt_for1297);
				b=expr();
				PopFollow();

				DebugLocation(309, 34);
				PushFollow(Follow._stmt_block_in_stmt_for1301);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(310, 2);

						value = new StmtForEach(a, b, d);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 27);
			LeaveRule("stmt_for", 27);
			LeaveRule_stmt_for();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:315:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 28);
		TraceIn("stmt_try", 28);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Expr b = default(Expr);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(315, 1);
		try
		{
			// SugarWalker.g:316:2: ( ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:316:4: ^( Stmt_Try a= stmt_block b= expr c= stmt_block )
			{
			DebugLocation(316, 4);
			DebugLocation(316, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1321); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(316, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1325);
			a=stmt_block();
			PopFollow();

			DebugLocation(316, 29);
			PushFollow(Follow._expr_in_stmt_try1329);
			b=expr();
			PopFollow();

			DebugLocation(316, 36);
			PushFollow(Follow._stmt_block_in_stmt_try1333);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(317, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 28);
			LeaveRule("stmt_try", 28);
			LeaveRule_stmt_try();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:322:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 29);
		TraceIn("stmt_return", 29);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(322, 1);
		try
		{
			// SugarWalker.g:323:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:323:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(323, 4);
			DebugLocation(323, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return1353); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(323, 18);
				// SugarWalker.g:323:18: (a= expr )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if (((LA40_0>=Expr_Access && LA40_0<=Expr_Tuple)||LA40_0==IDENT||LA40_0==Match_Tuple||LA40_0==NUMBER||LA40_0==STRING||LA40_0==67||LA40_0==70||LA40_0==74||LA40_0==77||LA40_0==81||LA40_0==87||LA40_0==90||LA40_0==94||LA40_0==96||(LA40_0>=102 && LA40_0<=103)||LA40_0==108||LA40_0==134||LA40_0==DOUBLE))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:323:19: a= expr
					{
					DebugLocation(323, 20);
					PushFollow(Follow._expr_in_stmt_return1358);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(40); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(324, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 29);
			LeaveRule("stmt_return", 29);
			LeaveRule_stmt_return();
		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarWalker.g:329:1: linq_item returns [LinqItem value] : ( ^( Linq_From x= expr b= expr ) | ^( Linq_Let a= ident b= expr ) | ^( Linq_Where b= expr ) );
	[GrammarRule("linq_item")]
	private LinqItem linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 30);
		TraceIn("linq_item", 30);
		LinqItem value = default(LinqItem);


		Expr x = default(Expr);
		Expr b = default(Expr);
		string a = default(string);

		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(329, 1);
		try
		{
			// SugarWalker.g:330:2: ( ^( Linq_From x= expr b= expr ) | ^( Linq_Let a= ident b= expr ) | ^( Linq_Where b= expr ) )
			int alt41=3;
			try { DebugEnterDecision(41, false);
			switch (input.LA(1))
			{
			case Linq_From:
				{
				alt41 = 1;
				}
				break;
			case Linq_Let:
				{
				alt41 = 2;
				}
				break;
			case Linq_Where:
				{
				alt41 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:330:4: ^( Linq_From x= expr b= expr )
				{
				DebugLocation(330, 4);
				DebugLocation(330, 6);
				Match(input,Linq_From,Follow._Linq_From_in_linq_item1380); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(330, 17);
				PushFollow(Follow._expr_in_linq_item1384);
				x=expr();
				PopFollow();

				DebugLocation(330, 24);
				PushFollow(Follow._expr_in_linq_item1388);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(331, 2);

						value = new LinqFrom(x, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:334:4: ^( Linq_Let a= ident b= expr )
				{
				DebugLocation(334, 4);
				DebugLocation(334, 6);
				Match(input,Linq_Let,Follow._Linq_Let_in_linq_item1398); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(334, 16);
				PushFollow(Follow._ident_in_linq_item1402);
				a=ident();
				PopFollow();

				DebugLocation(334, 24);
				PushFollow(Follow._expr_in_linq_item1406);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(335, 2);

						value = new LinqLet(a, b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:338:4: ^( Linq_Where b= expr )
				{
				DebugLocation(338, 4);
				DebugLocation(338, 6);
				Match(input,Linq_Where,Follow._Linq_Where_in_linq_item1416); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(338, 18);
				PushFollow(Follow._expr_in_linq_item1420);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(339, 2);

						value = new LinqWhere(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("linq_item", 30);
			LeaveRule("linq_item", 30);
			LeaveRule_linq_item();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return value;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarWalker.g:344:1: linq_prefix returns [List<LinqItem> value] : ^( Linq_Prefix (a= linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private List<LinqItem> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 31);
		TraceIn("linq_prefix", 31);
		List<LinqItem> value = default(List<LinqItem>);


		LinqItem a = default(LinqItem);


			value = new List<LinqItem>();

		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(344, 1);
		try
		{
			// SugarWalker.g:349:2: ( ^( Linq_Prefix (a= linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:349:4: ^( Linq_Prefix (a= linq_item )+ )
			{
			DebugLocation(349, 4);
			DebugLocation(349, 6);
			Match(input,Linq_Prefix,Follow._Linq_Prefix_in_linq_prefix1445); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(349, 18);
			// SugarWalker.g:349:18: (a= linq_item )+
			int cnt42=0;
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if (((LA42_0>=Linq_From && LA42_0<=Linq_Let)||LA42_0==Linq_Where))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:349:19: a= linq_item
					{
					DebugLocation(349, 20);
					PushFollow(Follow._linq_item_in_linq_prefix1450);
					a=linq_item();
					PopFollow();

					DebugLocation(349, 31);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt42 >= 1)
						goto loop42;

					EarlyExitException eee42 = new EarlyExitException( 42, input );
					DebugRecognitionException(eee42);
					throw eee42;
				}
				cnt42++;
			}
			loop42:
				;

			} finally { DebugExitSubRule(42); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("linq_prefix", 31);
			LeaveRule("linq_prefix", 31);
			LeaveRule_linq_prefix();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return value;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarWalker.g:352:1: stmt_linq returns [Stmt value] : ^( Stmt_Linq a= linq_prefix b= stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private Stmt stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 32);
		TraceIn("stmt_linq", 32);
		Stmt value = default(Stmt);


		List<LinqItem> a = default(List<LinqItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(352, 1);
		try
		{
			// SugarWalker.g:353:2: ( ^( Stmt_Linq a= linq_prefix b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:353:4: ^( Stmt_Linq a= linq_prefix b= stmt_block )
			{
			DebugLocation(353, 4);
			DebugLocation(353, 6);
			Match(input,Stmt_Linq,Follow._Stmt_Linq_in_stmt_linq1471); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(353, 17);
			PushFollow(Follow._linq_prefix_in_stmt_linq1475);
			a=linq_prefix();
			PopFollow();

			DebugLocation(353, 31);
			PushFollow(Follow._stmt_block_in_stmt_linq1479);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(354, 2);

					value = new StmtLinq(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_linq", 32);
			LeaveRule("stmt_linq", 32);
			LeaveRule_stmt_linq();
		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return value;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:359:1: ident returns [string value] : ( '@' )? a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 33);
		TraceIn("ident", 33);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(359, 1);
		try
		{
			// SugarWalker.g:364:2: ( ( '@' )? a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:364:4: ( '@' )? a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(364, 4);
			// SugarWalker.g:364:4: ( '@' )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==103))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:364:5: '@'
				{
				DebugLocation(364, 5);
				Match(input,103,Follow._103_in_ident1504); 
				DebugLocation(364, 9);
				 value += "@"; 

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(364, 31);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1512); 
			DebugLocation(364, 38);
			 value += a.Text; 
			DebugLocation(364, 60);
			// SugarWalker.g:364:60: ( '::' a= IDENT )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==89))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:364:61: '::' a= IDENT
					{
					DebugLocation(364, 61);
					Match(input,89,Follow._89_in_ident1517); 
					DebugLocation(364, 67);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1521); 
					DebugLocation(364, 74);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 33);
			LeaveRule("ident", 33);
			LeaveRule_ident();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:367:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 34);
		TraceIn("ident_list", 34);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(367, 1);
		try
		{
			// SugarWalker.g:372:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:372:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(372, 4);
			DebugLocation(372, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list1546); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(372, 17);
				// SugarWalker.g:372:17: (a= ident )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_0 = input.LA(1);

					if ((LA45_0==IDENT||LA45_0==103))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:372:18: a= ident
						{
						DebugLocation(372, 19);
						PushFollow(Follow._ident_in_ident_list1551);
						a=ident();
						PopFollow();

						DebugLocation(372, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 34);
			LeaveRule("ident_list", 34);
			LeaveRule_ident_list();
		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:375:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 35);
		TraceIn("alloc_expr", 35);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(375, 1);
		try
		{
			// SugarWalker.g:376:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) )
			int alt48=2;
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==Expr_Alloc_Equal))
			{
				alt48 = 1;
			}
			else if ((LA48_0==Expr_Alloc_Bracket))
			{
				alt48 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:376:4: ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(376, 4);
				DebugLocation(376, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr1573); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(376, 24);
				PushFollow(Follow._type_name_in_alloc_expr1577);
				a=type_name();
				PopFollow();

				DebugLocation(376, 36);
				PushFollow(Follow._ident_list_in_alloc_expr1581);
				b=ident_list();
				PopFollow();

				DebugLocation(376, 48);
				// SugarWalker.g:376:48: (c= expr_list )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if (((LA46_0>=Expr_Access && LA46_0<=Expr_Tuple)||LA46_0==IDENT||LA46_0==Match_Tuple||LA46_0==NUMBER||LA46_0==STRING||LA46_0==67||LA46_0==70||LA46_0==74||LA46_0==77||LA46_0==81||LA46_0==87||LA46_0==90||LA46_0==94||LA46_0==96||(LA46_0>=102 && LA46_0<=103)||LA46_0==108||LA46_0==134||LA46_0==DOUBLE))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:376:49: c= expr_list
					{
					DebugLocation(376, 50);
					PushFollow(Follow._expr_list_in_alloc_expr1586);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(46); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(377, 2);

						value = new ExprAlloc(a, b, c, true);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:380:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(380, 4);
				DebugLocation(380, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr1598); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(380, 26);
				PushFollow(Follow._type_name_in_alloc_expr1602);
				a=type_name();
				PopFollow();

				DebugLocation(380, 38);
				PushFollow(Follow._ident_list_in_alloc_expr1606);
				b=ident_list();
				PopFollow();

				DebugLocation(380, 50);
				// SugarWalker.g:380:50: (c= expr_list )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if (((LA47_0>=Expr_Access && LA47_0<=Expr_Tuple)||LA47_0==IDENT||LA47_0==Match_Tuple||LA47_0==NUMBER||LA47_0==STRING||LA47_0==67||LA47_0==70||LA47_0==74||LA47_0==77||LA47_0==81||LA47_0==87||LA47_0==90||LA47_0==94||LA47_0==96||(LA47_0>=102 && LA47_0<=103)||LA47_0==108||LA47_0==134||LA47_0==DOUBLE))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:380:51: c= expr_list
					{
					DebugLocation(380, 52);
					PushFollow(Follow._expr_list_in_alloc_expr1611);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(381, 2);

						value = new ExprAlloc(a, b, c, false);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 35);
			LeaveRule("alloc_expr", 35);
			LeaveRule_alloc_expr();
		}
		DebugLocation(384, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:386:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 36);
		TraceIn("expr_tuple", 36);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(386, 1);
		try
		{
			// SugarWalker.g:391:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:391:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(391, 4);
			DebugLocation(391, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple1638); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(391, 17);
			// SugarWalker.g:391:17: (a= expr )+
			int cnt49=0;
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if (((LA49_0>=Expr_Access && LA49_0<=Expr_Tuple)||LA49_0==IDENT||LA49_0==Match_Tuple||LA49_0==NUMBER||LA49_0==STRING||LA49_0==67||LA49_0==70||LA49_0==74||LA49_0==77||LA49_0==81||LA49_0==87||LA49_0==90||LA49_0==94||LA49_0==96||(LA49_0>=102 && LA49_0<=103)||LA49_0==108||LA49_0==134||LA49_0==DOUBLE))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:391:18: a= expr
					{
					DebugLocation(391, 19);
					PushFollow(Follow._expr_in_expr_tuple1643);
					a=expr();
					PopFollow();

					DebugLocation(391, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt49 >= 1)
						goto loop49;

					EarlyExitException eee49 = new EarlyExitException( 49, input );
					DebugRecognitionException(eee49);
					throw eee49;
				}
				cnt49++;
			}
			loop49:
				;

			} finally { DebugExitSubRule(49); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 36);
			LeaveRule("expr_tuple", 36);
			LeaveRule_expr_tuple();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:394:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 37);
		TraceIn("match_tuple", 37);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(394, 1);
		try
		{
			// SugarWalker.g:399:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:399:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(399, 4);
			DebugLocation(399, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple1670); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(399, 18);
				// SugarWalker.g:399:18: (a= expr )*
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					int LA50_0 = input.LA(1);

					if (((LA50_0>=Expr_Access && LA50_0<=Expr_Tuple)||LA50_0==IDENT||LA50_0==Match_Tuple||LA50_0==NUMBER||LA50_0==STRING||LA50_0==67||LA50_0==70||LA50_0==74||LA50_0==77||LA50_0==81||LA50_0==87||LA50_0==90||LA50_0==94||LA50_0==96||(LA50_0>=102 && LA50_0<=103)||LA50_0==108||LA50_0==134||LA50_0==DOUBLE))
					{
						alt50 = 1;
					}


					} finally { DebugExitDecision(50); }
					switch ( alt50 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:399:19: a= expr
						{
						DebugLocation(399, 20);
						PushFollow(Follow._expr_in_match_tuple1675);
						a=expr();
						PopFollow();

						DebugLocation(399, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop50;
					}
				}

				loop50:
					;

				} finally { DebugExitSubRule(50); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 37);
			LeaveRule("match_tuple", 37);
			LeaveRule_match_tuple();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:402:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 38);
		TraceIn("expr_list", 38);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(402, 1);
		try
		{
			// SugarWalker.g:407:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:407:4: (a= expr )+
			{
			DebugLocation(407, 4);
			// SugarWalker.g:407:4: (a= expr )+
			int cnt51=0;
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if (((LA51_0>=Expr_Access && LA51_0<=Expr_Tuple)||LA51_0==IDENT||LA51_0==Match_Tuple||LA51_0==NUMBER||LA51_0==STRING||LA51_0==67||LA51_0==70||LA51_0==74||LA51_0==77||LA51_0==81||LA51_0==87||LA51_0==90||LA51_0==94||LA51_0==96||(LA51_0>=102 && LA51_0<=103)||LA51_0==108||LA51_0==134||LA51_0==DOUBLE))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:407:5: a= expr
					{
					DebugLocation(407, 6);
					PushFollow(Follow._expr_in_expr_list1703);
					a=expr();
					PopFollow();

					DebugLocation(407, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt51 >= 1)
						goto loop51;

					EarlyExitException eee51 = new EarlyExitException( 51, input );
					DebugRecognitionException(eee51);
					throw eee51;
				}
				cnt51++;
			}
			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 38);
			LeaveRule("expr_list", 38);
			LeaveRule_expr_list();
		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:410:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 39);
		TraceIn("call_expr", 39);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(410, 1);
		try
		{
			// SugarWalker.g:411:2: ( ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:411:4: ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? )
			{
			DebugLocation(411, 4);
			DebugLocation(411, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr1723); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(411, 17);
			PushFollow(Follow._expr_in_call_expr1727);
			a=expr();
			PopFollow();

			DebugLocation(411, 23);
			// SugarWalker.g:411:23: (b= generic_parameter )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==Generic_Patameters))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:411:24: b= generic_parameter
				{
				DebugLocation(411, 25);
				PushFollow(Follow._generic_parameter_in_call_expr1732);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(411, 46);
			// SugarWalker.g:411:46: (c= expr_list )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if (((LA53_0>=Expr_Access && LA53_0<=Expr_Tuple)||LA53_0==IDENT||LA53_0==Match_Tuple||LA53_0==NUMBER||LA53_0==STRING||LA53_0==67||LA53_0==70||LA53_0==74||LA53_0==77||LA53_0==81||LA53_0==87||LA53_0==90||LA53_0==94||LA53_0==96||(LA53_0>=102 && LA53_0<=103)||LA53_0==108||LA53_0==134||LA53_0==DOUBLE))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:411:47: c= expr_list
				{
				DebugLocation(411, 48);
				PushFollow(Follow._expr_list_in_call_expr1739);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(53); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(412, 2);

					value = new ExprCall(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 39);
			LeaveRule("call_expr", 39);
			LeaveRule_call_expr();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:417:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 40);
		TraceIn("dict_expr", 40);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(417, 1);
		try
		{
			// SugarWalker.g:418:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:418:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(418, 4);
			DebugLocation(418, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr1761); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(418, 17);
			PushFollow(Follow._expr_in_dict_expr1765);
			a=expr();
			PopFollow();

			DebugLocation(418, 23);
			// SugarWalker.g:418:23: (b= expr_list )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if (((LA54_0>=Expr_Access && LA54_0<=Expr_Tuple)||LA54_0==IDENT||LA54_0==Match_Tuple||LA54_0==NUMBER||LA54_0==STRING||LA54_0==67||LA54_0==70||LA54_0==74||LA54_0==77||LA54_0==81||LA54_0==87||LA54_0==90||LA54_0==94||LA54_0==96||(LA54_0>=102 && LA54_0<=103)||LA54_0==108||LA54_0==134||LA54_0==DOUBLE))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:418:24: b= expr_list
				{
				DebugLocation(418, 25);
				PushFollow(Follow._expr_list_in_dict_expr1770);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(419, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 40);
			LeaveRule("dict_expr", 40);
			LeaveRule_dict_expr();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:424:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda (b= func_args )? a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 41);
		TraceIn("lambda_expr", 41);
		ExprLambda value = default(ExprLambda);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(424, 1);
		try
		{
			// SugarWalker.g:425:2: ( ^( Expr_Lambda (b= func_args )? a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:425:4: ^( Expr_Lambda (b= func_args )? a= expr )
			{
			DebugLocation(425, 4);
			DebugLocation(425, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr1792); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(425, 18);
			// SugarWalker.g:425:18: (b= func_args )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==Func_Args))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:425:19: b= func_args
				{
				DebugLocation(425, 20);
				PushFollow(Follow._func_args_in_lambda_expr1797);
				b=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(425, 34);
			PushFollow(Follow._expr_in_lambda_expr1803);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(426, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 41);
			LeaveRule("lambda_expr", 41);
			LeaveRule_lambda_expr();
		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:431:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 42);
		TraceIn("new_expr", 42);
		Expr value = default(Expr);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(431, 1);
		try
		{
			// SugarWalker.g:432:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==Expr_New_Type))
			{
				alt57 = 1;
			}
			else if ((LA57_0==Expr_New_Array))
			{
				alt57 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:432:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(432, 4);
				DebugLocation(432, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr1823); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(432, 21);
				PushFollow(Follow._type_name_in_new_expr1827);
				a=type_name();
				PopFollow();

				DebugLocation(432, 33);
				// SugarWalker.g:432:33: (b= expr_list )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if (((LA56_0>=Expr_Access && LA56_0<=Expr_Tuple)||LA56_0==IDENT||LA56_0==Match_Tuple||LA56_0==NUMBER||LA56_0==STRING||LA56_0==67||LA56_0==70||LA56_0==74||LA56_0==77||LA56_0==81||LA56_0==87||LA56_0==90||LA56_0==94||LA56_0==96||(LA56_0>=102 && LA56_0<=103)||LA56_0==108||LA56_0==134||LA56_0==DOUBLE))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:432:33: b= expr_list
					{
					DebugLocation(432, 33);
					PushFollow(Follow._expr_list_in_new_expr1831);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(56); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(433, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:436:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(436, 4);
				DebugLocation(436, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr1842); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(436, 22);
				PushFollow(Follow._type_name_in_new_expr1846);
				a=type_name();
				PopFollow();

				DebugLocation(436, 34);
				PushFollow(Follow._expr_list_in_new_expr1850);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(437, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 42);
			LeaveRule("new_expr", 42);
			LeaveRule_new_expr();
		}
		DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:442:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 43);
		TraceIn("call_with_expr", 43);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(442, 1);
		try
		{
			// SugarWalker.g:443:2: ( ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:443:4: ^( Expr_Call_With a= expr b= ident (c= expr_list )? )
			{
			DebugLocation(443, 4);
			DebugLocation(443, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr1870); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(443, 22);
			PushFollow(Follow._expr_in_call_with_expr1874);
			a=expr();
			PopFollow();

			DebugLocation(443, 29);
			PushFollow(Follow._ident_in_call_with_expr1878);
			b=ident();
			PopFollow();

			DebugLocation(443, 37);
			// SugarWalker.g:443:37: (c= expr_list )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if (((LA58_0>=Expr_Access && LA58_0<=Expr_Tuple)||LA58_0==IDENT||LA58_0==Match_Tuple||LA58_0==NUMBER||LA58_0==STRING||LA58_0==67||LA58_0==70||LA58_0==74||LA58_0==77||LA58_0==81||LA58_0==87||LA58_0==90||LA58_0==94||LA58_0==96||(LA58_0>=102 && LA58_0<=103)||LA58_0==108||LA58_0==134||LA58_0==DOUBLE))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:443:37: c= expr_list
				{
				DebugLocation(443, 37);
				PushFollow(Follow._expr_list_in_call_with_expr1882);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(444, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b, ConstType.Ident), null, Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 43);
			LeaveRule("call_with_expr", 43);
			LeaveRule_call_with_expr();
		}
		DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:458:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr list= expr_list ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 44);
		TraceIn("expr", 44);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		Expr expr_new = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		List<Expr> list = default(List<Expr>);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(458, 1);
		try
		{
			// SugarWalker.g:459:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr list= expr_list ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING )
			int alt59=20;
			try { DebugEnterDecision(59, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt59 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt59 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt59 = 3;
				}
				break;
			case Expr_Call:
				{
				alt59 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt59 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt59 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt59 = 7;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt59 = 8;
				}
				break;
			case Expr_Infix:
				{
				alt59 = 9;
				}
				break;
			case Expr_Cond:
				{
				alt59 = 10;
				}
				break;
			case Expr_Access:
				{
				alt59 = 11;
				}
				break;
			case Expr_Bin:
				{
				alt59 = 12;
				}
				break;
			case 67:
			case 70:
			case 74:
			case 77:
			case 81:
			case 87:
			case 94:
			case 96:
			case 102:
			case 108:
			case 134:
				{
				alt59 = 13;
				}
				break;
			case 90:
				{
				alt59 = 14;
				}
				break;
			case Expr_Bracket:
				{
				alt59 = 15;
				}
				break;
			case Expr_Suffix:
				{
				alt59 = 16;
				}
				break;
			case Expr_Prefix:
				{
				alt59 = 17;
				}
				break;
			case IDENT:
			case 103:
				{
				alt59 = 18;
				}
				break;
			case NUMBER:
			case DOUBLE:
				{
				alt59 = 19;
				}
				break;
			case STRING:
				{
				alt59 = 20;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:459:7: tuple= expr_tuple
				{
				DebugLocation(459, 12);
				PushFollow(Follow._expr_tuple_in_expr1907);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(460, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:463:4: alloc= alloc_expr
				{
				DebugLocation(463, 9);
				PushFollow(Follow._alloc_expr_in_expr1917);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(464, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:467:4: match= match_tuple
				{
				DebugLocation(467, 9);
				PushFollow(Follow._match_tuple_in_expr1927);
				match=match_tuple();
				PopFollow();

				DebugLocation(468, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:471:4: call= call_expr
				{
				DebugLocation(471, 8);
				PushFollow(Follow._call_expr_in_expr1937);
				call=call_expr();
				PopFollow();

				DebugLocation(472, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:475:4: call_with= call_with_expr
				{
				DebugLocation(475, 13);
				PushFollow(Follow._call_with_expr_in_expr1947);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(476, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:479:4: dict= dict_expr
				{
				DebugLocation(479, 8);
				PushFollow(Follow._dict_expr_in_expr1957);
				dict=dict_expr();
				PopFollow();

				DebugLocation(480, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:483:4: lambda= lambda_expr
				{
				DebugLocation(483, 10);
				PushFollow(Follow._lambda_expr_in_expr1967);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(484, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:487:4: expr_new= new_expr
				{
				DebugLocation(487, 12);
				PushFollow(Follow._new_expr_in_expr1977);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(488, 2);

						value = expr_new;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:491:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(491, 4);
				DebugLocation(491, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr1986); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(491, 27);
				PushFollow(Follow._ident_in_expr1990);
				ident_text=ident();
				PopFollow();

				DebugLocation(491, 35);
				PushFollow(Follow._expr_in_expr1994);
				a=expr();
				PopFollow();

				DebugLocation(491, 42);
				PushFollow(Follow._expr_in_expr1998);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(492, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:495:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(495, 4);
				DebugLocation(495, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr2008); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(495, 17);
				PushFollow(Follow._expr_in_expr2012);
				a=expr();
				PopFollow();

				DebugLocation(495, 24);
				PushFollow(Follow._expr_in_expr2016);
				b=expr();
				PopFollow();

				DebugLocation(495, 31);
				PushFollow(Follow._expr_in_expr2020);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(496, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:499:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(499, 4);
				DebugLocation(499, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr2030); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(499, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=82 && input.LA(1)<=85)||input.LA(1)==89)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(499, 57);
				PushFollow(Follow._expr_in_expr2056);
				a=expr();
				PopFollow();

				DebugLocation(499, 73);
				PushFollow(Follow._ident_in_expr2060);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(500, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:503:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr )
				{
				DebugLocation(503, 4);
				DebugLocation(503, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr2070); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(503, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=65 && input.LA(1)<=66)||(input.LA(1)>=68 && input.LA(1)<=69)||input.LA(1)==73||input.LA(1)==75||input.LA(1)==79||input.LA(1)==86||(input.LA(1)>=92 && input.LA(1)<=93)||input.LA(1)==95||input.LA(1)==97||(input.LA(1)>=99 && input.LA(1)<=101)||input.LA(1)==107||input.LA(1)==133||input.LA(1)==135)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(508, 9);
				PushFollow(Follow._expr_in_expr2175);
				a=expr();
				PopFollow();

				DebugLocation(508, 16);
				PushFollow(Follow._expr_in_expr2179);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(509, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:512:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(512, 4);
				DebugLocation(512, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==67||input.LA(1)==70||input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==87||input.LA(1)==94||input.LA(1)==96||input.LA(1)==102||input.LA(1)==108||input.LA(1)==134)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(512, 88);
				PushFollow(Follow._expr_in_expr2237);
				a=expr();
				PopFollow();

				DebugLocation(512, 95);
				PushFollow(Follow._expr_in_expr2241);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(513, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:516:4: ^( ':=' a= expr list= expr_list )
				{
				DebugLocation(516, 4);
				DebugLocation(516, 6);
				Match(input,90,Follow._90_in_expr2251); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(516, 12);
				PushFollow(Follow._expr_in_expr2255);
				a=expr();
				PopFollow();

				DebugLocation(516, 22);
				PushFollow(Follow._expr_list_in_expr2259);
				list=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(517, 2);

						System.Diagnostics.Debug.Assert(a is ExprConst);
						value = new ExprAlloc("auto", new List<string> { ((ExprConst)a).Text }, list, true);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:521:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(521, 4);
				DebugLocation(521, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr2269); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(521, 20);
				PushFollow(Follow._expr_in_expr2273);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(522, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:525:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(525, 4);
				DebugLocation(525, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr2283); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(525, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==76||input.LA(1)==80)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(525, 36);
				PushFollow(Follow._expr_in_expr2297);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(526, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:529:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(529, 4);
				DebugLocation(529, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr2307); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(529, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==64||input.LA(1)==69||input.LA(1)==73||(input.LA(1)>=75 && input.LA(1)<=76)||(input.LA(1)>=79 && input.LA(1)<=80)||input.LA(1)==136)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(529, 72);
				PushFollow(Follow._expr_in_expr2345);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(530, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:533:4: text_ident= ident
				{
				DebugLocation(533, 15);
				PushFollow(Follow._ident_in_expr2358);
				text_ident=ident();
				PopFollow();

				DebugLocation(534, 2);

						value = new ExprConst(text_ident, ConstType.Ident);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:537:4: text= ( NUMBER | DOUBLE )
				{
				DebugLocation(537, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(538, 5);

				        value = new ExprConst(text.Text, ConstType.Number);
				    

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:541:4: text= STRING
				{
				DebugLocation(541, 9);
				text=(CommonTree)Match(input,STRING,Follow._STRING_in_expr2389); 
				DebugLocation(542, 2);

				        value = new ExprConst(text.Text, ConstType.String);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 44);
			LeaveRule("expr", 44);
			LeaveRule_expr();
		}
		DebugLocation(545, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0xC00100410003448UL,0x4000000UL});
		public static readonly BitSet _func_def_in_node134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc248 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc253 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _type_name_in_global_alloc259 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_global_alloc263 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_global_alloc268 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc280 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc285 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _type_name_in_global_alloc291 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_global_alloc295 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_global_alloc300 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _90_in_global_alloc312 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc317 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_global_alloc323 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_global_alloc327 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item414 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item419 = new BitSet(new ulong[]{0x1080080000008UL,0x8000000000UL});
		public static readonly BitSet _112_in_attribute_item427 = new BitSet(new ulong[]{0x1080080000008UL,0x8000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item435 = new BitSet(new ulong[]{0x1080080000008UL,0x8000000000UL});
		public static readonly BitSet _attribute_item_in_attribute463 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def484 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def488 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _global_block_in_namespace_def492 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def517 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_import_def522 = new BitSet(new ulong[]{0x1000000000008UL});
		public static readonly BitSet _Enum_in_enum_def543 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def548 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_enum_def554 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_enum_def558 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def578 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_class_def583 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_class_def589 = new BitSet(new ulong[]{0x268000008UL});
		public static readonly BitSet _generic_parameter_in_class_def594 = new BitSet(new ulong[]{0x248000008UL});
		public static readonly BitSet _func_args_in_class_def601 = new BitSet(new ulong[]{0x240000008UL});
		public static readonly BitSet _ident_list_in_class_def608 = new BitSet(new ulong[]{0x40000008UL});
		public static readonly BitSet _global_block_in_class_def615 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_IDENT_in_type_name643 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _112_in_type_name652 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL,0x2UL});
		public static readonly BitSet _129_in_type_name662 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_type_name676 = new BitSet(new ulong[]{0x8UL,0x10010000220UL});
		public static readonly BitSet _92_in_type_name686 = new BitSet(new ulong[]{0x2000000000000000UL,0x800000000UL});
		public static readonly BitSet _type_name_in_type_name698 = new BitSet(new ulong[]{0x2000000000000000UL,0x800000000UL});
		public static readonly BitSet _99_in_type_name708 = new BitSet(new ulong[]{0x8UL,0x10000000220UL});
		public static readonly BitSet _73_in_type_name719 = new BitSet(new ulong[]{0x8UL,0x10000000220UL});
		public static readonly BitSet _104_in_type_name728 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_type_name730 = new BitSet(new ulong[]{0x8UL,0x10000000220UL});
		public static readonly BitSet _69_in_type_name739 = new BitSet(new ulong[]{0x8UL,0x10000000220UL});
		public static readonly BitSet _Func_Args_in_func_args769 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_alloc_in_func_args774 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter801 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter806 = new BitSet(new ulong[]{0x80000008UL,0x8000000000UL});
		public static readonly BitSet _Func_Def_in_func_def832 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_func_def837 = new BitSet(new ulong[]{0x2000000080000000UL,0x8000000000UL,0x100UL});
		public static readonly BitSet _type_name_in_func_def844 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL,0x100UL});
		public static readonly BitSet _136_in_func_def851 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_func_def857 = new BitSet(new ulong[]{0x30A00AFFFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _generic_parameter_in_func_def862 = new BitSet(new ulong[]{0x30A008FFFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _func_args_in_func_def870 = new BitSet(new ulong[]{0x30A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _stmt_block_in_func_def881 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def891 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block919 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block924 = new BitSet(new ulong[]{0x1FFD0A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _stmt_expr_in_stmt950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer1031 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1035 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1097 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1103 = new BitSet(new ulong[]{0x80000008UL,0x800008000000000UL});
		public static readonly BitSet _123_in_stmt_using1118 = new BitSet(new ulong[]{0x80000008UL,0x800008000000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1139 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1143 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1147 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1186 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1190 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1194 = new BitSet(new ulong[]{0x2000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1199 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1221 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1225 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1229 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Loop_in_stmt_while1239 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_while1243 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1263 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1267 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_stmt_for1271 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_stmt_for1275 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1279 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_ForEach_in_stmt_for1289 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1293 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_stmt_for1297 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1301 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1321 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1325 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_stmt_try1329 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1333 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return1353 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1358 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_From_in_linq_item1380 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_linq_item1384 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_linq_item1388 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Let_in_linq_item1398 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_linq_item1402 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_linq_item1406 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Where_in_linq_item1416 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_linq_item1420 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Prefix_in_linq_prefix1445 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _linq_item_in_linq_prefix1450 = new BitSet(new ulong[]{0x16000000008UL});
		public static readonly BitSet _Stmt_Linq_in_stmt_linq1471 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq1475 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq1479 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _103_in_ident1504 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident1512 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_ident1517 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident1521 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _Ident_List_in_ident_list1546 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list1551 = new BitSet(new ulong[]{0x80000008UL,0x8000000000UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr1573 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1577 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1581 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_alloc_expr1586 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr1598 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1602 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1606 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_alloc_expr1611 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple1638 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple1643 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple1670 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple1675 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr_list1703 = new BitSet(new ulong[]{0x10A0087FFF802UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _Expr_Call_in_call_expr1723 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr1727 = new BitSet(new ulong[]{0x10A00A7FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _generic_parameter_in_call_expr1732 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_call_expr1739 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr1761 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr1765 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_dict_expr1770 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr1792 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr1797 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_lambda_expr1803 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr1823 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1827 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_new_expr1831 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr1842 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1846 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_new_expr1850 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr1870 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr1874 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_call_with_expr1878 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_call_with_expr1882 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr1907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr1917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr1927 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr1937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr1947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr1957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr1977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr1986 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr1990 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr1994 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr1998 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr2008 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2012 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr2016 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr2020 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr2030 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2034 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr2056 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_expr2060 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr2070 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2074 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr2175 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr2179 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr2191 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2237 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr2241 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _90_in_expr2251 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2255 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_list_in_expr2259 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr2269 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2273 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr2283 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2287 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr2297 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr2307 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2311 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x10C144822448UL,0x240UL});
		public static readonly BitSet _expr_in_expr2345 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr2358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr2368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr2389 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
