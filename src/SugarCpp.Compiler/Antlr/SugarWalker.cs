//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-04-29 10:25:55

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Expr_Access", "Expr_Alloc", "Expr_Alloc_Auto", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Cond", "Expr_Dict", "Expr_Lambda", "Expr_Match_Tuple", "Expr_New", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_If", "Stmt_While", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'return'", "'|'", "'|='", "'||'", "'~'", "DOUBLE", "';'"
	};
	public const int EOF=-1;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Expr_Access=7;
	public const int Expr_Alloc=8;
	public const int Expr_Alloc_Auto=9;
	public const int Expr_Bin=10;
	public const int Expr_Block=11;
	public const int Expr_Call=12;
	public const int Expr_Cond=13;
	public const int Expr_Dict=14;
	public const int Expr_Lambda=15;
	public const int Expr_Match_Tuple=16;
	public const int Expr_New=17;
	public const int Expr_Prefix=18;
	public const int Expr_Return=19;
	public const int Expr_Suffix=20;
	public const int Expr_Tuple=21;
	public const int Func_Args=22;
	public const int Func_Def=23;
	public const int IDENT=24;
	public const int INDENT=25;
	public const int INT=26;
	public const int Left_Bracket=27;
	public const int NEWLINE=28;
	public const int Right_Bracket=29;
	public const int Root=30;
	public const int SP=31;
	public const int STRING=32;
	public const int Stmt_If=33;
	public const int Stmt_While=34;
	public const int Type_Tuple=35;
	public const int T__84=84;
	public const int DOUBLE=83;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : (a= node ( NEWLINE )* )+ ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		AstNode a = default(AstNode);


			value = new Root();

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:28:2: ( (a= node ( NEWLINE )* )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:28:4: (a= node ( NEWLINE )* )+
			{
			DebugLocation(28, 4);
			// SugarWalker.g:28:4: (a= node ( NEWLINE )* )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==IDENT||LA2_0==Type_Tuple))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:28:5: a= node ( NEWLINE )*
					{
					DebugLocation(28, 7);
					PushFollow(Follow._node_in_root85);
					a=node();
					PopFollow();

					DebugLocation(28, 15);
					 value.List.Add(a); 
					DebugLocation(28, 39);
					// SugarWalker.g:28:39: ( NEWLINE )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_0 = input.LA(1);

						if ((LA1_0==NEWLINE))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:28:39: NEWLINE
							{
							DebugLocation(28, 39);
							Match(input,NEWLINE,Follow._NEWLINE_in_root90); 

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(29, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:31:1: node returns [AstNode value] : a= func_def ;
	[GrammarRule("node")]
	private AstNode node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstNode value = default(AstNode);


		FuncDef a = default(FuncDef);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(31, 1);
		try
		{
			// SugarWalker.g:32:2: (a= func_def )
			DebugEnterAlt(1);
			// SugarWalker.g:32:4: a= func_def
			{
			DebugLocation(32, 6);
			PushFollow(Follow._func_def_in_node112);
			a=func_def();
			PopFollow();

			DebugLocation(32, 17);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(33, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:35:1: type_name returns [string value] : (a= IDENT ( '<' b= type_name ( ',' b= type_name )* '>' )* ( '*' )* | ^( Type_Tuple (b= type_name )+ ) );
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 3);
		TraceIn("type_name", 3);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(35, 1);
		try
		{
			// SugarWalker.g:40:2: (a= IDENT ( '<' b= type_name ( ',' b= type_name )* '>' )* ( '*' )* | ^( Type_Tuple (b= type_name )+ ) )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==IDENT))
			{
				alt7 = 1;
			}
			else if ((LA7_0==Type_Tuple))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:40:4: a= IDENT ( '<' b= type_name ( ',' b= type_name )* '>' )* ( '*' )*
				{
				DebugLocation(40, 5);
				a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_type_name136); 
				DebugLocation(40, 12);
				 value+=a.Text; 
				DebugLocation(41, 4);
				// SugarWalker.g:41:4: ( '<' b= type_name ( ',' b= type_name )* '>' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==62))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:41:5: '<' b= type_name ( ',' b= type_name )* '>'
						{
						DebugLocation(41, 5);
						Match(input,62,Follow._62_in_type_name144); 
						DebugLocation(41, 9);
						 value+="<"; 
						DebugLocation(42, 5);
						PushFollow(Follow._type_name_in_type_name153);
						b=type_name();
						PopFollow();

						DebugLocation(42, 16);
						 value+=b; 
						DebugLocation(43, 4);
						// SugarWalker.g:43:4: ( ',' b= type_name )*
						try { DebugEnterSubRule(3);
						while (true)
						{
							int alt3=2;
							try { DebugEnterDecision(3, false);
							int LA3_0 = input.LA(1);

							if ((LA3_0==50))
							{
								alt3 = 1;
							}


							} finally { DebugExitDecision(3); }
							switch ( alt3 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarWalker.g:43:5: ',' b= type_name
								{
								DebugLocation(43, 5);
								Match(input,50,Follow._50_in_type_name161); 
								DebugLocation(43, 10);
								PushFollow(Follow._type_name_in_type_name165);
								b=type_name();
								PopFollow();

								DebugLocation(43, 21);
								 value+=", " + b; 

								}
								break;

							default:
								goto loop3;
							}
						}

						loop3:
							;

						} finally { DebugExitSubRule(3); }

						DebugLocation(44, 4);
						Match(input,69,Follow._69_in_type_name174); 
						DebugLocation(44, 8);
						 value+=">"; 

						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(45, 4);
				// SugarWalker.g:45:4: ( '*' )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0==45))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:45:5: '*'
						{
						DebugLocation(45, 5);
						Match(input,45,Follow._45_in_type_name184); 
						DebugLocation(45, 9);
						 value+="*"; 

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:46:4: ^( Type_Tuple (b= type_name )+ )
				{
				DebugLocation(46, 4);
				bool isFirst = true; value += "std::tuple<";
				DebugLocation(46, 52);
				DebugLocation(46, 54);
				Match(input,Type_Tuple,Follow._Type_Tuple_in_type_name196); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(46, 65);
				// SugarWalker.g:46:65: (b= type_name )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==IDENT||LA6_0==Type_Tuple))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:46:66: b= type_name
						{
						DebugLocation(46, 67);
						PushFollow(Follow._type_name_in_type_name201);
						b=type_name();
						PopFollow();

						DebugLocation(47, 2);

								if (!isFirst) value += ",";
								isFirst = false;
								value += b;
							

						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(52, 2);

						value += ">";
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 3);
			LeaveRule("type_name", 3);
			LeaveRule_type_name();
		}
		DebugLocation(55, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:57:1: func_args returns [List<Stmt> value] : ^( Func_Args (a= stmt )* ) ;
	[GrammarRule("func_args")]
	private List<Stmt> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 4);
		TraceIn("func_args", 4);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(57, 1);
		try
		{
			// SugarWalker.g:62:2: ( ^( Func_Args (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:62:4: ^( Func_Args (a= stmt )* )
			{
			DebugLocation(62, 4);
			DebugLocation(62, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args231); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(62, 16);
				// SugarWalker.g:62:16: (a= stmt )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>=Expr_Alloc && LA8_0<=Expr_Alloc_Auto)||LA8_0==Expr_Return))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:62:17: a= stmt
						{
						DebugLocation(62, 18);
						PushFollow(Follow._stmt_in_func_args236);
						a=stmt();
						PopFollow();

						DebugLocation(62, 24);
						 value.Add(a); 

						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 4);
			LeaveRule("func_args", 4);
			LeaveRule_func_args();
		}
		DebugLocation(63, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:65:1: func_def returns [FuncDef value] : a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (args= func_args )? ')' (e= stmt_block ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 5);
		TraceIn("func_def", 5);
		FuncDef value = default(FuncDef);


		CommonTree b = default(CommonTree);
		CommonTree x = default(CommonTree);
		string a = default(string);
		List<Stmt> args = default(List<Stmt>);
		StmtBlock e = default(StmtBlock);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(65, 1);
		try
		{
			// SugarWalker.g:70:2: (a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (args= func_args )? ')' (e= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:70:4: a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (args= func_args )? ')' (e= stmt_block )
			{
			DebugLocation(70, 5);
			PushFollow(Follow._type_name_in_func_def263);
			a=type_name();
			PopFollow();

			DebugLocation(70, 17);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def267); 
			DebugLocation(70, 24);
			// SugarWalker.g:70:24: ( '<' (x= IDENT )+ '>' )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==62))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:70:25: '<' (x= IDENT )+ '>'
				{
				DebugLocation(70, 25);
				Match(input,62,Follow._62_in_func_def270); 
				DebugLocation(70, 29);
				// SugarWalker.g:70:29: (x= IDENT )+
				int cnt9=0;
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if ((LA9_0==IDENT))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:70:30: x= IDENT
						{
						DebugLocation(70, 31);
						x=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def275); 
						DebugLocation(70, 38);
						value.GenericParameter.Add(x.Text); 

						}
						break;

					default:
						if (cnt9 >= 1)
							goto loop9;

						EarlyExitException eee9 = new EarlyExitException( 9, input );
						DebugRecognitionException(eee9);
						throw eee9;
					}
					cnt9++;
				}
				loop9:
					;

				} finally { DebugExitSubRule(9); }

				DebugLocation(70, 80);
				Match(input,69,Follow._69_in_func_def281); 

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(70, 86);
			Match(input,43,Follow._43_in_func_def285); 
			DebugLocation(70, 90);
			// SugarWalker.g:70:90: (args= func_args )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==Func_Args))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:70:91: args= func_args
				{
				DebugLocation(70, 95);
				PushFollow(Follow._func_args_in_func_def290);
				args=func_args();
				PopFollow();

				DebugLocation(70, 106);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(70, 132);
			Match(input,44,Follow._44_in_func_def296); 
			DebugLocation(71, 2);
			// SugarWalker.g:71:2: (e= stmt_block )
			DebugEnterAlt(1);
			// SugarWalker.g:71:4: e= stmt_block
			{
			DebugLocation(71, 5);
			PushFollow(Follow._stmt_block_in_func_def303);
			e=stmt_block();
			PopFollow();

			DebugLocation(72, 2);

					value.Type = a;
					value.Name = b.Text;
					value.Body = e;
				

			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 5);
			LeaveRule("func_def", 5);
			LeaveRule_func_def();
		}
		DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:79:1: stmt_block returns [StmtBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 6);
		TraceIn("stmt_block", 6);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(79, 4);
		try
		{
			// SugarWalker.g:84:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:84:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(84, 4);
			Match(input,INDENT,Follow._INDENT_in_stmt_block327); 
			DebugLocation(84, 11);
			// SugarWalker.g:84:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				try
				{
					alt13 = dfa13.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:84:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(84, 12);
					// SugarWalker.g:84:12: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:84:12: NEWLINE
							{
							DebugLocation(84, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block330); 

							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }

					DebugLocation(84, 22);
					PushFollow(Follow._stmt_in_stmt_block335);
					a=stmt();
					PopFollow();

					DebugLocation(84, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(84, 58);
			// SugarWalker.g:84:58: ( NEWLINE )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==NEWLINE))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:84:58: NEWLINE
					{
					DebugLocation(84, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block341); 

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(84, 67);
			Match(input,DEDENT,Follow._DEDENT_in_stmt_block344); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 6);
			LeaveRule("stmt_block", 6);
			LeaveRule_stmt_block();
		}
		DebugLocation(85, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:87:1: stmt returns [Stmt value] : a= stmt_expr ;
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 7);
		TraceIn("stmt", 7);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(87, 1);
		try
		{
			// SugarWalker.g:88:2: (a= stmt_expr )
			DebugEnterAlt(1);
			// SugarWalker.g:88:4: a= stmt_expr
			{
			DebugLocation(88, 5);
			PushFollow(Follow._stmt_expr_in_stmt365);
			a=stmt_expr();
			PopFollow();

			DebugLocation(88, 16);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 7);
			LeaveRule("stmt", 7);
			LeaveRule_stmt();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:91:1: stmt_expr returns [Stmt value] : (a= stmt_alloc |a= stmt_return );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 8);
		TraceIn("stmt_expr", 8);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(91, 1);
		try
		{
			// SugarWalker.g:92:2: (a= stmt_alloc |a= stmt_return )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if (((LA15_0>=Expr_Alloc && LA15_0<=Expr_Alloc_Auto)))
			{
				alt15 = 1;
			}
			else if ((LA15_0==Expr_Return))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:92:4: a= stmt_alloc
				{
				DebugLocation(92, 5);
				PushFollow(Follow._stmt_alloc_in_stmt_expr384);
				a=stmt_alloc();
				PopFollow();

				DebugLocation(92, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:93:4: a= stmt_return
				{
				DebugLocation(93, 5);
				PushFollow(Follow._stmt_return_in_stmt_expr393);
				a=stmt_return();
				PopFollow();

				DebugLocation(93, 18);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 8);
			LeaveRule("stmt_expr", 8);
			LeaveRule_stmt_expr();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:96:1: stmt_alloc returns [Stmt value] : (a= alloc_expr |a= alloc_expr_auto );
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 9);
		TraceIn("stmt_alloc", 9);
		Stmt value = default(Stmt);


		StmtAlloc a = default(StmtAlloc);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(96, 1);
		try
		{
			// SugarWalker.g:97:2: (a= alloc_expr |a= alloc_expr_auto )
			int alt16=2;
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==Expr_Alloc))
			{
				alt16 = 1;
			}
			else if ((LA16_0==Expr_Alloc_Auto))
			{
				alt16 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:97:4: a= alloc_expr
				{
				DebugLocation(97, 5);
				PushFollow(Follow._alloc_expr_in_stmt_alloc412);
				a=alloc_expr();
				PopFollow();

				DebugLocation(97, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:98:4: a= alloc_expr_auto
				{
				DebugLocation(98, 5);
				PushFollow(Follow._alloc_expr_auto_in_stmt_alloc421);
				a=alloc_expr_auto();
				PopFollow();

				DebugLocation(98, 22);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 9);
			LeaveRule("stmt_alloc", 9);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:101:1: stmt_return returns [Stmt value] : ^( Expr_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 10);
		TraceIn("stmt_return", 10);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(101, 1);
		try
		{
			// SugarWalker.g:102:2: ( ^( Expr_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:102:4: ^( Expr_Return (a= expr )? )
			{
			DebugLocation(102, 4);
			DebugLocation(102, 6);
			Match(input,Expr_Return,Follow._Expr_Return_in_stmt_return439); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(102, 18);
				// SugarWalker.g:102:18: (a= expr )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==Expr_Access||LA17_0==Expr_Bin||(LA17_0>=Expr_Call && LA17_0<=Expr_Lambda)||LA17_0==Expr_Prefix||(LA17_0>=Expr_Suffix && LA17_0<=Expr_Tuple)||LA17_0==IDENT||LA17_0==INT||LA17_0==STRING||LA17_0==DOUBLE))
				{
					alt17 = 1;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:102:19: a= expr
					{
					DebugLocation(102, 20);
					PushFollow(Follow._expr_in_stmt_return444);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(103, 2);

					value = new ExprReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 10);
			LeaveRule("stmt_return", 10);
			LeaveRule_stmt_return();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:108:1: ident returns [string value] : a= IDENT ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 11);
		TraceIn("ident", 11);
		string value = default(string);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(108, 1);
		try
		{
			// SugarWalker.g:109:2: (a= IDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:109:4: a= IDENT
			{
			DebugLocation(109, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident467); 
			DebugLocation(109, 12);
			 value = a.Text; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 11);
			LeaveRule("ident", 11);
			LeaveRule_ident();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:112:1: ident_list returns [List<string> value] : a= ident ( ( ',' a= ident )+ ';' )? ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 12);
		TraceIn("ident_list", 12);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(112, 1);
		try
		{
			// SugarWalker.g:117:2: (a= ident ( ( ',' a= ident )+ ';' )? )
			DebugEnterAlt(1);
			// SugarWalker.g:117:4: a= ident ( ( ',' a= ident )+ ';' )?
			{
			DebugLocation(117, 5);
			PushFollow(Follow._ident_in_ident_list491);
			a=ident();
			PopFollow();

			DebugLocation(117, 12);
			 value.Add(a); 
			DebugLocation(117, 31);
			// SugarWalker.g:117:31: ( ( ',' a= ident )+ ';' )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==50))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:117:32: ( ',' a= ident )+ ';'
				{
				DebugLocation(117, 32);
				// SugarWalker.g:117:32: ( ',' a= ident )+
				int cnt18=0;
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==50))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:117:33: ',' a= ident
						{
						DebugLocation(117, 33);
						Match(input,50,Follow._50_in_ident_list497); 
						DebugLocation(117, 38);
						PushFollow(Follow._ident_in_ident_list501);
						a=ident();
						PopFollow();

						DebugLocation(117, 45);
						 value.Add(a); 

						}
						break;

					default:
						if (cnt18 >= 1)
							goto loop18;

						EarlyExitException eee18 = new EarlyExitException( 18, input );
						DebugRecognitionException(eee18);
						throw eee18;
					}
					cnt18++;
				}
				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(117, 66);
				Match(input,84,Follow._84_in_ident_list507); 

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 12);
			LeaveRule("ident_list", 12);
			LeaveRule_ident_list();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:120:1: alloc_expr returns [StmtAlloc value] : ^( Expr_Alloc a= type_name b= ident (c= expr )? ) ;
	[GrammarRule("alloc_expr")]
	private StmtAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 13);
		TraceIn("alloc_expr", 13);
		StmtAlloc value = default(StmtAlloc);


		string a = default(string);
		string b = default(string);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(120, 1);
		try
		{
			// SugarWalker.g:121:2: ( ^( Expr_Alloc a= type_name b= ident (c= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:121:4: ^( Expr_Alloc a= type_name b= ident (c= expr )? )
			{
			DebugLocation(121, 4);
			DebugLocation(121, 6);
			Match(input,Expr_Alloc,Follow._Expr_Alloc_in_alloc_expr526); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(121, 18);
			PushFollow(Follow._type_name_in_alloc_expr530);
			a=type_name();
			PopFollow();

			DebugLocation(121, 30);
			PushFollow(Follow._ident_in_alloc_expr534);
			b=ident();
			PopFollow();

			DebugLocation(121, 37);
			// SugarWalker.g:121:37: (c= expr )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==Expr_Access||LA20_0==Expr_Bin||(LA20_0>=Expr_Call && LA20_0<=Expr_Lambda)||LA20_0==Expr_Prefix||(LA20_0>=Expr_Suffix && LA20_0<=Expr_Tuple)||LA20_0==IDENT||LA20_0==INT||LA20_0==STRING||LA20_0==DOUBLE))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:121:38: c= expr
				{
				DebugLocation(121, 39);
				PushFollow(Follow._expr_in_alloc_expr539);
				c=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(122, 2);

					value = new StmtAlloc();
					value.Type = a;
					value.Name = b;
					value.Expr = c;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 13);
			LeaveRule("alloc_expr", 13);
			LeaveRule_alloc_expr();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_alloc_expr_auto();
	partial void LeaveRule_alloc_expr_auto();

	// $ANTLR start "alloc_expr_auto"
	// SugarWalker.g:130:1: alloc_expr_auto returns [StmtAlloc value] : ^( Expr_Alloc_Auto a= ident (b= expr )? ) ;
	[GrammarRule("alloc_expr_auto")]
	private StmtAlloc alloc_expr_auto()
	{
		EnterRule_alloc_expr_auto();
		EnterRule("alloc_expr_auto", 14);
		TraceIn("alloc_expr_auto", 14);
		StmtAlloc value = default(StmtAlloc);


		string a = default(string);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr_auto");
		DebugLocation(130, 1);
		try
		{
			// SugarWalker.g:131:2: ( ^( Expr_Alloc_Auto a= ident (b= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:131:4: ^( Expr_Alloc_Auto a= ident (b= expr )? )
			{
			DebugLocation(131, 4);
			DebugLocation(131, 6);
			Match(input,Expr_Alloc_Auto,Follow._Expr_Alloc_Auto_in_alloc_expr_auto561); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(131, 23);
			PushFollow(Follow._ident_in_alloc_expr_auto565);
			a=ident();
			PopFollow();

			DebugLocation(131, 30);
			// SugarWalker.g:131:30: (b= expr )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==Expr_Access||LA21_0==Expr_Bin||(LA21_0>=Expr_Call && LA21_0<=Expr_Lambda)||LA21_0==Expr_Prefix||(LA21_0>=Expr_Suffix && LA21_0<=Expr_Tuple)||LA21_0==IDENT||LA21_0==INT||LA21_0==STRING||LA21_0==DOUBLE))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:131:31: b= expr
				{
				DebugLocation(131, 32);
				PushFollow(Follow._expr_in_alloc_expr_auto570);
				b=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(132, 2);

					value = new StmtAlloc();
					value.Type = "auto";
					value.Name = a;
					value.Expr = b;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr_auto", 14);
			LeaveRule("alloc_expr_auto", 14);
			LeaveRule_alloc_expr_auto();
		}
		DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr_auto"); }
		return value;

	}
	// $ANTLR end "alloc_expr_auto"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:140:1: new_expr returns [ExprNew value] : ^( Expr_New a= IDENT (b= expr )+ ) ;
	[GrammarRule("new_expr")]
	private ExprNew new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 15);
		TraceIn("new_expr", 15);
		ExprNew value = default(ExprNew);


		CommonTree a = default(CommonTree);
		Expr b = default(Expr);


			value = new ExprNew();

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(140, 1);
		try
		{
			// SugarWalker.g:145:2: ( ^( Expr_New a= IDENT (b= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:145:4: ^( Expr_New a= IDENT (b= expr )+ )
			{
			DebugLocation(145, 4);
			DebugLocation(145, 6);
			Match(input,Expr_New,Follow._Expr_New_in_new_expr597); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(145, 16);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_new_expr601); 
			DebugLocation(145, 23);
			 value.ElemType = a.Text; 
			DebugLocation(145, 53);
			// SugarWalker.g:145:53: (b= expr )+
			int cnt22=0;
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==Expr_Access||LA22_0==Expr_Bin||(LA22_0>=Expr_Call && LA22_0<=Expr_Lambda)||LA22_0==Expr_Prefix||(LA22_0>=Expr_Suffix && LA22_0<=Expr_Tuple)||LA22_0==IDENT||LA22_0==INT||LA22_0==STRING||LA22_0==DOUBLE))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:145:54: b= expr
					{
					DebugLocation(145, 55);
					PushFollow(Follow._expr_in_new_expr608);
					b=expr();
					PopFollow();

					DebugLocation(145, 61);
					 value.Ranges.Add(b); 

					}
					break;

				default:
					if (cnt22 >= 1)
						goto loop22;

					EarlyExitException eee22 = new EarlyExitException( 22, input );
					DebugRecognitionException(eee22);
					throw eee22;
				}
				cnt22++;
			}
			loop22:
				;

			} finally { DebugExitSubRule(22); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 15);
			LeaveRule("new_expr", 15);
			LeaveRule_new_expr();
		}
		DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_block_expr();
	partial void LeaveRule_block_expr();

	// $ANTLR start "block_expr"
	// SugarWalker.g:148:1: block_expr returns [ExprBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("block_expr")]
	private ExprBlock block_expr()
	{
		EnterRule_block_expr();
		EnterRule("block_expr", 16);
		TraceIn("block_expr", 16);
		ExprBlock value = default(ExprBlock);


		Stmt a = default(Stmt);


			value = new ExprBlock();

		try { DebugEnterRule(GrammarFileName, "block_expr");
		DebugLocation(148, 4);
		try
		{
			// SugarWalker.g:153:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:153:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(153, 4);
			Match(input,INDENT,Follow._INDENT_in_block_expr633); 
			DebugLocation(153, 11);
			// SugarWalker.g:153:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				try
				{
					alt24 = dfa24.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:153:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(153, 12);
					// SugarWalker.g:153:12: ( NEWLINE )+
					int cnt23=0;
					try { DebugEnterSubRule(23);
					while (true)
					{
						int alt23=2;
						try { DebugEnterDecision(23, false);
						int LA23_0 = input.LA(1);

						if ((LA23_0==NEWLINE))
						{
							alt23 = 1;
						}


						} finally { DebugExitDecision(23); }
						switch (alt23)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:153:12: NEWLINE
							{
							DebugLocation(153, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_block_expr636); 

							}
							break;

						default:
							if (cnt23 >= 1)
								goto loop23;

							EarlyExitException eee23 = new EarlyExitException( 23, input );
							DebugRecognitionException(eee23);
							throw eee23;
						}
						cnt23++;
					}
					loop23:
						;

					} finally { DebugExitSubRule(23); }

					DebugLocation(153, 22);
					PushFollow(Follow._stmt_in_block_expr641);
					a=stmt();
					PopFollow();

					DebugLocation(153, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(153, 58);
			// SugarWalker.g:153:58: ( NEWLINE )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==NEWLINE))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:153:58: NEWLINE
					{
					DebugLocation(153, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_block_expr647); 

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(153, 67);
			Match(input,DEDENT,Follow._DEDENT_in_block_expr650); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block_expr", 16);
			LeaveRule("block_expr", 16);
			LeaveRule_block_expr();
		}
		DebugLocation(154, 4);
		} finally { DebugExitRule(GrammarFileName, "block_expr"); }
		return value;

	}
	// $ANTLR end "block_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:156:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 17);
		TraceIn("expr_tuple", 17);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(156, 1);
		try
		{
			// SugarWalker.g:161:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:161:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(161, 4);
			DebugLocation(161, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple675); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(161, 17);
			// SugarWalker.g:161:17: (a= expr )+
			int cnt26=0;
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==Expr_Access||LA26_0==Expr_Bin||(LA26_0>=Expr_Call && LA26_0<=Expr_Lambda)||LA26_0==Expr_Prefix||(LA26_0>=Expr_Suffix && LA26_0<=Expr_Tuple)||LA26_0==IDENT||LA26_0==INT||LA26_0==STRING||LA26_0==DOUBLE))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:161:18: a= expr
					{
					DebugLocation(161, 19);
					PushFollow(Follow._expr_in_expr_tuple680);
					a=expr();
					PopFollow();

					DebugLocation(161, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt26 >= 1)
						goto loop26;

					EarlyExitException eee26 = new EarlyExitException( 26, input );
					DebugRecognitionException(eee26);
					throw eee26;
				}
				cnt26++;
			}
			loop26:
				;

			} finally { DebugExitSubRule(26); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 17);
			LeaveRule("expr_tuple", 17);
			LeaveRule_expr_tuple();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_expr_match_tuple();
	partial void LeaveRule_expr_match_tuple();

	// $ANTLR start "expr_match_tuple"
	// SugarWalker.g:164:1: expr_match_tuple returns [MatchTuple value] : ^( Expr_Match_Tuple (a= IDENT )* ) ;
	[GrammarRule("expr_match_tuple")]
	private MatchTuple expr_match_tuple()
	{
		EnterRule_expr_match_tuple();
		EnterRule("expr_match_tuple", 18);
		TraceIn("expr_match_tuple", 18);
		MatchTuple value = default(MatchTuple);


		CommonTree a = default(CommonTree);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "expr_match_tuple");
		DebugLocation(164, 1);
		try
		{
			// SugarWalker.g:169:2: ( ^( Expr_Match_Tuple (a= IDENT )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:169:4: ^( Expr_Match_Tuple (a= IDENT )* )
			{
			DebugLocation(169, 4);
			DebugLocation(169, 6);
			Match(input,Expr_Match_Tuple,Follow._Expr_Match_Tuple_in_expr_match_tuple707); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(169, 23);
				// SugarWalker.g:169:23: (a= IDENT )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==IDENT))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:169:24: a= IDENT
						{
						DebugLocation(169, 25);
						a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr_match_tuple712); 
						DebugLocation(169, 32);
						 value.VarList.Add(a.Text); 

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_match_tuple", 18);
			LeaveRule("expr_match_tuple", 18);
			LeaveRule_expr_match_tuple();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_match_tuple"); }
		return value;

	}
	// $ANTLR end "expr_match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:172:1: expr_list returns [List<Expr> value] : (a= expr )* ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 19);
		TraceIn("expr_list", 19);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(172, 1);
		try
		{
			// SugarWalker.g:177:2: ( (a= expr )* )
			DebugEnterAlt(1);
			// SugarWalker.g:177:4: (a= expr )*
			{
			DebugLocation(177, 4);
			// SugarWalker.g:177:4: (a= expr )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==Expr_Access||LA28_0==Expr_Bin||(LA28_0>=Expr_Call && LA28_0<=Expr_Lambda)||LA28_0==Expr_Prefix||(LA28_0>=Expr_Suffix && LA28_0<=Expr_Tuple)||LA28_0==IDENT||LA28_0==INT||LA28_0==STRING||LA28_0==DOUBLE))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:177:5: a= expr
					{
					DebugLocation(177, 6);
					PushFollow(Follow._expr_in_expr_list740);
					a=expr();
					PopFollow();

					DebugLocation(177, 12);
					 value.Add(a); 

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 19);
			LeaveRule("expr_list", 19);
			LeaveRule_expr_list();
		}
		DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:180:1: call_expr returns [Expr value] : ^( Expr_Call a= expr b= expr_list ) ;
	[GrammarRule("call_expr")]
	private Expr call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 20);
		TraceIn("call_expr", 20);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(180, 1);
		try
		{
			// SugarWalker.g:181:2: ( ^( Expr_Call a= expr b= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:181:4: ^( Expr_Call a= expr b= expr_list )
			{
			DebugLocation(181, 4);
			DebugLocation(181, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr760); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(181, 17);
			PushFollow(Follow._expr_in_call_expr764);
			a=expr();
			PopFollow();

			DebugLocation(181, 24);
			PushFollow(Follow._expr_list_in_call_expr768);
			b=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(182, 2);

					value = new ExprCall(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 20);
			LeaveRule("call_expr", 20);
			LeaveRule_call_expr();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:187:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr b= expr ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 21);
		TraceIn("dict_expr", 21);
		Expr value = default(Expr);


		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(187, 1);
		try
		{
			// SugarWalker.g:188:2: ( ^( Expr_Dict a= expr b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:188:4: ^( Expr_Dict a= expr b= expr )
			{
			DebugLocation(188, 4);
			DebugLocation(188, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr788); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(188, 17);
			PushFollow(Follow._expr_in_dict_expr792);
			a=expr();
			PopFollow();

			DebugLocation(188, 24);
			PushFollow(Follow._expr_in_dict_expr796);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(189, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 21);
			LeaveRule("dict_expr", 21);
			LeaveRule_dict_expr();
		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:194:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda b= func_args a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 22);
		TraceIn("lambda_expr", 22);
		ExprLambda value = default(ExprLambda);


		List<Stmt> b = default(List<Stmt>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(194, 1);
		try
		{
			// SugarWalker.g:195:2: ( ^( Expr_Lambda b= func_args a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:195:4: ^( Expr_Lambda b= func_args a= expr )
			{
			DebugLocation(195, 4);
			DebugLocation(195, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr816); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(195, 19);
			PushFollow(Follow._func_args_in_lambda_expr820);
			b=func_args();
			PopFollow();

			DebugLocation(195, 31);
			PushFollow(Follow._expr_in_lambda_expr824);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(196, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 22);
			LeaveRule("lambda_expr", 22);
			LeaveRule_lambda_expr();
		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:201:1: expr returns [Expr value] : (tuple= expr_tuple |call= call_expr |dict= dict_expr |lambda= lambda_expr | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text= ( INT | DOUBLE | IDENT | STRING ) );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 23);
		TraceIn("expr", 23);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		Expr call = default(Expr);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(201, 1);
		try
		{
			// SugarWalker.g:202:5: (tuple= expr_tuple |call= call_expr |dict= dict_expr |lambda= lambda_expr | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text= ( INT | DOUBLE | IDENT | STRING ) )
			int alt29=10;
			try { DebugEnterDecision(29, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt29 = 1;
				}
				break;
			case Expr_Call:
				{
				alt29 = 2;
				}
				break;
			case Expr_Dict:
				{
				alt29 = 3;
				}
				break;
			case Expr_Lambda:
				{
				alt29 = 4;
				}
				break;
			case Expr_Cond:
				{
				alt29 = 5;
				}
				break;
			case Expr_Access:
				{
				alt29 = 6;
				}
				break;
			case Expr_Bin:
				{
				alt29 = 7;
				}
				break;
			case Expr_Suffix:
				{
				alt29 = 8;
				}
				break;
			case Expr_Prefix:
				{
				alt29 = 9;
				}
				break;
			case IDENT:
			case INT:
			case STRING:
			case DOUBLE:
				{
				alt29 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:202:7: tuple= expr_tuple
				{
				DebugLocation(202, 12);
				PushFollow(Follow._expr_tuple_in_expr848);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(203, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:206:4: call= call_expr
				{
				DebugLocation(206, 8);
				PushFollow(Follow._call_expr_in_expr858);
				call=call_expr();
				PopFollow();

				DebugLocation(207, 2);

						value = call;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:210:4: dict= dict_expr
				{
				DebugLocation(210, 8);
				PushFollow(Follow._dict_expr_in_expr868);
				dict=dict_expr();
				PopFollow();

				DebugLocation(211, 2);

						value = dict;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:214:4: lambda= lambda_expr
				{
				DebugLocation(214, 10);
				PushFollow(Follow._lambda_expr_in_expr878);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(215, 2);

						value = lambda;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:218:3: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(218, 3);
				DebugLocation(218, 5);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr886); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(218, 16);
				PushFollow(Follow._expr_in_expr890);
				a=expr();
				PopFollow();

				DebugLocation(218, 23);
				PushFollow(Follow._expr_in_expr894);
				b=expr();
				PopFollow();

				DebugLocation(218, 30);
				PushFollow(Follow._expr_in_expr898);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(219, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:222:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT )
				{
				DebugLocation(222, 4);
				DebugLocation(222, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr908); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(222, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=54 && input.LA(1)<=57)||input.LA(1)==61)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(222, 57);
				PushFollow(Follow._expr_in_expr934);
				a=expr();
				PopFollow();

				DebugLocation(222, 67);
				text=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr938); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(223, 2);

						value = new ExprAccess(a, op.Text, text.Text);
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:226:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr )
				{
				DebugLocation(226, 4);
				DebugLocation(226, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr948); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(226, 17);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==37||(input.LA(1)>=39 && input.LA(1)<=42)||(input.LA(1)>=45 && input.LA(1)<=47)||input.LA(1)==49||input.LA(1)==51||input.LA(1)==53||(input.LA(1)>=58 && input.LA(1)<=59)||(input.LA(1)>=62 && input.LA(1)<=67)||(input.LA(1)>=69 && input.LA(1)<=72)||(input.LA(1)>=76 && input.LA(1)<=77)||(input.LA(1)>=79 && input.LA(1)<=81))
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(232, 9);
				PushFollow(Follow._expr_in_expr1110);
				a=expr();
				PopFollow();

				DebugLocation(232, 16);
				PushFollow(Follow._expr_in_expr1114);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(233, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:236:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(236, 4);
				DebugLocation(236, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr1124); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(236, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==48||input.LA(1)==52)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(236, 36);
				PushFollow(Follow._expr_in_expr1138);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(237, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:240:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(240, 4);
				DebugLocation(240, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr1148); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(240, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==36||input.LA(1)==41||input.LA(1)==45||(input.LA(1)>=47 && input.LA(1)<=48)||(input.LA(1)>=51 && input.LA(1)<=52)||input.LA(1)==82)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(240, 72);
				PushFollow(Follow._expr_in_expr1186);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(241, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:244:4: text= ( INT | DOUBLE | IDENT | STRING )
				{
				DebugLocation(244, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==IDENT||input.LA(1)==INT||input.LA(1)==STRING||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(245, 5);

				        value = new ExprConst(text.Text);
				    

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 23);
			LeaveRule("expr", 23);
			LeaveRule_expr();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA13 dfa13;
	private DFA24 dfa24;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa13 = new DFA13( this );
		dfa24 = new DFA24( this );
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x4\xFFFF";
		private const string DFA13_eofS =
			"\x4\xFFFF";
		private const string DFA13_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA13_maxS =
			"\x2\x1C\x2\xFFFF";
		private const string DFA13_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA13_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x1\x2\x16\xFFFF\x1\x1",
				"\x1\x2\x2\xFFFF\x2\x3\x9\xFFFF\x1\x3\x8\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "()* loopback of 84:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA24 : DFA
	{
		private const string DFA24_eotS =
			"\x4\xFFFF";
		private const string DFA24_eofS =
			"\x4\xFFFF";
		private const string DFA24_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA24_maxS =
			"\x2\x1C\x2\xFFFF";
		private const string DFA24_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA24_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA24_transitionS =
			{
				"\x1\x2\x16\xFFFF\x1\x1",
				"\x1\x2\x2\xFFFF\x2\x3\x9\xFFFF\x1\x3\x8\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA24_eot = DFA.UnpackEncodedString(DFA24_eotS);
		private static readonly short[] DFA24_eof = DFA.UnpackEncodedString(DFA24_eofS);
		private static readonly char[] DFA24_min = DFA.UnpackEncodedStringToUnsignedChars(DFA24_minS);
		private static readonly char[] DFA24_max = DFA.UnpackEncodedStringToUnsignedChars(DFA24_maxS);
		private static readonly short[] DFA24_accept = DFA.UnpackEncodedString(DFA24_acceptS);
		private static readonly short[] DFA24_special = DFA.UnpackEncodedString(DFA24_specialS);
		private static readonly short[][] DFA24_transition;

		static DFA24()
		{
			int numStates = DFA24_transitionS.Length;
			DFA24_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA24_transition[i] = DFA.UnpackEncodedString(DFA24_transitionS[i]);
			}
		}

		public DFA24( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 24;
			this.eot = DFA24_eot;
			this.eof = DFA24_eof;
			this.min = DFA24_min;
			this.max = DFA24_max;
			this.accept = DFA24_accept;
			this.special = DFA24_special;
			this.transition = DFA24_transition;
		}

		public override string Description { get { return "()* loopback of 153:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root85 = new BitSet(new ulong[]{0x811000002UL});
		public static readonly BitSet _NEWLINE_in_root90 = new BitSet(new ulong[]{0x811000002UL});
		public static readonly BitSet _func_def_in_node112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_type_name136 = new BitSet(new ulong[]{0x4000200000000002UL});
		public static readonly BitSet _62_in_type_name144 = new BitSet(new ulong[]{0x801000000UL});
		public static readonly BitSet _type_name_in_type_name153 = new BitSet(new ulong[]{0x4000000000000UL,0x20UL});
		public static readonly BitSet _50_in_type_name161 = new BitSet(new ulong[]{0x801000000UL});
		public static readonly BitSet _type_name_in_type_name165 = new BitSet(new ulong[]{0x4000000000000UL,0x20UL});
		public static readonly BitSet _69_in_type_name174 = new BitSet(new ulong[]{0x4000200000000002UL});
		public static readonly BitSet _45_in_type_name184 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _Type_Tuple_in_type_name196 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_name201 = new BitSet(new ulong[]{0x801000008UL});
		public static readonly BitSet _Func_Args_in_func_args231 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_func_args236 = new BitSet(new ulong[]{0x80308UL});
		public static readonly BitSet _type_name_in_func_def263 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _IDENT_in_func_def267 = new BitSet(new ulong[]{0x4000080000000000UL});
		public static readonly BitSet _62_in_func_def270 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _IDENT_in_func_def275 = new BitSet(new ulong[]{0x1000000UL,0x20UL});
		public static readonly BitSet _69_in_func_def281 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_func_def285 = new BitSet(new ulong[]{0x100000400000UL});
		public static readonly BitSet _func_args_in_func_def290 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_func_def296 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _stmt_block_in_func_def303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block327 = new BitSet(new ulong[]{0x10000020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block330 = new BitSet(new ulong[]{0x10080300UL});
		public static readonly BitSet _stmt_in_stmt_block335 = new BitSet(new ulong[]{0x10000020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block341 = new BitSet(new ulong[]{0x10000020UL});
		public static readonly BitSet _DEDENT_in_stmt_block344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_stmt_alloc412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_auto_in_stmt_alloc421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Return_in_stmt_return439 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return444 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list491 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _50_in_ident_list497 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ident_in_ident_list501 = new BitSet(new ulong[]{0x4000000000000UL,0x100000UL});
		public static readonly BitSet _84_in_ident_list507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Alloc_in_alloc_expr526 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr530 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ident_in_alloc_expr534 = new BitSet(new ulong[]{0x10534F488UL,0x80000UL});
		public static readonly BitSet _expr_in_alloc_expr539 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Auto_in_alloc_expr_auto561 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_alloc_expr_auto565 = new BitSet(new ulong[]{0x10534F488UL,0x80000UL});
		public static readonly BitSet _expr_in_alloc_expr_auto570 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_in_new_expr597 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_new_expr601 = new BitSet(new ulong[]{0x10534F480UL,0x80000UL});
		public static readonly BitSet _expr_in_new_expr608 = new BitSet(new ulong[]{0x10534F488UL,0x80000UL});
		public static readonly BitSet _INDENT_in_block_expr633 = new BitSet(new ulong[]{0x10000020UL});
		public static readonly BitSet _NEWLINE_in_block_expr636 = new BitSet(new ulong[]{0x10080300UL});
		public static readonly BitSet _stmt_in_block_expr641 = new BitSet(new ulong[]{0x10000020UL});
		public static readonly BitSet _NEWLINE_in_block_expr647 = new BitSet(new ulong[]{0x10000020UL});
		public static readonly BitSet _DEDENT_in_block_expr650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple675 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple680 = new BitSet(new ulong[]{0x10534F488UL,0x80000UL});
		public static readonly BitSet _Expr_Match_Tuple_in_expr_match_tuple707 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_expr_match_tuple712 = new BitSet(new ulong[]{0x1000008UL});
		public static readonly BitSet _expr_in_expr_list740 = new BitSet(new ulong[]{0x10534F482UL,0x80000UL});
		public static readonly BitSet _Expr_Call_in_call_expr760 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr764 = new BitSet(new ulong[]{0x10534F488UL,0x80000UL});
		public static readonly BitSet _expr_list_in_call_expr768 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr788 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr792 = new BitSet(new ulong[]{0x10534F480UL,0x80000UL});
		public static readonly BitSet _expr_in_dict_expr796 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr816 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr820 = new BitSet(new ulong[]{0x10534F480UL,0x80000UL});
		public static readonly BitSet _expr_in_lambda_expr824 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Cond_in_expr886 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr890 = new BitSet(new ulong[]{0x10534F480UL,0x80000UL});
		public static readonly BitSet _expr_in_expr894 = new BitSet(new ulong[]{0x10534F480UL,0x80000UL});
		public static readonly BitSet _expr_in_expr898 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr908 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr912 = new BitSet(new ulong[]{0x10534F480UL,0x80000UL});
		public static readonly BitSet _expr_in_expr934 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _IDENT_in_expr938 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr948 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr952 = new BitSet(new ulong[]{0x10534F480UL,0x80000UL});
		public static readonly BitSet _expr_in_expr1110 = new BitSet(new ulong[]{0x10534F480UL,0x80000UL});
		public static readonly BitSet _expr_in_expr1114 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr1124 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1128 = new BitSet(new ulong[]{0x10534F480UL,0x80000UL});
		public static readonly BitSet _expr_in_expr1138 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr1148 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1152 = new BitSet(new ulong[]{0x10534F480UL,0x80000UL});
		public static readonly BitSet _expr_in_expr1186 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr1197 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
