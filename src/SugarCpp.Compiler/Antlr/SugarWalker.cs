//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-04-30 14:44:24

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "Ident_List", "Import", "Infix_Func", "Left_Bracket", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "']'", "'^'", "'^='", "'catch'", "'class'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'in'", "'namespace'", "'new'", "'return'", "'try'", "'typedef'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int DEDENT=7;
	public const int EXPONENT=8;
	public const int Enum=9;
	public const int Expr_Access=10;
	public const int Expr_Alloc=11;
	public const int Expr_Bin=12;
	public const int Expr_Block=13;
	public const int Expr_Call=14;
	public const int Expr_Call_With=15;
	public const int Expr_Cond=16;
	public const int Expr_Dict=17;
	public const int Expr_Infix=18;
	public const int Expr_Lambda=19;
	public const int Expr_New_Array=20;
	public const int Expr_New_Type=21;
	public const int Expr_Prefix=22;
	public const int Expr_Return=23;
	public const int Expr_Suffix=24;
	public const int Expr_Tuple=25;
	public const int Func_Args=26;
	public const int Func_Def=27;
	public const int IDENT=28;
	public const int INDENT=29;
	public const int Ident_List=30;
	public const int Import=31;
	public const int Infix_Func=32;
	public const int Left_Bracket=33;
	public const int Match_Tuple=34;
	public const int NEWLINE=35;
	public const int NUMBER=36;
	public const int Namespace=37;
	public const int Right_Bracket=38;
	public const int Root=39;
	public const int SP=40;
	public const int STRING=41;
	public const int Stmt_Block=42;
	public const int Stmt_For=43;
	public const int Stmt_ForEach=44;
	public const int Stmt_If=45;
	public const int Stmt_Try=46;
	public const int Stmt_Typedef=47;
	public const int Stmt_Using=48;
	public const int Stmt_While=49;
	public const int Type_IDENT=50;
	public const int Type_Ref=51;
	public const int Type_Tuple=52;
	public const int DOUBLE=115;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : a= overall_block ( NEWLINE )* ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		List<AstNode> a = default(List<AstNode>);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:24:2: (a= overall_block ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarWalker.g:24:4: a= overall_block ( NEWLINE )*
			{
			DebugLocation(24, 5);
			PushFollow(Follow._overall_block_in_root77);
			a=overall_block();
			PopFollow();

			DebugLocation(24, 20);
			// SugarWalker.g:24:20: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:24:20: NEWLINE
					{
					DebugLocation(24, 20);
					Match(input,NEWLINE,Follow._NEWLINE_in_root79); 

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(25, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_overall_block();
	partial void LeaveRule_overall_block();

	// $ANTLR start "overall_block"
	// SugarWalker.g:30:1: overall_block returns [List<AstNode> value] : ( ( NEWLINE )* a= node )+ ;
	[GrammarRule("overall_block")]
	private List<AstNode> overall_block()
	{
		EnterRule_overall_block();
		EnterRule("overall_block", 2);
		TraceIn("overall_block", 2);
		List<AstNode> value = default(List<AstNode>);


		AstNode a = default(AstNode);


			value = new List<AstNode>();

		try { DebugEnterRule(GrammarFileName, "overall_block");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:35:2: ( ( ( NEWLINE )* a= node )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:35:4: ( ( NEWLINE )* a= node )+
			{
			DebugLocation(35, 4);
			// SugarWalker.g:35:4: ( ( NEWLINE )* a= node )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:35:5: ( NEWLINE )* a= node
					{
					DebugLocation(35, 5);
					// SugarWalker.g:35:5: ( NEWLINE )*
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch ( alt2 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:35:5: NEWLINE
							{
							DebugLocation(35, 5);
							Match(input,NEWLINE,Follow._NEWLINE_in_overall_block104); 

							}
							break;

						default:
							goto loop2;
						}
					}

					loop2:
						;

					} finally { DebugExitSubRule(2); }

					DebugLocation(35, 15);
					PushFollow(Follow._node_in_overall_block109);
					a=node();
					PopFollow();

					DebugLocation(35, 21);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("overall_block", 2);
			LeaveRule("overall_block", 2);
			LeaveRule_overall_block();
		}
		DebugLocation(36, 1);
		} finally { DebugExitRule(GrammarFileName, "overall_block"); }
		return value;

	}
	// $ANTLR end "overall_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:38:1: node returns [AstNode value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= stmt_alloc |f= namespace_def |g= stmt_using |h= stmt_typedef );
	[GrammarRule("node")]
	private AstNode node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstNode value = default(AstNode);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		Stmt e = default(Stmt);
		Namespace f = default(Namespace);
		StmtUsing g = default(StmtUsing);
		Stmt h = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(38, 1);
		try
		{
			// SugarWalker.g:39:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= stmt_alloc |f= namespace_def |g= stmt_using |h= stmt_typedef )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case Type_IDENT:
				{
				alt4 = 1;
				}
				break;
			case Import:
				{
				alt4 = 2;
				}
				break;
			case Enum:
				{
				alt4 = 3;
				}
				break;
			case Class:
				{
				alt4 = 4;
				}
				break;
			case Expr_Alloc:
				{
				alt4 = 5;
				}
				break;
			case Namespace:
				{
				alt4 = 6;
				}
				break;
			case Stmt_Using:
				{
				alt4 = 7;
				}
				break;
			case Stmt_Typedef:
				{
				alt4 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:39:4: a= func_def
				{
				DebugLocation(39, 6);
				PushFollow(Follow._func_def_in_node133);
				a=func_def();
				PopFollow();

				DebugLocation(39, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:40:4: b= import_def
				{
				DebugLocation(40, 6);
				PushFollow(Follow._import_def_in_node144);
				b=import_def();
				PopFollow();

				DebugLocation(40, 19);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:41:4: c= enum_def
				{
				DebugLocation(41, 6);
				PushFollow(Follow._enum_def_in_node155);
				c=enum_def();
				PopFollow();

				DebugLocation(41, 17);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:42:4: d= class_def
				{
				DebugLocation(42, 6);
				PushFollow(Follow._class_def_in_node166);
				d=class_def();
				PopFollow();

				DebugLocation(42, 18);
				 value = d; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:43:4: e= stmt_alloc
				{
				DebugLocation(43, 6);
				PushFollow(Follow._stmt_alloc_in_node177);
				e=stmt_alloc();
				PopFollow();

				DebugLocation(43, 19);
				 value = e; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:44:4: f= namespace_def
				{
				DebugLocation(44, 6);
				PushFollow(Follow._namespace_def_in_node188);
				f=namespace_def();
				PopFollow();

				DebugLocation(44, 22);
				 value = f; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:45:4: g= stmt_using
				{
				DebugLocation(45, 6);
				PushFollow(Follow._stmt_using_in_node199);
				g=stmt_using();
				PopFollow();

				DebugLocation(45, 19);
				 value = g; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:46:4: h= stmt_typedef
				{
				DebugLocation(46, 6);
				PushFollow(Follow._stmt_typedef_in_node210);
				h=stmt_typedef();
				PopFollow();

				DebugLocation(46, 21);
				 value = h; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:49:1: namespace_def returns [Namespace value] : ^( Namespace a= IDENT b= overall_block ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 4);
		TraceIn("namespace_def", 4);
		Namespace value = default(Namespace);


		CommonTree a = default(CommonTree);
		List<AstNode> b = default(List<AstNode>);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(49, 1);
		try
		{
			// SugarWalker.g:50:2: ( ^( Namespace a= IDENT b= overall_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:50:4: ^( Namespace a= IDENT b= overall_block )
			{
			DebugLocation(50, 4);
			DebugLocation(50, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def228); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(50, 17);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_namespace_def232); 
			DebugLocation(50, 25);
			PushFollow(Follow._overall_block_in_namespace_def236);
			b=overall_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(51, 2);

					value = new Namespace(a.Text, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 4);
			LeaveRule("namespace_def", 4);
			LeaveRule_namespace_def();
		}
		DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:56:1: import_def returns [Import value] : ^( Import (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 5);
		TraceIn("import_def", 5);
		Import value = default(Import);


		CommonTree a = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(56, 1);
		try
		{
			// SugarWalker.g:61:2: ( ^( Import (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:61:4: ^( Import (a= STRING )* )
			{
			DebugLocation(61, 4);
			DebugLocation(61, 6);
			Match(input,Import,Follow._Import_in_import_def261); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(61, 13);
				// SugarWalker.g:61:13: (a= STRING )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0==STRING))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:61:14: a= STRING
						{
						DebugLocation(61, 15);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def266); 
						DebugLocation(61, 23);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 5);
			LeaveRule("import_def", 5);
			LeaveRule_import_def();
		}
		DebugLocation(62, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:64:1: enum_def returns [Enum value] : ^( Enum a= IDENT (a= IDENT )* ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 6);
		TraceIn("enum_def", 6);
		Enum value = default(Enum);


		CommonTree a = default(CommonTree);


			value = new Enum();

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(64, 1);
		try
		{
			// SugarWalker.g:69:2: ( ^( Enum a= IDENT (a= IDENT )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:69:4: ^( Enum a= IDENT (a= IDENT )* )
			{
			DebugLocation(69, 4);
			DebugLocation(69, 6);
			Match(input,Enum,Follow._Enum_in_enum_def292); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(69, 12);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_enum_def296); 
			DebugLocation(69, 19);
			 value.Name=a.Text; 
			DebugLocation(69, 43);
			// SugarWalker.g:69:43: (a= IDENT )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==IDENT))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:69:44: a= IDENT
					{
					DebugLocation(69, 45);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_enum_def303); 
					DebugLocation(69, 52);
					 value.Values.Add(a.Text); 

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 6);
			LeaveRule("enum_def", 6);
			LeaveRule_enum_def();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:72:1: class_def returns [Class value] : ^( Class a= IDENT b= class_block ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 7);
		TraceIn("class_def", 7);
		Class value = default(Class);


		CommonTree a = default(CommonTree);
		List<ClassMember> b = default(List<ClassMember>);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(72, 1);
		try
		{
			// SugarWalker.g:73:2: ( ^( Class a= IDENT b= class_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:73:4: ^( Class a= IDENT b= class_block )
			{
			DebugLocation(73, 4);
			DebugLocation(73, 6);
			Match(input,Class,Follow._Class_in_class_def324); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(73, 13);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_class_def328); 
			DebugLocation(73, 21);
			PushFollow(Follow._class_block_in_class_def332);
			b=class_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(74, 2);

					value = new Class(a.Text, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 7);
			LeaveRule("class_def", 7);
			LeaveRule_class_def();
		}
		DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_class_block();
	partial void LeaveRule_class_block();

	// $ANTLR start "class_block"
	// SugarWalker.g:79:1: class_block returns [List<ClassMember> value] : ( ( NEWLINE )* a= class_node )+ ;
	[GrammarRule("class_block")]
	private List<ClassMember> class_block()
	{
		EnterRule_class_block();
		EnterRule("class_block", 8);
		TraceIn("class_block", 8);
		List<ClassMember> value = default(List<ClassMember>);


		ClassMember a = default(ClassMember);


			value = new List<ClassMember>();

		try { DebugEnterRule(GrammarFileName, "class_block");
		DebugLocation(79, 1);
		try
		{
			// SugarWalker.g:84:2: ( ( ( NEWLINE )* a= class_node )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:84:4: ( ( NEWLINE )* a= class_node )+
			{
			DebugLocation(84, 4);
			// SugarWalker.g:84:4: ( ( NEWLINE )* a= class_node )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==Attribute||LA8_0==Class||LA8_0==Enum||LA8_0==Expr_Alloc||LA8_0==Import||LA8_0==NEWLINE||LA8_0==Namespace||(LA8_0>=Stmt_Typedef && LA8_0<=Stmt_Using)||LA8_0==Type_IDENT))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:84:5: ( NEWLINE )* a= class_node
					{
					DebugLocation(84, 5);
					// SugarWalker.g:84:5: ( NEWLINE )*
					try { DebugEnterSubRule(7);
					while (true)
					{
						int alt7=2;
						try { DebugEnterDecision(7, false);
						int LA7_0 = input.LA(1);

						if ((LA7_0==NEWLINE))
						{
							alt7 = 1;
						}


						} finally { DebugExitDecision(7); }
						switch ( alt7 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:84:5: NEWLINE
							{
							DebugLocation(84, 5);
							Match(input,NEWLINE,Follow._NEWLINE_in_class_block357); 

							}
							break;

						default:
							goto loop7;
						}
					}

					loop7:
						;

					} finally { DebugExitSubRule(7); }

					DebugLocation(84, 15);
					PushFollow(Follow._class_node_in_class_block362);
					a=class_node();
					PopFollow();

					DebugLocation(84, 27);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_block", 8);
			LeaveRule("class_block", 8);
			LeaveRule_class_block();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "class_block"); }
		return value;

	}
	// $ANTLR end "class_block"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:87:1: attribute returns [List<string> value] : ^( Attribute (a= ident )+ ) ;
	[GrammarRule("attribute")]
	private List<string> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(87, 1);
		try
		{
			// SugarWalker.g:92:2: ( ^( Attribute (a= ident )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:92:4: ^( Attribute (a= ident )+ )
			{
			DebugLocation(92, 4);
			DebugLocation(92, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute388); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(92, 16);
			// SugarWalker.g:92:16: (a= ident )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==IDENT))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:92:17: a= ident
					{
					DebugLocation(92, 18);
					PushFollow(Follow._ident_in_attribute393);
					a=ident();
					PopFollow();

					DebugLocation(92, 25);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_class_node();
	partial void LeaveRule_class_node();

	// $ANTLR start "class_node"
	// SugarWalker.g:95:1: class_node returns [ClassMember value] : (a= attribute ( NEWLINE )+ )* b= node ;
	[GrammarRule("class_node")]
	private ClassMember class_node()
	{
		EnterRule_class_node();
		EnterRule("class_node", 10);
		TraceIn("class_node", 10);
		ClassMember value = default(ClassMember);


		List<string> a = default(List<string>);
		AstNode b = default(AstNode);


			HashSet<string> set = new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "class_node");
		DebugLocation(95, 1);
		try
		{
			// SugarWalker.g:100:2: ( (a= attribute ( NEWLINE )+ )* b= node )
			DebugEnterAlt(1);
			// SugarWalker.g:100:4: (a= attribute ( NEWLINE )+ )* b= node
			{
			DebugLocation(100, 4);
			// SugarWalker.g:100:4: (a= attribute ( NEWLINE )+ )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==Attribute))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:100:5: a= attribute ( NEWLINE )+
					{
					DebugLocation(100, 6);
					PushFollow(Follow._attribute_in_class_node421);
					a=attribute();
					PopFollow();

					DebugLocation(100, 17);
					 foreach (var x in a) set.Add(x); 
					DebugLocation(100, 54);
					// SugarWalker.g:100:54: ( NEWLINE )+
					int cnt10=0;
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==NEWLINE))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch (alt10)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:100:54: NEWLINE
							{
							DebugLocation(100, 54);
							Match(input,NEWLINE,Follow._NEWLINE_in_class_node425); 

							}
							break;

						default:
							if (cnt10 >= 1)
								goto loop10;

							EarlyExitException eee10 = new EarlyExitException( 10, input );
							DebugRecognitionException(eee10);
							throw eee10;
						}
						cnt10++;
					}
					loop10:
						;

					} finally { DebugExitSubRule(10); }


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(100, 66);
			PushFollow(Follow._node_in_class_node432);
			b=node();
			PopFollow();

			DebugLocation(101, 2);

					value = new ClassMember(b, set);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_node", 10);
			LeaveRule("class_node", 10);
			LeaveRule_class_node();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "class_node"); }
		return value;

	}
	// $ANTLR end "class_node"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:106:1: type_name returns [string value] : ^( Type_IDENT a= IDENT ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 11);
		TraceIn("type_name", 11);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(106, 1);
		try
		{
			// SugarWalker.g:111:2: ( ^( Type_IDENT a= IDENT ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:111:4: ^( Type_IDENT a= IDENT ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* )
			{
			DebugLocation(111, 4);
			DebugLocation(111, 7);
			Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name457); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(111, 19);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_type_name461); 
			DebugLocation(111, 26);
			 value+=a.Text; 
			DebugLocation(112, 5);
			// SugarWalker.g:112:5: ( '<' (b= type_name )* '>' )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==81))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:112:7: '<' (b= type_name )* '>'
				{
				DebugLocation(112, 7);
				Match(input,81,Follow._81_in_type_name471); 
				DebugLocation(112, 11);
				 value+="<"; bool isFirst = true; 
				DebugLocation(113, 6);
				// SugarWalker.g:113:6: (b= type_name )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0==Type_IDENT))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:113:7: b= type_name
						{
						DebugLocation(113, 8);
						PushFollow(Follow._type_name_in_type_name483);
						b=type_name();
						PopFollow();

						DebugLocation(114, 3);

									if (!isFirst) value+=", ";
									isFirst = false;
									value+=b;
								

						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }

				DebugLocation(119, 3);
				Match(input,88,Follow._88_in_type_name493); 
				DebugLocation(119, 7);
				 value+=">"; 

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(120, 4);
			// SugarWalker.g:120:4: ( '*' | '[' ']' | '&' )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=4;
				try { DebugEnterDecision(14, false);
				switch (input.LA(1))
				{
				case 62:
					{
					alt14 = 1;
					}
					break;
				case 92:
					{
					alt14 = 2;
					}
					break;
				case 58:
					{
					alt14 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:120:6: '*'
					{
					DebugLocation(120, 6);
					Match(input,62,Follow._62_in_type_name504); 
					DebugLocation(120, 10);
					 value ="shared_ptr<"+value+">"; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarWalker.g:121:6: '[' ']'
					{
					DebugLocation(121, 6);
					Match(input,92,Follow._92_in_type_name513); 
					DebugLocation(121, 10);
					Match(input,93,Follow._93_in_type_name515); 
					DebugLocation(121, 14);
					 value ="vector<"+value+">"; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarWalker.g:122:6: '&'
					{
					DebugLocation(122, 6);
					Match(input,58,Follow._58_in_type_name524); 
					DebugLocation(122, 10);
					 value+="&"; 

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 11);
			LeaveRule("type_name", 11);
			LeaveRule_type_name();
		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:126:1: func_args returns [List<Stmt> value] : ^( Func_Args (a= stmt )* ) ;
	[GrammarRule("func_args")]
	private List<Stmt> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 12);
		TraceIn("func_args", 12);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(126, 1);
		try
		{
			// SugarWalker.g:131:2: ( ^( Func_Args (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:131:4: ^( Func_Args (a= stmt )* )
			{
			DebugLocation(131, 4);
			DebugLocation(131, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args554); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(131, 16);
				// SugarWalker.g:131:16: (a= stmt )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if (((LA15_0>=Expr_Access && LA15_0<=Expr_Bin)||(LA15_0>=Expr_Call && LA15_0<=Expr_Tuple)||LA15_0==IDENT||LA15_0==Match_Tuple||LA15_0==NUMBER||LA15_0==STRING||(LA15_0>=Stmt_For && LA15_0<=Stmt_While)||LA15_0==56||LA15_0==59||LA15_0==63||LA15_0==66||LA15_0==70||LA15_0==76||LA15_0==79||LA15_0==83||LA15_0==85||LA15_0==91||LA15_0==95||LA15_0==112||LA15_0==DOUBLE))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:131:17: a= stmt
						{
						DebugLocation(131, 18);
						PushFollow(Follow._stmt_in_func_args559);
						a=stmt();
						PopFollow();

						DebugLocation(131, 24);
						 value.Add(a); 

						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 12);
			LeaveRule("func_args", 12);
			LeaveRule_func_args();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:134:1: func_def returns [FuncDef value] : a= type_name b= IDENT ( '<' x= IDENT '>' )? '(' (args= func_args )? ')' (e= stmt_block | '=' f= expr ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 13);
		TraceIn("func_def", 13);
		FuncDef value = default(FuncDef);


		CommonTree b = default(CommonTree);
		CommonTree x = default(CommonTree);
		string a = default(string);
		List<Stmt> args = default(List<Stmt>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(134, 1);
		try
		{
			// SugarWalker.g:139:2: (a= type_name b= IDENT ( '<' x= IDENT '>' )? '(' (args= func_args )? ')' (e= stmt_block | '=' f= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:139:4: a= type_name b= IDENT ( '<' x= IDENT '>' )? '(' (args= func_args )? ')' (e= stmt_block | '=' f= expr )
			{
			DebugLocation(139, 5);
			PushFollow(Follow._type_name_in_func_def586);
			a=type_name();
			PopFollow();

			DebugLocation(139, 17);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def590); 
			DebugLocation(139, 24);
			// SugarWalker.g:139:24: ( '<' x= IDENT '>' )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==81))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:139:25: '<' x= IDENT '>'
				{
				DebugLocation(139, 25);
				Match(input,81,Follow._81_in_func_def593); 
				DebugLocation(139, 30);
				x=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def597); 
				DebugLocation(139, 37);
				 value.GenericParameter.Add(x.Text); 
				DebugLocation(139, 78);
				Match(input,88,Follow._88_in_func_def601); 

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(139, 84);
			Match(input,60,Follow._60_in_func_def605); 
			DebugLocation(139, 88);
			// SugarWalker.g:139:88: (args= func_args )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Func_Args))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:139:89: args= func_args
				{
				DebugLocation(139, 93);
				PushFollow(Follow._func_args_in_func_def610);
				args=func_args();
				PopFollow();

				DebugLocation(139, 104);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(139, 130);
			Match(input,61,Follow._61_in_func_def616); 
			DebugLocation(140, 2);
			// SugarWalker.g:140:2: (e= stmt_block | '=' f= expr )
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==Stmt_Block))
			{
				alt18 = 1;
			}
			else if ((LA18_0==85))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:140:4: e= stmt_block
				{
				DebugLocation(140, 5);
				PushFollow(Follow._stmt_block_in_func_def623);
				e=stmt_block();
				PopFollow();

				DebugLocation(141, 2);

						value.Type = a;
						value.Name = b.Text;
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:146:4: '=' f= expr
				{
				DebugLocation(146, 4);
				Match(input,85,Follow._85_in_func_def631); 
				DebugLocation(146, 9);
				PushFollow(Follow._expr_in_func_def635);
				f=expr();
				PopFollow();

				DebugLocation(147, 2);

						value.Type = a;
						value.Name = b.Text;
						StmtBlock block = new StmtBlock();
						block.StmtList.Add(new ExprReturn(f));
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 13);
			LeaveRule("func_def", 13);
			LeaveRule_func_def();
		}
		DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:157:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 14);
		TraceIn("stmt_block", 14);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(157, 4);
		try
		{
			// SugarWalker.g:162:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:162:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(162, 4);
			DebugLocation(162, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block662); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(162, 17);
				// SugarWalker.g:162:17: (a= stmt )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if (((LA19_0>=Expr_Access && LA19_0<=Expr_Bin)||(LA19_0>=Expr_Call && LA19_0<=Expr_Tuple)||LA19_0==IDENT||LA19_0==Match_Tuple||LA19_0==NUMBER||LA19_0==STRING||(LA19_0>=Stmt_For && LA19_0<=Stmt_While)||LA19_0==56||LA19_0==59||LA19_0==63||LA19_0==66||LA19_0==70||LA19_0==76||LA19_0==79||LA19_0==83||LA19_0==85||LA19_0==91||LA19_0==95||LA19_0==112||LA19_0==DOUBLE))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:162:18: a= stmt
						{
						DebugLocation(162, 19);
						PushFollow(Follow._stmt_in_stmt_block667);
						a=stmt();
						PopFollow();

						DebugLocation(162, 25);
						 value.StmtList.Add(a); 

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 14);
			LeaveRule("stmt_block", 14);
			LeaveRule_stmt_block();
		}
		DebugLocation(163, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:165:1: stmt returns [Stmt value] : a= stmt_expr ;
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 15);
		TraceIn("stmt", 15);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(165, 1);
		try
		{
			// SugarWalker.g:166:2: (a= stmt_expr )
			DebugEnterAlt(1);
			// SugarWalker.g:166:4: a= stmt_expr
			{
			DebugLocation(166, 5);
			PushFollow(Follow._stmt_expr_in_stmt693);
			a=stmt_expr();
			PopFollow();

			DebugLocation(166, 16);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 15);
			LeaveRule("stmt", 15);
			LeaveRule_stmt();
		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:169:1: stmt_expr returns [Stmt value] : (a= stmt_alloc |a= stmt_return |a= stmt_typedef |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |b= expr |c= stmt_using );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 16);
		TraceIn("stmt_expr", 16);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);
		Expr b = default(Expr);
		StmtUsing c = default(StmtUsing);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(169, 1);
		try
		{
			// SugarWalker.g:170:2: (a= stmt_alloc |a= stmt_return |a= stmt_typedef |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |b= expr |c= stmt_using )
			int alt20=9;
			try { DebugEnterDecision(20, false);
			switch (input.LA(1))
			{
			case Expr_Alloc:
				{
				alt20 = 1;
				}
				break;
			case Expr_Return:
				{
				alt20 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt20 = 3;
				}
				break;
			case Stmt_If:
				{
				alt20 = 4;
				}
				break;
			case Stmt_While:
				{
				alt20 = 5;
				}
				break;
			case Stmt_For:
			case Stmt_ForEach:
				{
				alt20 = 6;
				}
				break;
			case Stmt_Try:
				{
				alt20 = 7;
				}
				break;
			case Expr_Access:
			case Expr_Bin:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 56:
			case 59:
			case 63:
			case 66:
			case 70:
			case 76:
			case 79:
			case 83:
			case 85:
			case 91:
			case 95:
			case 112:
			case DOUBLE:
				{
				alt20 = 8;
				}
				break;
			case Stmt_Using:
				{
				alt20 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:170:4: a= stmt_alloc
				{
				DebugLocation(170, 5);
				PushFollow(Follow._stmt_alloc_in_stmt_expr712);
				a=stmt_alloc();
				PopFollow();

				DebugLocation(170, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:171:4: a= stmt_return
				{
				DebugLocation(171, 5);
				PushFollow(Follow._stmt_return_in_stmt_expr721);
				a=stmt_return();
				PopFollow();

				DebugLocation(171, 18);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:172:4: a= stmt_typedef
				{
				DebugLocation(172, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr730);
				a=stmt_typedef();
				PopFollow();

				DebugLocation(172, 19);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:173:4: a= stmt_if
				{
				DebugLocation(173, 5);
				PushFollow(Follow._stmt_if_in_stmt_expr739);
				a=stmt_if();
				PopFollow();

				DebugLocation(173, 14);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:174:4: a= stmt_while
				{
				DebugLocation(174, 5);
				PushFollow(Follow._stmt_while_in_stmt_expr748);
				a=stmt_while();
				PopFollow();

				DebugLocation(174, 17);
				 value = a; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:175:4: a= stmt_for
				{
				DebugLocation(175, 5);
				PushFollow(Follow._stmt_for_in_stmt_expr757);
				a=stmt_for();
				PopFollow();

				DebugLocation(175, 15);
				 value = a; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:176:4: a= stmt_try
				{
				DebugLocation(176, 5);
				PushFollow(Follow._stmt_try_in_stmt_expr766);
				a=stmt_try();
				PopFollow();

				DebugLocation(176, 15);
				 value = a; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:177:4: b= expr
				{
				DebugLocation(177, 5);
				PushFollow(Follow._expr_in_stmt_expr775);
				b=expr();
				PopFollow();

				DebugLocation(177, 11);
				 value = b; 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:178:4: c= stmt_using
				{
				DebugLocation(178, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr784);
				c=stmt_using();
				PopFollow();

				DebugLocation(178, 17);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 16);
			LeaveRule("stmt_expr", 16);
			LeaveRule_stmt_expr();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:181:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ( IDENT | 'namespace' ) )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 17);
		TraceIn("stmt_using", 17);
		StmtUsing value = default(StmtUsing);


		CommonTree a = default(CommonTree);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(181, 1);
		try
		{
			// SugarWalker.g:186:2: ( ^( Stmt_Using (a= ( IDENT | 'namespace' ) )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:186:4: ^( Stmt_Using (a= ( IDENT | 'namespace' ) )* )
			{
			DebugLocation(186, 4);
			DebugLocation(186, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using807); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(186, 17);
				// SugarWalker.g:186:17: (a= ( IDENT | 'namespace' ) )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==IDENT||LA21_0==104))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:186:18: a= ( IDENT | 'namespace' )
						{
						DebugLocation(186, 19);

						a=(CommonTree)input.LT(1);
						if (input.LA(1)==IDENT||input.LA(1)==104)
						{
							input.Consume();
							state.errorRecovery=false;
						}
						else
						{
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}

						DebugLocation(186, 42);
						 value.List.Add(a.Text); 

						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 17);
			LeaveRule("stmt_using", 17);
			LeaveRule_stmt_using();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:189:1: stmt_typedef returns [Stmt value] : ^( Stmt_Typedef a= type_name b= IDENT ) ;
	[GrammarRule("stmt_typedef")]
	private Stmt stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 18);
		TraceIn("stmt_typedef", 18);
		Stmt value = default(Stmt);


		CommonTree b = default(CommonTree);
		string a = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(189, 1);
		try
		{
			// SugarWalker.g:190:2: ( ^( Stmt_Typedef a= type_name b= IDENT ) )
			DebugEnterAlt(1);
			// SugarWalker.g:190:4: ^( Stmt_Typedef a= type_name b= IDENT )
			{
			DebugLocation(190, 4);
			DebugLocation(190, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef839); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(190, 20);
			PushFollow(Follow._type_name_in_stmt_typedef843);
			a=type_name();
			PopFollow();

			DebugLocation(190, 32);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_stmt_typedef847); 

			Match(input, TokenTypes.Up, null); 

			DebugLocation(191, 2);

					value = new StmtTypeDef(a, b.Text);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 18);
			LeaveRule("stmt_typedef", 18);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:196:1: stmt_alloc returns [Stmt value] : a= alloc_expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 19);
		TraceIn("stmt_alloc", 19);
		Stmt value = default(Stmt);


		ExprAlloc a = default(ExprAlloc);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(196, 1);
		try
		{
			// SugarWalker.g:197:2: (a= alloc_expr )
			DebugEnterAlt(1);
			// SugarWalker.g:197:4: a= alloc_expr
			{
			DebugLocation(197, 5);
			PushFollow(Follow._alloc_expr_in_stmt_alloc868);
			a=alloc_expr();
			PopFollow();

			DebugLocation(197, 17);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 19);
			LeaveRule("stmt_alloc", 19);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:200:1: stmt_if returns [Stmt value] : ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 20);
		TraceIn("stmt_if", 20);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(200, 1);
		try
		{
			// SugarWalker.g:201:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:201:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
			{
			DebugLocation(201, 4);
			DebugLocation(201, 6);
			Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if886); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(201, 15);
			PushFollow(Follow._expr_in_stmt_if890);
			a=expr();
			PopFollow();

			DebugLocation(201, 22);
			PushFollow(Follow._stmt_block_in_stmt_if894);
			b=stmt_block();
			PopFollow();

			DebugLocation(201, 34);
			// SugarWalker.g:201:34: (c= stmt_block )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==Stmt_Block))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:201:35: c= stmt_block
				{
				DebugLocation(201, 36);
				PushFollow(Follow._stmt_block_in_stmt_if899);
				c=stmt_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(202, 2);

					value = new StmtIf(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 20);
			LeaveRule("stmt_if", 20);
			LeaveRule_stmt_if();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:207:1: stmt_while returns [Stmt value] : ^( Stmt_While a= expr b= stmt_block ) ;
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 21);
		TraceIn("stmt_while", 21);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(207, 1);
		try
		{
			// SugarWalker.g:208:2: ( ^( Stmt_While a= expr b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:208:4: ^( Stmt_While a= expr b= stmt_block )
			{
			DebugLocation(208, 4);
			DebugLocation(208, 6);
			Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while921); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(208, 18);
			PushFollow(Follow._expr_in_stmt_while925);
			a=expr();
			PopFollow();

			DebugLocation(208, 25);
			PushFollow(Follow._stmt_block_in_stmt_while929);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(209, 2);

					value = new StmtWhile(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 21);
			LeaveRule("stmt_while", 21);
			LeaveRule_stmt_while();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:214:1: stmt_for returns [Stmt value] : ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) );
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 22);
		TraceIn("stmt_for", 22);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		StmtBlock d = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(214, 1);
		try
		{
			// SugarWalker.g:215:2: ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) )
			int alt23=2;
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==Stmt_For))
			{
				alt23 = 1;
			}
			else if ((LA23_0==Stmt_ForEach))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:215:4: ^( Stmt_For a= expr b= expr c= expr d= stmt_block )
				{
				DebugLocation(215, 4);
				DebugLocation(215, 6);
				Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for949); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(215, 16);
				PushFollow(Follow._expr_in_stmt_for953);
				a=expr();
				PopFollow();

				DebugLocation(215, 23);
				PushFollow(Follow._expr_in_stmt_for957);
				b=expr();
				PopFollow();

				DebugLocation(215, 30);
				PushFollow(Follow._expr_in_stmt_for961);
				c=expr();
				PopFollow();

				DebugLocation(215, 37);
				PushFollow(Follow._stmt_block_in_stmt_for965);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(216, 2);

						value = new StmtFor(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:219:4: ^( Stmt_ForEach a= expr b= expr d= stmt_block )
				{
				DebugLocation(219, 4);
				DebugLocation(219, 6);
				Match(input,Stmt_ForEach,Follow._Stmt_ForEach_in_stmt_for975); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(219, 20);
				PushFollow(Follow._expr_in_stmt_for979);
				a=expr();
				PopFollow();

				DebugLocation(219, 27);
				PushFollow(Follow._expr_in_stmt_for983);
				b=expr();
				PopFollow();

				DebugLocation(219, 34);
				PushFollow(Follow._stmt_block_in_stmt_for987);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(220, 2);

						value = new StmtForEach(a, b, d);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 22);
			LeaveRule("stmt_for", 22);
			LeaveRule_stmt_for();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:225:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 23);
		TraceIn("stmt_try", 23);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Expr b = default(Expr);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(225, 1);
		try
		{
			// SugarWalker.g:226:2: ( ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:226:4: ^( Stmt_Try a= stmt_block b= expr c= stmt_block )
			{
			DebugLocation(226, 4);
			DebugLocation(226, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1007); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(226, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1011);
			a=stmt_block();
			PopFollow();

			DebugLocation(226, 29);
			PushFollow(Follow._expr_in_stmt_try1015);
			b=expr();
			PopFollow();

			DebugLocation(226, 36);
			PushFollow(Follow._stmt_block_in_stmt_try1019);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(227, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 23);
			LeaveRule("stmt_try", 23);
			LeaveRule_stmt_try();
		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:232:1: stmt_return returns [Stmt value] : ^( Expr_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 24);
		TraceIn("stmt_return", 24);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(232, 1);
		try
		{
			// SugarWalker.g:233:2: ( ^( Expr_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:233:4: ^( Expr_Return (a= expr )? )
			{
			DebugLocation(233, 4);
			DebugLocation(233, 6);
			Match(input,Expr_Return,Follow._Expr_Return_in_stmt_return1039); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(233, 18);
				// SugarWalker.g:233:18: (a= expr )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==Expr_Access||LA24_0==Expr_Bin||(LA24_0>=Expr_Call && LA24_0<=Expr_Prefix)||(LA24_0>=Expr_Suffix && LA24_0<=Expr_Tuple)||LA24_0==IDENT||LA24_0==Match_Tuple||LA24_0==NUMBER||LA24_0==STRING||LA24_0==56||LA24_0==59||LA24_0==63||LA24_0==66||LA24_0==70||LA24_0==76||LA24_0==79||LA24_0==83||LA24_0==85||LA24_0==91||LA24_0==95||LA24_0==112||LA24_0==DOUBLE))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:233:19: a= expr
					{
					DebugLocation(233, 20);
					PushFollow(Follow._expr_in_stmt_return1044);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(24); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(234, 2);

					value = new ExprReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 24);
			LeaveRule("stmt_return", 24);
			LeaveRule_stmt_return();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:239:1: ident returns [string value] : a= IDENT ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 25);
		TraceIn("ident", 25);
		string value = default(string);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(239, 1);
		try
		{
			// SugarWalker.g:240:2: (a= IDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:240:4: a= IDENT
			{
			DebugLocation(240, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1067); 
			DebugLocation(240, 12);
			 value = a.Text; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 25);
			LeaveRule("ident", 25);
			LeaveRule_ident();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:243:1: ident_list returns [List<Expr> value] : ^( Ident_List (a= ident )+ ) ;
	[GrammarRule("ident_list")]
	private List<Expr> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 26);
		TraceIn("ident_list", 26);
		List<Expr> value = default(List<Expr>);


		string a = default(string);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(243, 1);
		try
		{
			// SugarWalker.g:248:2: ( ^( Ident_List (a= ident )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:248:4: ^( Ident_List (a= ident )+ )
			{
			DebugLocation(248, 4);
			DebugLocation(248, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list1090); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(248, 17);
			// SugarWalker.g:248:17: (a= ident )+
			int cnt25=0;
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==IDENT))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:248:18: a= ident
					{
					DebugLocation(248, 19);
					PushFollow(Follow._ident_in_ident_list1095);
					a=ident();
					PopFollow();

					DebugLocation(248, 26);
					 value.Add(new ExprConst(a)); 

					}
					break;

				default:
					if (cnt25 >= 1)
						goto loop25;

					EarlyExitException eee25 = new EarlyExitException( 25, input );
					DebugRecognitionException(eee25);
					throw eee25;
				}
				cnt25++;
			}
			loop25:
				;

			} finally { DebugExitSubRule(25); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 26);
			LeaveRule("ident_list", 26);
			LeaveRule_ident_list();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:251:1: alloc_expr returns [ExprAlloc value] : ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) ;
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 27);
		TraceIn("alloc_expr", 27);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		List<Expr> b = default(List<Expr>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(251, 1);
		try
		{
			// SugarWalker.g:252:2: ( ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:252:4: ^( Expr_Alloc a= type_name b= ident_list (c= expr )? )
			{
			DebugLocation(252, 4);
			DebugLocation(252, 6);
			Match(input,Expr_Alloc,Follow._Expr_Alloc_in_alloc_expr1117); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(252, 18);
			PushFollow(Follow._type_name_in_alloc_expr1121);
			a=type_name();
			PopFollow();

			DebugLocation(252, 30);
			PushFollow(Follow._ident_list_in_alloc_expr1125);
			b=ident_list();
			PopFollow();

			DebugLocation(252, 42);
			// SugarWalker.g:252:42: (c= expr )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==Expr_Access||LA26_0==Expr_Bin||(LA26_0>=Expr_Call && LA26_0<=Expr_Prefix)||(LA26_0>=Expr_Suffix && LA26_0<=Expr_Tuple)||LA26_0==IDENT||LA26_0==Match_Tuple||LA26_0==NUMBER||LA26_0==STRING||LA26_0==56||LA26_0==59||LA26_0==63||LA26_0==66||LA26_0==70||LA26_0==76||LA26_0==79||LA26_0==83||LA26_0==85||LA26_0==91||LA26_0==95||LA26_0==112||LA26_0==DOUBLE))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:252:43: c= expr
				{
				DebugLocation(252, 44);
				PushFollow(Follow._expr_in_alloc_expr1130);
				c=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(26); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(253, 2);

					value = new ExprAlloc(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 27);
			LeaveRule("alloc_expr", 27);
			LeaveRule_alloc_expr();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_block_expr();
	partial void LeaveRule_block_expr();

	// $ANTLR start "block_expr"
	// SugarWalker.g:258:1: block_expr returns [ExprBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("block_expr")]
	private ExprBlock block_expr()
	{
		EnterRule_block_expr();
		EnterRule("block_expr", 28);
		TraceIn("block_expr", 28);
		ExprBlock value = default(ExprBlock);


		Stmt a = default(Stmt);


			value = new ExprBlock();

		try { DebugEnterRule(GrammarFileName, "block_expr");
		DebugLocation(258, 4);
		try
		{
			// SugarWalker.g:263:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:263:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(263, 4);
			Match(input,INDENT,Follow._INDENT_in_block_expr1156); 
			DebugLocation(263, 11);
			// SugarWalker.g:263:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				try
				{
					alt28 = dfa28.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:263:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(263, 12);
					// SugarWalker.g:263:12: ( NEWLINE )+
					int cnt27=0;
					try { DebugEnterSubRule(27);
					while (true)
					{
						int alt27=2;
						try { DebugEnterDecision(27, false);
						int LA27_0 = input.LA(1);

						if ((LA27_0==NEWLINE))
						{
							alt27 = 1;
						}


						} finally { DebugExitDecision(27); }
						switch (alt27)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:263:12: NEWLINE
							{
							DebugLocation(263, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_block_expr1159); 

							}
							break;

						default:
							if (cnt27 >= 1)
								goto loop27;

							EarlyExitException eee27 = new EarlyExitException( 27, input );
							DebugRecognitionException(eee27);
							throw eee27;
						}
						cnt27++;
					}
					loop27:
						;

					} finally { DebugExitSubRule(27); }

					DebugLocation(263, 22);
					PushFollow(Follow._stmt_in_block_expr1164);
					a=stmt();
					PopFollow();

					DebugLocation(263, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }

			DebugLocation(263, 58);
			// SugarWalker.g:263:58: ( NEWLINE )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:263:58: NEWLINE
					{
					DebugLocation(263, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_block_expr1170); 

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(263, 67);
			Match(input,DEDENT,Follow._DEDENT_in_block_expr1173); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block_expr", 28);
			LeaveRule("block_expr", 28);
			LeaveRule_block_expr();
		}
		DebugLocation(264, 4);
		} finally { DebugExitRule(GrammarFileName, "block_expr"); }
		return value;

	}
	// $ANTLR end "block_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:266:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 29);
		TraceIn("expr_tuple", 29);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(266, 1);
		try
		{
			// SugarWalker.g:271:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:271:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(271, 4);
			DebugLocation(271, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple1198); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(271, 17);
			// SugarWalker.g:271:17: (a= expr )+
			int cnt30=0;
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==Expr_Access||LA30_0==Expr_Bin||(LA30_0>=Expr_Call && LA30_0<=Expr_Prefix)||(LA30_0>=Expr_Suffix && LA30_0<=Expr_Tuple)||LA30_0==IDENT||LA30_0==Match_Tuple||LA30_0==NUMBER||LA30_0==STRING||LA30_0==56||LA30_0==59||LA30_0==63||LA30_0==66||LA30_0==70||LA30_0==76||LA30_0==79||LA30_0==83||LA30_0==85||LA30_0==91||LA30_0==95||LA30_0==112||LA30_0==DOUBLE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:271:18: a= expr
					{
					DebugLocation(271, 19);
					PushFollow(Follow._expr_in_expr_tuple1203);
					a=expr();
					PopFollow();

					DebugLocation(271, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt30 >= 1)
						goto loop30;

					EarlyExitException eee30 = new EarlyExitException( 30, input );
					DebugRecognitionException(eee30);
					throw eee30;
				}
				cnt30++;
			}
			loop30:
				;

			} finally { DebugExitSubRule(30); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 29);
			LeaveRule("expr_tuple", 29);
			LeaveRule_expr_tuple();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:274:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 30);
		TraceIn("match_tuple", 30);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(274, 1);
		try
		{
			// SugarWalker.g:279:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:279:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(279, 4);
			DebugLocation(279, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple1230); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(279, 18);
				// SugarWalker.g:279:18: (a= expr )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==Expr_Access||LA31_0==Expr_Bin||(LA31_0>=Expr_Call && LA31_0<=Expr_Prefix)||(LA31_0>=Expr_Suffix && LA31_0<=Expr_Tuple)||LA31_0==IDENT||LA31_0==Match_Tuple||LA31_0==NUMBER||LA31_0==STRING||LA31_0==56||LA31_0==59||LA31_0==63||LA31_0==66||LA31_0==70||LA31_0==76||LA31_0==79||LA31_0==83||LA31_0==85||LA31_0==91||LA31_0==95||LA31_0==112||LA31_0==DOUBLE))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:279:19: a= expr
						{
						DebugLocation(279, 20);
						PushFollow(Follow._expr_in_match_tuple1235);
						a=expr();
						PopFollow();

						DebugLocation(279, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 30);
			LeaveRule("match_tuple", 30);
			LeaveRule_match_tuple();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:282:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 31);
		TraceIn("expr_list", 31);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(282, 1);
		try
		{
			// SugarWalker.g:287:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:287:4: (a= expr )+
			{
			DebugLocation(287, 4);
			// SugarWalker.g:287:4: (a= expr )+
			int cnt32=0;
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==Expr_Access||LA32_0==Expr_Bin||(LA32_0>=Expr_Call && LA32_0<=Expr_Prefix)||(LA32_0>=Expr_Suffix && LA32_0<=Expr_Tuple)||LA32_0==IDENT||LA32_0==Match_Tuple||LA32_0==NUMBER||LA32_0==STRING||LA32_0==56||LA32_0==59||LA32_0==63||LA32_0==66||LA32_0==70||LA32_0==76||LA32_0==79||LA32_0==83||LA32_0==85||LA32_0==91||LA32_0==95||LA32_0==112||LA32_0==DOUBLE))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:287:5: a= expr
					{
					DebugLocation(287, 6);
					PushFollow(Follow._expr_in_expr_list1263);
					a=expr();
					PopFollow();

					DebugLocation(287, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt32 >= 1)
						goto loop32;

					EarlyExitException eee32 = new EarlyExitException( 32, input );
					DebugRecognitionException(eee32);
					throw eee32;
				}
				cnt32++;
			}
			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 31);
			LeaveRule("expr_list", 31);
			LeaveRule_expr_list();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:290:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr ( '<' (x= IDENT )* '>' )? (b= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 32);
		TraceIn("call_expr", 32);
		ExprCall value = default(ExprCall);


		CommonTree x = default(CommonTree);
		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);


			value = new ExprCall();

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(290, 1);
		try
		{
			// SugarWalker.g:295:2: ( ^( Expr_Call a= expr ( '<' (x= IDENT )* '>' )? (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:295:4: ^( Expr_Call a= expr ( '<' (x= IDENT )* '>' )? (b= expr_list )? )
			{
			DebugLocation(295, 4);
			DebugLocation(295, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr1288); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(295, 17);
			PushFollow(Follow._expr_in_call_expr1292);
			a=expr();
			PopFollow();

			DebugLocation(295, 23);
			 value.Expr=a; 
			DebugLocation(295, 42);
			// SugarWalker.g:295:42: ( '<' (x= IDENT )* '>' )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==81))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:295:43: '<' (x= IDENT )* '>'
				{
				DebugLocation(295, 43);
				Match(input,81,Follow._81_in_call_expr1297); 
				DebugLocation(295, 47);
				// SugarWalker.g:295:47: (x= IDENT )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==IDENT))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:295:48: x= IDENT
						{
						DebugLocation(295, 49);
						x=(CommonTree)Match(input,IDENT,Follow._IDENT_in_call_expr1302); 
						DebugLocation(295, 56);
						 value.GenericParameter.Add(x.Text); 

						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(295, 99);
				Match(input,88,Follow._88_in_call_expr1308); 

				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(295, 105);
			// SugarWalker.g:295:105: (b= expr_list )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==Expr_Access||LA35_0==Expr_Bin||(LA35_0>=Expr_Call && LA35_0<=Expr_Prefix)||(LA35_0>=Expr_Suffix && LA35_0<=Expr_Tuple)||LA35_0==IDENT||LA35_0==Match_Tuple||LA35_0==NUMBER||LA35_0==STRING||LA35_0==56||LA35_0==59||LA35_0==63||LA35_0==66||LA35_0==70||LA35_0==76||LA35_0==79||LA35_0==83||LA35_0==85||LA35_0==91||LA35_0==95||LA35_0==112||LA35_0==DOUBLE))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:295:106: b= expr_list
				{
				DebugLocation(295, 107);
				PushFollow(Follow._expr_list_in_call_expr1315);
				b=expr_list();
				PopFollow();

				DebugLocation(295, 118);
				 value.Args=b; 

				}
				break;

			}
			} finally { DebugExitSubRule(35); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 32);
			LeaveRule("call_expr", 32);
			LeaveRule_call_expr();
		}
		DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:298:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 33);
		TraceIn("dict_expr", 33);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(298, 1);
		try
		{
			// SugarWalker.g:299:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:299:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(299, 4);
			DebugLocation(299, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr1336); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(299, 17);
			PushFollow(Follow._expr_in_dict_expr1340);
			a=expr();
			PopFollow();

			DebugLocation(299, 23);
			// SugarWalker.g:299:23: (b= expr_list )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==Expr_Access||LA36_0==Expr_Bin||(LA36_0>=Expr_Call && LA36_0<=Expr_Prefix)||(LA36_0>=Expr_Suffix && LA36_0<=Expr_Tuple)||LA36_0==IDENT||LA36_0==Match_Tuple||LA36_0==NUMBER||LA36_0==STRING||LA36_0==56||LA36_0==59||LA36_0==63||LA36_0==66||LA36_0==70||LA36_0==76||LA36_0==79||LA36_0==83||LA36_0==85||LA36_0==91||LA36_0==95||LA36_0==112||LA36_0==DOUBLE))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:299:24: b= expr_list
				{
				DebugLocation(299, 25);
				PushFollow(Follow._expr_list_in_dict_expr1345);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(36); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(300, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 33);
			LeaveRule("dict_expr", 33);
			LeaveRule_dict_expr();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:305:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda b= func_args a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 34);
		TraceIn("lambda_expr", 34);
		ExprLambda value = default(ExprLambda);


		List<Stmt> b = default(List<Stmt>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(305, 1);
		try
		{
			// SugarWalker.g:306:2: ( ^( Expr_Lambda b= func_args a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:306:4: ^( Expr_Lambda b= func_args a= expr )
			{
			DebugLocation(306, 4);
			DebugLocation(306, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr1367); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(306, 19);
			PushFollow(Follow._func_args_in_lambda_expr1371);
			b=func_args();
			PopFollow();

			DebugLocation(306, 31);
			PushFollow(Follow._expr_in_lambda_expr1375);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(307, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 34);
			LeaveRule("lambda_expr", 34);
			LeaveRule_lambda_expr();
		}
		DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:312:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 35);
		TraceIn("new_expr", 35);
		Expr value = default(Expr);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(312, 1);
		try
		{
			// SugarWalker.g:313:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==Expr_New_Type))
			{
				alt38 = 1;
			}
			else if ((LA38_0==Expr_New_Array))
			{
				alt38 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:313:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(313, 4);
				DebugLocation(313, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr1395); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(313, 21);
				PushFollow(Follow._type_name_in_new_expr1399);
				a=type_name();
				PopFollow();

				DebugLocation(313, 33);
				// SugarWalker.g:313:33: (b= expr_list )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==Expr_Access||LA37_0==Expr_Bin||(LA37_0>=Expr_Call && LA37_0<=Expr_Prefix)||(LA37_0>=Expr_Suffix && LA37_0<=Expr_Tuple)||LA37_0==IDENT||LA37_0==Match_Tuple||LA37_0==NUMBER||LA37_0==STRING||LA37_0==56||LA37_0==59||LA37_0==63||LA37_0==66||LA37_0==70||LA37_0==76||LA37_0==79||LA37_0==83||LA37_0==85||LA37_0==91||LA37_0==95||LA37_0==112||LA37_0==DOUBLE))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:313:33: b= expr_list
					{
					DebugLocation(313, 33);
					PushFollow(Follow._expr_list_in_new_expr1403);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(314, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:317:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(317, 4);
				DebugLocation(317, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr1414); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(317, 22);
				PushFollow(Follow._type_name_in_new_expr1418);
				a=type_name();
				PopFollow();

				DebugLocation(317, 34);
				PushFollow(Follow._expr_list_in_new_expr1422);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(318, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 35);
			LeaveRule("new_expr", 35);
			LeaveRule_new_expr();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:323:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= IDENT (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 36);
		TraceIn("call_with_expr", 36);
		ExprCall value = default(ExprCall);


		CommonTree b = default(CommonTree);
		Expr a = default(Expr);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(323, 1);
		try
		{
			// SugarWalker.g:324:2: ( ^( Expr_Call_With a= expr b= IDENT (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:324:4: ^( Expr_Call_With a= expr b= IDENT (c= expr_list )? )
			{
			DebugLocation(324, 4);
			DebugLocation(324, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr1442); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(324, 22);
			PushFollow(Follow._expr_in_call_with_expr1446);
			a=expr();
			PopFollow();

			DebugLocation(324, 29);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_call_with_expr1450); 
			DebugLocation(324, 37);
			// SugarWalker.g:324:37: (c= expr_list )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==Expr_Access||LA39_0==Expr_Bin||(LA39_0>=Expr_Call && LA39_0<=Expr_Prefix)||(LA39_0>=Expr_Suffix && LA39_0<=Expr_Tuple)||LA39_0==IDENT||LA39_0==Match_Tuple||LA39_0==NUMBER||LA39_0==STRING||LA39_0==56||LA39_0==59||LA39_0==63||LA39_0==66||LA39_0==70||LA39_0==76||LA39_0==79||LA39_0==83||LA39_0==85||LA39_0==91||LA39_0==95||LA39_0==112||LA39_0==DOUBLE))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:324:37: c= expr_list
				{
				DebugLocation(324, 37);
				PushFollow(Follow._expr_list_in_call_with_expr1454);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(325, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall();
					value.Expr = new ExprConst(b.Text);
					value.Args = Args;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 36);
			LeaveRule("call_with_expr", 36);
			LeaveRule_call_with_expr();
		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:341:1: expr returns [Expr value] : (tuple= expr_tuple |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix op= Infix_Func a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text= ( NUMBER | DOUBLE | IDENT | STRING ) );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 37);
		TraceIn("expr", 37);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		Expr expr_new = default(Expr);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(341, 1);
		try
		{
			// SugarWalker.g:342:5: (tuple= expr_tuple |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix op= Infix_Func a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text= ( NUMBER | DOUBLE | IDENT | STRING ) )
			int alt40=16;
			try { DebugEnterDecision(40, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt40 = 1;
				}
				break;
			case Match_Tuple:
				{
				alt40 = 2;
				}
				break;
			case Expr_Call:
				{
				alt40 = 3;
				}
				break;
			case Expr_Call_With:
				{
				alt40 = 4;
				}
				break;
			case Expr_Dict:
				{
				alt40 = 5;
				}
				break;
			case Expr_Lambda:
				{
				alt40 = 6;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt40 = 7;
				}
				break;
			case Expr_Infix:
				{
				alt40 = 8;
				}
				break;
			case Expr_Cond:
				{
				alt40 = 9;
				}
				break;
			case Expr_Access:
				{
				alt40 = 10;
				}
				break;
			case Expr_Bin:
				{
				alt40 = 11;
				}
				break;
			case 56:
			case 59:
			case 63:
			case 66:
			case 70:
			case 76:
			case 83:
			case 85:
			case 91:
			case 95:
			case 112:
				{
				alt40 = 12;
				}
				break;
			case 79:
				{
				alt40 = 13;
				}
				break;
			case Expr_Suffix:
				{
				alt40 = 14;
				}
				break;
			case Expr_Prefix:
				{
				alt40 = 15;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case DOUBLE:
				{
				alt40 = 16;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:342:7: tuple= expr_tuple
				{
				DebugLocation(342, 12);
				PushFollow(Follow._expr_tuple_in_expr1479);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(343, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:346:4: match= match_tuple
				{
				DebugLocation(346, 9);
				PushFollow(Follow._match_tuple_in_expr1489);
				match=match_tuple();
				PopFollow();

				DebugLocation(347, 2);

						value = match;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:350:4: call= call_expr
				{
				DebugLocation(350, 8);
				PushFollow(Follow._call_expr_in_expr1499);
				call=call_expr();
				PopFollow();

				DebugLocation(351, 2);

						value = call;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:354:4: call_with= call_with_expr
				{
				DebugLocation(354, 13);
				PushFollow(Follow._call_with_expr_in_expr1509);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(355, 2);

						value = call_with;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:358:4: dict= dict_expr
				{
				DebugLocation(358, 8);
				PushFollow(Follow._dict_expr_in_expr1519);
				dict=dict_expr();
				PopFollow();

				DebugLocation(359, 2);

						value = dict;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:362:4: lambda= lambda_expr
				{
				DebugLocation(362, 10);
				PushFollow(Follow._lambda_expr_in_expr1529);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(363, 2);

						value = lambda;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:366:4: expr_new= new_expr
				{
				DebugLocation(366, 12);
				PushFollow(Follow._new_expr_in_expr1539);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(367, 2);

						value = expr_new;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:370:4: ^( Expr_Infix op= Infix_Func a= expr b= expr )
				{
				DebugLocation(370, 4);
				DebugLocation(370, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr1548); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(370, 19);
				op=(CommonTree)Match(input,Infix_Func,Follow._Infix_Func_in_expr1552); 
				DebugLocation(370, 32);
				PushFollow(Follow._expr_in_expr1556);
				a=expr();
				PopFollow();

				DebugLocation(370, 39);
				PushFollow(Follow._expr_in_expr1560);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(371, 2);

						value = new ExprInfix(op.Text.Substring(1, op.Text.Length - 2), a, b);
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:374:3: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(374, 3);
				DebugLocation(374, 5);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr1569); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(374, 16);
				PushFollow(Follow._expr_in_expr1573);
				a=expr();
				PopFollow();

				DebugLocation(374, 23);
				PushFollow(Follow._expr_in_expr1577);
				b=expr();
				PopFollow();

				DebugLocation(374, 30);
				PushFollow(Follow._expr_in_expr1581);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(375, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:378:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT )
				{
				DebugLocation(378, 4);
				DebugLocation(378, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr1591); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(378, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=71 && input.LA(1)<=74)||input.LA(1)==78)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(378, 57);
				PushFollow(Follow._expr_in_expr1617);
				a=expr();
				PopFollow();

				DebugLocation(378, 67);
				text=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr1621); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(379, 2);

						value = new ExprAccess(a, op.Text, text.Text);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:382:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr )
				{
				DebugLocation(382, 4);
				DebugLocation(382, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr1631); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(382, 17);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==54||(input.LA(1)>=57 && input.LA(1)<=58)||input.LA(1)==62||input.LA(1)==64||input.LA(1)==68||input.LA(1)==75||(input.LA(1)>=81 && input.LA(1)<=82)||input.LA(1)==84||input.LA(1)==86||(input.LA(1)>=88 && input.LA(1)<=90)||input.LA(1)==94||input.LA(1)==111||input.LA(1)==113)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(387, 9);
				PushFollow(Follow._expr_in_expr1732);
				a=expr();
				PopFollow();

				DebugLocation(387, 16);
				PushFollow(Follow._expr_in_expr1736);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(388, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:391:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(391, 4);
				DebugLocation(391, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==56||input.LA(1)==59||input.LA(1)==63||input.LA(1)==66||input.LA(1)==70||input.LA(1)==76||input.LA(1)==83||input.LA(1)==85||input.LA(1)==91||input.LA(1)==95||input.LA(1)==112)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(391, 88);
				PushFollow(Follow._expr_in_expr1794);
				a=expr();
				PopFollow();

				DebugLocation(391, 95);
				PushFollow(Follow._expr_in_expr1798);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(392, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:395:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(395, 4);
				DebugLocation(395, 6);
				Match(input,79,Follow._79_in_expr1808); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(395, 12);
				PushFollow(Follow._expr_in_expr1812);
				a=expr();
				PopFollow();

				DebugLocation(395, 19);
				PushFollow(Follow._expr_in_expr1816);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(396, 2);

						value = new ExprAlloc("auto", new List<Expr> { a }, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:399:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(399, 4);
				DebugLocation(399, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr1826); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(399, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==65||input.LA(1)==69)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(399, 36);
				PushFollow(Follow._expr_in_expr1840);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(400, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:403:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(403, 4);
				DebugLocation(403, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr1850); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(403, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==53||input.LA(1)==58||input.LA(1)==62||(input.LA(1)>=64 && input.LA(1)<=65)||(input.LA(1)>=68 && input.LA(1)<=69)||input.LA(1)==114)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(403, 72);
				PushFollow(Follow._expr_in_expr1888);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(404, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:407:4: text= ( NUMBER | DOUBLE | IDENT | STRING )
				{
				DebugLocation(407, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==IDENT||input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(408, 5);

				        value = new ExprConst(text.Text);
				    

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 37);
			LeaveRule("expr", 37);
			LeaveRule_expr();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA3 dfa3;
	private DFA28 dfa28;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa28 = new DFA28( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x1\x3\x1\x6\x2\xFFFF";
		private const string DFA3_maxS =
			"\x2\x32\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x13\xFFFF\x1\x3"+
				"\x3\xFFFF\x1\x1\x1\xFFFF\x1\x3\x9\xFFFF\x2\x3\x1\xFFFF\x1\x3",
				"\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x13\xFFFF\x1\x3\x3\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x3\x9\xFFFF\x2\x3\x1\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()+ loopback of 35:4: ( ( NEWLINE )* a= node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA28 : DFA
	{
		private const string DFA28_eotS =
			"\x4\xFFFF";
		private const string DFA28_eofS =
			"\x4\xFFFF";
		private const string DFA28_minS =
			"\x2\x7\x2\xFFFF";
		private const string DFA28_maxS =
			"\x1\x23\x1\x73\x2\xFFFF";
		private const string DFA28_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA28_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA28_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x2\xFFFF\x3\x3\x1\xFFFF\xC\x3\x2\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\x1\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x7\x3\x6\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x10"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA28_eot = DFA.UnpackEncodedString(DFA28_eotS);
		private static readonly short[] DFA28_eof = DFA.UnpackEncodedString(DFA28_eofS);
		private static readonly char[] DFA28_min = DFA.UnpackEncodedStringToUnsignedChars(DFA28_minS);
		private static readonly char[] DFA28_max = DFA.UnpackEncodedStringToUnsignedChars(DFA28_maxS);
		private static readonly short[] DFA28_accept = DFA.UnpackEncodedString(DFA28_acceptS);
		private static readonly short[] DFA28_special = DFA.UnpackEncodedString(DFA28_specialS);
		private static readonly short[][] DFA28_transition;

		static DFA28()
		{
			int numStates = DFA28_transitionS.Length;
			DFA28_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA28_transition[i] = DFA.UnpackEncodedString(DFA28_transitionS[i]);
			}
		}

		public DFA28( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 28;
			this.eot = DFA28_eot;
			this.eof = DFA28_eof;
			this.min = DFA28_min;
			this.max = DFA28_max;
			this.accept = DFA28_accept;
			this.special = DFA28_special;
			this.transition = DFA28_transition;
		}

		public override string Description { get { return "()* loopback of 263:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _overall_block_in_root77 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _NEWLINE_in_root79 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _NEWLINE_in_overall_block104 = new BitSet(new ulong[]{0x5802880000A40UL});
		public static readonly BitSet _node_in_overall_block109 = new BitSet(new ulong[]{0x5802880000A42UL});
		public static readonly BitSet _func_def_in_node133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_node177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_node199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_node210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespace_def228 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_namespace_def232 = new BitSet(new ulong[]{0x5802880000A40UL});
		public static readonly BitSet _overall_block_in_namespace_def236 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def261 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_import_def266 = new BitSet(new ulong[]{0x20000000008UL});
		public static readonly BitSet _Enum_in_enum_def292 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_enum_def296 = new BitSet(new ulong[]{0x10000008UL});
		public static readonly BitSet _IDENT_in_enum_def303 = new BitSet(new ulong[]{0x10000008UL});
		public static readonly BitSet _Class_in_class_def324 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_class_def328 = new BitSet(new ulong[]{0x5802880000A50UL});
		public static readonly BitSet _class_block_in_class_def332 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NEWLINE_in_class_block357 = new BitSet(new ulong[]{0x5802880000A50UL});
		public static readonly BitSet _class_node_in_class_block362 = new BitSet(new ulong[]{0x5802880000A52UL});
		public static readonly BitSet _Attribute_in_attribute388 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute393 = new BitSet(new ulong[]{0x10000008UL});
		public static readonly BitSet _attribute_in_class_node421 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _NEWLINE_in_class_node425 = new BitSet(new ulong[]{0x5802880000A50UL});
		public static readonly BitSet _node_in_class_node432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Type_IDENT_in_type_name457 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_type_name461 = new BitSet(new ulong[]{0x4400000000000008UL,0x10020000UL});
		public static readonly BitSet _81_in_type_name471 = new BitSet(new ulong[]{0x4000000000000UL,0x1000000UL});
		public static readonly BitSet _type_name_in_type_name483 = new BitSet(new ulong[]{0x4000000000000UL,0x1000000UL});
		public static readonly BitSet _88_in_type_name493 = new BitSet(new ulong[]{0x4400000000000008UL,0x10000000UL});
		public static readonly BitSet _62_in_type_name504 = new BitSet(new ulong[]{0x4400000000000008UL,0x10000000UL});
		public static readonly BitSet _92_in_type_name513 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name515 = new BitSet(new ulong[]{0x4400000000000008UL,0x10000000UL});
		public static readonly BitSet _58_in_type_name524 = new BitSet(new ulong[]{0x4400000000000008UL,0x10000000UL});
		public static readonly BitSet _Func_Args_in_func_args554 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_func_args559 = new BitSet(new ulong[]{0x8903FA1413FFDC08UL,0x9000088289044UL});
		public static readonly BitSet _type_name_in_func_def586 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _IDENT_in_func_def590 = new BitSet(new ulong[]{0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _81_in_func_def593 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _IDENT_in_func_def597 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_func_def601 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_func_def605 = new BitSet(new ulong[]{0x2000000004000000UL});
		public static readonly BitSet _func_args_in_func_def610 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_func_def616 = new BitSet(new ulong[]{0x40000000000UL,0x200000UL});
		public static readonly BitSet _stmt_block_in_func_def623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_func_def631 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_func_def635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block662 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block667 = new BitSet(new ulong[]{0x8903FA1413FFDC08UL,0x9000088289044UL});
		public static readonly BitSet _stmt_expr_in_stmt693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_expr739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_expr748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_expr757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_expr766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using807 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_stmt_using812 = new BitSet(new ulong[]{0x10000008UL,0x10000000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef839 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef843 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _IDENT_in_stmt_typedef847 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _alloc_expr_in_stmt_alloc868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if886 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if890 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if894 = new BitSet(new ulong[]{0x40000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if899 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while921 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while925 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while929 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_For_in_stmt_for949 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for953 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_stmt_for957 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_stmt_for961 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for965 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_ForEach_in_stmt_for975 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for979 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_stmt_for983 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for987 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1007 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1011 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_stmt_try1015 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1019 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Return_in_stmt_return1039 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1044 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident1067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ident_List_in_ident_list1090 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list1095 = new BitSet(new ulong[]{0x10000008UL});
		public static readonly BitSet _Expr_Alloc_in_alloc_expr1117 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1121 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1125 = new BitSet(new ulong[]{0x89000214137FD408UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_alloc_expr1130 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDENT_in_block_expr1156 = new BitSet(new ulong[]{0x800000080UL});
		public static readonly BitSet _NEWLINE_in_block_expr1159 = new BitSet(new ulong[]{0x8903FA1C13FFDC00UL,0x9000088289044UL});
		public static readonly BitSet _stmt_in_block_expr1164 = new BitSet(new ulong[]{0x800000080UL});
		public static readonly BitSet _NEWLINE_in_block_expr1170 = new BitSet(new ulong[]{0x800000080UL});
		public static readonly BitSet _DEDENT_in_block_expr1173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple1198 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple1203 = new BitSet(new ulong[]{0x89000214137FD408UL,0x9000088289044UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple1230 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple1235 = new BitSet(new ulong[]{0x89000214137FD408UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr_list1263 = new BitSet(new ulong[]{0x89000214137FD402UL,0x9000088289044UL});
		public static readonly BitSet _Expr_Call_in_call_expr1288 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr1292 = new BitSet(new ulong[]{0x89000214137FD408UL,0x90000882A9044UL});
		public static readonly BitSet _81_in_call_expr1297 = new BitSet(new ulong[]{0x10000000UL,0x1000000UL});
		public static readonly BitSet _IDENT_in_call_expr1302 = new BitSet(new ulong[]{0x10000000UL,0x1000000UL});
		public static readonly BitSet _88_in_call_expr1308 = new BitSet(new ulong[]{0x89000214137FD408UL,0x9000088289044UL});
		public static readonly BitSet _expr_list_in_call_expr1315 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr1336 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr1340 = new BitSet(new ulong[]{0x89000214137FD408UL,0x9000088289044UL});
		public static readonly BitSet _expr_list_in_dict_expr1345 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr1367 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr1371 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_lambda_expr1375 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr1395 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1399 = new BitSet(new ulong[]{0x89000214137FD408UL,0x9000088289044UL});
		public static readonly BitSet _expr_list_in_new_expr1403 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr1414 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1418 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_list_in_new_expr1422 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr1442 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr1446 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _IDENT_in_call_with_expr1450 = new BitSet(new ulong[]{0x89000214137FD408UL,0x9000088289044UL});
		public static readonly BitSet _expr_list_in_call_with_expr1454 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr1479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr1489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr1499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr1509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr1519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr1539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr1548 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _Infix_Func_in_expr1552 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1556 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1560 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr1569 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1573 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1577 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1581 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr1591 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1595 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1617 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _IDENT_in_expr1621 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr1631 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1635 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1732 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1736 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr1748 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1794 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1798 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _79_in_expr1808 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1812 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1816 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr1826 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1830 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1840 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr1850 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1854 = new BitSet(new ulong[]{0x89000214137FD400UL,0x9000088289044UL});
		public static readonly BitSet _expr_in_expr1888 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr1899 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
