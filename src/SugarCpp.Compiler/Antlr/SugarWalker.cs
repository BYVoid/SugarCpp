//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-04-22 09:45:15

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Dict", "Expr_Dot", "Expr_New", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_For", "Stmt_If", "Stmt_While", "'!'", "'!='", "')'", "'*'", "'+'", "'++'", "','", "'-'", "'--'", "'/'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "']'", "'by'", "'else'", "'for'", "'if'", "'import'", "'new'", "'return'", "'struct'", "'to'", "'while'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Expr_Alloc=7;
	public const int Expr_Bin=8;
	public const int Expr_Block=9;
	public const int Expr_Call=10;
	public const int Expr_Dict=11;
	public const int Expr_Dot=12;
	public const int Expr_New=13;
	public const int Func_Def=14;
	public const int IDENT=15;
	public const int INDENT=16;
	public const int INT=17;
	public const int Left_Bracket=18;
	public const int NEWLINE=19;
	public const int Right_Bracket=20;
	public const int Root=21;
	public const int SP=22;
	public const int STRING=23;
	public const int Stmt_For=24;
	public const int Stmt_If=25;
	public const int Stmt_While=26;
	public const int DOUBLE=55;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:22:8: public root returns [Root value] : (a= node )+ ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		AstNode a = default(AstNode);


			value = new Root();

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(22, 1);
		try
		{
			// SugarWalker.g:27:2: ( (a= node )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:27:4: (a= node )+
			{
			DebugLocation(27, 4);
			// SugarWalker.g:27:4: (a= node )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENT||LA1_0==49||LA1_0==52))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:27:5: a= node
					{
					DebugLocation(27, 7);
					PushFollow(Follow._node_in_root87);
					a=node();
					PopFollow();

					DebugLocation(27, 15);
					 value.List.Add(a); 

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:30:1: node returns [AstNode value] : (a= func_def |b= imports |c= struct );
	[GrammarRule("node")]
	private AstNode node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstNode value = default(AstNode);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Struct c = default(Struct);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:31:2: (a= func_def |b= imports |c= struct )
			int alt2=3;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt2 = 1;
				}
				break;
			case 49:
				{
				alt2 = 2;
				}
				break;
			case 52:
				{
				alt2 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:31:4: a= func_def
				{
				DebugLocation(31, 6);
				PushFollow(Follow._func_def_in_node111);
				a=func_def();
				PopFollow();

				DebugLocation(31, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:32:4: b= imports
				{
				DebugLocation(32, 6);
				PushFollow(Follow._imports_in_node122);
				b=imports();
				PopFollow();

				DebugLocation(32, 16);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:33:4: c= struct
				{
				DebugLocation(33, 6);
				PushFollow(Follow._struct_in_node133);
				c=@struct();
				PopFollow();

				DebugLocation(33, 15);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(34, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_imports();
	partial void LeaveRule_imports();

	// $ANTLR start "imports"
	// SugarWalker.g:36:1: imports returns [Import value] : 'import' (a= STRING )? ( INDENT ( ( NEWLINE )+ b= STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )* ;
	[GrammarRule("imports")]
	private Import imports()
	{
		EnterRule_imports();
		EnterRule("imports", 3);
		TraceIn("imports", 3);
		Import value = default(Import);


		CommonTree a = default(CommonTree);
		CommonTree b = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(36, 1);
		try
		{
			// SugarWalker.g:41:2: ( 'import' (a= STRING )? ( INDENT ( ( NEWLINE )+ b= STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarWalker.g:41:4: 'import' (a= STRING )? ( INDENT ( ( NEWLINE )+ b= STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )*
			{
			DebugLocation(41, 4);
			Match(input,49,Follow._49_in_imports155); 
			DebugLocation(41, 13);
			// SugarWalker.g:41:13: (a= STRING )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==STRING))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:41:14: a= STRING
				{
				DebugLocation(41, 16);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_imports162); 
				DebugLocation(41, 25);
				 value.NameList.Add(a.Text); 

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(42, 4);
			// SugarWalker.g:42:4: ( INDENT ( ( NEWLINE )+ b= STRING )+ ( NEWLINE )* DEDENT )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==INDENT))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:42:5: INDENT ( ( NEWLINE )+ b= STRING )+ ( NEWLINE )* DEDENT
				{
				DebugLocation(42, 5);
				Match(input,INDENT,Follow._INDENT_in_imports172); 
				DebugLocation(42, 12);
				// SugarWalker.g:42:12: ( ( NEWLINE )+ b= STRING )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					try
					{
						alt5 = dfa5.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:42:13: ( NEWLINE )+ b= STRING
						{
						DebugLocation(42, 13);
						// SugarWalker.g:42:13: ( NEWLINE )+
						int cnt4=0;
						try { DebugEnterSubRule(4);
						while (true)
						{
							int alt4=2;
							try { DebugEnterDecision(4, false);
							int LA4_0 = input.LA(1);

							if ((LA4_0==NEWLINE))
							{
								alt4 = 1;
							}


							} finally { DebugExitDecision(4); }
							switch (alt4)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarWalker.g:42:13: NEWLINE
								{
								DebugLocation(42, 13);
								Match(input,NEWLINE,Follow._NEWLINE_in_imports175); 

								}
								break;

							default:
								if (cnt4 >= 1)
									goto loop4;

								EarlyExitException eee4 = new EarlyExitException( 4, input );
								DebugRecognitionException(eee4);
								throw eee4;
							}
							cnt4++;
						}
						loop4:
							;

						} finally { DebugExitSubRule(4); }

						DebugLocation(42, 24);
						b=(CommonTree)Match(input,STRING,Follow._STRING_in_imports182); 
						DebugLocation(42, 33);
						 value.NameList.Add(b.Text); 

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(42, 68);
				// SugarWalker.g:42:68: ( NEWLINE )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==NEWLINE))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:42:68: NEWLINE
						{
						DebugLocation(42, 68);
						Match(input,NEWLINE,Follow._NEWLINE_in_imports188); 

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(42, 77);
				Match(input,DEDENT,Follow._DEDENT_in_imports191); 

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(42, 86);
			// SugarWalker.g:42:86: ( NEWLINE )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==NEWLINE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:42:86: NEWLINE
					{
					DebugLocation(42, 86);
					Match(input,NEWLINE,Follow._NEWLINE_in_imports195); 

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("imports", 3);
			LeaveRule("imports", 3);
			LeaveRule_imports();
		}
		DebugLocation(43, 1);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return value;

	}
	// $ANTLR end "imports"

	partial void EnterRule_struct();
	partial void LeaveRule_struct();

	// $ANTLR start "struct"
	// SugarWalker.g:45:1: struct returns [Struct value] : 'struct' a= IDENT ( INDENT ( ( NEWLINE )+ b= stmt )+ DEDENT ) ( NEWLINE )* ;
	[GrammarRule("struct")]
	private Struct @struct()
	{
		EnterRule_struct();
		EnterRule("struct", 4);
		TraceIn("struct", 4);
		Struct value = default(Struct);


		CommonTree a = default(CommonTree);
		Stmt b = default(Stmt);


			value = new Struct();

		try { DebugEnterRule(GrammarFileName, "struct");
		DebugLocation(45, 1);
		try
		{
			// SugarWalker.g:50:2: ( 'struct' a= IDENT ( INDENT ( ( NEWLINE )+ b= stmt )+ DEDENT ) ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarWalker.g:50:4: 'struct' a= IDENT ( INDENT ( ( NEWLINE )+ b= stmt )+ DEDENT ) ( NEWLINE )*
			{
			DebugLocation(50, 4);
			Match(input,52,Follow._52_in_struct216); 
			DebugLocation(50, 14);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_struct220); 
			DebugLocation(50, 21);
			 value.Name = a.Text; 
			DebugLocation(50, 47);
			// SugarWalker.g:50:47: ( INDENT ( ( NEWLINE )+ b= stmt )+ DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:50:48: INDENT ( ( NEWLINE )+ b= stmt )+ DEDENT
			{
			DebugLocation(50, 48);
			Match(input,INDENT,Follow._INDENT_in_struct225); 
			DebugLocation(50, 55);
			// SugarWalker.g:50:55: ( ( NEWLINE )+ b= stmt )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==NEWLINE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:50:56: ( NEWLINE )+ b= stmt
					{
					DebugLocation(50, 56);
					// SugarWalker.g:50:56: ( NEWLINE )+
					int cnt9=0;
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0==NEWLINE))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:50:56: NEWLINE
							{
							DebugLocation(50, 56);
							Match(input,NEWLINE,Follow._NEWLINE_in_struct228); 

							}
							break;

						default:
							if (cnt9 >= 1)
								goto loop9;

							EarlyExitException eee9 = new EarlyExitException( 9, input );
							DebugRecognitionException(eee9);
							throw eee9;
						}
						cnt9++;
					}
					loop9:
						;

					} finally { DebugExitSubRule(9); }

					DebugLocation(50, 66);
					PushFollow(Follow._stmt_in_struct233);
					b=stmt();
					PopFollow();

					DebugLocation(50, 72);
					 value.List.Add(b); 

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(50, 99);
			Match(input,DEDENT,Follow._DEDENT_in_struct240); 

			}

			DebugLocation(50, 107);
			// SugarWalker.g:50:107: ( NEWLINE )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:50:107: NEWLINE
					{
					DebugLocation(50, 107);
					Match(input,NEWLINE,Follow._NEWLINE_in_struct243); 

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("struct", 4);
			LeaveRule("struct", 4);
			LeaveRule_struct();
		}
		DebugLocation(51, 1);
		} finally { DebugExitRule(GrammarFileName, "struct"); }
		return value;

	}
	// $ANTLR end "struct"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:53:1: type_name returns [string value] : a= IDENT ( '[' ']' )* ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 5);
		TraceIn("type_name", 5);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(53, 1);
		try
		{
			// SugarWalker.g:58:2: (a= IDENT ( '[' ']' )* )
			DebugEnterAlt(1);
			// SugarWalker.g:58:4: a= IDENT ( '[' ']' )*
			{
			DebugLocation(58, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_type_name266); 
			DebugLocation(58, 12);
			 value+=a; 
			DebugLocation(58, 27);
			// SugarWalker.g:58:27: ( '[' ']' )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==Expr_Dict))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:58:28: '[' ']'
					{
					DebugLocation(58, 28);
					Match(input,Expr_Dict,Follow._Expr_Dict_in_type_name271); 
					DebugLocation(58, 32);
					Match(input,44,Follow._44_in_type_name273); 
					DebugLocation(58, 36);
					 value+="*"; 

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 5);
			LeaveRule("type_name", 5);
			LeaveRule_type_name();
		}
		DebugLocation(59, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:61:1: func_def returns [FuncDef value] : a= type_name b= IDENT '(' (c= expr ( ',' d= expr IDENT )* )? ')' (e= stmt_block | '=' f= expr ) ( NEWLINE )* ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 6);
		TraceIn("func_def", 6);
		FuncDef value = default(FuncDef);


		CommonTree b = default(CommonTree);
		string a = default(string);
		Expr c = default(Expr);
		Expr d = default(Expr);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(61, 1);
		try
		{
			// SugarWalker.g:66:2: (a= type_name b= IDENT '(' (c= expr ( ',' d= expr IDENT )* )? ')' (e= stmt_block | '=' f= expr ) ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarWalker.g:66:4: a= type_name b= IDENT '(' (c= expr ( ',' d= expr IDENT )* )? ')' (e= stmt_block | '=' f= expr ) ( NEWLINE )*
			{
			DebugLocation(66, 5);
			PushFollow(Follow._type_name_in_func_def299);
			a=type_name();
			PopFollow();

			DebugLocation(66, 17);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def303); 
			DebugLocation(66, 24);
			Match(input,Expr_Call,Follow._Expr_Call_in_func_def305); 
			DebugLocation(66, 28);
			// SugarWalker.g:66:28: (c= expr ( ',' d= expr IDENT )* )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==Expr_Alloc||(LA14_0>=Expr_Call && LA14_0<=Expr_New)||(LA14_0>=IDENT && LA14_0<=INT)||LA14_0==STRING||(LA14_0>=27 && LA14_0<=28)||(LA14_0>=30 && LA14_0<=31)||LA14_0==34||LA14_0==36||(LA14_0>=38 && LA14_0<=43)||LA14_0==51||LA14_0==DOUBLE))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:66:29: c= expr ( ',' d= expr IDENT )*
				{
				DebugLocation(66, 30);
				PushFollow(Follow._expr_in_func_def310);
				c=expr();
				PopFollow();

				DebugLocation(66, 36);
				 value.Args.Add(c); 
				DebugLocation(66, 60);
				// SugarWalker.g:66:60: ( ',' d= expr IDENT )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if ((LA13_0==33))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:66:61: ',' d= expr IDENT
						{
						DebugLocation(66, 61);
						Match(input,33,Follow._33_in_func_def315); 
						DebugLocation(66, 66);
						PushFollow(Follow._expr_in_func_def319);
						d=expr();
						PopFollow();

						DebugLocation(66, 72);
						 value.Args.Add(d); 
						DebugLocation(66, 96);
						Match(input,IDENT,Follow._IDENT_in_func_def323); 

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(66, 106);
			Match(input,29,Follow._29_in_func_def329); 
			DebugLocation(67, 2);
			// SugarWalker.g:67:2: (e= stmt_block | '=' f= expr )
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==INDENT))
			{
				alt15 = 1;
			}
			else if ((LA15_0==40))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:67:4: e= stmt_block
				{
				DebugLocation(67, 5);
				PushFollow(Follow._stmt_block_in_func_def336);
				e=stmt_block();
				PopFollow();

				DebugLocation(68, 2);

						value.Type = a;
						value.Name = b.Text;
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:73:4: '=' f= expr
				{
				DebugLocation(73, 4);
				Match(input,40,Follow._40_in_func_def344); 
				DebugLocation(73, 9);
				PushFollow(Follow._expr_in_func_def348);
				f=expr();
				PopFollow();

				DebugLocation(74, 2);

						value.Type = a;
						value.Name = b.Text;
						StmtBlock tmp = new StmtBlock();
						if (a != "void")
							tmp.StmtList.Add(new ExprReturn(f));
						else tmp.StmtList.Add(f);
						value.Body = tmp;
					

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(83, 3);
			// SugarWalker.g:83:3: ( NEWLINE )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==NEWLINE))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:83:3: NEWLINE
					{
					DebugLocation(83, 3);
					Match(input,NEWLINE,Follow._NEWLINE_in_func_def355); 

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 6);
			LeaveRule("func_def", 6);
			LeaveRule_func_def();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:86:1: stmt_block returns [StmtBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 7);
		TraceIn("stmt_block", 7);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(86, 4);
		try
		{
			// SugarWalker.g:91:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:91:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(91, 4);
			Match(input,INDENT,Follow._INDENT_in_stmt_block376); 
			DebugLocation(91, 11);
			// SugarWalker.g:91:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				try
				{
					alt18 = dfa18.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:91:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(91, 12);
					// SugarWalker.g:91:12: ( NEWLINE )+
					int cnt17=0;
					try { DebugEnterSubRule(17);
					while (true)
					{
						int alt17=2;
						try { DebugEnterDecision(17, false);
						int LA17_0 = input.LA(1);

						if ((LA17_0==NEWLINE))
						{
							alt17 = 1;
						}


						} finally { DebugExitDecision(17); }
						switch (alt17)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:91:12: NEWLINE
							{
							DebugLocation(91, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block379); 

							}
							break;

						default:
							if (cnt17 >= 1)
								goto loop17;

							EarlyExitException eee17 = new EarlyExitException( 17, input );
							DebugRecognitionException(eee17);
							throw eee17;
						}
						cnt17++;
					}
					loop17:
						;

					} finally { DebugExitSubRule(17); }

					DebugLocation(91, 22);
					PushFollow(Follow._stmt_in_stmt_block384);
					a=stmt();
					PopFollow();

					DebugLocation(91, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }

			DebugLocation(91, 58);
			// SugarWalker.g:91:58: ( NEWLINE )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==NEWLINE))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:91:58: NEWLINE
					{
					DebugLocation(91, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block390); 

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(91, 67);
			Match(input,DEDENT,Follow._DEDENT_in_stmt_block393); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 7);
			LeaveRule("stmt_block", 7);
			LeaveRule_stmt_block();
		}
		DebugLocation(92, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:94:1: stmt returns [Stmt value] : (a= expr |b= stmt_if |c= stmt_while |d= stmt_for );
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 8);
		TraceIn("stmt", 8);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtIf b = default(StmtIf);
		StmtWhile c = default(StmtWhile);
		StmtFor d = default(StmtFor);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(94, 1);
		try
		{
			// SugarWalker.g:95:2: (a= expr |b= stmt_if |c= stmt_while |d= stmt_for )
			int alt20=4;
			try { DebugEnterDecision(20, false);
			switch (input.LA(1))
			{
			case Expr_Alloc:
			case Expr_Call:
			case Expr_Dict:
			case Expr_Dot:
			case Expr_New:
			case IDENT:
			case INDENT:
			case INT:
			case STRING:
			case 27:
			case 28:
			case 30:
			case 31:
			case 34:
			case 36:
			case 38:
			case 39:
			case 40:
			case 41:
			case 42:
			case 43:
			case 51:
			case DOUBLE:
				{
				alt20 = 1;
				}
				break;
			case 48:
				{
				alt20 = 2;
				}
				break;
			case 54:
				{
				alt20 = 3;
				}
				break;
			case 47:
				{
				alt20 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:95:4: a= expr
				{
				DebugLocation(95, 5);
				PushFollow(Follow._expr_in_stmt414);
				a=expr();
				PopFollow();

				DebugLocation(95, 11);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:96:4: b= stmt_if
				{
				DebugLocation(96, 5);
				PushFollow(Follow._stmt_if_in_stmt423);
				b=stmt_if();
				PopFollow();

				DebugLocation(96, 14);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:97:4: c= stmt_while
				{
				DebugLocation(97, 5);
				PushFollow(Follow._stmt_while_in_stmt432);
				c=stmt_while();
				PopFollow();

				DebugLocation(97, 17);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:98:4: d= stmt_for
				{
				DebugLocation(98, 5);
				PushFollow(Follow._stmt_for_in_stmt441);
				d=stmt_for();
				PopFollow();

				DebugLocation(98, 15);
				 value = d; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 8);
			LeaveRule("stmt", 8);
			LeaveRule_stmt();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:101:1: stmt_if returns [StmtIf value] : 'if' a= expr b= stmt_block ( ( NEWLINE )* 'else' c= stmt_block )? ;
	[GrammarRule("stmt_if")]
	private StmtIf stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 9);
		TraceIn("stmt_if", 9);
		StmtIf value = default(StmtIf);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(101, 1);
		try
		{
			// SugarWalker.g:102:2: ( 'if' a= expr b= stmt_block ( ( NEWLINE )* 'else' c= stmt_block )? )
			DebugEnterAlt(1);
			// SugarWalker.g:102:4: 'if' a= expr b= stmt_block ( ( NEWLINE )* 'else' c= stmt_block )?
			{
			DebugLocation(102, 4);
			Match(input,48,Follow._48_in_stmt_if459); 
			DebugLocation(102, 10);
			PushFollow(Follow._expr_in_stmt_if463);
			a=expr();
			PopFollow();

			DebugLocation(102, 17);
			PushFollow(Follow._stmt_block_in_stmt_if467);
			b=stmt_block();
			PopFollow();

			DebugLocation(102, 29);
			// SugarWalker.g:102:29: ( ( NEWLINE )* 'else' c= stmt_block )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			try
			{
				alt22 = dfa22.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:102:30: ( NEWLINE )* 'else' c= stmt_block
				{
				DebugLocation(102, 30);
				// SugarWalker.g:102:30: ( NEWLINE )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==NEWLINE))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:102:30: NEWLINE
						{
						DebugLocation(102, 30);
						Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if470); 

						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(102, 39);
				Match(input,46,Follow._46_in_stmt_if473); 
				DebugLocation(102, 47);
				PushFollow(Follow._stmt_block_in_stmt_if477);
				c=stmt_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(103, 2);

					value = new StmtIf();
					value.Condition = a;
					value.Body = b;
					value.Else = c;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 9);
			LeaveRule("stmt_if", 9);
			LeaveRule_stmt_if();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:111:1: stmt_while returns [StmtWhile value] : 'while' a= expr b= stmt_block ;
	[GrammarRule("stmt_while")]
	private StmtWhile stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 10);
		TraceIn("stmt_while", 10);
		StmtWhile value = default(StmtWhile);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(111, 1);
		try
		{
			// SugarWalker.g:112:2: ( 'while' a= expr b= stmt_block )
			DebugEnterAlt(1);
			// SugarWalker.g:112:4: 'while' a= expr b= stmt_block
			{
			DebugLocation(112, 4);
			Match(input,54,Follow._54_in_stmt_while497); 
			DebugLocation(112, 13);
			PushFollow(Follow._expr_in_stmt_while501);
			a=expr();
			PopFollow();

			DebugLocation(112, 20);
			PushFollow(Follow._stmt_block_in_stmt_while505);
			b=stmt_block();
			PopFollow();

			DebugLocation(113, 2);

					value = new StmtWhile();
					value.Condition = a;
					value.Body = b;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 10);
			LeaveRule("stmt_while", 10);
			LeaveRule_stmt_while();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:120:1: stmt_for returns [StmtFor value] : 'for' '(' a= expr ( ';' b= expr ';' c= expr | 'to' e= expr ( 'by' h= expr )? ) ')' d= stmt_block ;
	[GrammarRule("stmt_for")]
	private StmtFor stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 11);
		TraceIn("stmt_for", 11);
		StmtFor value = default(StmtFor);


		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr e = default(Expr);
		Expr h = default(Expr);
		StmtBlock d = default(StmtBlock);


			value = new StmtFor();

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(120, 1);
		try
		{
			// SugarWalker.g:125:2: ( 'for' '(' a= expr ( ';' b= expr ';' c= expr | 'to' e= expr ( 'by' h= expr )? ) ')' d= stmt_block )
			DebugEnterAlt(1);
			// SugarWalker.g:125:4: 'for' '(' a= expr ( ';' b= expr ';' c= expr | 'to' e= expr ( 'by' h= expr )? ) ')' d= stmt_block
			{
			DebugLocation(125, 4);
			Match(input,47,Follow._47_in_stmt_for528); 
			DebugLocation(125, 10);
			Match(input,Expr_Call,Follow._Expr_Call_in_stmt_for530); 
			DebugLocation(125, 15);
			PushFollow(Follow._expr_in_stmt_for534);
			a=expr();
			PopFollow();

			DebugLocation(126, 4);
			// SugarWalker.g:126:4: ( ';' b= expr ';' c= expr | 'to' e= expr ( 'by' h= expr )? )
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==37))
			{
				alt24 = 1;
			}
			else if ((LA24_0==53))
			{
				alt24 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:126:6: ';' b= expr ';' c= expr
				{
				DebugLocation(126, 6);
				Match(input,37,Follow._37_in_stmt_for541); 
				DebugLocation(126, 11);
				PushFollow(Follow._expr_in_stmt_for545);
				b=expr();
				PopFollow();

				DebugLocation(126, 17);
				Match(input,37,Follow._37_in_stmt_for547); 
				DebugLocation(126, 22);
				PushFollow(Follow._expr_in_stmt_for551);
				c=expr();
				PopFollow();

				DebugLocation(127, 4);

								value.Start = a;
								value.Condition = b;
								value.Next = c;
							

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:132:6: 'to' e= expr ( 'by' h= expr )?
				{
				DebugLocation(132, 6);
				Match(input,53,Follow._53_in_stmt_for564); 
				DebugLocation(132, 12);
				PushFollow(Follow._expr_in_stmt_for568);
				e=expr();
				PopFollow();

				DebugLocation(133, 4);

								ExprAlloc tmp = (ExprAlloc)a;
								
								value.Start = a;
								value.Condition = new ExprBin("!=", new ExprConst(tmp.Name), new ExprBin("+", e, new ExprConst("1")));
								value.Next = new ExprBin("+=", new ExprConst(tmp.Name), new ExprConst("1"));
							
				DebugLocation(140, 4);
				// SugarWalker.g:140:4: ( 'by' h= expr )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==45))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:140:5: 'by' h= expr
					{
					DebugLocation(140, 5);
					Match(input,45,Follow._45_in_stmt_for579); 
					DebugLocation(140, 11);
					PushFollow(Follow._expr_in_stmt_for583);
					h=expr();
					PopFollow();

					DebugLocation(141, 4);

									tmp = (ExprAlloc)a;
									
									value.Start = a;
									value.Condition = new ExprBin("!=", new ExprConst(tmp.Name), new ExprBin("+", e, h));
									value.Next = new ExprBin("+=", new ExprConst(tmp.Name), h);
								

					}
					break;

				}
				} finally { DebugExitSubRule(23); }


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(148, 6);
			Match(input,29,Follow._29_in_stmt_for597); 
			DebugLocation(148, 11);
			PushFollow(Follow._stmt_block_in_stmt_for601);
			d=stmt_block();
			PopFollow();

			DebugLocation(149, 4);

							value.Body = d;
						

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 11);
			LeaveRule("stmt_for", 11);
			LeaveRule_stmt_for();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:154:1: alloc_expr returns [ExprAlloc value] : ^( Expr_Alloc a= type_name b= IDENT (c= expr )? ) ;
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 12);
		TraceIn("alloc_expr", 12);
		ExprAlloc value = default(ExprAlloc);


		CommonTree b = default(CommonTree);
		string a = default(string);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(154, 1);
		try
		{
			// SugarWalker.g:155:2: ( ^( Expr_Alloc a= type_name b= IDENT (c= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:155:4: ^( Expr_Alloc a= type_name b= IDENT (c= expr )? )
			{
			DebugLocation(155, 4);
			DebugLocation(155, 6);
			Match(input,Expr_Alloc,Follow._Expr_Alloc_in_alloc_expr622); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(155, 18);
			PushFollow(Follow._type_name_in_alloc_expr626);
			a=type_name();
			PopFollow();

			DebugLocation(155, 30);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_alloc_expr630); 
			DebugLocation(155, 37);
			// SugarWalker.g:155:37: (c= expr )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==Expr_Alloc||(LA25_0>=Expr_Call && LA25_0<=Expr_New)||(LA25_0>=IDENT && LA25_0<=INT)||LA25_0==STRING||(LA25_0>=27 && LA25_0<=28)||(LA25_0>=30 && LA25_0<=31)||LA25_0==34||LA25_0==36||(LA25_0>=38 && LA25_0<=43)||LA25_0==51||LA25_0==DOUBLE))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:155:38: c= expr
				{
				DebugLocation(155, 39);
				PushFollow(Follow._expr_in_alloc_expr635);
				c=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(156, 2);

					value = new ExprAlloc();
					value.Type = a;
					value.Name = b.Text;
					value.Expr = c;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 12);
			LeaveRule("alloc_expr", 12);
			LeaveRule_alloc_expr();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_args_list();
	partial void LeaveRule_args_list();

	// $ANTLR start "args_list"
	// SugarWalker.g:163:1: args_list returns [List<Expr> value] : (a= expr )* ;
	[GrammarRule("args_list")]
	private List<Expr> args_list()
	{
		EnterRule_args_list();
		EnterRule("args_list", 13);
		TraceIn("args_list", 13);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "args_list");
		DebugLocation(163, 1);
		try
		{
			// SugarWalker.g:168:2: ( (a= expr )* )
			DebugEnterAlt(1);
			// SugarWalker.g:168:4: (a= expr )*
			{
			DebugLocation(168, 4);
			// SugarWalker.g:168:4: (a= expr )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==Expr_Alloc||(LA26_0>=Expr_Call && LA26_0<=Expr_New)||(LA26_0>=IDENT && LA26_0<=INT)||LA26_0==STRING||(LA26_0>=27 && LA26_0<=28)||(LA26_0>=30 && LA26_0<=31)||LA26_0==34||LA26_0==36||(LA26_0>=38 && LA26_0<=43)||LA26_0==51||LA26_0==DOUBLE))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:168:5: a= expr
					{
					DebugLocation(168, 6);
					PushFollow(Follow._expr_in_args_list663);
					a=expr();
					PopFollow();

					DebugLocation(168, 12);
					 value.Add(a); 

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("args_list", 13);
			LeaveRule("args_list", 13);
			LeaveRule_args_list();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "args_list"); }
		return value;

	}
	// $ANTLR end "args_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:171:1: call_expr returns [Expr value] : ( ^( Expr_Call a= expr b= args_list ) | ^( Expr_Dict a= expr c= expr ) );
	[GrammarRule("call_expr")]
	private Expr call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 14);
		TraceIn("call_expr", 14);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(171, 1);
		try
		{
			// SugarWalker.g:172:2: ( ^( Expr_Call a= expr b= args_list ) | ^( Expr_Dict a= expr c= expr ) )
			int alt27=2;
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==Expr_Call))
			{
				alt27 = 1;
			}
			else if ((LA27_0==Expr_Dict))
			{
				alt27 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:172:4: ^( Expr_Call a= expr b= args_list )
				{
				DebugLocation(172, 4);
				DebugLocation(172, 6);
				Match(input,Expr_Call,Follow._Expr_Call_in_call_expr683); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(172, 17);
				PushFollow(Follow._expr_in_call_expr687);
				a=expr();
				PopFollow();

				DebugLocation(172, 24);
				PushFollow(Follow._args_list_in_call_expr691);
				b=args_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(173, 2);

						value = new ExprCall(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:176:4: ^( Expr_Dict a= expr c= expr )
				{
				DebugLocation(176, 4);
				DebugLocation(176, 6);
				Match(input,Expr_Dict,Follow._Expr_Dict_in_call_expr701); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(176, 17);
				PushFollow(Follow._expr_in_call_expr705);
				a=expr();
				PopFollow();

				DebugLocation(176, 24);
				PushFollow(Follow._expr_in_call_expr709);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(177, 2);

						value = new ExprDict(a, c);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 14);
			LeaveRule("call_expr", 14);
			LeaveRule_call_expr();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dot_expr();
	partial void LeaveRule_dot_expr();

	// $ANTLR start "dot_expr"
	// SugarWalker.g:182:1: dot_expr returns [ExprDot value] : ^( Expr_Dot a= expr b= IDENT ) ;
	[GrammarRule("dot_expr")]
	private ExprDot dot_expr()
	{
		EnterRule_dot_expr();
		EnterRule("dot_expr", 15);
		TraceIn("dot_expr", 15);
		ExprDot value = default(ExprDot);


		CommonTree b = default(CommonTree);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "dot_expr");
		DebugLocation(182, 1);
		try
		{
			// SugarWalker.g:183:2: ( ^( Expr_Dot a= expr b= IDENT ) )
			DebugEnterAlt(1);
			// SugarWalker.g:183:4: ^( Expr_Dot a= expr b= IDENT )
			{
			DebugLocation(183, 4);
			DebugLocation(183, 6);
			Match(input,Expr_Dot,Follow._Expr_Dot_in_dot_expr730); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(183, 16);
			PushFollow(Follow._expr_in_dot_expr734);
			a=expr();
			PopFollow();

			DebugLocation(183, 23);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_dot_expr738); 

			Match(input, TokenTypes.Up, null); 

			DebugLocation(184, 2);

					value = new ExprDot();
					value.Expr = a;
					value.Name = b.Text;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dot_expr", 15);
			LeaveRule("dot_expr", 15);
			LeaveRule_dot_expr();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "dot_expr"); }
		return value;

	}
	// $ANTLR end "dot_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:191:1: new_expr returns [ExprNew value] : ^( Expr_New a= IDENT (b= expr )+ ) ;
	[GrammarRule("new_expr")]
	private ExprNew new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 16);
		TraceIn("new_expr", 16);
		ExprNew value = default(ExprNew);


		CommonTree a = default(CommonTree);
		Expr b = default(Expr);


			value = new ExprNew();

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(191, 1);
		try
		{
			// SugarWalker.g:196:2: ( ^( Expr_New a= IDENT (b= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:196:4: ^( Expr_New a= IDENT (b= expr )+ )
			{
			DebugLocation(196, 4);
			DebugLocation(196, 6);
			Match(input,Expr_New,Follow._Expr_New_in_new_expr763); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(196, 16);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_new_expr767); 
			DebugLocation(196, 23);
			 value.ElemType = a.Text; 
			DebugLocation(196, 53);
			// SugarWalker.g:196:53: (b= expr )+
			int cnt28=0;
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==Expr_Alloc||(LA28_0>=Expr_Call && LA28_0<=Expr_New)||(LA28_0>=IDENT && LA28_0<=INT)||LA28_0==STRING||(LA28_0>=27 && LA28_0<=28)||(LA28_0>=30 && LA28_0<=31)||LA28_0==34||LA28_0==36||(LA28_0>=38 && LA28_0<=43)||LA28_0==51||LA28_0==DOUBLE))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:196:54: b= expr
					{
					DebugLocation(196, 55);
					PushFollow(Follow._expr_in_new_expr774);
					b=expr();
					PopFollow();

					DebugLocation(196, 61);
					 value.Ranges.Add(b); 

					}
					break;

				default:
					if (cnt28 >= 1)
						goto loop28;

					EarlyExitException eee28 = new EarlyExitException( 28, input );
					DebugRecognitionException(eee28);
					throw eee28;
				}
				cnt28++;
			}
			loop28:
				;

			} finally { DebugExitSubRule(28); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 16);
			LeaveRule("new_expr", 16);
			LeaveRule_new_expr();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_block_expr();
	partial void LeaveRule_block_expr();

	// $ANTLR start "block_expr"
	// SugarWalker.g:199:1: block_expr returns [ExprBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("block_expr")]
	private ExprBlock block_expr()
	{
		EnterRule_block_expr();
		EnterRule("block_expr", 17);
		TraceIn("block_expr", 17);
		ExprBlock value = default(ExprBlock);


		Stmt a = default(Stmt);


			value = new ExprBlock();

		try { DebugEnterRule(GrammarFileName, "block_expr");
		DebugLocation(199, 4);
		try
		{
			// SugarWalker.g:204:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:204:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(204, 4);
			Match(input,INDENT,Follow._INDENT_in_block_expr799); 
			DebugLocation(204, 11);
			// SugarWalker.g:204:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				try
				{
					alt30 = dfa30.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:204:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(204, 12);
					// SugarWalker.g:204:12: ( NEWLINE )+
					int cnt29=0;
					try { DebugEnterSubRule(29);
					while (true)
					{
						int alt29=2;
						try { DebugEnterDecision(29, false);
						int LA29_0 = input.LA(1);

						if ((LA29_0==NEWLINE))
						{
							alt29 = 1;
						}


						} finally { DebugExitDecision(29); }
						switch (alt29)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:204:12: NEWLINE
							{
							DebugLocation(204, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_block_expr802); 

							}
							break;

						default:
							if (cnt29 >= 1)
								goto loop29;

							EarlyExitException eee29 = new EarlyExitException( 29, input );
							DebugRecognitionException(eee29);
							throw eee29;
						}
						cnt29++;
					}
					loop29:
						;

					} finally { DebugExitSubRule(29); }

					DebugLocation(204, 22);
					PushFollow(Follow._stmt_in_block_expr807);
					a=stmt();
					PopFollow();

					DebugLocation(204, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(204, 58);
			// SugarWalker.g:204:58: ( NEWLINE )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==NEWLINE))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:204:58: NEWLINE
					{
					DebugLocation(204, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_block_expr813); 

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }

			DebugLocation(204, 67);
			Match(input,DEDENT,Follow._DEDENT_in_block_expr816); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block_expr", 17);
			LeaveRule("block_expr", 17);
			LeaveRule_block_expr();
		}
		DebugLocation(205, 4);
		} finally { DebugExitRule(GrammarFileName, "block_expr"); }
		return value;

	}
	// $ANTLR end "block_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:208:1: expr returns [Expr value] : (alloc= alloc_expr |call= call_expr |dot= dot_expr |newExpr= new_expr |blockExpr= block_expr | 'return' a= expr | ^( '=' a= expr b= expr ) | ^( '+' a= expr b= expr ) | ^( '-' a= expr (b= expr )? ) | ^( '*' a= expr b= expr ) | ^( '/' a= expr b= expr ) | ^( '==' a= expr b= expr ) | ^( '>' a= expr b= expr ) | ^( '>=' a= expr b= expr ) | ^( '<' a= expr b= expr ) | ^( '<=' a= expr b= expr ) | ^( '!=' a= expr b= expr ) | ^( '!' a= expr ) | INT | DOUBLE | IDENT | STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 18);
		TraceIn("expr", 18);
		Expr value = default(Expr);


		CommonTree INT1 = default(CommonTree);
		CommonTree DOUBLE2 = default(CommonTree);
		CommonTree IDENT3 = default(CommonTree);
		CommonTree STRING4 = default(CommonTree);
		ExprAlloc alloc = default(ExprAlloc);
		Expr call = default(Expr);
		ExprDot dot = default(ExprDot);
		ExprNew newExpr = default(ExprNew);
		ExprBlock blockExpr = default(ExprBlock);
		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(208, 1);
		try
		{
			// SugarWalker.g:209:5: (alloc= alloc_expr |call= call_expr |dot= dot_expr |newExpr= new_expr |blockExpr= block_expr | 'return' a= expr | ^( '=' a= expr b= expr ) | ^( '+' a= expr b= expr ) | ^( '-' a= expr (b= expr )? ) | ^( '*' a= expr b= expr ) | ^( '/' a= expr b= expr ) | ^( '==' a= expr b= expr ) | ^( '>' a= expr b= expr ) | ^( '>=' a= expr b= expr ) | ^( '<' a= expr b= expr ) | ^( '<=' a= expr b= expr ) | ^( '!=' a= expr b= expr ) | ^( '!' a= expr ) | INT | DOUBLE | IDENT | STRING )
			int alt33=22;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case Expr_Alloc:
				{
				alt33 = 1;
				}
				break;
			case Expr_Call:
			case Expr_Dict:
				{
				alt33 = 2;
				}
				break;
			case Expr_Dot:
				{
				alt33 = 3;
				}
				break;
			case Expr_New:
				{
				alt33 = 4;
				}
				break;
			case INDENT:
				{
				alt33 = 5;
				}
				break;
			case 51:
				{
				alt33 = 6;
				}
				break;
			case 40:
				{
				alt33 = 7;
				}
				break;
			case 31:
				{
				alt33 = 8;
				}
				break;
			case 34:
				{
				alt33 = 9;
				}
				break;
			case 30:
				{
				alt33 = 10;
				}
				break;
			case 36:
				{
				alt33 = 11;
				}
				break;
			case 41:
				{
				alt33 = 12;
				}
				break;
			case 42:
				{
				alt33 = 13;
				}
				break;
			case 43:
				{
				alt33 = 14;
				}
				break;
			case 38:
				{
				alt33 = 15;
				}
				break;
			case 39:
				{
				alt33 = 16;
				}
				break;
			case 28:
				{
				alt33 = 17;
				}
				break;
			case 27:
				{
				alt33 = 18;
				}
				break;
			case INT:
				{
				alt33 = 19;
				}
				break;
			case DOUBLE:
				{
				alt33 = 20;
				}
				break;
			case IDENT:
				{
				alt33 = 21;
				}
				break;
			case STRING:
				{
				alt33 = 22;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:209:7: alloc= alloc_expr
				{
				DebugLocation(209, 12);
				PushFollow(Follow._alloc_expr_in_expr841);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(210, 2);

						value = alloc;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:213:4: call= call_expr
				{
				DebugLocation(213, 8);
				PushFollow(Follow._call_expr_in_expr851);
				call=call_expr();
				PopFollow();

				DebugLocation(214, 2);

						value = call;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:217:4: dot= dot_expr
				{
				DebugLocation(217, 7);
				PushFollow(Follow._dot_expr_in_expr861);
				dot=dot_expr();
				PopFollow();

				DebugLocation(218, 2);

						value = dot;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:221:4: newExpr= new_expr
				{
				DebugLocation(221, 11);
				PushFollow(Follow._new_expr_in_expr871);
				newExpr=new_expr();
				PopFollow();

				DebugLocation(222, 2);

						value = newExpr;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:225:4: blockExpr= block_expr
				{
				DebugLocation(225, 13);
				PushFollow(Follow._block_expr_in_expr881);
				blockExpr=block_expr();
				PopFollow();

				DebugLocation(226, 2);

						value = blockExpr;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:229:4: 'return' a= expr
				{
				DebugLocation(229, 4);
				Match(input,51,Follow._51_in_expr889); 
				DebugLocation(229, 14);
				PushFollow(Follow._expr_in_expr893);
				a=expr();
				PopFollow();

				DebugLocation(230, 2);

						value = new ExprReturn(a);
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:233:4: ^( '=' a= expr b= expr )
				{
				DebugLocation(233, 4);
				DebugLocation(233, 6);
				Match(input,40,Follow._40_in_expr902); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(233, 11);
				PushFollow(Follow._expr_in_expr906);
				a=expr();
				PopFollow();

				DebugLocation(233, 18);
				PushFollow(Follow._expr_in_expr910);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(234, 2);

						value = new ExprAssign(a, b);
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:237:4: ^( '+' a= expr b= expr )
				{
				DebugLocation(237, 4);
				DebugLocation(237, 6);
				Match(input,31,Follow._31_in_expr920); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(237, 11);
				PushFollow(Follow._expr_in_expr924);
				a=expr();
				PopFollow();

				DebugLocation(237, 18);
				PushFollow(Follow._expr_in_expr928);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(238, 2);

						value = new ExprBin("+", a, b);
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:241:4: ^( '-' a= expr (b= expr )? )
				{
				DebugLocation(241, 4);
				DebugLocation(241, 6);
				Match(input,34,Follow._34_in_expr938); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(241, 11);
				PushFollow(Follow._expr_in_expr942);
				a=expr();
				PopFollow();

				DebugLocation(241, 17);
				// SugarWalker.g:241:17: (b= expr )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==Expr_Alloc||(LA32_0>=Expr_Call && LA32_0<=Expr_New)||(LA32_0>=IDENT && LA32_0<=INT)||LA32_0==STRING||(LA32_0>=27 && LA32_0<=28)||(LA32_0>=30 && LA32_0<=31)||LA32_0==34||LA32_0==36||(LA32_0>=38 && LA32_0<=43)||LA32_0==51||LA32_0==DOUBLE))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:241:18: b= expr
					{
					DebugLocation(241, 19);
					PushFollow(Follow._expr_in_expr947);
					b=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(32); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(242, 2);

						if (b != null)
						{
							value = new ExprBin("-", a, b);
						}
						else
						{
							value = new ExprPrefix("-", a);
						}
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:252:4: ^( '*' a= expr b= expr )
				{
				DebugLocation(252, 4);
				DebugLocation(252, 6);
				Match(input,30,Follow._30_in_expr959); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(252, 11);
				PushFollow(Follow._expr_in_expr963);
				a=expr();
				PopFollow();

				DebugLocation(252, 18);
				PushFollow(Follow._expr_in_expr967);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(253, 2);

						value = new ExprBin("*", a, b);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:256:4: ^( '/' a= expr b= expr )
				{
				DebugLocation(256, 4);
				DebugLocation(256, 6);
				Match(input,36,Follow._36_in_expr977); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(256, 11);
				PushFollow(Follow._expr_in_expr981);
				a=expr();
				PopFollow();

				DebugLocation(256, 18);
				PushFollow(Follow._expr_in_expr985);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(257, 2);

						value = new ExprBin("/", a, b);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:260:4: ^( '==' a= expr b= expr )
				{
				DebugLocation(260, 4);
				DebugLocation(260, 6);
				Match(input,41,Follow._41_in_expr995); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(260, 12);
				PushFollow(Follow._expr_in_expr999);
				a=expr();
				PopFollow();

				DebugLocation(260, 19);
				PushFollow(Follow._expr_in_expr1003);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(261, 2);

						value = new ExprBin("==", a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:264:4: ^( '>' a= expr b= expr )
				{
				DebugLocation(264, 4);
				DebugLocation(264, 6);
				Match(input,42,Follow._42_in_expr1013); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(264, 11);
				PushFollow(Follow._expr_in_expr1017);
				a=expr();
				PopFollow();

				DebugLocation(264, 18);
				PushFollow(Follow._expr_in_expr1021);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(265, 2);

						value = new ExprBin(">", a, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:268:4: ^( '>=' a= expr b= expr )
				{
				DebugLocation(268, 4);
				DebugLocation(268, 6);
				Match(input,43,Follow._43_in_expr1031); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(268, 12);
				PushFollow(Follow._expr_in_expr1035);
				a=expr();
				PopFollow();

				DebugLocation(268, 19);
				PushFollow(Follow._expr_in_expr1039);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(269, 2);

						value = new ExprBin(">=", a, b);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:272:4: ^( '<' a= expr b= expr )
				{
				DebugLocation(272, 4);
				DebugLocation(272, 6);
				Match(input,38,Follow._38_in_expr1049); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(272, 11);
				PushFollow(Follow._expr_in_expr1053);
				a=expr();
				PopFollow();

				DebugLocation(272, 18);
				PushFollow(Follow._expr_in_expr1057);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(273, 2);

						value = new ExprBin("<", a, b);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:276:4: ^( '<=' a= expr b= expr )
				{
				DebugLocation(276, 4);
				DebugLocation(276, 6);
				Match(input,39,Follow._39_in_expr1067); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(276, 12);
				PushFollow(Follow._expr_in_expr1071);
				a=expr();
				PopFollow();

				DebugLocation(276, 19);
				PushFollow(Follow._expr_in_expr1075);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(277, 2);

						value = new ExprBin("<=", a, b);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:280:4: ^( '!=' a= expr b= expr )
				{
				DebugLocation(280, 4);
				DebugLocation(280, 6);
				Match(input,28,Follow._28_in_expr1085); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(280, 12);
				PushFollow(Follow._expr_in_expr1089);
				a=expr();
				PopFollow();

				DebugLocation(280, 19);
				PushFollow(Follow._expr_in_expr1093);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(281, 2);

						value = new ExprBin("!=", a, b);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:284:4: ^( '!' a= expr )
				{
				DebugLocation(284, 4);
				DebugLocation(284, 6);
				Match(input,27,Follow._27_in_expr1103); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(284, 11);
				PushFollow(Follow._expr_in_expr1107);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(285, 2);

						value = new ExprPrefix("!", a);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:288:4: INT
				{
				DebugLocation(288, 4);
				INT1=(CommonTree)Match(input,INT,Follow._INT_in_expr1116); 
				DebugLocation(289, 5);

				        value = new ExprConst(INT1.Text);
				    

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:292:4: DOUBLE
				{
				DebugLocation(292, 4);
				DOUBLE2=(CommonTree)Match(input,DOUBLE,Follow._DOUBLE_in_expr1127); 
				DebugLocation(293, 2);

						value = new ExprConst(DOUBLE2.Text);
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:296:4: IDENT
				{
				DebugLocation(296, 4);
				IDENT3=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr1135); 
				DebugLocation(297, 2);

						value = new ExprConst(IDENT3.Text);
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:300:4: STRING
				{
				DebugLocation(300, 4);
				STRING4=(CommonTree)Match(input,STRING,Follow._STRING_in_expr1143); 
				DebugLocation(301, 2);

						value = new ExprConst(STRING4.Text);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 18);
			LeaveRule("expr", 18);
			LeaveRule_expr();
		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA5 dfa5;
	private DFA18 dfa18;
	private DFA22 dfa22;
	private DFA30 dfa30;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this );
		dfa18 = new DFA18( this );
		dfa22 = new DFA22( this );
		dfa30 = new DFA30( this );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x4\xFFFF";
		private const string DFA5_eofS =
			"\x4\xFFFF";
		private const string DFA5_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA5_maxS =
			"\x1\x13\x1\x17\x2\xFFFF";
		private const string DFA5_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA5_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x2\xD\xFFFF\x1\x1",
				"\x1\x2\xD\xFFFF\x1\x1\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "()+ loopback of 42:12: ( ( NEWLINE )+ b= STRING )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA18 : DFA
	{
		private const string DFA18_eotS =
			"\x4\xFFFF";
		private const string DFA18_eofS =
			"\x4\xFFFF";
		private const string DFA18_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA18_maxS =
			"\x1\x13\x1\x37\x2\xFFFF";
		private const string DFA18_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA18_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA18_transitionS =
			{
				"\x1\x2\xD\xFFFF\x1\x1",
				"\x1\x2\x1\xFFFF\x1\x3\x2\xFFFF\x4\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x1"+
				"\x3\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x6\x3\x3\xFFFF\x2\x3\x2\xFFFF\x1\x3\x2\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA18_eot = DFA.UnpackEncodedString(DFA18_eotS);
		private static readonly short[] DFA18_eof = DFA.UnpackEncodedString(DFA18_eofS);
		private static readonly char[] DFA18_min = DFA.UnpackEncodedStringToUnsignedChars(DFA18_minS);
		private static readonly char[] DFA18_max = DFA.UnpackEncodedStringToUnsignedChars(DFA18_maxS);
		private static readonly short[] DFA18_accept = DFA.UnpackEncodedString(DFA18_acceptS);
		private static readonly short[] DFA18_special = DFA.UnpackEncodedString(DFA18_specialS);
		private static readonly short[][] DFA18_transition;

		static DFA18()
		{
			int numStates = DFA18_transitionS.Length;
			DFA18_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA18_transition[i] = DFA.UnpackEncodedString(DFA18_transitionS[i]);
			}
		}

		public DFA18( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 18;
			this.eot = DFA18_eot;
			this.eof = DFA18_eof;
			this.min = DFA18_min;
			this.max = DFA18_max;
			this.accept = DFA18_accept;
			this.special = DFA18_special;
			this.transition = DFA18_transition;
		}

		public override string Description { get { return "()* loopback of 91:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x4\xFFFF";
		private const string DFA22_eofS =
			"\x4\xFFFF";
		private const string DFA22_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA22_maxS =
			"\x1\x2E\x1\x37\x2\xFFFF";
		private const string DFA22_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA22_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x1\x3\xD\xFFFF\x1\x1\x1A\xFFFF\x1\x2",
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x4\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x1"+
				"\x3\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x6\x3\x2\xFFFF\x1\x2\x2\x3\x2\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "102:29: ( ( NEWLINE )* 'else' c= stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA30 : DFA
	{
		private const string DFA30_eotS =
			"\x4\xFFFF";
		private const string DFA30_eofS =
			"\x4\xFFFF";
		private const string DFA30_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA30_maxS =
			"\x1\x13\x1\x37\x2\xFFFF";
		private const string DFA30_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA30_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA30_transitionS =
			{
				"\x1\x2\xD\xFFFF\x1\x1",
				"\x1\x2\x1\xFFFF\x1\x3\x2\xFFFF\x4\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x1"+
				"\x3\xFFFF\x1\x3\x3\xFFFF\x2\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x6\x3\x3\xFFFF\x2\x3\x2\xFFFF\x1\x3\x2\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA30_eot = DFA.UnpackEncodedString(DFA30_eotS);
		private static readonly short[] DFA30_eof = DFA.UnpackEncodedString(DFA30_eofS);
		private static readonly char[] DFA30_min = DFA.UnpackEncodedStringToUnsignedChars(DFA30_minS);
		private static readonly char[] DFA30_max = DFA.UnpackEncodedStringToUnsignedChars(DFA30_maxS);
		private static readonly short[] DFA30_accept = DFA.UnpackEncodedString(DFA30_acceptS);
		private static readonly short[] DFA30_special = DFA.UnpackEncodedString(DFA30_specialS);
		private static readonly short[][] DFA30_transition;

		static DFA30()
		{
			int numStates = DFA30_transitionS.Length;
			DFA30_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA30_transition[i] = DFA.UnpackEncodedString(DFA30_transitionS[i]);
			}
		}

		public DFA30( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}

		public override string Description { get { return "()* loopback of 204:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root87 = new BitSet(new ulong[]{0x12000000008002UL});
		public static readonly BitSet _func_def_in_node111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _imports_in_node122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_in_node133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_imports155 = new BitSet(new ulong[]{0x890002UL});
		public static readonly BitSet _STRING_in_imports162 = new BitSet(new ulong[]{0x90002UL});
		public static readonly BitSet _INDENT_in_imports172 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NEWLINE_in_imports175 = new BitSet(new ulong[]{0x880000UL});
		public static readonly BitSet _STRING_in_imports182 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _NEWLINE_in_imports188 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _DEDENT_in_imports191 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _NEWLINE_in_imports195 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _52_in_struct216 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_struct220 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _INDENT_in_struct225 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NEWLINE_in_struct228 = new BitSet(new ulong[]{0xC98FD4D88BBC80UL});
		public static readonly BitSet _stmt_in_struct233 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _DEDENT_in_struct240 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _NEWLINE_in_struct243 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _IDENT_in_type_name266 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _Expr_Dict_in_type_name271 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_type_name273 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _type_name_in_func_def299 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_func_def303 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_func_def305 = new BitSet(new ulong[]{0x880FD4F883BC80UL});
		public static readonly BitSet _expr_in_func_def310 = new BitSet(new ulong[]{0x220000000UL});
		public static readonly BitSet _33_in_func_def315 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_func_def319 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_func_def323 = new BitSet(new ulong[]{0x220000000UL});
		public static readonly BitSet _29_in_func_def329 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _stmt_block_in_func_def336 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _40_in_func_def344 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_func_def348 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _NEWLINE_in_func_def355 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _INDENT_in_stmt_block376 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block379 = new BitSet(new ulong[]{0xC98FD4D88BBC80UL});
		public static readonly BitSet _stmt_in_stmt_block384 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block390 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _DEDENT_in_stmt_block393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_stmt_if459 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_stmt_if463 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _stmt_block_in_stmt_if467 = new BitSet(new ulong[]{0x400000080002UL});
		public static readonly BitSet _NEWLINE_in_stmt_if470 = new BitSet(new ulong[]{0x400000080000UL});
		public static readonly BitSet _46_in_stmt_if473 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _stmt_block_in_stmt_if477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_stmt_while497 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_stmt_while501 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _stmt_block_in_stmt_while505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_stmt_for528 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_stmt_for530 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_stmt_for534 = new BitSet(new ulong[]{0x20002000000000UL});
		public static readonly BitSet _37_in_stmt_for541 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_stmt_for545 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_stmt_for547 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_stmt_for551 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _53_in_stmt_for564 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_stmt_for568 = new BitSet(new ulong[]{0x200020000000UL});
		public static readonly BitSet _45_in_stmt_for579 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_stmt_for583 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_stmt_for597 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _stmt_block_in_stmt_for601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Alloc_in_alloc_expr622 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr626 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_alloc_expr630 = new BitSet(new ulong[]{0x880FD4D883BC88UL});
		public static readonly BitSet _expr_in_alloc_expr635 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_args_list663 = new BitSet(new ulong[]{0x880FD4D883BC82UL});
		public static readonly BitSet _Expr_Call_in_call_expr683 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr687 = new BitSet(new ulong[]{0x880FD4D883BC88UL});
		public static readonly BitSet _args_list_in_call_expr691 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_call_expr701 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr705 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_call_expr709 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dot_in_dot_expr730 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dot_expr734 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_dot_expr738 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_in_new_expr763 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_new_expr767 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_new_expr774 = new BitSet(new ulong[]{0x880FD4D883BC88UL});
		public static readonly BitSet _INDENT_in_block_expr799 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _NEWLINE_in_block_expr802 = new BitSet(new ulong[]{0xC98FD4D88BBC80UL});
		public static readonly BitSet _stmt_in_block_expr807 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _NEWLINE_in_block_expr813 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _DEDENT_in_block_expr816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dot_expr_in_expr861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_expr_in_expr881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_expr889 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_expr902 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr906 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr910 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _31_in_expr920 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr924 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr928 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _34_in_expr938 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr942 = new BitSet(new ulong[]{0x880FD4D883BC88UL});
		public static readonly BitSet _expr_in_expr947 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _30_in_expr959 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr963 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr967 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _36_in_expr977 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr981 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr985 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _41_in_expr995 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr999 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr1003 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _42_in_expr1013 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1017 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr1021 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _43_in_expr1031 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1035 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr1039 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _38_in_expr1049 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1053 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr1057 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _39_in_expr1067 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1071 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr1075 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _28_in_expr1085 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1089 = new BitSet(new ulong[]{0x880FD4D883BC80UL});
		public static readonly BitSet _expr_in_expr1093 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _27_in_expr1103 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1107 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INT_in_expr1116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_expr1127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_expr1135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr1143 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
