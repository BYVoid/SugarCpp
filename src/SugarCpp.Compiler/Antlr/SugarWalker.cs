//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-02 13:23:03

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'in'", "'namespace'", "'new'", "'return'", "'try'", "'typedef'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc=12;
	public const int Expr_Bin=13;
	public const int Expr_Bracket=14;
	public const int Expr_Call=15;
	public const int Expr_Call_With=16;
	public const int Expr_Cond=17;
	public const int Expr_Dict=18;
	public const int Expr_Infix=19;
	public const int Expr_Lambda=20;
	public const int Expr_New_Array=21;
	public const int Expr_New_Type=22;
	public const int Expr_Prefix=23;
	public const int Expr_Return=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int IDENT=29;
	public const int INDENT=30;
	public const int Ident_List=31;
	public const int Import=32;
	public const int Left_Bracket=33;
	public const int LineComment=34;
	public const int Match_Tuple=35;
	public const int NEWLINE=36;
	public const int NUMBER=37;
	public const int Namespace=38;
	public const int Right_Bracket=39;
	public const int Root=40;
	public const int SP=41;
	public const int STRING=42;
	public const int Stmt_Block=43;
	public const int Stmt_For=44;
	public const int Stmt_ForEach=45;
	public const int Stmt_If=46;
	public const int Stmt_Try=47;
	public const int Stmt_Typedef=48;
	public const int Stmt_Using=49;
	public const int Stmt_While=50;
	public const int Type_IDENT=51;
	public const int Type_Ref=52;
	public const int Type_Tuple=53;
	public const int DOUBLE=117;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : a= overall_block ( NEWLINE )* ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		List<AstNode> a = default(List<AstNode>);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:24:2: (a= overall_block ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarWalker.g:24:4: a= overall_block ( NEWLINE )*
			{
			DebugLocation(24, 5);
			PushFollow(Follow._overall_block_in_root77);
			a=overall_block();
			PopFollow();

			DebugLocation(24, 20);
			// SugarWalker.g:24:20: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:24:20: NEWLINE
					{
					DebugLocation(24, 20);
					Match(input,NEWLINE,Follow._NEWLINE_in_root79); 

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(25, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_overall_block();
	partial void LeaveRule_overall_block();

	// $ANTLR start "overall_block"
	// SugarWalker.g:30:1: overall_block returns [List<AstNode> value] : ( ( NEWLINE )* a= node )+ ;
	[GrammarRule("overall_block")]
	private List<AstNode> overall_block()
	{
		EnterRule_overall_block();
		EnterRule("overall_block", 2);
		TraceIn("overall_block", 2);
		List<AstNode> value = default(List<AstNode>);


		AstNode a = default(AstNode);


			value = new List<AstNode>();

		try { DebugEnterRule(GrammarFileName, "overall_block");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:35:2: ( ( ( NEWLINE )* a= node )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:35:4: ( ( NEWLINE )* a= node )+
			{
			DebugLocation(35, 4);
			// SugarWalker.g:35:4: ( ( NEWLINE )* a= node )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:35:5: ( NEWLINE )* a= node
					{
					DebugLocation(35, 5);
					// SugarWalker.g:35:5: ( NEWLINE )*
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch ( alt2 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:35:5: NEWLINE
							{
							DebugLocation(35, 5);
							Match(input,NEWLINE,Follow._NEWLINE_in_overall_block104); 

							}
							break;

						default:
							goto loop2;
						}
					}

					loop2:
						;

					} finally { DebugExitSubRule(2); }

					DebugLocation(35, 15);
					PushFollow(Follow._node_in_overall_block109);
					a=node();
					PopFollow();

					DebugLocation(35, 21);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("overall_block", 2);
			LeaveRule("overall_block", 2);
			LeaveRule_overall_block();
		}
		DebugLocation(36, 1);
		} finally { DebugExitRule(GrammarFileName, "overall_block"); }
		return value;

	}
	// $ANTLR end "overall_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:38:1: node returns [AstNode value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= stmt_alloc |f= namespace_def |g= stmt_using |h= stmt_typedef );
	[GrammarRule("node")]
	private AstNode node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstNode value = default(AstNode);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		Stmt e = default(Stmt);
		Namespace f = default(Namespace);
		StmtUsing g = default(StmtUsing);
		Stmt h = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(38, 1);
		try
		{
			// SugarWalker.g:39:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= stmt_alloc |f= namespace_def |g= stmt_using |h= stmt_typedef )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case Type_IDENT:
				{
				alt4 = 1;
				}
				break;
			case Import:
				{
				alt4 = 2;
				}
				break;
			case Enum:
				{
				alt4 = 3;
				}
				break;
			case Class:
				{
				alt4 = 4;
				}
				break;
			case Expr_Alloc:
				{
				alt4 = 5;
				}
				break;
			case Namespace:
				{
				alt4 = 6;
				}
				break;
			case Stmt_Using:
				{
				alt4 = 7;
				}
				break;
			case Stmt_Typedef:
				{
				alt4 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:39:4: a= func_def
				{
				DebugLocation(39, 6);
				PushFollow(Follow._func_def_in_node133);
				a=func_def();
				PopFollow();

				DebugLocation(39, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:40:4: b= import_def
				{
				DebugLocation(40, 6);
				PushFollow(Follow._import_def_in_node144);
				b=import_def();
				PopFollow();

				DebugLocation(40, 19);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:41:4: c= enum_def
				{
				DebugLocation(41, 6);
				PushFollow(Follow._enum_def_in_node155);
				c=enum_def();
				PopFollow();

				DebugLocation(41, 17);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:42:4: d= class_def
				{
				DebugLocation(42, 6);
				PushFollow(Follow._class_def_in_node166);
				d=class_def();
				PopFollow();

				DebugLocation(42, 18);
				 value = d; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:43:4: e= stmt_alloc
				{
				DebugLocation(43, 6);
				PushFollow(Follow._stmt_alloc_in_node177);
				e=stmt_alloc();
				PopFollow();

				DebugLocation(43, 19);
				 value = new StmtExpr(e); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:44:4: f= namespace_def
				{
				DebugLocation(44, 6);
				PushFollow(Follow._namespace_def_in_node188);
				f=namespace_def();
				PopFollow();

				DebugLocation(44, 22);
				 value = f; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:45:4: g= stmt_using
				{
				DebugLocation(45, 6);
				PushFollow(Follow._stmt_using_in_node199);
				g=stmt_using();
				PopFollow();

				DebugLocation(45, 19);
				 value = new StmtExpr(g); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:46:4: h= stmt_typedef
				{
				DebugLocation(46, 6);
				PushFollow(Follow._stmt_typedef_in_node210);
				h=stmt_typedef();
				PopFollow();

				DebugLocation(46, 21);
				 value = new StmtExpr(h); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:49:1: namespace_def returns [Namespace value] : ^( Namespace a= ident b= overall_block ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 4);
		TraceIn("namespace_def", 4);
		Namespace value = default(Namespace);


		string a = default(string);
		List<AstNode> b = default(List<AstNode>);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(49, 1);
		try
		{
			// SugarWalker.g:50:2: ( ^( Namespace a= ident b= overall_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:50:4: ^( Namespace a= ident b= overall_block )
			{
			DebugLocation(50, 4);
			DebugLocation(50, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def228); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(50, 17);
			PushFollow(Follow._ident_in_namespace_def232);
			a=ident();
			PopFollow();

			DebugLocation(50, 25);
			PushFollow(Follow._overall_block_in_namespace_def236);
			b=overall_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(51, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 4);
			LeaveRule("namespace_def", 4);
			LeaveRule_namespace_def();
		}
		DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:56:1: import_def returns [Import value] : ^( Import (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 5);
		TraceIn("import_def", 5);
		Import value = default(Import);


		CommonTree a = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(56, 1);
		try
		{
			// SugarWalker.g:61:2: ( ^( Import (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:61:4: ^( Import (a= STRING )* )
			{
			DebugLocation(61, 4);
			DebugLocation(61, 6);
			Match(input,Import,Follow._Import_in_import_def261); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(61, 13);
				// SugarWalker.g:61:13: (a= STRING )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0==STRING))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:61:14: a= STRING
						{
						DebugLocation(61, 15);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def266); 
						DebugLocation(61, 23);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 5);
			LeaveRule("import_def", 5);
			LeaveRule_import_def();
		}
		DebugLocation(62, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:64:1: enum_def returns [Enum value] : ^( Enum a= ident (a= ident )* ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 6);
		TraceIn("enum_def", 6);
		Enum value = default(Enum);


		string a = default(string);


			value = new Enum();

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(64, 1);
		try
		{
			// SugarWalker.g:69:2: ( ^( Enum a= ident (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:69:4: ^( Enum a= ident (a= ident )* )
			{
			DebugLocation(69, 4);
			DebugLocation(69, 6);
			Match(input,Enum,Follow._Enum_in_enum_def292); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(69, 12);
			PushFollow(Follow._ident_in_enum_def296);
			a=ident();
			PopFollow();

			DebugLocation(69, 19);
			 value.Name=a; 
			DebugLocation(69, 38);
			// SugarWalker.g:69:38: (a= ident )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==IDENT))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:69:39: a= ident
					{
					DebugLocation(69, 40);
					PushFollow(Follow._ident_in_enum_def303);
					a=ident();
					PopFollow();

					DebugLocation(69, 47);
					 value.Values.Add(a); 

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 6);
			LeaveRule("enum_def", 6);
			LeaveRule_enum_def();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:72:1: class_def returns [Class value] : ^( Class (attr= attribute )? a= ident b= class_block ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 7);
		TraceIn("class_def", 7);
		Class value = default(Class);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<ClassMember> b = default(List<ClassMember>);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(72, 1);
		try
		{
			// SugarWalker.g:73:2: ( ^( Class (attr= attribute )? a= ident b= class_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:73:4: ^( Class (attr= attribute )? a= ident b= class_block )
			{
			DebugLocation(73, 4);
			DebugLocation(73, 6);
			Match(input,Class,Follow._Class_in_class_def324); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(73, 12);
			// SugarWalker.g:73:12: (attr= attribute )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==Attribute))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:73:13: attr= attribute
				{
				DebugLocation(73, 17);
				PushFollow(Follow._attribute_in_class_def329);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(73, 31);
			PushFollow(Follow._ident_in_class_def335);
			a=ident();
			PopFollow();

			DebugLocation(73, 39);
			PushFollow(Follow._class_block_in_class_def339);
			b=class_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(74, 2);

					value = new Class(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 7);
			LeaveRule("class_def", 7);
			LeaveRule_class_def();
		}
		DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_class_block();
	partial void LeaveRule_class_block();

	// $ANTLR start "class_block"
	// SugarWalker.g:79:1: class_block returns [List<ClassMember> value] : ( ( NEWLINE )* a= class_node )+ ;
	[GrammarRule("class_block")]
	private List<ClassMember> class_block()
	{
		EnterRule_class_block();
		EnterRule("class_block", 8);
		TraceIn("class_block", 8);
		List<ClassMember> value = default(List<ClassMember>);


		ClassMember a = default(ClassMember);


			value = new List<ClassMember>();

		try { DebugEnterRule(GrammarFileName, "class_block");
		DebugLocation(79, 1);
		try
		{
			// SugarWalker.g:84:2: ( ( ( NEWLINE )* a= class_node )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:84:4: ( ( NEWLINE )* a= class_node )+
			{
			DebugLocation(84, 4);
			// SugarWalker.g:84:4: ( ( NEWLINE )* a= class_node )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==Attribute||LA9_0==Class||LA9_0==Enum||LA9_0==Expr_Alloc||LA9_0==Import||LA9_0==NEWLINE||LA9_0==Namespace||(LA9_0>=Stmt_Typedef && LA9_0<=Stmt_Using)||LA9_0==Type_IDENT))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:84:5: ( NEWLINE )* a= class_node
					{
					DebugLocation(84, 5);
					// SugarWalker.g:84:5: ( NEWLINE )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==NEWLINE))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:84:5: NEWLINE
							{
							DebugLocation(84, 5);
							Match(input,NEWLINE,Follow._NEWLINE_in_class_block364); 

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(84, 15);
					PushFollow(Follow._class_node_in_class_block369);
					a=class_node();
					PopFollow();

					DebugLocation(84, 27);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_block", 8);
			LeaveRule("class_block", 8);
			LeaveRule_class_block();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "class_block"); }
		return value;

	}
	// $ANTLR end "class_block"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:87:1: attribute_args returns [string value] : (a= ( NUMBER ) |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 9);
		TraceIn("attribute_args", 9);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(87, 1);
		try
		{
			// SugarWalker.g:88:2: (a= ( NUMBER ) |a= STRING |b= ident )
			int alt10=3;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt10 = 1;
				}
				break;
			case STRING:
				{
				alt10 = 2;
				}
				break;
			case IDENT:
				{
				alt10 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:88:4: a= ( NUMBER )
				{
				DebugLocation(88, 5);
				// SugarWalker.g:88:6: ( NUMBER )
				DebugEnterAlt(1);
				// SugarWalker.g:88:7: NUMBER
				{
				DebugLocation(88, 7);
				Match(input,NUMBER,Follow._NUMBER_in_attribute_args392); 

				}

				DebugLocation(89, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:92:4: a= STRING
				{
				DebugLocation(92, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args403); 
				DebugLocation(93, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:96:4: b= ident
				{
				DebugLocation(96, 5);
				PushFollow(Follow._ident_in_attribute_args413);
				b=ident();
				PopFollow();

				DebugLocation(97, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 9);
			LeaveRule("attribute_args", 9);
			LeaveRule_attribute_args();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:102:1: attribute_item returns [Attr value] : ^( Attribute a= ident (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 10);
		TraceIn("attribute_item", 10);
		Attr value = default(Attr);


		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(102, 1);
		try
		{
			// SugarWalker.g:107:2: ( ^( Attribute a= ident (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:107:4: ^( Attribute a= ident (b= attribute_args )* )
			{
			DebugLocation(107, 4);
			DebugLocation(107, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item437); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(107, 17);
			PushFollow(Follow._ident_in_attribute_item441);
			a=ident();
			PopFollow();

			DebugLocation(107, 24);
			 value.Name = a; 
			DebugLocation(107, 45);
			// SugarWalker.g:107:45: (b= attribute_args )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==IDENT||LA11_0==NUMBER||LA11_0==STRING))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:107:46: b= attribute_args
					{
					DebugLocation(107, 47);
					PushFollow(Follow._attribute_args_in_attribute_item448);
					b=attribute_args();
					PopFollow();

					DebugLocation(107, 63);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 10);
			LeaveRule("attribute_item", 10);
			LeaveRule_attribute_item();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:110:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 11);
		TraceIn("attribute", 11);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(110, 1);
		try
		{
			// SugarWalker.g:115:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:115:4: (a= attribute_item )+
			{
			DebugLocation(115, 4);
			// SugarWalker.g:115:4: (a= attribute_item )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==Attribute))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:115:5: a= attribute_item
					{
					DebugLocation(115, 6);
					PushFollow(Follow._attribute_item_in_attribute476);
					a=attribute_item();
					PopFollow();

					DebugLocation(115, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 11);
			LeaveRule("attribute", 11);
			LeaveRule_attribute();
		}
		DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_class_node();
	partial void LeaveRule_class_node();

	// $ANTLR start "class_node"
	// SugarWalker.g:118:1: class_node returns [ClassMember value] : (a= attribute )? b= node ;
	[GrammarRule("class_node")]
	private ClassMember class_node()
	{
		EnterRule_class_node();
		EnterRule("class_node", 12);
		TraceIn("class_node", 12);
		ClassMember value = default(ClassMember);


		List<Attr> a = default(List<Attr>);
		AstNode b = default(AstNode);

		try { DebugEnterRule(GrammarFileName, "class_node");
		DebugLocation(118, 1);
		try
		{
			// SugarWalker.g:119:2: ( (a= attribute )? b= node )
			DebugEnterAlt(1);
			// SugarWalker.g:119:4: (a= attribute )? b= node
			{
			DebugLocation(119, 4);
			// SugarWalker.g:119:4: (a= attribute )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==Attribute))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:119:5: a= attribute
				{
				DebugLocation(119, 6);
				PushFollow(Follow._attribute_in_class_node499);
				a=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(119, 20);
			PushFollow(Follow._node_in_class_node505);
			b=node();
			PopFollow();

			DebugLocation(120, 2);

					value = new ClassMember(b, a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_node", 12);
			LeaveRule("class_node", 12);
			LeaveRule_class_node();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "class_node"); }
		return value;

	}
	// $ANTLR end "class_node"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:125:1: type_name returns [string value] : ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 13);
		TraceIn("type_name", 13);
		string value = default(string);


		string a = default(string);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(125, 1);
		try
		{
			// SugarWalker.g:130:2: ( ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:130:4: ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* )
			{
			DebugLocation(130, 4);
			DebugLocation(130, 7);
			Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name530); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(130, 19);
			PushFollow(Follow._ident_in_type_name534);
			a=ident();
			PopFollow();

			DebugLocation(130, 26);
			 value+=a; 
			DebugLocation(131, 5);
			// SugarWalker.g:131:5: ( '<' (b= type_name )* '>' )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==82))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:131:7: '<' (b= type_name )* '>'
				{
				DebugLocation(131, 7);
				Match(input,82,Follow._82_in_type_name544); 
				DebugLocation(131, 11);
				 value+="<"; bool isFirst = true; 
				DebugLocation(132, 6);
				// SugarWalker.g:132:6: (b= type_name )*
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_0 = input.LA(1);

					if ((LA14_0==Type_IDENT))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch ( alt14 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:132:7: b= type_name
						{
						DebugLocation(132, 8);
						PushFollow(Follow._type_name_in_type_name556);
						b=type_name();
						PopFollow();

						DebugLocation(133, 3);

									if (!isFirst) value+=", ";
									isFirst = false;
									value+=b;
								

						}
						break;

					default:
						goto loop14;
					}
				}

				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(138, 3);
				Match(input,89,Follow._89_in_type_name566); 
				DebugLocation(138, 7);
				 value+=">"; 

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(139, 4);
			// SugarWalker.g:139:4: ( '*' | '[' ']' | '&' )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=4;
				try { DebugEnterDecision(16, false);
				switch (input.LA(1))
				{
				case 63:
					{
					alt16 = 1;
					}
					break;
				case 93:
					{
					alt16 = 2;
					}
					break;
				case 59:
					{
					alt16 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:139:6: '*'
					{
					DebugLocation(139, 6);
					Match(input,63,Follow._63_in_type_name577); 
					DebugLocation(139, 10);
					 value+="*"; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarWalker.g:140:6: '[' ']'
					{
					DebugLocation(140, 6);
					Match(input,93,Follow._93_in_type_name586); 
					DebugLocation(140, 10);
					Match(input,94,Follow._94_in_type_name588); 
					DebugLocation(140, 14);
					 value+="[]"; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarWalker.g:141:6: '&'
					{
					DebugLocation(141, 6);
					Match(input,59,Follow._59_in_type_name597); 
					DebugLocation(141, 10);
					 value+="&"; 

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 13);
			LeaveRule("type_name", 13);
			LeaveRule_type_name();
		}
		DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:145:1: func_args returns [List<Stmt> value] : ^( Func_Args (a= stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private List<Stmt> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 14);
		TraceIn("func_args", 14);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(145, 1);
		try
		{
			// SugarWalker.g:150:2: ( ^( Func_Args (a= stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:150:4: ^( Func_Args (a= stmt_alloc )* )
			{
			DebugLocation(150, 4);
			DebugLocation(150, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args627); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(150, 16);
				// SugarWalker.g:150:16: (a= stmt_alloc )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==Expr_Alloc))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:150:17: a= stmt_alloc
						{
						DebugLocation(150, 18);
						PushFollow(Follow._stmt_alloc_in_func_args632);
						a=stmt_alloc();
						PopFollow();

						DebugLocation(150, 30);
						 value.Add(a); 

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 14);
			LeaveRule("func_args", 14);
			LeaveRule_func_args();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:153:1: func_def returns [FuncDef value] : a= type_name b= ident ( '<' x= ident '>' )? '(' (args= func_args )? ')' (e= stmt_block | '=' f= expr ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 15);
		TraceIn("func_def", 15);
		FuncDef value = default(FuncDef);


		string a = default(string);
		string b = default(string);
		string x = default(string);
		List<Stmt> args = default(List<Stmt>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(153, 1);
		try
		{
			// SugarWalker.g:158:2: (a= type_name b= ident ( '<' x= ident '>' )? '(' (args= func_args )? ')' (e= stmt_block | '=' f= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:158:4: a= type_name b= ident ( '<' x= ident '>' )? '(' (args= func_args )? ')' (e= stmt_block | '=' f= expr )
			{
			DebugLocation(158, 5);
			PushFollow(Follow._type_name_in_func_def659);
			a=type_name();
			PopFollow();

			DebugLocation(158, 17);
			PushFollow(Follow._ident_in_func_def663);
			b=ident();
			PopFollow();

			DebugLocation(158, 24);
			// SugarWalker.g:158:24: ( '<' x= ident '>' )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==82))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:158:25: '<' x= ident '>'
				{
				DebugLocation(158, 25);
				Match(input,82,Follow._82_in_func_def666); 
				DebugLocation(158, 30);
				PushFollow(Follow._ident_in_func_def670);
				x=ident();
				PopFollow();

				DebugLocation(158, 37);
				 value.GenericParameter.Add(x); 
				DebugLocation(158, 73);
				Match(input,89,Follow._89_in_func_def674); 

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(158, 79);
			Match(input,61,Follow._61_in_func_def678); 
			DebugLocation(158, 83);
			// SugarWalker.g:158:83: (args= func_args )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==Func_Args))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:158:84: args= func_args
				{
				DebugLocation(158, 88);
				PushFollow(Follow._func_args_in_func_def683);
				args=func_args();
				PopFollow();

				DebugLocation(158, 99);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(158, 125);
			Match(input,62,Follow._62_in_func_def689); 
			DebugLocation(159, 2);
			// SugarWalker.g:159:2: (e= stmt_block | '=' f= expr )
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==Stmt_Block))
			{
				alt20 = 1;
			}
			else if ((LA20_0==86))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:159:4: e= stmt_block
				{
				DebugLocation(159, 5);
				PushFollow(Follow._stmt_block_in_func_def696);
				e=stmt_block();
				PopFollow();

				DebugLocation(160, 2);

						value.Type = a;
						value.Name = b;
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:165:4: '=' f= expr
				{
				DebugLocation(165, 4);
				Match(input,86,Follow._86_in_func_def704); 
				DebugLocation(165, 9);
				PushFollow(Follow._expr_in_func_def708);
				f=expr();
				PopFollow();

				DebugLocation(166, 2);

						value.Type = a;
						value.Name = b;
						StmtBlock block = new StmtBlock();
						if (a == "void")
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtExpr(new ExprReturn(f)));
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 15);
			LeaveRule("func_def", 15);
			LeaveRule_func_def();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:183:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 16);
		TraceIn("stmt_block", 16);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(183, 4);
		try
		{
			// SugarWalker.g:188:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:188:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(188, 4);
			DebugLocation(188, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block735); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(188, 17);
				// SugarWalker.g:188:17: (a= stmt )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if (((LA21_0>=Expr_Access && LA21_0<=Expr_Tuple)||LA21_0==IDENT||LA21_0==Match_Tuple||LA21_0==NUMBER||LA21_0==STRING||(LA21_0>=Stmt_For && LA21_0<=Stmt_While)||LA21_0==57||LA21_0==60||LA21_0==64||LA21_0==67||LA21_0==71||LA21_0==77||LA21_0==80||LA21_0==84||LA21_0==86||LA21_0==92||LA21_0==96||LA21_0==114||LA21_0==DOUBLE))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:188:18: a= stmt
						{
						DebugLocation(188, 19);
						PushFollow(Follow._stmt_in_stmt_block740);
						a=stmt();
						PopFollow();

						DebugLocation(188, 25);
						 value.StmtList.Add(a); 

						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 16);
			LeaveRule("stmt_block", 16);
			LeaveRule_stmt_block();
		}
		DebugLocation(189, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:191:1: stmt returns [Stmt value] : (a= stmt_expr |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try );
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 17);
		TraceIn("stmt", 17);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(191, 1);
		try
		{
			// SugarWalker.g:192:2: (a= stmt_expr |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try )
			int alt22=5;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Return:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 57:
			case 60:
			case 64:
			case 67:
			case 71:
			case 77:
			case 80:
			case 84:
			case 86:
			case 92:
			case 96:
			case 114:
			case DOUBLE:
				{
				alt22 = 1;
				}
				break;
			case Stmt_If:
				{
				alt22 = 2;
				}
				break;
			case Stmt_While:
				{
				alt22 = 3;
				}
				break;
			case Stmt_For:
			case Stmt_ForEach:
				{
				alt22 = 4;
				}
				break;
			case Stmt_Try:
				{
				alt22 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:192:4: a= stmt_expr
				{
				DebugLocation(192, 5);
				PushFollow(Follow._stmt_expr_in_stmt766);
				a=stmt_expr();
				PopFollow();

				DebugLocation(192, 16);
				 value = new StmtExpr(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:193:4: a= stmt_if
				{
				DebugLocation(193, 5);
				PushFollow(Follow._stmt_if_in_stmt775);
				a=stmt_if();
				PopFollow();

				DebugLocation(193, 14);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:194:4: a= stmt_while
				{
				DebugLocation(194, 5);
				PushFollow(Follow._stmt_while_in_stmt784);
				a=stmt_while();
				PopFollow();

				DebugLocation(194, 17);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:195:4: a= stmt_for
				{
				DebugLocation(195, 5);
				PushFollow(Follow._stmt_for_in_stmt793);
				a=stmt_for();
				PopFollow();

				DebugLocation(195, 15);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:196:4: a= stmt_try
				{
				DebugLocation(196, 5);
				PushFollow(Follow._stmt_try_in_stmt802);
				a=stmt_try();
				PopFollow();

				DebugLocation(196, 15);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 17);
			LeaveRule("stmt", 17);
			LeaveRule_stmt();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:199:1: stmt_expr returns [Stmt value] : (a= stmt_alloc |a= stmt_return |a= stmt_typedef |b= stmt_using |c= expr );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 18);
		TraceIn("stmt_expr", 18);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);
		StmtUsing b = default(StmtUsing);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(199, 1);
		try
		{
			// SugarWalker.g:200:2: (a= stmt_alloc |a= stmt_return |a= stmt_typedef |b= stmt_using |c= expr )
			int alt23=5;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case Expr_Alloc:
				{
				alt23 = 1;
				}
				break;
			case Expr_Return:
				{
				alt23 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt23 = 3;
				}
				break;
			case Stmt_Using:
				{
				alt23 = 4;
				}
				break;
			case Expr_Access:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 57:
			case 60:
			case 64:
			case 67:
			case 71:
			case 77:
			case 80:
			case 84:
			case 86:
			case 92:
			case 96:
			case 114:
			case DOUBLE:
				{
				alt23 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:200:4: a= stmt_alloc
				{
				DebugLocation(200, 5);
				PushFollow(Follow._stmt_alloc_in_stmt_expr821);
				a=stmt_alloc();
				PopFollow();

				DebugLocation(200, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:201:4: a= stmt_return
				{
				DebugLocation(201, 5);
				PushFollow(Follow._stmt_return_in_stmt_expr830);
				a=stmt_return();
				PopFollow();

				DebugLocation(201, 18);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:202:4: a= stmt_typedef
				{
				DebugLocation(202, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr839);
				a=stmt_typedef();
				PopFollow();

				DebugLocation(202, 19);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:203:4: b= stmt_using
				{
				DebugLocation(203, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr848);
				b=stmt_using();
				PopFollow();

				DebugLocation(203, 17);
				 value = b; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:204:4: c= expr
				{
				DebugLocation(204, 5);
				PushFollow(Follow._expr_in_stmt_expr857);
				c=expr();
				PopFollow();

				DebugLocation(204, 11);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 18);
			LeaveRule("stmt_expr", 18);
			LeaveRule_stmt_expr();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:207:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 19);
		TraceIn("stmt_using", 19);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(207, 1);
		try
		{
			// SugarWalker.g:212:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:212:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(212, 4);
			DebugLocation(212, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using880); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(212, 17);
				// SugarWalker.g:212:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=3;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==IDENT))
					{
						alt24 = 1;
					}
					else if ((LA24_0==106))
					{
						alt24 = 2;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:212:19: a= ident
						{
						DebugLocation(212, 20);
						PushFollow(Follow._ident_in_stmt_using886);
						a=ident();
						PopFollow();

						DebugLocation(212, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:213:10: b= 'namespace'
						{
						DebugLocation(213, 11);
						b=(CommonTree)Match(input,106,Follow._106_in_stmt_using901); 
						DebugLocation(213, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 19);
			LeaveRule("stmt_using", 19);
			LeaveRule_stmt_using();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:216:1: stmt_typedef returns [Stmt value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private Stmt stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 20);
		TraceIn("stmt_typedef", 20);
		Stmt value = default(Stmt);


		string a = default(string);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(216, 1);
		try
		{
			// SugarWalker.g:217:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:217:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(217, 4);
			DebugLocation(217, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef922); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(217, 20);
			PushFollow(Follow._type_name_in_stmt_typedef926);
			a=type_name();
			PopFollow();

			DebugLocation(217, 32);
			PushFollow(Follow._ident_in_stmt_typedef930);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(218, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 20);
			LeaveRule("stmt_typedef", 20);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:223:1: stmt_alloc returns [Stmt value] : a= alloc_expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 21);
		TraceIn("stmt_alloc", 21);
		Stmt value = default(Stmt);


		ExprAlloc a = default(ExprAlloc);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(223, 1);
		try
		{
			// SugarWalker.g:224:2: (a= alloc_expr )
			DebugEnterAlt(1);
			// SugarWalker.g:224:4: a= alloc_expr
			{
			DebugLocation(224, 5);
			PushFollow(Follow._alloc_expr_in_stmt_alloc951);
			a=alloc_expr();
			PopFollow();

			DebugLocation(224, 17);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 21);
			LeaveRule("stmt_alloc", 21);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:227:1: stmt_if returns [Stmt value] : ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 22);
		TraceIn("stmt_if", 22);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(227, 1);
		try
		{
			// SugarWalker.g:228:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:228:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
			{
			DebugLocation(228, 4);
			DebugLocation(228, 6);
			Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if969); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(228, 15);
			PushFollow(Follow._expr_in_stmt_if973);
			a=expr();
			PopFollow();

			DebugLocation(228, 22);
			PushFollow(Follow._stmt_block_in_stmt_if977);
			b=stmt_block();
			PopFollow();

			DebugLocation(228, 34);
			// SugarWalker.g:228:34: (c= stmt_block )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==Stmt_Block))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:228:35: c= stmt_block
				{
				DebugLocation(228, 36);
				PushFollow(Follow._stmt_block_in_stmt_if982);
				c=stmt_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(229, 2);

					value = new StmtIf(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 22);
			LeaveRule("stmt_if", 22);
			LeaveRule_stmt_if();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:234:1: stmt_while returns [Stmt value] : ^( Stmt_While a= expr b= stmt_block ) ;
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 23);
		TraceIn("stmt_while", 23);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(234, 1);
		try
		{
			// SugarWalker.g:235:2: ( ^( Stmt_While a= expr b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:235:4: ^( Stmt_While a= expr b= stmt_block )
			{
			DebugLocation(235, 4);
			DebugLocation(235, 6);
			Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1004); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(235, 18);
			PushFollow(Follow._expr_in_stmt_while1008);
			a=expr();
			PopFollow();

			DebugLocation(235, 25);
			PushFollow(Follow._stmt_block_in_stmt_while1012);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(236, 2);

					value = new StmtWhile(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 23);
			LeaveRule("stmt_while", 23);
			LeaveRule_stmt_while();
		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:241:1: stmt_for returns [Stmt value] : ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) );
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 24);
		TraceIn("stmt_for", 24);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		StmtBlock d = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(241, 1);
		try
		{
			// SugarWalker.g:242:2: ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) )
			int alt26=2;
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==Stmt_For))
			{
				alt26 = 1;
			}
			else if ((LA26_0==Stmt_ForEach))
			{
				alt26 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:242:4: ^( Stmt_For a= expr b= expr c= expr d= stmt_block )
				{
				DebugLocation(242, 4);
				DebugLocation(242, 6);
				Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1032); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(242, 16);
				PushFollow(Follow._expr_in_stmt_for1036);
				a=expr();
				PopFollow();

				DebugLocation(242, 23);
				PushFollow(Follow._expr_in_stmt_for1040);
				b=expr();
				PopFollow();

				DebugLocation(242, 30);
				PushFollow(Follow._expr_in_stmt_for1044);
				c=expr();
				PopFollow();

				DebugLocation(242, 37);
				PushFollow(Follow._stmt_block_in_stmt_for1048);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(243, 2);

						value = new StmtFor(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:246:4: ^( Stmt_ForEach a= expr b= expr d= stmt_block )
				{
				DebugLocation(246, 4);
				DebugLocation(246, 6);
				Match(input,Stmt_ForEach,Follow._Stmt_ForEach_in_stmt_for1058); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(246, 20);
				PushFollow(Follow._expr_in_stmt_for1062);
				a=expr();
				PopFollow();

				DebugLocation(246, 27);
				PushFollow(Follow._expr_in_stmt_for1066);
				b=expr();
				PopFollow();

				DebugLocation(246, 34);
				PushFollow(Follow._stmt_block_in_stmt_for1070);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(247, 2);

						value = new StmtForEach(a, b, d);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 24);
			LeaveRule("stmt_for", 24);
			LeaveRule_stmt_for();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:252:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 25);
		TraceIn("stmt_try", 25);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Expr b = default(Expr);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(252, 1);
		try
		{
			// SugarWalker.g:253:2: ( ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:253:4: ^( Stmt_Try a= stmt_block b= expr c= stmt_block )
			{
			DebugLocation(253, 4);
			DebugLocation(253, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1090); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(253, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1094);
			a=stmt_block();
			PopFollow();

			DebugLocation(253, 29);
			PushFollow(Follow._expr_in_stmt_try1098);
			b=expr();
			PopFollow();

			DebugLocation(253, 36);
			PushFollow(Follow._stmt_block_in_stmt_try1102);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(254, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 25);
			LeaveRule("stmt_try", 25);
			LeaveRule_stmt_try();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:259:1: stmt_return returns [Stmt value] : ^( Expr_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 26);
		TraceIn("stmt_return", 26);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(259, 1);
		try
		{
			// SugarWalker.g:260:2: ( ^( Expr_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:260:4: ^( Expr_Return (a= expr )? )
			{
			DebugLocation(260, 4);
			DebugLocation(260, 6);
			Match(input,Expr_Return,Follow._Expr_Return_in_stmt_return1122); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(260, 18);
				// SugarWalker.g:260:18: (a= expr )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==Expr_Access||(LA27_0>=Expr_Bin && LA27_0<=Expr_Prefix)||(LA27_0>=Expr_Suffix && LA27_0<=Expr_Tuple)||LA27_0==IDENT||LA27_0==Match_Tuple||LA27_0==NUMBER||LA27_0==STRING||LA27_0==57||LA27_0==60||LA27_0==64||LA27_0==67||LA27_0==71||LA27_0==77||LA27_0==80||LA27_0==84||LA27_0==86||LA27_0==92||LA27_0==96||LA27_0==114||LA27_0==DOUBLE))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:260:19: a= expr
					{
					DebugLocation(260, 20);
					PushFollow(Follow._expr_in_stmt_return1127);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(27); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(261, 2);

					value = new ExprReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 26);
			LeaveRule("stmt_return", 26);
			LeaveRule_stmt_return();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:266:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 27);
		TraceIn("ident", 27);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(266, 1);
		try
		{
			// SugarWalker.g:271:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:271:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(271, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1155); 
			DebugLocation(271, 12);
			 value = a.Text; 
			DebugLocation(271, 33);
			// SugarWalker.g:271:33: ( '::' a= IDENT )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==79))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:271:34: '::' a= IDENT
					{
					DebugLocation(271, 34);
					Match(input,79,Follow._79_in_ident1160); 
					DebugLocation(271, 40);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1164); 
					DebugLocation(271, 47);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 27);
			LeaveRule("ident", 27);
			LeaveRule_ident();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:274:1: ident_list returns [List<Expr> value] : ^( Ident_List (a= ident )+ ) ;
	[GrammarRule("ident_list")]
	private List<Expr> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 28);
		TraceIn("ident_list", 28);
		List<Expr> value = default(List<Expr>);


		string a = default(string);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(274, 1);
		try
		{
			// SugarWalker.g:279:2: ( ^( Ident_List (a= ident )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:279:4: ^( Ident_List (a= ident )+ )
			{
			DebugLocation(279, 4);
			DebugLocation(279, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list1189); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(279, 17);
			// SugarWalker.g:279:17: (a= ident )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==IDENT))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:279:18: a= ident
					{
					DebugLocation(279, 19);
					PushFollow(Follow._ident_in_ident_list1194);
					a=ident();
					PopFollow();

					DebugLocation(279, 26);
					 value.Add(new ExprConst(a)); 

					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 28);
			LeaveRule("ident_list", 28);
			LeaveRule_ident_list();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:282:1: alloc_expr returns [ExprAlloc value] : ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) ;
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 29);
		TraceIn("alloc_expr", 29);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		List<Expr> b = default(List<Expr>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(282, 1);
		try
		{
			// SugarWalker.g:283:2: ( ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:283:4: ^( Expr_Alloc a= type_name b= ident_list (c= expr )? )
			{
			DebugLocation(283, 4);
			DebugLocation(283, 6);
			Match(input,Expr_Alloc,Follow._Expr_Alloc_in_alloc_expr1216); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(283, 18);
			PushFollow(Follow._type_name_in_alloc_expr1220);
			a=type_name();
			PopFollow();

			DebugLocation(283, 30);
			PushFollow(Follow._ident_list_in_alloc_expr1224);
			b=ident_list();
			PopFollow();

			DebugLocation(283, 42);
			// SugarWalker.g:283:42: (c= expr )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==Expr_Access||(LA30_0>=Expr_Bin && LA30_0<=Expr_Prefix)||(LA30_0>=Expr_Suffix && LA30_0<=Expr_Tuple)||LA30_0==IDENT||LA30_0==Match_Tuple||LA30_0==NUMBER||LA30_0==STRING||LA30_0==57||LA30_0==60||LA30_0==64||LA30_0==67||LA30_0==71||LA30_0==77||LA30_0==80||LA30_0==84||LA30_0==86||LA30_0==92||LA30_0==96||LA30_0==114||LA30_0==DOUBLE))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:283:43: c= expr
				{
				DebugLocation(283, 44);
				PushFollow(Follow._expr_in_alloc_expr1229);
				c=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(284, 2);

					value = new ExprAlloc(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 29);
			LeaveRule("alloc_expr", 29);
			LeaveRule_alloc_expr();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_block_expr();
	partial void LeaveRule_block_expr();

	// $ANTLR start "block_expr"
	// SugarWalker.g:289:1: block_expr returns [ExprBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("block_expr")]
	private ExprBlock block_expr()
	{
		EnterRule_block_expr();
		EnterRule("block_expr", 30);
		TraceIn("block_expr", 30);
		ExprBlock value = default(ExprBlock);


		Stmt a = default(Stmt);


			value = new ExprBlock();

		try { DebugEnterRule(GrammarFileName, "block_expr");
		DebugLocation(289, 4);
		try
		{
			// SugarWalker.g:294:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:294:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(294, 4);
			Match(input,INDENT,Follow._INDENT_in_block_expr1255); 
			DebugLocation(294, 11);
			// SugarWalker.g:294:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				try
				{
					alt32 = dfa32.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:294:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(294, 12);
					// SugarWalker.g:294:12: ( NEWLINE )+
					int cnt31=0;
					try { DebugEnterSubRule(31);
					while (true)
					{
						int alt31=2;
						try { DebugEnterDecision(31, false);
						int LA31_0 = input.LA(1);

						if ((LA31_0==NEWLINE))
						{
							alt31 = 1;
						}


						} finally { DebugExitDecision(31); }
						switch (alt31)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:294:12: NEWLINE
							{
							DebugLocation(294, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_block_expr1258); 

							}
							break;

						default:
							if (cnt31 >= 1)
								goto loop31;

							EarlyExitException eee31 = new EarlyExitException( 31, input );
							DebugRecognitionException(eee31);
							throw eee31;
						}
						cnt31++;
					}
					loop31:
						;

					} finally { DebugExitSubRule(31); }

					DebugLocation(294, 22);
					PushFollow(Follow._stmt_in_block_expr1263);
					a=stmt();
					PopFollow();

					DebugLocation(294, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }

			DebugLocation(294, 58);
			// SugarWalker.g:294:58: ( NEWLINE )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==NEWLINE))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:294:58: NEWLINE
					{
					DebugLocation(294, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_block_expr1269); 

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }

			DebugLocation(294, 67);
			Match(input,DEDENT,Follow._DEDENT_in_block_expr1272); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block_expr", 30);
			LeaveRule("block_expr", 30);
			LeaveRule_block_expr();
		}
		DebugLocation(295, 4);
		} finally { DebugExitRule(GrammarFileName, "block_expr"); }
		return value;

	}
	// $ANTLR end "block_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:297:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 31);
		TraceIn("expr_tuple", 31);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(297, 1);
		try
		{
			// SugarWalker.g:302:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:302:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(302, 4);
			DebugLocation(302, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple1297); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(302, 17);
			// SugarWalker.g:302:17: (a= expr )+
			int cnt34=0;
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==Expr_Access||(LA34_0>=Expr_Bin && LA34_0<=Expr_Prefix)||(LA34_0>=Expr_Suffix && LA34_0<=Expr_Tuple)||LA34_0==IDENT||LA34_0==Match_Tuple||LA34_0==NUMBER||LA34_0==STRING||LA34_0==57||LA34_0==60||LA34_0==64||LA34_0==67||LA34_0==71||LA34_0==77||LA34_0==80||LA34_0==84||LA34_0==86||LA34_0==92||LA34_0==96||LA34_0==114||LA34_0==DOUBLE))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:302:18: a= expr
					{
					DebugLocation(302, 19);
					PushFollow(Follow._expr_in_expr_tuple1302);
					a=expr();
					PopFollow();

					DebugLocation(302, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt34 >= 1)
						goto loop34;

					EarlyExitException eee34 = new EarlyExitException( 34, input );
					DebugRecognitionException(eee34);
					throw eee34;
				}
				cnt34++;
			}
			loop34:
				;

			} finally { DebugExitSubRule(34); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 31);
			LeaveRule("expr_tuple", 31);
			LeaveRule_expr_tuple();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:305:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 32);
		TraceIn("match_tuple", 32);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(305, 1);
		try
		{
			// SugarWalker.g:310:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:310:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(310, 4);
			DebugLocation(310, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple1329); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(310, 18);
				// SugarWalker.g:310:18: (a= expr )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==Expr_Access||(LA35_0>=Expr_Bin && LA35_0<=Expr_Prefix)||(LA35_0>=Expr_Suffix && LA35_0<=Expr_Tuple)||LA35_0==IDENT||LA35_0==Match_Tuple||LA35_0==NUMBER||LA35_0==STRING||LA35_0==57||LA35_0==60||LA35_0==64||LA35_0==67||LA35_0==71||LA35_0==77||LA35_0==80||LA35_0==84||LA35_0==86||LA35_0==92||LA35_0==96||LA35_0==114||LA35_0==DOUBLE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:310:19: a= expr
						{
						DebugLocation(310, 20);
						PushFollow(Follow._expr_in_match_tuple1334);
						a=expr();
						PopFollow();

						DebugLocation(310, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 32);
			LeaveRule("match_tuple", 32);
			LeaveRule_match_tuple();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:313:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 33);
		TraceIn("expr_list", 33);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(313, 1);
		try
		{
			// SugarWalker.g:318:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:318:4: (a= expr )+
			{
			DebugLocation(318, 4);
			// SugarWalker.g:318:4: (a= expr )+
			int cnt36=0;
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==Expr_Access||(LA36_0>=Expr_Bin && LA36_0<=Expr_Prefix)||(LA36_0>=Expr_Suffix && LA36_0<=Expr_Tuple)||LA36_0==IDENT||LA36_0==Match_Tuple||LA36_0==NUMBER||LA36_0==STRING||LA36_0==57||LA36_0==60||LA36_0==64||LA36_0==67||LA36_0==71||LA36_0==77||LA36_0==80||LA36_0==84||LA36_0==86||LA36_0==92||LA36_0==96||LA36_0==114||LA36_0==DOUBLE))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:318:5: a= expr
					{
					DebugLocation(318, 6);
					PushFollow(Follow._expr_in_expr_list1362);
					a=expr();
					PopFollow();

					DebugLocation(318, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt36 >= 1)
						goto loop36;

					EarlyExitException eee36 = new EarlyExitException( 36, input );
					DebugRecognitionException(eee36);
					throw eee36;
				}
				cnt36++;
			}
			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 33);
			LeaveRule("expr_list", 33);
			LeaveRule_expr_list();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:321:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 34);
		TraceIn("call_expr", 34);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string x = default(string);
		List<Expr> b = default(List<Expr>);


			value = new ExprCall();

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(321, 1);
		try
		{
			// SugarWalker.g:326:2: ( ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:326:4: ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? )
			{
			DebugLocation(326, 4);
			DebugLocation(326, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr1387); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(326, 17);
			PushFollow(Follow._expr_in_call_expr1391);
			a=expr();
			PopFollow();

			DebugLocation(326, 23);
			 value.Expr=a; 
			DebugLocation(326, 42);
			// SugarWalker.g:326:42: ( '<' (x= ident )* '>' )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==82))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:326:43: '<' (x= ident )* '>'
				{
				DebugLocation(326, 43);
				Match(input,82,Follow._82_in_call_expr1396); 
				DebugLocation(326, 47);
				// SugarWalker.g:326:47: (x= ident )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==IDENT))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:326:48: x= ident
						{
						DebugLocation(326, 49);
						PushFollow(Follow._ident_in_call_expr1401);
						x=ident();
						PopFollow();

						DebugLocation(326, 56);
						 value.GenericParameter.Add(x); 

						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(326, 94);
				Match(input,89,Follow._89_in_call_expr1407); 

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(326, 100);
			// SugarWalker.g:326:100: (b= expr_list )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==Expr_Access||(LA39_0>=Expr_Bin && LA39_0<=Expr_Prefix)||(LA39_0>=Expr_Suffix && LA39_0<=Expr_Tuple)||LA39_0==IDENT||LA39_0==Match_Tuple||LA39_0==NUMBER||LA39_0==STRING||LA39_0==57||LA39_0==60||LA39_0==64||LA39_0==67||LA39_0==71||LA39_0==77||LA39_0==80||LA39_0==84||LA39_0==86||LA39_0==92||LA39_0==96||LA39_0==114||LA39_0==DOUBLE))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:326:101: b= expr_list
				{
				DebugLocation(326, 102);
				PushFollow(Follow._expr_list_in_call_expr1414);
				b=expr_list();
				PopFollow();

				DebugLocation(326, 113);
				 value.Args=b; 

				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 34);
			LeaveRule("call_expr", 34);
			LeaveRule_call_expr();
		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:329:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 35);
		TraceIn("dict_expr", 35);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(329, 1);
		try
		{
			// SugarWalker.g:330:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:330:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(330, 4);
			DebugLocation(330, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr1435); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(330, 17);
			PushFollow(Follow._expr_in_dict_expr1439);
			a=expr();
			PopFollow();

			DebugLocation(330, 23);
			// SugarWalker.g:330:23: (b= expr_list )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==Expr_Access||(LA40_0>=Expr_Bin && LA40_0<=Expr_Prefix)||(LA40_0>=Expr_Suffix && LA40_0<=Expr_Tuple)||LA40_0==IDENT||LA40_0==Match_Tuple||LA40_0==NUMBER||LA40_0==STRING||LA40_0==57||LA40_0==60||LA40_0==64||LA40_0==67||LA40_0==71||LA40_0==77||LA40_0==80||LA40_0==84||LA40_0==86||LA40_0==92||LA40_0==96||LA40_0==114||LA40_0==DOUBLE))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:330:24: b= expr_list
				{
				DebugLocation(330, 25);
				PushFollow(Follow._expr_list_in_dict_expr1444);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(40); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(331, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 35);
			LeaveRule("dict_expr", 35);
			LeaveRule_dict_expr();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:336:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda b= func_args a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 36);
		TraceIn("lambda_expr", 36);
		ExprLambda value = default(ExprLambda);


		List<Stmt> b = default(List<Stmt>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(336, 1);
		try
		{
			// SugarWalker.g:337:2: ( ^( Expr_Lambda b= func_args a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:337:4: ^( Expr_Lambda b= func_args a= expr )
			{
			DebugLocation(337, 4);
			DebugLocation(337, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr1466); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(337, 19);
			PushFollow(Follow._func_args_in_lambda_expr1470);
			b=func_args();
			PopFollow();

			DebugLocation(337, 31);
			PushFollow(Follow._expr_in_lambda_expr1474);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(338, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 36);
			LeaveRule("lambda_expr", 36);
			LeaveRule_lambda_expr();
		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:343:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 37);
		TraceIn("new_expr", 37);
		Expr value = default(Expr);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(343, 1);
		try
		{
			// SugarWalker.g:344:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt42=2;
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==Expr_New_Type))
			{
				alt42 = 1;
			}
			else if ((LA42_0==Expr_New_Array))
			{
				alt42 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:344:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(344, 4);
				DebugLocation(344, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr1494); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(344, 21);
				PushFollow(Follow._type_name_in_new_expr1498);
				a=type_name();
				PopFollow();

				DebugLocation(344, 33);
				// SugarWalker.g:344:33: (b= expr_list )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==Expr_Access||(LA41_0>=Expr_Bin && LA41_0<=Expr_Prefix)||(LA41_0>=Expr_Suffix && LA41_0<=Expr_Tuple)||LA41_0==IDENT||LA41_0==Match_Tuple||LA41_0==NUMBER||LA41_0==STRING||LA41_0==57||LA41_0==60||LA41_0==64||LA41_0==67||LA41_0==71||LA41_0==77||LA41_0==80||LA41_0==84||LA41_0==86||LA41_0==92||LA41_0==96||LA41_0==114||LA41_0==DOUBLE))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:344:33: b= expr_list
					{
					DebugLocation(344, 33);
					PushFollow(Follow._expr_list_in_new_expr1502);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(41); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(345, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:348:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(348, 4);
				DebugLocation(348, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr1513); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(348, 22);
				PushFollow(Follow._type_name_in_new_expr1517);
				a=type_name();
				PopFollow();

				DebugLocation(348, 34);
				PushFollow(Follow._expr_list_in_new_expr1521);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(349, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 37);
			LeaveRule("new_expr", 37);
			LeaveRule_new_expr();
		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:354:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 38);
		TraceIn("call_with_expr", 38);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(354, 1);
		try
		{
			// SugarWalker.g:355:2: ( ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:355:4: ^( Expr_Call_With a= expr b= ident (c= expr_list )? )
			{
			DebugLocation(355, 4);
			DebugLocation(355, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr1541); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(355, 22);
			PushFollow(Follow._expr_in_call_with_expr1545);
			a=expr();
			PopFollow();

			DebugLocation(355, 29);
			PushFollow(Follow._ident_in_call_with_expr1549);
			b=ident();
			PopFollow();

			DebugLocation(355, 37);
			// SugarWalker.g:355:37: (c= expr_list )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==Expr_Access||(LA43_0>=Expr_Bin && LA43_0<=Expr_Prefix)||(LA43_0>=Expr_Suffix && LA43_0<=Expr_Tuple)||LA43_0==IDENT||LA43_0==Match_Tuple||LA43_0==NUMBER||LA43_0==STRING||LA43_0==57||LA43_0==60||LA43_0==64||LA43_0==67||LA43_0==71||LA43_0==77||LA43_0==80||LA43_0==84||LA43_0==86||LA43_0==92||LA43_0==96||LA43_0==114||LA43_0==DOUBLE))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:355:37: c= expr_list
				{
				DebugLocation(355, 37);
				PushFollow(Follow._expr_list_in_call_with_expr1553);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(43); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(356, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall();
					value.Expr = new ExprConst(b);
					value.Args = Args;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 38);
			LeaveRule("call_with_expr", 38);
			LeaveRule_call_with_expr();
		}
		DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:372:1: expr returns [Expr value] : (tuple= expr_tuple |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE | STRING ) );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 39);
		TraceIn("expr", 39);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		Expr expr_new = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(372, 1);
		try
		{
			// SugarWalker.g:373:5: (tuple= expr_tuple |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE | STRING ) )
			int alt44=18;
			try { DebugEnterDecision(44, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt44 = 1;
				}
				break;
			case Match_Tuple:
				{
				alt44 = 2;
				}
				break;
			case Expr_Call:
				{
				alt44 = 3;
				}
				break;
			case Expr_Call_With:
				{
				alt44 = 4;
				}
				break;
			case Expr_Dict:
				{
				alt44 = 5;
				}
				break;
			case Expr_Lambda:
				{
				alt44 = 6;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt44 = 7;
				}
				break;
			case Expr_Infix:
				{
				alt44 = 8;
				}
				break;
			case Expr_Cond:
				{
				alt44 = 9;
				}
				break;
			case Expr_Access:
				{
				alt44 = 10;
				}
				break;
			case Expr_Bin:
				{
				alt44 = 11;
				}
				break;
			case 57:
			case 60:
			case 64:
			case 67:
			case 71:
			case 77:
			case 84:
			case 86:
			case 92:
			case 96:
			case 114:
				{
				alt44 = 12;
				}
				break;
			case 80:
				{
				alt44 = 13;
				}
				break;
			case Expr_Bracket:
				{
				alt44 = 14;
				}
				break;
			case Expr_Suffix:
				{
				alt44 = 15;
				}
				break;
			case Expr_Prefix:
				{
				alt44 = 16;
				}
				break;
			case IDENT:
				{
				alt44 = 17;
				}
				break;
			case NUMBER:
			case STRING:
			case DOUBLE:
				{
				alt44 = 18;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:373:7: tuple= expr_tuple
				{
				DebugLocation(373, 12);
				PushFollow(Follow._expr_tuple_in_expr1578);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(374, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:377:4: match= match_tuple
				{
				DebugLocation(377, 9);
				PushFollow(Follow._match_tuple_in_expr1588);
				match=match_tuple();
				PopFollow();

				DebugLocation(378, 2);

						value = match;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:381:4: call= call_expr
				{
				DebugLocation(381, 8);
				PushFollow(Follow._call_expr_in_expr1598);
				call=call_expr();
				PopFollow();

				DebugLocation(382, 2);

						value = call;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:385:4: call_with= call_with_expr
				{
				DebugLocation(385, 13);
				PushFollow(Follow._call_with_expr_in_expr1608);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(386, 2);

						value = call_with;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:389:4: dict= dict_expr
				{
				DebugLocation(389, 8);
				PushFollow(Follow._dict_expr_in_expr1618);
				dict=dict_expr();
				PopFollow();

				DebugLocation(390, 2);

						value = dict;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:393:4: lambda= lambda_expr
				{
				DebugLocation(393, 10);
				PushFollow(Follow._lambda_expr_in_expr1628);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(394, 2);

						value = lambda;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:397:4: expr_new= new_expr
				{
				DebugLocation(397, 12);
				PushFollow(Follow._new_expr_in_expr1638);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(398, 2);

						value = expr_new;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:401:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(401, 4);
				DebugLocation(401, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr1647); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(401, 27);
				PushFollow(Follow._ident_in_expr1651);
				ident_text=ident();
				PopFollow();

				DebugLocation(401, 35);
				PushFollow(Follow._expr_in_expr1655);
				a=expr();
				PopFollow();

				DebugLocation(401, 42);
				PushFollow(Follow._expr_in_expr1659);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(402, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:405:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(405, 4);
				DebugLocation(405, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr1669); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(405, 17);
				PushFollow(Follow._expr_in_expr1673);
				a=expr();
				PopFollow();

				DebugLocation(405, 24);
				PushFollow(Follow._expr_in_expr1677);
				b=expr();
				PopFollow();

				DebugLocation(405, 31);
				PushFollow(Follow._expr_in_expr1681);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(406, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:409:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(409, 4);
				DebugLocation(409, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr1691); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(409, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=72 && input.LA(1)<=75)||input.LA(1)==79)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(409, 57);
				PushFollow(Follow._expr_in_expr1717);
				a=expr();
				PopFollow();

				DebugLocation(409, 73);
				PushFollow(Follow._ident_in_expr1721);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(410, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:413:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr )
				{
				DebugLocation(413, 4);
				DebugLocation(413, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr1731); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(413, 17);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==55||(input.LA(1)>=58 && input.LA(1)<=59)||input.LA(1)==63||input.LA(1)==65||input.LA(1)==69||input.LA(1)==76||(input.LA(1)>=82 && input.LA(1)<=83)||input.LA(1)==85||input.LA(1)==87||(input.LA(1)>=89 && input.LA(1)<=91)||input.LA(1)==95||input.LA(1)==113||input.LA(1)==115)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(418, 9);
				PushFollow(Follow._expr_in_expr1832);
				a=expr();
				PopFollow();

				DebugLocation(418, 16);
				PushFollow(Follow._expr_in_expr1836);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(419, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:422:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(422, 4);
				DebugLocation(422, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==57||input.LA(1)==60||input.LA(1)==64||input.LA(1)==67||input.LA(1)==71||input.LA(1)==77||input.LA(1)==84||input.LA(1)==86||input.LA(1)==92||input.LA(1)==96||input.LA(1)==114)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(422, 88);
				PushFollow(Follow._expr_in_expr1894);
				a=expr();
				PopFollow();

				DebugLocation(422, 95);
				PushFollow(Follow._expr_in_expr1898);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(423, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:426:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(426, 4);
				DebugLocation(426, 6);
				Match(input,80,Follow._80_in_expr1908); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(426, 12);
				PushFollow(Follow._expr_in_expr1912);
				a=expr();
				PopFollow();

				DebugLocation(426, 19);
				PushFollow(Follow._expr_in_expr1916);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(427, 2);

						value = new ExprAlloc("auto", new List<Expr> { a }, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:430:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(430, 4);
				DebugLocation(430, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr1926); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(430, 20);
				PushFollow(Follow._expr_in_expr1930);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(431, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:434:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(434, 4);
				DebugLocation(434, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr1940); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(434, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==66||input.LA(1)==70)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(434, 36);
				PushFollow(Follow._expr_in_expr1954);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(435, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:438:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(438, 4);
				DebugLocation(438, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr1964); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(438, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==54||input.LA(1)==59||input.LA(1)==63||(input.LA(1)>=65 && input.LA(1)<=66)||(input.LA(1)>=69 && input.LA(1)<=70)||input.LA(1)==116)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(438, 72);
				PushFollow(Follow._expr_in_expr2002);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(439, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:442:4: text_ident= ident
				{
				DebugLocation(442, 15);
				PushFollow(Follow._ident_in_expr2015);
				text_ident=ident();
				PopFollow();

				DebugLocation(443, 2);

						value = new ExprConst(text_ident);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:446:4: text= ( NUMBER | DOUBLE | STRING )
				{
				DebugLocation(446, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(447, 5);

				        value = new ExprConst(text.Text);
				    

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 39);
			LeaveRule("expr", 39);
			LeaveRule_expr();
		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA3 dfa3;
	private DFA32 dfa32;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa32 = new DFA32( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x1\x3\x1\x6\x2\xFFFF";
		private const string DFA3_maxS =
			"\x2\x33\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x13\xFFFF\x1\x3"+
				"\x3\xFFFF\x1\x1\x1\xFFFF\x1\x3\x9\xFFFF\x2\x3\x1\xFFFF\x1\x3",
				"\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x13\xFFFF\x1\x3\x3\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x3\x9\xFFFF\x2\x3\x1\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()+ loopback of 35:4: ( ( NEWLINE )* a= node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA32 : DFA
	{
		private const string DFA32_eotS =
			"\x4\xFFFF";
		private const string DFA32_eofS =
			"\x4\xFFFF";
		private const string DFA32_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA32_maxS =
			"\x1\x24\x1\x75\x2\xFFFF";
		private const string DFA32_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA32_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA32_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x2\xFFFF\x10\x3\x2\xFFFF\x1\x3\x5\xFFFF\x1\x3\x1\x1\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x7\x3\x6\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x11\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA32_eot = DFA.UnpackEncodedString(DFA32_eotS);
		private static readonly short[] DFA32_eof = DFA.UnpackEncodedString(DFA32_eofS);
		private static readonly char[] DFA32_min = DFA.UnpackEncodedStringToUnsignedChars(DFA32_minS);
		private static readonly char[] DFA32_max = DFA.UnpackEncodedStringToUnsignedChars(DFA32_maxS);
		private static readonly short[] DFA32_accept = DFA.UnpackEncodedString(DFA32_acceptS);
		private static readonly short[] DFA32_special = DFA.UnpackEncodedString(DFA32_specialS);
		private static readonly short[][] DFA32_transition;

		static DFA32()
		{
			int numStates = DFA32_transitionS.Length;
			DFA32_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA32_transition[i] = DFA.UnpackEncodedString(DFA32_transitionS[i]);
			}
		}

		public DFA32( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}

		public override string Description { get { return "()* loopback of 294:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _overall_block_in_root77 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _NEWLINE_in_root79 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _NEWLINE_in_overall_block104 = new BitSet(new ulong[]{0xB005100001440UL});
		public static readonly BitSet _node_in_overall_block109 = new BitSet(new ulong[]{0xB005100001442UL});
		public static readonly BitSet _func_def_in_node133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_node177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_node199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_node210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespace_def228 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def232 = new BitSet(new ulong[]{0xB005100001440UL});
		public static readonly BitSet _overall_block_in_namespace_def236 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def261 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_import_def266 = new BitSet(new ulong[]{0x40000000008UL});
		public static readonly BitSet _Enum_in_enum_def292 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_enum_def296 = new BitSet(new ulong[]{0x20000008UL});
		public static readonly BitSet _ident_in_enum_def303 = new BitSet(new ulong[]{0x20000008UL});
		public static readonly BitSet _Class_in_class_def324 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_class_def329 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_class_def335 = new BitSet(new ulong[]{0xB005100001450UL});
		public static readonly BitSet _class_block_in_class_def339 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NEWLINE_in_class_block364 = new BitSet(new ulong[]{0xB005100001450UL});
		public static readonly BitSet _class_node_in_class_block369 = new BitSet(new ulong[]{0xB005100001452UL});
		public static readonly BitSet _NUMBER_in_attribute_args392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item437 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item441 = new BitSet(new ulong[]{0x42020000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item448 = new BitSet(new ulong[]{0x42020000008UL});
		public static readonly BitSet _attribute_item_in_attribute476 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _attribute_in_class_node499 = new BitSet(new ulong[]{0xB004100001440UL});
		public static readonly BitSet _node_in_class_node505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Type_IDENT_in_type_name530 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_type_name534 = new BitSet(new ulong[]{0x8800000000000008UL,0x20040000UL});
		public static readonly BitSet _82_in_type_name544 = new BitSet(new ulong[]{0x8000000000000UL,0x2000000UL});
		public static readonly BitSet _type_name_in_type_name556 = new BitSet(new ulong[]{0x8000000000000UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name566 = new BitSet(new ulong[]{0x8800000000000008UL,0x20000000UL});
		public static readonly BitSet _63_in_type_name577 = new BitSet(new ulong[]{0x8800000000000008UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name586 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_type_name588 = new BitSet(new ulong[]{0x8800000000000008UL,0x20000000UL});
		public static readonly BitSet _59_in_type_name597 = new BitSet(new ulong[]{0x8800000000000008UL,0x20000000UL});
		public static readonly BitSet _Func_Args_in_func_args627 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_alloc_in_func_args632 = new BitSet(new ulong[]{0x1008UL});
		public static readonly BitSet _type_name_in_func_def659 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_func_def663 = new BitSet(new ulong[]{0x2000000000000000UL,0x40000UL});
		public static readonly BitSet _82_in_func_def666 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_func_def670 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_def674 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_func_def678 = new BitSet(new ulong[]{0x4000000008000000UL});
		public static readonly BitSet _func_args_in_func_def683 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_func_def689 = new BitSet(new ulong[]{0x80000000000UL,0x400000UL});
		public static readonly BitSet _stmt_block_in_func_def696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_func_def704 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_func_def708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block735 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block740 = new BitSet(new ulong[]{0x1207F42827FFF808UL,0x24000110512089UL});
		public static readonly BitSet _stmt_expr_in_stmt766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using880 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using886 = new BitSet(new ulong[]{0x20000008UL,0x40000000000UL});
		public static readonly BitSet _106_in_stmt_using901 = new BitSet(new ulong[]{0x20000008UL,0x40000000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef922 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef926 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_stmt_typedef930 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _alloc_expr_in_stmt_alloc951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if969 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if973 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if977 = new BitSet(new ulong[]{0x80000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if982 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1004 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1008 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1012 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1032 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1036 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_stmt_for1040 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_stmt_for1044 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1048 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_ForEach_in_stmt_for1058 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1062 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_stmt_for1066 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1070 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1090 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1094 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_stmt_try1098 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1102 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Return_in_stmt_return1122 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1127 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident1155 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _79_in_ident1160 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _IDENT_in_ident1164 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _Ident_List_in_ident_list1189 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list1194 = new BitSet(new ulong[]{0x20000008UL});
		public static readonly BitSet _Expr_Alloc_in_alloc_expr1216 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1220 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1224 = new BitSet(new ulong[]{0x1200042826FFE808UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_alloc_expr1229 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDENT_in_block_expr1255 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_block_expr1258 = new BitSet(new ulong[]{0x1207F43827FFF800UL,0x24000110512089UL});
		public static readonly BitSet _stmt_in_block_expr1263 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_block_expr1269 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _DEDENT_in_block_expr1272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple1297 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple1302 = new BitSet(new ulong[]{0x1200042826FFE808UL,0x24000110512089UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple1329 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple1334 = new BitSet(new ulong[]{0x1200042826FFE808UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr_list1362 = new BitSet(new ulong[]{0x1200042826FFE802UL,0x24000110512089UL});
		public static readonly BitSet _Expr_Call_in_call_expr1387 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr1391 = new BitSet(new ulong[]{0x1200042826FFE808UL,0x24000110552089UL});
		public static readonly BitSet _82_in_call_expr1396 = new BitSet(new ulong[]{0x20000000UL,0x2000000UL});
		public static readonly BitSet _ident_in_call_expr1401 = new BitSet(new ulong[]{0x20000000UL,0x2000000UL});
		public static readonly BitSet _89_in_call_expr1407 = new BitSet(new ulong[]{0x1200042826FFE808UL,0x24000110512089UL});
		public static readonly BitSet _expr_list_in_call_expr1414 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr1435 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr1439 = new BitSet(new ulong[]{0x1200042826FFE808UL,0x24000110512089UL});
		public static readonly BitSet _expr_list_in_dict_expr1444 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr1466 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr1470 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_lambda_expr1474 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr1494 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1498 = new BitSet(new ulong[]{0x1200042826FFE808UL,0x24000110512089UL});
		public static readonly BitSet _expr_list_in_new_expr1502 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr1513 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1517 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_list_in_new_expr1521 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr1541 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr1545 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_call_with_expr1549 = new BitSet(new ulong[]{0x1200042826FFE808UL,0x24000110512089UL});
		public static readonly BitSet _expr_list_in_call_with_expr1553 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr1578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr1588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr1598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr1608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr1618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr1638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr1647 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr1651 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr1655 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr1659 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr1669 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1673 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr1677 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr1681 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr1691 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1695 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr1717 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_expr1721 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr1731 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1735 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr1832 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr1836 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr1848 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1894 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr1898 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _80_in_expr1908 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1912 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr1916 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr1926 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1930 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr1940 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1944 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr1954 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr1964 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1968 = new BitSet(new ulong[]{0x1200042826FFE800UL,0x24000110512089UL});
		public static readonly BitSet _expr_in_expr2002 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr2015 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr2025 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
