//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-04-27 10:40:11

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Cond", "Expr_Dict", "Expr_Dot", "Expr_New", "Expr_Return", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_For", "Stmt_If", "Stmt_While", "'!'", "'!='", "'%'", "'&'", "')'", "'*'", "'+'", "'++'", "','", "'-'", "'--'", "'/'", "':'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "']'", "'by'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'new'", "'return'", "'struct'", "'to'", "'while'", "'|'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Expr_Alloc=7;
	public const int Expr_Bin=8;
	public const int Expr_Block=9;
	public const int Expr_Call=10;
	public const int Expr_Cond=11;
	public const int Expr_Dict=12;
	public const int Expr_Dot=13;
	public const int Expr_New=14;
	public const int Expr_Return=15;
	public const int Func_Def=16;
	public const int IDENT=17;
	public const int INDENT=18;
	public const int INT=19;
	public const int Left_Bracket=20;
	public const int NEWLINE=21;
	public const int Right_Bracket=22;
	public const int Root=23;
	public const int SP=24;
	public const int STRING=25;
	public const int Stmt_For=26;
	public const int Stmt_If=27;
	public const int Stmt_While=28;
	public const int DOUBLE=62;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:22:8: public root returns [Root value] : (a= node ( NEWLINE )* )+ ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		AstNode a = default(AstNode);


			value = new Root();

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(22, 1);
		try
		{
			// SugarWalker.g:27:2: ( (a= node ( NEWLINE )* )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:27:4: (a= node ( NEWLINE )* )+
			{
			DebugLocation(27, 4);
			// SugarWalker.g:27:4: (a= node ( NEWLINE )* )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==IDENT||LA2_0==52||LA2_0==55||LA2_0==58))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:27:5: a= node ( NEWLINE )*
					{
					DebugLocation(27, 7);
					PushFollow(Follow._node_in_root87);
					a=node();
					PopFollow();

					DebugLocation(27, 15);
					 value.List.Add(a); 
					DebugLocation(27, 39);
					// SugarWalker.g:27:39: ( NEWLINE )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_0 = input.LA(1);

						if ((LA1_0==NEWLINE))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:27:39: NEWLINE
							{
							DebugLocation(27, 39);
							Match(input,NEWLINE,Follow._NEWLINE_in_root92); 

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:30:1: node returns [AstNode value] : (a= func_def |b= imports |c= struct |d= enum );
	[GrammarRule("node")]
	private AstNode node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstNode value = default(AstNode);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Struct c = default(Struct);
		Enum d = default(Enum);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:31:2: (a= func_def |b= imports |c= struct |d= enum )
			int alt3=4;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt3 = 1;
				}
				break;
			case 55:
				{
				alt3 = 2;
				}
				break;
			case 58:
				{
				alt3 = 3;
				}
				break;
			case 52:
				{
				alt3 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:31:4: a= func_def
				{
				DebugLocation(31, 6);
				PushFollow(Follow._func_def_in_node114);
				a=func_def();
				PopFollow();

				DebugLocation(31, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:32:4: b= imports
				{
				DebugLocation(32, 6);
				PushFollow(Follow._imports_in_node125);
				b=imports();
				PopFollow();

				DebugLocation(32, 16);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:33:4: c= struct
				{
				DebugLocation(33, 6);
				PushFollow(Follow._struct_in_node136);
				c=@struct();
				PopFollow();

				DebugLocation(33, 15);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:34:4: d= enum
				{
				DebugLocation(34, 6);
				PushFollow(Follow._enum_in_node147);
				d=@enum();
				PopFollow();

				DebugLocation(34, 13);
				 value = d; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(35, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_imports();
	partial void LeaveRule_imports();

	// $ANTLR start "imports"
	// SugarWalker.g:37:1: imports returns [Import value] : 'import' (a= STRING )? ( INDENT ( ( NEWLINE )+ b= STRING )+ ( NEWLINE )* DEDENT )? ;
	[GrammarRule("imports")]
	private Import imports()
	{
		EnterRule_imports();
		EnterRule("imports", 3);
		TraceIn("imports", 3);
		Import value = default(Import);


		CommonTree a = default(CommonTree);
		CommonTree b = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(37, 1);
		try
		{
			// SugarWalker.g:42:2: ( 'import' (a= STRING )? ( INDENT ( ( NEWLINE )+ b= STRING )+ ( NEWLINE )* DEDENT )? )
			DebugEnterAlt(1);
			// SugarWalker.g:42:4: 'import' (a= STRING )? ( INDENT ( ( NEWLINE )+ b= STRING )+ ( NEWLINE )* DEDENT )?
			{
			DebugLocation(42, 4);
			Match(input,55,Follow._55_in_imports169); 
			DebugLocation(42, 13);
			// SugarWalker.g:42:13: (a= STRING )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==STRING))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:42:14: a= STRING
				{
				DebugLocation(42, 16);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_imports176); 
				DebugLocation(42, 25);
				 value.NameList.Add(a.Text); 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(43, 4);
			// SugarWalker.g:43:4: ( INDENT ( ( NEWLINE )+ b= STRING )+ ( NEWLINE )* DEDENT )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==INDENT))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:43:5: INDENT ( ( NEWLINE )+ b= STRING )+ ( NEWLINE )* DEDENT
				{
				DebugLocation(43, 5);
				Match(input,INDENT,Follow._INDENT_in_imports186); 
				DebugLocation(43, 12);
				// SugarWalker.g:43:12: ( ( NEWLINE )+ b= STRING )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					try
					{
						alt6 = dfa6.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:43:13: ( NEWLINE )+ b= STRING
						{
						DebugLocation(43, 13);
						// SugarWalker.g:43:13: ( NEWLINE )+
						int cnt5=0;
						try { DebugEnterSubRule(5);
						while (true)
						{
							int alt5=2;
							try { DebugEnterDecision(5, false);
							int LA5_0 = input.LA(1);

							if ((LA5_0==NEWLINE))
							{
								alt5 = 1;
							}


							} finally { DebugExitDecision(5); }
							switch (alt5)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarWalker.g:43:13: NEWLINE
								{
								DebugLocation(43, 13);
								Match(input,NEWLINE,Follow._NEWLINE_in_imports189); 

								}
								break;

							default:
								if (cnt5 >= 1)
									goto loop5;

								EarlyExitException eee5 = new EarlyExitException( 5, input );
								DebugRecognitionException(eee5);
								throw eee5;
							}
							cnt5++;
						}
						loop5:
							;

						} finally { DebugExitSubRule(5); }

						DebugLocation(43, 24);
						b=(CommonTree)Match(input,STRING,Follow._STRING_in_imports196); 
						DebugLocation(43, 33);
						 value.NameList.Add(b.Text); 

						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(43, 68);
				// SugarWalker.g:43:68: ( NEWLINE )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==NEWLINE))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:43:68: NEWLINE
						{
						DebugLocation(43, 68);
						Match(input,NEWLINE,Follow._NEWLINE_in_imports202); 

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(43, 77);
				Match(input,DEDENT,Follow._DEDENT_in_imports205); 

				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("imports", 3);
			LeaveRule("imports", 3);
			LeaveRule_imports();
		}
		DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return value;

	}
	// $ANTLR end "imports"

	partial void EnterRule_enum();
	partial void LeaveRule_enum();

	// $ANTLR start "enum"
	// SugarWalker.g:46:1: enum returns [Enum value] : 'enum' a= IDENT '=' a= IDENT ( '|' a= IDENT )* ;
	[GrammarRule("enum")]
	private Enum @enum()
	{
		EnterRule_enum();
		EnterRule("enum", 4);
		TraceIn("enum", 4);
		Enum value = default(Enum);


		CommonTree a = default(CommonTree);


			value = new Enum();

		try { DebugEnterRule(GrammarFileName, "enum");
		DebugLocation(46, 1);
		try
		{
			// SugarWalker.g:51:2: ( 'enum' a= IDENT '=' a= IDENT ( '|' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:51:4: 'enum' a= IDENT '=' a= IDENT ( '|' a= IDENT )*
			{
			DebugLocation(51, 4);
			Match(input,52,Follow._52_in_enum228); 
			DebugLocation(51, 12);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_enum232); 
			DebugLocation(51, 19);
			 value.Name = a.Text; 
			DebugLocation(51, 45);
			Match(input,45,Follow._45_in_enum236); 
			DebugLocation(51, 50);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_enum240); 
			DebugLocation(51, 57);
			 value.Values.Add(a.Text); 
			DebugLocation(51, 88);
			// SugarWalker.g:51:88: ( '|' a= IDENT )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==61))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:51:89: '|' a= IDENT
					{
					DebugLocation(51, 89);
					Match(input,61,Follow._61_in_enum245); 
					DebugLocation(51, 94);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_enum249); 
					DebugLocation(51, 101);
					 value.Values.Add(a.Text); 

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum", 4);
			LeaveRule("enum", 4);
			LeaveRule_enum();
		}
		DebugLocation(52, 1);
		} finally { DebugExitRule(GrammarFileName, "enum"); }
		return value;

	}
	// $ANTLR end "enum"

	partial void EnterRule_struct();
	partial void LeaveRule_struct();

	// $ANTLR start "struct"
	// SugarWalker.g:54:1: struct returns [Struct value] : 'struct' a= IDENT ( INDENT ( ( NEWLINE )+ b= struct_stmt )+ DEDENT ) ;
	[GrammarRule("struct")]
	private Struct @struct()
	{
		EnterRule_struct();
		EnterRule("struct", 5);
		TraceIn("struct", 5);
		Struct value = default(Struct);


		CommonTree a = default(CommonTree);
		AstNode b = default(AstNode);


			value = new Struct();

		try { DebugEnterRule(GrammarFileName, "struct");
		DebugLocation(54, 1);
		try
		{
			// SugarWalker.g:59:2: ( 'struct' a= IDENT ( INDENT ( ( NEWLINE )+ b= struct_stmt )+ DEDENT ) )
			DebugEnterAlt(1);
			// SugarWalker.g:59:4: 'struct' a= IDENT ( INDENT ( ( NEWLINE )+ b= struct_stmt )+ DEDENT )
			{
			DebugLocation(59, 4);
			Match(input,58,Follow._58_in_struct273); 
			DebugLocation(59, 14);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_struct277); 
			DebugLocation(59, 21);
			 value.Name = a.Text; 
			DebugLocation(59, 47);
			// SugarWalker.g:59:47: ( INDENT ( ( NEWLINE )+ b= struct_stmt )+ DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:59:48: INDENT ( ( NEWLINE )+ b= struct_stmt )+ DEDENT
			{
			DebugLocation(59, 48);
			Match(input,INDENT,Follow._INDENT_in_struct282); 
			DebugLocation(59, 55);
			// SugarWalker.g:59:55: ( ( NEWLINE )+ b= struct_stmt )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:59:56: ( NEWLINE )+ b= struct_stmt
					{
					DebugLocation(59, 56);
					// SugarWalker.g:59:56: ( NEWLINE )+
					int cnt10=0;
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==NEWLINE))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch (alt10)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:59:56: NEWLINE
							{
							DebugLocation(59, 56);
							Match(input,NEWLINE,Follow._NEWLINE_in_struct285); 

							}
							break;

						default:
							if (cnt10 >= 1)
								goto loop10;

							EarlyExitException eee10 = new EarlyExitException( 10, input );
							DebugRecognitionException(eee10);
							throw eee10;
						}
						cnt10++;
					}
					loop10:
						;

					} finally { DebugExitSubRule(10); }

					DebugLocation(59, 66);
					PushFollow(Follow._struct_stmt_in_struct290);
					b=struct_stmt();
					PopFollow();

					DebugLocation(59, 79);
					 value.List.Add(b); 

					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(59, 106);
			Match(input,DEDENT,Follow._DEDENT_in_struct297); 

			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("struct", 5);
			LeaveRule("struct", 5);
			LeaveRule_struct();
		}
		DebugLocation(60, 1);
		} finally { DebugExitRule(GrammarFileName, "struct"); }
		return value;

	}
	// $ANTLR end "struct"

	partial void EnterRule_struct_stmt();
	partial void LeaveRule_struct_stmt();

	// $ANTLR start "struct_stmt"
	// SugarWalker.g:62:1: struct_stmt returns [AstNode value] : (a= func_def |b= alloc_expr );
	[GrammarRule("struct_stmt")]
	private AstNode struct_stmt()
	{
		EnterRule_struct_stmt();
		EnterRule("struct_stmt", 6);
		TraceIn("struct_stmt", 6);
		AstNode value = default(AstNode);


		FuncDef a = default(FuncDef);
		ExprAlloc b = default(ExprAlloc);

		try { DebugEnterRule(GrammarFileName, "struct_stmt");
		DebugLocation(62, 1);
		try
		{
			// SugarWalker.g:63:2: (a= func_def |b= alloc_expr )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==IDENT))
			{
				alt12 = 1;
			}
			else if ((LA12_0==Expr_Alloc))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:63:4: a= func_def
				{
				DebugLocation(63, 5);
				PushFollow(Follow._func_def_in_struct_stmt315);
				a=func_def();
				PopFollow();

				DebugLocation(63, 15);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:64:4: b= alloc_expr
				{
				DebugLocation(64, 5);
				PushFollow(Follow._alloc_expr_in_struct_stmt324);
				b=alloc_expr();
				PopFollow();

				DebugLocation(64, 17);
				 value = b; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("struct_stmt", 6);
			LeaveRule("struct_stmt", 6);
			LeaveRule_struct_stmt();
		}
		DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_stmt"); }
		return value;

	}
	// $ANTLR end "struct_stmt"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:67:1: type_name returns [string value] : a= IDENT ( '[' ']' )* ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 7);
		TraceIn("type_name", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(67, 1);
		try
		{
			// SugarWalker.g:72:2: (a= IDENT ( '[' ']' )* )
			DebugEnterAlt(1);
			// SugarWalker.g:72:4: a= IDENT ( '[' ']' )*
			{
			DebugLocation(72, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_type_name348); 
			DebugLocation(72, 12);
			 value+=a; 
			DebugLocation(72, 27);
			// SugarWalker.g:72:27: ( '[' ']' )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==Expr_Dict))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:72:28: '[' ']'
					{
					DebugLocation(72, 28);
					Match(input,Expr_Dict,Follow._Expr_Dict_in_type_name353); 
					DebugLocation(72, 32);
					Match(input,49,Follow._49_in_type_name355); 
					DebugLocation(72, 36);
					 value+="*"; 

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 7);
			LeaveRule("type_name", 7);
			LeaveRule_type_name();
		}
		DebugLocation(73, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:75:1: func_def returns [FuncDef value] : a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (c= expr ( ',' d= expr IDENT )* )? ')' (e= stmt_block | '=' f= expr ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 8);
		TraceIn("func_def", 8);
		FuncDef value = default(FuncDef);


		CommonTree b = default(CommonTree);
		CommonTree x = default(CommonTree);
		string a = default(string);
		Expr c = default(Expr);
		Expr d = default(Expr);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(75, 1);
		try
		{
			// SugarWalker.g:80:2: (a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (c= expr ( ',' d= expr IDENT )* )? ')' (e= stmt_block | '=' f= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:80:4: a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (c= expr ( ',' d= expr IDENT )* )? ')' (e= stmt_block | '=' f= expr )
			{
			DebugLocation(80, 5);
			PushFollow(Follow._type_name_in_func_def381);
			a=type_name();
			PopFollow();

			DebugLocation(80, 17);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def385); 
			DebugLocation(80, 24);
			// SugarWalker.g:80:24: ( '<' (x= IDENT )+ '>' )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==43))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:80:25: '<' (x= IDENT )+ '>'
				{
				DebugLocation(80, 25);
				Match(input,43,Follow._43_in_func_def388); 
				DebugLocation(80, 29);
				// SugarWalker.g:80:29: (x= IDENT )+
				int cnt14=0;
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_0 = input.LA(1);

					if ((LA14_0==IDENT))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:80:30: x= IDENT
						{
						DebugLocation(80, 31);
						x=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def393); 
						DebugLocation(80, 38);
						value.GenericParameter.Add(x.Text); 

						}
						break;

					default:
						if (cnt14 >= 1)
							goto loop14;

						EarlyExitException eee14 = new EarlyExitException( 14, input );
						DebugRecognitionException(eee14);
						throw eee14;
					}
					cnt14++;
				}
				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(80, 80);
				Match(input,47,Follow._47_in_func_def399); 

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(80, 86);
			Match(input,Expr_Call,Follow._Expr_Call_in_func_def403); 
			DebugLocation(80, 90);
			// SugarWalker.g:80:90: (c= expr ( ',' d= expr IDENT )* )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Expr_Alloc||(LA17_0>=Expr_Call && LA17_0<=Expr_Return)||(LA17_0>=IDENT && LA17_0<=INT)||LA17_0==STRING||(LA17_0>=29 && LA17_0<=32)||(LA17_0>=34 && LA17_0<=35)||LA17_0==38||LA17_0==40||(LA17_0>=43 && LA17_0<=48)||LA17_0==DOUBLE))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:80:91: c= expr ( ',' d= expr IDENT )*
				{
				DebugLocation(80, 92);
				PushFollow(Follow._expr_in_func_def408);
				c=expr();
				PopFollow();

				DebugLocation(80, 98);
				 value.Args.Add(c); 
				DebugLocation(80, 122);
				// SugarWalker.g:80:122: ( ',' d= expr IDENT )*
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==37))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch ( alt16 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:80:123: ',' d= expr IDENT
						{
						DebugLocation(80, 123);
						Match(input,37,Follow._37_in_func_def413); 
						DebugLocation(80, 128);
						PushFollow(Follow._expr_in_func_def417);
						d=expr();
						PopFollow();

						DebugLocation(80, 134);
						 value.Args.Add(d); 
						DebugLocation(80, 158);
						Match(input,IDENT,Follow._IDENT_in_func_def421); 

						}
						break;

					default:
						goto loop16;
					}
				}

				loop16:
					;

				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(80, 168);
			Match(input,33,Follow._33_in_func_def427); 
			DebugLocation(81, 2);
			// SugarWalker.g:81:2: (e= stmt_block | '=' f= expr )
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==INDENT))
			{
				alt18 = 1;
			}
			else if ((LA18_0==45))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:81:4: e= stmt_block
				{
				DebugLocation(81, 5);
				PushFollow(Follow._stmt_block_in_func_def434);
				e=stmt_block();
				PopFollow();

				DebugLocation(82, 2);

						value.Type = a;
						value.Name = b.Text;
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:87:4: '=' f= expr
				{
				DebugLocation(87, 4);
				Match(input,45,Follow._45_in_func_def442); 
				DebugLocation(87, 9);
				PushFollow(Follow._expr_in_func_def446);
				f=expr();
				PopFollow();

				DebugLocation(88, 2);

						value.Type = a;
						value.Name = b.Text;
						StmtBlock tmp = new StmtBlock();
						if (a != "void")
							tmp.StmtList.Add(new ExprReturn(f));
						else tmp.StmtList.Add(f);
						value.Body = tmp;
					

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 8);
			LeaveRule("func_def", 8);
			LeaveRule_func_def();
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:100:1: stmt_block returns [StmtBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 9);
		TraceIn("stmt_block", 9);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(100, 4);
		try
		{
			// SugarWalker.g:105:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:105:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(105, 4);
			Match(input,INDENT,Follow._INDENT_in_stmt_block472); 
			DebugLocation(105, 11);
			// SugarWalker.g:105:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				try
				{
					alt20 = dfa20.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:105:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(105, 12);
					// SugarWalker.g:105:12: ( NEWLINE )+
					int cnt19=0;
					try { DebugEnterSubRule(19);
					while (true)
					{
						int alt19=2;
						try { DebugEnterDecision(19, false);
						int LA19_0 = input.LA(1);

						if ((LA19_0==NEWLINE))
						{
							alt19 = 1;
						}


						} finally { DebugExitDecision(19); }
						switch (alt19)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:105:12: NEWLINE
							{
							DebugLocation(105, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block475); 

							}
							break;

						default:
							if (cnt19 >= 1)
								goto loop19;

							EarlyExitException eee19 = new EarlyExitException( 19, input );
							DebugRecognitionException(eee19);
							throw eee19;
						}
						cnt19++;
					}
					loop19:
						;

					} finally { DebugExitSubRule(19); }

					DebugLocation(105, 22);
					PushFollow(Follow._stmt_in_stmt_block480);
					a=stmt();
					PopFollow();

					DebugLocation(105, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }

			DebugLocation(105, 58);
			// SugarWalker.g:105:58: ( NEWLINE )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==NEWLINE))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:105:58: NEWLINE
					{
					DebugLocation(105, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block486); 

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(105, 67);
			Match(input,DEDENT,Follow._DEDENT_in_stmt_block489); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 9);
			LeaveRule("stmt_block", 9);
			LeaveRule_stmt_block();
		}
		DebugLocation(106, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:108:1: stmt returns [Stmt value] : (a= expr |b= stmt_if |c= stmt_while |d= stmt_for );
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 10);
		TraceIn("stmt", 10);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtIf b = default(StmtIf);
		StmtWhile c = default(StmtWhile);
		StmtFor d = default(StmtFor);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(108, 1);
		try
		{
			// SugarWalker.g:109:2: (a= expr |b= stmt_if |c= stmt_while |d= stmt_for )
			int alt22=4;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case Expr_Alloc:
			case Expr_Call:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Dot:
			case Expr_New:
			case Expr_Return:
			case IDENT:
			case INDENT:
			case INT:
			case STRING:
			case 29:
			case 30:
			case 31:
			case 32:
			case 34:
			case 35:
			case 38:
			case 40:
			case 43:
			case 44:
			case 45:
			case 46:
			case 47:
			case 48:
			case DOUBLE:
				{
				alt22 = 1;
				}
				break;
			case 54:
				{
				alt22 = 2;
				}
				break;
			case 60:
				{
				alt22 = 3;
				}
				break;
			case 53:
				{
				alt22 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:109:4: a= expr
				{
				DebugLocation(109, 5);
				PushFollow(Follow._expr_in_stmt510);
				a=expr();
				PopFollow();

				DebugLocation(109, 11);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:110:4: b= stmt_if
				{
				DebugLocation(110, 5);
				PushFollow(Follow._stmt_if_in_stmt519);
				b=stmt_if();
				PopFollow();

				DebugLocation(110, 14);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:111:4: c= stmt_while
				{
				DebugLocation(111, 5);
				PushFollow(Follow._stmt_while_in_stmt528);
				c=stmt_while();
				PopFollow();

				DebugLocation(111, 17);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:112:4: d= stmt_for
				{
				DebugLocation(112, 5);
				PushFollow(Follow._stmt_for_in_stmt537);
				d=stmt_for();
				PopFollow();

				DebugLocation(112, 15);
				 value = d; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 10);
			LeaveRule("stmt", 10);
			LeaveRule_stmt();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:115:1: stmt_if returns [StmtIf value] : 'if' '(' a= expr ')' b= stmt_block ( ( NEWLINE )* 'else' c= stmt_block )? ;
	[GrammarRule("stmt_if")]
	private StmtIf stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 11);
		TraceIn("stmt_if", 11);
		StmtIf value = default(StmtIf);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(115, 1);
		try
		{
			// SugarWalker.g:116:2: ( 'if' '(' a= expr ')' b= stmt_block ( ( NEWLINE )* 'else' c= stmt_block )? )
			DebugEnterAlt(1);
			// SugarWalker.g:116:4: 'if' '(' a= expr ')' b= stmt_block ( ( NEWLINE )* 'else' c= stmt_block )?
			{
			DebugLocation(116, 4);
			Match(input,54,Follow._54_in_stmt_if555); 
			DebugLocation(116, 9);
			Match(input,Expr_Call,Follow._Expr_Call_in_stmt_if557); 
			DebugLocation(116, 14);
			PushFollow(Follow._expr_in_stmt_if561);
			a=expr();
			PopFollow();

			DebugLocation(116, 20);
			Match(input,33,Follow._33_in_stmt_if563); 
			DebugLocation(116, 25);
			PushFollow(Follow._stmt_block_in_stmt_if567);
			b=stmt_block();
			PopFollow();

			DebugLocation(116, 37);
			// SugarWalker.g:116:37: ( ( NEWLINE )* 'else' c= stmt_block )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			try
			{
				alt24 = dfa24.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:116:38: ( NEWLINE )* 'else' c= stmt_block
				{
				DebugLocation(116, 38);
				// SugarWalker.g:116:38: ( NEWLINE )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==NEWLINE))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:116:38: NEWLINE
						{
						DebugLocation(116, 38);
						Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if570); 

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }

				DebugLocation(116, 47);
				Match(input,51,Follow._51_in_stmt_if573); 
				DebugLocation(116, 55);
				PushFollow(Follow._stmt_block_in_stmt_if577);
				c=stmt_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(117, 2);

					value = new StmtIf();
					value.Condition = a;
					value.Body = b;
					value.Else = c;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 11);
			LeaveRule("stmt_if", 11);
			LeaveRule_stmt_if();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:125:1: stmt_while returns [StmtWhile value] : 'while' '(' a= expr ')' b= stmt_block ;
	[GrammarRule("stmt_while")]
	private StmtWhile stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 12);
		TraceIn("stmt_while", 12);
		StmtWhile value = default(StmtWhile);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(125, 1);
		try
		{
			// SugarWalker.g:126:2: ( 'while' '(' a= expr ')' b= stmt_block )
			DebugEnterAlt(1);
			// SugarWalker.g:126:4: 'while' '(' a= expr ')' b= stmt_block
			{
			DebugLocation(126, 4);
			Match(input,60,Follow._60_in_stmt_while597); 
			DebugLocation(126, 12);
			Match(input,Expr_Call,Follow._Expr_Call_in_stmt_while599); 
			DebugLocation(126, 17);
			PushFollow(Follow._expr_in_stmt_while603);
			a=expr();
			PopFollow();

			DebugLocation(126, 23);
			Match(input,33,Follow._33_in_stmt_while605); 
			DebugLocation(126, 28);
			PushFollow(Follow._stmt_block_in_stmt_while609);
			b=stmt_block();
			PopFollow();

			DebugLocation(127, 2);

					value = new StmtWhile();
					value.Condition = a;
					value.Body = b;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 12);
			LeaveRule("stmt_while", 12);
			LeaveRule_stmt_while();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:134:1: stmt_for returns [StmtFor value] : 'for' '(' a= expr ( ';' b= expr ';' c= expr | 'to' e= expr ( 'by' h= expr )? ) ')' d= stmt_block ;
	[GrammarRule("stmt_for")]
	private StmtFor stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 13);
		TraceIn("stmt_for", 13);
		StmtFor value = default(StmtFor);


		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		Expr e = default(Expr);
		Expr h = default(Expr);
		StmtBlock d = default(StmtBlock);


			value = new StmtFor();

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(134, 1);
		try
		{
			// SugarWalker.g:139:2: ( 'for' '(' a= expr ( ';' b= expr ';' c= expr | 'to' e= expr ( 'by' h= expr )? ) ')' d= stmt_block )
			DebugEnterAlt(1);
			// SugarWalker.g:139:4: 'for' '(' a= expr ( ';' b= expr ';' c= expr | 'to' e= expr ( 'by' h= expr )? ) ')' d= stmt_block
			{
			DebugLocation(139, 4);
			Match(input,53,Follow._53_in_stmt_for632); 
			DebugLocation(139, 10);
			Match(input,Expr_Call,Follow._Expr_Call_in_stmt_for634); 
			DebugLocation(139, 15);
			PushFollow(Follow._expr_in_stmt_for638);
			a=expr();
			PopFollow();

			DebugLocation(140, 4);
			// SugarWalker.g:140:4: ( ';' b= expr ';' c= expr | 'to' e= expr ( 'by' h= expr )? )
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==42))
			{
				alt26 = 1;
			}
			else if ((LA26_0==59))
			{
				alt26 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:140:6: ';' b= expr ';' c= expr
				{
				DebugLocation(140, 6);
				Match(input,42,Follow._42_in_stmt_for645); 
				DebugLocation(140, 11);
				PushFollow(Follow._expr_in_stmt_for649);
				b=expr();
				PopFollow();

				DebugLocation(140, 17);
				Match(input,42,Follow._42_in_stmt_for651); 
				DebugLocation(140, 22);
				PushFollow(Follow._expr_in_stmt_for655);
				c=expr();
				PopFollow();

				DebugLocation(141, 4);

								value.Start = a;
								value.Condition = b;
								value.Next = c;
							

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:146:6: 'to' e= expr ( 'by' h= expr )?
				{
				DebugLocation(146, 6);
				Match(input,59,Follow._59_in_stmt_for668); 
				DebugLocation(146, 12);
				PushFollow(Follow._expr_in_stmt_for672);
				e=expr();
				PopFollow();

				DebugLocation(147, 4);

								ExprAlloc tmp = (ExprAlloc)a;
								
								value.Start = a;
								value.Condition = new ExprBin("!=", new ExprConst(tmp.Name), new ExprBin("+", e, new ExprConst("1")));
								value.Next = new ExprBin("+=", new ExprConst(tmp.Name), new ExprConst("1"));
							
				DebugLocation(154, 4);
				// SugarWalker.g:154:4: ( 'by' h= expr )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==50))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:154:5: 'by' h= expr
					{
					DebugLocation(154, 5);
					Match(input,50,Follow._50_in_stmt_for683); 
					DebugLocation(154, 11);
					PushFollow(Follow._expr_in_stmt_for687);
					h=expr();
					PopFollow();

					DebugLocation(155, 4);

									tmp = (ExprAlloc)a;
									
									value.Start = a;
									value.Condition = new ExprBin("!=", new ExprConst(tmp.Name), new ExprBin("+", e, h));
									value.Next = new ExprBin("+=", new ExprConst(tmp.Name), h);
								

					}
					break;

				}
				} finally { DebugExitSubRule(25); }


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(162, 6);
			Match(input,33,Follow._33_in_stmt_for701); 
			DebugLocation(162, 11);
			PushFollow(Follow._stmt_block_in_stmt_for705);
			d=stmt_block();
			PopFollow();

			DebugLocation(163, 4);

							value.Body = d;
						

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 13);
			LeaveRule("stmt_for", 13);
			LeaveRule_stmt_for();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:168:1: ident returns [string value] : a= IDENT ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 14);
		TraceIn("ident", 14);
		string value = default(string);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(168, 1);
		try
		{
			// SugarWalker.g:169:2: (a= IDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:169:4: a= IDENT
			{
			DebugLocation(169, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident727); 
			DebugLocation(169, 12);
			 value = a.Text; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 14);
			LeaveRule("ident", 14);
			LeaveRule_ident();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:172:1: ident_list returns [List<string> value] : a= ident ( ( ',' a= ident )+ ';' )? ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 15);
		TraceIn("ident_list", 15);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(172, 1);
		try
		{
			// SugarWalker.g:177:2: (a= ident ( ( ',' a= ident )+ ';' )? )
			DebugEnterAlt(1);
			// SugarWalker.g:177:4: a= ident ( ( ',' a= ident )+ ';' )?
			{
			DebugLocation(177, 5);
			PushFollow(Follow._ident_in_ident_list751);
			a=ident();
			PopFollow();

			DebugLocation(177, 12);
			 value.Add(a); 
			DebugLocation(177, 31);
			// SugarWalker.g:177:31: ( ( ',' a= ident )+ ';' )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==37))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:177:32: ( ',' a= ident )+ ';'
				{
				DebugLocation(177, 32);
				// SugarWalker.g:177:32: ( ',' a= ident )+
				int cnt27=0;
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==37))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:177:33: ',' a= ident
						{
						DebugLocation(177, 33);
						Match(input,37,Follow._37_in_ident_list757); 
						DebugLocation(177, 38);
						PushFollow(Follow._ident_in_ident_list761);
						a=ident();
						PopFollow();

						DebugLocation(177, 45);
						 value.Add(a); 

						}
						break;

					default:
						if (cnt27 >= 1)
							goto loop27;

						EarlyExitException eee27 = new EarlyExitException( 27, input );
						DebugRecognitionException(eee27);
						throw eee27;
					}
					cnt27++;
				}
				loop27:
					;

				} finally { DebugExitSubRule(27); }

				DebugLocation(177, 66);
				Match(input,42,Follow._42_in_ident_list767); 

				}
				break;

			}
			} finally { DebugExitSubRule(28); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 15);
			LeaveRule("ident_list", 15);
			LeaveRule_ident_list();
		}
		DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:180:1: alloc_expr returns [ExprAlloc value] : ^( Expr_Alloc a= type_name b= ident (c= expr )? ) ;
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 16);
		TraceIn("alloc_expr", 16);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		string b = default(string);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(180, 1);
		try
		{
			// SugarWalker.g:181:2: ( ^( Expr_Alloc a= type_name b= ident (c= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:181:4: ^( Expr_Alloc a= type_name b= ident (c= expr )? )
			{
			DebugLocation(181, 4);
			DebugLocation(181, 6);
			Match(input,Expr_Alloc,Follow._Expr_Alloc_in_alloc_expr785); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(181, 18);
			PushFollow(Follow._type_name_in_alloc_expr789);
			a=type_name();
			PopFollow();

			DebugLocation(181, 30);
			PushFollow(Follow._ident_in_alloc_expr793);
			b=ident();
			PopFollow();

			DebugLocation(181, 37);
			// SugarWalker.g:181:37: (c= expr )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==Expr_Alloc||(LA29_0>=Expr_Call && LA29_0<=Expr_Return)||(LA29_0>=IDENT && LA29_0<=INT)||LA29_0==STRING||(LA29_0>=29 && LA29_0<=32)||(LA29_0>=34 && LA29_0<=35)||LA29_0==38||LA29_0==40||(LA29_0>=43 && LA29_0<=48)||LA29_0==DOUBLE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:181:38: c= expr
				{
				DebugLocation(181, 39);
				PushFollow(Follow._expr_in_alloc_expr798);
				c=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(182, 2);

					value = new ExprAlloc();
					value.Type = a;
					value.Name = b;
					value.Expr = c;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 16);
			LeaveRule("alloc_expr", 16);
			LeaveRule_alloc_expr();
		}
		DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_args_list();
	partial void LeaveRule_args_list();

	// $ANTLR start "args_list"
	// SugarWalker.g:189:1: args_list returns [List<Expr> value] : (a= expr )* ;
	[GrammarRule("args_list")]
	private List<Expr> args_list()
	{
		EnterRule_args_list();
		EnterRule("args_list", 17);
		TraceIn("args_list", 17);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "args_list");
		DebugLocation(189, 1);
		try
		{
			// SugarWalker.g:194:2: ( (a= expr )* )
			DebugEnterAlt(1);
			// SugarWalker.g:194:4: (a= expr )*
			{
			DebugLocation(194, 4);
			// SugarWalker.g:194:4: (a= expr )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==Expr_Alloc||(LA30_0>=Expr_Call && LA30_0<=Expr_Return)||(LA30_0>=IDENT && LA30_0<=INT)||LA30_0==STRING||(LA30_0>=29 && LA30_0<=32)||(LA30_0>=34 && LA30_0<=35)||LA30_0==38||LA30_0==40||(LA30_0>=43 && LA30_0<=48)||LA30_0==DOUBLE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:194:5: a= expr
					{
					DebugLocation(194, 6);
					PushFollow(Follow._expr_in_args_list826);
					a=expr();
					PopFollow();

					DebugLocation(194, 12);
					 value.Add(a); 

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("args_list", 17);
			LeaveRule("args_list", 17);
			LeaveRule_args_list();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "args_list"); }
		return value;

	}
	// $ANTLR end "args_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:197:1: call_expr returns [Expr value] : ( ^( Expr_Call a= expr b= args_list ) | ^( Expr_Dict a= expr c= expr ) );
	[GrammarRule("call_expr")]
	private Expr call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 18);
		TraceIn("call_expr", 18);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(197, 1);
		try
		{
			// SugarWalker.g:198:2: ( ^( Expr_Call a= expr b= args_list ) | ^( Expr_Dict a= expr c= expr ) )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==Expr_Call))
			{
				alt31 = 1;
			}
			else if ((LA31_0==Expr_Dict))
			{
				alt31 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:198:4: ^( Expr_Call a= expr b= args_list )
				{
				DebugLocation(198, 4);
				DebugLocation(198, 6);
				Match(input,Expr_Call,Follow._Expr_Call_in_call_expr846); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(198, 17);
				PushFollow(Follow._expr_in_call_expr850);
				a=expr();
				PopFollow();

				DebugLocation(198, 24);
				PushFollow(Follow._args_list_in_call_expr854);
				b=args_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(199, 2);

						value = new ExprCall(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:202:4: ^( Expr_Dict a= expr c= expr )
				{
				DebugLocation(202, 4);
				DebugLocation(202, 6);
				Match(input,Expr_Dict,Follow._Expr_Dict_in_call_expr864); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(202, 17);
				PushFollow(Follow._expr_in_call_expr868);
				a=expr();
				PopFollow();

				DebugLocation(202, 24);
				PushFollow(Follow._expr_in_call_expr872);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(203, 2);

						value = new ExprDict(a, c);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 18);
			LeaveRule("call_expr", 18);
			LeaveRule_call_expr();
		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dot_expr();
	partial void LeaveRule_dot_expr();

	// $ANTLR start "dot_expr"
	// SugarWalker.g:208:1: dot_expr returns [ExprDot value] : ^( Expr_Dot a= expr b= IDENT ) ;
	[GrammarRule("dot_expr")]
	private ExprDot dot_expr()
	{
		EnterRule_dot_expr();
		EnterRule("dot_expr", 19);
		TraceIn("dot_expr", 19);
		ExprDot value = default(ExprDot);


		CommonTree b = default(CommonTree);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "dot_expr");
		DebugLocation(208, 1);
		try
		{
			// SugarWalker.g:209:2: ( ^( Expr_Dot a= expr b= IDENT ) )
			DebugEnterAlt(1);
			// SugarWalker.g:209:4: ^( Expr_Dot a= expr b= IDENT )
			{
			DebugLocation(209, 4);
			DebugLocation(209, 6);
			Match(input,Expr_Dot,Follow._Expr_Dot_in_dot_expr893); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(209, 16);
			PushFollow(Follow._expr_in_dot_expr897);
			a=expr();
			PopFollow();

			DebugLocation(209, 23);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_dot_expr901); 

			Match(input, TokenTypes.Up, null); 

			DebugLocation(210, 2);

					value = new ExprDot();
					value.Expr = a;
					value.Name = b.Text;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dot_expr", 19);
			LeaveRule("dot_expr", 19);
			LeaveRule_dot_expr();
		}
		DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "dot_expr"); }
		return value;

	}
	// $ANTLR end "dot_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:217:1: new_expr returns [ExprNew value] : ^( Expr_New a= IDENT (b= expr )+ ) ;
	[GrammarRule("new_expr")]
	private ExprNew new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 20);
		TraceIn("new_expr", 20);
		ExprNew value = default(ExprNew);


		CommonTree a = default(CommonTree);
		Expr b = default(Expr);


			value = new ExprNew();

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(217, 1);
		try
		{
			// SugarWalker.g:222:2: ( ^( Expr_New a= IDENT (b= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:222:4: ^( Expr_New a= IDENT (b= expr )+ )
			{
			DebugLocation(222, 4);
			DebugLocation(222, 6);
			Match(input,Expr_New,Follow._Expr_New_in_new_expr926); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(222, 16);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_new_expr930); 
			DebugLocation(222, 23);
			 value.ElemType = a.Text; 
			DebugLocation(222, 53);
			// SugarWalker.g:222:53: (b= expr )+
			int cnt32=0;
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==Expr_Alloc||(LA32_0>=Expr_Call && LA32_0<=Expr_Return)||(LA32_0>=IDENT && LA32_0<=INT)||LA32_0==STRING||(LA32_0>=29 && LA32_0<=32)||(LA32_0>=34 && LA32_0<=35)||LA32_0==38||LA32_0==40||(LA32_0>=43 && LA32_0<=48)||LA32_0==DOUBLE))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:222:54: b= expr
					{
					DebugLocation(222, 55);
					PushFollow(Follow._expr_in_new_expr937);
					b=expr();
					PopFollow();

					DebugLocation(222, 61);
					 value.Ranges.Add(b); 

					}
					break;

				default:
					if (cnt32 >= 1)
						goto loop32;

					EarlyExitException eee32 = new EarlyExitException( 32, input );
					DebugRecognitionException(eee32);
					throw eee32;
				}
				cnt32++;
			}
			loop32:
				;

			} finally { DebugExitSubRule(32); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 20);
			LeaveRule("new_expr", 20);
			LeaveRule_new_expr();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_block_expr();
	partial void LeaveRule_block_expr();

	// $ANTLR start "block_expr"
	// SugarWalker.g:225:1: block_expr returns [ExprBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("block_expr")]
	private ExprBlock block_expr()
	{
		EnterRule_block_expr();
		EnterRule("block_expr", 21);
		TraceIn("block_expr", 21);
		ExprBlock value = default(ExprBlock);


		Stmt a = default(Stmt);


			value = new ExprBlock();

		try { DebugEnterRule(GrammarFileName, "block_expr");
		DebugLocation(225, 4);
		try
		{
			// SugarWalker.g:230:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:230:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(230, 4);
			Match(input,INDENT,Follow._INDENT_in_block_expr962); 
			DebugLocation(230, 11);
			// SugarWalker.g:230:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				try
				{
					alt34 = dfa34.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:230:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(230, 12);
					// SugarWalker.g:230:12: ( NEWLINE )+
					int cnt33=0;
					try { DebugEnterSubRule(33);
					while (true)
					{
						int alt33=2;
						try { DebugEnterDecision(33, false);
						int LA33_0 = input.LA(1);

						if ((LA33_0==NEWLINE))
						{
							alt33 = 1;
						}


						} finally { DebugExitDecision(33); }
						switch (alt33)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:230:12: NEWLINE
							{
							DebugLocation(230, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_block_expr965); 

							}
							break;

						default:
							if (cnt33 >= 1)
								goto loop33;

							EarlyExitException eee33 = new EarlyExitException( 33, input );
							DebugRecognitionException(eee33);
							throw eee33;
						}
						cnt33++;
					}
					loop33:
						;

					} finally { DebugExitSubRule(33); }

					DebugLocation(230, 22);
					PushFollow(Follow._stmt_in_block_expr970);
					a=stmt();
					PopFollow();

					DebugLocation(230, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }

			DebugLocation(230, 58);
			// SugarWalker.g:230:58: ( NEWLINE )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==NEWLINE))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:230:58: NEWLINE
					{
					DebugLocation(230, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_block_expr976); 

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }

			DebugLocation(230, 67);
			Match(input,DEDENT,Follow._DEDENT_in_block_expr979); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block_expr", 21);
			LeaveRule("block_expr", 21);
			LeaveRule_block_expr();
		}
		DebugLocation(231, 4);
		} finally { DebugExitRule(GrammarFileName, "block_expr"); }
		return value;

	}
	// $ANTLR end "block_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:234:1: expr returns [Expr value] : (alloc= alloc_expr |call= call_expr |dot= dot_expr |newExpr= new_expr |blockExpr= block_expr | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Return (a= expr )? ) | ^( '=' a= expr b= expr ) | ^( '+' a= expr b= expr ) | ^( '-' a= expr (b= expr )? ) | ^( '*' a= expr b= expr ) | ^( '/' a= expr b= expr ) | ^( '%' a= expr b= expr ) | ^( '==' a= expr b= expr ) | ^( '>' a= expr b= expr ) | ^( '>=' a= expr b= expr ) | ^( '<' a= expr b= expr ) | ^( '<=' a= expr b= expr ) | ^( '!=' a= expr b= expr ) | ^( '!' a= expr ) | ^( '&' a= expr ) | INT | DOUBLE | IDENT | STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 22);
		TraceIn("expr", 22);
		Expr value = default(Expr);


		CommonTree INT1 = default(CommonTree);
		CommonTree DOUBLE2 = default(CommonTree);
		CommonTree IDENT3 = default(CommonTree);
		CommonTree STRING4 = default(CommonTree);
		ExprAlloc alloc = default(ExprAlloc);
		Expr call = default(Expr);
		ExprDot dot = default(ExprDot);
		ExprNew newExpr = default(ExprNew);
		ExprBlock blockExpr = default(ExprBlock);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(234, 1);
		try
		{
			// SugarWalker.g:235:5: (alloc= alloc_expr |call= call_expr |dot= dot_expr |newExpr= new_expr |blockExpr= block_expr | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Return (a= expr )? ) | ^( '=' a= expr b= expr ) | ^( '+' a= expr b= expr ) | ^( '-' a= expr (b= expr )? ) | ^( '*' a= expr b= expr ) | ^( '/' a= expr b= expr ) | ^( '%' a= expr b= expr ) | ^( '==' a= expr b= expr ) | ^( '>' a= expr b= expr ) | ^( '>=' a= expr b= expr ) | ^( '<' a= expr b= expr ) | ^( '<=' a= expr b= expr ) | ^( '!=' a= expr b= expr ) | ^( '!' a= expr ) | ^( '&' a= expr ) | INT | DOUBLE | IDENT | STRING )
			int alt38=25;
			try { DebugEnterDecision(38, false);
			switch (input.LA(1))
			{
			case Expr_Alloc:
				{
				alt38 = 1;
				}
				break;
			case Expr_Call:
			case Expr_Dict:
				{
				alt38 = 2;
				}
				break;
			case Expr_Dot:
				{
				alt38 = 3;
				}
				break;
			case Expr_New:
				{
				alt38 = 4;
				}
				break;
			case INDENT:
				{
				alt38 = 5;
				}
				break;
			case Expr_Cond:
				{
				alt38 = 6;
				}
				break;
			case Expr_Return:
				{
				alt38 = 7;
				}
				break;
			case 45:
				{
				alt38 = 8;
				}
				break;
			case 35:
				{
				alt38 = 9;
				}
				break;
			case 38:
				{
				alt38 = 10;
				}
				break;
			case 34:
				{
				alt38 = 11;
				}
				break;
			case 40:
				{
				alt38 = 12;
				}
				break;
			case 31:
				{
				alt38 = 13;
				}
				break;
			case 46:
				{
				alt38 = 14;
				}
				break;
			case 47:
				{
				alt38 = 15;
				}
				break;
			case 48:
				{
				alt38 = 16;
				}
				break;
			case 43:
				{
				alt38 = 17;
				}
				break;
			case 44:
				{
				alt38 = 18;
				}
				break;
			case 30:
				{
				alt38 = 19;
				}
				break;
			case 29:
				{
				alt38 = 20;
				}
				break;
			case 32:
				{
				alt38 = 21;
				}
				break;
			case INT:
				{
				alt38 = 22;
				}
				break;
			case DOUBLE:
				{
				alt38 = 23;
				}
				break;
			case IDENT:
				{
				alt38 = 24;
				}
				break;
			case STRING:
				{
				alt38 = 25;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:235:7: alloc= alloc_expr
				{
				DebugLocation(235, 12);
				PushFollow(Follow._alloc_expr_in_expr1004);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(236, 2);

						value = alloc;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:239:4: call= call_expr
				{
				DebugLocation(239, 8);
				PushFollow(Follow._call_expr_in_expr1014);
				call=call_expr();
				PopFollow();

				DebugLocation(240, 2);

						value = call;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:243:4: dot= dot_expr
				{
				DebugLocation(243, 7);
				PushFollow(Follow._dot_expr_in_expr1024);
				dot=dot_expr();
				PopFollow();

				DebugLocation(244, 2);

						value = dot;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:247:4: newExpr= new_expr
				{
				DebugLocation(247, 11);
				PushFollow(Follow._new_expr_in_expr1034);
				newExpr=new_expr();
				PopFollow();

				DebugLocation(248, 2);

						value = newExpr;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:251:4: blockExpr= block_expr
				{
				DebugLocation(251, 13);
				PushFollow(Follow._block_expr_in_expr1044);
				blockExpr=block_expr();
				PopFollow();

				DebugLocation(252, 2);

						value = blockExpr;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:255:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(255, 4);
				DebugLocation(255, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr1053); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(255, 17);
				PushFollow(Follow._expr_in_expr1057);
				a=expr();
				PopFollow();

				DebugLocation(255, 24);
				PushFollow(Follow._expr_in_expr1061);
				b=expr();
				PopFollow();

				DebugLocation(255, 31);
				PushFollow(Follow._expr_in_expr1065);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(256, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:259:4: ^( Expr_Return (a= expr )? )
				{
				DebugLocation(259, 4);
				DebugLocation(259, 6);
				Match(input,Expr_Return,Follow._Expr_Return_in_expr1075); 

				if (input.LA(1) == TokenTypes.Down)
				{
					Match(input, TokenTypes.Down, null); 
					DebugLocation(259, 18);
					// SugarWalker.g:259:18: (a= expr )?
					int alt36=2;
					try { DebugEnterSubRule(36);
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==Expr_Alloc||(LA36_0>=Expr_Call && LA36_0<=Expr_Return)||(LA36_0>=IDENT && LA36_0<=INT)||LA36_0==STRING||(LA36_0>=29 && LA36_0<=32)||(LA36_0>=34 && LA36_0<=35)||LA36_0==38||LA36_0==40||(LA36_0>=43 && LA36_0<=48)||LA36_0==DOUBLE))
					{
						alt36 = 1;
					}
					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:259:19: a= expr
						{
						DebugLocation(259, 20);
						PushFollow(Follow._expr_in_expr1080);
						a=expr();
						PopFollow();


						}
						break;

					}
					} finally { DebugExitSubRule(36); }


					Match(input, TokenTypes.Up, null); 
				}

				DebugLocation(260, 2);

						value = new ExprReturn(a);
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:263:4: ^( '=' a= expr b= expr )
				{
				DebugLocation(263, 4);
				DebugLocation(263, 6);
				Match(input,45,Follow._45_in_expr1092); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(263, 11);
				PushFollow(Follow._expr_in_expr1096);
				a=expr();
				PopFollow();

				DebugLocation(263, 18);
				PushFollow(Follow._expr_in_expr1100);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(264, 2);

						value = new ExprAssign(a, b);
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:267:4: ^( '+' a= expr b= expr )
				{
				DebugLocation(267, 4);
				DebugLocation(267, 6);
				Match(input,35,Follow._35_in_expr1110); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(267, 11);
				PushFollow(Follow._expr_in_expr1114);
				a=expr();
				PopFollow();

				DebugLocation(267, 18);
				PushFollow(Follow._expr_in_expr1118);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(268, 2);

						value = new ExprBin("+", a, b);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:271:4: ^( '-' a= expr (b= expr )? )
				{
				DebugLocation(271, 4);
				DebugLocation(271, 6);
				Match(input,38,Follow._38_in_expr1128); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(271, 11);
				PushFollow(Follow._expr_in_expr1132);
				a=expr();
				PopFollow();

				DebugLocation(271, 17);
				// SugarWalker.g:271:17: (b= expr )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==Expr_Alloc||(LA37_0>=Expr_Call && LA37_0<=Expr_Return)||(LA37_0>=IDENT && LA37_0<=INT)||LA37_0==STRING||(LA37_0>=29 && LA37_0<=32)||(LA37_0>=34 && LA37_0<=35)||LA37_0==38||LA37_0==40||(LA37_0>=43 && LA37_0<=48)||LA37_0==DOUBLE))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:271:18: b= expr
					{
					DebugLocation(271, 19);
					PushFollow(Follow._expr_in_expr1137);
					b=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(272, 2);

						if (b != null)
						{
							value = new ExprBin("-", a, b);
						}
						else
						{
							value = new ExprPrefix("-", a);
						}
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:282:4: ^( '*' a= expr b= expr )
				{
				DebugLocation(282, 4);
				DebugLocation(282, 6);
				Match(input,34,Follow._34_in_expr1149); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(282, 11);
				PushFollow(Follow._expr_in_expr1153);
				a=expr();
				PopFollow();

				DebugLocation(282, 18);
				PushFollow(Follow._expr_in_expr1157);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(283, 2);

						value = new ExprBin("*", a, b);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:286:4: ^( '/' a= expr b= expr )
				{
				DebugLocation(286, 4);
				DebugLocation(286, 6);
				Match(input,40,Follow._40_in_expr1167); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(286, 11);
				PushFollow(Follow._expr_in_expr1171);
				a=expr();
				PopFollow();

				DebugLocation(286, 18);
				PushFollow(Follow._expr_in_expr1175);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(287, 2);

						value = new ExprBin("/", a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:290:4: ^( '%' a= expr b= expr )
				{
				DebugLocation(290, 4);
				DebugLocation(290, 6);
				Match(input,31,Follow._31_in_expr1185); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(290, 11);
				PushFollow(Follow._expr_in_expr1189);
				a=expr();
				PopFollow();

				DebugLocation(290, 18);
				PushFollow(Follow._expr_in_expr1193);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(291, 2);

						value = new ExprBin("%", a, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:294:4: ^( '==' a= expr b= expr )
				{
				DebugLocation(294, 4);
				DebugLocation(294, 6);
				Match(input,46,Follow._46_in_expr1203); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(294, 12);
				PushFollow(Follow._expr_in_expr1207);
				a=expr();
				PopFollow();

				DebugLocation(294, 19);
				PushFollow(Follow._expr_in_expr1211);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(295, 2);

						value = new ExprBin("==", a, b);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:298:4: ^( '>' a= expr b= expr )
				{
				DebugLocation(298, 4);
				DebugLocation(298, 6);
				Match(input,47,Follow._47_in_expr1221); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(298, 11);
				PushFollow(Follow._expr_in_expr1225);
				a=expr();
				PopFollow();

				DebugLocation(298, 18);
				PushFollow(Follow._expr_in_expr1229);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(299, 2);

						value = new ExprBin(">", a, b);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:302:4: ^( '>=' a= expr b= expr )
				{
				DebugLocation(302, 4);
				DebugLocation(302, 6);
				Match(input,48,Follow._48_in_expr1239); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(302, 12);
				PushFollow(Follow._expr_in_expr1243);
				a=expr();
				PopFollow();

				DebugLocation(302, 19);
				PushFollow(Follow._expr_in_expr1247);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(303, 2);

						value = new ExprBin(">=", a, b);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:306:4: ^( '<' a= expr b= expr )
				{
				DebugLocation(306, 4);
				DebugLocation(306, 6);
				Match(input,43,Follow._43_in_expr1257); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(306, 11);
				PushFollow(Follow._expr_in_expr1261);
				a=expr();
				PopFollow();

				DebugLocation(306, 18);
				PushFollow(Follow._expr_in_expr1265);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(307, 2);

						value = new ExprBin("<", a, b);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:310:4: ^( '<=' a= expr b= expr )
				{
				DebugLocation(310, 4);
				DebugLocation(310, 6);
				Match(input,44,Follow._44_in_expr1275); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(310, 12);
				PushFollow(Follow._expr_in_expr1279);
				a=expr();
				PopFollow();

				DebugLocation(310, 19);
				PushFollow(Follow._expr_in_expr1283);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(311, 2);

						value = new ExprBin("<=", a, b);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:314:4: ^( '!=' a= expr b= expr )
				{
				DebugLocation(314, 4);
				DebugLocation(314, 6);
				Match(input,30,Follow._30_in_expr1293); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(314, 12);
				PushFollow(Follow._expr_in_expr1297);
				a=expr();
				PopFollow();

				DebugLocation(314, 19);
				PushFollow(Follow._expr_in_expr1301);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(315, 2);

						value = new ExprBin("!=", a, b);
					

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:318:4: ^( '!' a= expr )
				{
				DebugLocation(318, 4);
				DebugLocation(318, 6);
				Match(input,29,Follow._29_in_expr1311); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(318, 11);
				PushFollow(Follow._expr_in_expr1315);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(319, 2);

						value = new ExprPrefix("!", a);
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:322:4: ^( '&' a= expr )
				{
				DebugLocation(322, 4);
				DebugLocation(322, 6);
				Match(input,32,Follow._32_in_expr1325); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(322, 11);
				PushFollow(Follow._expr_in_expr1329);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(323, 2);

						value = new ExprPrefix("&", a);
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:326:4: INT
				{
				DebugLocation(326, 4);
				INT1=(CommonTree)Match(input,INT,Follow._INT_in_expr1338); 
				DebugLocation(327, 5);

				        value = new ExprConst(INT1.Text);
				    

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// SugarWalker.g:330:4: DOUBLE
				{
				DebugLocation(330, 4);
				DOUBLE2=(CommonTree)Match(input,DOUBLE,Follow._DOUBLE_in_expr1349); 
				DebugLocation(331, 2);

						value = new ExprConst(DOUBLE2.Text);
					

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// SugarWalker.g:334:4: IDENT
				{
				DebugLocation(334, 4);
				IDENT3=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr1357); 
				DebugLocation(335, 2);

						value = new ExprConst(IDENT3.Text);
					

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// SugarWalker.g:338:4: STRING
				{
				DebugLocation(338, 4);
				STRING4=(CommonTree)Match(input,STRING,Follow._STRING_in_expr1365); 
				DebugLocation(339, 2);

						value = new ExprConst(STRING4.Text);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 22);
			LeaveRule("expr", 22);
			LeaveRule_expr();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA6 dfa6;
	private DFA20 dfa20;
	private DFA24 dfa24;
	private DFA34 dfa34;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa6 = new DFA6( this );
		dfa20 = new DFA20( this );
		dfa24 = new DFA24( this );
		dfa34 = new DFA34( this );
	}

	private class DFA6 : DFA
	{
		private const string DFA6_eotS =
			"\x4\xFFFF";
		private const string DFA6_eofS =
			"\x4\xFFFF";
		private const string DFA6_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA6_maxS =
			"\x1\x15\x1\x19\x2\xFFFF";
		private const string DFA6_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA6_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA6_transitionS =
			{
				"\x1\x2\xF\xFFFF\x1\x1",
				"\x1\x2\xF\xFFFF\x1\x1\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA6_eot = DFA.UnpackEncodedString(DFA6_eotS);
		private static readonly short[] DFA6_eof = DFA.UnpackEncodedString(DFA6_eofS);
		private static readonly char[] DFA6_min = DFA.UnpackEncodedStringToUnsignedChars(DFA6_minS);
		private static readonly char[] DFA6_max = DFA.UnpackEncodedStringToUnsignedChars(DFA6_maxS);
		private static readonly short[] DFA6_accept = DFA.UnpackEncodedString(DFA6_acceptS);
		private static readonly short[] DFA6_special = DFA.UnpackEncodedString(DFA6_specialS);
		private static readonly short[][] DFA6_transition;

		static DFA6()
		{
			int numStates = DFA6_transitionS.Length;
			DFA6_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA6_transition[i] = DFA.UnpackEncodedString(DFA6_transitionS[i]);
			}
		}

		public DFA6( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 6;
			this.eot = DFA6_eot;
			this.eof = DFA6_eof;
			this.min = DFA6_min;
			this.max = DFA6_max;
			this.accept = DFA6_accept;
			this.special = DFA6_special;
			this.transition = DFA6_transition;
		}

		public override string Description { get { return "()+ loopback of 43:12: ( ( NEWLINE )+ b= STRING )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x4\xFFFF";
		private const string DFA20_eofS =
			"\x4\xFFFF";
		private const string DFA20_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA20_maxS =
			"\x1\x15\x1\x3E\x2\xFFFF";
		private const string DFA20_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA20_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x1\x2\xF\xFFFF\x1\x1",
				"\x1\x2\x1\xFFFF\x1\x3\x2\xFFFF\x6\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x1"+
				"\x3\xFFFF\x1\x3\x3\xFFFF\x4\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3\x2\xFFFF\x6\x3\x4\xFFFF\x2\x3\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "()* loopback of 105:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA24 : DFA
	{
		private const string DFA24_eotS =
			"\x4\xFFFF";
		private const string DFA24_eofS =
			"\x4\xFFFF";
		private const string DFA24_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA24_maxS =
			"\x1\x33\x1\x3E\x2\xFFFF";
		private const string DFA24_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA24_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA24_transitionS =
			{
				"\x1\x3\xF\xFFFF\x1\x1\x1D\xFFFF\x1\x2",
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x6\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x1"+
				"\x3\xFFFF\x1\x3\x3\xFFFF\x4\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3\x2\xFFFF\x6\x3\x2\xFFFF\x1\x2\x1\xFFFF\x2\x3\x5\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA24_eot = DFA.UnpackEncodedString(DFA24_eotS);
		private static readonly short[] DFA24_eof = DFA.UnpackEncodedString(DFA24_eofS);
		private static readonly char[] DFA24_min = DFA.UnpackEncodedStringToUnsignedChars(DFA24_minS);
		private static readonly char[] DFA24_max = DFA.UnpackEncodedStringToUnsignedChars(DFA24_maxS);
		private static readonly short[] DFA24_accept = DFA.UnpackEncodedString(DFA24_acceptS);
		private static readonly short[] DFA24_special = DFA.UnpackEncodedString(DFA24_specialS);
		private static readonly short[][] DFA24_transition;

		static DFA24()
		{
			int numStates = DFA24_transitionS.Length;
			DFA24_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA24_transition[i] = DFA.UnpackEncodedString(DFA24_transitionS[i]);
			}
		}

		public DFA24( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 24;
			this.eot = DFA24_eot;
			this.eof = DFA24_eof;
			this.min = DFA24_min;
			this.max = DFA24_max;
			this.accept = DFA24_accept;
			this.special = DFA24_special;
			this.transition = DFA24_transition;
		}

		public override string Description { get { return "116:37: ( ( NEWLINE )* 'else' c= stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\x4\xFFFF";
		private const string DFA34_eofS =
			"\x4\xFFFF";
		private const string DFA34_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA34_maxS =
			"\x1\x15\x1\x3E\x2\xFFFF";
		private const string DFA34_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA34_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x2\xF\xFFFF\x1\x1",
				"\x1\x2\x1\xFFFF\x1\x3\x2\xFFFF\x6\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x1"+
				"\x3\xFFFF\x1\x3\x3\xFFFF\x4\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3\x2\xFFFF\x6\x3\x4\xFFFF\x2\x3\x5\xFFFF\x1\x3\x1\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "()* loopback of 230:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root87 = new BitSet(new ulong[]{0x490000000220002UL});
		public static readonly BitSet _NEWLINE_in_root92 = new BitSet(new ulong[]{0x490000000220002UL});
		public static readonly BitSet _func_def_in_node114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _imports_in_node125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_in_node136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_in_node147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_imports169 = new BitSet(new ulong[]{0x2040002UL});
		public static readonly BitSet _STRING_in_imports176 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _INDENT_in_imports186 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _NEWLINE_in_imports189 = new BitSet(new ulong[]{0x2200000UL});
		public static readonly BitSet _STRING_in_imports196 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _NEWLINE_in_imports202 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _DEDENT_in_imports205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_enum228 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_enum232 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_enum236 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_enum240 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_enum245 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_enum249 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _58_in_struct273 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_struct277 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _INDENT_in_struct282 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _NEWLINE_in_struct285 = new BitSet(new ulong[]{0x220080UL});
		public static readonly BitSet _struct_stmt_in_struct290 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _DEDENT_in_struct297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_def_in_struct_stmt315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_struct_stmt324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_type_name348 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _Expr_Dict_in_type_name353 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _49_in_type_name355 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _type_name_in_func_def381 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_func_def385 = new BitSet(new ulong[]{0x80000000400UL});
		public static readonly BitSet _43_in_func_def388 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_func_def393 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _47_in_func_def399 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_func_def403 = new BitSet(new ulong[]{0x4001F94FE20EFC80UL});
		public static readonly BitSet _expr_in_func_def408 = new BitSet(new ulong[]{0x2200000000UL});
		public static readonly BitSet _37_in_func_def413 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_func_def417 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_func_def421 = new BitSet(new ulong[]{0x2200000000UL});
		public static readonly BitSet _33_in_func_def427 = new BitSet(new ulong[]{0x200000040000UL});
		public static readonly BitSet _stmt_block_in_func_def434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _45_in_func_def442 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_func_def446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block472 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block475 = new BitSet(new ulong[]{0x5061F94DE22EFC80UL});
		public static readonly BitSet _stmt_in_stmt_block480 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block486 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _DEDENT_in_stmt_block489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_stmt_if555 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_stmt_if557 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_stmt_if561 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_stmt_if563 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _stmt_block_in_stmt_if567 = new BitSet(new ulong[]{0x8000000200002UL});
		public static readonly BitSet _NEWLINE_in_stmt_if570 = new BitSet(new ulong[]{0x8000000200000UL});
		public static readonly BitSet _51_in_stmt_if573 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _stmt_block_in_stmt_if577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _60_in_stmt_while597 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_stmt_while599 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_stmt_while603 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_stmt_while605 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _stmt_block_in_stmt_while609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_stmt_for632 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_stmt_for634 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_stmt_for638 = new BitSet(new ulong[]{0x800040000000000UL});
		public static readonly BitSet _42_in_stmt_for645 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_stmt_for649 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_stmt_for651 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_stmt_for655 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _59_in_stmt_for668 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_stmt_for672 = new BitSet(new ulong[]{0x4000200000000UL});
		public static readonly BitSet _50_in_stmt_for683 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_stmt_for687 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_stmt_for701 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _stmt_block_in_stmt_for705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list751 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_ident_list757 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ident_in_ident_list761 = new BitSet(new ulong[]{0x42000000000UL});
		public static readonly BitSet _42_in_ident_list767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Alloc_in_alloc_expr785 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr789 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _ident_in_alloc_expr793 = new BitSet(new ulong[]{0x4001F94DE20EFC88UL});
		public static readonly BitSet _expr_in_alloc_expr798 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_args_list826 = new BitSet(new ulong[]{0x4001F94DE20EFC82UL});
		public static readonly BitSet _Expr_Call_in_call_expr846 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr850 = new BitSet(new ulong[]{0x4001F94DE20EFC88UL});
		public static readonly BitSet _args_list_in_call_expr854 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_call_expr864 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr868 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_call_expr872 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dot_in_dot_expr893 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dot_expr897 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_dot_expr901 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_in_new_expr926 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_new_expr930 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_new_expr937 = new BitSet(new ulong[]{0x4001F94DE20EFC88UL});
		public static readonly BitSet _INDENT_in_block_expr962 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _NEWLINE_in_block_expr965 = new BitSet(new ulong[]{0x5061F94DE22EFC80UL});
		public static readonly BitSet _stmt_in_block_expr970 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _NEWLINE_in_block_expr976 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _DEDENT_in_block_expr979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr1014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dot_expr_in_expr1024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr1034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_expr_in_expr1044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Cond_in_expr1053 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1057 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1061 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1065 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Return_in_expr1075 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1080 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _45_in_expr1092 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1096 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1100 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _35_in_expr1110 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1114 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1118 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _38_in_expr1128 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1132 = new BitSet(new ulong[]{0x4001F94DE20EFC88UL});
		public static readonly BitSet _expr_in_expr1137 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _34_in_expr1149 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1153 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1157 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _40_in_expr1167 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1171 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1175 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _31_in_expr1185 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1189 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1193 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _46_in_expr1203 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1207 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1211 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _47_in_expr1221 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1225 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1229 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _48_in_expr1239 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1243 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1247 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _43_in_expr1257 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1261 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1265 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _44_in_expr1275 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1279 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1283 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _30_in_expr1293 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1297 = new BitSet(new ulong[]{0x4001F94DE20EFC80UL});
		public static readonly BitSet _expr_in_expr1301 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _29_in_expr1311 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1315 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _32_in_expr1325 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1329 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INT_in_expr1338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_expr1349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_expr1357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr1365 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
