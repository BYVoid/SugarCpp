//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-06 09:47:56

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Linq", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "'\\'", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'defer'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'let'", "'namespace'", "'new'", "'return'", "'select'", "'try'", "'typedef'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc_Bracket=12;
	public const int Expr_Alloc_Equal=13;
	public const int Expr_Bin=14;
	public const int Expr_Bracket=15;
	public const int Expr_Call=16;
	public const int Expr_Call_With=17;
	public const int Expr_Cond=18;
	public const int Expr_Dict=19;
	public const int Expr_Infix=20;
	public const int Expr_Lambda=21;
	public const int Expr_New_Array=22;
	public const int Expr_New_Type=23;
	public const int Expr_Prefix=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int Generic_Patameters=29;
	public const int Global_Block=30;
	public const int IDENT=31;
	public const int INDENT=32;
	public const int Ident_List=33;
	public const int Import=34;
	public const int Left_Bracket=35;
	public const int LineComment=36;
	public const int Linq_From=37;
	public const int Linq_Let=38;
	public const int Linq_Prefix=39;
	public const int Linq_Where=40;
	public const int Match_Tuple=41;
	public const int NEWLINE=42;
	public const int NUMBER=43;
	public const int Namespace=44;
	public const int Right_Bracket=45;
	public const int Root=46;
	public const int SP=47;
	public const int STRING=48;
	public const int Stmt_Block=49;
	public const int Stmt_Defer=50;
	public const int Stmt_For=51;
	public const int Stmt_ForEach=52;
	public const int Stmt_If=53;
	public const int Stmt_Linq=54;
	public const int Stmt_Return=55;
	public const int Stmt_Try=56;
	public const int Stmt_Typedef=57;
	public const int Stmt_Using=58;
	public const int Stmt_While=59;
	public const int Type_IDENT=60;
	public const int Type_Ref=61;
	public const int Type_Tuple=62;
	public const int DOUBLE=132;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:24:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:24:4: ^( Root a= global_block )
			{
			DebugLocation(24, 4);
			DebugLocation(24, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(24, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(25, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:30:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		AttrAstNode a = default(AttrAstNode);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:35:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:35:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(35, 4);
			DebugLocation(35, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(35, 19);
				// SugarWalker.g:35:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||(LA1_0>=Stmt_Typedef && LA1_0<=Stmt_Using)||LA1_0==89))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:35:20: a= node
						{
						DebugLocation(35, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(35, 27);
						 value.List.Add(a); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(36, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:38:1: node returns [AttrAstNode value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private AttrAstNode node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AttrAstNode value = default(AttrAstNode);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		GlobalAlloc e = default(GlobalAlloc);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(38, 1);
		try
		{
			// SugarWalker.g:39:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 89:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:39:4: a= func_def
				{
				DebugLocation(39, 6);
				PushFollow(Follow._func_def_in_node134);
				a=func_def();
				PopFollow();

				DebugLocation(39, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:40:4: b= import_def
				{
				DebugLocation(40, 6);
				PushFollow(Follow._import_def_in_node145);
				b=import_def();
				PopFollow();

				DebugLocation(40, 19);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:41:4: c= enum_def
				{
				DebugLocation(41, 6);
				PushFollow(Follow._enum_def_in_node156);
				c=enum_def();
				PopFollow();

				DebugLocation(41, 17);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:42:4: d= class_def
				{
				DebugLocation(42, 6);
				PushFollow(Follow._class_def_in_node167);
				d=class_def();
				PopFollow();

				DebugLocation(42, 18);
				 value = d; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:43:4: e= global_alloc
				{
				DebugLocation(43, 6);
				PushFollow(Follow._global_alloc_in_node178);
				e=global_alloc();
				PopFollow();

				DebugLocation(43, 21);
				 value = e; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:44:4: f= global_using
				{
				DebugLocation(44, 6);
				PushFollow(Follow._global_using_in_node189);
				f=global_using();
				PopFollow();

				DebugLocation(44, 21);
				 value = f; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:45:4: g= global_typedef
				{
				DebugLocation(45, 6);
				PushFollow(Follow._global_typedef_in_node200);
				g=global_typedef();
				PopFollow();

				DebugLocation(45, 23);
				 value = g; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:46:4: h= namespace_def
				{
				DebugLocation(46, 6);
				PushFollow(Follow._namespace_def_in_node211);
				h=namespace_def();
				PopFollow();

				DebugLocation(46, 22);
				 value = h; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:49:1: global_using returns [GlobalUsing value] : a= stmt_using ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		StmtUsing a = default(StmtUsing);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(49, 1);
		try
		{
			// SugarWalker.g:50:2: (a= stmt_using )
			DebugEnterAlt(1);
			// SugarWalker.g:50:4: a= stmt_using
			{
			DebugLocation(50, 5);
			PushFollow(Follow._stmt_using_in_global_using229);
			a=stmt_using();
			PopFollow();

			DebugLocation(51, 2);

					value = new GlobalUsing(a.List);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:56:1: global_alloc returns [GlobalAlloc value] : ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr )? ) | ^( ':=' (attr= attribute )? a= ident c= expr ) );
	[GrammarRule("global_alloc")]
	private GlobalAlloc global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		GlobalAlloc value = default(GlobalAlloc);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(56, 1);
		try
		{
			// SugarWalker.g:57:2: ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr )? ) | ^( ':=' (attr= attribute )? a= ident c= expr ) )
			int alt8=3;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt8 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt8 = 2;
				}
				break;
			case 89:
				{
				alt8 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:57:4: ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr )? )
				{
				DebugLocation(57, 4);
				DebugLocation(57, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc248); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(57, 23);
				// SugarWalker.g:57:23: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:57:24: attr= attribute
					{
					DebugLocation(57, 28);
					PushFollow(Follow._attribute_in_global_alloc253);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(57, 42);
				PushFollow(Follow._type_name_in_global_alloc259);
				a=type_name();
				PopFollow();

				DebugLocation(57, 54);
				PushFollow(Follow._ident_list_in_global_alloc263);
				b=ident_list();
				PopFollow();

				DebugLocation(57, 66);
				// SugarWalker.g:57:66: (c= expr )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>=Expr_Access && LA4_0<=Expr_Tuple)||LA4_0==IDENT||LA4_0==Match_Tuple||LA4_0==NUMBER||LA4_0==STRING||LA4_0==66||LA4_0==69||LA4_0==73||LA4_0==76||LA4_0==80||LA4_0==86||LA4_0==89||LA4_0==93||LA4_0==95||LA4_0==101||LA4_0==106||LA4_0==129||LA4_0==DOUBLE))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:57:67: c= expr
					{
					DebugLocation(57, 68);
					PushFollow(Follow._expr_in_global_alloc268);
					c=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(58, 2);

						value = new GlobalAlloc(a, b, c, attr, true);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:61:4: ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr )? )
				{
				DebugLocation(61, 4);
				DebugLocation(61, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc280); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(61, 25);
				// SugarWalker.g:61:25: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:61:26: attr= attribute
					{
					DebugLocation(61, 30);
					PushFollow(Follow._attribute_in_global_alloc285);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(61, 44);
				PushFollow(Follow._type_name_in_global_alloc291);
				a=type_name();
				PopFollow();

				DebugLocation(61, 56);
				PushFollow(Follow._ident_list_in_global_alloc295);
				b=ident_list();
				PopFollow();

				DebugLocation(61, 68);
				// SugarWalker.g:61:68: (c= expr )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>=Expr_Access && LA6_0<=Expr_Tuple)||LA6_0==IDENT||LA6_0==Match_Tuple||LA6_0==NUMBER||LA6_0==STRING||LA6_0==66||LA6_0==69||LA6_0==73||LA6_0==76||LA6_0==80||LA6_0==86||LA6_0==89||LA6_0==93||LA6_0==95||LA6_0==101||LA6_0==106||LA6_0==129||LA6_0==DOUBLE))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:61:69: c= expr
					{
					DebugLocation(61, 70);
					PushFollow(Follow._expr_in_global_alloc300);
					c=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(62, 2);

						value = new GlobalAlloc(a, b, c, attr, false);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:65:4: ^( ':=' (attr= attribute )? a= ident c= expr )
				{
				DebugLocation(65, 4);
				DebugLocation(65, 6);
				Match(input,89,Follow._89_in_global_alloc312); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(65, 11);
				// SugarWalker.g:65:11: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:65:12: attr= attribute
					{
					DebugLocation(65, 16);
					PushFollow(Follow._attribute_in_global_alloc317);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(65, 30);
				PushFollow(Follow._ident_in_global_alloc323);
				a=ident();
				PopFollow();

				DebugLocation(65, 38);
				PushFollow(Follow._expr_in_global_alloc327);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(66, 2);

						value = new GlobalAlloc("auto", new List<string> { a }, c, attr, true);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:71:1: global_typedef returns [GlobalTypeDef value] : a= stmt_typedef ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		StmtTypeDef a = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(71, 1);
		try
		{
			// SugarWalker.g:72:2: (a= stmt_typedef )
			DebugEnterAlt(1);
			// SugarWalker.g:72:4: a= stmt_typedef
			{
			DebugLocation(72, 5);
			PushFollow(Follow._stmt_typedef_in_global_typedef348);
			a=stmt_typedef();
			PopFollow();

			DebugLocation(73, 2);

					value = new GlobalTypeDef(a.Type, a.Name);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(76, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:78:1: attribute_args returns [string value] : (a= ( NUMBER ) |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(78, 1);
		try
		{
			// SugarWalker.g:79:2: (a= ( NUMBER ) |a= STRING |b= ident )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt9 = 1;
				}
				break;
			case STRING:
				{
				alt9 = 2;
				}
				break;
			case IDENT:
				{
				alt9 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:79:4: a= ( NUMBER )
				{
				DebugLocation(79, 5);
				// SugarWalker.g:79:6: ( NUMBER )
				DebugEnterAlt(1);
				// SugarWalker.g:79:7: NUMBER
				{
				DebugLocation(79, 7);
				Match(input,NUMBER,Follow._NUMBER_in_attribute_args369); 

				}

				DebugLocation(80, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:83:4: a= STRING
				{
				DebugLocation(83, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args380); 
				DebugLocation(84, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:87:4: b= ident
				{
				DebugLocation(87, 5);
				PushFollow(Follow._ident_in_attribute_args390);
				b=ident();
				PopFollow();

				DebugLocation(88, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(91, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:93:1: attribute_item returns [Attr value] : ^( Attribute a= ident (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(93, 1);
		try
		{
			// SugarWalker.g:98:2: ( ^( Attribute a= ident (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:98:4: ^( Attribute a= ident (b= attribute_args )* )
			{
			DebugLocation(98, 4);
			DebugLocation(98, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item414); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(98, 17);
			PushFollow(Follow._ident_in_attribute_item418);
			a=ident();
			PopFollow();

			DebugLocation(98, 24);
			 value.Name = a; 
			DebugLocation(98, 45);
			// SugarWalker.g:98:45: (b= attribute_args )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==IDENT||LA10_0==NUMBER||LA10_0==STRING))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:98:46: b= attribute_args
					{
					DebugLocation(98, 47);
					PushFollow(Follow._attribute_args_in_attribute_item425);
					b=attribute_args();
					PopFollow();

					DebugLocation(98, 63);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:101:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(101, 1);
		try
		{
			// SugarWalker.g:106:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:106:4: (a= attribute_item )+
			{
			DebugLocation(106, 4);
			// SugarWalker.g:106:4: (a= attribute_item )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==Attribute))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:106:5: a= attribute_item
					{
					DebugLocation(106, 6);
					PushFollow(Follow._attribute_item_in_attribute453);
					a=attribute_item();
					PopFollow();

					DebugLocation(106, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:109:1: namespace_def returns [Namespace value] : ^( Namespace a= ident b= global_block ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(109, 1);
		try
		{
			// SugarWalker.g:110:2: ( ^( Namespace a= ident b= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:110:4: ^( Namespace a= ident b= global_block )
			{
			DebugLocation(110, 4);
			DebugLocation(110, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def474); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(110, 17);
			PushFollow(Follow._ident_in_namespace_def478);
			a=ident();
			PopFollow();

			DebugLocation(110, 25);
			PushFollow(Follow._global_block_in_namespace_def482);
			b=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(111, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:116:1: import_def returns [Import value] : ^( Import (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(116, 1);
		try
		{
			// SugarWalker.g:121:2: ( ^( Import (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:121:4: ^( Import (a= STRING )* )
			{
			DebugLocation(121, 4);
			DebugLocation(121, 6);
			Match(input,Import,Follow._Import_in_import_def507); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(121, 13);
				// SugarWalker.g:121:13: (a= STRING )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0==STRING))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:121:14: a= STRING
						{
						DebugLocation(121, 15);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def512); 
						DebugLocation(121, 23);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:124:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(124, 1);
		try
		{
			// SugarWalker.g:125:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:125:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(125, 4);
			DebugLocation(125, 6);
			Match(input,Enum,Follow._Enum_in_enum_def533); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(125, 11);
			// SugarWalker.g:125:11: (attr= attribute )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==Attribute))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:125:12: attr= attribute
				{
				DebugLocation(125, 16);
				PushFollow(Follow._attribute_in_enum_def538);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(125, 30);
			PushFollow(Follow._ident_in_enum_def544);
			a=ident();
			PopFollow();

			DebugLocation(125, 38);
			PushFollow(Follow._ident_list_in_enum_def548);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(126, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:131:1: class_def returns [Class value] : ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(131, 1);
		try
		{
			// SugarWalker.g:132:2: ( ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:132:4: ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(132, 4);
			DebugLocation(132, 6);
			Match(input,Class,Follow._Class_in_class_def568); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(132, 12);
			// SugarWalker.g:132:12: (attr= attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==Attribute))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:13: attr= attribute
				{
				DebugLocation(132, 17);
				PushFollow(Follow._attribute_in_class_def573);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(132, 31);
			PushFollow(Follow._ident_in_class_def579);
			a=ident();
			PopFollow();

			DebugLocation(132, 38);
			// SugarWalker.g:132:38: (b= generic_parameter )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==Generic_Patameters))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:39: b= generic_parameter
				{
				DebugLocation(132, 40);
				PushFollow(Follow._generic_parameter_in_class_def584);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(132, 61);
			// SugarWalker.g:132:61: (c= func_args )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==Func_Args))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:62: c= func_args
				{
				DebugLocation(132, 63);
				PushFollow(Follow._func_args_in_class_def591);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(132, 76);
			// SugarWalker.g:132:76: (d= ident_list )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Ident_List))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:77: d= ident_list
				{
				DebugLocation(132, 78);
				PushFollow(Follow._ident_list_in_class_def598);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(132, 92);
			// SugarWalker.g:132:92: (e= global_block )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==Global_Block))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:132:93: e= global_block
				{
				DebugLocation(132, 94);
				PushFollow(Follow._global_block_in_class_def605);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(133, 2);

					value = new Class(a, b, c, d, e, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:138:1: type_name returns [string value] : ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		string value = default(string);


		string a = default(string);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(138, 1);
		try
		{
			// SugarWalker.g:143:2: ( ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:143:4: ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* )
			{
			DebugLocation(143, 4);
			DebugLocation(143, 7);
			Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name633); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(143, 19);
			PushFollow(Follow._ident_in_type_name637);
			a=ident();
			PopFollow();

			DebugLocation(143, 26);
			 value+=a; 
			DebugLocation(144, 5);
			// SugarWalker.g:144:5: ( '<' (b= type_name )* '>' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==91))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:144:7: '<' (b= type_name )* '>'
				{
				DebugLocation(144, 7);
				Match(input,91,Follow._91_in_type_name647); 
				DebugLocation(144, 11);
				 value+="<"; bool isFirst = true; 
				DebugLocation(145, 6);
				// SugarWalker.g:145:6: (b= type_name )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==Type_IDENT))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:145:7: b= type_name
						{
						DebugLocation(145, 8);
						PushFollow(Follow._type_name_in_type_name659);
						b=type_name();
						PopFollow();

						DebugLocation(146, 3);

									if (!isFirst) value+=", ";
									isFirst = false;
									value+=b;
								

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(151, 3);
				Match(input,98,Follow._98_in_type_name669); 
				DebugLocation(151, 7);
				 value+=">"; 

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(152, 4);
			// SugarWalker.g:152:4: ( '*' | '[' ']' | '&' )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=4;
				try { DebugEnterDecision(21, false);
				switch (input.LA(1))
				{
				case 72:
					{
					alt21 = 1;
					}
					break;
				case 102:
					{
					alt21 = 2;
					}
					break;
				case 68:
					{
					alt21 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:152:6: '*'
					{
					DebugLocation(152, 6);
					Match(input,72,Follow._72_in_type_name680); 
					DebugLocation(152, 10);
					 value+="*"; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarWalker.g:153:6: '[' ']'
					{
					DebugLocation(153, 6);
					Match(input,102,Follow._102_in_type_name689); 
					DebugLocation(153, 10);
					Match(input,104,Follow._104_in_type_name691); 
					DebugLocation(153, 14);
					 value+="[]"; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarWalker.g:154:6: '&'
					{
					DebugLocation(154, 6);
					Match(input,68,Follow._68_in_type_name700); 
					DebugLocation(154, 10);
					 value+="&"; 

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:158:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 15);
		TraceIn("func_args", 15);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		Stmt a = default(Stmt);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(158, 1);
		try
		{
			// SugarWalker.g:163:2: ( ^( Func_Args (a= stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:163:4: ^( Func_Args (a= stmt_alloc )* )
			{
			DebugLocation(163, 4);
			DebugLocation(163, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args730); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(163, 16);
				// SugarWalker.g:163:16: (a= stmt_alloc )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if (((LA22_0>=Expr_Access && LA22_0<=Expr_Tuple)||LA22_0==IDENT||LA22_0==Match_Tuple||LA22_0==NUMBER||LA22_0==STRING||LA22_0==66||LA22_0==69||LA22_0==73||LA22_0==76||LA22_0==80||LA22_0==86||LA22_0==89||LA22_0==93||LA22_0==95||LA22_0==101||LA22_0==106||LA22_0==129||LA22_0==DOUBLE))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:163:17: a= stmt_alloc
						{
						DebugLocation(163, 18);
						PushFollow(Follow._stmt_alloc_in_func_args735);
						a=stmt_alloc();
						PopFollow();

						DebugLocation(164, 2);

								var b = (ExprAlloc)a;
								if (b.Type == "auto")
								{
									b.Type = "decltype";
								}
								value.Add(b);
							

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 15);
			LeaveRule("func_args", 15);
			LeaveRule_func_args();
		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:174:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 16);
		TraceIn("generic_parameter", 16);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(174, 1);
		try
		{
			// SugarWalker.g:179:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:179:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(179, 4);
			DebugLocation(179, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter762); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(179, 25);
				// SugarWalker.g:179:25: (a= ident )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==IDENT))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:179:26: a= ident
						{
						DebugLocation(179, 27);
						PushFollow(Follow._ident_in_generic_parameter767);
						a=ident();
						PopFollow();

						DebugLocation(179, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 16);
			LeaveRule("generic_parameter", 16);
			LeaveRule_generic_parameter();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:182:1: func_def returns [FuncDef value] : ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 17);
		TraceIn("func_def", 17);
		FuncDef value = default(FuncDef);


		CommonTree deconstructor = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		string b = default(string);
		List<string> x = default(List<string>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(182, 1);
		try
		{
			// SugarWalker.g:187:2: ( ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:187:4: ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(187, 4);
			DebugLocation(187, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def793); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(187, 15);
			// SugarWalker.g:187:15: (attr= attribute )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==Attribute))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:187:16: attr= attribute
				{
				DebugLocation(187, 20);
				PushFollow(Follow._attribute_in_func_def798);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(187, 33);
			// SugarWalker.g:187:33: (a= type_name )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==Type_IDENT))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:187:34: a= type_name
				{
				DebugLocation(187, 35);
				PushFollow(Follow._type_name_in_func_def805);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(187, 48);
			// SugarWalker.g:187:48: (deconstructor= '~' )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==131))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:187:49: deconstructor= '~'
				{
				DebugLocation(187, 62);
				deconstructor=(CommonTree)Match(input,131,Follow._131_in_func_def812); 

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(187, 70);
			PushFollow(Follow._ident_in_func_def818);
			b=ident();
			PopFollow();

			DebugLocation(187, 77);
			// SugarWalker.g:187:77: (x= generic_parameter )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==Generic_Patameters))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:187:78: x= generic_parameter
				{
				DebugLocation(187, 79);
				PushFollow(Follow._generic_parameter_in_func_def823);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(187, 101);
			// SugarWalker.g:187:101: (args= func_args )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==Func_Args))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:187:102: args= func_args
				{
				DebugLocation(187, 106);
				PushFollow(Follow._func_args_in_func_def831);
				args=func_args();
				PopFollow();

				DebugLocation(187, 117);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(188, 2);
			// SugarWalker.g:188:2: (e= stmt_block |f= expr )
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==Stmt_Block))
			{
				alt29 = 1;
			}
			else if (((LA29_0>=Expr_Access && LA29_0<=Expr_Tuple)||LA29_0==IDENT||LA29_0==Match_Tuple||LA29_0==NUMBER||LA29_0==STRING||LA29_0==66||LA29_0==69||LA29_0==73||LA29_0==76||LA29_0==80||LA29_0==86||LA29_0==89||LA29_0==93||LA29_0==95||LA29_0==101||LA29_0==106||LA29_0==129||LA29_0==DOUBLE))
			{
				alt29 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:188:4: e= stmt_block
				{
				DebugLocation(188, 5);
				PushFollow(Follow._stmt_block_in_func_def842);
				e=stmt_block();
				PopFollow();

				DebugLocation(189, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:203:4: f= expr
				{
				DebugLocation(203, 5);
				PushFollow(Follow._expr_in_func_def852);
				f=expr();
				PopFollow();

				DebugLocation(204, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if (a == "void" || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 17);
			LeaveRule("func_def", 17);
			LeaveRule_func_def();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:230:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 18);
		TraceIn("stmt_block", 18);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(230, 4);
		try
		{
			// SugarWalker.g:235:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:235:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(235, 4);
			DebugLocation(235, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block880); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(235, 17);
				// SugarWalker.g:235:17: (a= stmt )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if (((LA30_0>=Expr_Access && LA30_0<=Expr_Tuple)||LA30_0==IDENT||LA30_0==Match_Tuple||LA30_0==NUMBER||LA30_0==STRING||(LA30_0>=Stmt_Defer && LA30_0<=Stmt_While)||LA30_0==66||LA30_0==69||LA30_0==73||LA30_0==76||LA30_0==80||LA30_0==86||LA30_0==89||LA30_0==93||LA30_0==95||LA30_0==101||LA30_0==106||LA30_0==129||LA30_0==DOUBLE))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:235:18: a= stmt
						{
						DebugLocation(235, 19);
						PushFollow(Follow._stmt_in_stmt_block885);
						a=stmt();
						PopFollow();

						DebugLocation(235, 25);
						 value.StmtList.Add(a); 

						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 18);
			LeaveRule("stmt_block", 18);
			LeaveRule_stmt_block();
		}
		DebugLocation(236, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:238:1: stmt returns [Stmt value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_linq |a= stmt_defer );
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 19);
		TraceIn("stmt", 19);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(238, 1);
		try
		{
			// SugarWalker.g:239:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_linq |a= stmt_defer )
			int alt31=8;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 66:
			case 69:
			case 73:
			case 76:
			case 80:
			case 86:
			case 89:
			case 93:
			case 95:
			case 101:
			case 106:
			case 129:
			case DOUBLE:
				{
				alt31 = 1;
				}
				break;
			case Stmt_Return:
				{
				alt31 = 2;
				}
				break;
			case Stmt_If:
				{
				alt31 = 3;
				}
				break;
			case Stmt_While:
				{
				alt31 = 4;
				}
				break;
			case Stmt_For:
			case Stmt_ForEach:
				{
				alt31 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt31 = 6;
				}
				break;
			case Stmt_Linq:
				{
				alt31 = 7;
				}
				break;
			case Stmt_Defer:
				{
				alt31 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:239:4: a= stmt_expr
				{
				DebugLocation(239, 5);
				PushFollow(Follow._stmt_expr_in_stmt911);
				a=stmt_expr();
				PopFollow();

				DebugLocation(239, 16);
				 value = new StmtExpr(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:240:4: a= stmt_return
				{
				DebugLocation(240, 5);
				PushFollow(Follow._stmt_return_in_stmt920);
				a=stmt_return();
				PopFollow();

				DebugLocation(240, 18);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:241:4: a= stmt_if
				{
				DebugLocation(241, 5);
				PushFollow(Follow._stmt_if_in_stmt929);
				a=stmt_if();
				PopFollow();

				DebugLocation(241, 14);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:242:4: a= stmt_while
				{
				DebugLocation(242, 5);
				PushFollow(Follow._stmt_while_in_stmt938);
				a=stmt_while();
				PopFollow();

				DebugLocation(242, 17);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:243:4: a= stmt_for
				{
				DebugLocation(243, 5);
				PushFollow(Follow._stmt_for_in_stmt947);
				a=stmt_for();
				PopFollow();

				DebugLocation(243, 15);
				 value = a; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:244:4: a= stmt_try
				{
				DebugLocation(244, 5);
				PushFollow(Follow._stmt_try_in_stmt956);
				a=stmt_try();
				PopFollow();

				DebugLocation(244, 15);
				 value = a; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:245:4: a= stmt_linq
				{
				DebugLocation(245, 5);
				PushFollow(Follow._stmt_linq_in_stmt965);
				a=stmt_linq();
				PopFollow();

				DebugLocation(245, 16);
				 value = a; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:246:4: a= stmt_defer
				{
				DebugLocation(246, 5);
				PushFollow(Follow._stmt_defer_in_stmt974);
				a=stmt_defer();
				PopFollow();

				DebugLocation(246, 17);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 19);
			LeaveRule("stmt", 19);
			LeaveRule_stmt();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:249:1: stmt_defer returns [Stmt value] : ^( Stmt_Defer a= stmt ) ;
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 20);
		TraceIn("stmt_defer", 20);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(249, 1);
		try
		{
			// SugarWalker.g:250:2: ( ^( Stmt_Defer a= stmt ) )
			DebugEnterAlt(1);
			// SugarWalker.g:250:4: ^( Stmt_Defer a= stmt )
			{
			DebugLocation(250, 4);
			DebugLocation(250, 6);
			Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer992); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(250, 18);
			PushFollow(Follow._stmt_in_stmt_defer996);
			a=stmt();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(251, 2);

					value = new StmtDefer(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 20);
			LeaveRule("stmt_defer", 20);
			LeaveRule_stmt_defer();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:256:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 21);
		TraceIn("stmt_expr", 21);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(256, 1);
		try
		{
			// SugarWalker.g:257:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt32=3;
			try { DebugEnterDecision(32, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt32 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 66:
			case 69:
			case 73:
			case 76:
			case 80:
			case 86:
			case 89:
			case 93:
			case 95:
			case 101:
			case 106:
			case 129:
			case DOUBLE:
				{
				alt32 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt32 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:257:4: a= stmt_using
				{
				DebugLocation(257, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1017);
				a=stmt_using();
				PopFollow();

				DebugLocation(257, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:258:4: b= expr
				{
				DebugLocation(258, 5);
				PushFollow(Follow._expr_in_stmt_expr1026);
				b=expr();
				PopFollow();

				DebugLocation(258, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:259:4: c= stmt_typedef
				{
				DebugLocation(259, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1035);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(259, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 21);
			LeaveRule("stmt_expr", 21);
			LeaveRule_stmt_expr();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:262:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 22);
		TraceIn("stmt_using", 22);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(262, 1);
		try
		{
			// SugarWalker.g:267:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:267:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(267, 4);
			DebugLocation(267, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1058); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(267, 17);
				// SugarWalker.g:267:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=3;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==IDENT))
					{
						alt33 = 1;
					}
					else if ((LA33_0==119))
					{
						alt33 = 2;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:267:19: a= ident
						{
						DebugLocation(267, 20);
						PushFollow(Follow._ident_in_stmt_using1064);
						a=ident();
						PopFollow();

						DebugLocation(267, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:268:10: b= 'namespace'
						{
						DebugLocation(268, 11);
						b=(CommonTree)Match(input,119,Follow._119_in_stmt_using1079); 
						DebugLocation(268, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 22);
			LeaveRule("stmt_using", 22);
			LeaveRule_stmt_using();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:271:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 23);
		TraceIn("stmt_typedef", 23);
		StmtTypeDef value = default(StmtTypeDef);


		string a = default(string);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(271, 1);
		try
		{
			// SugarWalker.g:272:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:272:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(272, 4);
			DebugLocation(272, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1100); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(272, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1104);
			a=type_name();
			PopFollow();

			DebugLocation(272, 32);
			PushFollow(Follow._ident_in_stmt_typedef1108);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(273, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 23);
			LeaveRule("stmt_typedef", 23);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:278:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 24);
		TraceIn("stmt_alloc", 24);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(278, 1);
		try
		{
			// SugarWalker.g:279:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:279:4: a= expr
			{
			DebugLocation(279, 5);
			PushFollow(Follow._expr_in_stmt_alloc1129);
			a=expr();
			PopFollow();

			DebugLocation(279, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 24);
			LeaveRule("stmt_alloc", 24);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:282:1: stmt_if returns [Stmt value] : ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 25);
		TraceIn("stmt_if", 25);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(282, 1);
		try
		{
			// SugarWalker.g:283:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:283:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
			{
			DebugLocation(283, 4);
			DebugLocation(283, 6);
			Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1147); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(283, 15);
			PushFollow(Follow._expr_in_stmt_if1151);
			a=expr();
			PopFollow();

			DebugLocation(283, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1155);
			b=stmt_block();
			PopFollow();

			DebugLocation(283, 34);
			// SugarWalker.g:283:34: (c= stmt_block )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==Stmt_Block))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:283:35: c= stmt_block
				{
				DebugLocation(283, 36);
				PushFollow(Follow._stmt_block_in_stmt_if1160);
				c=stmt_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(284, 2);

					value = new StmtIf(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 25);
			LeaveRule("stmt_if", 25);
			LeaveRule_stmt_if();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:289:1: stmt_while returns [Stmt value] : ^( Stmt_While a= expr b= stmt_block ) ;
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 26);
		TraceIn("stmt_while", 26);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(289, 1);
		try
		{
			// SugarWalker.g:290:2: ( ^( Stmt_While a= expr b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:290:4: ^( Stmt_While a= expr b= stmt_block )
			{
			DebugLocation(290, 4);
			DebugLocation(290, 6);
			Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1182); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(290, 18);
			PushFollow(Follow._expr_in_stmt_while1186);
			a=expr();
			PopFollow();

			DebugLocation(290, 25);
			PushFollow(Follow._stmt_block_in_stmt_while1190);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(291, 2);

					value = new StmtWhile(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 26);
			LeaveRule("stmt_while", 26);
			LeaveRule_stmt_while();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:296:1: stmt_for returns [Stmt value] : ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) );
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 27);
		TraceIn("stmt_for", 27);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		StmtBlock d = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(296, 1);
		try
		{
			// SugarWalker.g:297:2: ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==Stmt_For))
			{
				alt35 = 1;
			}
			else if ((LA35_0==Stmt_ForEach))
			{
				alt35 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:297:4: ^( Stmt_For a= expr b= expr c= expr d= stmt_block )
				{
				DebugLocation(297, 4);
				DebugLocation(297, 6);
				Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1210); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(297, 16);
				PushFollow(Follow._expr_in_stmt_for1214);
				a=expr();
				PopFollow();

				DebugLocation(297, 23);
				PushFollow(Follow._expr_in_stmt_for1218);
				b=expr();
				PopFollow();

				DebugLocation(297, 30);
				PushFollow(Follow._expr_in_stmt_for1222);
				c=expr();
				PopFollow();

				DebugLocation(297, 37);
				PushFollow(Follow._stmt_block_in_stmt_for1226);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(298, 2);

						
						value = new StmtFor(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:302:4: ^( Stmt_ForEach a= expr b= expr d= stmt_block )
				{
				DebugLocation(302, 4);
				DebugLocation(302, 6);
				Match(input,Stmt_ForEach,Follow._Stmt_ForEach_in_stmt_for1236); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(302, 20);
				PushFollow(Follow._expr_in_stmt_for1240);
				a=expr();
				PopFollow();

				DebugLocation(302, 27);
				PushFollow(Follow._expr_in_stmt_for1244);
				b=expr();
				PopFollow();

				DebugLocation(302, 34);
				PushFollow(Follow._stmt_block_in_stmt_for1248);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(303, 2);

						value = new StmtForEach(a, b, d);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 27);
			LeaveRule("stmt_for", 27);
			LeaveRule_stmt_for();
		}
		DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:308:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 28);
		TraceIn("stmt_try", 28);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Expr b = default(Expr);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(308, 1);
		try
		{
			// SugarWalker.g:309:2: ( ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:309:4: ^( Stmt_Try a= stmt_block b= expr c= stmt_block )
			{
			DebugLocation(309, 4);
			DebugLocation(309, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1268); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(309, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1272);
			a=stmt_block();
			PopFollow();

			DebugLocation(309, 29);
			PushFollow(Follow._expr_in_stmt_try1276);
			b=expr();
			PopFollow();

			DebugLocation(309, 36);
			PushFollow(Follow._stmt_block_in_stmt_try1280);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(310, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 28);
			LeaveRule("stmt_try", 28);
			LeaveRule_stmt_try();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:315:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 29);
		TraceIn("stmt_return", 29);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(315, 1);
		try
		{
			// SugarWalker.g:316:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:316:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(316, 4);
			DebugLocation(316, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return1300); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(316, 18);
				// SugarWalker.g:316:18: (a= expr )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if (((LA36_0>=Expr_Access && LA36_0<=Expr_Tuple)||LA36_0==IDENT||LA36_0==Match_Tuple||LA36_0==NUMBER||LA36_0==STRING||LA36_0==66||LA36_0==69||LA36_0==73||LA36_0==76||LA36_0==80||LA36_0==86||LA36_0==89||LA36_0==93||LA36_0==95||LA36_0==101||LA36_0==106||LA36_0==129||LA36_0==DOUBLE))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:316:19: a= expr
					{
					DebugLocation(316, 20);
					PushFollow(Follow._expr_in_stmt_return1305);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(36); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(317, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 29);
			LeaveRule("stmt_return", 29);
			LeaveRule_stmt_return();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarWalker.g:322:1: linq_item returns [LinqItem value] : ( ^( Linq_From a= ident b= expr ) | ^( Linq_Let a= ident b= expr ) | ^( Linq_Where b= expr ) );
	[GrammarRule("linq_item")]
	private LinqItem linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 30);
		TraceIn("linq_item", 30);
		LinqItem value = default(LinqItem);


		string a = default(string);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(322, 1);
		try
		{
			// SugarWalker.g:323:2: ( ^( Linq_From a= ident b= expr ) | ^( Linq_Let a= ident b= expr ) | ^( Linq_Where b= expr ) )
			int alt37=3;
			try { DebugEnterDecision(37, false);
			switch (input.LA(1))
			{
			case Linq_From:
				{
				alt37 = 1;
				}
				break;
			case Linq_Let:
				{
				alt37 = 2;
				}
				break;
			case Linq_Where:
				{
				alt37 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:323:4: ^( Linq_From a= ident b= expr )
				{
				DebugLocation(323, 4);
				DebugLocation(323, 6);
				Match(input,Linq_From,Follow._Linq_From_in_linq_item1327); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(323, 17);
				PushFollow(Follow._ident_in_linq_item1331);
				a=ident();
				PopFollow();

				DebugLocation(323, 25);
				PushFollow(Follow._expr_in_linq_item1335);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(324, 2);

						value = new LinqFrom(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:327:4: ^( Linq_Let a= ident b= expr )
				{
				DebugLocation(327, 4);
				DebugLocation(327, 6);
				Match(input,Linq_Let,Follow._Linq_Let_in_linq_item1345); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(327, 16);
				PushFollow(Follow._ident_in_linq_item1349);
				a=ident();
				PopFollow();

				DebugLocation(327, 24);
				PushFollow(Follow._expr_in_linq_item1353);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(328, 2);

						value = new LinqLet(a, b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:331:4: ^( Linq_Where b= expr )
				{
				DebugLocation(331, 4);
				DebugLocation(331, 6);
				Match(input,Linq_Where,Follow._Linq_Where_in_linq_item1363); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(331, 18);
				PushFollow(Follow._expr_in_linq_item1367);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(332, 2);

						value = new LinqWhere(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("linq_item", 30);
			LeaveRule("linq_item", 30);
			LeaveRule_linq_item();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return value;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarWalker.g:337:1: linq_prefix returns [List<LinqItem> value] : ^( Linq_Prefix (a= linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private List<LinqItem> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 31);
		TraceIn("linq_prefix", 31);
		List<LinqItem> value = default(List<LinqItem>);


		LinqItem a = default(LinqItem);


			value = new List<LinqItem>();

		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(337, 1);
		try
		{
			// SugarWalker.g:342:2: ( ^( Linq_Prefix (a= linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:342:4: ^( Linq_Prefix (a= linq_item )+ )
			{
			DebugLocation(342, 4);
			DebugLocation(342, 6);
			Match(input,Linq_Prefix,Follow._Linq_Prefix_in_linq_prefix1392); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(342, 18);
			// SugarWalker.g:342:18: (a= linq_item )+
			int cnt38=0;
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if (((LA38_0>=Linq_From && LA38_0<=Linq_Let)||LA38_0==Linq_Where))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:342:19: a= linq_item
					{
					DebugLocation(342, 20);
					PushFollow(Follow._linq_item_in_linq_prefix1397);
					a=linq_item();
					PopFollow();

					DebugLocation(342, 31);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt38 >= 1)
						goto loop38;

					EarlyExitException eee38 = new EarlyExitException( 38, input );
					DebugRecognitionException(eee38);
					throw eee38;
				}
				cnt38++;
			}
			loop38:
				;

			} finally { DebugExitSubRule(38); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("linq_prefix", 31);
			LeaveRule("linq_prefix", 31);
			LeaveRule_linq_prefix();
		}
		DebugLocation(343, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return value;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarWalker.g:345:1: stmt_linq returns [Stmt value] : ^( Stmt_Linq a= linq_prefix b= stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private Stmt stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 32);
		TraceIn("stmt_linq", 32);
		Stmt value = default(Stmt);


		List<LinqItem> a = default(List<LinqItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(345, 1);
		try
		{
			// SugarWalker.g:346:2: ( ^( Stmt_Linq a= linq_prefix b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:346:4: ^( Stmt_Linq a= linq_prefix b= stmt_block )
			{
			DebugLocation(346, 4);
			DebugLocation(346, 6);
			Match(input,Stmt_Linq,Follow._Stmt_Linq_in_stmt_linq1418); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(346, 17);
			PushFollow(Follow._linq_prefix_in_stmt_linq1422);
			a=linq_prefix();
			PopFollow();

			DebugLocation(346, 31);
			PushFollow(Follow._stmt_block_in_stmt_linq1426);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(347, 2);

					value = new StmtLinq(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_linq", 32);
			LeaveRule("stmt_linq", 32);
			LeaveRule_stmt_linq();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return value;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:352:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 33);
		TraceIn("ident", 33);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(352, 1);
		try
		{
			// SugarWalker.g:357:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:357:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(357, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1452); 
			DebugLocation(357, 12);
			 value = a.Text; 
			DebugLocation(357, 33);
			// SugarWalker.g:357:33: ( '::' a= IDENT )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==88))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:357:34: '::' a= IDENT
					{
					DebugLocation(357, 34);
					Match(input,88,Follow._88_in_ident1457); 
					DebugLocation(357, 40);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1461); 
					DebugLocation(357, 47);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 33);
			LeaveRule("ident", 33);
			LeaveRule_ident();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:360:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 34);
		TraceIn("ident_list", 34);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(360, 1);
		try
		{
			// SugarWalker.g:365:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:365:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(365, 4);
			DebugLocation(365, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list1486); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(365, 17);
				// SugarWalker.g:365:17: (a= ident )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==IDENT))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:365:18: a= ident
						{
						DebugLocation(365, 19);
						PushFollow(Follow._ident_in_ident_list1491);
						a=ident();
						PopFollow();

						DebugLocation(365, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 34);
			LeaveRule("ident_list", 34);
			LeaveRule_ident_list();
		}
		DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:368:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr )? ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 35);
		TraceIn("alloc_expr", 35);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		List<string> b = default(List<string>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(368, 1);
		try
		{
			// SugarWalker.g:369:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr )? ) )
			int alt43=2;
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==Expr_Alloc_Equal))
			{
				alt43 = 1;
			}
			else if ((LA43_0==Expr_Alloc_Bracket))
			{
				alt43 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:369:4: ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr )? )
				{
				DebugLocation(369, 4);
				DebugLocation(369, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr1513); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(369, 24);
				PushFollow(Follow._type_name_in_alloc_expr1517);
				a=type_name();
				PopFollow();

				DebugLocation(369, 36);
				PushFollow(Follow._ident_list_in_alloc_expr1521);
				b=ident_list();
				PopFollow();

				DebugLocation(369, 48);
				// SugarWalker.g:369:48: (c= expr )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if (((LA41_0>=Expr_Access && LA41_0<=Expr_Tuple)||LA41_0==IDENT||LA41_0==Match_Tuple||LA41_0==NUMBER||LA41_0==STRING||LA41_0==66||LA41_0==69||LA41_0==73||LA41_0==76||LA41_0==80||LA41_0==86||LA41_0==89||LA41_0==93||LA41_0==95||LA41_0==101||LA41_0==106||LA41_0==129||LA41_0==DOUBLE))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:369:49: c= expr
					{
					DebugLocation(369, 50);
					PushFollow(Follow._expr_in_alloc_expr1526);
					c=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(41); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(370, 2);

						value = new ExprAlloc(a, b, c, true);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:373:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr )? )
				{
				DebugLocation(373, 4);
				DebugLocation(373, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr1538); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(373, 26);
				PushFollow(Follow._type_name_in_alloc_expr1542);
				a=type_name();
				PopFollow();

				DebugLocation(373, 38);
				PushFollow(Follow._ident_list_in_alloc_expr1546);
				b=ident_list();
				PopFollow();

				DebugLocation(373, 50);
				// SugarWalker.g:373:50: (c= expr )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if (((LA42_0>=Expr_Access && LA42_0<=Expr_Tuple)||LA42_0==IDENT||LA42_0==Match_Tuple||LA42_0==NUMBER||LA42_0==STRING||LA42_0==66||LA42_0==69||LA42_0==73||LA42_0==76||LA42_0==80||LA42_0==86||LA42_0==89||LA42_0==93||LA42_0==95||LA42_0==101||LA42_0==106||LA42_0==129||LA42_0==DOUBLE))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:373:51: c= expr
					{
					DebugLocation(373, 52);
					PushFollow(Follow._expr_in_alloc_expr1551);
					c=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(42); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(374, 2);

						value = new ExprAlloc(a, b, c, false);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 35);
			LeaveRule("alloc_expr", 35);
			LeaveRule_alloc_expr();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:379:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 36);
		TraceIn("expr_tuple", 36);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(379, 1);
		try
		{
			// SugarWalker.g:384:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:384:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(384, 4);
			DebugLocation(384, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple1578); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(384, 17);
			// SugarWalker.g:384:17: (a= expr )+
			int cnt44=0;
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if (((LA44_0>=Expr_Access && LA44_0<=Expr_Tuple)||LA44_0==IDENT||LA44_0==Match_Tuple||LA44_0==NUMBER||LA44_0==STRING||LA44_0==66||LA44_0==69||LA44_0==73||LA44_0==76||LA44_0==80||LA44_0==86||LA44_0==89||LA44_0==93||LA44_0==95||LA44_0==101||LA44_0==106||LA44_0==129||LA44_0==DOUBLE))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:384:18: a= expr
					{
					DebugLocation(384, 19);
					PushFollow(Follow._expr_in_expr_tuple1583);
					a=expr();
					PopFollow();

					DebugLocation(384, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt44 >= 1)
						goto loop44;

					EarlyExitException eee44 = new EarlyExitException( 44, input );
					DebugRecognitionException(eee44);
					throw eee44;
				}
				cnt44++;
			}
			loop44:
				;

			} finally { DebugExitSubRule(44); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 36);
			LeaveRule("expr_tuple", 36);
			LeaveRule_expr_tuple();
		}
		DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:387:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 37);
		TraceIn("match_tuple", 37);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(387, 1);
		try
		{
			// SugarWalker.g:392:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:392:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(392, 4);
			DebugLocation(392, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple1610); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(392, 18);
				// SugarWalker.g:392:18: (a= expr )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_0 = input.LA(1);

					if (((LA45_0>=Expr_Access && LA45_0<=Expr_Tuple)||LA45_0==IDENT||LA45_0==Match_Tuple||LA45_0==NUMBER||LA45_0==STRING||LA45_0==66||LA45_0==69||LA45_0==73||LA45_0==76||LA45_0==80||LA45_0==86||LA45_0==89||LA45_0==93||LA45_0==95||LA45_0==101||LA45_0==106||LA45_0==129||LA45_0==DOUBLE))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:392:19: a= expr
						{
						DebugLocation(392, 20);
						PushFollow(Follow._expr_in_match_tuple1615);
						a=expr();
						PopFollow();

						DebugLocation(392, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 37);
			LeaveRule("match_tuple", 37);
			LeaveRule_match_tuple();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:395:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 38);
		TraceIn("expr_list", 38);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(395, 1);
		try
		{
			// SugarWalker.g:400:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:400:4: (a= expr )+
			{
			DebugLocation(400, 4);
			// SugarWalker.g:400:4: (a= expr )+
			int cnt46=0;
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if (((LA46_0>=Expr_Access && LA46_0<=Expr_Tuple)||LA46_0==IDENT||LA46_0==Match_Tuple||LA46_0==NUMBER||LA46_0==STRING||LA46_0==66||LA46_0==69||LA46_0==73||LA46_0==76||LA46_0==80||LA46_0==86||LA46_0==89||LA46_0==93||LA46_0==95||LA46_0==101||LA46_0==106||LA46_0==129||LA46_0==DOUBLE))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:400:5: a= expr
					{
					DebugLocation(400, 6);
					PushFollow(Follow._expr_in_expr_list1643);
					a=expr();
					PopFollow();

					DebugLocation(400, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt46 >= 1)
						goto loop46;

					EarlyExitException eee46 = new EarlyExitException( 46, input );
					DebugRecognitionException(eee46);
					throw eee46;
				}
				cnt46++;
			}
			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 38);
			LeaveRule("expr_list", 38);
			LeaveRule_expr_list();
		}
		DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:403:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 39);
		TraceIn("call_expr", 39);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string x = default(string);
		List<Expr> b = default(List<Expr>);


			value = new ExprCall();

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(403, 1);
		try
		{
			// SugarWalker.g:408:2: ( ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:408:4: ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? )
			{
			DebugLocation(408, 4);
			DebugLocation(408, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr1668); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(408, 17);
			PushFollow(Follow._expr_in_call_expr1672);
			a=expr();
			PopFollow();

			DebugLocation(408, 23);
			 value.Expr=a; 
			DebugLocation(408, 42);
			// SugarWalker.g:408:42: ( '<' (x= ident )* '>' )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==91))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:408:43: '<' (x= ident )* '>'
				{
				DebugLocation(408, 43);
				Match(input,91,Follow._91_in_call_expr1677); 
				DebugLocation(408, 47);
				// SugarWalker.g:408:47: (x= ident )*
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==IDENT))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch ( alt47 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:408:48: x= ident
						{
						DebugLocation(408, 49);
						PushFollow(Follow._ident_in_call_expr1682);
						x=ident();
						PopFollow();

						DebugLocation(408, 56);
						 value.GenericParameter.Add(x); 

						}
						break;

					default:
						goto loop47;
					}
				}

				loop47:
					;

				} finally { DebugExitSubRule(47); }

				DebugLocation(408, 94);
				Match(input,98,Follow._98_in_call_expr1688); 

				}
				break;

			}
			} finally { DebugExitSubRule(48); }

			DebugLocation(408, 100);
			// SugarWalker.g:408:100: (b= expr_list )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if (((LA49_0>=Expr_Access && LA49_0<=Expr_Tuple)||LA49_0==IDENT||LA49_0==Match_Tuple||LA49_0==NUMBER||LA49_0==STRING||LA49_0==66||LA49_0==69||LA49_0==73||LA49_0==76||LA49_0==80||LA49_0==86||LA49_0==89||LA49_0==93||LA49_0==95||LA49_0==101||LA49_0==106||LA49_0==129||LA49_0==DOUBLE))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:408:101: b= expr_list
				{
				DebugLocation(408, 102);
				PushFollow(Follow._expr_list_in_call_expr1695);
				b=expr_list();
				PopFollow();

				DebugLocation(408, 113);
				 value.Args=b; 

				}
				break;

			}
			} finally { DebugExitSubRule(49); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 39);
			LeaveRule("call_expr", 39);
			LeaveRule_call_expr();
		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:411:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 40);
		TraceIn("dict_expr", 40);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(411, 1);
		try
		{
			// SugarWalker.g:412:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:412:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(412, 4);
			DebugLocation(412, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr1716); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(412, 17);
			PushFollow(Follow._expr_in_dict_expr1720);
			a=expr();
			PopFollow();

			DebugLocation(412, 23);
			// SugarWalker.g:412:23: (b= expr_list )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if (((LA50_0>=Expr_Access && LA50_0<=Expr_Tuple)||LA50_0==IDENT||LA50_0==Match_Tuple||LA50_0==NUMBER||LA50_0==STRING||LA50_0==66||LA50_0==69||LA50_0==73||LA50_0==76||LA50_0==80||LA50_0==86||LA50_0==89||LA50_0==93||LA50_0==95||LA50_0==101||LA50_0==106||LA50_0==129||LA50_0==DOUBLE))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:412:24: b= expr_list
				{
				DebugLocation(412, 25);
				PushFollow(Follow._expr_list_in_dict_expr1725);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(50); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(413, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 40);
			LeaveRule("dict_expr", 40);
			LeaveRule_dict_expr();
		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:418:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda (b= func_args )? a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 41);
		TraceIn("lambda_expr", 41);
		ExprLambda value = default(ExprLambda);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(418, 1);
		try
		{
			// SugarWalker.g:419:2: ( ^( Expr_Lambda (b= func_args )? a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:419:4: ^( Expr_Lambda (b= func_args )? a= expr )
			{
			DebugLocation(419, 4);
			DebugLocation(419, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr1747); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(419, 18);
			// SugarWalker.g:419:18: (b= func_args )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==Func_Args))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:419:19: b= func_args
				{
				DebugLocation(419, 20);
				PushFollow(Follow._func_args_in_lambda_expr1752);
				b=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(419, 34);
			PushFollow(Follow._expr_in_lambda_expr1758);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(420, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 41);
			LeaveRule("lambda_expr", 41);
			LeaveRule_lambda_expr();
		}
		DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:425:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 42);
		TraceIn("new_expr", 42);
		Expr value = default(Expr);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(425, 1);
		try
		{
			// SugarWalker.g:426:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==Expr_New_Type))
			{
				alt53 = 1;
			}
			else if ((LA53_0==Expr_New_Array))
			{
				alt53 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:426:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(426, 4);
				DebugLocation(426, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr1778); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(426, 21);
				PushFollow(Follow._type_name_in_new_expr1782);
				a=type_name();
				PopFollow();

				DebugLocation(426, 33);
				// SugarWalker.g:426:33: (b= expr_list )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if (((LA52_0>=Expr_Access && LA52_0<=Expr_Tuple)||LA52_0==IDENT||LA52_0==Match_Tuple||LA52_0==NUMBER||LA52_0==STRING||LA52_0==66||LA52_0==69||LA52_0==73||LA52_0==76||LA52_0==80||LA52_0==86||LA52_0==89||LA52_0==93||LA52_0==95||LA52_0==101||LA52_0==106||LA52_0==129||LA52_0==DOUBLE))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:426:33: b= expr_list
					{
					DebugLocation(426, 33);
					PushFollow(Follow._expr_list_in_new_expr1786);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(52); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(427, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:430:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(430, 4);
				DebugLocation(430, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr1797); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(430, 22);
				PushFollow(Follow._type_name_in_new_expr1801);
				a=type_name();
				PopFollow();

				DebugLocation(430, 34);
				PushFollow(Follow._expr_list_in_new_expr1805);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(431, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 42);
			LeaveRule("new_expr", 42);
			LeaveRule_new_expr();
		}
		DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:436:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 43);
		TraceIn("call_with_expr", 43);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(436, 1);
		try
		{
			// SugarWalker.g:437:2: ( ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:437:4: ^( Expr_Call_With a= expr b= ident (c= expr_list )? )
			{
			DebugLocation(437, 4);
			DebugLocation(437, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr1825); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(437, 22);
			PushFollow(Follow._expr_in_call_with_expr1829);
			a=expr();
			PopFollow();

			DebugLocation(437, 29);
			PushFollow(Follow._ident_in_call_with_expr1833);
			b=ident();
			PopFollow();

			DebugLocation(437, 37);
			// SugarWalker.g:437:37: (c= expr_list )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if (((LA54_0>=Expr_Access && LA54_0<=Expr_Tuple)||LA54_0==IDENT||LA54_0==Match_Tuple||LA54_0==NUMBER||LA54_0==STRING||LA54_0==66||LA54_0==69||LA54_0==73||LA54_0==76||LA54_0==80||LA54_0==86||LA54_0==89||LA54_0==93||LA54_0==95||LA54_0==101||LA54_0==106||LA54_0==129||LA54_0==DOUBLE))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:437:37: c= expr_list
				{
				DebugLocation(437, 37);
				PushFollow(Follow._expr_list_in_call_with_expr1837);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(438, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall();
					value.Expr = new ExprConst(b);
					value.Args = Args;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 43);
			LeaveRule("call_with_expr", 43);
			LeaveRule_call_with_expr();
		}
		DebugLocation(452, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:454:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE | STRING ) );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 44);
		TraceIn("expr", 44);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		Expr expr_new = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(454, 1);
		try
		{
			// SugarWalker.g:455:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE | STRING ) )
			int alt55=19;
			try { DebugEnterDecision(55, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt55 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt55 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt55 = 3;
				}
				break;
			case Expr_Call:
				{
				alt55 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt55 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt55 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt55 = 7;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt55 = 8;
				}
				break;
			case Expr_Infix:
				{
				alt55 = 9;
				}
				break;
			case Expr_Cond:
				{
				alt55 = 10;
				}
				break;
			case Expr_Access:
				{
				alt55 = 11;
				}
				break;
			case Expr_Bin:
				{
				alt55 = 12;
				}
				break;
			case 66:
			case 69:
			case 73:
			case 76:
			case 80:
			case 86:
			case 93:
			case 95:
			case 101:
			case 106:
			case 129:
				{
				alt55 = 13;
				}
				break;
			case 89:
				{
				alt55 = 14;
				}
				break;
			case Expr_Bracket:
				{
				alt55 = 15;
				}
				break;
			case Expr_Suffix:
				{
				alt55 = 16;
				}
				break;
			case Expr_Prefix:
				{
				alt55 = 17;
				}
				break;
			case IDENT:
				{
				alt55 = 18;
				}
				break;
			case NUMBER:
			case STRING:
			case DOUBLE:
				{
				alt55 = 19;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:455:7: tuple= expr_tuple
				{
				DebugLocation(455, 12);
				PushFollow(Follow._expr_tuple_in_expr1862);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(456, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:459:4: alloc= alloc_expr
				{
				DebugLocation(459, 9);
				PushFollow(Follow._alloc_expr_in_expr1872);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(460, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:463:4: match= match_tuple
				{
				DebugLocation(463, 9);
				PushFollow(Follow._match_tuple_in_expr1882);
				match=match_tuple();
				PopFollow();

				DebugLocation(464, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:467:4: call= call_expr
				{
				DebugLocation(467, 8);
				PushFollow(Follow._call_expr_in_expr1892);
				call=call_expr();
				PopFollow();

				DebugLocation(468, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:471:4: call_with= call_with_expr
				{
				DebugLocation(471, 13);
				PushFollow(Follow._call_with_expr_in_expr1902);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(472, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:475:4: dict= dict_expr
				{
				DebugLocation(475, 8);
				PushFollow(Follow._dict_expr_in_expr1912);
				dict=dict_expr();
				PopFollow();

				DebugLocation(476, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:479:4: lambda= lambda_expr
				{
				DebugLocation(479, 10);
				PushFollow(Follow._lambda_expr_in_expr1922);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(480, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:483:4: expr_new= new_expr
				{
				DebugLocation(483, 12);
				PushFollow(Follow._new_expr_in_expr1932);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(484, 2);

						value = expr_new;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:487:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(487, 4);
				DebugLocation(487, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr1941); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(487, 27);
				PushFollow(Follow._ident_in_expr1945);
				ident_text=ident();
				PopFollow();

				DebugLocation(487, 35);
				PushFollow(Follow._expr_in_expr1949);
				a=expr();
				PopFollow();

				DebugLocation(487, 42);
				PushFollow(Follow._expr_in_expr1953);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(488, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:491:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(491, 4);
				DebugLocation(491, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr1963); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(491, 17);
				PushFollow(Follow._expr_in_expr1967);
				a=expr();
				PopFollow();

				DebugLocation(491, 24);
				PushFollow(Follow._expr_in_expr1971);
				b=expr();
				PopFollow();

				DebugLocation(491, 31);
				PushFollow(Follow._expr_in_expr1975);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(492, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:495:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(495, 4);
				DebugLocation(495, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr1985); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(495, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=81 && input.LA(1)<=84)||input.LA(1)==88)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(495, 57);
				PushFollow(Follow._expr_in_expr2011);
				a=expr();
				PopFollow();

				DebugLocation(495, 73);
				PushFollow(Follow._ident_in_expr2015);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(496, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:499:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr )
				{
				DebugLocation(499, 4);
				DebugLocation(499, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr2025); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(499, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=64 && input.LA(1)<=65)||(input.LA(1)>=67 && input.LA(1)<=68)||input.LA(1)==72||input.LA(1)==74||input.LA(1)==78||input.LA(1)==85||(input.LA(1)>=91 && input.LA(1)<=92)||input.LA(1)==94||input.LA(1)==96||(input.LA(1)>=98 && input.LA(1)<=100)||input.LA(1)==105||input.LA(1)==128||input.LA(1)==130)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(504, 9);
				PushFollow(Follow._expr_in_expr2130);
				a=expr();
				PopFollow();

				DebugLocation(504, 16);
				PushFollow(Follow._expr_in_expr2134);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(505, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:508:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(508, 4);
				DebugLocation(508, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==66||input.LA(1)==69||input.LA(1)==73||input.LA(1)==76||input.LA(1)==80||input.LA(1)==86||input.LA(1)==93||input.LA(1)==95||input.LA(1)==101||input.LA(1)==106||input.LA(1)==129)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(508, 88);
				PushFollow(Follow._expr_in_expr2192);
				a=expr();
				PopFollow();

				DebugLocation(508, 95);
				PushFollow(Follow._expr_in_expr2196);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(509, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:512:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(512, 4);
				DebugLocation(512, 6);
				Match(input,89,Follow._89_in_expr2206); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(512, 12);
				PushFollow(Follow._expr_in_expr2210);
				a=expr();
				PopFollow();

				DebugLocation(512, 19);
				PushFollow(Follow._expr_in_expr2214);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(513, 2);

						System.Diagnostics.Debug.Assert(a is ExprConst);
						value = new ExprAlloc("auto", new List<string> { ((ExprConst)a).Text }, b, true);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:517:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(517, 4);
				DebugLocation(517, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr2224); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(517, 20);
				PushFollow(Follow._expr_in_expr2228);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(518, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:521:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(521, 4);
				DebugLocation(521, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr2238); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(521, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==75||input.LA(1)==79)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(521, 36);
				PushFollow(Follow._expr_in_expr2252);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(522, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:525:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(525, 4);
				DebugLocation(525, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr2262); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(525, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==63||input.LA(1)==68||input.LA(1)==72||(input.LA(1)>=74 && input.LA(1)<=75)||(input.LA(1)>=78 && input.LA(1)<=79)||input.LA(1)==131)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(525, 72);
				PushFollow(Follow._expr_in_expr2300);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(526, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:529:4: text_ident= ident
				{
				DebugLocation(529, 15);
				PushFollow(Follow._ident_in_expr2313);
				text_ident=ident();
				PopFollow();

				DebugLocation(530, 2);

						value = new ExprConst(text_ident);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:533:4: text= ( NUMBER | DOUBLE | STRING )
				{
				DebugLocation(533, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(534, 5);

				        value = new ExprConst(text.Text);
				    

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 44);
			LeaveRule("expr", 44);
			LeaveRule_expr();
		}
		DebugLocation(537, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0x600100410003448UL,0x2000000UL});
		public static readonly BitSet _func_def_in_node134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc248 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc253 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _type_name_in_global_alloc259 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_global_alloc263 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_global_alloc268 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc280 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc285 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _type_name_in_global_alloc291 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_global_alloc295 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_global_alloc300 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _89_in_global_alloc312 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc317 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_global_alloc323 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_global_alloc327 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item414 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item418 = new BitSet(new ulong[]{0x1080080000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item425 = new BitSet(new ulong[]{0x1080080000008UL});
		public static readonly BitSet _attribute_item_in_attribute453 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def474 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def478 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _global_block_in_namespace_def482 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def507 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_import_def512 = new BitSet(new ulong[]{0x1000000000008UL});
		public static readonly BitSet _Enum_in_enum_def533 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def538 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def544 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_enum_def548 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def568 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_class_def573 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def579 = new BitSet(new ulong[]{0x268000008UL});
		public static readonly BitSet _generic_parameter_in_class_def584 = new BitSet(new ulong[]{0x248000008UL});
		public static readonly BitSet _func_args_in_class_def591 = new BitSet(new ulong[]{0x240000008UL});
		public static readonly BitSet _ident_list_in_class_def598 = new BitSet(new ulong[]{0x40000008UL});
		public static readonly BitSet _global_block_in_class_def605 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_IDENT_in_type_name633 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_type_name637 = new BitSet(new ulong[]{0x8UL,0x4008000110UL});
		public static readonly BitSet _91_in_type_name647 = new BitSet(new ulong[]{0x1000000000000000UL,0x400000000UL});
		public static readonly BitSet _type_name_in_type_name659 = new BitSet(new ulong[]{0x1000000000000000UL,0x400000000UL});
		public static readonly BitSet _98_in_type_name669 = new BitSet(new ulong[]{0x8UL,0x4000000110UL});
		public static readonly BitSet _72_in_type_name680 = new BitSet(new ulong[]{0x8UL,0x4000000110UL});
		public static readonly BitSet _102_in_type_name689 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_type_name691 = new BitSet(new ulong[]{0x8UL,0x4000000110UL});
		public static readonly BitSet _68_in_type_name700 = new BitSet(new ulong[]{0x8UL,0x4000000110UL});
		public static readonly BitSet _Func_Args_in_func_args730 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_alloc_in_func_args735 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter762 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter767 = new BitSet(new ulong[]{0x80000008UL});
		public static readonly BitSet _Func_Def_in_func_def793 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_func_def798 = new BitSet(new ulong[]{0x1000000080000000UL,0x0UL,0x8UL});
		public static readonly BitSet _type_name_in_func_def805 = new BitSet(new ulong[]{0x80000000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_func_def812 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_func_def818 = new BitSet(new ulong[]{0x30A00AFFFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _generic_parameter_in_func_def823 = new BitSet(new ulong[]{0x30A008FFFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _func_args_in_func_def831 = new BitSet(new ulong[]{0x30A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _stmt_block_in_func_def842 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def852 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block880 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block885 = new BitSet(new ulong[]{0xFFD0A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _stmt_expr_in_stmt911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer992 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer996 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1035 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1058 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1064 = new BitSet(new ulong[]{0x80000008UL,0x80000000000000UL});
		public static readonly BitSet _119_in_stmt_using1079 = new BitSet(new ulong[]{0x80000008UL,0x80000000000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1100 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1104 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1108 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1147 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1151 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1155 = new BitSet(new ulong[]{0x2000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1160 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1182 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1186 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1190 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1210 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1214 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_stmt_for1218 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_stmt_for1222 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1226 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_ForEach_in_stmt_for1236 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1240 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_stmt_for1244 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1248 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1268 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1272 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_stmt_try1276 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1280 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return1300 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1305 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_From_in_linq_item1327 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_linq_item1331 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_linq_item1335 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Let_in_linq_item1345 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_linq_item1349 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_linq_item1353 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Where_in_linq_item1363 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_linq_item1367 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Prefix_in_linq_prefix1392 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _linq_item_in_linq_prefix1397 = new BitSet(new ulong[]{0x16000000008UL});
		public static readonly BitSet _Stmt_Linq_in_stmt_linq1418 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq1422 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq1426 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident1452 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_ident1457 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident1461 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _Ident_List_in_ident_list1486 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list1491 = new BitSet(new ulong[]{0x80000008UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr1513 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1517 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1521 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_alloc_expr1526 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr1538 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1542 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1546 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_alloc_expr1551 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple1578 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple1583 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple1610 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple1615 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr_list1643 = new BitSet(new ulong[]{0x10A0087FFF802UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _Expr_Call_in_call_expr1668 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr1672 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420AA411224UL,0x12UL});
		public static readonly BitSet _91_in_call_expr1677 = new BitSet(new ulong[]{0x80000000UL,0x400000000UL});
		public static readonly BitSet _ident_in_call_expr1682 = new BitSet(new ulong[]{0x80000000UL,0x400000000UL});
		public static readonly BitSet _98_in_call_expr1688 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_list_in_call_expr1695 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr1716 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr1720 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_list_in_dict_expr1725 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr1747 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr1752 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_lambda_expr1758 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr1778 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1782 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_list_in_new_expr1786 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr1797 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1801 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_list_in_new_expr1805 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr1825 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr1829 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_call_with_expr1833 = new BitSet(new ulong[]{0x10A0087FFF808UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_list_in_call_with_expr1837 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr1862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr1872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr1882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr1892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr1902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr1912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr1932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr1941 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr1945 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr1949 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr1953 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr1963 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1967 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr1971 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr1975 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr1985 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1989 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr2011 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_expr2015 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr2025 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2029 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr2130 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr2134 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr2146 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2192 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr2196 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _89_in_expr2206 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2210 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr2214 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr2224 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2228 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr2238 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2242 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr2252 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr2262 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2266 = new BitSet(new ulong[]{0x10A0087FFF800UL,0x420A2411224UL,0x12UL});
		public static readonly BitSet _expr_in_expr2300 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr2313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr2323 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
