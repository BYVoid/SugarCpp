//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-09 12:55:03

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "'\\'", "']'", "'^'", "'^='", "'`'", "'and'", "'catch'", "'class'", "'const'", "'defer'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'try'", "'typedef'", "'unsigned'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc_Bracket=12;
	public const int Expr_Alloc_Equal=13;
	public const int Expr_Bin=14;
	public const int Expr_Bracket=15;
	public const int Expr_Call=16;
	public const int Expr_Call_With=17;
	public const int Expr_Cond=18;
	public const int Expr_Cond_Not_Null=19;
	public const int Expr_Dict=20;
	public const int Expr_Infix=21;
	public const int Expr_Lambda=22;
	public const int Expr_New_Array=23;
	public const int Expr_New_Type=24;
	public const int Expr_Not_Null=25;
	public const int Expr_Prefix=26;
	public const int Expr_Suffix=27;
	public const int Expr_Tuple=28;
	public const int Func_Args=29;
	public const int Func_Def=30;
	public const int Generic_Patameters=31;
	public const int Global_Block=32;
	public const int IDENT=33;
	public const int INDENT=34;
	public const int Ident_List=35;
	public const int Import=36;
	public const int Left_Bracket=37;
	public const int LineComment=38;
	public const int Linq_From=39;
	public const int Linq_Let=40;
	public const int Linq_Prefix=41;
	public const int Linq_Where=42;
	public const int Match_Tuple=43;
	public const int NEWLINE=44;
	public const int NUMBER=45;
	public const int Namespace=46;
	public const int Right_Bracket=47;
	public const int Root=48;
	public const int SP=49;
	public const int STRING=50;
	public const int Stmt_Block=51;
	public const int Stmt_Defer=52;
	public const int Stmt_For=53;
	public const int Stmt_ForEach=54;
	public const int Stmt_If=55;
	public const int Stmt_Linq=56;
	public const int Stmt_Loop=57;
	public const int Stmt_Return=58;
	public const int Stmt_Try=59;
	public const int Stmt_Typedef=60;
	public const int Stmt_Using=61;
	public const int Stmt_While=62;
	public const int Type_IDENT=63;
	public const int Type_Ref=64;
	public const int Type_Tuple=65;
	public const int DOUBLE=144;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:24:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:24:4: ^( Root a= global_block )
			{
			DebugLocation(24, 4);
			DebugLocation(24, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(24, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(25, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:30:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		List<AttrAstNode> a = default(List<AttrAstNode>);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:35:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:35:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(35, 4);
			DebugLocation(35, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(35, 19);
				// SugarWalker.g:35:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||(LA1_0>=Expr_Alloc_Bracket && LA1_0<=Expr_Alloc_Equal)||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||(LA1_0>=Stmt_Typedef && LA1_0<=Stmt_Using)||LA1_0==92))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:35:20: a= node
						{
						DebugLocation(35, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(35, 27);
						 foreach (var x in a) value.List.Add(x); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(36, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:38:1: node returns [List<AttrAstNode> value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private List<AttrAstNode> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		List<AttrAstNode> value = default(List<AttrAstNode>);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		List<GlobalAlloc> e = default(List<GlobalAlloc>);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);


			value = new List<AttrAstNode>();

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(38, 1);
		try
		{
			// SugarWalker.g:43:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case 92:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:43:4: a= func_def
				{
				DebugLocation(43, 6);
				PushFollow(Follow._func_def_in_node139);
				a=func_def();
				PopFollow();

				DebugLocation(43, 17);
				 value.Add(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:44:4: b= import_def
				{
				DebugLocation(44, 6);
				PushFollow(Follow._import_def_in_node150);
				b=import_def();
				PopFollow();

				DebugLocation(44, 19);
				 value.Add(b); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:45:4: c= enum_def
				{
				DebugLocation(45, 6);
				PushFollow(Follow._enum_def_in_node161);
				c=enum_def();
				PopFollow();

				DebugLocation(45, 17);
				 value.Add(c); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:46:4: d= class_def
				{
				DebugLocation(46, 6);
				PushFollow(Follow._class_def_in_node172);
				d=class_def();
				PopFollow();

				DebugLocation(46, 18);
				 value.Add(d); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:47:4: e= global_alloc
				{
				DebugLocation(47, 6);
				PushFollow(Follow._global_alloc_in_node183);
				e=global_alloc();
				PopFollow();

				DebugLocation(47, 21);
				 foreach (var x in e) value.Add(x); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:48:4: f= global_using
				{
				DebugLocation(48, 6);
				PushFollow(Follow._global_using_in_node194);
				f=global_using();
				PopFollow();

				DebugLocation(48, 21);
				 value.Add(f); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:49:4: g= global_typedef
				{
				DebugLocation(49, 6);
				PushFollow(Follow._global_typedef_in_node205);
				g=global_typedef();
				PopFollow();

				DebugLocation(49, 23);
				 value.Add(g); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:50:4: h= namespace_def
				{
				DebugLocation(50, 6);
				PushFollow(Follow._namespace_def_in_node216);
				h=namespace_def();
				PopFollow();

				DebugLocation(50, 22);
				 value.Add(h); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(51, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:53:1: global_using returns [GlobalUsing value] : a= stmt_using ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		StmtUsing a = default(StmtUsing);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(53, 1);
		try
		{
			// SugarWalker.g:54:2: (a= stmt_using )
			DebugEnterAlt(1);
			// SugarWalker.g:54:4: a= stmt_using
			{
			DebugLocation(54, 5);
			PushFollow(Follow._stmt_using_in_global_using234);
			a=stmt_using();
			PopFollow();

			DebugLocation(55, 2);

					value = new GlobalUsing(a.List);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(58, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:60:1: global_alloc returns [List<GlobalAlloc> value] : ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) );
	[GrammarRule("global_alloc")]
	private List<GlobalAlloc> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		List<GlobalAlloc> value = default(List<GlobalAlloc>);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<GlobalAlloc>();

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(60, 1);
		try
		{
			// SugarWalker.g:65:2: ( ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? ) | ^( ':=' (attr= attribute )? d= ident_list e= expr_list ) )
			int alt8=3;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case Expr_Alloc_Equal:
				{
				alt8 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
				{
				alt8 = 2;
				}
				break;
			case 92:
				{
				alt8 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:65:4: ^( Expr_Alloc_Equal (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(65, 4);
				DebugLocation(65, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_global_alloc258); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(65, 23);
				// SugarWalker.g:65:23: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:65:24: attr= attribute
					{
					DebugLocation(65, 28);
					PushFollow(Follow._attribute_in_global_alloc263);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(65, 42);
				PushFollow(Follow._type_name_in_global_alloc269);
				a=type_name();
				PopFollow();

				DebugLocation(65, 54);
				PushFollow(Follow._ident_list_in_global_alloc273);
				b=ident_list();
				PopFollow();

				DebugLocation(65, 66);
				// SugarWalker.g:65:66: (c= expr_list )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>=Expr_Access && LA4_0<=Expr_Tuple)||LA4_0==IDENT||LA4_0==Match_Tuple||LA4_0==NUMBER||LA4_0==STRING||LA4_0==69||LA4_0==72||LA4_0==76||LA4_0==79||LA4_0==83||LA4_0==89||LA4_0==92||LA4_0==96||LA4_0==98||LA4_0==104||LA4_0==107||LA4_0==112||LA4_0==114||(LA4_0>=126 && LA4_0<=127)||LA4_0==132||LA4_0==141||LA4_0==DOUBLE))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:65:67: c= expr_list
					{
					DebugLocation(65, 68);
					PushFollow(Follow._expr_list_in_global_alloc278);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(66, 2);

						value.Add(new GlobalAlloc(a, b, c, attr, true));
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:69:4: ^( Expr_Alloc_Bracket (attr= attribute )? a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(69, 4);
				DebugLocation(69, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_global_alloc290); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(69, 25);
				// SugarWalker.g:69:25: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:69:26: attr= attribute
					{
					DebugLocation(69, 30);
					PushFollow(Follow._attribute_in_global_alloc295);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(69, 44);
				PushFollow(Follow._type_name_in_global_alloc301);
				a=type_name();
				PopFollow();

				DebugLocation(69, 56);
				PushFollow(Follow._ident_list_in_global_alloc305);
				b=ident_list();
				PopFollow();

				DebugLocation(69, 68);
				// SugarWalker.g:69:68: (c= expr_list )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>=Expr_Access && LA6_0<=Expr_Tuple)||LA6_0==IDENT||LA6_0==Match_Tuple||LA6_0==NUMBER||LA6_0==STRING||LA6_0==69||LA6_0==72||LA6_0==76||LA6_0==79||LA6_0==83||LA6_0==89||LA6_0==92||LA6_0==96||LA6_0==98||LA6_0==104||LA6_0==107||LA6_0==112||LA6_0==114||(LA6_0>=126 && LA6_0<=127)||LA6_0==132||LA6_0==141||LA6_0==DOUBLE))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:69:69: c= expr_list
					{
					DebugLocation(69, 70);
					PushFollow(Follow._expr_list_in_global_alloc310);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(70, 2);

						value.Add(new GlobalAlloc(a, b, c, attr, false));
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:73:4: ^( ':=' (attr= attribute )? d= ident_list e= expr_list )
				{
				DebugLocation(73, 4);
				DebugLocation(73, 6);
				Match(input,92,Follow._92_in_global_alloc322); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(73, 11);
				// SugarWalker.g:73:11: (attr= attribute )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==Attribute))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:73:12: attr= attribute
					{
					DebugLocation(73, 16);
					PushFollow(Follow._attribute_in_global_alloc327);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(73, 30);
				PushFollow(Follow._ident_list_in_global_alloc333);
				d=ident_list();
				PopFollow();

				DebugLocation(73, 43);
				PushFollow(Follow._expr_list_in_global_alloc337);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(74, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new GlobalAlloc("auto", new List<string> { d[i] }, new List<Expr>{ e[k] }, attr, true));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(82, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:84:1: global_typedef returns [GlobalTypeDef value] : a= stmt_typedef ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		StmtTypeDef a = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(84, 1);
		try
		{
			// SugarWalker.g:85:2: (a= stmt_typedef )
			DebugEnterAlt(1);
			// SugarWalker.g:85:4: a= stmt_typedef
			{
			DebugLocation(85, 5);
			PushFollow(Follow._stmt_typedef_in_global_typedef358);
			a=stmt_typedef();
			PopFollow();

			DebugLocation(86, 2);

					value = new GlobalTypeDef(a.Type, a.Name);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:91:1: attribute_args returns [string value] : (a= ( NUMBER ) |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(91, 1);
		try
		{
			// SugarWalker.g:92:2: (a= ( NUMBER ) |a= STRING |b= ident )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt9 = 1;
				}
				break;
			case STRING:
				{
				alt9 = 2;
				}
				break;
			case IDENT:
				{
				alt9 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:92:4: a= ( NUMBER )
				{
				DebugLocation(92, 5);
				// SugarWalker.g:92:6: ( NUMBER )
				DebugEnterAlt(1);
				// SugarWalker.g:92:7: NUMBER
				{
				DebugLocation(92, 7);
				Match(input,NUMBER,Follow._NUMBER_in_attribute_args379); 

				}

				DebugLocation(93, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:96:4: a= STRING
				{
				DebugLocation(96, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args390); 
				DebugLocation(97, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:100:4: b= ident
				{
				DebugLocation(100, 5);
				PushFollow(Follow._ident_in_attribute_args400);
				b=ident();
				PopFollow();

				DebugLocation(101, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:106:1: attribute_item returns [Attr value] : ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		CommonTree c = default(CommonTree);
		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(106, 1);
		try
		{
			// SugarWalker.g:111:2: ( ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:111:4: ^( Attribute (a= ident |c= 'const' ) (b= attribute_args )* )
			{
			DebugLocation(111, 4);
			DebugLocation(111, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item424); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(111, 16);
			// SugarWalker.g:111:16: (a= ident |c= 'const' )
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==117))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:111:17: a= ident
				{
				DebugLocation(111, 18);
				PushFollow(Follow._ident_in_attribute_item429);
				a=ident();
				PopFollow();

				DebugLocation(111, 25);
				 value.Name = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:111:48: c= 'const'
				{
				DebugLocation(111, 49);
				c=(CommonTree)Match(input,117,Follow._117_in_attribute_item437); 
				DebugLocation(111, 58);
				 value.Name = "const"; 

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(111, 86);
			// SugarWalker.g:111:86: (b= attribute_args )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==IDENT||LA11_0==NUMBER||LA11_0==STRING))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:111:87: b= attribute_args
					{
					DebugLocation(111, 88);
					PushFollow(Follow._attribute_args_in_attribute_item445);
					b=attribute_args();
					PopFollow();

					DebugLocation(111, 104);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(112, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:114:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(114, 1);
		try
		{
			// SugarWalker.g:119:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:119:4: (a= attribute_item )+
			{
			DebugLocation(119, 4);
			// SugarWalker.g:119:4: (a= attribute_item )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==Attribute))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:119:5: a= attribute_item
					{
					DebugLocation(119, 6);
					PushFollow(Follow._attribute_item_in_attribute473);
					a=attribute_item();
					PopFollow();

					DebugLocation(119, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:122:1: namespace_def returns [Namespace value] : ^( Namespace a= ident b= global_block ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(122, 1);
		try
		{
			// SugarWalker.g:123:2: ( ^( Namespace a= ident b= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:123:4: ^( Namespace a= ident b= global_block )
			{
			DebugLocation(123, 4);
			DebugLocation(123, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def494); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(123, 17);
			PushFollow(Follow._ident_in_namespace_def498);
			a=ident();
			PopFollow();

			DebugLocation(123, 25);
			PushFollow(Follow._global_block_in_namespace_def502);
			b=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(124, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:129:1: import_def returns [Import value] : ^( Import (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(129, 1);
		try
		{
			// SugarWalker.g:134:2: ( ^( Import (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:134:4: ^( Import (a= STRING )* )
			{
			DebugLocation(134, 4);
			DebugLocation(134, 6);
			Match(input,Import,Follow._Import_in_import_def527); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(134, 13);
				// SugarWalker.g:134:13: (a= STRING )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if ((LA13_0==STRING))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:134:14: a= STRING
						{
						DebugLocation(134, 15);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def532); 
						DebugLocation(134, 23);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:137:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(137, 1);
		try
		{
			// SugarWalker.g:138:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:138:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(138, 4);
			DebugLocation(138, 6);
			Match(input,Enum,Follow._Enum_in_enum_def553); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(138, 11);
			// SugarWalker.g:138:11: (attr= attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==Attribute))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:138:12: attr= attribute
				{
				DebugLocation(138, 16);
				PushFollow(Follow._attribute_in_enum_def558);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(138, 30);
			PushFollow(Follow._ident_in_enum_def564);
			a=ident();
			PopFollow();

			DebugLocation(138, 38);
			PushFollow(Follow._ident_list_in_enum_def568);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(139, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:144:1: class_def returns [Class value] : ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(144, 1);
		try
		{
			// SugarWalker.g:145:2: ( ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:145:4: ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(145, 4);
			DebugLocation(145, 6);
			Match(input,Class,Follow._Class_in_class_def588); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(145, 12);
			// SugarWalker.g:145:12: (attr= attribute )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==Attribute))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:145:13: attr= attribute
				{
				DebugLocation(145, 17);
				PushFollow(Follow._attribute_in_class_def593);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(145, 31);
			PushFollow(Follow._ident_in_class_def599);
			a=ident();
			PopFollow();

			DebugLocation(145, 38);
			// SugarWalker.g:145:38: (b= generic_parameter )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==Generic_Patameters))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:145:39: b= generic_parameter
				{
				DebugLocation(145, 40);
				PushFollow(Follow._generic_parameter_in_class_def604);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(145, 61);
			// SugarWalker.g:145:61: (c= func_args )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Func_Args))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:145:62: c= func_args
				{
				DebugLocation(145, 63);
				PushFollow(Follow._func_args_in_class_def611);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(145, 76);
			// SugarWalker.g:145:76: (d= ident_list )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==Ident_List))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:145:77: d= ident_list
				{
				DebugLocation(145, 78);
				PushFollow(Follow._ident_list_in_class_def618);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(145, 92);
			// SugarWalker.g:145:92: (e= global_block )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==Global_Block))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:145:93: e= global_block
				{
				DebugLocation(145, 94);
				PushFollow(Follow._global_block_in_class_def625);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(146, 2);

					value = new Class(a, b, c, d, e, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:151:1: type_name returns [string value] : ^( Type_IDENT ( 'const' )? ( 'unsigned' )? a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		string value = default(string);


		string a = default(string);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(151, 1);
		try
		{
			// SugarWalker.g:156:2: ( ^( Type_IDENT ( 'const' )? ( 'unsigned' )? a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:156:4: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* )
			{
			DebugLocation(156, 4);
			DebugLocation(156, 7);
			Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name653); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(157, 7);
			// SugarWalker.g:157:7: ( 'const' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==117))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:157:8: 'const'
				{
				DebugLocation(157, 8);
				Match(input,117,Follow._117_in_type_name662); 
				DebugLocation(157, 16);
				 value += "const "; 

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(158, 4);
			// SugarWalker.g:158:4: ( 'unsigned' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==136))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:158:5: 'unsigned'
				{
				DebugLocation(158, 5);
				Match(input,136,Follow._136_in_type_name672); 
				DebugLocation(158, 16);
				 value += "unsigned "; 

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(159, 8);
			PushFollow(Follow._ident_in_type_name686);
			a=ident();
			PopFollow();

			DebugLocation(159, 15);
			 value+=a; 
			DebugLocation(160, 5);
			// SugarWalker.g:160:5: ( '<' (b= type_name )* '>' )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==94))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:160:7: '<' (b= type_name )* '>'
				{
				DebugLocation(160, 7);
				Match(input,94,Follow._94_in_type_name696); 
				DebugLocation(160, 11);
				 value+="<"; bool isFirst = true; 
				DebugLocation(161, 6);
				// SugarWalker.g:161:6: (b= type_name )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==Type_IDENT))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:161:7: b= type_name
						{
						DebugLocation(161, 8);
						PushFollow(Follow._type_name_in_type_name708);
						b=type_name();
						PopFollow();

						DebugLocation(162, 3);

									if (!isFirst) value+=", ";
									isFirst = false;
									value+=b;
								

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(167, 3);
				Match(input,101,Follow._101_in_type_name718); 
				DebugLocation(167, 7);
				 value+=">"; 

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(168, 4);
			// SugarWalker.g:168:4: ( '*' | '[' ']' | '&' )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=4;
				try { DebugEnterDecision(24, false);
				switch (input.LA(1))
				{
				case 75:
					{
					alt24 = 1;
					}
					break;
				case 108:
					{
					alt24 = 2;
					}
					break;
				case 71:
					{
					alt24 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:168:6: '*'
					{
					DebugLocation(168, 6);
					Match(input,75,Follow._75_in_type_name729); 
					DebugLocation(168, 10);
					 value+="*"; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarWalker.g:169:6: '[' ']'
					{
					DebugLocation(169, 6);
					Match(input,108,Follow._108_in_type_name738); 
					DebugLocation(169, 10);
					Match(input,110,Follow._110_in_type_name740); 
					DebugLocation(169, 14);
					 value+="[]"; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarWalker.g:170:6: '&'
					{
					DebugLocation(170, 6);
					Match(input,71,Follow._71_in_type_name749); 
					DebugLocation(170, 10);
					 value+="&"; 

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:174:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 15);
		TraceIn("func_args", 15);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		Stmt a = default(Stmt);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(174, 1);
		try
		{
			// SugarWalker.g:179:2: ( ^( Func_Args (a= stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:179:4: ^( Func_Args (a= stmt_alloc )* )
			{
			DebugLocation(179, 4);
			DebugLocation(179, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args779); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(179, 16);
				// SugarWalker.g:179:16: (a= stmt_alloc )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if (((LA25_0>=Expr_Access && LA25_0<=Expr_Tuple)||LA25_0==IDENT||LA25_0==Match_Tuple||LA25_0==NUMBER||LA25_0==STRING||LA25_0==69||LA25_0==72||LA25_0==76||LA25_0==79||LA25_0==83||LA25_0==89||LA25_0==92||LA25_0==96||LA25_0==98||LA25_0==104||LA25_0==107||LA25_0==112||LA25_0==114||(LA25_0>=126 && LA25_0<=127)||LA25_0==132||LA25_0==141||LA25_0==DOUBLE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:179:17: a= stmt_alloc
						{
						DebugLocation(179, 18);
						PushFollow(Follow._stmt_alloc_in_func_args784);
						a=stmt_alloc();
						PopFollow();

						DebugLocation(180, 2);

								var b = (ExprAlloc)a;
								if (b.Type == "auto")
								{
									b.Type = "decltype";
								}
								value.Add(b);
							

						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 15);
			LeaveRule("func_args", 15);
			LeaveRule_func_args();
		}
		DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:190:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 16);
		TraceIn("generic_parameter", 16);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(190, 1);
		try
		{
			// SugarWalker.g:195:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:195:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(195, 4);
			DebugLocation(195, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter811); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(195, 25);
				// SugarWalker.g:195:25: (a= ident )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==IDENT))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:195:26: a= ident
						{
						DebugLocation(195, 27);
						PushFollow(Follow._ident_in_generic_parameter816);
						a=ident();
						PopFollow();

						DebugLocation(195, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 16);
			LeaveRule("generic_parameter", 16);
			LeaveRule_generic_parameter();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:198:1: func_def returns [FuncDef value] : ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 17);
		TraceIn("func_def", 17);
		FuncDef value = default(FuncDef);


		CommonTree deconstructor = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		string b = default(string);
		List<string> x = default(List<string>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(198, 1);
		try
		{
			// SugarWalker.g:203:2: ( ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:203:4: ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(203, 4);
			DebugLocation(203, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def842); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(203, 15);
			// SugarWalker.g:203:15: (attr= attribute )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==Attribute))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:203:16: attr= attribute
				{
				DebugLocation(203, 20);
				PushFollow(Follow._attribute_in_func_def847);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(203, 33);
			// SugarWalker.g:203:33: (a= type_name )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==Type_IDENT))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:203:34: a= type_name
				{
				DebugLocation(203, 35);
				PushFollow(Follow._type_name_in_func_def854);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(203, 48);
			// SugarWalker.g:203:48: (deconstructor= '~' )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==143))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:203:49: deconstructor= '~'
				{
				DebugLocation(203, 62);
				deconstructor=(CommonTree)Match(input,143,Follow._143_in_func_def861); 

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(203, 70);
			PushFollow(Follow._ident_in_func_def867);
			b=ident();
			PopFollow();

			DebugLocation(203, 77);
			// SugarWalker.g:203:77: (x= generic_parameter )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==Generic_Patameters))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:203:78: x= generic_parameter
				{
				DebugLocation(203, 79);
				PushFollow(Follow._generic_parameter_in_func_def872);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(203, 101);
			// SugarWalker.g:203:101: (args= func_args )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==Func_Args))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:203:102: args= func_args
				{
				DebugLocation(203, 106);
				PushFollow(Follow._func_args_in_func_def880);
				args=func_args();
				PopFollow();

				DebugLocation(203, 117);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(204, 2);
			// SugarWalker.g:204:2: (e= stmt_block |f= expr )
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==Stmt_Block))
			{
				alt32 = 1;
			}
			else if (((LA32_0>=Expr_Access && LA32_0<=Expr_Tuple)||LA32_0==IDENT||LA32_0==Match_Tuple||LA32_0==NUMBER||LA32_0==STRING||LA32_0==69||LA32_0==72||LA32_0==76||LA32_0==79||LA32_0==83||LA32_0==89||LA32_0==92||LA32_0==96||LA32_0==98||LA32_0==104||LA32_0==107||LA32_0==112||LA32_0==114||(LA32_0>=126 && LA32_0<=127)||LA32_0==132||LA32_0==141||LA32_0==DOUBLE))
			{
				alt32 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:204:4: e= stmt_block
				{
				DebugLocation(204, 5);
				PushFollow(Follow._stmt_block_in_func_def891);
				e=stmt_block();
				PopFollow();

				DebugLocation(205, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:219:4: f= expr
				{
				DebugLocation(219, 5);
				PushFollow(Follow._expr_in_func_def901);
				f=expr();
				PopFollow();

				DebugLocation(220, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if (a == "void" || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtReturn(f));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(32); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 17);
			LeaveRule("func_def", 17);
			LeaveRule_func_def();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:246:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 18);
		TraceIn("stmt_block", 18);
		StmtBlock value = default(StmtBlock);


		List<Stmt> a = default(List<Stmt>);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(246, 4);
		try
		{
			// SugarWalker.g:251:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:251:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(251, 4);
			DebugLocation(251, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block929); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(251, 17);
				// SugarWalker.g:251:17: (a= stmt )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if (((LA33_0>=Expr_Access && LA33_0<=Expr_Tuple)||LA33_0==IDENT||LA33_0==Match_Tuple||LA33_0==NUMBER||LA33_0==STRING||(LA33_0>=Stmt_Defer && LA33_0<=Stmt_While)||LA33_0==69||LA33_0==72||LA33_0==76||LA33_0==79||LA33_0==83||LA33_0==89||LA33_0==92||LA33_0==96||LA33_0==98||LA33_0==104||(LA33_0>=106 && LA33_0<=107)||LA33_0==112||LA33_0==114||(LA33_0>=126 && LA33_0<=127)||LA33_0==132||LA33_0==141||LA33_0==DOUBLE))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:251:18: a= stmt
						{
						DebugLocation(251, 19);
						PushFollow(Follow._stmt_in_stmt_block934);
						a=stmt();
						PopFollow();

						DebugLocation(251, 25);
						 foreach (var x in a ) value.StmtList.Add(x); 

						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 18);
			LeaveRule("stmt_block", 18);
			LeaveRule_stmt_block();
		}
		DebugLocation(252, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:254:1: stmt returns [List<Stmt> value] : (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_linq |a= stmt_defer |b= stmt_translate );
	[GrammarRule("stmt")]
	private List<Stmt> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 19);
		TraceIn("stmt", 19);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);
		List<Stmt> b = default(List<Stmt>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(254, 1);
		try
		{
			// SugarWalker.g:259:2: (a= stmt_expr |a= stmt_return |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_linq |a= stmt_defer |b= stmt_translate )
			int alt34=9;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 69:
			case 72:
			case 76:
			case 79:
			case 83:
			case 89:
			case 96:
			case 98:
			case 104:
			case 107:
			case 112:
			case 114:
			case 126:
			case 127:
			case 132:
			case 141:
			case DOUBLE:
				{
				alt34 = 1;
				}
				break;
			case 92:
				{
				int LA34_2 = input.LA(2);

				if ((LA34_2==DOWN))
				{
					int LA34_11 = input.LA(3);

					if (((LA34_11>=Expr_Access && LA34_11<=Expr_Tuple)||LA34_11==IDENT||LA34_11==Match_Tuple||LA34_11==NUMBER||LA34_11==STRING||LA34_11==69||LA34_11==72||LA34_11==76||LA34_11==79||LA34_11==83||LA34_11==89||LA34_11==92||LA34_11==96||LA34_11==98||LA34_11==104||LA34_11==107||LA34_11==112||LA34_11==114||(LA34_11>=126 && LA34_11<=127)||LA34_11==132||LA34_11==141||LA34_11==DOUBLE))
					{
						alt34 = 1;
					}
					else if ((LA34_11==Ident_List))
					{
						alt34 = 9;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 34, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Stmt_Return:
				{
				alt34 = 2;
				}
				break;
			case Stmt_If:
				{
				alt34 = 3;
				}
				break;
			case Stmt_Loop:
			case Stmt_While:
				{
				alt34 = 4;
				}
				break;
			case Stmt_For:
			case Stmt_ForEach:
				{
				alt34 = 5;
				}
				break;
			case Stmt_Try:
				{
				alt34 = 6;
				}
				break;
			case Stmt_Linq:
				{
				alt34 = 7;
				}
				break;
			case Stmt_Defer:
				{
				alt34 = 8;
				}
				break;
			case 106:
				{
				alt34 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:259:4: a= stmt_expr
				{
				DebugLocation(259, 5);
				PushFollow(Follow._stmt_expr_in_stmt965);
				a=stmt_expr();
				PopFollow();

				DebugLocation(259, 16);
				 value.Add(new StmtExpr(a)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:260:4: a= stmt_return
				{
				DebugLocation(260, 5);
				PushFollow(Follow._stmt_return_in_stmt974);
				a=stmt_return();
				PopFollow();

				DebugLocation(260, 18);
				 value.Add(a); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:261:4: a= stmt_if
				{
				DebugLocation(261, 5);
				PushFollow(Follow._stmt_if_in_stmt983);
				a=stmt_if();
				PopFollow();

				DebugLocation(261, 14);
				 value.Add(a); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:262:4: a= stmt_while
				{
				DebugLocation(262, 5);
				PushFollow(Follow._stmt_while_in_stmt992);
				a=stmt_while();
				PopFollow();

				DebugLocation(262, 17);
				 value.Add(a); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:263:4: a= stmt_for
				{
				DebugLocation(263, 5);
				PushFollow(Follow._stmt_for_in_stmt1001);
				a=stmt_for();
				PopFollow();

				DebugLocation(263, 15);
				 value.Add(a); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:264:4: a= stmt_try
				{
				DebugLocation(264, 5);
				PushFollow(Follow._stmt_try_in_stmt1010);
				a=stmt_try();
				PopFollow();

				DebugLocation(264, 15);
				 value.Add(a); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:265:4: a= stmt_linq
				{
				DebugLocation(265, 5);
				PushFollow(Follow._stmt_linq_in_stmt1019);
				a=stmt_linq();
				PopFollow();

				DebugLocation(265, 16);
				 value.Add(a); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:266:4: a= stmt_defer
				{
				DebugLocation(266, 5);
				PushFollow(Follow._stmt_defer_in_stmt1028);
				a=stmt_defer();
				PopFollow();

				DebugLocation(266, 17);
				 value.Add(a); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:267:4: b= stmt_translate
				{
				DebugLocation(267, 5);
				PushFollow(Follow._stmt_translate_in_stmt1037);
				b=stmt_translate();
				PopFollow();

				DebugLocation(267, 21);
				 foreach (var x in b) value.Add(x); 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 19);
			LeaveRule("stmt", 19);
			LeaveRule_stmt();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_translate();
	partial void LeaveRule_stmt_translate();

	// $ANTLR start "stmt_translate"
	// SugarWalker.g:270:1: stmt_translate returns [List<Stmt> value] : ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) );
	[GrammarRule("stmt_translate")]
	private List<Stmt> stmt_translate()
	{
		EnterRule_stmt_translate();
		EnterRule("stmt_translate", 20);
		TraceIn("stmt_translate", 20);
		List<Stmt> value = default(List<Stmt>);


		Expr a = default(Expr);
		Expr b = default(Expr);
		List<string> d = default(List<string>);
		List<Expr> e = default(List<Expr>);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "stmt_translate");
		DebugLocation(270, 1);
		try
		{
			// SugarWalker.g:275:2: ( ^( '?=' a= expr b= expr ) | ^( ':=' d= ident_list e= expr_list ) )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==106))
			{
				alt35 = 1;
			}
			else if ((LA35_0==92))
			{
				alt35 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:275:4: ^( '?=' a= expr b= expr )
				{
				DebugLocation(275, 4);
				DebugLocation(275, 6);
				Match(input,106,Follow._106_in_stmt_translate1060); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(275, 12);
				PushFollow(Follow._expr_in_stmt_translate1064);
				a=expr();
				PopFollow();

				DebugLocation(275, 19);
				PushFollow(Follow._expr_in_stmt_translate1068);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(276, 2);

						StmtBlock block = new StmtBlock();
						block.StmtList.Add(new StmtExpr(new ExprAssign(a, b)));
						StmtIf stmt_if = new StmtIf(new ExprBin("==", a, new ExprConst("nullptr", ConstType.Ident)), block, null);
						value.Add(stmt_if);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:282:4: ^( ':=' d= ident_list e= expr_list )
				{
				DebugLocation(282, 4);
				DebugLocation(282, 6);
				Match(input,92,Follow._92_in_stmt_translate1078); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(282, 12);
				PushFollow(Follow._ident_list_in_stmt_translate1082);
				d=ident_list();
				PopFollow();

				DebugLocation(282, 25);
				PushFollow(Follow._expr_list_in_stmt_translate1086);
				e=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(283, 2);

						int k = 0;
						for (int i = 0; i < d.Count(); i++)
						{
							value.Add(new StmtExpr(new ExprAlloc("auto", new List<string> { d[i] }, new List<Expr>{ e[k] }, true)));
							k = (k + 1) % e.Count();
						}
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_translate", 20);
			LeaveRule("stmt_translate", 20);
			LeaveRule_stmt_translate();
		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_translate"); }
		return value;

	}
	// $ANTLR end "stmt_translate"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarWalker.g:293:1: stmt_defer returns [Stmt value] : ^( Stmt_Defer a= stmt ) ;
	[GrammarRule("stmt_defer")]
	private Stmt stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 21);
		TraceIn("stmt_defer", 21);
		Stmt value = default(Stmt);


		List<Stmt> a = default(List<Stmt>);

		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(293, 1);
		try
		{
			// SugarWalker.g:294:2: ( ^( Stmt_Defer a= stmt ) )
			DebugEnterAlt(1);
			// SugarWalker.g:294:4: ^( Stmt_Defer a= stmt )
			{
			DebugLocation(294, 4);
			DebugLocation(294, 6);
			Match(input,Stmt_Defer,Follow._Stmt_Defer_in_stmt_defer1106); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(294, 18);
			PushFollow(Follow._stmt_in_stmt_defer1110);
			a=stmt();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(295, 2);

					value = new StmtDefer(a[0]);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_defer", 21);
			LeaveRule("stmt_defer", 21);
			LeaveRule_stmt_defer();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return value;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:300:1: stmt_expr returns [Stmt value] : (a= stmt_using |b= expr |c= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 22);
		TraceIn("stmt_expr", 22);
		Stmt value = default(Stmt);


		StmtUsing a = default(StmtUsing);
		Expr b = default(Expr);
		StmtTypeDef c = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(300, 1);
		try
		{
			// SugarWalker.g:301:2: (a= stmt_using |b= expr |c= stmt_typedef )
			int alt36=3;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case Stmt_Using:
				{
				alt36 = 1;
				}
				break;
			case Expr_Access:
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Cond_Not_Null:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Not_Null:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 69:
			case 72:
			case 76:
			case 79:
			case 83:
			case 89:
			case 92:
			case 96:
			case 98:
			case 104:
			case 107:
			case 112:
			case 114:
			case 126:
			case 127:
			case 132:
			case 141:
			case DOUBLE:
				{
				alt36 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt36 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:301:4: a= stmt_using
				{
				DebugLocation(301, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr1131);
				a=stmt_using();
				PopFollow();

				DebugLocation(301, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:302:4: b= expr
				{
				DebugLocation(302, 5);
				PushFollow(Follow._expr_in_stmt_expr1140);
				b=expr();
				PopFollow();

				DebugLocation(302, 11);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:303:4: c= stmt_typedef
				{
				DebugLocation(303, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1149);
				c=stmt_typedef();
				PopFollow();

				DebugLocation(303, 19);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 22);
			LeaveRule("stmt_expr", 22);
			LeaveRule_stmt_expr();
		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:306:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 23);
		TraceIn("stmt_using", 23);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(306, 1);
		try
		{
			// SugarWalker.g:311:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:311:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(311, 4);
			DebugLocation(311, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using1172); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(311, 17);
				// SugarWalker.g:311:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=3;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==IDENT))
					{
						alt37 = 1;
					}
					else if ((LA37_0==130))
					{
						alt37 = 2;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:311:19: a= ident
						{
						DebugLocation(311, 20);
						PushFollow(Follow._ident_in_stmt_using1178);
						a=ident();
						PopFollow();

						DebugLocation(311, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:312:10: b= 'namespace'
						{
						DebugLocation(312, 11);
						b=(CommonTree)Match(input,130,Follow._130_in_stmt_using1193); 
						DebugLocation(312, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 23);
			LeaveRule("stmt_using", 23);
			LeaveRule_stmt_using();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:315:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 24);
		TraceIn("stmt_typedef", 24);
		StmtTypeDef value = default(StmtTypeDef);


		string a = default(string);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(315, 1);
		try
		{
			// SugarWalker.g:316:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:316:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(316, 4);
			DebugLocation(316, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1214); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(316, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1218);
			a=type_name();
			PopFollow();

			DebugLocation(316, 32);
			PushFollow(Follow._ident_in_stmt_typedef1222);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(317, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 24);
			LeaveRule("stmt_typedef", 24);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:322:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 25);
		TraceIn("stmt_alloc", 25);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(322, 1);
		try
		{
			// SugarWalker.g:323:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:323:4: a= expr
			{
			DebugLocation(323, 5);
			PushFollow(Follow._expr_in_stmt_alloc1243);
			a=expr();
			PopFollow();

			DebugLocation(323, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 25);
			LeaveRule("stmt_alloc", 25);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:326:1: stmt_if returns [Stmt value] : ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 26);
		TraceIn("stmt_if", 26);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(326, 1);
		try
		{
			// SugarWalker.g:327:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:327:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
			{
			DebugLocation(327, 4);
			DebugLocation(327, 6);
			Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1261); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(327, 15);
			PushFollow(Follow._expr_in_stmt_if1265);
			a=expr();
			PopFollow();

			DebugLocation(327, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1269);
			b=stmt_block();
			PopFollow();

			DebugLocation(327, 34);
			// SugarWalker.g:327:34: (c= stmt_block )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==Stmt_Block))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:327:35: c= stmt_block
				{
				DebugLocation(327, 36);
				PushFollow(Follow._stmt_block_in_stmt_if1274);
				c=stmt_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(38); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(328, 2);

					value = new StmtIf(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 26);
			LeaveRule("stmt_if", 26);
			LeaveRule_stmt_if();
		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:333:1: stmt_while returns [Stmt value] : ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Loop b= stmt_block ) );
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 27);
		TraceIn("stmt_while", 27);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(333, 1);
		try
		{
			// SugarWalker.g:334:2: ( ^( Stmt_While a= expr b= stmt_block ) | ^( Stmt_Loop b= stmt_block ) )
			int alt39=2;
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==Stmt_While))
			{
				alt39 = 1;
			}
			else if ((LA39_0==Stmt_Loop))
			{
				alt39 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:334:4: ^( Stmt_While a= expr b= stmt_block )
				{
				DebugLocation(334, 4);
				DebugLocation(334, 6);
				Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1296); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(334, 18);
				PushFollow(Follow._expr_in_stmt_while1300);
				a=expr();
				PopFollow();

				DebugLocation(334, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1304);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(335, 2);

						value = new StmtWhile(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:338:4: ^( Stmt_Loop b= stmt_block )
				{
				DebugLocation(338, 4);
				DebugLocation(338, 6);
				Match(input,Stmt_Loop,Follow._Stmt_Loop_in_stmt_while1314); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(338, 17);
				PushFollow(Follow._stmt_block_in_stmt_while1318);
				b=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(339, 2);

						value = new StmtWhile(new ExprConst("true", ConstType.Ident), b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 27);
			LeaveRule("stmt_while", 27);
			LeaveRule_stmt_while();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:344:1: stmt_for returns [Stmt value] : ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) );
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 28);
		TraceIn("stmt_for", 28);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		StmtBlock d = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(344, 1);
		try
		{
			// SugarWalker.g:345:2: ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) )
			int alt40=2;
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==Stmt_For))
			{
				alt40 = 1;
			}
			else if ((LA40_0==Stmt_ForEach))
			{
				alt40 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:345:4: ^( Stmt_For a= expr b= expr c= expr d= stmt_block )
				{
				DebugLocation(345, 4);
				DebugLocation(345, 6);
				Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1338); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(345, 16);
				PushFollow(Follow._expr_in_stmt_for1342);
				a=expr();
				PopFollow();

				DebugLocation(345, 23);
				PushFollow(Follow._expr_in_stmt_for1346);
				b=expr();
				PopFollow();

				DebugLocation(345, 30);
				PushFollow(Follow._expr_in_stmt_for1350);
				c=expr();
				PopFollow();

				DebugLocation(345, 37);
				PushFollow(Follow._stmt_block_in_stmt_for1354);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(346, 2);

						
						value = new StmtFor(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:350:4: ^( Stmt_ForEach a= expr b= expr d= stmt_block )
				{
				DebugLocation(350, 4);
				DebugLocation(350, 6);
				Match(input,Stmt_ForEach,Follow._Stmt_ForEach_in_stmt_for1364); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(350, 20);
				PushFollow(Follow._expr_in_stmt_for1368);
				a=expr();
				PopFollow();

				DebugLocation(350, 27);
				PushFollow(Follow._expr_in_stmt_for1372);
				b=expr();
				PopFollow();

				DebugLocation(350, 34);
				PushFollow(Follow._stmt_block_in_stmt_for1376);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(351, 2);

						value = new StmtForEach(a, b, d);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 28);
			LeaveRule("stmt_for", 28);
			LeaveRule_stmt_for();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:356:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 29);
		TraceIn("stmt_try", 29);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Expr b = default(Expr);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(356, 1);
		try
		{
			// SugarWalker.g:357:2: ( ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:357:4: ^( Stmt_Try a= stmt_block b= expr c= stmt_block )
			{
			DebugLocation(357, 4);
			DebugLocation(357, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1396); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(357, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1400);
			a=stmt_block();
			PopFollow();

			DebugLocation(357, 29);
			PushFollow(Follow._expr_in_stmt_try1404);
			b=expr();
			PopFollow();

			DebugLocation(357, 36);
			PushFollow(Follow._stmt_block_in_stmt_try1408);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(358, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 29);
			LeaveRule("stmt_try", 29);
			LeaveRule_stmt_try();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:363:1: stmt_return returns [Stmt value] : ^( Stmt_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 30);
		TraceIn("stmt_return", 30);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(363, 1);
		try
		{
			// SugarWalker.g:364:2: ( ^( Stmt_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:364:4: ^( Stmt_Return (a= expr )? )
			{
			DebugLocation(364, 4);
			DebugLocation(364, 6);
			Match(input,Stmt_Return,Follow._Stmt_Return_in_stmt_return1428); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(364, 18);
				// SugarWalker.g:364:18: (a= expr )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if (((LA41_0>=Expr_Access && LA41_0<=Expr_Tuple)||LA41_0==IDENT||LA41_0==Match_Tuple||LA41_0==NUMBER||LA41_0==STRING||LA41_0==69||LA41_0==72||LA41_0==76||LA41_0==79||LA41_0==83||LA41_0==89||LA41_0==92||LA41_0==96||LA41_0==98||LA41_0==104||LA41_0==107||LA41_0==112||LA41_0==114||(LA41_0>=126 && LA41_0<=127)||LA41_0==132||LA41_0==141||LA41_0==DOUBLE))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:364:19: a= expr
					{
					DebugLocation(364, 20);
					PushFollow(Follow._expr_in_stmt_return1433);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(41); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(365, 2);

					value = new StmtReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 30);
			LeaveRule("stmt_return", 30);
			LeaveRule_stmt_return();
		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarWalker.g:370:1: linq_item returns [LinqItem value] : ( ^( Linq_From x= expr b= expr ) | ^( Linq_Let a= ident b= expr ) | ^( Linq_Where b= expr ) );
	[GrammarRule("linq_item")]
	private LinqItem linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 31);
		TraceIn("linq_item", 31);
		LinqItem value = default(LinqItem);


		Expr x = default(Expr);
		Expr b = default(Expr);
		string a = default(string);

		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(370, 1);
		try
		{
			// SugarWalker.g:371:2: ( ^( Linq_From x= expr b= expr ) | ^( Linq_Let a= ident b= expr ) | ^( Linq_Where b= expr ) )
			int alt42=3;
			try { DebugEnterDecision(42, false);
			switch (input.LA(1))
			{
			case Linq_From:
				{
				alt42 = 1;
				}
				break;
			case Linq_Let:
				{
				alt42 = 2;
				}
				break;
			case Linq_Where:
				{
				alt42 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:371:4: ^( Linq_From x= expr b= expr )
				{
				DebugLocation(371, 4);
				DebugLocation(371, 6);
				Match(input,Linq_From,Follow._Linq_From_in_linq_item1455); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(371, 17);
				PushFollow(Follow._expr_in_linq_item1459);
				x=expr();
				PopFollow();

				DebugLocation(371, 24);
				PushFollow(Follow._expr_in_linq_item1463);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(372, 2);

						value = new LinqFrom(x, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:375:4: ^( Linq_Let a= ident b= expr )
				{
				DebugLocation(375, 4);
				DebugLocation(375, 6);
				Match(input,Linq_Let,Follow._Linq_Let_in_linq_item1473); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(375, 16);
				PushFollow(Follow._ident_in_linq_item1477);
				a=ident();
				PopFollow();

				DebugLocation(375, 24);
				PushFollow(Follow._expr_in_linq_item1481);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(376, 2);

						value = new LinqLet(a, b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:379:4: ^( Linq_Where b= expr )
				{
				DebugLocation(379, 4);
				DebugLocation(379, 6);
				Match(input,Linq_Where,Follow._Linq_Where_in_linq_item1491); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(379, 18);
				PushFollow(Follow._expr_in_linq_item1495);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(380, 2);

						value = new LinqWhere(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("linq_item", 31);
			LeaveRule("linq_item", 31);
			LeaveRule_linq_item();
		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return value;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarWalker.g:385:1: linq_prefix returns [List<LinqItem> value] : ^( Linq_Prefix (a= linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private List<LinqItem> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 32);
		TraceIn("linq_prefix", 32);
		List<LinqItem> value = default(List<LinqItem>);


		LinqItem a = default(LinqItem);


			value = new List<LinqItem>();

		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(385, 1);
		try
		{
			// SugarWalker.g:390:2: ( ^( Linq_Prefix (a= linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:390:4: ^( Linq_Prefix (a= linq_item )+ )
			{
			DebugLocation(390, 4);
			DebugLocation(390, 6);
			Match(input,Linq_Prefix,Follow._Linq_Prefix_in_linq_prefix1520); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(390, 18);
			// SugarWalker.g:390:18: (a= linq_item )+
			int cnt43=0;
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if (((LA43_0>=Linq_From && LA43_0<=Linq_Let)||LA43_0==Linq_Where))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:390:19: a= linq_item
					{
					DebugLocation(390, 20);
					PushFollow(Follow._linq_item_in_linq_prefix1525);
					a=linq_item();
					PopFollow();

					DebugLocation(390, 31);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt43 >= 1)
						goto loop43;

					EarlyExitException eee43 = new EarlyExitException( 43, input );
					DebugRecognitionException(eee43);
					throw eee43;
				}
				cnt43++;
			}
			loop43:
				;

			} finally { DebugExitSubRule(43); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("linq_prefix", 32);
			LeaveRule("linq_prefix", 32);
			LeaveRule_linq_prefix();
		}
		DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return value;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarWalker.g:393:1: stmt_linq returns [Stmt value] : ^( Stmt_Linq a= linq_prefix b= stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private Stmt stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 33);
		TraceIn("stmt_linq", 33);
		Stmt value = default(Stmt);


		List<LinqItem> a = default(List<LinqItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(393, 1);
		try
		{
			// SugarWalker.g:394:2: ( ^( Stmt_Linq a= linq_prefix b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:394:4: ^( Stmt_Linq a= linq_prefix b= stmt_block )
			{
			DebugLocation(394, 4);
			DebugLocation(394, 6);
			Match(input,Stmt_Linq,Follow._Stmt_Linq_in_stmt_linq1546); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(394, 17);
			PushFollow(Follow._linq_prefix_in_stmt_linq1550);
			a=linq_prefix();
			PopFollow();

			DebugLocation(394, 31);
			PushFollow(Follow._stmt_block_in_stmt_linq1554);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(395, 2);

					value = new StmtLinq(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_linq", 33);
			LeaveRule("stmt_linq", 33);
			LeaveRule_stmt_linq();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return value;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:400:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 34);
		TraceIn("ident", 34);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(400, 1);
		try
		{
			// SugarWalker.g:405:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:405:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(405, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1580); 
			DebugLocation(405, 12);
			 value += a.Text; 
			DebugLocation(405, 34);
			// SugarWalker.g:405:34: ( '::' a= IDENT )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==91))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:405:35: '::' a= IDENT
					{
					DebugLocation(405, 35);
					Match(input,91,Follow._91_in_ident1585); 
					DebugLocation(405, 41);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1589); 
					DebugLocation(405, 48);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 34);
			LeaveRule("ident", 34);
			LeaveRule_ident();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:408:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 35);
		TraceIn("ident_list", 35);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(408, 1);
		try
		{
			// SugarWalker.g:413:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:413:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(413, 4);
			DebugLocation(413, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list1614); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(413, 17);
				// SugarWalker.g:413:17: (a= ident )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_0 = input.LA(1);

					if ((LA45_0==IDENT))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:413:18: a= ident
						{
						DebugLocation(413, 19);
						PushFollow(Follow._ident_in_ident_list1619);
						a=ident();
						PopFollow();

						DebugLocation(413, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 35);
			LeaveRule("ident_list", 35);
			LeaveRule_ident_list();
		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:416:1: alloc_expr returns [ExprAlloc value] : ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) );
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 36);
		TraceIn("alloc_expr", 36);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(416, 1);
		try
		{
			// SugarWalker.g:417:2: ( ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? ) | ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? ) )
			int alt48=2;
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==Expr_Alloc_Equal))
			{
				alt48 = 1;
			}
			else if ((LA48_0==Expr_Alloc_Bracket))
			{
				alt48 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:417:4: ^( Expr_Alloc_Equal a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(417, 4);
				DebugLocation(417, 6);
				Match(input,Expr_Alloc_Equal,Follow._Expr_Alloc_Equal_in_alloc_expr1641); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(417, 24);
				PushFollow(Follow._type_name_in_alloc_expr1645);
				a=type_name();
				PopFollow();

				DebugLocation(417, 36);
				PushFollow(Follow._ident_list_in_alloc_expr1649);
				b=ident_list();
				PopFollow();

				DebugLocation(417, 48);
				// SugarWalker.g:417:48: (c= expr_list )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if (((LA46_0>=Expr_Access && LA46_0<=Expr_Tuple)||LA46_0==IDENT||LA46_0==Match_Tuple||LA46_0==NUMBER||LA46_0==STRING||LA46_0==69||LA46_0==72||LA46_0==76||LA46_0==79||LA46_0==83||LA46_0==89||LA46_0==92||LA46_0==96||LA46_0==98||LA46_0==104||LA46_0==107||LA46_0==112||LA46_0==114||(LA46_0>=126 && LA46_0<=127)||LA46_0==132||LA46_0==141||LA46_0==DOUBLE))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:417:49: c= expr_list
					{
					DebugLocation(417, 50);
					PushFollow(Follow._expr_list_in_alloc_expr1654);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(46); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(418, 2);

						value = new ExprAlloc(a, b, c, true);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:421:4: ^( Expr_Alloc_Bracket a= type_name b= ident_list (c= expr_list )? )
				{
				DebugLocation(421, 4);
				DebugLocation(421, 6);
				Match(input,Expr_Alloc_Bracket,Follow._Expr_Alloc_Bracket_in_alloc_expr1666); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(421, 26);
				PushFollow(Follow._type_name_in_alloc_expr1670);
				a=type_name();
				PopFollow();

				DebugLocation(421, 38);
				PushFollow(Follow._ident_list_in_alloc_expr1674);
				b=ident_list();
				PopFollow();

				DebugLocation(421, 50);
				// SugarWalker.g:421:50: (c= expr_list )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if (((LA47_0>=Expr_Access && LA47_0<=Expr_Tuple)||LA47_0==IDENT||LA47_0==Match_Tuple||LA47_0==NUMBER||LA47_0==STRING||LA47_0==69||LA47_0==72||LA47_0==76||LA47_0==79||LA47_0==83||LA47_0==89||LA47_0==92||LA47_0==96||LA47_0==98||LA47_0==104||LA47_0==107||LA47_0==112||LA47_0==114||(LA47_0>=126 && LA47_0<=127)||LA47_0==132||LA47_0==141||LA47_0==DOUBLE))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:421:51: c= expr_list
					{
					DebugLocation(421, 52);
					PushFollow(Follow._expr_list_in_alloc_expr1679);
					c=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(422, 2);

						value = new ExprAlloc(a, b, c, false);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 36);
			LeaveRule("alloc_expr", 36);
			LeaveRule_alloc_expr();
		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:427:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 37);
		TraceIn("expr_tuple", 37);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(427, 1);
		try
		{
			// SugarWalker.g:432:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:432:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(432, 4);
			DebugLocation(432, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple1706); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(432, 17);
			// SugarWalker.g:432:17: (a= expr )+
			int cnt49=0;
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if (((LA49_0>=Expr_Access && LA49_0<=Expr_Tuple)||LA49_0==IDENT||LA49_0==Match_Tuple||LA49_0==NUMBER||LA49_0==STRING||LA49_0==69||LA49_0==72||LA49_0==76||LA49_0==79||LA49_0==83||LA49_0==89||LA49_0==92||LA49_0==96||LA49_0==98||LA49_0==104||LA49_0==107||LA49_0==112||LA49_0==114||(LA49_0>=126 && LA49_0<=127)||LA49_0==132||LA49_0==141||LA49_0==DOUBLE))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:432:18: a= expr
					{
					DebugLocation(432, 19);
					PushFollow(Follow._expr_in_expr_tuple1711);
					a=expr();
					PopFollow();

					DebugLocation(432, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt49 >= 1)
						goto loop49;

					EarlyExitException eee49 = new EarlyExitException( 49, input );
					DebugRecognitionException(eee49);
					throw eee49;
				}
				cnt49++;
			}
			loop49:
				;

			} finally { DebugExitSubRule(49); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 37);
			LeaveRule("expr_tuple", 37);
			LeaveRule_expr_tuple();
		}
		DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:435:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 38);
		TraceIn("match_tuple", 38);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(435, 1);
		try
		{
			// SugarWalker.g:440:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:440:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(440, 4);
			DebugLocation(440, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple1738); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(440, 18);
				// SugarWalker.g:440:18: (a= expr )*
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					int LA50_0 = input.LA(1);

					if (((LA50_0>=Expr_Access && LA50_0<=Expr_Tuple)||LA50_0==IDENT||LA50_0==Match_Tuple||LA50_0==NUMBER||LA50_0==STRING||LA50_0==69||LA50_0==72||LA50_0==76||LA50_0==79||LA50_0==83||LA50_0==89||LA50_0==92||LA50_0==96||LA50_0==98||LA50_0==104||LA50_0==107||LA50_0==112||LA50_0==114||(LA50_0>=126 && LA50_0<=127)||LA50_0==132||LA50_0==141||LA50_0==DOUBLE))
					{
						alt50 = 1;
					}


					} finally { DebugExitDecision(50); }
					switch ( alt50 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:440:19: a= expr
						{
						DebugLocation(440, 20);
						PushFollow(Follow._expr_in_match_tuple1743);
						a=expr();
						PopFollow();

						DebugLocation(440, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop50;
					}
				}

				loop50:
					;

				} finally { DebugExitSubRule(50); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 38);
			LeaveRule("match_tuple", 38);
			LeaveRule_match_tuple();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:443:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 39);
		TraceIn("expr_list", 39);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(443, 1);
		try
		{
			// SugarWalker.g:448:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:448:4: (a= expr )+
			{
			DebugLocation(448, 4);
			// SugarWalker.g:448:4: (a= expr )+
			int cnt51=0;
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if (((LA51_0>=Expr_Access && LA51_0<=Expr_Tuple)||LA51_0==IDENT||LA51_0==Match_Tuple||LA51_0==NUMBER||LA51_0==STRING||LA51_0==69||LA51_0==72||LA51_0==76||LA51_0==79||LA51_0==83||LA51_0==89||LA51_0==92||LA51_0==96||LA51_0==98||LA51_0==104||LA51_0==107||LA51_0==112||LA51_0==114||(LA51_0>=126 && LA51_0<=127)||LA51_0==132||LA51_0==141||LA51_0==DOUBLE))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:448:5: a= expr
					{
					DebugLocation(448, 6);
					PushFollow(Follow._expr_in_expr_list1771);
					a=expr();
					PopFollow();

					DebugLocation(448, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt51 >= 1)
						goto loop51;

					EarlyExitException eee51 = new EarlyExitException( 51, input );
					DebugRecognitionException(eee51);
					throw eee51;
				}
				cnt51++;
			}
			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 39);
			LeaveRule("expr_list", 39);
			LeaveRule_expr_list();
		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:451:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 40);
		TraceIn("call_expr", 40);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		List<string> b = default(List<string>);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(451, 1);
		try
		{
			// SugarWalker.g:452:2: ( ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:452:4: ^( Expr_Call a= expr (b= generic_parameter )? (c= expr_list )? )
			{
			DebugLocation(452, 4);
			DebugLocation(452, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr1791); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(452, 17);
			PushFollow(Follow._expr_in_call_expr1795);
			a=expr();
			PopFollow();

			DebugLocation(452, 23);
			// SugarWalker.g:452:23: (b= generic_parameter )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==Generic_Patameters))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:452:24: b= generic_parameter
				{
				DebugLocation(452, 25);
				PushFollow(Follow._generic_parameter_in_call_expr1800);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(452, 46);
			// SugarWalker.g:452:46: (c= expr_list )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if (((LA53_0>=Expr_Access && LA53_0<=Expr_Tuple)||LA53_0==IDENT||LA53_0==Match_Tuple||LA53_0==NUMBER||LA53_0==STRING||LA53_0==69||LA53_0==72||LA53_0==76||LA53_0==79||LA53_0==83||LA53_0==89||LA53_0==92||LA53_0==96||LA53_0==98||LA53_0==104||LA53_0==107||LA53_0==112||LA53_0==114||(LA53_0>=126 && LA53_0<=127)||LA53_0==132||LA53_0==141||LA53_0==DOUBLE))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:452:47: c= expr_list
				{
				DebugLocation(452, 48);
				PushFollow(Follow._expr_list_in_call_expr1807);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(53); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(453, 2);

					value = new ExprCall(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 40);
			LeaveRule("call_expr", 40);
			LeaveRule_call_expr();
		}
		DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:458:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 41);
		TraceIn("dict_expr", 41);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(458, 1);
		try
		{
			// SugarWalker.g:459:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:459:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(459, 4);
			DebugLocation(459, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr1829); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(459, 17);
			PushFollow(Follow._expr_in_dict_expr1833);
			a=expr();
			PopFollow();

			DebugLocation(459, 23);
			// SugarWalker.g:459:23: (b= expr_list )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if (((LA54_0>=Expr_Access && LA54_0<=Expr_Tuple)||LA54_0==IDENT||LA54_0==Match_Tuple||LA54_0==NUMBER||LA54_0==STRING||LA54_0==69||LA54_0==72||LA54_0==76||LA54_0==79||LA54_0==83||LA54_0==89||LA54_0==92||LA54_0==96||LA54_0==98||LA54_0==104||LA54_0==107||LA54_0==112||LA54_0==114||(LA54_0>=126 && LA54_0<=127)||LA54_0==132||LA54_0==141||LA54_0==DOUBLE))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:459:24: b= expr_list
				{
				DebugLocation(459, 25);
				PushFollow(Follow._expr_list_in_dict_expr1838);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(460, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 41);
			LeaveRule("dict_expr", 41);
			LeaveRule_dict_expr();
		}
		DebugLocation(463, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:465:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda (b= func_args )? a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 42);
		TraceIn("lambda_expr", 42);
		ExprLambda value = default(ExprLambda);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(465, 1);
		try
		{
			// SugarWalker.g:466:2: ( ^( Expr_Lambda (b= func_args )? a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:466:4: ^( Expr_Lambda (b= func_args )? a= expr )
			{
			DebugLocation(466, 4);
			DebugLocation(466, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr1860); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(466, 18);
			// SugarWalker.g:466:18: (b= func_args )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==Func_Args))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:466:19: b= func_args
				{
				DebugLocation(466, 20);
				PushFollow(Follow._func_args_in_lambda_expr1865);
				b=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(466, 34);
			PushFollow(Follow._expr_in_lambda_expr1871);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(467, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 42);
			LeaveRule("lambda_expr", 42);
			LeaveRule_lambda_expr();
		}
		DebugLocation(470, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:472:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 43);
		TraceIn("new_expr", 43);
		Expr value = default(Expr);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(472, 1);
		try
		{
			// SugarWalker.g:473:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==Expr_New_Type))
			{
				alt57 = 1;
			}
			else if ((LA57_0==Expr_New_Array))
			{
				alt57 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:473:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(473, 4);
				DebugLocation(473, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr1891); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(473, 21);
				PushFollow(Follow._type_name_in_new_expr1895);
				a=type_name();
				PopFollow();

				DebugLocation(473, 33);
				// SugarWalker.g:473:33: (b= expr_list )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if (((LA56_0>=Expr_Access && LA56_0<=Expr_Tuple)||LA56_0==IDENT||LA56_0==Match_Tuple||LA56_0==NUMBER||LA56_0==STRING||LA56_0==69||LA56_0==72||LA56_0==76||LA56_0==79||LA56_0==83||LA56_0==89||LA56_0==92||LA56_0==96||LA56_0==98||LA56_0==104||LA56_0==107||LA56_0==112||LA56_0==114||(LA56_0>=126 && LA56_0<=127)||LA56_0==132||LA56_0==141||LA56_0==DOUBLE))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:473:33: b= expr_list
					{
					DebugLocation(473, 33);
					PushFollow(Follow._expr_list_in_new_expr1899);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(56); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(474, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:477:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(477, 4);
				DebugLocation(477, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr1910); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(477, 22);
				PushFollow(Follow._type_name_in_new_expr1914);
				a=type_name();
				PopFollow();

				DebugLocation(477, 34);
				PushFollow(Follow._expr_list_in_new_expr1918);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(478, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 43);
			LeaveRule("new_expr", 43);
			LeaveRule_new_expr();
		}
		DebugLocation(481, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:483:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 44);
		TraceIn("call_with_expr", 44);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(483, 1);
		try
		{
			// SugarWalker.g:484:2: ( ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:484:4: ^( Expr_Call_With a= expr b= ident (c= expr_list )? )
			{
			DebugLocation(484, 4);
			DebugLocation(484, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr1938); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(484, 22);
			PushFollow(Follow._expr_in_call_with_expr1942);
			a=expr();
			PopFollow();

			DebugLocation(484, 29);
			PushFollow(Follow._ident_in_call_with_expr1946);
			b=ident();
			PopFollow();

			DebugLocation(484, 37);
			// SugarWalker.g:484:37: (c= expr_list )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if (((LA58_0>=Expr_Access && LA58_0<=Expr_Tuple)||LA58_0==IDENT||LA58_0==Match_Tuple||LA58_0==NUMBER||LA58_0==STRING||LA58_0==69||LA58_0==72||LA58_0==76||LA58_0==79||LA58_0==83||LA58_0==89||LA58_0==92||LA58_0==96||LA58_0==98||LA58_0==104||LA58_0==107||LA58_0==112||LA58_0==114||(LA58_0>=126 && LA58_0<=127)||LA58_0==132||LA58_0==141||LA58_0==DOUBLE))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:484:37: c= expr_list
				{
				DebugLocation(484, 37);
				PushFollow(Follow._expr_list_in_call_with_expr1950);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(485, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b, ConstType.Ident), null, Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 44);
			LeaveRule("call_with_expr", 44);
			LeaveRule_call_with_expr();
		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:499:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'and' | 'or' | 'is' | 'isnt' ) a= expr b= expr ) | ^( 'and' a= expr b= expr ) | ^( 'or' a= expr b= expr ) | ^( 'is' a= expr b= expr ) | ^( 'isnt' a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 45);
		TraceIn("expr", 45);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		Expr expr_new = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(499, 1);
		try
		{
			// SugarWalker.g:500:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Cond_Not_Null a= expr b= expr ) | ^( Expr_Not_Null a= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'and' | 'or' | 'is' | 'isnt' ) a= expr b= expr ) | ^( 'and' a= expr b= expr ) | ^( 'or' a= expr b= expr ) | ^( 'is' a= expr b= expr ) | ^( 'isnt' a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( '@' text_ident= ident ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) | ^( ':=' a= expr b= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE ) |text= STRING )
			int alt59=27;
			try { DebugEnterDecision(59, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt59 = 1;
				}
				break;
			case Expr_Alloc_Bracket:
			case Expr_Alloc_Equal:
				{
				alt59 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt59 = 3;
				}
				break;
			case Expr_Call:
				{
				alt59 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt59 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt59 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt59 = 7;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt59 = 8;
				}
				break;
			case Expr_Infix:
				{
				alt59 = 9;
				}
				break;
			case Expr_Cond:
				{
				alt59 = 10;
				}
				break;
			case Expr_Cond_Not_Null:
				{
				alt59 = 11;
				}
				break;
			case Expr_Not_Null:
				{
				alt59 = 12;
				}
				break;
			case Expr_Access:
				{
				alt59 = 13;
				}
				break;
			case Expr_Bin:
				{
				alt59 = 14;
				}
				break;
			case 114:
				{
				alt59 = 15;
				}
				break;
			case 132:
				{
				alt59 = 16;
				}
				break;
			case 126:
				{
				alt59 = 17;
				}
				break;
			case 127:
				{
				alt59 = 18;
				}
				break;
			case 69:
			case 72:
			case 76:
			case 79:
			case 83:
			case 89:
			case 96:
			case 98:
			case 104:
			case 112:
			case 141:
				{
				alt59 = 19;
				}
				break;
			case 107:
				{
				alt59 = 20;
				}
				break;
			case Expr_Bracket:
				{
				alt59 = 21;
				}
				break;
			case Expr_Suffix:
				{
				alt59 = 22;
				}
				break;
			case Expr_Prefix:
				{
				alt59 = 23;
				}
				break;
			case 92:
				{
				alt59 = 24;
				}
				break;
			case IDENT:
				{
				alt59 = 25;
				}
				break;
			case NUMBER:
			case DOUBLE:
				{
				alt59 = 26;
				}
				break;
			case STRING:
				{
				alt59 = 27;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:500:7: tuple= expr_tuple
				{
				DebugLocation(500, 12);
				PushFollow(Follow._expr_tuple_in_expr1975);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(501, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:504:4: alloc= alloc_expr
				{
				DebugLocation(504, 9);
				PushFollow(Follow._alloc_expr_in_expr1985);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(505, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:508:4: match= match_tuple
				{
				DebugLocation(508, 9);
				PushFollow(Follow._match_tuple_in_expr1995);
				match=match_tuple();
				PopFollow();

				DebugLocation(509, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:512:4: call= call_expr
				{
				DebugLocation(512, 8);
				PushFollow(Follow._call_expr_in_expr2005);
				call=call_expr();
				PopFollow();

				DebugLocation(513, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:516:4: call_with= call_with_expr
				{
				DebugLocation(516, 13);
				PushFollow(Follow._call_with_expr_in_expr2015);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(517, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:520:4: dict= dict_expr
				{
				DebugLocation(520, 8);
				PushFollow(Follow._dict_expr_in_expr2025);
				dict=dict_expr();
				PopFollow();

				DebugLocation(521, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:524:4: lambda= lambda_expr
				{
				DebugLocation(524, 10);
				PushFollow(Follow._lambda_expr_in_expr2035);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(525, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:528:4: expr_new= new_expr
				{
				DebugLocation(528, 12);
				PushFollow(Follow._new_expr_in_expr2045);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(529, 2);

						value = expr_new;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:532:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(532, 4);
				DebugLocation(532, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr2054); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(532, 27);
				PushFollow(Follow._ident_in_expr2058);
				ident_text=ident();
				PopFollow();

				DebugLocation(532, 35);
				PushFollow(Follow._expr_in_expr2062);
				a=expr();
				PopFollow();

				DebugLocation(532, 42);
				PushFollow(Follow._expr_in_expr2066);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(533, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:536:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(536, 4);
				DebugLocation(536, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr2076); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(536, 17);
				PushFollow(Follow._expr_in_expr2080);
				a=expr();
				PopFollow();

				DebugLocation(536, 24);
				PushFollow(Follow._expr_in_expr2084);
				b=expr();
				PopFollow();

				DebugLocation(536, 31);
				PushFollow(Follow._expr_in_expr2088);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(537, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:540:4: ^( Expr_Cond_Not_Null a= expr b= expr )
				{
				DebugLocation(540, 4);
				DebugLocation(540, 6);
				Match(input,Expr_Cond_Not_Null,Follow._Expr_Cond_Not_Null_in_expr2098); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(540, 26);
				PushFollow(Follow._expr_in_expr2102);
				a=expr();
				PopFollow();

				DebugLocation(540, 33);
				PushFollow(Follow._expr_in_expr2106);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(541, 2);

						value = new ExprCond(new ExprBin("!=", a, new ExprConst("nullptr", ConstType.Ident)), a, b);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:544:4: ^( Expr_Not_Null a= expr )
				{
				DebugLocation(544, 4);
				DebugLocation(544, 6);
				Match(input,Expr_Not_Null,Follow._Expr_Not_Null_in_expr2116); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(544, 21);
				PushFollow(Follow._expr_in_expr2120);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(545, 2);

						value = new ExprBin("!=", a, new ExprConst("nullptr", ConstType.Ident));
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:548:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(548, 4);
				DebugLocation(548, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr2130); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(548, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=84 && input.LA(1)<=87)||input.LA(1)==91)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(548, 57);
				PushFollow(Follow._expr_in_expr2156);
				a=expr();
				PopFollow();

				DebugLocation(548, 73);
				PushFollow(Follow._ident_in_expr2160);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(549, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:552:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' | 'and' | 'or' | 'is' | 'isnt' ) a= expr b= expr )
				{
				DebugLocation(552, 4);
				DebugLocation(552, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr2170); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(552, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=67 && input.LA(1)<=68)||(input.LA(1)>=70 && input.LA(1)<=71)||input.LA(1)==75||input.LA(1)==77||input.LA(1)==81||input.LA(1)==88||(input.LA(1)>=94 && input.LA(1)<=95)||input.LA(1)==97||input.LA(1)==99||(input.LA(1)>=101 && input.LA(1)<=103)||input.LA(1)==111||input.LA(1)==114||(input.LA(1)>=126 && input.LA(1)<=127)||input.LA(1)==132||input.LA(1)==140||input.LA(1)==142)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(558, 9);
				PushFollow(Follow._expr_in_expr2296);
				a=expr();
				PopFollow();

				DebugLocation(558, 16);
				PushFollow(Follow._expr_in_expr2300);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(559, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:562:4: ^( 'and' a= expr b= expr )
				{
				DebugLocation(562, 4);
				DebugLocation(562, 6);
				Match(input,114,Follow._114_in_expr2310); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(562, 13);
				PushFollow(Follow._expr_in_expr2314);
				a=expr();
				PopFollow();

				DebugLocation(562, 20);
				PushFollow(Follow._expr_in_expr2318);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(563, 2);

						value = new ExprBin("&&", a, b);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:566:4: ^( 'or' a= expr b= expr )
				{
				DebugLocation(566, 4);
				DebugLocation(566, 6);
				Match(input,132,Follow._132_in_expr2328); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(566, 12);
				PushFollow(Follow._expr_in_expr2332);
				a=expr();
				PopFollow();

				DebugLocation(566, 19);
				PushFollow(Follow._expr_in_expr2336);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(567, 2);

						value = new ExprBin("||", a, b);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:570:4: ^( 'is' a= expr b= expr )
				{
				DebugLocation(570, 4);
				DebugLocation(570, 6);
				Match(input,126,Follow._126_in_expr2346); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(570, 12);
				PushFollow(Follow._expr_in_expr2350);
				a=expr();
				PopFollow();

				DebugLocation(570, 19);
				PushFollow(Follow._expr_in_expr2354);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(571, 2);

						value = new ExprBin("==", a, b);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:574:4: ^( 'isnt' a= expr b= expr )
				{
				DebugLocation(574, 4);
				DebugLocation(574, 6);
				Match(input,127,Follow._127_in_expr2364); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(574, 14);
				PushFollow(Follow._expr_in_expr2368);
				a=expr();
				PopFollow();

				DebugLocation(574, 21);
				PushFollow(Follow._expr_in_expr2372);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(575, 2);

						value = new ExprBin("!=", a, b);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:578:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(578, 4);
				DebugLocation(578, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==69||input.LA(1)==72||input.LA(1)==76||input.LA(1)==79||input.LA(1)==83||input.LA(1)==89||input.LA(1)==96||input.LA(1)==98||input.LA(1)==104||input.LA(1)==112||input.LA(1)==141)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(578, 88);
				PushFollow(Follow._expr_in_expr2430);
				a=expr();
				PopFollow();

				DebugLocation(578, 95);
				PushFollow(Follow._expr_in_expr2434);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(579, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// SugarWalker.g:582:4: ^( '@' text_ident= ident )
				{
				DebugLocation(582, 4);
				DebugLocation(582, 6);
				Match(input,107,Follow._107_in_expr2444); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(582, 20);
				PushFollow(Follow._ident_in_expr2448);
				text_ident=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(583, 2);

						value = new ExprAccess(new ExprConst("this", ConstType.Ident), "->", text_ident);
					

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// SugarWalker.g:586:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(586, 4);
				DebugLocation(586, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr2458); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(586, 20);
				PushFollow(Follow._expr_in_expr2462);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(587, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// SugarWalker.g:590:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(590, 4);
				DebugLocation(590, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr2472); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(590, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==78||input.LA(1)==82)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(590, 36);
				PushFollow(Follow._expr_in_expr2486);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(591, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 23:
				DebugEnterAlt(23);
				// SugarWalker.g:594:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(594, 4);
				DebugLocation(594, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr2496); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(594, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==66||input.LA(1)==71||input.LA(1)==75||(input.LA(1)>=77 && input.LA(1)<=78)||(input.LA(1)>=81 && input.LA(1)<=82)||input.LA(1)==143)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(594, 72);
				PushFollow(Follow._expr_in_expr2534);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(595, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 24:
				DebugEnterAlt(24);
				// SugarWalker.g:598:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(598, 4);
				DebugLocation(598, 6);
				Match(input,92,Follow._92_in_expr2544); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(598, 12);
				PushFollow(Follow._expr_in_expr2548);
				a=expr();
				PopFollow();

				DebugLocation(598, 19);
				PushFollow(Follow._expr_in_expr2552);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(599, 2);

						if (!(a is ExprConst))
						{
							throw new Exception("Assert failed.");
						}
						value = new ExprAlloc("auto", new List<string> { ((ExprConst)a).Text }, new List<Expr> { b }, true);
					

				}
				break;
			case 25:
				DebugEnterAlt(25);
				// SugarWalker.g:606:4: text_ident= ident
				{
				DebugLocation(606, 15);
				PushFollow(Follow._ident_in_expr2565);
				text_ident=ident();
				PopFollow();

				DebugLocation(607, 2);

						if (text_ident == "nil") text_ident = "nullptr";
						value = new ExprConst(text_ident, ConstType.Ident);
					

				}
				break;
			case 26:
				DebugEnterAlt(26);
				// SugarWalker.g:611:4: text= ( NUMBER | DOUBLE )
				{
				DebugLocation(611, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(612, 5);

				        value = new ExprConst(text.Text, ConstType.Number);
				    

				}
				break;
			case 27:
				DebugEnterAlt(27);
				// SugarWalker.g:615:4: text= STRING
				{
				DebugLocation(615, 9);
				text=(CommonTree)Match(input,STRING,Follow._STRING_in_expr2596); 
				DebugLocation(616, 2);

				        value = new ExprConst(text.Text, ConstType.String);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 45);
			LeaveRule("expr", 45);
			LeaveRule_expr();
		}
		DebugLocation(619, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0x3000401040003448UL,0x10000000UL});
		public static readonly BitSet _func_def_in_node139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_global_alloc258 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc263 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _type_name_in_global_alloc269 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_list_in_global_alloc273 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_global_alloc278 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_global_alloc290 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc295 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _type_name_in_global_alloc301 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_list_in_global_alloc305 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_global_alloc310 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _92_in_global_alloc322 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc327 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_list_in_global_alloc333 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_global_alloc337 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item424 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item429 = new BitSet(new ulong[]{0x4200200000008UL});
		public static readonly BitSet _117_in_attribute_item437 = new BitSet(new ulong[]{0x4200200000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item445 = new BitSet(new ulong[]{0x4200200000008UL});
		public static readonly BitSet _attribute_item_in_attribute473 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def494 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def498 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _global_block_in_namespace_def502 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def527 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_import_def532 = new BitSet(new ulong[]{0x4000000000008UL});
		public static readonly BitSet _Enum_in_enum_def553 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def558 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_enum_def564 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_list_in_enum_def568 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def588 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_class_def593 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_class_def599 = new BitSet(new ulong[]{0x9A0000008UL});
		public static readonly BitSet _generic_parameter_in_class_def604 = new BitSet(new ulong[]{0x920000008UL});
		public static readonly BitSet _func_args_in_class_def611 = new BitSet(new ulong[]{0x900000008UL});
		public static readonly BitSet _ident_list_in_class_def618 = new BitSet(new ulong[]{0x100000008UL});
		public static readonly BitSet _global_block_in_class_def625 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_IDENT_in_type_name653 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _117_in_type_name662 = new BitSet(new ulong[]{0x200000000UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_type_name672 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_type_name686 = new BitSet(new ulong[]{0x8UL,0x100040000880UL});
		public static readonly BitSet _94_in_type_name696 = new BitSet(new ulong[]{0x8000000000000000UL,0x2000000000UL});
		public static readonly BitSet _type_name_in_type_name708 = new BitSet(new ulong[]{0x8000000000000000UL,0x2000000000UL});
		public static readonly BitSet _101_in_type_name718 = new BitSet(new ulong[]{0x8UL,0x100000000880UL});
		public static readonly BitSet _75_in_type_name729 = new BitSet(new ulong[]{0x8UL,0x100000000880UL});
		public static readonly BitSet _108_in_type_name738 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_type_name740 = new BitSet(new ulong[]{0x8UL,0x100000000880UL});
		public static readonly BitSet _71_in_type_name749 = new BitSet(new ulong[]{0x8UL,0x100000000880UL});
		public static readonly BitSet _Func_Args_in_func_args779 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_alloc_in_func_args784 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter811 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter816 = new BitSet(new ulong[]{0x200000008UL});
		public static readonly BitSet _Func_Def_in_func_def842 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_func_def847 = new BitSet(new ulong[]{0x8000000200000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _type_name_in_func_def854 = new BitSet(new ulong[]{0x200000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_func_def861 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_func_def867 = new BitSet(new ulong[]{0xC2802BFFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _generic_parameter_in_func_def872 = new BitSet(new ulong[]{0xC28023FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _func_args_in_func_def880 = new BitSet(new ulong[]{0xC28021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _stmt_block_in_func_def891 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def901 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block929 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block934 = new BitSet(new ulong[]{0x7FF428021FFFF808UL,0xC0050D0512089120UL,0x12010UL});
		public static readonly BitSet _stmt_expr_in_stmt965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_translate_in_stmt1037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_stmt_translate1060 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_translate1064 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_stmt_translate1068 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _92_in_stmt_translate1078 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_list_in_stmt_translate1082 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_stmt_translate1086 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Defer_in_stmt_defer1106 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_defer1110 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr1140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using1172 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using1178 = new BitSet(new ulong[]{0x200000008UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_stmt_using1193 = new BitSet(new ulong[]{0x200000008UL,0x0UL,0x4UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1214 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1218 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1222 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1261 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1265 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1269 = new BitSet(new ulong[]{0x8000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1274 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1296 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1300 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1304 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Loop_in_stmt_while1314 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_while1318 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1338 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1342 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_stmt_for1346 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_stmt_for1350 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1354 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_ForEach_in_stmt_for1364 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1368 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_stmt_for1372 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1376 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1396 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1400 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_stmt_try1404 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1408 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Return_in_stmt_return1428 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1433 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_From_in_linq_item1455 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_linq_item1459 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_linq_item1463 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Let_in_linq_item1473 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_linq_item1477 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_linq_item1481 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Where_in_linq_item1491 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_linq_item1495 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Prefix_in_linq_prefix1520 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _linq_item_in_linq_prefix1525 = new BitSet(new ulong[]{0x58000000008UL});
		public static readonly BitSet _Stmt_Linq_in_stmt_linq1546 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq1550 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq1554 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident1580 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_ident1585 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _IDENT_in_ident1589 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _Ident_List_in_ident_list1614 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list1619 = new BitSet(new ulong[]{0x200000008UL});
		public static readonly BitSet _Expr_Alloc_Equal_in_alloc_expr1641 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1645 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1649 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_alloc_expr1654 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Bracket_in_alloc_expr1666 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1670 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1674 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_alloc_expr1679 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple1706 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple1711 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple1738 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple1743 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr_list1771 = new BitSet(new ulong[]{0x428021FFFF802UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _Expr_Call_in_call_expr1791 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr1795 = new BitSet(new ulong[]{0x428029FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _generic_parameter_in_call_expr1800 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_call_expr1807 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr1829 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr1833 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_dict_expr1838 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr1860 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr1865 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_lambda_expr1871 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr1891 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1895 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_new_expr1899 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr1910 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1914 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_new_expr1918 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr1938 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr1942 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_call_with_expr1946 = new BitSet(new ulong[]{0x428021FFFF808UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_list_in_call_with_expr1950 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr1975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr1985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr1995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr2005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr2015 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr2025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2035 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr2045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr2054 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr2058 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2062 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2066 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr2076 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2080 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2084 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2088 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_Not_Null_in_expr2098 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2102 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2106 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Not_Null_in_expr2116 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2120 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr2130 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2134 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2156 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_expr2160 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr2170 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2174 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2296 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2300 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _114_in_expr2310 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2314 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2318 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _132_in_expr2328 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2332 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2336 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _126_in_expr2346 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2350 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2354 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _127_in_expr2364 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2368 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2372 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr2384 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2430 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2434 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _107_in_expr2444 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr2448 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr2458 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2462 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr2472 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2476 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2486 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr2496 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2500 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2534 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _92_in_expr2544 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2548 = new BitSet(new ulong[]{0x428021FFFF800UL,0xC005090512089120UL,0x12010UL});
		public static readonly BitSet _expr_in_expr2552 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr2565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr2575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr2596 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
