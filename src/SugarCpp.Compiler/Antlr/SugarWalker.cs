//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-04-30 13:20:19

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "Ident_List", "Import", "Infix_Func", "Left_Bracket", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Struct", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "']'", "'^'", "'^='", "'catch'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'in'", "'namespace'", "'new'", "'return'", "'struct'", "'try'", "'typedef'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Enum=7;
	public const int Expr_Access=8;
	public const int Expr_Alloc=9;
	public const int Expr_Bin=10;
	public const int Expr_Block=11;
	public const int Expr_Call=12;
	public const int Expr_Call_With=13;
	public const int Expr_Cond=14;
	public const int Expr_Dict=15;
	public const int Expr_Infix=16;
	public const int Expr_Lambda=17;
	public const int Expr_New_Array=18;
	public const int Expr_New_Type=19;
	public const int Expr_Prefix=20;
	public const int Expr_Return=21;
	public const int Expr_Suffix=22;
	public const int Expr_Tuple=23;
	public const int Func_Args=24;
	public const int Func_Def=25;
	public const int IDENT=26;
	public const int INDENT=27;
	public const int Ident_List=28;
	public const int Import=29;
	public const int Infix_Func=30;
	public const int Left_Bracket=31;
	public const int Match_Tuple=32;
	public const int NEWLINE=33;
	public const int NUMBER=34;
	public const int Namespace=35;
	public const int Right_Bracket=36;
	public const int Root=37;
	public const int SP=38;
	public const int STRING=39;
	public const int Stmt_Block=40;
	public const int Stmt_For=41;
	public const int Stmt_ForEach=42;
	public const int Stmt_If=43;
	public const int Stmt_Try=44;
	public const int Stmt_Typedef=45;
	public const int Stmt_Using=46;
	public const int Stmt_While=47;
	public const int Struct=48;
	public const int Type_IDENT=49;
	public const int Type_Ref=50;
	public const int Type_Tuple=51;
	public const int DOUBLE=114;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : a= overall_block ( NEWLINE )* ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		List<AstNode> a = default(List<AstNode>);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:24:2: (a= overall_block ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarWalker.g:24:4: a= overall_block ( NEWLINE )*
			{
			DebugLocation(24, 5);
			PushFollow(Follow._overall_block_in_root77);
			a=overall_block();
			PopFollow();

			DebugLocation(24, 20);
			// SugarWalker.g:24:20: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:24:20: NEWLINE
					{
					DebugLocation(24, 20);
					Match(input,NEWLINE,Follow._NEWLINE_in_root79); 

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(25, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_overall_block();
	partial void LeaveRule_overall_block();

	// $ANTLR start "overall_block"
	// SugarWalker.g:30:1: overall_block returns [List<AstNode> value] : ( ( NEWLINE )* a= node )+ ;
	[GrammarRule("overall_block")]
	private List<AstNode> overall_block()
	{
		EnterRule_overall_block();
		EnterRule("overall_block", 2);
		TraceIn("overall_block", 2);
		List<AstNode> value = default(List<AstNode>);


		AstNode a = default(AstNode);


			value = new List<AstNode>();

		try { DebugEnterRule(GrammarFileName, "overall_block");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:35:2: ( ( ( NEWLINE )* a= node )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:35:4: ( ( NEWLINE )* a= node )+
			{
			DebugLocation(35, 4);
			// SugarWalker.g:35:4: ( ( NEWLINE )* a= node )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:35:5: ( NEWLINE )* a= node
					{
					DebugLocation(35, 5);
					// SugarWalker.g:35:5: ( NEWLINE )*
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch ( alt2 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:35:5: NEWLINE
							{
							DebugLocation(35, 5);
							Match(input,NEWLINE,Follow._NEWLINE_in_overall_block104); 

							}
							break;

						default:
							goto loop2;
						}
					}

					loop2:
						;

					} finally { DebugExitSubRule(2); }

					DebugLocation(35, 15);
					PushFollow(Follow._node_in_overall_block109);
					a=node();
					PopFollow();

					DebugLocation(35, 21);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("overall_block", 2);
			LeaveRule("overall_block", 2);
			LeaveRule_overall_block();
		}
		DebugLocation(36, 1);
		} finally { DebugExitRule(GrammarFileName, "overall_block"); }
		return value;

	}
	// $ANTLR end "overall_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:38:1: node returns [AstNode value] : (a= func_def |b= import_def |c= enum_def |d= struct_def |e= stmt_alloc |f= namespace_def |g= stmt_using |h= stmt_typedef );
	[GrammarRule("node")]
	private AstNode node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstNode value = default(AstNode);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Struct d = default(Struct);
		Stmt e = default(Stmt);
		Namespace f = default(Namespace);
		StmtUsing g = default(StmtUsing);
		Stmt h = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(38, 1);
		try
		{
			// SugarWalker.g:39:2: (a= func_def |b= import_def |c= enum_def |d= struct_def |e= stmt_alloc |f= namespace_def |g= stmt_using |h= stmt_typedef )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case Type_IDENT:
				{
				alt4 = 1;
				}
				break;
			case Import:
				{
				alt4 = 2;
				}
				break;
			case Enum:
				{
				alt4 = 3;
				}
				break;
			case Struct:
				{
				alt4 = 4;
				}
				break;
			case Expr_Alloc:
				{
				alt4 = 5;
				}
				break;
			case Namespace:
				{
				alt4 = 6;
				}
				break;
			case Stmt_Using:
				{
				alt4 = 7;
				}
				break;
			case Stmt_Typedef:
				{
				alt4 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:39:4: a= func_def
				{
				DebugLocation(39, 6);
				PushFollow(Follow._func_def_in_node133);
				a=func_def();
				PopFollow();

				DebugLocation(39, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:40:4: b= import_def
				{
				DebugLocation(40, 6);
				PushFollow(Follow._import_def_in_node144);
				b=import_def();
				PopFollow();

				DebugLocation(40, 19);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:41:4: c= enum_def
				{
				DebugLocation(41, 6);
				PushFollow(Follow._enum_def_in_node155);
				c=enum_def();
				PopFollow();

				DebugLocation(41, 17);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:42:4: d= struct_def
				{
				DebugLocation(42, 6);
				PushFollow(Follow._struct_def_in_node166);
				d=struct_def();
				PopFollow();

				DebugLocation(42, 19);
				 value = d; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:43:4: e= stmt_alloc
				{
				DebugLocation(43, 6);
				PushFollow(Follow._stmt_alloc_in_node177);
				e=stmt_alloc();
				PopFollow();

				DebugLocation(43, 19);
				 value = e; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:44:4: f= namespace_def
				{
				DebugLocation(44, 6);
				PushFollow(Follow._namespace_def_in_node188);
				f=namespace_def();
				PopFollow();

				DebugLocation(44, 22);
				 value = f; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:45:4: g= stmt_using
				{
				DebugLocation(45, 6);
				PushFollow(Follow._stmt_using_in_node199);
				g=stmt_using();
				PopFollow();

				DebugLocation(45, 19);
				 value = g; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:46:4: h= stmt_typedef
				{
				DebugLocation(46, 6);
				PushFollow(Follow._stmt_typedef_in_node210);
				h=stmt_typedef();
				PopFollow();

				DebugLocation(46, 21);
				 value = h; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:49:1: namespace_def returns [Namespace value] : ^( Namespace a= IDENT b= overall_block ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 4);
		TraceIn("namespace_def", 4);
		Namespace value = default(Namespace);


		CommonTree a = default(CommonTree);
		List<AstNode> b = default(List<AstNode>);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(49, 1);
		try
		{
			// SugarWalker.g:50:2: ( ^( Namespace a= IDENT b= overall_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:50:4: ^( Namespace a= IDENT b= overall_block )
			{
			DebugLocation(50, 4);
			DebugLocation(50, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def228); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(50, 17);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_namespace_def232); 
			DebugLocation(50, 25);
			PushFollow(Follow._overall_block_in_namespace_def236);
			b=overall_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(51, 2);

					value = new Namespace(a.Text, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 4);
			LeaveRule("namespace_def", 4);
			LeaveRule_namespace_def();
		}
		DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:56:1: import_def returns [Import value] : ^( Import (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 5);
		TraceIn("import_def", 5);
		Import value = default(Import);


		CommonTree a = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(56, 1);
		try
		{
			// SugarWalker.g:61:2: ( ^( Import (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:61:4: ^( Import (a= STRING )* )
			{
			DebugLocation(61, 4);
			DebugLocation(61, 6);
			Match(input,Import,Follow._Import_in_import_def261); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(61, 13);
				// SugarWalker.g:61:13: (a= STRING )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0==STRING))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:61:14: a= STRING
						{
						DebugLocation(61, 15);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def266); 
						DebugLocation(61, 23);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 5);
			LeaveRule("import_def", 5);
			LeaveRule_import_def();
		}
		DebugLocation(62, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:64:1: enum_def returns [Enum value] : ^( Enum a= IDENT (a= IDENT )* ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 6);
		TraceIn("enum_def", 6);
		Enum value = default(Enum);


		CommonTree a = default(CommonTree);


			value = new Enum();

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(64, 1);
		try
		{
			// SugarWalker.g:69:2: ( ^( Enum a= IDENT (a= IDENT )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:69:4: ^( Enum a= IDENT (a= IDENT )* )
			{
			DebugLocation(69, 4);
			DebugLocation(69, 6);
			Match(input,Enum,Follow._Enum_in_enum_def292); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(69, 12);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_enum_def296); 
			DebugLocation(69, 19);
			 value.Name=a.Text; 
			DebugLocation(69, 43);
			// SugarWalker.g:69:43: (a= IDENT )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==IDENT))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:69:44: a= IDENT
					{
					DebugLocation(69, 45);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_enum_def303); 
					DebugLocation(69, 52);
					 value.Values.Add(a.Text); 

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 6);
			LeaveRule("enum_def", 6);
			LeaveRule_enum_def();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_struct_def();
	partial void LeaveRule_struct_def();

	// $ANTLR start "struct_def"
	// SugarWalker.g:72:1: struct_def returns [Struct value] : ^( Struct a= IDENT b= overall_block ) ;
	[GrammarRule("struct_def")]
	private Struct struct_def()
	{
		EnterRule_struct_def();
		EnterRule("struct_def", 7);
		TraceIn("struct_def", 7);
		Struct value = default(Struct);


		CommonTree a = default(CommonTree);
		List<AstNode> b = default(List<AstNode>);

		try { DebugEnterRule(GrammarFileName, "struct_def");
		DebugLocation(72, 1);
		try
		{
			// SugarWalker.g:73:2: ( ^( Struct a= IDENT b= overall_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:73:4: ^( Struct a= IDENT b= overall_block )
			{
			DebugLocation(73, 4);
			DebugLocation(73, 6);
			Match(input,Struct,Follow._Struct_in_struct_def324); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(73, 14);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_struct_def328); 
			DebugLocation(73, 22);
			PushFollow(Follow._overall_block_in_struct_def332);
			b=overall_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(74, 2);

					value = new Struct(a.Text, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("struct_def", 7);
			LeaveRule("struct_def", 7);
			LeaveRule_struct_def();
		}
		DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_def"); }
		return value;

	}
	// $ANTLR end "struct_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:79:1: type_name returns [string value] : ^( Type_IDENT a= IDENT ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 8);
		TraceIn("type_name", 8);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(79, 1);
		try
		{
			// SugarWalker.g:84:2: ( ^( Type_IDENT a= IDENT ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:84:4: ^( Type_IDENT a= IDENT ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* )
			{
			DebugLocation(84, 4);
			DebugLocation(84, 7);
			Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name358); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(84, 19);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_type_name362); 
			DebugLocation(84, 26);
			 value+=a.Text; 
			DebugLocation(85, 5);
			// SugarWalker.g:85:5: ( '<' (b= type_name )* '>' )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==80))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:85:7: '<' (b= type_name )* '>'
				{
				DebugLocation(85, 7);
				Match(input,80,Follow._80_in_type_name372); 
				DebugLocation(85, 11);
				 value+="<"; bool isFirst = true; 
				DebugLocation(86, 6);
				// SugarWalker.g:86:6: (b= type_name )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==Type_IDENT))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:86:7: b= type_name
						{
						DebugLocation(86, 8);
						PushFollow(Follow._type_name_in_type_name384);
						b=type_name();
						PopFollow();

						DebugLocation(87, 3);

									if (!isFirst) value+=", ";
									isFirst = false;
									value+=b;
								

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(92, 3);
				Match(input,87,Follow._87_in_type_name394); 
				DebugLocation(92, 7);
				 value+=">"; 

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(93, 4);
			// SugarWalker.g:93:4: ( '*' | '[' ']' | '&' )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=4;
				try { DebugEnterDecision(9, false);
				switch (input.LA(1))
				{
				case 61:
					{
					alt9 = 1;
					}
					break;
				case 91:
					{
					alt9 = 2;
					}
					break;
				case 57:
					{
					alt9 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:93:6: '*'
					{
					DebugLocation(93, 6);
					Match(input,61,Follow._61_in_type_name405); 
					DebugLocation(93, 10);
					 value ="shared_ptr<"+value+">"; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarWalker.g:94:6: '[' ']'
					{
					DebugLocation(94, 6);
					Match(input,91,Follow._91_in_type_name414); 
					DebugLocation(94, 10);
					Match(input,92,Follow._92_in_type_name416); 
					DebugLocation(94, 14);
					 value ="vector<"+value+">"; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarWalker.g:95:6: '&'
					{
					DebugLocation(95, 6);
					Match(input,57,Follow._57_in_type_name425); 
					DebugLocation(95, 10);
					 value+="&"; 

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 8);
			LeaveRule("type_name", 8);
			LeaveRule_type_name();
		}
		DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:99:1: func_args returns [List<Stmt> value] : ^( Func_Args (a= stmt )* ) ;
	[GrammarRule("func_args")]
	private List<Stmt> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 9);
		TraceIn("func_args", 9);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(99, 1);
		try
		{
			// SugarWalker.g:104:2: ( ^( Func_Args (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:104:4: ^( Func_Args (a= stmt )* )
			{
			DebugLocation(104, 4);
			DebugLocation(104, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args455); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(104, 16);
				// SugarWalker.g:104:16: (a= stmt )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if (((LA10_0>=Expr_Access && LA10_0<=Expr_Bin)||(LA10_0>=Expr_Call && LA10_0<=Expr_Tuple)||LA10_0==IDENT||LA10_0==Match_Tuple||LA10_0==NUMBER||LA10_0==STRING||(LA10_0>=Stmt_For && LA10_0<=Stmt_While)||LA10_0==55||LA10_0==58||LA10_0==62||LA10_0==65||LA10_0==69||LA10_0==75||LA10_0==78||LA10_0==82||LA10_0==84||LA10_0==90||LA10_0==94||LA10_0==111||LA10_0==DOUBLE))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:104:17: a= stmt
						{
						DebugLocation(104, 18);
						PushFollow(Follow._stmt_in_func_args460);
						a=stmt();
						PopFollow();

						DebugLocation(104, 24);
						 value.Add(a); 

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 9);
			LeaveRule("func_args", 9);
			LeaveRule_func_args();
		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:107:1: func_def returns [FuncDef value] : a= type_name b= IDENT ( '<' x= IDENT '>' )? '(' (args= func_args )? ')' (e= stmt_block ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 10);
		TraceIn("func_def", 10);
		FuncDef value = default(FuncDef);


		CommonTree b = default(CommonTree);
		CommonTree x = default(CommonTree);
		string a = default(string);
		List<Stmt> args = default(List<Stmt>);
		StmtBlock e = default(StmtBlock);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(107, 1);
		try
		{
			// SugarWalker.g:112:2: (a= type_name b= IDENT ( '<' x= IDENT '>' )? '(' (args= func_args )? ')' (e= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:112:4: a= type_name b= IDENT ( '<' x= IDENT '>' )? '(' (args= func_args )? ')' (e= stmt_block )
			{
			DebugLocation(112, 5);
			PushFollow(Follow._type_name_in_func_def487);
			a=type_name();
			PopFollow();

			DebugLocation(112, 17);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def491); 
			DebugLocation(112, 24);
			// SugarWalker.g:112:24: ( '<' x= IDENT '>' )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==80))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:112:25: '<' x= IDENT '>'
				{
				DebugLocation(112, 25);
				Match(input,80,Follow._80_in_func_def494); 
				DebugLocation(112, 30);
				x=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def498); 
				DebugLocation(112, 37);
				 value.GenericParameter.Add(x.Text); 
				DebugLocation(112, 78);
				Match(input,87,Follow._87_in_func_def502); 

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(112, 84);
			Match(input,59,Follow._59_in_func_def506); 
			DebugLocation(112, 88);
			// SugarWalker.g:112:88: (args= func_args )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==Func_Args))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:112:89: args= func_args
				{
				DebugLocation(112, 93);
				PushFollow(Follow._func_args_in_func_def511);
				args=func_args();
				PopFollow();

				DebugLocation(112, 104);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(112, 130);
			Match(input,60,Follow._60_in_func_def517); 
			DebugLocation(113, 2);
			// SugarWalker.g:113:2: (e= stmt_block )
			DebugEnterAlt(1);
			// SugarWalker.g:113:4: e= stmt_block
			{
			DebugLocation(113, 5);
			PushFollow(Follow._stmt_block_in_func_def524);
			e=stmt_block();
			PopFollow();

			DebugLocation(114, 2);

					value.Type = a;
					value.Name = b.Text;
					value.Body = e;
				

			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 10);
			LeaveRule("func_def", 10);
			LeaveRule_func_def();
		}
		DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:121:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 11);
		TraceIn("stmt_block", 11);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(121, 4);
		try
		{
			// SugarWalker.g:126:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:126:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(126, 4);
			DebugLocation(126, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block549); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(126, 17);
				// SugarWalker.g:126:17: (a= stmt )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if (((LA13_0>=Expr_Access && LA13_0<=Expr_Bin)||(LA13_0>=Expr_Call && LA13_0<=Expr_Tuple)||LA13_0==IDENT||LA13_0==Match_Tuple||LA13_0==NUMBER||LA13_0==STRING||(LA13_0>=Stmt_For && LA13_0<=Stmt_While)||LA13_0==55||LA13_0==58||LA13_0==62||LA13_0==65||LA13_0==69||LA13_0==75||LA13_0==78||LA13_0==82||LA13_0==84||LA13_0==90||LA13_0==94||LA13_0==111||LA13_0==DOUBLE))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:126:18: a= stmt
						{
						DebugLocation(126, 19);
						PushFollow(Follow._stmt_in_stmt_block554);
						a=stmt();
						PopFollow();

						DebugLocation(126, 25);
						 value.StmtList.Add(a); 

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 11);
			LeaveRule("stmt_block", 11);
			LeaveRule_stmt_block();
		}
		DebugLocation(127, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:129:1: stmt returns [Stmt value] : a= stmt_expr ;
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 12);
		TraceIn("stmt", 12);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(129, 1);
		try
		{
			// SugarWalker.g:130:2: (a= stmt_expr )
			DebugEnterAlt(1);
			// SugarWalker.g:130:4: a= stmt_expr
			{
			DebugLocation(130, 5);
			PushFollow(Follow._stmt_expr_in_stmt580);
			a=stmt_expr();
			PopFollow();

			DebugLocation(130, 16);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 12);
			LeaveRule("stmt", 12);
			LeaveRule_stmt();
		}
		DebugLocation(131, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:133:1: stmt_expr returns [Stmt value] : (a= stmt_alloc |a= stmt_return |a= stmt_typedef |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |b= expr |c= stmt_using );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 13);
		TraceIn("stmt_expr", 13);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);
		Expr b = default(Expr);
		StmtUsing c = default(StmtUsing);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(133, 1);
		try
		{
			// SugarWalker.g:134:2: (a= stmt_alloc |a= stmt_return |a= stmt_typedef |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |b= expr |c= stmt_using )
			int alt14=9;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case Expr_Alloc:
				{
				alt14 = 1;
				}
				break;
			case Expr_Return:
				{
				alt14 = 2;
				}
				break;
			case Stmt_Typedef:
				{
				alt14 = 3;
				}
				break;
			case Stmt_If:
				{
				alt14 = 4;
				}
				break;
			case Stmt_While:
				{
				alt14 = 5;
				}
				break;
			case Stmt_For:
			case Stmt_ForEach:
				{
				alt14 = 6;
				}
				break;
			case Stmt_Try:
				{
				alt14 = 7;
				}
				break;
			case Expr_Access:
			case Expr_Bin:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 55:
			case 58:
			case 62:
			case 65:
			case 69:
			case 75:
			case 78:
			case 82:
			case 84:
			case 90:
			case 94:
			case 111:
			case DOUBLE:
				{
				alt14 = 8;
				}
				break;
			case Stmt_Using:
				{
				alt14 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:134:4: a= stmt_alloc
				{
				DebugLocation(134, 5);
				PushFollow(Follow._stmt_alloc_in_stmt_expr599);
				a=stmt_alloc();
				PopFollow();

				DebugLocation(134, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:135:4: a= stmt_return
				{
				DebugLocation(135, 5);
				PushFollow(Follow._stmt_return_in_stmt_expr608);
				a=stmt_return();
				PopFollow();

				DebugLocation(135, 18);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:136:4: a= stmt_typedef
				{
				DebugLocation(136, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr617);
				a=stmt_typedef();
				PopFollow();

				DebugLocation(136, 19);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:137:4: a= stmt_if
				{
				DebugLocation(137, 5);
				PushFollow(Follow._stmt_if_in_stmt_expr626);
				a=stmt_if();
				PopFollow();

				DebugLocation(137, 14);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:138:4: a= stmt_while
				{
				DebugLocation(138, 5);
				PushFollow(Follow._stmt_while_in_stmt_expr635);
				a=stmt_while();
				PopFollow();

				DebugLocation(138, 17);
				 value = a; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:139:4: a= stmt_for
				{
				DebugLocation(139, 5);
				PushFollow(Follow._stmt_for_in_stmt_expr644);
				a=stmt_for();
				PopFollow();

				DebugLocation(139, 15);
				 value = a; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:140:4: a= stmt_try
				{
				DebugLocation(140, 5);
				PushFollow(Follow._stmt_try_in_stmt_expr653);
				a=stmt_try();
				PopFollow();

				DebugLocation(140, 15);
				 value = a; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:141:4: b= expr
				{
				DebugLocation(141, 5);
				PushFollow(Follow._expr_in_stmt_expr662);
				b=expr();
				PopFollow();

				DebugLocation(141, 11);
				 value = b; 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:142:4: c= stmt_using
				{
				DebugLocation(142, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr671);
				c=stmt_using();
				PopFollow();

				DebugLocation(142, 17);
				 value = c; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 13);
			LeaveRule("stmt_expr", 13);
			LeaveRule_stmt_expr();
		}
		DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:145:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ( IDENT | 'namespace' ) )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 14);
		TraceIn("stmt_using", 14);
		StmtUsing value = default(StmtUsing);


		CommonTree a = default(CommonTree);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(145, 1);
		try
		{
			// SugarWalker.g:150:2: ( ^( Stmt_Using (a= ( IDENT | 'namespace' ) )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:150:4: ^( Stmt_Using (a= ( IDENT | 'namespace' ) )* )
			{
			DebugLocation(150, 4);
			DebugLocation(150, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using694); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(150, 17);
				// SugarWalker.g:150:17: (a= ( IDENT | 'namespace' ) )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==IDENT||LA15_0==102))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:150:18: a= ( IDENT | 'namespace' )
						{
						DebugLocation(150, 19);

						a=(CommonTree)input.LT(1);
						if (input.LA(1)==IDENT||input.LA(1)==102)
						{
							input.Consume();
							state.errorRecovery=false;
						}
						else
						{
							MismatchedSetException mse = new MismatchedSetException(null,input);
							DebugRecognitionException(mse);
							throw mse;
						}

						DebugLocation(150, 42);
						 value.List.Add(a.Text); 

						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 14);
			LeaveRule("stmt_using", 14);
			LeaveRule_stmt_using();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:153:1: stmt_typedef returns [Stmt value] : ^( Stmt_Typedef a= type_name b= IDENT ) ;
	[GrammarRule("stmt_typedef")]
	private Stmt stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 15);
		TraceIn("stmt_typedef", 15);
		Stmt value = default(Stmt);


		CommonTree b = default(CommonTree);
		string a = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(153, 1);
		try
		{
			// SugarWalker.g:154:2: ( ^( Stmt_Typedef a= type_name b= IDENT ) )
			DebugEnterAlt(1);
			// SugarWalker.g:154:4: ^( Stmt_Typedef a= type_name b= IDENT )
			{
			DebugLocation(154, 4);
			DebugLocation(154, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef726); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(154, 20);
			PushFollow(Follow._type_name_in_stmt_typedef730);
			a=type_name();
			PopFollow();

			DebugLocation(154, 32);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_stmt_typedef734); 

			Match(input, TokenTypes.Up, null); 

			DebugLocation(155, 2);

					value = new StmtTypeDef(a, b.Text);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 15);
			LeaveRule("stmt_typedef", 15);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:160:1: stmt_alloc returns [Stmt value] : a= alloc_expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 16);
		TraceIn("stmt_alloc", 16);
		Stmt value = default(Stmt);


		ExprAlloc a = default(ExprAlloc);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(160, 1);
		try
		{
			// SugarWalker.g:161:2: (a= alloc_expr )
			DebugEnterAlt(1);
			// SugarWalker.g:161:4: a= alloc_expr
			{
			DebugLocation(161, 5);
			PushFollow(Follow._alloc_expr_in_stmt_alloc755);
			a=alloc_expr();
			PopFollow();

			DebugLocation(161, 17);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 16);
			LeaveRule("stmt_alloc", 16);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:164:1: stmt_if returns [Stmt value] : ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 17);
		TraceIn("stmt_if", 17);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(164, 1);
		try
		{
			// SugarWalker.g:165:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:165:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
			{
			DebugLocation(165, 4);
			DebugLocation(165, 6);
			Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if773); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(165, 15);
			PushFollow(Follow._expr_in_stmt_if777);
			a=expr();
			PopFollow();

			DebugLocation(165, 22);
			PushFollow(Follow._stmt_block_in_stmt_if781);
			b=stmt_block();
			PopFollow();

			DebugLocation(165, 34);
			// SugarWalker.g:165:34: (c= stmt_block )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==Stmt_Block))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:165:35: c= stmt_block
				{
				DebugLocation(165, 36);
				PushFollow(Follow._stmt_block_in_stmt_if786);
				c=stmt_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(166, 2);

					value = new StmtIf(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 17);
			LeaveRule("stmt_if", 17);
			LeaveRule_stmt_if();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:171:1: stmt_while returns [Stmt value] : ^( Stmt_While a= expr b= stmt_block ) ;
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 18);
		TraceIn("stmt_while", 18);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(171, 1);
		try
		{
			// SugarWalker.g:172:2: ( ^( Stmt_While a= expr b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:172:4: ^( Stmt_While a= expr b= stmt_block )
			{
			DebugLocation(172, 4);
			DebugLocation(172, 6);
			Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while808); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(172, 18);
			PushFollow(Follow._expr_in_stmt_while812);
			a=expr();
			PopFollow();

			DebugLocation(172, 25);
			PushFollow(Follow._stmt_block_in_stmt_while816);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(173, 2);

					value = new StmtWhile(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 18);
			LeaveRule("stmt_while", 18);
			LeaveRule_stmt_while();
		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:178:1: stmt_for returns [Stmt value] : ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) );
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 19);
		TraceIn("stmt_for", 19);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		StmtBlock d = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(178, 1);
		try
		{
			// SugarWalker.g:179:2: ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Stmt_For))
			{
				alt17 = 1;
			}
			else if ((LA17_0==Stmt_ForEach))
			{
				alt17 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:179:4: ^( Stmt_For a= expr b= expr c= expr d= stmt_block )
				{
				DebugLocation(179, 4);
				DebugLocation(179, 6);
				Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for836); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(179, 16);
				PushFollow(Follow._expr_in_stmt_for840);
				a=expr();
				PopFollow();

				DebugLocation(179, 23);
				PushFollow(Follow._expr_in_stmt_for844);
				b=expr();
				PopFollow();

				DebugLocation(179, 30);
				PushFollow(Follow._expr_in_stmt_for848);
				c=expr();
				PopFollow();

				DebugLocation(179, 37);
				PushFollow(Follow._stmt_block_in_stmt_for852);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(180, 2);

						value = new StmtFor(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:183:4: ^( Stmt_ForEach a= expr b= expr d= stmt_block )
				{
				DebugLocation(183, 4);
				DebugLocation(183, 6);
				Match(input,Stmt_ForEach,Follow._Stmt_ForEach_in_stmt_for862); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(183, 20);
				PushFollow(Follow._expr_in_stmt_for866);
				a=expr();
				PopFollow();

				DebugLocation(183, 27);
				PushFollow(Follow._expr_in_stmt_for870);
				b=expr();
				PopFollow();

				DebugLocation(183, 34);
				PushFollow(Follow._stmt_block_in_stmt_for874);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(184, 2);

						value = new StmtForEach(a, b, d);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 19);
			LeaveRule("stmt_for", 19);
			LeaveRule_stmt_for();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:189:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 20);
		TraceIn("stmt_try", 20);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Expr b = default(Expr);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(189, 1);
		try
		{
			// SugarWalker.g:190:2: ( ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:190:4: ^( Stmt_Try a= stmt_block b= expr c= stmt_block )
			{
			DebugLocation(190, 4);
			DebugLocation(190, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try894); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(190, 16);
			PushFollow(Follow._stmt_block_in_stmt_try898);
			a=stmt_block();
			PopFollow();

			DebugLocation(190, 29);
			PushFollow(Follow._expr_in_stmt_try902);
			b=expr();
			PopFollow();

			DebugLocation(190, 36);
			PushFollow(Follow._stmt_block_in_stmt_try906);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(191, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 20);
			LeaveRule("stmt_try", 20);
			LeaveRule_stmt_try();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:196:1: stmt_return returns [Stmt value] : ^( Expr_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 21);
		TraceIn("stmt_return", 21);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(196, 1);
		try
		{
			// SugarWalker.g:197:2: ( ^( Expr_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:197:4: ^( Expr_Return (a= expr )? )
			{
			DebugLocation(197, 4);
			DebugLocation(197, 6);
			Match(input,Expr_Return,Follow._Expr_Return_in_stmt_return926); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(197, 18);
				// SugarWalker.g:197:18: (a= expr )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==Expr_Access||LA18_0==Expr_Bin||(LA18_0>=Expr_Call && LA18_0<=Expr_Prefix)||(LA18_0>=Expr_Suffix && LA18_0<=Expr_Tuple)||LA18_0==IDENT||LA18_0==Match_Tuple||LA18_0==NUMBER||LA18_0==STRING||LA18_0==55||LA18_0==58||LA18_0==62||LA18_0==65||LA18_0==69||LA18_0==75||LA18_0==78||LA18_0==82||LA18_0==84||LA18_0==90||LA18_0==94||LA18_0==111||LA18_0==DOUBLE))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:197:19: a= expr
					{
					DebugLocation(197, 20);
					PushFollow(Follow._expr_in_stmt_return931);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(198, 2);

					value = new ExprReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 21);
			LeaveRule("stmt_return", 21);
			LeaveRule_stmt_return();
		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:203:1: ident returns [string value] : a= IDENT ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 22);
		TraceIn("ident", 22);
		string value = default(string);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(203, 1);
		try
		{
			// SugarWalker.g:204:2: (a= IDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:204:4: a= IDENT
			{
			DebugLocation(204, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident954); 
			DebugLocation(204, 12);
			 value = a.Text; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 22);
			LeaveRule("ident", 22);
			LeaveRule_ident();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:207:1: ident_list returns [List<Expr> value] : ^( Ident_List (a= ident )+ ) ;
	[GrammarRule("ident_list")]
	private List<Expr> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 23);
		TraceIn("ident_list", 23);
		List<Expr> value = default(List<Expr>);


		string a = default(string);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(207, 1);
		try
		{
			// SugarWalker.g:212:2: ( ^( Ident_List (a= ident )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:212:4: ^( Ident_List (a= ident )+ )
			{
			DebugLocation(212, 4);
			DebugLocation(212, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list977); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(212, 17);
			// SugarWalker.g:212:17: (a= ident )+
			int cnt19=0;
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==IDENT))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:212:18: a= ident
					{
					DebugLocation(212, 19);
					PushFollow(Follow._ident_in_ident_list982);
					a=ident();
					PopFollow();

					DebugLocation(212, 26);
					 value.Add(new ExprConst(a)); 

					}
					break;

				default:
					if (cnt19 >= 1)
						goto loop19;

					EarlyExitException eee19 = new EarlyExitException( 19, input );
					DebugRecognitionException(eee19);
					throw eee19;
				}
				cnt19++;
			}
			loop19:
				;

			} finally { DebugExitSubRule(19); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 23);
			LeaveRule("ident_list", 23);
			LeaveRule_ident_list();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:215:1: alloc_expr returns [ExprAlloc value] : ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) ;
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 24);
		TraceIn("alloc_expr", 24);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		List<Expr> b = default(List<Expr>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(215, 1);
		try
		{
			// SugarWalker.g:216:2: ( ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:216:4: ^( Expr_Alloc a= type_name b= ident_list (c= expr )? )
			{
			DebugLocation(216, 4);
			DebugLocation(216, 6);
			Match(input,Expr_Alloc,Follow._Expr_Alloc_in_alloc_expr1004); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(216, 18);
			PushFollow(Follow._type_name_in_alloc_expr1008);
			a=type_name();
			PopFollow();

			DebugLocation(216, 30);
			PushFollow(Follow._ident_list_in_alloc_expr1012);
			b=ident_list();
			PopFollow();

			DebugLocation(216, 42);
			// SugarWalker.g:216:42: (c= expr )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==Expr_Access||LA20_0==Expr_Bin||(LA20_0>=Expr_Call && LA20_0<=Expr_Prefix)||(LA20_0>=Expr_Suffix && LA20_0<=Expr_Tuple)||LA20_0==IDENT||LA20_0==Match_Tuple||LA20_0==NUMBER||LA20_0==STRING||LA20_0==55||LA20_0==58||LA20_0==62||LA20_0==65||LA20_0==69||LA20_0==75||LA20_0==78||LA20_0==82||LA20_0==84||LA20_0==90||LA20_0==94||LA20_0==111||LA20_0==DOUBLE))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:216:43: c= expr
				{
				DebugLocation(216, 44);
				PushFollow(Follow._expr_in_alloc_expr1017);
				c=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(217, 2);

					value = new ExprAlloc(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 24);
			LeaveRule("alloc_expr", 24);
			LeaveRule_alloc_expr();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_block_expr();
	partial void LeaveRule_block_expr();

	// $ANTLR start "block_expr"
	// SugarWalker.g:222:1: block_expr returns [ExprBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("block_expr")]
	private ExprBlock block_expr()
	{
		EnterRule_block_expr();
		EnterRule("block_expr", 25);
		TraceIn("block_expr", 25);
		ExprBlock value = default(ExprBlock);


		Stmt a = default(Stmt);


			value = new ExprBlock();

		try { DebugEnterRule(GrammarFileName, "block_expr");
		DebugLocation(222, 4);
		try
		{
			// SugarWalker.g:227:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:227:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(227, 4);
			Match(input,INDENT,Follow._INDENT_in_block_expr1043); 
			DebugLocation(227, 11);
			// SugarWalker.g:227:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				try
				{
					alt22 = dfa22.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:227:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(227, 12);
					// SugarWalker.g:227:12: ( NEWLINE )+
					int cnt21=0;
					try { DebugEnterSubRule(21);
					while (true)
					{
						int alt21=2;
						try { DebugEnterDecision(21, false);
						int LA21_0 = input.LA(1);

						if ((LA21_0==NEWLINE))
						{
							alt21 = 1;
						}


						} finally { DebugExitDecision(21); }
						switch (alt21)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:227:12: NEWLINE
							{
							DebugLocation(227, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_block_expr1046); 

							}
							break;

						default:
							if (cnt21 >= 1)
								goto loop21;

							EarlyExitException eee21 = new EarlyExitException( 21, input );
							DebugRecognitionException(eee21);
							throw eee21;
						}
						cnt21++;
					}
					loop21:
						;

					} finally { DebugExitSubRule(21); }

					DebugLocation(227, 22);
					PushFollow(Follow._stmt_in_block_expr1051);
					a=stmt();
					PopFollow();

					DebugLocation(227, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }

			DebugLocation(227, 58);
			// SugarWalker.g:227:58: ( NEWLINE )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==NEWLINE))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:227:58: NEWLINE
					{
					DebugLocation(227, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_block_expr1057); 

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }

			DebugLocation(227, 67);
			Match(input,DEDENT,Follow._DEDENT_in_block_expr1060); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block_expr", 25);
			LeaveRule("block_expr", 25);
			LeaveRule_block_expr();
		}
		DebugLocation(228, 4);
		} finally { DebugExitRule(GrammarFileName, "block_expr"); }
		return value;

	}
	// $ANTLR end "block_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:230:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 26);
		TraceIn("expr_tuple", 26);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(230, 1);
		try
		{
			// SugarWalker.g:235:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:235:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(235, 4);
			DebugLocation(235, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple1085); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(235, 17);
			// SugarWalker.g:235:17: (a= expr )+
			int cnt24=0;
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==Expr_Access||LA24_0==Expr_Bin||(LA24_0>=Expr_Call && LA24_0<=Expr_Prefix)||(LA24_0>=Expr_Suffix && LA24_0<=Expr_Tuple)||LA24_0==IDENT||LA24_0==Match_Tuple||LA24_0==NUMBER||LA24_0==STRING||LA24_0==55||LA24_0==58||LA24_0==62||LA24_0==65||LA24_0==69||LA24_0==75||LA24_0==78||LA24_0==82||LA24_0==84||LA24_0==90||LA24_0==94||LA24_0==111||LA24_0==DOUBLE))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:235:18: a= expr
					{
					DebugLocation(235, 19);
					PushFollow(Follow._expr_in_expr_tuple1090);
					a=expr();
					PopFollow();

					DebugLocation(235, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt24 >= 1)
						goto loop24;

					EarlyExitException eee24 = new EarlyExitException( 24, input );
					DebugRecognitionException(eee24);
					throw eee24;
				}
				cnt24++;
			}
			loop24:
				;

			} finally { DebugExitSubRule(24); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 26);
			LeaveRule("expr_tuple", 26);
			LeaveRule_expr_tuple();
		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:238:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 27);
		TraceIn("match_tuple", 27);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(238, 1);
		try
		{
			// SugarWalker.g:243:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:243:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(243, 4);
			DebugLocation(243, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple1117); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(243, 18);
				// SugarWalker.g:243:18: (a= expr )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==Expr_Access||LA25_0==Expr_Bin||(LA25_0>=Expr_Call && LA25_0<=Expr_Prefix)||(LA25_0>=Expr_Suffix && LA25_0<=Expr_Tuple)||LA25_0==IDENT||LA25_0==Match_Tuple||LA25_0==NUMBER||LA25_0==STRING||LA25_0==55||LA25_0==58||LA25_0==62||LA25_0==65||LA25_0==69||LA25_0==75||LA25_0==78||LA25_0==82||LA25_0==84||LA25_0==90||LA25_0==94||LA25_0==111||LA25_0==DOUBLE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:243:19: a= expr
						{
						DebugLocation(243, 20);
						PushFollow(Follow._expr_in_match_tuple1122);
						a=expr();
						PopFollow();

						DebugLocation(243, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 27);
			LeaveRule("match_tuple", 27);
			LeaveRule_match_tuple();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:246:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 28);
		TraceIn("expr_list", 28);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(246, 1);
		try
		{
			// SugarWalker.g:251:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:251:4: (a= expr )+
			{
			DebugLocation(251, 4);
			// SugarWalker.g:251:4: (a= expr )+
			int cnt26=0;
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==Expr_Access||LA26_0==Expr_Bin||(LA26_0>=Expr_Call && LA26_0<=Expr_Prefix)||(LA26_0>=Expr_Suffix && LA26_0<=Expr_Tuple)||LA26_0==IDENT||LA26_0==Match_Tuple||LA26_0==NUMBER||LA26_0==STRING||LA26_0==55||LA26_0==58||LA26_0==62||LA26_0==65||LA26_0==69||LA26_0==75||LA26_0==78||LA26_0==82||LA26_0==84||LA26_0==90||LA26_0==94||LA26_0==111||LA26_0==DOUBLE))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:251:5: a= expr
					{
					DebugLocation(251, 6);
					PushFollow(Follow._expr_in_expr_list1150);
					a=expr();
					PopFollow();

					DebugLocation(251, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt26 >= 1)
						goto loop26;

					EarlyExitException eee26 = new EarlyExitException( 26, input );
					DebugRecognitionException(eee26);
					throw eee26;
				}
				cnt26++;
			}
			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 28);
			LeaveRule("expr_list", 28);
			LeaveRule_expr_list();
		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:254:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr ( '<' (x= IDENT )* '>' )? (b= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 29);
		TraceIn("call_expr", 29);
		ExprCall value = default(ExprCall);


		CommonTree x = default(CommonTree);
		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);


			value = new ExprCall();

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(254, 1);
		try
		{
			// SugarWalker.g:259:2: ( ^( Expr_Call a= expr ( '<' (x= IDENT )* '>' )? (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:259:4: ^( Expr_Call a= expr ( '<' (x= IDENT )* '>' )? (b= expr_list )? )
			{
			DebugLocation(259, 4);
			DebugLocation(259, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr1175); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(259, 17);
			PushFollow(Follow._expr_in_call_expr1179);
			a=expr();
			PopFollow();

			DebugLocation(259, 23);
			 value.Expr=a; 
			DebugLocation(259, 42);
			// SugarWalker.g:259:42: ( '<' (x= IDENT )* '>' )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==80))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:259:43: '<' (x= IDENT )* '>'
				{
				DebugLocation(259, 43);
				Match(input,80,Follow._80_in_call_expr1184); 
				DebugLocation(259, 47);
				// SugarWalker.g:259:47: (x= IDENT )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==IDENT))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:259:48: x= IDENT
						{
						DebugLocation(259, 49);
						x=(CommonTree)Match(input,IDENT,Follow._IDENT_in_call_expr1189); 
						DebugLocation(259, 56);
						 value.GenericParameter.Add(x.Text); 

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }

				DebugLocation(259, 99);
				Match(input,87,Follow._87_in_call_expr1195); 

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(259, 105);
			// SugarWalker.g:259:105: (b= expr_list )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==Expr_Access||LA29_0==Expr_Bin||(LA29_0>=Expr_Call && LA29_0<=Expr_Prefix)||(LA29_0>=Expr_Suffix && LA29_0<=Expr_Tuple)||LA29_0==IDENT||LA29_0==Match_Tuple||LA29_0==NUMBER||LA29_0==STRING||LA29_0==55||LA29_0==58||LA29_0==62||LA29_0==65||LA29_0==69||LA29_0==75||LA29_0==78||LA29_0==82||LA29_0==84||LA29_0==90||LA29_0==94||LA29_0==111||LA29_0==DOUBLE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:259:106: b= expr_list
				{
				DebugLocation(259, 107);
				PushFollow(Follow._expr_list_in_call_expr1202);
				b=expr_list();
				PopFollow();

				DebugLocation(259, 118);
				 value.Args=b; 

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 29);
			LeaveRule("call_expr", 29);
			LeaveRule_call_expr();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:262:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 30);
		TraceIn("dict_expr", 30);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(262, 1);
		try
		{
			// SugarWalker.g:263:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:263:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(263, 4);
			DebugLocation(263, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr1223); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(263, 17);
			PushFollow(Follow._expr_in_dict_expr1227);
			a=expr();
			PopFollow();

			DebugLocation(263, 23);
			// SugarWalker.g:263:23: (b= expr_list )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==Expr_Access||LA30_0==Expr_Bin||(LA30_0>=Expr_Call && LA30_0<=Expr_Prefix)||(LA30_0>=Expr_Suffix && LA30_0<=Expr_Tuple)||LA30_0==IDENT||LA30_0==Match_Tuple||LA30_0==NUMBER||LA30_0==STRING||LA30_0==55||LA30_0==58||LA30_0==62||LA30_0==65||LA30_0==69||LA30_0==75||LA30_0==78||LA30_0==82||LA30_0==84||LA30_0==90||LA30_0==94||LA30_0==111||LA30_0==DOUBLE))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:263:24: b= expr_list
				{
				DebugLocation(263, 25);
				PushFollow(Follow._expr_list_in_dict_expr1232);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(264, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 30);
			LeaveRule("dict_expr", 30);
			LeaveRule_dict_expr();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:269:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda b= func_args a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 31);
		TraceIn("lambda_expr", 31);
		ExprLambda value = default(ExprLambda);


		List<Stmt> b = default(List<Stmt>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(269, 1);
		try
		{
			// SugarWalker.g:270:2: ( ^( Expr_Lambda b= func_args a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:270:4: ^( Expr_Lambda b= func_args a= expr )
			{
			DebugLocation(270, 4);
			DebugLocation(270, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr1254); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(270, 19);
			PushFollow(Follow._func_args_in_lambda_expr1258);
			b=func_args();
			PopFollow();

			DebugLocation(270, 31);
			PushFollow(Follow._expr_in_lambda_expr1262);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(271, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 31);
			LeaveRule("lambda_expr", 31);
			LeaveRule_lambda_expr();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:276:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 32);
		TraceIn("new_expr", 32);
		Expr value = default(Expr);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(276, 1);
		try
		{
			// SugarWalker.g:277:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt32=2;
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==Expr_New_Type))
			{
				alt32 = 1;
			}
			else if ((LA32_0==Expr_New_Array))
			{
				alt32 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:277:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(277, 4);
				DebugLocation(277, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr1282); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(277, 21);
				PushFollow(Follow._type_name_in_new_expr1286);
				a=type_name();
				PopFollow();

				DebugLocation(277, 33);
				// SugarWalker.g:277:33: (b= expr_list )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==Expr_Access||LA31_0==Expr_Bin||(LA31_0>=Expr_Call && LA31_0<=Expr_Prefix)||(LA31_0>=Expr_Suffix && LA31_0<=Expr_Tuple)||LA31_0==IDENT||LA31_0==Match_Tuple||LA31_0==NUMBER||LA31_0==STRING||LA31_0==55||LA31_0==58||LA31_0==62||LA31_0==65||LA31_0==69||LA31_0==75||LA31_0==78||LA31_0==82||LA31_0==84||LA31_0==90||LA31_0==94||LA31_0==111||LA31_0==DOUBLE))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:277:33: b= expr_list
					{
					DebugLocation(277, 33);
					PushFollow(Follow._expr_list_in_new_expr1290);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(31); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(278, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:281:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(281, 4);
				DebugLocation(281, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr1301); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(281, 22);
				PushFollow(Follow._type_name_in_new_expr1305);
				a=type_name();
				PopFollow();

				DebugLocation(281, 34);
				PushFollow(Follow._expr_list_in_new_expr1309);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(282, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 32);
			LeaveRule("new_expr", 32);
			LeaveRule_new_expr();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:287:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= IDENT (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 33);
		TraceIn("call_with_expr", 33);
		ExprCall value = default(ExprCall);


		CommonTree b = default(CommonTree);
		Expr a = default(Expr);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(287, 1);
		try
		{
			// SugarWalker.g:288:2: ( ^( Expr_Call_With a= expr b= IDENT (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:288:4: ^( Expr_Call_With a= expr b= IDENT (c= expr_list )? )
			{
			DebugLocation(288, 4);
			DebugLocation(288, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr1329); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(288, 22);
			PushFollow(Follow._expr_in_call_with_expr1333);
			a=expr();
			PopFollow();

			DebugLocation(288, 29);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_call_with_expr1337); 
			DebugLocation(288, 37);
			// SugarWalker.g:288:37: (c= expr_list )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==Expr_Access||LA33_0==Expr_Bin||(LA33_0>=Expr_Call && LA33_0<=Expr_Prefix)||(LA33_0>=Expr_Suffix && LA33_0<=Expr_Tuple)||LA33_0==IDENT||LA33_0==Match_Tuple||LA33_0==NUMBER||LA33_0==STRING||LA33_0==55||LA33_0==58||LA33_0==62||LA33_0==65||LA33_0==69||LA33_0==75||LA33_0==78||LA33_0==82||LA33_0==84||LA33_0==90||LA33_0==94||LA33_0==111||LA33_0==DOUBLE))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:288:37: c= expr_list
				{
				DebugLocation(288, 37);
				PushFollow(Follow._expr_list_in_call_with_expr1341);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(33); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(289, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall();
					value.Expr = new ExprConst(b.Text);
					value.Args = Args;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 33);
			LeaveRule("call_with_expr", 33);
			LeaveRule_call_with_expr();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:305:1: expr returns [Expr value] : (tuple= expr_tuple |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix op= Infix_Func a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text= ( NUMBER | DOUBLE | IDENT | STRING ) );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 34);
		TraceIn("expr", 34);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		Expr expr_new = default(Expr);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(305, 1);
		try
		{
			// SugarWalker.g:306:5: (tuple= expr_tuple |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix op= Infix_Func a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text= ( NUMBER | DOUBLE | IDENT | STRING ) )
			int alt34=16;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt34 = 1;
				}
				break;
			case Match_Tuple:
				{
				alt34 = 2;
				}
				break;
			case Expr_Call:
				{
				alt34 = 3;
				}
				break;
			case Expr_Call_With:
				{
				alt34 = 4;
				}
				break;
			case Expr_Dict:
				{
				alt34 = 5;
				}
				break;
			case Expr_Lambda:
				{
				alt34 = 6;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt34 = 7;
				}
				break;
			case Expr_Infix:
				{
				alt34 = 8;
				}
				break;
			case Expr_Cond:
				{
				alt34 = 9;
				}
				break;
			case Expr_Access:
				{
				alt34 = 10;
				}
				break;
			case Expr_Bin:
				{
				alt34 = 11;
				}
				break;
			case 55:
			case 58:
			case 62:
			case 65:
			case 69:
			case 75:
			case 82:
			case 84:
			case 90:
			case 94:
			case 111:
				{
				alt34 = 12;
				}
				break;
			case 78:
				{
				alt34 = 13;
				}
				break;
			case Expr_Suffix:
				{
				alt34 = 14;
				}
				break;
			case Expr_Prefix:
				{
				alt34 = 15;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case DOUBLE:
				{
				alt34 = 16;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:306:7: tuple= expr_tuple
				{
				DebugLocation(306, 12);
				PushFollow(Follow._expr_tuple_in_expr1366);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(307, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:310:4: match= match_tuple
				{
				DebugLocation(310, 9);
				PushFollow(Follow._match_tuple_in_expr1376);
				match=match_tuple();
				PopFollow();

				DebugLocation(311, 2);

						value = match;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:314:4: call= call_expr
				{
				DebugLocation(314, 8);
				PushFollow(Follow._call_expr_in_expr1386);
				call=call_expr();
				PopFollow();

				DebugLocation(315, 2);

						value = call;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:318:4: call_with= call_with_expr
				{
				DebugLocation(318, 13);
				PushFollow(Follow._call_with_expr_in_expr1396);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(319, 2);

						value = call_with;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:322:4: dict= dict_expr
				{
				DebugLocation(322, 8);
				PushFollow(Follow._dict_expr_in_expr1406);
				dict=dict_expr();
				PopFollow();

				DebugLocation(323, 2);

						value = dict;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:326:4: lambda= lambda_expr
				{
				DebugLocation(326, 10);
				PushFollow(Follow._lambda_expr_in_expr1416);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(327, 2);

						value = lambda;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:330:4: expr_new= new_expr
				{
				DebugLocation(330, 12);
				PushFollow(Follow._new_expr_in_expr1426);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(331, 2);

						value = expr_new;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:334:4: ^( Expr_Infix op= Infix_Func a= expr b= expr )
				{
				DebugLocation(334, 4);
				DebugLocation(334, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr1435); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(334, 19);
				op=(CommonTree)Match(input,Infix_Func,Follow._Infix_Func_in_expr1439); 
				DebugLocation(334, 32);
				PushFollow(Follow._expr_in_expr1443);
				a=expr();
				PopFollow();

				DebugLocation(334, 39);
				PushFollow(Follow._expr_in_expr1447);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(335, 2);

						value = new ExprInfix(op.Text.Substring(1, op.Text.Length - 2), a, b);
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:338:3: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(338, 3);
				DebugLocation(338, 5);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr1456); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(338, 16);
				PushFollow(Follow._expr_in_expr1460);
				a=expr();
				PopFollow();

				DebugLocation(338, 23);
				PushFollow(Follow._expr_in_expr1464);
				b=expr();
				PopFollow();

				DebugLocation(338, 30);
				PushFollow(Follow._expr_in_expr1468);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(339, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:342:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT )
				{
				DebugLocation(342, 4);
				DebugLocation(342, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr1478); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(342, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=70 && input.LA(1)<=73)||input.LA(1)==77)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(342, 57);
				PushFollow(Follow._expr_in_expr1504);
				a=expr();
				PopFollow();

				DebugLocation(342, 67);
				text=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr1508); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(343, 2);

						value = new ExprAccess(a, op.Text, text.Text);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:346:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr )
				{
				DebugLocation(346, 4);
				DebugLocation(346, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr1518); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(346, 17);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==53||(input.LA(1)>=56 && input.LA(1)<=57)||input.LA(1)==61||input.LA(1)==63||input.LA(1)==67||input.LA(1)==74||(input.LA(1)>=80 && input.LA(1)<=81)||input.LA(1)==83||input.LA(1)==85||(input.LA(1)>=87 && input.LA(1)<=89)||input.LA(1)==93||input.LA(1)==110||input.LA(1)==112)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(351, 9);
				PushFollow(Follow._expr_in_expr1619);
				a=expr();
				PopFollow();

				DebugLocation(351, 16);
				PushFollow(Follow._expr_in_expr1623);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(352, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:355:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(355, 4);
				DebugLocation(355, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==55||input.LA(1)==58||input.LA(1)==62||input.LA(1)==65||input.LA(1)==69||input.LA(1)==75||input.LA(1)==82||input.LA(1)==84||input.LA(1)==90||input.LA(1)==94||input.LA(1)==111)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(355, 88);
				PushFollow(Follow._expr_in_expr1681);
				a=expr();
				PopFollow();

				DebugLocation(355, 95);
				PushFollow(Follow._expr_in_expr1685);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(356, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:359:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(359, 4);
				DebugLocation(359, 6);
				Match(input,78,Follow._78_in_expr1695); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(359, 12);
				PushFollow(Follow._expr_in_expr1699);
				a=expr();
				PopFollow();

				DebugLocation(359, 19);
				PushFollow(Follow._expr_in_expr1703);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(360, 2);

						value = new ExprAlloc("auto", new List<Expr> { a }, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:363:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(363, 4);
				DebugLocation(363, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr1713); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(363, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==64||input.LA(1)==68)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(363, 36);
				PushFollow(Follow._expr_in_expr1727);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(364, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:367:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(367, 4);
				DebugLocation(367, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr1737); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(367, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==52||input.LA(1)==57||input.LA(1)==61||(input.LA(1)>=63 && input.LA(1)<=64)||(input.LA(1)>=67 && input.LA(1)<=68)||input.LA(1)==113)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(367, 72);
				PushFollow(Follow._expr_in_expr1775);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(368, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:371:4: text= ( NUMBER | DOUBLE | IDENT | STRING )
				{
				DebugLocation(371, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==IDENT||input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(372, 5);

				        value = new ExprConst(text.Text);
				    

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 34);
			LeaveRule("expr", 34);
			LeaveRule_expr();
		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA3 dfa3;
	private DFA22 dfa22;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa22 = new DFA22( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x1\x3\x1\x7\x2\xFFFF";
		private const string DFA3_maxS =
			"\x2\x31\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x13\xFFFF\x1\x3\x3\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x3\x9\xFFFF\x2\x3\x1\xFFFF\x2\x3",
				"\x1\x3\x1\xFFFF\x1\x3\x13\xFFFF\x1\x3\x3\xFFFF\x1\x1\x1\xFFFF\x1\x3"+
				"\x9\xFFFF\x2\x3\x1\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()+ loopback of 35:4: ( ( NEWLINE )* a= node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x4\xFFFF";
		private const string DFA22_eofS =
			"\x4\xFFFF";
		private const string DFA22_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA22_maxS =
			"\x1\x21\x1\x72\x2\xFFFF";
		private const string DFA22_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA22_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x2\xFFFF\x3\x3\x1\xFFFF\xC\x3\x2\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\x1\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x7\x3\x7\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x10"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "()* loopback of 227:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _overall_block_in_root77 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _NEWLINE_in_root79 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _NEWLINE_in_overall_block104 = new BitSet(new ulong[]{0x3600A20000280UL});
		public static readonly BitSet _node_in_overall_block109 = new BitSet(new ulong[]{0x3600A20000282UL});
		public static readonly BitSet _func_def_in_node133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_def_in_node166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_node177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_node199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_node210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Namespace_in_namespace_def228 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_namespace_def232 = new BitSet(new ulong[]{0x3600A20000280UL});
		public static readonly BitSet _overall_block_in_namespace_def236 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def261 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_import_def266 = new BitSet(new ulong[]{0x8000000008UL});
		public static readonly BitSet _Enum_in_enum_def292 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_enum_def296 = new BitSet(new ulong[]{0x4000008UL});
		public static readonly BitSet _IDENT_in_enum_def303 = new BitSet(new ulong[]{0x4000008UL});
		public static readonly BitSet _Struct_in_struct_def324 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_struct_def328 = new BitSet(new ulong[]{0x3600A20000280UL});
		public static readonly BitSet _overall_block_in_struct_def332 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_IDENT_in_type_name358 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_type_name362 = new BitSet(new ulong[]{0x2200000000000008UL,0x8010000UL});
		public static readonly BitSet _80_in_type_name372 = new BitSet(new ulong[]{0x2000000000000UL,0x800000UL});
		public static readonly BitSet _type_name_in_type_name384 = new BitSet(new ulong[]{0x2000000000000UL,0x800000UL});
		public static readonly BitSet _87_in_type_name394 = new BitSet(new ulong[]{0x2200000000000008UL,0x8000000UL});
		public static readonly BitSet _61_in_type_name405 = new BitSet(new ulong[]{0x2200000000000008UL,0x8000000UL});
		public static readonly BitSet _91_in_type_name414 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_type_name416 = new BitSet(new ulong[]{0x2200000000000008UL,0x8000000UL});
		public static readonly BitSet _57_in_type_name425 = new BitSet(new ulong[]{0x2200000000000008UL,0x8000000UL});
		public static readonly BitSet _Func_Args_in_func_args455 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_func_args460 = new BitSet(new ulong[]{0x4480FE8504FFF708UL,0x4800044144822UL});
		public static readonly BitSet _type_name_in_func_def487 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_func_def491 = new BitSet(new ulong[]{0x800000000000000UL,0x10000UL});
		public static readonly BitSet _80_in_func_def494 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_func_def498 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_func_def502 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_func_def506 = new BitSet(new ulong[]{0x1000000001000000UL});
		public static readonly BitSet _func_args_in_func_def511 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_func_def517 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _stmt_block_in_func_def524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block549 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block554 = new BitSet(new ulong[]{0x4480FE8504FFF708UL,0x4800044144822UL});
		public static readonly BitSet _stmt_expr_in_stmt580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_expr626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_expr635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_expr644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_expr653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using694 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_stmt_using699 = new BitSet(new ulong[]{0x4000008UL,0x4000000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef726 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef730 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_stmt_typedef734 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _alloc_expr_in_stmt_alloc755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if773 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if777 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if781 = new BitSet(new ulong[]{0x10000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if786 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while808 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while812 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while816 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_For_in_stmt_for836 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for840 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_stmt_for844 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_stmt_for848 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for852 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_ForEach_in_stmt_for862 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for866 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_stmt_for870 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for874 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try894 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try898 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_stmt_try902 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try906 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Return_in_stmt_return926 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return931 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ident_List_in_ident_list977 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list982 = new BitSet(new ulong[]{0x4000008UL});
		public static readonly BitSet _Expr_Alloc_in_alloc_expr1004 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1008 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1012 = new BitSet(new ulong[]{0x4480008504DFF508UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_alloc_expr1017 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDENT_in_block_expr1043 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _NEWLINE_in_block_expr1046 = new BitSet(new ulong[]{0x4480FE8704FFF700UL,0x4800044144822UL});
		public static readonly BitSet _stmt_in_block_expr1051 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _NEWLINE_in_block_expr1057 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _DEDENT_in_block_expr1060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple1085 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple1090 = new BitSet(new ulong[]{0x4480008504DFF508UL,0x4800044144822UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple1117 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple1122 = new BitSet(new ulong[]{0x4480008504DFF508UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr_list1150 = new BitSet(new ulong[]{0x4480008504DFF502UL,0x4800044144822UL});
		public static readonly BitSet _Expr_Call_in_call_expr1175 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr1179 = new BitSet(new ulong[]{0x4480008504DFF508UL,0x4800044154822UL});
		public static readonly BitSet _80_in_call_expr1184 = new BitSet(new ulong[]{0x4000000UL,0x800000UL});
		public static readonly BitSet _IDENT_in_call_expr1189 = new BitSet(new ulong[]{0x4000000UL,0x800000UL});
		public static readonly BitSet _87_in_call_expr1195 = new BitSet(new ulong[]{0x4480008504DFF508UL,0x4800044144822UL});
		public static readonly BitSet _expr_list_in_call_expr1202 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr1223 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr1227 = new BitSet(new ulong[]{0x4480008504DFF508UL,0x4800044144822UL});
		public static readonly BitSet _expr_list_in_dict_expr1232 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr1254 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr1258 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_lambda_expr1262 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr1282 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1286 = new BitSet(new ulong[]{0x4480008504DFF508UL,0x4800044144822UL});
		public static readonly BitSet _expr_list_in_new_expr1290 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr1301 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1305 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_list_in_new_expr1309 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr1329 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr1333 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_call_with_expr1337 = new BitSet(new ulong[]{0x4480008504DFF508UL,0x4800044144822UL});
		public static readonly BitSet _expr_list_in_call_with_expr1341 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr1366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr1376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr1386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr1396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr1406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr1426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr1435 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _Infix_Func_in_expr1439 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1443 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1447 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr1456 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1460 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1464 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1468 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr1478 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1482 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1504 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_expr1508 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr1518 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1522 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1619 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1623 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr1635 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1681 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1685 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _78_in_expr1695 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1699 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1703 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr1713 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1717 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1727 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr1737 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1741 = new BitSet(new ulong[]{0x4480008504DFF500UL,0x4800044144822UL});
		public static readonly BitSet _expr_in_expr1775 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr1786 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
