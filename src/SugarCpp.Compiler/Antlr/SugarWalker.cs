//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-05 12:37:03

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Linq", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "'\\'", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'let'", "'namespace'", "'new'", "'return'", "'select'", "'try'", "'typedef'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc=12;
	public const int Expr_Bin=13;
	public const int Expr_Bracket=14;
	public const int Expr_Call=15;
	public const int Expr_Call_With=16;
	public const int Expr_Cond=17;
	public const int Expr_Dict=18;
	public const int Expr_Infix=19;
	public const int Expr_Lambda=20;
	public const int Expr_New_Array=21;
	public const int Expr_New_Type=22;
	public const int Expr_Prefix=23;
	public const int Expr_Return=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int Generic_Patameters=29;
	public const int Global_Block=30;
	public const int IDENT=31;
	public const int INDENT=32;
	public const int Ident_List=33;
	public const int Import=34;
	public const int Left_Bracket=35;
	public const int LineComment=36;
	public const int Linq_From=37;
	public const int Linq_Let=38;
	public const int Linq_Prefix=39;
	public const int Linq_Where=40;
	public const int Match_Tuple=41;
	public const int NEWLINE=42;
	public const int NUMBER=43;
	public const int Namespace=44;
	public const int Right_Bracket=45;
	public const int Root=46;
	public const int SP=47;
	public const int STRING=48;
	public const int Stmt_Block=49;
	public const int Stmt_For=50;
	public const int Stmt_ForEach=51;
	public const int Stmt_If=52;
	public const int Stmt_Linq=53;
	public const int Stmt_Try=54;
	public const int Stmt_Typedef=55;
	public const int Stmt_Using=56;
	public const int Stmt_While=57;
	public const int Type_IDENT=58;
	public const int Type_Ref=59;
	public const int Type_Tuple=60;
	public const int DOUBLE=129;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:24:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:24:4: ^( Root a= global_block )
			{
			DebugLocation(24, 4);
			DebugLocation(24, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(24, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(25, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:30:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		AttrAstNode a = default(AttrAstNode);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:35:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:35:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(35, 4);
			DebugLocation(35, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(35, 19);
				// SugarWalker.g:35:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||LA1_0==Expr_Alloc||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||(LA1_0>=Stmt_Typedef && LA1_0<=Stmt_Using)||LA1_0==87))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:35:20: a= node
						{
						DebugLocation(35, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(35, 27);
						 value.List.Add(a); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(36, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:38:1: node returns [AttrAstNode value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private AttrAstNode node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AttrAstNode value = default(AttrAstNode);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		GlobalAlloc e = default(GlobalAlloc);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(38, 1);
		try
		{
			// SugarWalker.g:39:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc:
			case 87:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:39:4: a= func_def
				{
				DebugLocation(39, 6);
				PushFollow(Follow._func_def_in_node134);
				a=func_def();
				PopFollow();

				DebugLocation(39, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:40:4: b= import_def
				{
				DebugLocation(40, 6);
				PushFollow(Follow._import_def_in_node145);
				b=import_def();
				PopFollow();

				DebugLocation(40, 19);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:41:4: c= enum_def
				{
				DebugLocation(41, 6);
				PushFollow(Follow._enum_def_in_node156);
				c=enum_def();
				PopFollow();

				DebugLocation(41, 17);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:42:4: d= class_def
				{
				DebugLocation(42, 6);
				PushFollow(Follow._class_def_in_node167);
				d=class_def();
				PopFollow();

				DebugLocation(42, 18);
				 value = d; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:43:4: e= global_alloc
				{
				DebugLocation(43, 6);
				PushFollow(Follow._global_alloc_in_node178);
				e=global_alloc();
				PopFollow();

				DebugLocation(43, 21);
				 value = e; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:44:4: f= global_using
				{
				DebugLocation(44, 6);
				PushFollow(Follow._global_using_in_node189);
				f=global_using();
				PopFollow();

				DebugLocation(44, 21);
				 value = f; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:45:4: g= global_typedef
				{
				DebugLocation(45, 6);
				PushFollow(Follow._global_typedef_in_node200);
				g=global_typedef();
				PopFollow();

				DebugLocation(45, 23);
				 value = g; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:46:4: h= namespace_def
				{
				DebugLocation(46, 6);
				PushFollow(Follow._namespace_def_in_node211);
				h=namespace_def();
				PopFollow();

				DebugLocation(46, 22);
				 value = h; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:49:1: global_using returns [GlobalUsing value] : a= stmt_using ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		StmtUsing a = default(StmtUsing);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(49, 1);
		try
		{
			// SugarWalker.g:50:2: (a= stmt_using )
			DebugEnterAlt(1);
			// SugarWalker.g:50:4: a= stmt_using
			{
			DebugLocation(50, 5);
			PushFollow(Follow._stmt_using_in_global_using229);
			a=stmt_using();
			PopFollow();

			DebugLocation(51, 2);

					value = new GlobalUsing(a.List);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:56:1: global_alloc returns [GlobalAlloc value] : ( ^( Expr_Alloc (attr= attribute )? a= type_name b= ident_list (c= expr )? ) | ^( ':=' (attr= attribute )? a= ident c= expr ) );
	[GrammarRule("global_alloc")]
	private GlobalAlloc global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		GlobalAlloc value = default(GlobalAlloc);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(56, 1);
		try
		{
			// SugarWalker.g:57:2: ( ^( Expr_Alloc (attr= attribute )? a= type_name b= ident_list (c= expr )? ) | ^( ':=' (attr= attribute )? a= ident c= expr ) )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0==Expr_Alloc))
			{
				alt6 = 1;
			}
			else if ((LA6_0==87))
			{
				alt6 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:57:4: ^( Expr_Alloc (attr= attribute )? a= type_name b= ident_list (c= expr )? )
				{
				DebugLocation(57, 4);
				DebugLocation(57, 6);
				Match(input,Expr_Alloc,Follow._Expr_Alloc_in_global_alloc248); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(57, 17);
				// SugarWalker.g:57:17: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:57:18: attr= attribute
					{
					DebugLocation(57, 22);
					PushFollow(Follow._attribute_in_global_alloc253);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(57, 36);
				PushFollow(Follow._type_name_in_global_alloc259);
				a=type_name();
				PopFollow();

				DebugLocation(57, 48);
				PushFollow(Follow._ident_list_in_global_alloc263);
				b=ident_list();
				PopFollow();

				DebugLocation(57, 60);
				// SugarWalker.g:57:60: (c= expr )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>=Expr_Access && LA4_0<=Expr_Prefix)||(LA4_0>=Expr_Suffix && LA4_0<=Expr_Tuple)||LA4_0==IDENT||LA4_0==Match_Tuple||LA4_0==NUMBER||LA4_0==STRING||LA4_0==64||LA4_0==67||LA4_0==71||LA4_0==74||LA4_0==78||LA4_0==84||LA4_0==87||LA4_0==91||LA4_0==93||LA4_0==99||LA4_0==104||LA4_0==126||LA4_0==DOUBLE))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:57:61: c= expr
					{
					DebugLocation(57, 62);
					PushFollow(Follow._expr_in_global_alloc268);
					c=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(58, 2);

						value = new GlobalAlloc(a, b, c, attr);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:61:4: ^( ':=' (attr= attribute )? a= ident c= expr )
				{
				DebugLocation(61, 4);
				DebugLocation(61, 6);
				Match(input,87,Follow._87_in_global_alloc280); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(61, 11);
				// SugarWalker.g:61:11: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:61:12: attr= attribute
					{
					DebugLocation(61, 16);
					PushFollow(Follow._attribute_in_global_alloc285);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(61, 30);
				PushFollow(Follow._ident_in_global_alloc291);
				a=ident();
				PopFollow();

				DebugLocation(61, 38);
				PushFollow(Follow._expr_in_global_alloc295);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(62, 2);

						value = new GlobalAlloc("auto", new List<string> { a }, c, attr);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:67:1: global_typedef returns [GlobalTypeDef value] : a= stmt_typedef ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		StmtTypeDef a = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(67, 1);
		try
		{
			// SugarWalker.g:68:2: (a= stmt_typedef )
			DebugEnterAlt(1);
			// SugarWalker.g:68:4: a= stmt_typedef
			{
			DebugLocation(68, 5);
			PushFollow(Follow._stmt_typedef_in_global_typedef316);
			a=stmt_typedef();
			PopFollow();

			DebugLocation(69, 2);

					value = new GlobalTypeDef(a.Type, a.Name);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:74:1: attribute_args returns [string value] : (a= ( NUMBER ) |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(74, 1);
		try
		{
			// SugarWalker.g:75:2: (a= ( NUMBER ) |a= STRING |b= ident )
			int alt7=3;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt7 = 1;
				}
				break;
			case STRING:
				{
				alt7 = 2;
				}
				break;
			case IDENT:
				{
				alt7 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:75:4: a= ( NUMBER )
				{
				DebugLocation(75, 5);
				// SugarWalker.g:75:6: ( NUMBER )
				DebugEnterAlt(1);
				// SugarWalker.g:75:7: NUMBER
				{
				DebugLocation(75, 7);
				Match(input,NUMBER,Follow._NUMBER_in_attribute_args337); 

				}

				DebugLocation(76, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:79:4: a= STRING
				{
				DebugLocation(79, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args348); 
				DebugLocation(80, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:83:4: b= ident
				{
				DebugLocation(83, 5);
				PushFollow(Follow._ident_in_attribute_args358);
				b=ident();
				PopFollow();

				DebugLocation(84, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:89:1: attribute_item returns [Attr value] : ^( Attribute a= ident (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(89, 1);
		try
		{
			// SugarWalker.g:94:2: ( ^( Attribute a= ident (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:94:4: ^( Attribute a= ident (b= attribute_args )* )
			{
			DebugLocation(94, 4);
			DebugLocation(94, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item382); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(94, 17);
			PushFollow(Follow._ident_in_attribute_item386);
			a=ident();
			PopFollow();

			DebugLocation(94, 24);
			 value.Name = a; 
			DebugLocation(94, 45);
			// SugarWalker.g:94:45: (b= attribute_args )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==IDENT||LA8_0==NUMBER||LA8_0==STRING))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:94:46: b= attribute_args
					{
					DebugLocation(94, 47);
					PushFollow(Follow._attribute_args_in_attribute_item393);
					b=attribute_args();
					PopFollow();

					DebugLocation(94, 63);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:97:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(97, 1);
		try
		{
			// SugarWalker.g:102:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:102:4: (a= attribute_item )+
			{
			DebugLocation(102, 4);
			// SugarWalker.g:102:4: (a= attribute_item )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==Attribute))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:102:5: a= attribute_item
					{
					DebugLocation(102, 6);
					PushFollow(Follow._attribute_item_in_attribute421);
					a=attribute_item();
					PopFollow();

					DebugLocation(102, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:105:1: namespace_def returns [Namespace value] : ^( Namespace a= ident b= global_block ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(105, 1);
		try
		{
			// SugarWalker.g:106:2: ( ^( Namespace a= ident b= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:106:4: ^( Namespace a= ident b= global_block )
			{
			DebugLocation(106, 4);
			DebugLocation(106, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def442); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(106, 17);
			PushFollow(Follow._ident_in_namespace_def446);
			a=ident();
			PopFollow();

			DebugLocation(106, 25);
			PushFollow(Follow._global_block_in_namespace_def450);
			b=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(107, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:112:1: import_def returns [Import value] : ^( Import (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(112, 1);
		try
		{
			// SugarWalker.g:117:2: ( ^( Import (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:117:4: ^( Import (a= STRING )* )
			{
			DebugLocation(117, 4);
			DebugLocation(117, 6);
			Match(input,Import,Follow._Import_in_import_def475); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(117, 13);
				// SugarWalker.g:117:13: (a= STRING )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if ((LA10_0==STRING))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:117:14: a= STRING
						{
						DebugLocation(117, 15);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def480); 
						DebugLocation(117, 23);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:120:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(120, 1);
		try
		{
			// SugarWalker.g:121:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:121:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(121, 4);
			DebugLocation(121, 6);
			Match(input,Enum,Follow._Enum_in_enum_def501); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(121, 11);
			// SugarWalker.g:121:11: (attr= attribute )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==Attribute))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:121:12: attr= attribute
				{
				DebugLocation(121, 16);
				PushFollow(Follow._attribute_in_enum_def506);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(121, 30);
			PushFollow(Follow._ident_in_enum_def512);
			a=ident();
			PopFollow();

			DebugLocation(121, 38);
			PushFollow(Follow._ident_list_in_enum_def516);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(122, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:127:1: class_def returns [Class value] : ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		List<ExprAlloc> c = default(List<ExprAlloc>);
		List<string> d = default(List<string>);
		GlobalBlock e = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(127, 1);
		try
		{
			// SugarWalker.g:128:2: ( ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:128:4: ^( Class (attr= attribute )? a= ident (b= generic_parameter )? (c= func_args )? (d= ident_list )? (e= global_block )? )
			{
			DebugLocation(128, 4);
			DebugLocation(128, 6);
			Match(input,Class,Follow._Class_in_class_def536); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(128, 12);
			// SugarWalker.g:128:12: (attr= attribute )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==Attribute))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:128:13: attr= attribute
				{
				DebugLocation(128, 17);
				PushFollow(Follow._attribute_in_class_def541);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(128, 31);
			PushFollow(Follow._ident_in_class_def547);
			a=ident();
			PopFollow();

			DebugLocation(128, 38);
			// SugarWalker.g:128:38: (b= generic_parameter )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==Generic_Patameters))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:128:39: b= generic_parameter
				{
				DebugLocation(128, 40);
				PushFollow(Follow._generic_parameter_in_class_def552);
				b=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(128, 61);
			// SugarWalker.g:128:61: (c= func_args )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==Func_Args))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:128:62: c= func_args
				{
				DebugLocation(128, 63);
				PushFollow(Follow._func_args_in_class_def559);
				c=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(128, 76);
			// SugarWalker.g:128:76: (d= ident_list )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==Ident_List))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:128:77: d= ident_list
				{
				DebugLocation(128, 78);
				PushFollow(Follow._ident_list_in_class_def566);
				d=ident_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(128, 92);
			// SugarWalker.g:128:92: (e= global_block )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==Global_Block))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:128:93: e= global_block
				{
				DebugLocation(128, 94);
				PushFollow(Follow._global_block_in_class_def573);
				e=global_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(129, 2);

					value = new Class(a, b, c, d, e, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:134:1: type_name returns [string value] : ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		string value = default(string);


		string a = default(string);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(134, 1);
		try
		{
			// SugarWalker.g:139:2: ( ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:139:4: ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* )
			{
			DebugLocation(139, 4);
			DebugLocation(139, 7);
			Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name601); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(139, 19);
			PushFollow(Follow._ident_in_type_name605);
			a=ident();
			PopFollow();

			DebugLocation(139, 26);
			 value+=a; 
			DebugLocation(140, 5);
			// SugarWalker.g:140:5: ( '<' (b= type_name )* '>' )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==89))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:140:7: '<' (b= type_name )* '>'
				{
				DebugLocation(140, 7);
				Match(input,89,Follow._89_in_type_name615); 
				DebugLocation(140, 11);
				 value+="<"; bool isFirst = true; 
				DebugLocation(141, 6);
				// SugarWalker.g:141:6: (b= type_name )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==Type_IDENT))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:141:7: b= type_name
						{
						DebugLocation(141, 8);
						PushFollow(Follow._type_name_in_type_name627);
						b=type_name();
						PopFollow();

						DebugLocation(142, 3);

									if (!isFirst) value+=", ";
									isFirst = false;
									value+=b;
								

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(147, 3);
				Match(input,96,Follow._96_in_type_name637); 
				DebugLocation(147, 7);
				 value+=">"; 

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(148, 4);
			// SugarWalker.g:148:4: ( '*' | '[' ']' | '&' )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=4;
				try { DebugEnterDecision(19, false);
				switch (input.LA(1))
				{
				case 70:
					{
					alt19 = 1;
					}
					break;
				case 100:
					{
					alt19 = 2;
					}
					break;
				case 66:
					{
					alt19 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:148:6: '*'
					{
					DebugLocation(148, 6);
					Match(input,70,Follow._70_in_type_name648); 
					DebugLocation(148, 10);
					 value+="*"; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarWalker.g:149:6: '[' ']'
					{
					DebugLocation(149, 6);
					Match(input,100,Follow._100_in_type_name657); 
					DebugLocation(149, 10);
					Match(input,102,Follow._102_in_type_name659); 
					DebugLocation(149, 14);
					 value+="[]"; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarWalker.g:150:6: '&'
					{
					DebugLocation(150, 6);
					Match(input,66,Follow._66_in_type_name668); 
					DebugLocation(150, 10);
					 value+="&"; 

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:154:1: func_args returns [List<ExprAlloc> value] : ^( Func_Args (a= stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private List<ExprAlloc> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 15);
		TraceIn("func_args", 15);
		List<ExprAlloc> value = default(List<ExprAlloc>);


		Stmt a = default(Stmt);


			value = new List<ExprAlloc>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(154, 1);
		try
		{
			// SugarWalker.g:159:2: ( ^( Func_Args (a= stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:159:4: ^( Func_Args (a= stmt_alloc )* )
			{
			DebugLocation(159, 4);
			DebugLocation(159, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args698); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(159, 16);
				// SugarWalker.g:159:16: (a= stmt_alloc )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if (((LA20_0>=Expr_Access && LA20_0<=Expr_Prefix)||(LA20_0>=Expr_Suffix && LA20_0<=Expr_Tuple)||LA20_0==IDENT||LA20_0==Match_Tuple||LA20_0==NUMBER||LA20_0==STRING||LA20_0==64||LA20_0==67||LA20_0==71||LA20_0==74||LA20_0==78||LA20_0==84||LA20_0==87||LA20_0==91||LA20_0==93||LA20_0==99||LA20_0==104||LA20_0==126||LA20_0==DOUBLE))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:159:17: a= stmt_alloc
						{
						DebugLocation(159, 18);
						PushFollow(Follow._stmt_alloc_in_func_args703);
						a=stmt_alloc();
						PopFollow();

						DebugLocation(160, 2);

								var b = (ExprAlloc)a;
								if (b.Type == "auto")
								{
									b.Type = "decltype";
								}
								value.Add(b);
							

						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 15);
			LeaveRule("func_args", 15);
			LeaveRule_func_args();
		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:170:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 16);
		TraceIn("generic_parameter", 16);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(170, 1);
		try
		{
			// SugarWalker.g:175:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:175:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(175, 4);
			DebugLocation(175, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter730); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(175, 25);
				// SugarWalker.g:175:25: (a= ident )*
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==IDENT))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch ( alt21 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:175:26: a= ident
						{
						DebugLocation(175, 27);
						PushFollow(Follow._ident_in_generic_parameter735);
						a=ident();
						PopFollow();

						DebugLocation(175, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop21;
					}
				}

				loop21:
					;

				} finally { DebugExitSubRule(21); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 16);
			LeaveRule("generic_parameter", 16);
			LeaveRule_generic_parameter();
		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:178:1: func_def returns [FuncDef value] : ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 17);
		TraceIn("func_def", 17);
		FuncDef value = default(FuncDef);


		CommonTree deconstructor = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		string b = default(string);
		List<string> x = default(List<string>);
		List<ExprAlloc> args = default(List<ExprAlloc>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(178, 1);
		try
		{
			// SugarWalker.g:183:2: ( ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:183:4: ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(183, 4);
			DebugLocation(183, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def761); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(183, 15);
			// SugarWalker.g:183:15: (attr= attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==Attribute))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:183:16: attr= attribute
				{
				DebugLocation(183, 20);
				PushFollow(Follow._attribute_in_func_def766);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(183, 33);
			// SugarWalker.g:183:33: (a= type_name )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==Type_IDENT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:183:34: a= type_name
				{
				DebugLocation(183, 35);
				PushFollow(Follow._type_name_in_func_def773);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(183, 48);
			// SugarWalker.g:183:48: (deconstructor= '~' )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==128))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:183:49: deconstructor= '~'
				{
				DebugLocation(183, 62);
				deconstructor=(CommonTree)Match(input,128,Follow._128_in_func_def780); 

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(183, 70);
			PushFollow(Follow._ident_in_func_def786);
			b=ident();
			PopFollow();

			DebugLocation(183, 77);
			// SugarWalker.g:183:77: (x= generic_parameter )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==Generic_Patameters))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:183:78: x= generic_parameter
				{
				DebugLocation(183, 79);
				PushFollow(Follow._generic_parameter_in_func_def791);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(183, 101);
			// SugarWalker.g:183:101: (args= func_args )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==Func_Args))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:183:102: args= func_args
				{
				DebugLocation(183, 106);
				PushFollow(Follow._func_args_in_func_def799);
				args=func_args();
				PopFollow();

				DebugLocation(183, 117);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(184, 2);
			// SugarWalker.g:184:2: (e= stmt_block |f= expr )
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==Stmt_Block))
			{
				alt27 = 1;
			}
			else if (((LA27_0>=Expr_Access && LA27_0<=Expr_Prefix)||(LA27_0>=Expr_Suffix && LA27_0<=Expr_Tuple)||LA27_0==IDENT||LA27_0==Match_Tuple||LA27_0==NUMBER||LA27_0==STRING||LA27_0==64||LA27_0==67||LA27_0==71||LA27_0==74||LA27_0==78||LA27_0==84||LA27_0==87||LA27_0==91||LA27_0==93||LA27_0==99||LA27_0==104||LA27_0==126||LA27_0==DOUBLE))
			{
				alt27 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:184:4: e= stmt_block
				{
				DebugLocation(184, 5);
				PushFollow(Follow._stmt_block_in_func_def810);
				e=stmt_block();
				PopFollow();

				DebugLocation(185, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:199:4: f= expr
				{
				DebugLocation(199, 5);
				PushFollow(Follow._expr_in_func_def820);
				f=expr();
				PopFollow();

				DebugLocation(200, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if (a == "void" || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtExpr(new ExprReturn(f)));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 17);
			LeaveRule("func_def", 17);
			LeaveRule_func_def();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:226:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 18);
		TraceIn("stmt_block", 18);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(226, 4);
		try
		{
			// SugarWalker.g:231:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:231:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(231, 4);
			DebugLocation(231, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block848); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(231, 17);
				// SugarWalker.g:231:17: (a= stmt )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if (((LA28_0>=Expr_Access && LA28_0<=Expr_Tuple)||LA28_0==IDENT||LA28_0==Match_Tuple||LA28_0==NUMBER||LA28_0==STRING||(LA28_0>=Stmt_For && LA28_0<=Stmt_While)||LA28_0==64||LA28_0==67||LA28_0==71||LA28_0==74||LA28_0==78||LA28_0==84||LA28_0==87||LA28_0==91||LA28_0==93||LA28_0==99||LA28_0==104||LA28_0==126||LA28_0==DOUBLE))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:231:18: a= stmt
						{
						DebugLocation(231, 19);
						PushFollow(Follow._stmt_in_stmt_block853);
						a=stmt();
						PopFollow();

						DebugLocation(231, 25);
						 value.StmtList.Add(a); 

						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 18);
			LeaveRule("stmt_block", 18);
			LeaveRule_stmt_block();
		}
		DebugLocation(232, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:234:1: stmt returns [Stmt value] : (a= stmt_expr |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_linq );
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 19);
		TraceIn("stmt", 19);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(234, 1);
		try
		{
			// SugarWalker.g:235:2: (a= stmt_expr |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try |a= stmt_linq )
			int alt29=6;
			try { DebugEnterDecision(29, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Return:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 64:
			case 67:
			case 71:
			case 74:
			case 78:
			case 84:
			case 87:
			case 91:
			case 93:
			case 99:
			case 104:
			case 126:
			case DOUBLE:
				{
				alt29 = 1;
				}
				break;
			case Stmt_If:
				{
				alt29 = 2;
				}
				break;
			case Stmt_While:
				{
				alt29 = 3;
				}
				break;
			case Stmt_For:
			case Stmt_ForEach:
				{
				alt29 = 4;
				}
				break;
			case Stmt_Try:
				{
				alt29 = 5;
				}
				break;
			case Stmt_Linq:
				{
				alt29 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:235:4: a= stmt_expr
				{
				DebugLocation(235, 5);
				PushFollow(Follow._stmt_expr_in_stmt879);
				a=stmt_expr();
				PopFollow();

				DebugLocation(235, 16);
				 value = new StmtExpr(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:236:4: a= stmt_if
				{
				DebugLocation(236, 5);
				PushFollow(Follow._stmt_if_in_stmt888);
				a=stmt_if();
				PopFollow();

				DebugLocation(236, 14);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:237:4: a= stmt_while
				{
				DebugLocation(237, 5);
				PushFollow(Follow._stmt_while_in_stmt897);
				a=stmt_while();
				PopFollow();

				DebugLocation(237, 17);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:238:4: a= stmt_for
				{
				DebugLocation(238, 5);
				PushFollow(Follow._stmt_for_in_stmt906);
				a=stmt_for();
				PopFollow();

				DebugLocation(238, 15);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:239:4: a= stmt_try
				{
				DebugLocation(239, 5);
				PushFollow(Follow._stmt_try_in_stmt915);
				a=stmt_try();
				PopFollow();

				DebugLocation(239, 15);
				 value = a; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:240:4: a= stmt_linq
				{
				DebugLocation(240, 5);
				PushFollow(Follow._stmt_linq_in_stmt924);
				a=stmt_linq();
				PopFollow();

				DebugLocation(240, 16);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 19);
			LeaveRule("stmt", 19);
			LeaveRule_stmt();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:243:1: stmt_expr returns [Stmt value] : (a= stmt_return |b= stmt_using |c= expr |d= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 20);
		TraceIn("stmt_expr", 20);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);
		StmtUsing b = default(StmtUsing);
		Expr c = default(Expr);
		StmtTypeDef d = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(243, 1);
		try
		{
			// SugarWalker.g:244:2: (a= stmt_return |b= stmt_using |c= expr |d= stmt_typedef )
			int alt30=4;
			try { DebugEnterDecision(30, false);
			switch (input.LA(1))
			{
			case Expr_Return:
				{
				alt30 = 1;
				}
				break;
			case Stmt_Using:
				{
				alt30 = 2;
				}
				break;
			case Expr_Access:
			case Expr_Alloc:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 64:
			case 67:
			case 71:
			case 74:
			case 78:
			case 84:
			case 87:
			case 91:
			case 93:
			case 99:
			case 104:
			case 126:
			case DOUBLE:
				{
				alt30 = 3;
				}
				break;
			case Stmt_Typedef:
				{
				alt30 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:244:4: a= stmt_return
				{
				DebugLocation(244, 5);
				PushFollow(Follow._stmt_return_in_stmt_expr943);
				a=stmt_return();
				PopFollow();

				DebugLocation(244, 18);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:245:4: b= stmt_using
				{
				DebugLocation(245, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr952);
				b=stmt_using();
				PopFollow();

				DebugLocation(245, 17);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:246:4: c= expr
				{
				DebugLocation(246, 5);
				PushFollow(Follow._expr_in_stmt_expr961);
				c=expr();
				PopFollow();

				DebugLocation(246, 11);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:247:4: d= stmt_typedef
				{
				DebugLocation(247, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr970);
				d=stmt_typedef();
				PopFollow();

				DebugLocation(247, 19);
				 value = d; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 20);
			LeaveRule("stmt_expr", 20);
			LeaveRule_stmt_expr();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:250:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 21);
		TraceIn("stmt_using", 21);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(250, 1);
		try
		{
			// SugarWalker.g:255:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:255:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(255, 4);
			DebugLocation(255, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using993); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(255, 17);
				// SugarWalker.g:255:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=3;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==IDENT))
					{
						alt31 = 1;
					}
					else if ((LA31_0==116))
					{
						alt31 = 2;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:255:19: a= ident
						{
						DebugLocation(255, 20);
						PushFollow(Follow._ident_in_stmt_using999);
						a=ident();
						PopFollow();

						DebugLocation(255, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:256:10: b= 'namespace'
						{
						DebugLocation(256, 11);
						b=(CommonTree)Match(input,116,Follow._116_in_stmt_using1014); 
						DebugLocation(256, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 21);
			LeaveRule("stmt_using", 21);
			LeaveRule_stmt_using();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:259:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 22);
		TraceIn("stmt_typedef", 22);
		StmtTypeDef value = default(StmtTypeDef);


		string a = default(string);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(259, 1);
		try
		{
			// SugarWalker.g:260:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:260:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(260, 4);
			DebugLocation(260, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1035); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(260, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1039);
			a=type_name();
			PopFollow();

			DebugLocation(260, 32);
			PushFollow(Follow._ident_in_stmt_typedef1043);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(261, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 22);
			LeaveRule("stmt_typedef", 22);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:266:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 23);
		TraceIn("stmt_alloc", 23);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(266, 1);
		try
		{
			// SugarWalker.g:267:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:267:4: a= expr
			{
			DebugLocation(267, 5);
			PushFollow(Follow._expr_in_stmt_alloc1064);
			a=expr();
			PopFollow();

			DebugLocation(267, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 23);
			LeaveRule("stmt_alloc", 23);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:270:1: stmt_if returns [Stmt value] : ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 24);
		TraceIn("stmt_if", 24);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(270, 1);
		try
		{
			// SugarWalker.g:271:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:271:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
			{
			DebugLocation(271, 4);
			DebugLocation(271, 6);
			Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1082); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(271, 15);
			PushFollow(Follow._expr_in_stmt_if1086);
			a=expr();
			PopFollow();

			DebugLocation(271, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1090);
			b=stmt_block();
			PopFollow();

			DebugLocation(271, 34);
			// SugarWalker.g:271:34: (c= stmt_block )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==Stmt_Block))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:271:35: c= stmt_block
				{
				DebugLocation(271, 36);
				PushFollow(Follow._stmt_block_in_stmt_if1095);
				c=stmt_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(32); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(272, 2);

					value = new StmtIf(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 24);
			LeaveRule("stmt_if", 24);
			LeaveRule_stmt_if();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:277:1: stmt_while returns [Stmt value] : ^( Stmt_While a= expr b= stmt_block ) ;
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 25);
		TraceIn("stmt_while", 25);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(277, 1);
		try
		{
			// SugarWalker.g:278:2: ( ^( Stmt_While a= expr b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:278:4: ^( Stmt_While a= expr b= stmt_block )
			{
			DebugLocation(278, 4);
			DebugLocation(278, 6);
			Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1117); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(278, 18);
			PushFollow(Follow._expr_in_stmt_while1121);
			a=expr();
			PopFollow();

			DebugLocation(278, 25);
			PushFollow(Follow._stmt_block_in_stmt_while1125);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(279, 2);

					value = new StmtWhile(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 25);
			LeaveRule("stmt_while", 25);
			LeaveRule_stmt_while();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:284:1: stmt_for returns [Stmt value] : ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) );
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 26);
		TraceIn("stmt_for", 26);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		StmtBlock d = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(284, 1);
		try
		{
			// SugarWalker.g:285:2: ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==Stmt_For))
			{
				alt33 = 1;
			}
			else if ((LA33_0==Stmt_ForEach))
			{
				alt33 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:285:4: ^( Stmt_For a= expr b= expr c= expr d= stmt_block )
				{
				DebugLocation(285, 4);
				DebugLocation(285, 6);
				Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1145); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(285, 16);
				PushFollow(Follow._expr_in_stmt_for1149);
				a=expr();
				PopFollow();

				DebugLocation(285, 23);
				PushFollow(Follow._expr_in_stmt_for1153);
				b=expr();
				PopFollow();

				DebugLocation(285, 30);
				PushFollow(Follow._expr_in_stmt_for1157);
				c=expr();
				PopFollow();

				DebugLocation(285, 37);
				PushFollow(Follow._stmt_block_in_stmt_for1161);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(286, 2);

						
						value = new StmtFor(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:290:4: ^( Stmt_ForEach a= expr b= expr d= stmt_block )
				{
				DebugLocation(290, 4);
				DebugLocation(290, 6);
				Match(input,Stmt_ForEach,Follow._Stmt_ForEach_in_stmt_for1171); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(290, 20);
				PushFollow(Follow._expr_in_stmt_for1175);
				a=expr();
				PopFollow();

				DebugLocation(290, 27);
				PushFollow(Follow._expr_in_stmt_for1179);
				b=expr();
				PopFollow();

				DebugLocation(290, 34);
				PushFollow(Follow._stmt_block_in_stmt_for1183);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(291, 2);

						value = new StmtForEach(a, b, d);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 26);
			LeaveRule("stmt_for", 26);
			LeaveRule_stmt_for();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:296:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 27);
		TraceIn("stmt_try", 27);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Expr b = default(Expr);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(296, 1);
		try
		{
			// SugarWalker.g:297:2: ( ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:297:4: ^( Stmt_Try a= stmt_block b= expr c= stmt_block )
			{
			DebugLocation(297, 4);
			DebugLocation(297, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1203); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(297, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1207);
			a=stmt_block();
			PopFollow();

			DebugLocation(297, 29);
			PushFollow(Follow._expr_in_stmt_try1211);
			b=expr();
			PopFollow();

			DebugLocation(297, 36);
			PushFollow(Follow._stmt_block_in_stmt_try1215);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(298, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 27);
			LeaveRule("stmt_try", 27);
			LeaveRule_stmt_try();
		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:303:1: stmt_return returns [Stmt value] : ^( Expr_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 28);
		TraceIn("stmt_return", 28);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(303, 1);
		try
		{
			// SugarWalker.g:304:2: ( ^( Expr_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:304:4: ^( Expr_Return (a= expr )? )
			{
			DebugLocation(304, 4);
			DebugLocation(304, 6);
			Match(input,Expr_Return,Follow._Expr_Return_in_stmt_return1235); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(304, 18);
				// SugarWalker.g:304:18: (a= expr )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if (((LA34_0>=Expr_Access && LA34_0<=Expr_Prefix)||(LA34_0>=Expr_Suffix && LA34_0<=Expr_Tuple)||LA34_0==IDENT||LA34_0==Match_Tuple||LA34_0==NUMBER||LA34_0==STRING||LA34_0==64||LA34_0==67||LA34_0==71||LA34_0==74||LA34_0==78||LA34_0==84||LA34_0==87||LA34_0==91||LA34_0==93||LA34_0==99||LA34_0==104||LA34_0==126||LA34_0==DOUBLE))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:304:19: a= expr
					{
					DebugLocation(304, 20);
					PushFollow(Follow._expr_in_stmt_return1240);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(34); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(305, 2);

					value = new ExprReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 28);
			LeaveRule("stmt_return", 28);
			LeaveRule_stmt_return();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarWalker.g:310:1: linq_item returns [LinqItem value] : ( ^( Linq_From a= ident b= expr ) | ^( Linq_Let a= ident b= expr ) | ^( Linq_Where b= expr ) );
	[GrammarRule("linq_item")]
	private LinqItem linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 29);
		TraceIn("linq_item", 29);
		LinqItem value = default(LinqItem);


		string a = default(string);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(310, 1);
		try
		{
			// SugarWalker.g:311:2: ( ^( Linq_From a= ident b= expr ) | ^( Linq_Let a= ident b= expr ) | ^( Linq_Where b= expr ) )
			int alt35=3;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case Linq_From:
				{
				alt35 = 1;
				}
				break;
			case Linq_Let:
				{
				alt35 = 2;
				}
				break;
			case Linq_Where:
				{
				alt35 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:311:4: ^( Linq_From a= ident b= expr )
				{
				DebugLocation(311, 4);
				DebugLocation(311, 6);
				Match(input,Linq_From,Follow._Linq_From_in_linq_item1262); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(311, 17);
				PushFollow(Follow._ident_in_linq_item1266);
				a=ident();
				PopFollow();

				DebugLocation(311, 25);
				PushFollow(Follow._expr_in_linq_item1270);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(312, 2);

						value = new LinqFrom(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:315:4: ^( Linq_Let a= ident b= expr )
				{
				DebugLocation(315, 4);
				DebugLocation(315, 6);
				Match(input,Linq_Let,Follow._Linq_Let_in_linq_item1280); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(315, 16);
				PushFollow(Follow._ident_in_linq_item1284);
				a=ident();
				PopFollow();

				DebugLocation(315, 24);
				PushFollow(Follow._expr_in_linq_item1288);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(316, 2);

						value = new LinqLet(a, b);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:319:4: ^( Linq_Where b= expr )
				{
				DebugLocation(319, 4);
				DebugLocation(319, 6);
				Match(input,Linq_Where,Follow._Linq_Where_in_linq_item1298); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(319, 18);
				PushFollow(Follow._expr_in_linq_item1302);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(320, 2);

						value = new LinqWhere(b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("linq_item", 29);
			LeaveRule("linq_item", 29);
			LeaveRule_linq_item();
		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return value;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarWalker.g:325:1: linq_prefix returns [List<LinqItem> value] : ^( Linq_Prefix (a= linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private List<LinqItem> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 30);
		TraceIn("linq_prefix", 30);
		List<LinqItem> value = default(List<LinqItem>);


		LinqItem a = default(LinqItem);


			value = new List<LinqItem>();

		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(325, 1);
		try
		{
			// SugarWalker.g:330:2: ( ^( Linq_Prefix (a= linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:330:4: ^( Linq_Prefix (a= linq_item )+ )
			{
			DebugLocation(330, 4);
			DebugLocation(330, 6);
			Match(input,Linq_Prefix,Follow._Linq_Prefix_in_linq_prefix1327); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(330, 18);
			// SugarWalker.g:330:18: (a= linq_item )+
			int cnt36=0;
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if (((LA36_0>=Linq_From && LA36_0<=Linq_Let)||LA36_0==Linq_Where))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:330:19: a= linq_item
					{
					DebugLocation(330, 20);
					PushFollow(Follow._linq_item_in_linq_prefix1332);
					a=linq_item();
					PopFollow();

					DebugLocation(330, 31);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt36 >= 1)
						goto loop36;

					EarlyExitException eee36 = new EarlyExitException( 36, input );
					DebugRecognitionException(eee36);
					throw eee36;
				}
				cnt36++;
			}
			loop36:
				;

			} finally { DebugExitSubRule(36); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("linq_prefix", 30);
			LeaveRule("linq_prefix", 30);
			LeaveRule_linq_prefix();
		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return value;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarWalker.g:333:1: stmt_linq returns [Stmt value] : ^( Stmt_Linq a= linq_prefix b= stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private Stmt stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 31);
		TraceIn("stmt_linq", 31);
		Stmt value = default(Stmt);


		List<LinqItem> a = default(List<LinqItem>);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(333, 1);
		try
		{
			// SugarWalker.g:334:2: ( ^( Stmt_Linq a= linq_prefix b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:334:4: ^( Stmt_Linq a= linq_prefix b= stmt_block )
			{
			DebugLocation(334, 4);
			DebugLocation(334, 6);
			Match(input,Stmt_Linq,Follow._Stmt_Linq_in_stmt_linq1353); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(334, 17);
			PushFollow(Follow._linq_prefix_in_stmt_linq1357);
			a=linq_prefix();
			PopFollow();

			DebugLocation(334, 31);
			PushFollow(Follow._stmt_block_in_stmt_linq1361);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(335, 2);

					value = new StmtLinq(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_linq", 31);
			LeaveRule("stmt_linq", 31);
			LeaveRule_stmt_linq();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return value;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:340:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 32);
		TraceIn("ident", 32);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(340, 1);
		try
		{
			// SugarWalker.g:345:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:345:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(345, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1387); 
			DebugLocation(345, 12);
			 value = a.Text; 
			DebugLocation(345, 33);
			// SugarWalker.g:345:33: ( '::' a= IDENT )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==86))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:345:34: '::' a= IDENT
					{
					DebugLocation(345, 34);
					Match(input,86,Follow._86_in_ident1392); 
					DebugLocation(345, 40);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1396); 
					DebugLocation(345, 47);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 32);
			LeaveRule("ident", 32);
			LeaveRule_ident();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:348:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )* ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 33);
		TraceIn("ident_list", 33);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(348, 1);
		try
		{
			// SugarWalker.g:353:2: ( ^( Ident_List (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:353:4: ^( Ident_List (a= ident )* )
			{
			DebugLocation(353, 4);
			DebugLocation(353, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list1421); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(353, 17);
				// SugarWalker.g:353:17: (a= ident )*
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					int LA38_0 = input.LA(1);

					if ((LA38_0==IDENT))
					{
						alt38 = 1;
					}


					} finally { DebugExitDecision(38); }
					switch ( alt38 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:353:18: a= ident
						{
						DebugLocation(353, 19);
						PushFollow(Follow._ident_in_ident_list1426);
						a=ident();
						PopFollow();

						DebugLocation(353, 26);
						 value.Add(a); 

						}
						break;

					default:
						goto loop38;
					}
				}

				loop38:
					;

				} finally { DebugExitSubRule(38); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 33);
			LeaveRule("ident_list", 33);
			LeaveRule_ident_list();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:356:1: alloc_expr returns [ExprAlloc value] : ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) ;
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 34);
		TraceIn("alloc_expr", 34);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		List<string> b = default(List<string>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(356, 1);
		try
		{
			// SugarWalker.g:357:2: ( ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:357:4: ^( Expr_Alloc a= type_name b= ident_list (c= expr )? )
			{
			DebugLocation(357, 4);
			DebugLocation(357, 6);
			Match(input,Expr_Alloc,Follow._Expr_Alloc_in_alloc_expr1448); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(357, 18);
			PushFollow(Follow._type_name_in_alloc_expr1452);
			a=type_name();
			PopFollow();

			DebugLocation(357, 30);
			PushFollow(Follow._ident_list_in_alloc_expr1456);
			b=ident_list();
			PopFollow();

			DebugLocation(357, 42);
			// SugarWalker.g:357:42: (c= expr )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if (((LA39_0>=Expr_Access && LA39_0<=Expr_Prefix)||(LA39_0>=Expr_Suffix && LA39_0<=Expr_Tuple)||LA39_0==IDENT||LA39_0==Match_Tuple||LA39_0==NUMBER||LA39_0==STRING||LA39_0==64||LA39_0==67||LA39_0==71||LA39_0==74||LA39_0==78||LA39_0==84||LA39_0==87||LA39_0==91||LA39_0==93||LA39_0==99||LA39_0==104||LA39_0==126||LA39_0==DOUBLE))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:357:43: c= expr
				{
				DebugLocation(357, 44);
				PushFollow(Follow._expr_in_alloc_expr1461);
				c=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(358, 2);

					value = new ExprAlloc(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 34);
			LeaveRule("alloc_expr", 34);
			LeaveRule_alloc_expr();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:363:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 35);
		TraceIn("expr_tuple", 35);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(363, 1);
		try
		{
			// SugarWalker.g:368:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:368:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(368, 4);
			DebugLocation(368, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple1488); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(368, 17);
			// SugarWalker.g:368:17: (a= expr )+
			int cnt40=0;
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if (((LA40_0>=Expr_Access && LA40_0<=Expr_Prefix)||(LA40_0>=Expr_Suffix && LA40_0<=Expr_Tuple)||LA40_0==IDENT||LA40_0==Match_Tuple||LA40_0==NUMBER||LA40_0==STRING||LA40_0==64||LA40_0==67||LA40_0==71||LA40_0==74||LA40_0==78||LA40_0==84||LA40_0==87||LA40_0==91||LA40_0==93||LA40_0==99||LA40_0==104||LA40_0==126||LA40_0==DOUBLE))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:368:18: a= expr
					{
					DebugLocation(368, 19);
					PushFollow(Follow._expr_in_expr_tuple1493);
					a=expr();
					PopFollow();

					DebugLocation(368, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt40 >= 1)
						goto loop40;

					EarlyExitException eee40 = new EarlyExitException( 40, input );
					DebugRecognitionException(eee40);
					throw eee40;
				}
				cnt40++;
			}
			loop40:
				;

			} finally { DebugExitSubRule(40); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 35);
			LeaveRule("expr_tuple", 35);
			LeaveRule_expr_tuple();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:371:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 36);
		TraceIn("match_tuple", 36);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(371, 1);
		try
		{
			// SugarWalker.g:376:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:376:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(376, 4);
			DebugLocation(376, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple1520); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(376, 18);
				// SugarWalker.g:376:18: (a= expr )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					int LA41_0 = input.LA(1);

					if (((LA41_0>=Expr_Access && LA41_0<=Expr_Prefix)||(LA41_0>=Expr_Suffix && LA41_0<=Expr_Tuple)||LA41_0==IDENT||LA41_0==Match_Tuple||LA41_0==NUMBER||LA41_0==STRING||LA41_0==64||LA41_0==67||LA41_0==71||LA41_0==74||LA41_0==78||LA41_0==84||LA41_0==87||LA41_0==91||LA41_0==93||LA41_0==99||LA41_0==104||LA41_0==126||LA41_0==DOUBLE))
					{
						alt41 = 1;
					}


					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:376:19: a= expr
						{
						DebugLocation(376, 20);
						PushFollow(Follow._expr_in_match_tuple1525);
						a=expr();
						PopFollow();

						DebugLocation(376, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 36);
			LeaveRule("match_tuple", 36);
			LeaveRule_match_tuple();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:379:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 37);
		TraceIn("expr_list", 37);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(379, 1);
		try
		{
			// SugarWalker.g:384:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:384:4: (a= expr )+
			{
			DebugLocation(384, 4);
			// SugarWalker.g:384:4: (a= expr )+
			int cnt42=0;
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if (((LA42_0>=Expr_Access && LA42_0<=Expr_Prefix)||(LA42_0>=Expr_Suffix && LA42_0<=Expr_Tuple)||LA42_0==IDENT||LA42_0==Match_Tuple||LA42_0==NUMBER||LA42_0==STRING||LA42_0==64||LA42_0==67||LA42_0==71||LA42_0==74||LA42_0==78||LA42_0==84||LA42_0==87||LA42_0==91||LA42_0==93||LA42_0==99||LA42_0==104||LA42_0==126||LA42_0==DOUBLE))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:384:5: a= expr
					{
					DebugLocation(384, 6);
					PushFollow(Follow._expr_in_expr_list1553);
					a=expr();
					PopFollow();

					DebugLocation(384, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt42 >= 1)
						goto loop42;

					EarlyExitException eee42 = new EarlyExitException( 42, input );
					DebugRecognitionException(eee42);
					throw eee42;
				}
				cnt42++;
			}
			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 37);
			LeaveRule("expr_list", 37);
			LeaveRule_expr_list();
		}
		DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:387:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 38);
		TraceIn("call_expr", 38);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string x = default(string);
		List<Expr> b = default(List<Expr>);


			value = new ExprCall();

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(387, 1);
		try
		{
			// SugarWalker.g:392:2: ( ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:392:4: ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? )
			{
			DebugLocation(392, 4);
			DebugLocation(392, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr1578); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(392, 17);
			PushFollow(Follow._expr_in_call_expr1582);
			a=expr();
			PopFollow();

			DebugLocation(392, 23);
			 value.Expr=a; 
			DebugLocation(392, 42);
			// SugarWalker.g:392:42: ( '<' (x= ident )* '>' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==89))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:392:43: '<' (x= ident )* '>'
				{
				DebugLocation(392, 43);
				Match(input,89,Follow._89_in_call_expr1587); 
				DebugLocation(392, 47);
				// SugarWalker.g:392:47: (x= ident )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==IDENT))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:392:48: x= ident
						{
						DebugLocation(392, 49);
						PushFollow(Follow._ident_in_call_expr1592);
						x=ident();
						PopFollow();

						DebugLocation(392, 56);
						 value.GenericParameter.Add(x); 

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(392, 94);
				Match(input,96,Follow._96_in_call_expr1598); 

				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(392, 100);
			// SugarWalker.g:392:100: (b= expr_list )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if (((LA45_0>=Expr_Access && LA45_0<=Expr_Prefix)||(LA45_0>=Expr_Suffix && LA45_0<=Expr_Tuple)||LA45_0==IDENT||LA45_0==Match_Tuple||LA45_0==NUMBER||LA45_0==STRING||LA45_0==64||LA45_0==67||LA45_0==71||LA45_0==74||LA45_0==78||LA45_0==84||LA45_0==87||LA45_0==91||LA45_0==93||LA45_0==99||LA45_0==104||LA45_0==126||LA45_0==DOUBLE))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:392:101: b= expr_list
				{
				DebugLocation(392, 102);
				PushFollow(Follow._expr_list_in_call_expr1605);
				b=expr_list();
				PopFollow();

				DebugLocation(392, 113);
				 value.Args=b; 

				}
				break;

			}
			} finally { DebugExitSubRule(45); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 38);
			LeaveRule("call_expr", 38);
			LeaveRule_call_expr();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:395:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 39);
		TraceIn("dict_expr", 39);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(395, 1);
		try
		{
			// SugarWalker.g:396:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:396:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(396, 4);
			DebugLocation(396, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr1626); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(396, 17);
			PushFollow(Follow._expr_in_dict_expr1630);
			a=expr();
			PopFollow();

			DebugLocation(396, 23);
			// SugarWalker.g:396:23: (b= expr_list )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if (((LA46_0>=Expr_Access && LA46_0<=Expr_Prefix)||(LA46_0>=Expr_Suffix && LA46_0<=Expr_Tuple)||LA46_0==IDENT||LA46_0==Match_Tuple||LA46_0==NUMBER||LA46_0==STRING||LA46_0==64||LA46_0==67||LA46_0==71||LA46_0==74||LA46_0==78||LA46_0==84||LA46_0==87||LA46_0==91||LA46_0==93||LA46_0==99||LA46_0==104||LA46_0==126||LA46_0==DOUBLE))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:396:24: b= expr_list
				{
				DebugLocation(396, 25);
				PushFollow(Follow._expr_list_in_dict_expr1635);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(397, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 39);
			LeaveRule("dict_expr", 39);
			LeaveRule_dict_expr();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:402:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda (b= func_args )? a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 40);
		TraceIn("lambda_expr", 40);
		ExprLambda value = default(ExprLambda);


		List<ExprAlloc> b = default(List<ExprAlloc>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(402, 1);
		try
		{
			// SugarWalker.g:403:2: ( ^( Expr_Lambda (b= func_args )? a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:403:4: ^( Expr_Lambda (b= func_args )? a= expr )
			{
			DebugLocation(403, 4);
			DebugLocation(403, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr1657); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(403, 18);
			// SugarWalker.g:403:18: (b= func_args )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==Func_Args))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:403:19: b= func_args
				{
				DebugLocation(403, 20);
				PushFollow(Follow._func_args_in_lambda_expr1662);
				b=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(403, 34);
			PushFollow(Follow._expr_in_lambda_expr1668);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(404, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 40);
			LeaveRule("lambda_expr", 40);
			LeaveRule_lambda_expr();
		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:409:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 41);
		TraceIn("new_expr", 41);
		Expr value = default(Expr);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(409, 1);
		try
		{
			// SugarWalker.g:410:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==Expr_New_Type))
			{
				alt49 = 1;
			}
			else if ((LA49_0==Expr_New_Array))
			{
				alt49 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:410:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(410, 4);
				DebugLocation(410, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr1688); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(410, 21);
				PushFollow(Follow._type_name_in_new_expr1692);
				a=type_name();
				PopFollow();

				DebugLocation(410, 33);
				// SugarWalker.g:410:33: (b= expr_list )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if (((LA48_0>=Expr_Access && LA48_0<=Expr_Prefix)||(LA48_0>=Expr_Suffix && LA48_0<=Expr_Tuple)||LA48_0==IDENT||LA48_0==Match_Tuple||LA48_0==NUMBER||LA48_0==STRING||LA48_0==64||LA48_0==67||LA48_0==71||LA48_0==74||LA48_0==78||LA48_0==84||LA48_0==87||LA48_0==91||LA48_0==93||LA48_0==99||LA48_0==104||LA48_0==126||LA48_0==DOUBLE))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:410:33: b= expr_list
					{
					DebugLocation(410, 33);
					PushFollow(Follow._expr_list_in_new_expr1696);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(411, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:414:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(414, 4);
				DebugLocation(414, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr1707); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(414, 22);
				PushFollow(Follow._type_name_in_new_expr1711);
				a=type_name();
				PopFollow();

				DebugLocation(414, 34);
				PushFollow(Follow._expr_list_in_new_expr1715);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(415, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 41);
			LeaveRule("new_expr", 41);
			LeaveRule_new_expr();
		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:420:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 42);
		TraceIn("call_with_expr", 42);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(420, 1);
		try
		{
			// SugarWalker.g:421:2: ( ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:421:4: ^( Expr_Call_With a= expr b= ident (c= expr_list )? )
			{
			DebugLocation(421, 4);
			DebugLocation(421, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr1735); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(421, 22);
			PushFollow(Follow._expr_in_call_with_expr1739);
			a=expr();
			PopFollow();

			DebugLocation(421, 29);
			PushFollow(Follow._ident_in_call_with_expr1743);
			b=ident();
			PopFollow();

			DebugLocation(421, 37);
			// SugarWalker.g:421:37: (c= expr_list )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if (((LA50_0>=Expr_Access && LA50_0<=Expr_Prefix)||(LA50_0>=Expr_Suffix && LA50_0<=Expr_Tuple)||LA50_0==IDENT||LA50_0==Match_Tuple||LA50_0==NUMBER||LA50_0==STRING||LA50_0==64||LA50_0==67||LA50_0==71||LA50_0==74||LA50_0==78||LA50_0==84||LA50_0==87||LA50_0==91||LA50_0==93||LA50_0==99||LA50_0==104||LA50_0==126||LA50_0==DOUBLE))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:421:37: c= expr_list
				{
				DebugLocation(421, 37);
				PushFollow(Follow._expr_list_in_call_with_expr1747);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(50); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(422, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall();
					value.Expr = new ExprConst(b);
					value.Args = Args;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 42);
			LeaveRule("call_with_expr", 42);
			LeaveRule_call_with_expr();
		}
		DebugLocation(436, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:438:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE | STRING ) );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 43);
		TraceIn("expr", 43);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		Expr expr_new = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(438, 1);
		try
		{
			// SugarWalker.g:439:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE | STRING ) )
			int alt51=19;
			try { DebugEnterDecision(51, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt51 = 1;
				}
				break;
			case Expr_Alloc:
				{
				alt51 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt51 = 3;
				}
				break;
			case Expr_Call:
				{
				alt51 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt51 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt51 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt51 = 7;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt51 = 8;
				}
				break;
			case Expr_Infix:
				{
				alt51 = 9;
				}
				break;
			case Expr_Cond:
				{
				alt51 = 10;
				}
				break;
			case Expr_Access:
				{
				alt51 = 11;
				}
				break;
			case Expr_Bin:
				{
				alt51 = 12;
				}
				break;
			case 64:
			case 67:
			case 71:
			case 74:
			case 78:
			case 84:
			case 91:
			case 93:
			case 99:
			case 104:
			case 126:
				{
				alt51 = 13;
				}
				break;
			case 87:
				{
				alt51 = 14;
				}
				break;
			case Expr_Bracket:
				{
				alt51 = 15;
				}
				break;
			case Expr_Suffix:
				{
				alt51 = 16;
				}
				break;
			case Expr_Prefix:
				{
				alt51 = 17;
				}
				break;
			case IDENT:
				{
				alt51 = 18;
				}
				break;
			case NUMBER:
			case STRING:
			case DOUBLE:
				{
				alt51 = 19;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:439:7: tuple= expr_tuple
				{
				DebugLocation(439, 12);
				PushFollow(Follow._expr_tuple_in_expr1772);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(440, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:443:4: alloc= alloc_expr
				{
				DebugLocation(443, 9);
				PushFollow(Follow._alloc_expr_in_expr1782);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(444, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:447:4: match= match_tuple
				{
				DebugLocation(447, 9);
				PushFollow(Follow._match_tuple_in_expr1792);
				match=match_tuple();
				PopFollow();

				DebugLocation(448, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:451:4: call= call_expr
				{
				DebugLocation(451, 8);
				PushFollow(Follow._call_expr_in_expr1802);
				call=call_expr();
				PopFollow();

				DebugLocation(452, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:455:4: call_with= call_with_expr
				{
				DebugLocation(455, 13);
				PushFollow(Follow._call_with_expr_in_expr1812);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(456, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:459:4: dict= dict_expr
				{
				DebugLocation(459, 8);
				PushFollow(Follow._dict_expr_in_expr1822);
				dict=dict_expr();
				PopFollow();

				DebugLocation(460, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:463:4: lambda= lambda_expr
				{
				DebugLocation(463, 10);
				PushFollow(Follow._lambda_expr_in_expr1832);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(464, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:467:4: expr_new= new_expr
				{
				DebugLocation(467, 12);
				PushFollow(Follow._new_expr_in_expr1842);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(468, 2);

						value = expr_new;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:471:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(471, 4);
				DebugLocation(471, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr1851); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(471, 27);
				PushFollow(Follow._ident_in_expr1855);
				ident_text=ident();
				PopFollow();

				DebugLocation(471, 35);
				PushFollow(Follow._expr_in_expr1859);
				a=expr();
				PopFollow();

				DebugLocation(471, 42);
				PushFollow(Follow._expr_in_expr1863);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(472, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:475:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(475, 4);
				DebugLocation(475, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr1873); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(475, 17);
				PushFollow(Follow._expr_in_expr1877);
				a=expr();
				PopFollow();

				DebugLocation(475, 24);
				PushFollow(Follow._expr_in_expr1881);
				b=expr();
				PopFollow();

				DebugLocation(475, 31);
				PushFollow(Follow._expr_in_expr1885);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(476, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:479:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(479, 4);
				DebugLocation(479, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr1895); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(479, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=79 && input.LA(1)<=82)||input.LA(1)==86)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(479, 57);
				PushFollow(Follow._expr_in_expr1921);
				a=expr();
				PopFollow();

				DebugLocation(479, 73);
				PushFollow(Follow._ident_in_expr1925);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(480, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:483:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '%' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr )
				{
				DebugLocation(483, 4);
				DebugLocation(483, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr1935); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(483, 17);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=62 && input.LA(1)<=63)||(input.LA(1)>=65 && input.LA(1)<=66)||input.LA(1)==70||input.LA(1)==72||input.LA(1)==76||input.LA(1)==83||(input.LA(1)>=89 && input.LA(1)<=90)||input.LA(1)==92||input.LA(1)==94||(input.LA(1)>=96 && input.LA(1)<=98)||input.LA(1)==103||input.LA(1)==125||input.LA(1)==127)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(488, 9);
				PushFollow(Follow._expr_in_expr2040);
				a=expr();
				PopFollow();

				DebugLocation(488, 16);
				PushFollow(Follow._expr_in_expr2044);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(489, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:492:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(492, 4);
				DebugLocation(492, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==64||input.LA(1)==67||input.LA(1)==71||input.LA(1)==74||input.LA(1)==78||input.LA(1)==84||input.LA(1)==91||input.LA(1)==93||input.LA(1)==99||input.LA(1)==104||input.LA(1)==126)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(492, 88);
				PushFollow(Follow._expr_in_expr2102);
				a=expr();
				PopFollow();

				DebugLocation(492, 95);
				PushFollow(Follow._expr_in_expr2106);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(493, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:496:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(496, 4);
				DebugLocation(496, 6);
				Match(input,87,Follow._87_in_expr2116); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(496, 12);
				PushFollow(Follow._expr_in_expr2120);
				a=expr();
				PopFollow();

				DebugLocation(496, 19);
				PushFollow(Follow._expr_in_expr2124);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(497, 2);

						System.Diagnostics.Debug.Assert(a is ExprConst);
						value = new ExprAlloc("auto", new List<string> { ((ExprConst)a).Text }, b);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:501:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(501, 4);
				DebugLocation(501, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr2134); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(501, 20);
				PushFollow(Follow._expr_in_expr2138);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(502, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:505:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(505, 4);
				DebugLocation(505, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr2148); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(505, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==73||input.LA(1)==77)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(505, 36);
				PushFollow(Follow._expr_in_expr2162);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(506, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:509:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(509, 4);
				DebugLocation(509, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr2172); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(509, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==61||input.LA(1)==66||input.LA(1)==70||(input.LA(1)>=72 && input.LA(1)<=73)||(input.LA(1)>=76 && input.LA(1)<=77)||input.LA(1)==128)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(509, 72);
				PushFollow(Follow._expr_in_expr2210);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(510, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:513:4: text_ident= ident
				{
				DebugLocation(513, 15);
				PushFollow(Follow._ident_in_expr2223);
				text_ident=ident();
				PopFollow();

				DebugLocation(514, 2);

						value = new ExprConst(text_ident);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:517:4: text= ( NUMBER | DOUBLE | STRING )
				{
				DebugLocation(517, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(518, 5);

				        value = new ExprConst(text.Text);
				    

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 43);
			LeaveRule("expr", 43);
			LeaveRule_expr();
		}
		DebugLocation(521, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0x180100410001448UL,0x800000UL});
		public static readonly BitSet _func_def_in_node134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Alloc_in_global_alloc248 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc253 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _type_name_in_global_alloc259 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_global_alloc263 = new BitSet(new ulong[]{0x10A0086FFF808UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_global_alloc268 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _87_in_global_alloc280 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc285 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_global_alloc291 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_global_alloc295 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item382 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item386 = new BitSet(new ulong[]{0x1080080000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item393 = new BitSet(new ulong[]{0x1080080000008UL});
		public static readonly BitSet _attribute_item_in_attribute421 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def442 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def446 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _global_block_in_namespace_def450 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def475 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_import_def480 = new BitSet(new ulong[]{0x1000000000008UL});
		public static readonly BitSet _Enum_in_enum_def501 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def506 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def512 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_enum_def516 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def536 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_class_def541 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def547 = new BitSet(new ulong[]{0x268000008UL});
		public static readonly BitSet _generic_parameter_in_class_def552 = new BitSet(new ulong[]{0x248000008UL});
		public static readonly BitSet _func_args_in_class_def559 = new BitSet(new ulong[]{0x240000008UL});
		public static readonly BitSet _ident_list_in_class_def566 = new BitSet(new ulong[]{0x40000008UL});
		public static readonly BitSet _global_block_in_class_def573 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_IDENT_in_type_name601 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_type_name605 = new BitSet(new ulong[]{0x8UL,0x1002000044UL});
		public static readonly BitSet _89_in_type_name615 = new BitSet(new ulong[]{0x400000000000000UL,0x100000000UL});
		public static readonly BitSet _type_name_in_type_name627 = new BitSet(new ulong[]{0x400000000000000UL,0x100000000UL});
		public static readonly BitSet _96_in_type_name637 = new BitSet(new ulong[]{0x8UL,0x1000000044UL});
		public static readonly BitSet _70_in_type_name648 = new BitSet(new ulong[]{0x8UL,0x1000000044UL});
		public static readonly BitSet _100_in_type_name657 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_type_name659 = new BitSet(new ulong[]{0x8UL,0x1000000044UL});
		public static readonly BitSet _66_in_type_name668 = new BitSet(new ulong[]{0x8UL,0x1000000044UL});
		public static readonly BitSet _Func_Args_in_func_args698 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_alloc_in_func_args703 = new BitSet(new ulong[]{0x10A0086FFF808UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter730 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter735 = new BitSet(new ulong[]{0x80000008UL});
		public static readonly BitSet _Func_Def_in_func_def761 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_func_def766 = new BitSet(new ulong[]{0x400000080000000UL,0x0UL,0x1UL});
		public static readonly BitSet _type_name_in_func_def773 = new BitSet(new ulong[]{0x80000000UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_func_def780 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_func_def786 = new BitSet(new ulong[]{0x30A00AEFFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _generic_parameter_in_func_def791 = new BitSet(new ulong[]{0x30A008EFFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _func_args_in_func_def799 = new BitSet(new ulong[]{0x30A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _stmt_block_in_func_def810 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def820 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block848 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block853 = new BitSet(new ulong[]{0x3FD0A0087FFF808UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using993 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using999 = new BitSet(new ulong[]{0x80000008UL,0x10000000000000UL});
		public static readonly BitSet _116_in_stmt_using1014 = new BitSet(new ulong[]{0x80000008UL,0x10000000000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1035 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1039 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1043 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1082 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1086 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1090 = new BitSet(new ulong[]{0x2000000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1095 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1117 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1121 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1125 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1145 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1149 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_stmt_for1153 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_stmt_for1157 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1161 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_ForEach_in_stmt_for1171 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1175 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_stmt_for1179 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1183 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1203 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1207 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_stmt_try1211 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1215 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Return_in_stmt_return1235 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1240 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_From_in_linq_item1262 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_linq_item1266 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_linq_item1270 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Let_in_linq_item1280 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_linq_item1284 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_linq_item1288 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Where_in_linq_item1298 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_linq_item1302 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Linq_Prefix_in_linq_prefix1327 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _linq_item_in_linq_prefix1332 = new BitSet(new ulong[]{0x16000000008UL});
		public static readonly BitSet _Stmt_Linq_in_stmt_linq1353 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq1357 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq1361 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident1387 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_ident1392 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident1396 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _Ident_List_in_ident_list1421 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list1426 = new BitSet(new ulong[]{0x80000008UL});
		public static readonly BitSet _Expr_Alloc_in_alloc_expr1448 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1452 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1456 = new BitSet(new ulong[]{0x10A0086FFF808UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_alloc_expr1461 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple1488 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple1493 = new BitSet(new ulong[]{0x10A0086FFF808UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple1520 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple1525 = new BitSet(new ulong[]{0x10A0086FFF808UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr_list1553 = new BitSet(new ulong[]{0x10A0086FFF802UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _Expr_Call_in_call_expr1578 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr1582 = new BitSet(new ulong[]{0x10A0086FFF808UL,0x400001082A904489UL,0x2UL});
		public static readonly BitSet _89_in_call_expr1587 = new BitSet(new ulong[]{0x80000000UL,0x100000000UL});
		public static readonly BitSet _ident_in_call_expr1592 = new BitSet(new ulong[]{0x80000000UL,0x100000000UL});
		public static readonly BitSet _96_in_call_expr1598 = new BitSet(new ulong[]{0x10A0086FFF808UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_list_in_call_expr1605 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr1626 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr1630 = new BitSet(new ulong[]{0x10A0086FFF808UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_list_in_dict_expr1635 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr1657 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr1662 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_lambda_expr1668 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr1688 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1692 = new BitSet(new ulong[]{0x10A0086FFF808UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_list_in_new_expr1696 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr1707 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1711 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_list_in_new_expr1715 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr1735 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr1739 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_call_with_expr1743 = new BitSet(new ulong[]{0x10A0086FFF808UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_list_in_call_with_expr1747 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr1772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr1782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr1792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr1802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr1812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr1822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr1842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr1851 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr1855 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr1859 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr1863 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr1873 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1877 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr1881 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr1885 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr1895 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1899 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr1921 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_expr1925 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr1935 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1939 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr2040 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr2044 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr2056 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2102 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr2106 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _87_in_expr2116 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2120 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr2124 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr2134 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr2138 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr2148 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2152 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr2162 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr2172 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2176 = new BitSet(new ulong[]{0x10A0086FFF800UL,0x4000010828904489UL,0x2UL});
		public static readonly BitSet _expr_in_expr2210 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr2223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr2233 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
