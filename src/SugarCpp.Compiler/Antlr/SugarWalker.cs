//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-05-02 20:59:17

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "'\\'", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'in'", "'namespace'", "'new'", "'return'", "'try'", "'typedef'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc=12;
	public const int Expr_Bin=13;
	public const int Expr_Bracket=14;
	public const int Expr_Call=15;
	public const int Expr_Call_With=16;
	public const int Expr_Cond=17;
	public const int Expr_Dict=18;
	public const int Expr_Infix=19;
	public const int Expr_Lambda=20;
	public const int Expr_New_Array=21;
	public const int Expr_New_Type=22;
	public const int Expr_Prefix=23;
	public const int Expr_Return=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int Generic_Patameters=29;
	public const int Global_Block=30;
	public const int IDENT=31;
	public const int INDENT=32;
	public const int Ident_List=33;
	public const int Import=34;
	public const int Left_Bracket=35;
	public const int LineComment=36;
	public const int Match_Tuple=37;
	public const int NEWLINE=38;
	public const int NUMBER=39;
	public const int Namespace=40;
	public const int Right_Bracket=41;
	public const int Root=42;
	public const int SP=43;
	public const int STRING=44;
	public const int Stmt_Block=45;
	public const int Stmt_For=46;
	public const int Stmt_ForEach=47;
	public const int Stmt_If=48;
	public const int Stmt_Try=49;
	public const int Stmt_Typedef=50;
	public const int Stmt_Using=51;
	public const int Stmt_While=52;
	public const int Type_IDENT=53;
	public const int Type_Ref=54;
	public const int Type_Tuple=55;
	public const int DOUBLE=120;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : ^( Root a= global_block ) ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		GlobalBlock a = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:24:2: ( ^( Root a= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:24:4: ^( Root a= global_block )
			{
			DebugLocation(24, 4);
			DebugLocation(24, 6);
			Match(input,Root,Follow._Root_in_root76); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(24, 12);
			PushFollow(Follow._global_block_in_root80);
			a=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(25, 2);

					value = new Root(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarWalker.g:30:1: global_block returns [GlobalBlock value] : ^( Global_Block (a= node )* ) ;
	[GrammarRule("global_block")]
	private GlobalBlock global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		GlobalBlock value = default(GlobalBlock);


		AttrAstNode a = default(AttrAstNode);


			value = new GlobalBlock();

		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:35:2: ( ^( Global_Block (a= node )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:35:4: ^( Global_Block (a= node )* )
			{
			DebugLocation(35, 4);
			DebugLocation(35, 6);
			Match(input,Global_Block,Follow._Global_Block_in_global_block105); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(35, 19);
				// SugarWalker.g:35:19: (a= node )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==Class||LA1_0==Enum||LA1_0==Expr_Alloc||LA1_0==Func_Def||LA1_0==Import||LA1_0==Namespace||(LA1_0>=Stmt_Typedef && LA1_0<=Stmt_Using)||LA1_0==82))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:35:20: a= node
						{
						DebugLocation(35, 21);
						PushFollow(Follow._node_in_global_block110);
						a=node();
						PopFollow();

						DebugLocation(35, 27);
						 value.List.Add(a); 

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(36, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return value;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:38:1: node returns [AttrAstNode value] : (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def );
	[GrammarRule("node")]
	private AttrAstNode node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AttrAstNode value = default(AttrAstNode);


		FuncDef a = default(FuncDef);
		Import b = default(Import);
		Enum c = default(Enum);
		Class d = default(Class);
		GlobalAlloc e = default(GlobalAlloc);
		GlobalUsing f = default(GlobalUsing);
		GlobalTypeDef g = default(GlobalTypeDef);
		Namespace h = default(Namespace);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(38, 1);
		try
		{
			// SugarWalker.g:39:2: (a= func_def |b= import_def |c= enum_def |d= class_def |e= global_alloc |f= global_using |g= global_typedef |h= namespace_def )
			int alt2=8;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case Func_Def:
				{
				alt2 = 1;
				}
				break;
			case Import:
				{
				alt2 = 2;
				}
				break;
			case Enum:
				{
				alt2 = 3;
				}
				break;
			case Class:
				{
				alt2 = 4;
				}
				break;
			case Expr_Alloc:
			case 82:
				{
				alt2 = 5;
				}
				break;
			case Stmt_Using:
				{
				alt2 = 6;
				}
				break;
			case Stmt_Typedef:
				{
				alt2 = 7;
				}
				break;
			case Namespace:
				{
				alt2 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:39:4: a= func_def
				{
				DebugLocation(39, 6);
				PushFollow(Follow._func_def_in_node134);
				a=func_def();
				PopFollow();

				DebugLocation(39, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:40:4: b= import_def
				{
				DebugLocation(40, 6);
				PushFollow(Follow._import_def_in_node145);
				b=import_def();
				PopFollow();

				DebugLocation(40, 19);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:41:4: c= enum_def
				{
				DebugLocation(41, 6);
				PushFollow(Follow._enum_def_in_node156);
				c=enum_def();
				PopFollow();

				DebugLocation(41, 17);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:42:4: d= class_def
				{
				DebugLocation(42, 6);
				PushFollow(Follow._class_def_in_node167);
				d=class_def();
				PopFollow();

				DebugLocation(42, 18);
				 value = d; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:43:4: e= global_alloc
				{
				DebugLocation(43, 6);
				PushFollow(Follow._global_alloc_in_node178);
				e=global_alloc();
				PopFollow();

				DebugLocation(43, 21);
				 value = e; 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:44:4: f= global_using
				{
				DebugLocation(44, 6);
				PushFollow(Follow._global_using_in_node189);
				f=global_using();
				PopFollow();

				DebugLocation(44, 21);
				 value = f; 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:45:4: g= global_typedef
				{
				DebugLocation(45, 6);
				PushFollow(Follow._global_typedef_in_node200);
				g=global_typedef();
				PopFollow();

				DebugLocation(45, 23);
				 value = g; 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:46:4: h= namespace_def
				{
				DebugLocation(46, 6);
				PushFollow(Follow._namespace_def_in_node211);
				h=namespace_def();
				PopFollow();

				DebugLocation(46, 22);
				 value = h; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarWalker.g:49:1: global_using returns [GlobalUsing value] : a= stmt_using ;
	[GrammarRule("global_using")]
	private GlobalUsing global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 4);
		TraceIn("global_using", 4);
		GlobalUsing value = default(GlobalUsing);


		StmtUsing a = default(StmtUsing);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(49, 1);
		try
		{
			// SugarWalker.g:50:2: (a= stmt_using )
			DebugEnterAlt(1);
			// SugarWalker.g:50:4: a= stmt_using
			{
			DebugLocation(50, 5);
			PushFollow(Follow._stmt_using_in_global_using229);
			a=stmt_using();
			PopFollow();

			DebugLocation(51, 2);

					value = new GlobalUsing(a.List);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_using", 4);
			LeaveRule("global_using", 4);
			LeaveRule_global_using();
		}
		DebugLocation(54, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return value;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarWalker.g:56:1: global_alloc returns [GlobalAlloc value] : ( ^( Expr_Alloc (attr= attribute )? a= type_name b= ident_list (c= expr )? ) | ^( ':=' (attr= attribute )? a= ident c= expr ) );
	[GrammarRule("global_alloc")]
	private GlobalAlloc global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 5);
		TraceIn("global_alloc", 5);
		GlobalAlloc value = default(GlobalAlloc);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(56, 1);
		try
		{
			// SugarWalker.g:57:2: ( ^( Expr_Alloc (attr= attribute )? a= type_name b= ident_list (c= expr )? ) | ^( ':=' (attr= attribute )? a= ident c= expr ) )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0==Expr_Alloc))
			{
				alt6 = 1;
			}
			else if ((LA6_0==82))
			{
				alt6 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:57:4: ^( Expr_Alloc (attr= attribute )? a= type_name b= ident_list (c= expr )? )
				{
				DebugLocation(57, 4);
				DebugLocation(57, 6);
				Match(input,Expr_Alloc,Follow._Expr_Alloc_in_global_alloc248); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(57, 17);
				// SugarWalker.g:57:17: (attr= attribute )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==Attribute))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:57:18: attr= attribute
					{
					DebugLocation(57, 22);
					PushFollow(Follow._attribute_in_global_alloc253);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(57, 36);
				PushFollow(Follow._type_name_in_global_alloc259);
				a=type_name();
				PopFollow();

				DebugLocation(57, 48);
				PushFollow(Follow._ident_list_in_global_alloc263);
				b=ident_list();
				PopFollow();

				DebugLocation(57, 60);
				// SugarWalker.g:57:60: (c= expr )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>=Expr_Access && LA4_0<=Expr_Prefix)||(LA4_0>=Expr_Suffix && LA4_0<=Expr_Tuple)||LA4_0==IDENT||LA4_0==Match_Tuple||LA4_0==NUMBER||LA4_0==STRING||LA4_0==59||LA4_0==62||LA4_0==66||LA4_0==69||LA4_0==73||LA4_0==79||LA4_0==82||LA4_0==86||LA4_0==88||LA4_0==94||LA4_0==99||LA4_0==117||LA4_0==DOUBLE))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:57:61: c= expr
					{
					DebugLocation(57, 62);
					PushFollow(Follow._expr_in_global_alloc268);
					c=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(58, 2);

						value = new GlobalAlloc(a, b, c, attr);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:61:4: ^( ':=' (attr= attribute )? a= ident c= expr )
				{
				DebugLocation(61, 4);
				DebugLocation(61, 6);
				Match(input,82,Follow._82_in_global_alloc280); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(61, 11);
				// SugarWalker.g:61:11: (attr= attribute )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==Attribute))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:61:12: attr= attribute
					{
					DebugLocation(61, 16);
					PushFollow(Follow._attribute_in_global_alloc285);
					attr=attribute();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(61, 30);
				PushFollow(Follow._ident_in_global_alloc291);
				a=ident();
				PopFollow();

				DebugLocation(61, 38);
				PushFollow(Follow._expr_in_global_alloc295);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(62, 2);

						value = new GlobalAlloc("auto", new List<string> { a }, c, attr);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_alloc", 5);
			LeaveRule("global_alloc", 5);
			LeaveRule_global_alloc();
		}
		DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return value;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarWalker.g:67:1: global_typedef returns [GlobalTypeDef value] : a= stmt_typedef ;
	[GrammarRule("global_typedef")]
	private GlobalTypeDef global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 6);
		TraceIn("global_typedef", 6);
		GlobalTypeDef value = default(GlobalTypeDef);


		StmtTypeDef a = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(67, 1);
		try
		{
			// SugarWalker.g:68:2: (a= stmt_typedef )
			DebugEnterAlt(1);
			// SugarWalker.g:68:4: a= stmt_typedef
			{
			DebugLocation(68, 5);
			PushFollow(Follow._stmt_typedef_in_global_typedef316);
			a=stmt_typedef();
			PopFollow();

			DebugLocation(69, 2);

					value = new GlobalTypeDef(a.Type, a.Name);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("global_typedef", 6);
			LeaveRule("global_typedef", 6);
			LeaveRule_global_typedef();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return value;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarWalker.g:74:1: attribute_args returns [string value] : (a= ( NUMBER ) |a= STRING |b= ident );
	[GrammarRule("attribute_args")]
	private string attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 7);
		TraceIn("attribute_args", 7);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(74, 1);
		try
		{
			// SugarWalker.g:75:2: (a= ( NUMBER ) |a= STRING |b= ident )
			int alt7=3;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt7 = 1;
				}
				break;
			case STRING:
				{
				alt7 = 2;
				}
				break;
			case IDENT:
				{
				alt7 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:75:4: a= ( NUMBER )
				{
				DebugLocation(75, 5);
				// SugarWalker.g:75:6: ( NUMBER )
				DebugEnterAlt(1);
				// SugarWalker.g:75:7: NUMBER
				{
				DebugLocation(75, 7);
				Match(input,NUMBER,Follow._NUMBER_in_attribute_args337); 

				}

				DebugLocation(76, 2);

						value = a.Text;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:79:4: a= STRING
				{
				DebugLocation(79, 5);
				a=(CommonTree)Match(input,STRING,Follow._STRING_in_attribute_args348); 
				DebugLocation(80, 2);

						value = a.Text.Substring(1, a.Text.Length - 2);
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:83:4: b= ident
				{
				DebugLocation(83, 5);
				PushFollow(Follow._ident_in_attribute_args358);
				b=ident();
				PopFollow();

				DebugLocation(84, 2);

						value = b;
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_args", 7);
			LeaveRule("attribute_args", 7);
			LeaveRule_attribute_args();
		}
		DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return value;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarWalker.g:89:1: attribute_item returns [Attr value] : ^( Attribute a= ident (b= attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private Attr attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 8);
		TraceIn("attribute_item", 8);
		Attr value = default(Attr);


		string a = default(string);
		string b = default(string);


			value = new Attr();

		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(89, 1);
		try
		{
			// SugarWalker.g:94:2: ( ^( Attribute a= ident (b= attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:94:4: ^( Attribute a= ident (b= attribute_args )* )
			{
			DebugLocation(94, 4);
			DebugLocation(94, 6);
			Match(input,Attribute,Follow._Attribute_in_attribute_item382); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(94, 17);
			PushFollow(Follow._ident_in_attribute_item386);
			a=ident();
			PopFollow();

			DebugLocation(94, 24);
			 value.Name = a; 
			DebugLocation(94, 45);
			// SugarWalker.g:94:45: (b= attribute_args )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==IDENT||LA8_0==NUMBER||LA8_0==STRING))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:94:46: b= attribute_args
					{
					DebugLocation(94, 47);
					PushFollow(Follow._attribute_args_in_attribute_item393);
					b=attribute_args();
					PopFollow();

					DebugLocation(94, 63);
					 value.Args.Add(b) ; 

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute_item", 8);
			LeaveRule("attribute_item", 8);
			LeaveRule_attribute_item();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return value;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarWalker.g:97:1: attribute returns [List<Attr> value] : (a= attribute_item )+ ;
	[GrammarRule("attribute")]
	private List<Attr> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		List<Attr> value = default(List<Attr>);


		Attr a = default(Attr);


			value = new List<Attr>();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(97, 1);
		try
		{
			// SugarWalker.g:102:2: ( (a= attribute_item )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:102:4: (a= attribute_item )+
			{
			DebugLocation(102, 4);
			// SugarWalker.g:102:4: (a= attribute_item )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==Attribute))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:102:5: a= attribute_item
					{
					DebugLocation(102, 6);
					PushFollow(Follow._attribute_item_in_attribute421);
					a=attribute_item();
					PopFollow();

					DebugLocation(102, 22);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
		}
		DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarWalker.g:105:1: namespace_def returns [Namespace value] : ^( Namespace a= ident b= global_block ) ;
	[GrammarRule("namespace_def")]
	private Namespace namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 10);
		TraceIn("namespace_def", 10);
		Namespace value = default(Namespace);


		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(105, 1);
		try
		{
			// SugarWalker.g:106:2: ( ^( Namespace a= ident b= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:106:4: ^( Namespace a= ident b= global_block )
			{
			DebugLocation(106, 4);
			DebugLocation(106, 6);
			Match(input,Namespace,Follow._Namespace_in_namespace_def442); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(106, 17);
			PushFollow(Follow._ident_in_namespace_def446);
			a=ident();
			PopFollow();

			DebugLocation(106, 25);
			PushFollow(Follow._global_block_in_namespace_def450);
			b=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(107, 2);

					value = new Namespace(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespace_def", 10);
			LeaveRule("namespace_def", 10);
			LeaveRule_namespace_def();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return value;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarWalker.g:112:1: import_def returns [Import value] : ^( Import (a= STRING )* ) ;
	[GrammarRule("import_def")]
	private Import import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 11);
		TraceIn("import_def", 11);
		Import value = default(Import);


		CommonTree a = default(CommonTree);


			value = new Import();

		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(112, 1);
		try
		{
			// SugarWalker.g:117:2: ( ^( Import (a= STRING )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:117:4: ^( Import (a= STRING )* )
			{
			DebugLocation(117, 4);
			DebugLocation(117, 6);
			Match(input,Import,Follow._Import_in_import_def475); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(117, 13);
				// SugarWalker.g:117:13: (a= STRING )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if ((LA10_0==STRING))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:117:14: a= STRING
						{
						DebugLocation(117, 15);
						a=(CommonTree)Match(input,STRING,Follow._STRING_in_import_def480); 
						DebugLocation(117, 23);
						 value.NameList.Add(a.Text); 

						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("import_def", 11);
			LeaveRule("import_def", 11);
			LeaveRule_import_def();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return value;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarWalker.g:120:1: enum_def returns [Enum value] : ^( Enum (attr= attribute )? a= ident b= ident_list ) ;
	[GrammarRule("enum_def")]
	private Enum enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 12);
		TraceIn("enum_def", 12);
		Enum value = default(Enum);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		List<string> b = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(120, 1);
		try
		{
			// SugarWalker.g:121:2: ( ^( Enum (attr= attribute )? a= ident b= ident_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:121:4: ^( Enum (attr= attribute )? a= ident b= ident_list )
			{
			DebugLocation(121, 4);
			DebugLocation(121, 6);
			Match(input,Enum,Follow._Enum_in_enum_def501); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(121, 11);
			// SugarWalker.g:121:11: (attr= attribute )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==Attribute))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:121:12: attr= attribute
				{
				DebugLocation(121, 16);
				PushFollow(Follow._attribute_in_enum_def506);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(121, 30);
			PushFollow(Follow._ident_in_enum_def512);
			a=ident();
			PopFollow();

			DebugLocation(121, 38);
			PushFollow(Follow._ident_list_in_enum_def516);
			b=ident_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(122, 2);

					value = new Enum(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enum_def", 12);
			LeaveRule("enum_def", 12);
			LeaveRule_enum_def();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return value;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarWalker.g:127:1: class_def returns [Class value] : ^( Class (attr= attribute )? a= ident b= global_block ) ;
	[GrammarRule("class_def")]
	private Class class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		Class value = default(Class);


		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		GlobalBlock b = default(GlobalBlock);

		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(127, 1);
		try
		{
			// SugarWalker.g:128:2: ( ^( Class (attr= attribute )? a= ident b= global_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:128:4: ^( Class (attr= attribute )? a= ident b= global_block )
			{
			DebugLocation(128, 4);
			DebugLocation(128, 6);
			Match(input,Class,Follow._Class_in_class_def536); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(128, 12);
			// SugarWalker.g:128:12: (attr= attribute )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==Attribute))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:128:13: attr= attribute
				{
				DebugLocation(128, 17);
				PushFollow(Follow._attribute_in_class_def541);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(128, 31);
			PushFollow(Follow._ident_in_class_def547);
			a=ident();
			PopFollow();

			DebugLocation(128, 39);
			PushFollow(Follow._global_block_in_class_def551);
			b=global_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(129, 2);

					value = new Class(a, b, attr);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return value;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:134:1: type_name returns [string value] : ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) ;
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		string value = default(string);


		string a = default(string);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(134, 1);
		try
		{
			// SugarWalker.g:139:2: ( ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:139:4: ^( Type_IDENT a= ident ( '<' (b= type_name )* '>' )? ( '*' | '[' ']' | '&' )* )
			{
			DebugLocation(139, 4);
			DebugLocation(139, 7);
			Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name577); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(139, 19);
			PushFollow(Follow._ident_in_type_name581);
			a=ident();
			PopFollow();

			DebugLocation(139, 26);
			 value+=a; 
			DebugLocation(140, 5);
			// SugarWalker.g:140:5: ( '<' (b= type_name )* '>' )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==84))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:140:7: '<' (b= type_name )* '>'
				{
				DebugLocation(140, 7);
				Match(input,84,Follow._84_in_type_name591); 
				DebugLocation(140, 11);
				 value+="<"; bool isFirst = true; 
				DebugLocation(141, 6);
				// SugarWalker.g:141:6: (b= type_name )*
				try { DebugEnterSubRule(13);
				while (true)
				{
					int alt13=2;
					try { DebugEnterDecision(13, false);
					int LA13_0 = input.LA(1);

					if ((LA13_0==Type_IDENT))
					{
						alt13 = 1;
					}


					} finally { DebugExitDecision(13); }
					switch ( alt13 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:141:7: b= type_name
						{
						DebugLocation(141, 8);
						PushFollow(Follow._type_name_in_type_name603);
						b=type_name();
						PopFollow();

						DebugLocation(142, 3);

									if (!isFirst) value+=", ";
									isFirst = false;
									value+=b;
								

						}
						break;

					default:
						goto loop13;
					}
				}

				loop13:
					;

				} finally { DebugExitSubRule(13); }

				DebugLocation(147, 3);
				Match(input,91,Follow._91_in_type_name613); 
				DebugLocation(147, 7);
				 value+=">"; 

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(148, 4);
			// SugarWalker.g:148:4: ( '*' | '[' ']' | '&' )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=4;
				try { DebugEnterDecision(15, false);
				switch (input.LA(1))
				{
				case 65:
					{
					alt15 = 1;
					}
					break;
				case 95:
					{
					alt15 = 2;
					}
					break;
				case 61:
					{
					alt15 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:148:6: '*'
					{
					DebugLocation(148, 6);
					Match(input,65,Follow._65_in_type_name624); 
					DebugLocation(148, 10);
					 value+="*"; 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarWalker.g:149:6: '[' ']'
					{
					DebugLocation(149, 6);
					Match(input,95,Follow._95_in_type_name633); 
					DebugLocation(149, 10);
					Match(input,97,Follow._97_in_type_name635); 
					DebugLocation(149, 14);
					 value+="[]"; 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarWalker.g:150:6: '&'
					{
					DebugLocation(150, 6);
					Match(input,61,Follow._61_in_type_name644); 
					DebugLocation(150, 10);
					 value+="&"; 

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:154:1: func_args returns [List<Stmt> value] : ^( Func_Args (a= stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private List<Stmt> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 15);
		TraceIn("func_args", 15);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(154, 1);
		try
		{
			// SugarWalker.g:159:2: ( ^( Func_Args (a= stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:159:4: ^( Func_Args (a= stmt_alloc )* )
			{
			DebugLocation(159, 4);
			DebugLocation(159, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args674); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(159, 16);
				// SugarWalker.g:159:16: (a= stmt_alloc )*
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if (((LA16_0>=Expr_Access && LA16_0<=Expr_Prefix)||(LA16_0>=Expr_Suffix && LA16_0<=Expr_Tuple)||LA16_0==IDENT||LA16_0==Match_Tuple||LA16_0==NUMBER||LA16_0==STRING||LA16_0==59||LA16_0==62||LA16_0==66||LA16_0==69||LA16_0==73||LA16_0==79||LA16_0==82||LA16_0==86||LA16_0==88||LA16_0==94||LA16_0==99||LA16_0==117||LA16_0==DOUBLE))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch ( alt16 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:159:17: a= stmt_alloc
						{
						DebugLocation(159, 18);
						PushFollow(Follow._stmt_alloc_in_func_args679);
						a=stmt_alloc();
						PopFollow();

						DebugLocation(160, 2);

								var b = (ExprAlloc)a;
								if (b.Type == "auto")
								{
									b.Type = "decltype";
								}
								value.Add(b);
							

						}
						break;

					default:
						goto loop16;
					}
				}

				loop16:
					;

				} finally { DebugExitSubRule(16); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 15);
			LeaveRule("func_args", 15);
			LeaveRule_func_args();
		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarWalker.g:170:1: generic_parameter returns [List<string> value] : ^( Generic_Patameters (a= ident )* ) ;
	[GrammarRule("generic_parameter")]
	private List<string> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 16);
		TraceIn("generic_parameter", 16);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(170, 1);
		try
		{
			// SugarWalker.g:175:2: ( ^( Generic_Patameters (a= ident )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:175:4: ^( Generic_Patameters (a= ident )* )
			{
			DebugLocation(175, 4);
			DebugLocation(175, 6);
			Match(input,Generic_Patameters,Follow._Generic_Patameters_in_generic_parameter706); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(175, 25);
				// SugarWalker.g:175:25: (a= ident )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==IDENT))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:175:26: a= ident
						{
						DebugLocation(175, 27);
						PushFollow(Follow._ident_in_generic_parameter711);
						a=ident();
						PopFollow();

						DebugLocation(175, 34);
						 value.Add(a); 

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("generic_parameter", 16);
			LeaveRule("generic_parameter", 16);
			LeaveRule_generic_parameter();
		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return value;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:178:1: func_def returns [FuncDef value] : ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 17);
		TraceIn("func_def", 17);
		FuncDef value = default(FuncDef);


		CommonTree deconstructor = default(CommonTree);
		List<Attr> attr = default(List<Attr>);
		string a = default(string);
		string b = default(string);
		List<string> x = default(List<string>);
		List<Stmt> args = default(List<Stmt>);
		StmtBlock e = default(StmtBlock);
		Expr f = default(Expr);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(178, 1);
		try
		{
			// SugarWalker.g:183:2: ( ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) ) )
			DebugEnterAlt(1);
			// SugarWalker.g:183:4: ^( Func_Def (attr= attribute )? (a= type_name )? (deconstructor= '~' )? b= ident (x= generic_parameter )? (args= func_args )? (e= stmt_block |f= expr ) )
			{
			DebugLocation(183, 4);
			DebugLocation(183, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def737); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(183, 15);
			// SugarWalker.g:183:15: (attr= attribute )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==Attribute))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:183:16: attr= attribute
				{
				DebugLocation(183, 20);
				PushFollow(Follow._attribute_in_func_def742);
				attr=attribute();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(183, 33);
			// SugarWalker.g:183:33: (a= type_name )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==Type_IDENT))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:183:34: a= type_name
				{
				DebugLocation(183, 35);
				PushFollow(Follow._type_name_in_func_def749);
				a=type_name();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(183, 48);
			// SugarWalker.g:183:48: (deconstructor= '~' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==119))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:183:49: deconstructor= '~'
				{
				DebugLocation(183, 62);
				deconstructor=(CommonTree)Match(input,119,Follow._119_in_func_def756); 

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(183, 70);
			PushFollow(Follow._ident_in_func_def762);
			b=ident();
			PopFollow();

			DebugLocation(183, 77);
			// SugarWalker.g:183:77: (x= generic_parameter )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==Generic_Patameters))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:183:78: x= generic_parameter
				{
				DebugLocation(183, 79);
				PushFollow(Follow._generic_parameter_in_func_def767);
				x=generic_parameter();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(183, 101);
			// SugarWalker.g:183:101: (args= func_args )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==Func_Args))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:183:102: args= func_args
				{
				DebugLocation(183, 106);
				PushFollow(Follow._func_args_in_func_def775);
				args=func_args();
				PopFollow();

				DebugLocation(183, 117);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(184, 2);
			// SugarWalker.g:184:2: (e= stmt_block |f= expr )
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==Stmt_Block))
			{
				alt23 = 1;
			}
			else if (((LA23_0>=Expr_Access && LA23_0<=Expr_Prefix)||(LA23_0>=Expr_Suffix && LA23_0<=Expr_Tuple)||LA23_0==IDENT||LA23_0==Match_Tuple||LA23_0==NUMBER||LA23_0==STRING||LA23_0==59||LA23_0==62||LA23_0==66||LA23_0==69||LA23_0==73||LA23_0==79||LA23_0==82||LA23_0==86||LA23_0==88||LA23_0==94||LA23_0==99||LA23_0==117||LA23_0==DOUBLE))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:184:4: e= stmt_block
				{
				DebugLocation(184, 5);
				PushFollow(Follow._stmt_block_in_func_def786);
				e=stmt_block();
				PopFollow();

				DebugLocation(185, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = e;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:199:4: f= expr
				{
				DebugLocation(199, 5);
				PushFollow(Follow._expr_in_func_def796);
				f=expr();
				PopFollow();

				DebugLocation(200, 2);

						if (attr != null) value.Attribute = attr;
						value.Type = a;
						value.Name = b;
						if (deconstructor != null) 
						{
							value.Name = "~" + value.Name;
						}
						StmtBlock block = new StmtBlock();
						if (a == "void" || a == null)
						{
							block.StmtList.Add(new StmtExpr(f));
						}
						else
						{
							block.StmtList.Add(new StmtExpr(new ExprReturn(f)));
						}
						if (x != null)
						{
							value.GenericParameter = x;
						}
						value.Body = block;
					

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 17);
			LeaveRule("func_def", 17);
			LeaveRule_func_def();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:226:1: stmt_block returns [StmtBlock value] : ^( Stmt_Block (a= stmt )* ) ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 18);
		TraceIn("stmt_block", 18);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(226, 4);
		try
		{
			// SugarWalker.g:231:2: ( ^( Stmt_Block (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:231:4: ^( Stmt_Block (a= stmt )* )
			{
			DebugLocation(231, 4);
			DebugLocation(231, 6);
			Match(input,Stmt_Block,Follow._Stmt_Block_in_stmt_block824); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(231, 17);
				// SugarWalker.g:231:17: (a= stmt )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if (((LA24_0>=Expr_Access && LA24_0<=Expr_Tuple)||LA24_0==IDENT||LA24_0==Match_Tuple||LA24_0==NUMBER||LA24_0==STRING||(LA24_0>=Stmt_For && LA24_0<=Stmt_While)||LA24_0==59||LA24_0==62||LA24_0==66||LA24_0==69||LA24_0==73||LA24_0==79||LA24_0==82||LA24_0==86||LA24_0==88||LA24_0==94||LA24_0==99||LA24_0==117||LA24_0==DOUBLE))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:231:18: a= stmt
						{
						DebugLocation(231, 19);
						PushFollow(Follow._stmt_in_stmt_block829);
						a=stmt();
						PopFollow();

						DebugLocation(231, 25);
						 value.StmtList.Add(a); 

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 18);
			LeaveRule("stmt_block", 18);
			LeaveRule_stmt_block();
		}
		DebugLocation(232, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:234:1: stmt returns [Stmt value] : (a= stmt_expr |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try );
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 19);
		TraceIn("stmt", 19);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(234, 1);
		try
		{
			// SugarWalker.g:235:2: (a= stmt_expr |a= stmt_if |a= stmt_while |a= stmt_for |a= stmt_try )
			int alt25=5;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case Expr_Access:
			case Expr_Alloc:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Return:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case Stmt_Typedef:
			case Stmt_Using:
			case 59:
			case 62:
			case 66:
			case 69:
			case 73:
			case 79:
			case 82:
			case 86:
			case 88:
			case 94:
			case 99:
			case 117:
			case DOUBLE:
				{
				alt25 = 1;
				}
				break;
			case Stmt_If:
				{
				alt25 = 2;
				}
				break;
			case Stmt_While:
				{
				alt25 = 3;
				}
				break;
			case Stmt_For:
			case Stmt_ForEach:
				{
				alt25 = 4;
				}
				break;
			case Stmt_Try:
				{
				alt25 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:235:4: a= stmt_expr
				{
				DebugLocation(235, 5);
				PushFollow(Follow._stmt_expr_in_stmt855);
				a=stmt_expr();
				PopFollow();

				DebugLocation(235, 16);
				 value = new StmtExpr(a); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:236:4: a= stmt_if
				{
				DebugLocation(236, 5);
				PushFollow(Follow._stmt_if_in_stmt864);
				a=stmt_if();
				PopFollow();

				DebugLocation(236, 14);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:237:4: a= stmt_while
				{
				DebugLocation(237, 5);
				PushFollow(Follow._stmt_while_in_stmt873);
				a=stmt_while();
				PopFollow();

				DebugLocation(237, 17);
				 value = a; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:238:4: a= stmt_for
				{
				DebugLocation(238, 5);
				PushFollow(Follow._stmt_for_in_stmt882);
				a=stmt_for();
				PopFollow();

				DebugLocation(238, 15);
				 value = a; 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:239:4: a= stmt_try
				{
				DebugLocation(239, 5);
				PushFollow(Follow._stmt_try_in_stmt891);
				a=stmt_try();
				PopFollow();

				DebugLocation(239, 15);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 19);
			LeaveRule("stmt", 19);
			LeaveRule_stmt();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:242:1: stmt_expr returns [Stmt value] : (a= stmt_return |b= stmt_using |c= expr |d= stmt_typedef );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 20);
		TraceIn("stmt_expr", 20);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);
		StmtUsing b = default(StmtUsing);
		Expr c = default(Expr);
		StmtTypeDef d = default(StmtTypeDef);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(242, 1);
		try
		{
			// SugarWalker.g:243:2: (a= stmt_return |b= stmt_using |c= expr |d= stmt_typedef )
			int alt26=4;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case Expr_Return:
				{
				alt26 = 1;
				}
				break;
			case Stmt_Using:
				{
				alt26 = 2;
				}
				break;
			case Expr_Access:
			case Expr_Alloc:
			case Expr_Bin:
			case Expr_Bracket:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case Match_Tuple:
			case NUMBER:
			case STRING:
			case 59:
			case 62:
			case 66:
			case 69:
			case 73:
			case 79:
			case 82:
			case 86:
			case 88:
			case 94:
			case 99:
			case 117:
			case DOUBLE:
				{
				alt26 = 3;
				}
				break;
			case Stmt_Typedef:
				{
				alt26 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:243:4: a= stmt_return
				{
				DebugLocation(243, 5);
				PushFollow(Follow._stmt_return_in_stmt_expr910);
				a=stmt_return();
				PopFollow();

				DebugLocation(243, 18);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:244:4: b= stmt_using
				{
				DebugLocation(244, 5);
				PushFollow(Follow._stmt_using_in_stmt_expr919);
				b=stmt_using();
				PopFollow();

				DebugLocation(244, 17);
				 value = b; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:245:4: c= expr
				{
				DebugLocation(245, 5);
				PushFollow(Follow._expr_in_stmt_expr928);
				c=expr();
				PopFollow();

				DebugLocation(245, 11);
				 value = c; 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:246:4: d= stmt_typedef
				{
				DebugLocation(246, 5);
				PushFollow(Follow._stmt_typedef_in_stmt_expr937);
				d=stmt_typedef();
				PopFollow();

				DebugLocation(246, 19);
				 value = d; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 20);
			LeaveRule("stmt_expr", 20);
			LeaveRule_stmt_expr();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarWalker.g:249:1: stmt_using returns [StmtUsing value] : ^( Stmt_Using (a= ident |b= 'namespace' )* ) ;
	[GrammarRule("stmt_using")]
	private StmtUsing stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 21);
		TraceIn("stmt_using", 21);
		StmtUsing value = default(StmtUsing);


		CommonTree b = default(CommonTree);
		string a = default(string);


			value = new StmtUsing();

		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(249, 1);
		try
		{
			// SugarWalker.g:254:2: ( ^( Stmt_Using (a= ident |b= 'namespace' )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:254:4: ^( Stmt_Using (a= ident |b= 'namespace' )* )
			{
			DebugLocation(254, 4);
			DebugLocation(254, 6);
			Match(input,Stmt_Using,Follow._Stmt_Using_in_stmt_using960); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(254, 17);
				// SugarWalker.g:254:17: (a= ident |b= 'namespace' )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=3;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==IDENT))
					{
						alt27 = 1;
					}
					else if ((LA27_0==109))
					{
						alt27 = 2;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:254:19: a= ident
						{
						DebugLocation(254, 20);
						PushFollow(Follow._ident_in_stmt_using966);
						a=ident();
						PopFollow();

						DebugLocation(254, 27);
						 value.List.Add(a); 

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarWalker.g:255:10: b= 'namespace'
						{
						DebugLocation(255, 11);
						b=(CommonTree)Match(input,109,Follow._109_in_stmt_using981); 
						DebugLocation(255, 24);
						 value.List.Add("namespace"); 

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_using", 21);
			LeaveRule("stmt_using", 21);
			LeaveRule_stmt_using();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return value;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarWalker.g:258:1: stmt_typedef returns [StmtTypeDef value] : ^( Stmt_Typedef a= type_name b= ident ) ;
	[GrammarRule("stmt_typedef")]
	private StmtTypeDef stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 22);
		TraceIn("stmt_typedef", 22);
		StmtTypeDef value = default(StmtTypeDef);


		string a = default(string);
		string b = default(string);

		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(258, 1);
		try
		{
			// SugarWalker.g:259:2: ( ^( Stmt_Typedef a= type_name b= ident ) )
			DebugEnterAlt(1);
			// SugarWalker.g:259:4: ^( Stmt_Typedef a= type_name b= ident )
			{
			DebugLocation(259, 4);
			DebugLocation(259, 6);
			Match(input,Stmt_Typedef,Follow._Stmt_Typedef_in_stmt_typedef1002); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(259, 20);
			PushFollow(Follow._type_name_in_stmt_typedef1006);
			a=type_name();
			PopFollow();

			DebugLocation(259, 32);
			PushFollow(Follow._ident_in_stmt_typedef1010);
			b=ident();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(260, 2);

					value = new StmtTypeDef(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_typedef", 22);
			LeaveRule("stmt_typedef", 22);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return value;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:265:1: stmt_alloc returns [Stmt value] : a= expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 23);
		TraceIn("stmt_alloc", 23);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(265, 1);
		try
		{
			// SugarWalker.g:266:2: (a= expr )
			DebugEnterAlt(1);
			// SugarWalker.g:266:4: a= expr
			{
			DebugLocation(266, 5);
			PushFollow(Follow._expr_in_stmt_alloc1031);
			a=expr();
			PopFollow();

			DebugLocation(266, 11);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 23);
			LeaveRule("stmt_alloc", 23);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarWalker.g:269:1: stmt_if returns [Stmt value] : ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private Stmt stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 24);
		TraceIn("stmt_if", 24);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(269, 1);
		try
		{
			// SugarWalker.g:270:2: ( ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:270:4: ^( Stmt_If a= expr b= stmt_block (c= stmt_block )? )
			{
			DebugLocation(270, 4);
			DebugLocation(270, 6);
			Match(input,Stmt_If,Follow._Stmt_If_in_stmt_if1049); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(270, 15);
			PushFollow(Follow._expr_in_stmt_if1053);
			a=expr();
			PopFollow();

			DebugLocation(270, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1057);
			b=stmt_block();
			PopFollow();

			DebugLocation(270, 34);
			// SugarWalker.g:270:34: (c= stmt_block )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==Stmt_Block))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:270:35: c= stmt_block
				{
				DebugLocation(270, 36);
				PushFollow(Follow._stmt_block_in_stmt_if1062);
				c=stmt_block();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(28); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(271, 2);

					value = new StmtIf(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_if", 24);
			LeaveRule("stmt_if", 24);
			LeaveRule_stmt_if();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return value;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarWalker.g:276:1: stmt_while returns [Stmt value] : ^( Stmt_While a= expr b= stmt_block ) ;
	[GrammarRule("stmt_while")]
	private Stmt stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 25);
		TraceIn("stmt_while", 25);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		StmtBlock b = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(276, 1);
		try
		{
			// SugarWalker.g:277:2: ( ^( Stmt_While a= expr b= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:277:4: ^( Stmt_While a= expr b= stmt_block )
			{
			DebugLocation(277, 4);
			DebugLocation(277, 6);
			Match(input,Stmt_While,Follow._Stmt_While_in_stmt_while1084); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(277, 18);
			PushFollow(Follow._expr_in_stmt_while1088);
			a=expr();
			PopFollow();

			DebugLocation(277, 25);
			PushFollow(Follow._stmt_block_in_stmt_while1092);
			b=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(278, 2);

					value = new StmtWhile(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_while", 25);
			LeaveRule("stmt_while", 25);
			LeaveRule_stmt_while();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return value;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarWalker.g:283:1: stmt_for returns [Stmt value] : ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) );
	[GrammarRule("stmt_for")]
	private Stmt stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 26);
		TraceIn("stmt_for", 26);
		Stmt value = default(Stmt);


		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		StmtBlock d = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(283, 1);
		try
		{
			// SugarWalker.g:284:2: ( ^( Stmt_For a= expr b= expr c= expr d= stmt_block ) | ^( Stmt_ForEach a= expr b= expr d= stmt_block ) )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==Stmt_For))
			{
				alt29 = 1;
			}
			else if ((LA29_0==Stmt_ForEach))
			{
				alt29 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:284:4: ^( Stmt_For a= expr b= expr c= expr d= stmt_block )
				{
				DebugLocation(284, 4);
				DebugLocation(284, 6);
				Match(input,Stmt_For,Follow._Stmt_For_in_stmt_for1112); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(284, 16);
				PushFollow(Follow._expr_in_stmt_for1116);
				a=expr();
				PopFollow();

				DebugLocation(284, 23);
				PushFollow(Follow._expr_in_stmt_for1120);
				b=expr();
				PopFollow();

				DebugLocation(284, 30);
				PushFollow(Follow._expr_in_stmt_for1124);
				c=expr();
				PopFollow();

				DebugLocation(284, 37);
				PushFollow(Follow._stmt_block_in_stmt_for1128);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(285, 2);

						
						value = new StmtFor(a, b, c, d);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:289:4: ^( Stmt_ForEach a= expr b= expr d= stmt_block )
				{
				DebugLocation(289, 4);
				DebugLocation(289, 6);
				Match(input,Stmt_ForEach,Follow._Stmt_ForEach_in_stmt_for1138); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(289, 20);
				PushFollow(Follow._expr_in_stmt_for1142);
				a=expr();
				PopFollow();

				DebugLocation(289, 27);
				PushFollow(Follow._expr_in_stmt_for1146);
				b=expr();
				PopFollow();

				DebugLocation(289, 34);
				PushFollow(Follow._stmt_block_in_stmt_for1150);
				d=stmt_block();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(290, 2);

						value = new StmtForEach(a, b, d);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_for", 26);
			LeaveRule("stmt_for", 26);
			LeaveRule_stmt_for();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return value;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarWalker.g:295:1: stmt_try returns [Stmt value] : ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) ;
	[GrammarRule("stmt_try")]
	private Stmt stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 27);
		TraceIn("stmt_try", 27);
		Stmt value = default(Stmt);


		StmtBlock a = default(StmtBlock);
		Expr b = default(Expr);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(295, 1);
		try
		{
			// SugarWalker.g:296:2: ( ^( Stmt_Try a= stmt_block b= expr c= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:296:4: ^( Stmt_Try a= stmt_block b= expr c= stmt_block )
			{
			DebugLocation(296, 4);
			DebugLocation(296, 6);
			Match(input,Stmt_Try,Follow._Stmt_Try_in_stmt_try1170); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(296, 16);
			PushFollow(Follow._stmt_block_in_stmt_try1174);
			a=stmt_block();
			PopFollow();

			DebugLocation(296, 29);
			PushFollow(Follow._expr_in_stmt_try1178);
			b=expr();
			PopFollow();

			DebugLocation(296, 36);
			PushFollow(Follow._stmt_block_in_stmt_try1182);
			c=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(297, 2);

					value = new StmtTry(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_try", 27);
			LeaveRule("stmt_try", 27);
			LeaveRule_stmt_try();
		}
		DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return value;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:302:1: stmt_return returns [Stmt value] : ^( Expr_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 28);
		TraceIn("stmt_return", 28);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(302, 1);
		try
		{
			// SugarWalker.g:303:2: ( ^( Expr_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:303:4: ^( Expr_Return (a= expr )? )
			{
			DebugLocation(303, 4);
			DebugLocation(303, 6);
			Match(input,Expr_Return,Follow._Expr_Return_in_stmt_return1202); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(303, 18);
				// SugarWalker.g:303:18: (a= expr )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if (((LA30_0>=Expr_Access && LA30_0<=Expr_Prefix)||(LA30_0>=Expr_Suffix && LA30_0<=Expr_Tuple)||LA30_0==IDENT||LA30_0==Match_Tuple||LA30_0==NUMBER||LA30_0==STRING||LA30_0==59||LA30_0==62||LA30_0==66||LA30_0==69||LA30_0==73||LA30_0==79||LA30_0==82||LA30_0==86||LA30_0==88||LA30_0==94||LA30_0==99||LA30_0==117||LA30_0==DOUBLE))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:303:19: a= expr
					{
					DebugLocation(303, 20);
					PushFollow(Follow._expr_in_stmt_return1207);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(30); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(304, 2);

					value = new ExprReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 28);
			LeaveRule("stmt_return", 28);
			LeaveRule_stmt_return();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:309:1: ident returns [string value] : a= IDENT ( '::' a= IDENT )* ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 29);
		TraceIn("ident", 29);
		string value = default(string);


		CommonTree a = default(CommonTree);


			value = "";

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(309, 1);
		try
		{
			// SugarWalker.g:314:2: (a= IDENT ( '::' a= IDENT )* )
			DebugEnterAlt(1);
			// SugarWalker.g:314:4: a= IDENT ( '::' a= IDENT )*
			{
			DebugLocation(314, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1235); 
			DebugLocation(314, 12);
			 value = a.Text; 
			DebugLocation(314, 33);
			// SugarWalker.g:314:33: ( '::' a= IDENT )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==81))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:314:34: '::' a= IDENT
					{
					DebugLocation(314, 34);
					Match(input,81,Follow._81_in_ident1240); 
					DebugLocation(314, 40);
					a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident1244); 
					DebugLocation(314, 47);
					 value += "::" + a.Text; 

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 29);
			LeaveRule("ident", 29);
			LeaveRule_ident();
		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:317:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )+ ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 30);
		TraceIn("ident_list", 30);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(317, 1);
		try
		{
			// SugarWalker.g:322:2: ( ^( Ident_List (a= ident )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:322:4: ^( Ident_List (a= ident )+ )
			{
			DebugLocation(322, 4);
			DebugLocation(322, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list1269); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(322, 17);
			// SugarWalker.g:322:17: (a= ident )+
			int cnt32=0;
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==IDENT))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:322:18: a= ident
					{
					DebugLocation(322, 19);
					PushFollow(Follow._ident_in_ident_list1274);
					a=ident();
					PopFollow();

					DebugLocation(322, 26);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt32 >= 1)
						goto loop32;

					EarlyExitException eee32 = new EarlyExitException( 32, input );
					DebugRecognitionException(eee32);
					throw eee32;
				}
				cnt32++;
			}
			loop32:
				;

			} finally { DebugExitSubRule(32); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 30);
			LeaveRule("ident_list", 30);
			LeaveRule_ident_list();
		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:325:1: alloc_expr returns [ExprAlloc value] : ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) ;
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 31);
		TraceIn("alloc_expr", 31);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		List<string> b = default(List<string>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(325, 1);
		try
		{
			// SugarWalker.g:326:2: ( ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:326:4: ^( Expr_Alloc a= type_name b= ident_list (c= expr )? )
			{
			DebugLocation(326, 4);
			DebugLocation(326, 6);
			Match(input,Expr_Alloc,Follow._Expr_Alloc_in_alloc_expr1296); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(326, 18);
			PushFollow(Follow._type_name_in_alloc_expr1300);
			a=type_name();
			PopFollow();

			DebugLocation(326, 30);
			PushFollow(Follow._ident_list_in_alloc_expr1304);
			b=ident_list();
			PopFollow();

			DebugLocation(326, 42);
			// SugarWalker.g:326:42: (c= expr )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if (((LA33_0>=Expr_Access && LA33_0<=Expr_Prefix)||(LA33_0>=Expr_Suffix && LA33_0<=Expr_Tuple)||LA33_0==IDENT||LA33_0==Match_Tuple||LA33_0==NUMBER||LA33_0==STRING||LA33_0==59||LA33_0==62||LA33_0==66||LA33_0==69||LA33_0==73||LA33_0==79||LA33_0==82||LA33_0==86||LA33_0==88||LA33_0==94||LA33_0==99||LA33_0==117||LA33_0==DOUBLE))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:326:43: c= expr
				{
				DebugLocation(326, 44);
				PushFollow(Follow._expr_in_alloc_expr1309);
				c=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(33); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(327, 2);

					value = new ExprAlloc(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 31);
			LeaveRule("alloc_expr", 31);
			LeaveRule_alloc_expr();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:332:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 32);
		TraceIn("expr_tuple", 32);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(332, 1);
		try
		{
			// SugarWalker.g:337:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:337:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(337, 4);
			DebugLocation(337, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple1336); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(337, 17);
			// SugarWalker.g:337:17: (a= expr )+
			int cnt34=0;
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if (((LA34_0>=Expr_Access && LA34_0<=Expr_Prefix)||(LA34_0>=Expr_Suffix && LA34_0<=Expr_Tuple)||LA34_0==IDENT||LA34_0==Match_Tuple||LA34_0==NUMBER||LA34_0==STRING||LA34_0==59||LA34_0==62||LA34_0==66||LA34_0==69||LA34_0==73||LA34_0==79||LA34_0==82||LA34_0==86||LA34_0==88||LA34_0==94||LA34_0==99||LA34_0==117||LA34_0==DOUBLE))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:337:18: a= expr
					{
					DebugLocation(337, 19);
					PushFollow(Follow._expr_in_expr_tuple1341);
					a=expr();
					PopFollow();

					DebugLocation(337, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt34 >= 1)
						goto loop34;

					EarlyExitException eee34 = new EarlyExitException( 34, input );
					DebugRecognitionException(eee34);
					throw eee34;
				}
				cnt34++;
			}
			loop34:
				;

			} finally { DebugExitSubRule(34); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 32);
			LeaveRule("expr_tuple", 32);
			LeaveRule_expr_tuple();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:340:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= expr )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 33);
		TraceIn("match_tuple", 33);
		MatchTuple value = default(MatchTuple);


		Expr a = default(Expr);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(340, 1);
		try
		{
			// SugarWalker.g:345:2: ( ^( Match_Tuple (a= expr )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:345:4: ^( Match_Tuple (a= expr )* )
			{
			DebugLocation(345, 4);
			DebugLocation(345, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple1368); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(345, 18);
				// SugarWalker.g:345:18: (a= expr )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if (((LA35_0>=Expr_Access && LA35_0<=Expr_Prefix)||(LA35_0>=Expr_Suffix && LA35_0<=Expr_Tuple)||LA35_0==IDENT||LA35_0==Match_Tuple||LA35_0==NUMBER||LA35_0==STRING||LA35_0==59||LA35_0==62||LA35_0==66||LA35_0==69||LA35_0==73||LA35_0==79||LA35_0==82||LA35_0==86||LA35_0==88||LA35_0==94||LA35_0==99||LA35_0==117||LA35_0==DOUBLE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:345:19: a= expr
						{
						DebugLocation(345, 20);
						PushFollow(Follow._expr_in_match_tuple1373);
						a=expr();
						PopFollow();

						DebugLocation(345, 26);
						 value.ExprList.Add(a); 

						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 33);
			LeaveRule("match_tuple", 33);
			LeaveRule_match_tuple();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:348:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 34);
		TraceIn("expr_list", 34);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(348, 1);
		try
		{
			// SugarWalker.g:353:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:353:4: (a= expr )+
			{
			DebugLocation(353, 4);
			// SugarWalker.g:353:4: (a= expr )+
			int cnt36=0;
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if (((LA36_0>=Expr_Access && LA36_0<=Expr_Prefix)||(LA36_0>=Expr_Suffix && LA36_0<=Expr_Tuple)||LA36_0==IDENT||LA36_0==Match_Tuple||LA36_0==NUMBER||LA36_0==STRING||LA36_0==59||LA36_0==62||LA36_0==66||LA36_0==69||LA36_0==73||LA36_0==79||LA36_0==82||LA36_0==86||LA36_0==88||LA36_0==94||LA36_0==99||LA36_0==117||LA36_0==DOUBLE))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:353:5: a= expr
					{
					DebugLocation(353, 6);
					PushFollow(Follow._expr_in_expr_list1401);
					a=expr();
					PopFollow();

					DebugLocation(353, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt36 >= 1)
						goto loop36;

					EarlyExitException eee36 = new EarlyExitException( 36, input );
					DebugRecognitionException(eee36);
					throw eee36;
				}
				cnt36++;
			}
			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 34);
			LeaveRule("expr_list", 34);
			LeaveRule_expr_list();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:356:1: call_expr returns [ExprCall value] : ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? ) ;
	[GrammarRule("call_expr")]
	private ExprCall call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 35);
		TraceIn("call_expr", 35);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string x = default(string);
		List<Expr> b = default(List<Expr>);


			value = new ExprCall();

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(356, 1);
		try
		{
			// SugarWalker.g:361:2: ( ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:361:4: ^( Expr_Call a= expr ( '<' (x= ident )* '>' )? (b= expr_list )? )
			{
			DebugLocation(361, 4);
			DebugLocation(361, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr1426); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(361, 17);
			PushFollow(Follow._expr_in_call_expr1430);
			a=expr();
			PopFollow();

			DebugLocation(361, 23);
			 value.Expr=a; 
			DebugLocation(361, 42);
			// SugarWalker.g:361:42: ( '<' (x= ident )* '>' )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==84))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:361:43: '<' (x= ident )* '>'
				{
				DebugLocation(361, 43);
				Match(input,84,Follow._84_in_call_expr1435); 
				DebugLocation(361, 47);
				// SugarWalker.g:361:47: (x= ident )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==IDENT))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:361:48: x= ident
						{
						DebugLocation(361, 49);
						PushFollow(Follow._ident_in_call_expr1440);
						x=ident();
						PopFollow();

						DebugLocation(361, 56);
						 value.GenericParameter.Add(x); 

						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(361, 94);
				Match(input,91,Follow._91_in_call_expr1446); 

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(361, 100);
			// SugarWalker.g:361:100: (b= expr_list )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if (((LA39_0>=Expr_Access && LA39_0<=Expr_Prefix)||(LA39_0>=Expr_Suffix && LA39_0<=Expr_Tuple)||LA39_0==IDENT||LA39_0==Match_Tuple||LA39_0==NUMBER||LA39_0==STRING||LA39_0==59||LA39_0==62||LA39_0==66||LA39_0==69||LA39_0==73||LA39_0==79||LA39_0==82||LA39_0==86||LA39_0==88||LA39_0==94||LA39_0==99||LA39_0==117||LA39_0==DOUBLE))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:361:101: b= expr_list
				{
				DebugLocation(361, 102);
				PushFollow(Follow._expr_list_in_call_expr1453);
				b=expr_list();
				PopFollow();

				DebugLocation(361, 113);
				 value.Args=b; 

				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 35);
			LeaveRule("call_expr", 35);
			LeaveRule_call_expr();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:364:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr (b= expr_list )? ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 36);
		TraceIn("dict_expr", 36);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(364, 1);
		try
		{
			// SugarWalker.g:365:2: ( ^( Expr_Dict a= expr (b= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:365:4: ^( Expr_Dict a= expr (b= expr_list )? )
			{
			DebugLocation(365, 4);
			DebugLocation(365, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr1474); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(365, 17);
			PushFollow(Follow._expr_in_dict_expr1478);
			a=expr();
			PopFollow();

			DebugLocation(365, 23);
			// SugarWalker.g:365:23: (b= expr_list )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if (((LA40_0>=Expr_Access && LA40_0<=Expr_Prefix)||(LA40_0>=Expr_Suffix && LA40_0<=Expr_Tuple)||LA40_0==IDENT||LA40_0==Match_Tuple||LA40_0==NUMBER||LA40_0==STRING||LA40_0==59||LA40_0==62||LA40_0==66||LA40_0==69||LA40_0==73||LA40_0==79||LA40_0==82||LA40_0==86||LA40_0==88||LA40_0==94||LA40_0==99||LA40_0==117||LA40_0==DOUBLE))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:365:24: b= expr_list
				{
				DebugLocation(365, 25);
				PushFollow(Follow._expr_list_in_dict_expr1483);
				b=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(40); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(366, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 36);
			LeaveRule("dict_expr", 36);
			LeaveRule_dict_expr();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:371:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda (b= func_args )? a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 37);
		TraceIn("lambda_expr", 37);
		ExprLambda value = default(ExprLambda);


		List<Stmt> b = default(List<Stmt>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(371, 1);
		try
		{
			// SugarWalker.g:372:2: ( ^( Expr_Lambda (b= func_args )? a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:372:4: ^( Expr_Lambda (b= func_args )? a= expr )
			{
			DebugLocation(372, 4);
			DebugLocation(372, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr1505); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(372, 18);
			// SugarWalker.g:372:18: (b= func_args )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==Func_Args))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:372:19: b= func_args
				{
				DebugLocation(372, 20);
				PushFollow(Follow._func_args_in_lambda_expr1510);
				b=func_args();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(372, 34);
			PushFollow(Follow._expr_in_lambda_expr1516);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(373, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 37);
			LeaveRule("lambda_expr", 37);
			LeaveRule_lambda_expr();
		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:378:1: new_expr returns [Expr value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) );
	[GrammarRule("new_expr")]
	private Expr new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 38);
		TraceIn("new_expr", 38);
		Expr value = default(Expr);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(378, 1);
		try
		{
			// SugarWalker.g:379:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name b= expr_list ) )
			int alt43=2;
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==Expr_New_Type))
			{
				alt43 = 1;
			}
			else if ((LA43_0==Expr_New_Array))
			{
				alt43 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:379:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(379, 4);
				DebugLocation(379, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr1536); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(379, 21);
				PushFollow(Follow._type_name_in_new_expr1540);
				a=type_name();
				PopFollow();

				DebugLocation(379, 33);
				// SugarWalker.g:379:33: (b= expr_list )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if (((LA42_0>=Expr_Access && LA42_0<=Expr_Prefix)||(LA42_0>=Expr_Suffix && LA42_0<=Expr_Tuple)||LA42_0==IDENT||LA42_0==Match_Tuple||LA42_0==NUMBER||LA42_0==STRING||LA42_0==59||LA42_0==62||LA42_0==66||LA42_0==69||LA42_0==73||LA42_0==79||LA42_0==82||LA42_0==86||LA42_0==88||LA42_0==94||LA42_0==99||LA42_0==117||LA42_0==DOUBLE))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:379:33: b= expr_list
					{
					DebugLocation(379, 33);
					PushFollow(Follow._expr_list_in_new_expr1544);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(42); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(380, 2);

						value = new ExprNewType(a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:383:4: ^( Expr_New_Array a= type_name b= expr_list )
				{
				DebugLocation(383, 4);
				DebugLocation(383, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr1555); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(383, 22);
				PushFollow(Follow._type_name_in_new_expr1559);
				a=type_name();
				PopFollow();

				DebugLocation(383, 34);
				PushFollow(Follow._expr_list_in_new_expr1563);
				b=expr_list();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(384, 2);

						value = new ExprNewArray(a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 38);
			LeaveRule("new_expr", 38);
			LeaveRule_new_expr();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:389:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 39);
		TraceIn("call_with_expr", 39);
		ExprCall value = default(ExprCall);


		Expr a = default(Expr);
		string b = default(string);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(389, 1);
		try
		{
			// SugarWalker.g:390:2: ( ^( Expr_Call_With a= expr b= ident (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:390:4: ^( Expr_Call_With a= expr b= ident (c= expr_list )? )
			{
			DebugLocation(390, 4);
			DebugLocation(390, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr1583); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(390, 22);
			PushFollow(Follow._expr_in_call_with_expr1587);
			a=expr();
			PopFollow();

			DebugLocation(390, 29);
			PushFollow(Follow._ident_in_call_with_expr1591);
			b=ident();
			PopFollow();

			DebugLocation(390, 37);
			// SugarWalker.g:390:37: (c= expr_list )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if (((LA44_0>=Expr_Access && LA44_0<=Expr_Prefix)||(LA44_0>=Expr_Suffix && LA44_0<=Expr_Tuple)||LA44_0==IDENT||LA44_0==Match_Tuple||LA44_0==NUMBER||LA44_0==STRING||LA44_0==59||LA44_0==62||LA44_0==66||LA44_0==69||LA44_0==73||LA44_0==79||LA44_0==82||LA44_0==86||LA44_0==88||LA44_0==94||LA44_0==99||LA44_0==117||LA44_0==DOUBLE))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:390:37: c= expr_list
				{
				DebugLocation(390, 37);
				PushFollow(Follow._expr_list_in_call_with_expr1595);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(44); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(391, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall();
					value.Expr = new ExprConst(b);
					value.Args = Args;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 39);
			LeaveRule("call_with_expr", 39);
			LeaveRule_call_with_expr();
		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:407:1: expr returns [Expr value] : (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE | STRING ) );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 40);
		TraceIn("expr", 40);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		ExprAlloc alloc = default(ExprAlloc);
		MatchTuple match = default(MatchTuple);
		ExprCall call = default(ExprCall);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		Expr expr_new = default(Expr);
		string ident_text = default(string);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);
		string text_ident = default(string);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(407, 1);
		try
		{
			// SugarWalker.g:408:5: (tuple= expr_tuple |alloc= alloc_expr |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix ident_text= ident a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' a= expr b= expr ) | ^( Expr_Bracket a= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text_ident= ident |text= ( NUMBER | DOUBLE | STRING ) )
			int alt45=19;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt45 = 1;
				}
				break;
			case Expr_Alloc:
				{
				alt45 = 2;
				}
				break;
			case Match_Tuple:
				{
				alt45 = 3;
				}
				break;
			case Expr_Call:
				{
				alt45 = 4;
				}
				break;
			case Expr_Call_With:
				{
				alt45 = 5;
				}
				break;
			case Expr_Dict:
				{
				alt45 = 6;
				}
				break;
			case Expr_Lambda:
				{
				alt45 = 7;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt45 = 8;
				}
				break;
			case Expr_Infix:
				{
				alt45 = 9;
				}
				break;
			case Expr_Cond:
				{
				alt45 = 10;
				}
				break;
			case Expr_Access:
				{
				alt45 = 11;
				}
				break;
			case Expr_Bin:
				{
				alt45 = 12;
				}
				break;
			case 59:
			case 62:
			case 66:
			case 69:
			case 73:
			case 79:
			case 86:
			case 88:
			case 94:
			case 99:
			case 117:
				{
				alt45 = 13;
				}
				break;
			case 82:
				{
				alt45 = 14;
				}
				break;
			case Expr_Bracket:
				{
				alt45 = 15;
				}
				break;
			case Expr_Suffix:
				{
				alt45 = 16;
				}
				break;
			case Expr_Prefix:
				{
				alt45 = 17;
				}
				break;
			case IDENT:
				{
				alt45 = 18;
				}
				break;
			case NUMBER:
			case STRING:
			case DOUBLE:
				{
				alt45 = 19;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:408:7: tuple= expr_tuple
				{
				DebugLocation(408, 12);
				PushFollow(Follow._expr_tuple_in_expr1620);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(409, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:412:4: alloc= alloc_expr
				{
				DebugLocation(412, 9);
				PushFollow(Follow._alloc_expr_in_expr1630);
				alloc=alloc_expr();
				PopFollow();

				DebugLocation(413, 2);

						value = alloc;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:416:4: match= match_tuple
				{
				DebugLocation(416, 9);
				PushFollow(Follow._match_tuple_in_expr1640);
				match=match_tuple();
				PopFollow();

				DebugLocation(417, 2);

						value = match;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:420:4: call= call_expr
				{
				DebugLocation(420, 8);
				PushFollow(Follow._call_expr_in_expr1650);
				call=call_expr();
				PopFollow();

				DebugLocation(421, 2);

						value = call;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:424:4: call_with= call_with_expr
				{
				DebugLocation(424, 13);
				PushFollow(Follow._call_with_expr_in_expr1660);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(425, 2);

						value = call_with;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:428:4: dict= dict_expr
				{
				DebugLocation(428, 8);
				PushFollow(Follow._dict_expr_in_expr1670);
				dict=dict_expr();
				PopFollow();

				DebugLocation(429, 2);

						value = dict;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:432:4: lambda= lambda_expr
				{
				DebugLocation(432, 10);
				PushFollow(Follow._lambda_expr_in_expr1680);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(433, 2);

						value = lambda;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:436:4: expr_new= new_expr
				{
				DebugLocation(436, 12);
				PushFollow(Follow._new_expr_in_expr1690);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(437, 2);

						value = expr_new;
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:440:4: ^( Expr_Infix ident_text= ident a= expr b= expr )
				{
				DebugLocation(440, 4);
				DebugLocation(440, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr1699); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(440, 27);
				PushFollow(Follow._ident_in_expr1703);
				ident_text=ident();
				PopFollow();

				DebugLocation(440, 35);
				PushFollow(Follow._expr_in_expr1707);
				a=expr();
				PopFollow();

				DebugLocation(440, 42);
				PushFollow(Follow._expr_in_expr1711);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(441, 2);

						value = new ExprInfix(ident_text, a, b);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:444:4: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(444, 4);
				DebugLocation(444, 6);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr1721); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(444, 17);
				PushFollow(Follow._expr_in_expr1725);
				a=expr();
				PopFollow();

				DebugLocation(444, 24);
				PushFollow(Follow._expr_in_expr1729);
				b=expr();
				PopFollow();

				DebugLocation(444, 31);
				PushFollow(Follow._expr_in_expr1733);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(445, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:448:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr ident_text= ident )
				{
				DebugLocation(448, 4);
				DebugLocation(448, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr1743); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(448, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=74 && input.LA(1)<=77)||input.LA(1)==81)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(448, 57);
				PushFollow(Follow._expr_in_expr1769);
				a=expr();
				PopFollow();

				DebugLocation(448, 73);
				PushFollow(Follow._ident_in_expr1773);
				ident_text=ident();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(449, 2);

						value = new ExprAccess(a, op.Text, ident_text);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:452:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr )
				{
				DebugLocation(452, 4);
				DebugLocation(452, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr1783); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(452, 17);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==57||(input.LA(1)>=60 && input.LA(1)<=61)||input.LA(1)==65||input.LA(1)==67||input.LA(1)==71||input.LA(1)==78||(input.LA(1)>=84 && input.LA(1)<=85)||input.LA(1)==87||input.LA(1)==89||(input.LA(1)>=91 && input.LA(1)<=93)||input.LA(1)==98||input.LA(1)==116||input.LA(1)==118)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(457, 9);
				PushFollow(Follow._expr_in_expr1884);
				a=expr();
				PopFollow();

				DebugLocation(457, 16);
				PushFollow(Follow._expr_in_expr1888);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(458, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:461:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(461, 4);
				DebugLocation(461, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==59||input.LA(1)==62||input.LA(1)==66||input.LA(1)==69||input.LA(1)==73||input.LA(1)==79||input.LA(1)==86||input.LA(1)==88||input.LA(1)==94||input.LA(1)==99||input.LA(1)==117)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(461, 88);
				PushFollow(Follow._expr_in_expr1946);
				a=expr();
				PopFollow();

				DebugLocation(461, 95);
				PushFollow(Follow._expr_in_expr1950);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(462, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:465:4: ^( ':=' a= expr b= expr )
				{
				DebugLocation(465, 4);
				DebugLocation(465, 6);
				Match(input,82,Follow._82_in_expr1960); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(465, 12);
				PushFollow(Follow._expr_in_expr1964);
				a=expr();
				PopFollow();

				DebugLocation(465, 19);
				PushFollow(Follow._expr_in_expr1968);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(466, 2);

						System.Diagnostics.Debug.Assert(a is ExprConst);
						value = new ExprAlloc("auto", new List<string> { ((ExprConst)a).Text }, b);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:470:4: ^( Expr_Bracket a= expr )
				{
				DebugLocation(470, 4);
				DebugLocation(470, 6);
				Match(input,Expr_Bracket,Follow._Expr_Bracket_in_expr1978); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(470, 20);
				PushFollow(Follow._expr_in_expr1982);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(471, 2);

						value = new ExprBracket(a);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:474:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(474, 4);
				DebugLocation(474, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr1992); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(474, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==68||input.LA(1)==72)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(474, 36);
				PushFollow(Follow._expr_in_expr2006);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(475, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// SugarWalker.g:478:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(478, 4);
				DebugLocation(478, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr2016); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(478, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==56||input.LA(1)==61||input.LA(1)==65||(input.LA(1)>=67 && input.LA(1)<=68)||(input.LA(1)>=71 && input.LA(1)<=72)||input.LA(1)==119)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(478, 72);
				PushFollow(Follow._expr_in_expr2054);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(479, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// SugarWalker.g:482:4: text_ident= ident
				{
				DebugLocation(482, 15);
				PushFollow(Follow._ident_in_expr2067);
				text_ident=ident();
				PopFollow();

				DebugLocation(483, 2);

						value = new ExprConst(text_ident);
					

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// SugarWalker.g:486:4: text= ( NUMBER | DOUBLE | STRING )
				{
				DebugLocation(486, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(487, 5);

				        value = new ExprConst(text.Text);
				    

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 40);
			LeaveRule("expr", 40);
			LeaveRule_expr();
		}
		DebugLocation(490, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _Root_in_root76 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _global_block_in_root80 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Global_Block_in_global_block105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _node_in_global_block110 = new BitSet(new ulong[]{0xC010410001448UL,0x40000UL});
		public static readonly BitSet _func_def_in_node134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Alloc_in_global_alloc248 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc253 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _type_name_in_global_alloc259 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_global_alloc263 = new BitSet(new ulong[]{0x480010A086FFF808UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_global_alloc268 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _82_in_global_alloc280 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_global_alloc285 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_global_alloc291 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_global_alloc295 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Attribute_in_attribute_item382 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_attribute_item386 = new BitSet(new ulong[]{0x108080000008UL});
		public static readonly BitSet _attribute_args_in_attribute_item393 = new BitSet(new ulong[]{0x108080000008UL});
		public static readonly BitSet _attribute_item_in_attribute421 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Namespace_in_namespace_def442 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_namespace_def446 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _global_block_in_namespace_def450 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Import_in_import_def475 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _STRING_in_import_def480 = new BitSet(new ulong[]{0x100000000008UL});
		public static readonly BitSet _Enum_in_enum_def501 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_enum_def506 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def512 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_enum_def516 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Class_in_class_def536 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_class_def541 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def547 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _global_block_in_class_def551 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_IDENT_in_type_name577 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_type_name581 = new BitSet(new ulong[]{0x2000000000000008UL,0x80100002UL});
		public static readonly BitSet _84_in_type_name591 = new BitSet(new ulong[]{0x20000000000000UL,0x8000000UL});
		public static readonly BitSet _type_name_in_type_name603 = new BitSet(new ulong[]{0x20000000000000UL,0x8000000UL});
		public static readonly BitSet _91_in_type_name613 = new BitSet(new ulong[]{0x2000000000000008UL,0x80000002UL});
		public static readonly BitSet _65_in_type_name624 = new BitSet(new ulong[]{0x2000000000000008UL,0x80000002UL});
		public static readonly BitSet _95_in_type_name633 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_type_name635 = new BitSet(new ulong[]{0x2000000000000008UL,0x80000002UL});
		public static readonly BitSet _61_in_type_name644 = new BitSet(new ulong[]{0x2000000000000008UL,0x80000002UL});
		public static readonly BitSet _Func_Args_in_func_args674 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_alloc_in_func_args679 = new BitSet(new ulong[]{0x480010A086FFF808UL,0x120000841448224UL});
		public static readonly BitSet _Generic_Patameters_in_generic_parameter706 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_generic_parameter711 = new BitSet(new ulong[]{0x80000008UL});
		public static readonly BitSet _Func_Def_in_func_def737 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _attribute_in_func_def742 = new BitSet(new ulong[]{0x20000080000000UL,0x80000000000000UL});
		public static readonly BitSet _type_name_in_func_def749 = new BitSet(new ulong[]{0x80000000UL,0x80000000000000UL});
		public static readonly BitSet _119_in_func_def756 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_func_def762 = new BitSet(new ulong[]{0x480030A0AEFFF800UL,0x120000841448224UL});
		public static readonly BitSet _generic_parameter_in_func_def767 = new BitSet(new ulong[]{0x480030A08EFFF800UL,0x120000841448224UL});
		public static readonly BitSet _func_args_in_func_def775 = new BitSet(new ulong[]{0x480030A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _stmt_block_in_func_def786 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_func_def796 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Block_in_stmt_block824 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_stmt_block829 = new BitSet(new ulong[]{0x481FD0A087FFF808UL,0x120000841448224UL});
		public static readonly BitSet _stmt_expr_in_stmt855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_Using_in_stmt_using960 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_stmt_using966 = new BitSet(new ulong[]{0x80000008UL,0x200000000000UL});
		public static readonly BitSet _109_in_stmt_using981 = new BitSet(new ulong[]{0x80000008UL,0x200000000000UL});
		public static readonly BitSet _Stmt_Typedef_in_stmt_typedef1002 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_stmt_typedef1006 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1010 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_stmt_alloc1031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Stmt_If_in_stmt_if1049 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_if1053 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1057 = new BitSet(new ulong[]{0x200000000008UL});
		public static readonly BitSet _stmt_block_in_stmt_if1062 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_While_in_stmt_while1084 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_while1088 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1092 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_For_in_stmt_for1112 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1116 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_stmt_for1120 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_stmt_for1124 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1128 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_ForEach_in_stmt_for1138 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_for1142 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_stmt_for1146 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1150 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Stmt_Try_in_stmt_try1170 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_stmt_try1174 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_stmt_try1178 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1182 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Return_in_stmt_return1202 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return1207 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident1235 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _81_in_ident1240 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident1244 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _Ident_List_in_ident_list1269 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list1274 = new BitSet(new ulong[]{0x80000008UL});
		public static readonly BitSet _Expr_Alloc_in_alloc_expr1296 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr1300 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr1304 = new BitSet(new ulong[]{0x480010A086FFF808UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_alloc_expr1309 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple1336 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple1341 = new BitSet(new ulong[]{0x480010A086FFF808UL,0x120000841448224UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple1368 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_match_tuple1373 = new BitSet(new ulong[]{0x480010A086FFF808UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr_list1401 = new BitSet(new ulong[]{0x480010A086FFF802UL,0x120000841448224UL});
		public static readonly BitSet _Expr_Call_in_call_expr1426 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr1430 = new BitSet(new ulong[]{0x480010A086FFF808UL,0x120000841548224UL});
		public static readonly BitSet _84_in_call_expr1435 = new BitSet(new ulong[]{0x80000000UL,0x8000000UL});
		public static readonly BitSet _ident_in_call_expr1440 = new BitSet(new ulong[]{0x80000000UL,0x8000000UL});
		public static readonly BitSet _91_in_call_expr1446 = new BitSet(new ulong[]{0x480010A086FFF808UL,0x120000841448224UL});
		public static readonly BitSet _expr_list_in_call_expr1453 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr1474 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr1478 = new BitSet(new ulong[]{0x480010A086FFF808UL,0x120000841448224UL});
		public static readonly BitSet _expr_list_in_dict_expr1483 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr1505 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr1510 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_lambda_expr1516 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr1536 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1540 = new BitSet(new ulong[]{0x480010A086FFF808UL,0x120000841448224UL});
		public static readonly BitSet _expr_list_in_new_expr1544 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr1555 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr1559 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_list_in_new_expr1563 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr1583 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr1587 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_call_with_expr1591 = new BitSet(new ulong[]{0x480010A086FFF808UL,0x120000841448224UL});
		public static readonly BitSet _expr_list_in_call_with_expr1595 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr1620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr1630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr1640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr1650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr1660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr1670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr1690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr1699 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_expr1703 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr1707 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr1711 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr1721 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1725 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr1729 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr1733 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr1743 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1747 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr1769 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_expr1773 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr1783 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1787 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr1884 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr1888 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr1900 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1946 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr1950 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _82_in_expr1960 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1964 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr1968 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bracket_in_expr1978 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1982 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr1992 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1996 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr2006 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr2016 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr2020 = new BitSet(new ulong[]{0x480010A086FFF800UL,0x120000841448224UL});
		public static readonly BitSet _expr_in_expr2054 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ident_in_expr2067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_expr2077 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
