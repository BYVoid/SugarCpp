//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-04-20 02:15:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "DOUBLE", "EXPONENT", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_For", "Stmt_If", "Stmt_While", "'('", "')'", "':'", "'='", "'else'", "'if'", "'while'"
	};
	public const int EOF=-1;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int Block=4;
	public const int DEDENT=5;
	public const int DOUBLE=6;
	public const int EXPONENT=7;
	public const int Expr_Alloc=8;
	public const int Expr_Bin=9;
	public const int Expr_Block=10;
	public const int Expr_Call=11;
	public const int Func_Def=12;
	public const int IDENT=13;
	public const int INDENT=14;
	public const int INT=15;
	public const int Left_Bracket=16;
	public const int NEWLINE=17;
	public const int Right_Bracket=18;
	public const int Root=19;
	public const int SP=20;
	public const int STRING=21;
	public const int Stmt_For=22;
	public const int Stmt_If=23;
	public const int Stmt_While=24;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:22:8: public root returns [Root value] : (a= func_def )+ ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		FuncDef a = default(FuncDef);


			value = new Root();

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(22, 1);
		try
		{
			// SugarWalker.g:27:2: ( (a= func_def )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:27:4: (a= func_def )+
			{
			DebugLocation(27, 4);
			// SugarWalker.g:27:4: (a= func_def )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENT))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:27:5: a= func_def
					{
					DebugLocation(27, 7);
					PushFollow(Follow._func_def_in_root87);
					a=func_def();
					PopFollow();

					DebugLocation(27, 18);
					 value.FuncList.Add(a); 

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(28, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:30:8: public func_def returns [FuncDef value] : a= IDENT b= IDENT c= stmt_block ;
	[GrammarRule("func_def")]
	public FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 2);
		TraceIn("func_def", 2);
		FuncDef value = default(FuncDef);


		CommonTree a = default(CommonTree);
		CommonTree b = default(CommonTree);
		StmtBlock c = default(StmtBlock);

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(30, 1);
		try
		{
			// SugarWalker.g:31:2: (a= IDENT b= IDENT c= stmt_block )
			DebugEnterAlt(1);
			// SugarWalker.g:31:4: a= IDENT b= IDENT c= stmt_block
			{
			DebugLocation(31, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def110); 
			DebugLocation(31, 13);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def114); 
			DebugLocation(31, 21);
			PushFollow(Follow._stmt_block_in_func_def118);
			c=stmt_block();
			PopFollow();

			DebugLocation(32, 2);

					value = new FuncDef(a.Text,b.Text,c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 2);
			LeaveRule("func_def", 2);
			LeaveRule_func_def();
		}
		DebugLocation(35, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:37:8: public stmt_block returns [StmtBlock value] : (a= expr )* ;
	[GrammarRule("stmt_block")]
	public StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 3);
		TraceIn("stmt_block", 3);
		StmtBlock value = default(StmtBlock);


		Expr a = default(Expr);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(37, 4);
		try
		{
			// SugarWalker.g:42:2: ( (a= expr )* )
			DebugEnterAlt(1);
			// SugarWalker.g:42:4: (a= expr )*
			{
			DebugLocation(42, 4);
			// SugarWalker.g:42:4: (a= expr )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==IDENT))
				{
					int LA2_2 = input.LA(2);

					if ((LA2_2==EOF||LA2_2==DOUBLE||LA2_2==IDENT||LA2_2==INT||LA2_2==STRING))
					{
						alt2 = 1;
					}
					else if ((LA2_2==28))
					{
						alt2 = 1;
					}


				}
				else if ((LA2_0==DOUBLE||LA2_0==INT||LA2_0==STRING||LA2_0==28))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:42:5: a= expr
					{
					DebugLocation(42, 6);
					PushFollow(Follow._expr_in_stmt_block148);
					a=expr();
					PopFollow();

					DebugLocation(42, 12);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 3);
			LeaveRule("stmt_block", 3);
			LeaveRule_stmt_block();
		}
		DebugLocation(43, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:45:8: public expr returns [Expr value] : ( ^( '=' a= expr b= expr ) | INT | DOUBLE | IDENT | STRING );
	[GrammarRule("expr")]
	public Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 4);
		TraceIn("expr", 4);
		Expr value = default(Expr);


		CommonTree INT1 = default(CommonTree);
		CommonTree DOUBLE2 = default(CommonTree);
		CommonTree IDENT3 = default(CommonTree);
		CommonTree STRING4 = default(CommonTree);
		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(45, 1);
		try
		{
			// SugarWalker.g:46:5: ( ^( '=' a= expr b= expr ) | INT | DOUBLE | IDENT | STRING )
			int alt3=5;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case 28:
				{
				alt3 = 1;
				}
				break;
			case INT:
				{
				alt3 = 2;
				}
				break;
			case DOUBLE:
				{
				alt3 = 3;
				}
				break;
			case IDENT:
				{
				alt3 = 4;
				}
				break;
			case STRING:
				{
				alt3 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:46:7: ^( '=' a= expr b= expr )
				{
				DebugLocation(46, 7);
				DebugLocation(46, 9);
				Match(input,28,Follow._28_in_expr180); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(46, 14);
				PushFollow(Follow._expr_in_expr184);
				a=expr();
				PopFollow();

				DebugLocation(46, 21);
				PushFollow(Follow._expr_in_expr188);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(46, 28);
				 value = new ExprAssign(a, b); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:47:4: INT
				{
				DebugLocation(47, 4);
				INT1=(CommonTree)Match(input,INT,Follow._INT_in_expr196); 
				DebugLocation(48, 5);

				        value = new ExprConst(INT1.Text);
				    

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:51:4: DOUBLE
				{
				DebugLocation(51, 4);
				DOUBLE2=(CommonTree)Match(input,DOUBLE,Follow._DOUBLE_in_expr207); 
				DebugLocation(52, 2);

						value = new ExprConst(DOUBLE2.Text);
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:55:4: IDENT
				{
				DebugLocation(55, 4);
				IDENT3=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr215); 
				DebugLocation(56, 2);

						value = new ExprConst(IDENT3.Text);
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:59:4: STRING
				{
				DebugLocation(59, 4);
				STRING4=(CommonTree)Match(input,STRING,Follow._STRING_in_expr223); 
				DebugLocation(60, 2);

						value = new ExprConst(STRING4.Text);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 4);
			LeaveRule("expr", 4);
			LeaveRule_expr();
		}
		DebugLocation(63, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _func_def_in_root87 = new BitSet(new ulong[]{0x2002UL});
		public static readonly BitSet _IDENT_in_func_def110 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENT_in_func_def114 = new BitSet(new ulong[]{0x1020A040UL});
		public static readonly BitSet _stmt_block_in_func_def118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_block148 = new BitSet(new ulong[]{0x1020A042UL});
		public static readonly BitSet _28_in_expr180 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr184 = new BitSet(new ulong[]{0x1020A040UL});
		public static readonly BitSet _expr_in_expr188 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INT_in_expr196 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_expr207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_expr215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expr223 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
