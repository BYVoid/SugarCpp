//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-04-19 15:25:52

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "Func_Def", "INDENT", "INT", "Left_Round_Bracket", "NEWLINE", "Right_Round_Bracket", "Root", "SP", "Var", "WS"
	};
	public const int EOF=-1;
	public const int Block=4;
	public const int DEDENT=5;
	public const int Func_Def=6;
	public const int INDENT=7;
	public const int INT=8;
	public const int Left_Round_Bracket=9;
	public const int NEWLINE=10;
	public const int Right_Round_Bracket=11;
	public const int Root=12;
	public const int SP=13;
	public const int Var=14;
	public const int WS=15;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }


		Hashtable memory = new Hashtable();


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : a= func_def ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		FuncDef a = default(FuncDef);


			value = new Root();

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:28:2: (a= func_def )
			DebugEnterAlt(1);
			// SugarWalker.g:28:4: a= func_def
			{
			DebugLocation(28, 6);
			PushFollow(Follow._func_def_in_root86);
			a=func_def();
			PopFollow();

			DebugLocation(28, 17);
			 value.FuncList.Add(a); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(29, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:31:8: public func_def returns [FuncDef value] : ^( Func_Def a= stmt_block ) ;
	[GrammarRule("func_def")]
	public FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 2);
		TraceIn("func_def", 2);
		FuncDef value = default(FuncDef);


		List<string> a = default(List<string>);

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(31, 1);
		try
		{
			// SugarWalker.g:32:2: ( ^( Func_Def a= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:32:4: ^( Func_Def a= stmt_block )
			{
			DebugLocation(32, 4);
			DebugLocation(32, 6);
			Match(input,Func_Def,Follow._Func_Def_in_func_def106); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(32, 16);
			PushFollow(Follow._stmt_block_in_func_def110);
			a=stmt_block();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(32, 29);
			 value = new FuncDef(); value.VarList = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 2);
			LeaveRule("func_def", 2);
			LeaveRule_func_def();
		}
		DebugLocation(33, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:35:8: public stmt_block returns [List<string> value] : a= stmt ;
	[GrammarRule("stmt_block")]
	public List<string> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 3);
		TraceIn("stmt_block", 3);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(35, 4);
		try
		{
			// SugarWalker.g:40:2: (a= stmt )
			DebugEnterAlt(1);
			// SugarWalker.g:40:4: a= stmt
			{
			DebugLocation(40, 5);
			PushFollow(Follow._stmt_in_stmt_block139);
			a=stmt();
			PopFollow();

			DebugLocation(40, 11);
			 value.Add(a); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 3);
			LeaveRule("stmt_block", 3);
			LeaveRule_stmt_block();
		}
		DebugLocation(41, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:43:8: public stmt returns [string value] : INT ;
	[GrammarRule("stmt")]
	public string stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 4);
		TraceIn("stmt", 4);
		string value = default(string);


		CommonTree INT1 = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(43, 1);
		try
		{
			// SugarWalker.g:44:5: ( INT )
			DebugEnterAlt(1);
			// SugarWalker.g:44:7: INT
			{
			DebugLocation(44, 7);
			INT1=(CommonTree)Match(input,INT,Follow._INT_in_stmt170); 
			DebugLocation(45, 5);

			        value = (INT1!=null?INT1.Text:null);
			    

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 4);
			LeaveRule("stmt", 4);
			LeaveRule_stmt();
		}
		DebugLocation(48, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _func_def_in_root86 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Func_Def_in_func_def106 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_block_in_func_def110 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _stmt_in_stmt_block139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_stmt170 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
