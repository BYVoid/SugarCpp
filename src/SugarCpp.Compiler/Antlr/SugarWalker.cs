//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-04-29 13:42:54

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "INT", "Ident_List", "Infix_Func", "Left_Bracket", "Match_Tuple", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_If", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "']'", "'^'", "'^='", "'else'", "'if'", "'new'", "'ref'", "'return'", "'tuple'", "'|'", "'|='", "'||'", "'~'", "DOUBLE"
	};
	public const int EOF=-1;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Expr_Access=7;
	public const int Expr_Alloc=8;
	public const int Expr_Bin=9;
	public const int Expr_Block=10;
	public const int Expr_Call=11;
	public const int Expr_Call_With=12;
	public const int Expr_Cond=13;
	public const int Expr_Dict=14;
	public const int Expr_Infix=15;
	public const int Expr_Lambda=16;
	public const int Expr_New_Array=17;
	public const int Expr_New_Type=18;
	public const int Expr_Prefix=19;
	public const int Expr_Return=20;
	public const int Expr_Suffix=21;
	public const int Expr_Tuple=22;
	public const int Func_Args=23;
	public const int Func_Def=24;
	public const int IDENT=25;
	public const int INDENT=26;
	public const int INT=27;
	public const int Ident_List=28;
	public const int Infix_Func=29;
	public const int Left_Bracket=30;
	public const int Match_Tuple=31;
	public const int NEWLINE=32;
	public const int Right_Bracket=33;
	public const int Root=34;
	public const int SP=35;
	public const int STRING=36;
	public const int Stmt_If=37;
	public const int Stmt_While=38;
	public const int Type_IDENT=39;
	public const int Type_Ref=40;
	public const int Type_Tuple=41;
	public const int DOUBLE=94;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : (a= node ( NEWLINE )* )+ ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		AstNode a = default(AstNode);


			value = new Root();

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:28:2: ( (a= node ( NEWLINE )* )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:28:4: (a= node ( NEWLINE )* )+
			{
			DebugLocation(28, 4);
			// SugarWalker.g:28:4: (a= node ( NEWLINE )* )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>=Type_IDENT && LA2_0<=Type_Tuple)))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:28:5: a= node ( NEWLINE )*
					{
					DebugLocation(28, 7);
					PushFollow(Follow._node_in_root85);
					a=node();
					PopFollow();

					DebugLocation(28, 15);
					 value.List.Add(a); 
					DebugLocation(28, 39);
					// SugarWalker.g:28:39: ( NEWLINE )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_0 = input.LA(1);

						if ((LA1_0==NEWLINE))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:28:39: NEWLINE
							{
							DebugLocation(28, 39);
							Match(input,NEWLINE,Follow._NEWLINE_in_root90); 

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(29, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:31:1: node returns [AstNode value] : a= func_def ;
	[GrammarRule("node")]
	private AstNode node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstNode value = default(AstNode);


		FuncDef a = default(FuncDef);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(31, 1);
		try
		{
			// SugarWalker.g:32:2: (a= func_def )
			DebugEnterAlt(1);
			// SugarWalker.g:32:4: a= func_def
			{
			DebugLocation(32, 6);
			PushFollow(Follow._func_def_in_node112);
			a=func_def();
			PopFollow();

			DebugLocation(32, 17);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(33, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:35:1: type_name returns [string value] : ( ^( Type_IDENT a= IDENT ( '<' (b= type_name )* '>' )? ) | ^( Type_Tuple (b= type_name )+ ) | ^( Type_Ref b= type_name ) );
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 3);
		TraceIn("type_name", 3);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(35, 1);
		try
		{
			// SugarWalker.g:40:2: ( ^( Type_IDENT a= IDENT ( '<' (b= type_name )* '>' )? ) | ^( Type_Tuple (b= type_name )+ ) | ^( Type_Ref b= type_name ) )
			int alt6=3;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case Type_IDENT:
				{
				alt6 = 1;
				}
				break;
			case Type_Tuple:
				{
				alt6 = 2;
				}
				break;
			case Type_Ref:
				{
				alt6 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:40:4: ^( Type_IDENT a= IDENT ( '<' (b= type_name )* '>' )? )
				{
				DebugLocation(40, 4);
				DebugLocation(40, 6);
				Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name135); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(40, 18);
				a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_type_name139); 
				DebugLocation(40, 25);
				 value+=a.Text; 
				DebugLocation(41, 4);
				// SugarWalker.g:41:4: ( '<' (b= type_name )* '>' )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==69))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:41:6: '<' (b= type_name )* '>'
					{
					DebugLocation(41, 6);
					Match(input,69,Follow._69_in_type_name148); 
					DebugLocation(41, 10);
					 value+="<"; bool isFirst = true; 
					DebugLocation(42, 6);
					// SugarWalker.g:42:6: (b= type_name )*
					try { DebugEnterSubRule(3);
					while (true)
					{
						int alt3=2;
						try { DebugEnterDecision(3, false);
						int LA3_0 = input.LA(1);

						if (((LA3_0>=Type_IDENT && LA3_0<=Type_Tuple)))
						{
							alt3 = 1;
						}


						} finally { DebugExitDecision(3); }
						switch ( alt3 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:42:7: b= type_name
							{
							DebugLocation(42, 8);
							PushFollow(Follow._type_name_in_type_name160);
							b=type_name();
							PopFollow();

							DebugLocation(43, 3);

										if (!isFirst) value+=", ";
										isFirst = false;
										value+=b;
									

							}
							break;

						default:
							goto loop3;
						}
					}

					loop3:
						;

					} finally { DebugExitSubRule(3); }

					DebugLocation(48, 3);
					Match(input,76,Follow._76_in_type_name170); 
					DebugLocation(48, 7);
					 value+=">"; 

					}
					break;

				}
				} finally { DebugExitSubRule(4); }


				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:49:4: ^( Type_Tuple (b= type_name )+ )
				{
				DebugLocation(49, 4);
				bool isFirst = true; value += "std::tuple<";
				DebugLocation(50, 4);
				DebugLocation(50, 6);
				Match(input,Type_Tuple,Follow._Type_Tuple_in_type_name186); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(51, 5);
				// SugarWalker.g:51:5: (b= type_name )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if (((LA5_0>=Type_IDENT && LA5_0<=Type_Tuple)))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:51:6: b= type_name
						{
						DebugLocation(51, 7);
						PushFollow(Follow._type_name_in_type_name195);
						b=type_name();
						PopFollow();

						DebugLocation(52, 3);

									if (!isFirst) value += ",";
									isFirst = false;
									value += b;
								

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(57, 3);

							value += ">";
						

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:60:4: ^( Type_Ref b= type_name )
				{
				DebugLocation(60, 4);
				DebugLocation(60, 6);
				Match(input,Type_Ref,Follow._Type_Ref_in_type_name212); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(60, 16);
				PushFollow(Follow._type_name_in_type_name216);
				b=type_name();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(61, 2);

						value = b + "&";
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 3);
			LeaveRule("type_name", 3);
			LeaveRule_type_name();
		}
		DebugLocation(64, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:66:1: func_args returns [List<Stmt> value] : ^( Func_Args (a= stmt )* ) ;
	[GrammarRule("func_args")]
	private List<Stmt> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 4);
		TraceIn("func_args", 4);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(66, 1);
		try
		{
			// SugarWalker.g:71:2: ( ^( Func_Args (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:71:4: ^( Func_Args (a= stmt )* )
			{
			DebugLocation(71, 4);
			DebugLocation(71, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args241); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(71, 16);
				// SugarWalker.g:71:16: (a= stmt )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if (((LA7_0>=Expr_Access && LA7_0<=Expr_Bin)||(LA7_0>=Expr_Call && LA7_0<=Expr_Tuple)||LA7_0==IDENT||LA7_0==INT||LA7_0==Match_Tuple||LA7_0==STRING||LA7_0==45||LA7_0==48||LA7_0==52||LA7_0==55||LA7_0==59||LA7_0==65||LA7_0==68||LA7_0==71||LA7_0==73||LA7_0==79||LA7_0==83||LA7_0==91||LA7_0==DOUBLE))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:71:17: a= stmt
						{
						DebugLocation(71, 18);
						PushFollow(Follow._stmt_in_func_args246);
						a=stmt();
						PopFollow();

						DebugLocation(71, 24);
						 value.Add(a); 

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 4);
			LeaveRule("func_args", 4);
			LeaveRule_func_args();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:74:1: func_def returns [FuncDef value] : a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (args= func_args )? ')' (e= stmt_block ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 5);
		TraceIn("func_def", 5);
		FuncDef value = default(FuncDef);


		CommonTree b = default(CommonTree);
		CommonTree x = default(CommonTree);
		string a = default(string);
		List<Stmt> args = default(List<Stmt>);
		StmtBlock e = default(StmtBlock);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(74, 1);
		try
		{
			// SugarWalker.g:79:2: (a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (args= func_args )? ')' (e= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:79:4: a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (args= func_args )? ')' (e= stmt_block )
			{
			DebugLocation(79, 5);
			PushFollow(Follow._type_name_in_func_def273);
			a=type_name();
			PopFollow();

			DebugLocation(79, 17);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def277); 
			DebugLocation(79, 24);
			// SugarWalker.g:79:24: ( '<' (x= IDENT )+ '>' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==69))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:79:25: '<' (x= IDENT )+ '>'
				{
				DebugLocation(79, 25);
				Match(input,69,Follow._69_in_func_def280); 
				DebugLocation(79, 29);
				// SugarWalker.g:79:29: (x= IDENT )+
				int cnt8=0;
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0==IDENT))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:79:30: x= IDENT
						{
						DebugLocation(79, 31);
						x=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def285); 
						DebugLocation(79, 38);
						value.GenericParameter.Add(x.Text); 

						}
						break;

					default:
						if (cnt8 >= 1)
							goto loop8;

						EarlyExitException eee8 = new EarlyExitException( 8, input );
						DebugRecognitionException(eee8);
						throw eee8;
					}
					cnt8++;
				}
				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(79, 80);
				Match(input,76,Follow._76_in_func_def291); 

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(79, 86);
			Match(input,49,Follow._49_in_func_def295); 
			DebugLocation(79, 90);
			// SugarWalker.g:79:90: (args= func_args )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==Func_Args))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:79:91: args= func_args
				{
				DebugLocation(79, 95);
				PushFollow(Follow._func_args_in_func_def300);
				args=func_args();
				PopFollow();

				DebugLocation(79, 106);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(79, 132);
			Match(input,50,Follow._50_in_func_def306); 
			DebugLocation(80, 2);
			// SugarWalker.g:80:2: (e= stmt_block )
			DebugEnterAlt(1);
			// SugarWalker.g:80:4: e= stmt_block
			{
			DebugLocation(80, 5);
			PushFollow(Follow._stmt_block_in_func_def313);
			e=stmt_block();
			PopFollow();

			DebugLocation(81, 2);

					value.Type = a;
					value.Name = b.Text;
					value.Body = e;
				

			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 5);
			LeaveRule("func_def", 5);
			LeaveRule_func_def();
		}
		DebugLocation(86, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:88:1: stmt_block returns [StmtBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 6);
		TraceIn("stmt_block", 6);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(88, 4);
		try
		{
			// SugarWalker.g:93:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:93:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(93, 4);
			Match(input,INDENT,Follow._INDENT_in_stmt_block337); 
			DebugLocation(93, 11);
			// SugarWalker.g:93:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				try
				{
					alt12 = dfa12.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:93:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(93, 12);
					// SugarWalker.g:93:12: ( NEWLINE )+
					int cnt11=0;
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==NEWLINE))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch (alt11)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:93:12: NEWLINE
							{
							DebugLocation(93, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block340); 

							}
							break;

						default:
							if (cnt11 >= 1)
								goto loop11;

							EarlyExitException eee11 = new EarlyExitException( 11, input );
							DebugRecognitionException(eee11);
							throw eee11;
						}
						cnt11++;
					}
					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(93, 22);
					PushFollow(Follow._stmt_in_stmt_block345);
					a=stmt();
					PopFollow();

					DebugLocation(93, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(93, 58);
			// SugarWalker.g:93:58: ( NEWLINE )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==NEWLINE))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:93:58: NEWLINE
					{
					DebugLocation(93, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block351); 

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(93, 67);
			Match(input,DEDENT,Follow._DEDENT_in_stmt_block354); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 6);
			LeaveRule("stmt_block", 6);
			LeaveRule_stmt_block();
		}
		DebugLocation(94, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:96:1: stmt returns [Stmt value] : a= stmt_expr ;
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 7);
		TraceIn("stmt", 7);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(96, 1);
		try
		{
			// SugarWalker.g:97:2: (a= stmt_expr )
			DebugEnterAlt(1);
			// SugarWalker.g:97:4: a= stmt_expr
			{
			DebugLocation(97, 5);
			PushFollow(Follow._stmt_expr_in_stmt375);
			a=stmt_expr();
			PopFollow();

			DebugLocation(97, 16);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 7);
			LeaveRule("stmt", 7);
			LeaveRule_stmt();
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:100:1: stmt_expr returns [Stmt value] : (a= stmt_alloc |a= stmt_return |b= expr );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 8);
		TraceIn("stmt_expr", 8);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(100, 1);
		try
		{
			// SugarWalker.g:101:2: (a= stmt_alloc |a= stmt_return |b= expr )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case Expr_Alloc:
				{
				alt14 = 1;
				}
				break;
			case Expr_Return:
				{
				alt14 = 2;
				}
				break;
			case Expr_Access:
			case Expr_Bin:
			case Expr_Call:
			case Expr_Call_With:
			case Expr_Cond:
			case Expr_Dict:
			case Expr_Infix:
			case Expr_Lambda:
			case Expr_New_Array:
			case Expr_New_Type:
			case Expr_Prefix:
			case Expr_Suffix:
			case Expr_Tuple:
			case IDENT:
			case INT:
			case Match_Tuple:
			case STRING:
			case 45:
			case 48:
			case 52:
			case 55:
			case 59:
			case 65:
			case 68:
			case 71:
			case 73:
			case 79:
			case 83:
			case 91:
			case DOUBLE:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:101:4: a= stmt_alloc
				{
				DebugLocation(101, 5);
				PushFollow(Follow._stmt_alloc_in_stmt_expr394);
				a=stmt_alloc();
				PopFollow();

				DebugLocation(101, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:102:4: a= stmt_return
				{
				DebugLocation(102, 5);
				PushFollow(Follow._stmt_return_in_stmt_expr403);
				a=stmt_return();
				PopFollow();

				DebugLocation(102, 18);
				 value = a; 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:103:4: b= expr
				{
				DebugLocation(103, 5);
				PushFollow(Follow._expr_in_stmt_expr412);
				b=expr();
				PopFollow();

				DebugLocation(103, 11);
				 value = b; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 8);
			LeaveRule("stmt_expr", 8);
			LeaveRule_stmt_expr();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:106:1: stmt_alloc returns [Stmt value] : a= alloc_expr ;
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 9);
		TraceIn("stmt_alloc", 9);
		Stmt value = default(Stmt);


		ExprAlloc a = default(ExprAlloc);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(106, 1);
		try
		{
			// SugarWalker.g:107:2: (a= alloc_expr )
			DebugEnterAlt(1);
			// SugarWalker.g:107:4: a= alloc_expr
			{
			DebugLocation(107, 5);
			PushFollow(Follow._alloc_expr_in_stmt_alloc431);
			a=alloc_expr();
			PopFollow();

			DebugLocation(107, 17);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 9);
			LeaveRule("stmt_alloc", 9);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:110:1: stmt_return returns [Stmt value] : ^( Expr_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 10);
		TraceIn("stmt_return", 10);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(110, 1);
		try
		{
			// SugarWalker.g:111:2: ( ^( Expr_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:111:4: ^( Expr_Return (a= expr )? )
			{
			DebugLocation(111, 4);
			DebugLocation(111, 6);
			Match(input,Expr_Return,Follow._Expr_Return_in_stmt_return449); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(111, 18);
				// SugarWalker.g:111:18: (a= expr )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==Expr_Access||LA15_0==Expr_Bin||(LA15_0>=Expr_Call && LA15_0<=Expr_Prefix)||(LA15_0>=Expr_Suffix && LA15_0<=Expr_Tuple)||LA15_0==IDENT||LA15_0==INT||LA15_0==Match_Tuple||LA15_0==STRING||LA15_0==45||LA15_0==48||LA15_0==52||LA15_0==55||LA15_0==59||LA15_0==65||LA15_0==68||LA15_0==71||LA15_0==73||LA15_0==79||LA15_0==83||LA15_0==91||LA15_0==DOUBLE))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:111:19: a= expr
					{
					DebugLocation(111, 20);
					PushFollow(Follow._expr_in_stmt_return454);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(15); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(112, 2);

					value = new ExprReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 10);
			LeaveRule("stmt_return", 10);
			LeaveRule_stmt_return();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:117:1: ident returns [string value] : a= IDENT ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 11);
		TraceIn("ident", 11);
		string value = default(string);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(117, 1);
		try
		{
			// SugarWalker.g:118:2: (a= IDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:118:4: a= IDENT
			{
			DebugLocation(118, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident477); 
			DebugLocation(118, 12);
			 value = a.Text; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 11);
			LeaveRule("ident", 11);
			LeaveRule_ident();
		}
		DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:121:1: ident_list returns [List<string> value] : ^( Ident_List (a= ident )+ ) ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 12);
		TraceIn("ident_list", 12);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(121, 1);
		try
		{
			// SugarWalker.g:126:2: ( ^( Ident_List (a= ident )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:126:4: ^( Ident_List (a= ident )+ )
			{
			DebugLocation(126, 4);
			DebugLocation(126, 6);
			Match(input,Ident_List,Follow._Ident_List_in_ident_list500); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(126, 17);
			// SugarWalker.g:126:17: (a= ident )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==IDENT))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:126:18: a= ident
					{
					DebugLocation(126, 19);
					PushFollow(Follow._ident_in_ident_list505);
					a=ident();
					PopFollow();

					DebugLocation(126, 26);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 12);
			LeaveRule("ident_list", 12);
			LeaveRule_ident_list();
		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:129:1: alloc_expr returns [ExprAlloc value] : ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) ;
	[GrammarRule("alloc_expr")]
	private ExprAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 13);
		TraceIn("alloc_expr", 13);
		ExprAlloc value = default(ExprAlloc);


		string a = default(string);
		List<string> b = default(List<string>);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(129, 1);
		try
		{
			// SugarWalker.g:130:2: ( ^( Expr_Alloc a= type_name b= ident_list (c= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:130:4: ^( Expr_Alloc a= type_name b= ident_list (c= expr )? )
			{
			DebugLocation(130, 4);
			DebugLocation(130, 6);
			Match(input,Expr_Alloc,Follow._Expr_Alloc_in_alloc_expr527); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(130, 18);
			PushFollow(Follow._type_name_in_alloc_expr531);
			a=type_name();
			PopFollow();

			DebugLocation(130, 30);
			PushFollow(Follow._ident_list_in_alloc_expr535);
			b=ident_list();
			PopFollow();

			DebugLocation(130, 42);
			// SugarWalker.g:130:42: (c= expr )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Expr_Access||LA17_0==Expr_Bin||(LA17_0>=Expr_Call && LA17_0<=Expr_Prefix)||(LA17_0>=Expr_Suffix && LA17_0<=Expr_Tuple)||LA17_0==IDENT||LA17_0==INT||LA17_0==Match_Tuple||LA17_0==STRING||LA17_0==45||LA17_0==48||LA17_0==52||LA17_0==55||LA17_0==59||LA17_0==65||LA17_0==68||LA17_0==71||LA17_0==73||LA17_0==79||LA17_0==83||LA17_0==91||LA17_0==DOUBLE))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:130:43: c= expr
				{
				DebugLocation(130, 44);
				PushFollow(Follow._expr_in_alloc_expr540);
				c=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(131, 2);

					value = new ExprAlloc(a, b, c);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 13);
			LeaveRule("alloc_expr", 13);
			LeaveRule_alloc_expr();
		}
		DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_block_expr();
	partial void LeaveRule_block_expr();

	// $ANTLR start "block_expr"
	// SugarWalker.g:136:1: block_expr returns [ExprBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("block_expr")]
	private ExprBlock block_expr()
	{
		EnterRule_block_expr();
		EnterRule("block_expr", 14);
		TraceIn("block_expr", 14);
		ExprBlock value = default(ExprBlock);


		Stmt a = default(Stmt);


			value = new ExprBlock();

		try { DebugEnterRule(GrammarFileName, "block_expr");
		DebugLocation(136, 4);
		try
		{
			// SugarWalker.g:141:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:141:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(141, 4);
			Match(input,INDENT,Follow._INDENT_in_block_expr566); 
			DebugLocation(141, 11);
			// SugarWalker.g:141:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				try
				{
					alt19 = dfa19.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:141:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(141, 12);
					// SugarWalker.g:141:12: ( NEWLINE )+
					int cnt18=0;
					try { DebugEnterSubRule(18);
					while (true)
					{
						int alt18=2;
						try { DebugEnterDecision(18, false);
						int LA18_0 = input.LA(1);

						if ((LA18_0==NEWLINE))
						{
							alt18 = 1;
						}


						} finally { DebugExitDecision(18); }
						switch (alt18)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:141:12: NEWLINE
							{
							DebugLocation(141, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_block_expr569); 

							}
							break;

						default:
							if (cnt18 >= 1)
								goto loop18;

							EarlyExitException eee18 = new EarlyExitException( 18, input );
							DebugRecognitionException(eee18);
							throw eee18;
						}
						cnt18++;
					}
					loop18:
						;

					} finally { DebugExitSubRule(18); }

					DebugLocation(141, 22);
					PushFollow(Follow._stmt_in_block_expr574);
					a=stmt();
					PopFollow();

					DebugLocation(141, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(141, 58);
			// SugarWalker.g:141:58: ( NEWLINE )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==NEWLINE))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:141:58: NEWLINE
					{
					DebugLocation(141, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_block_expr580); 

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }

			DebugLocation(141, 67);
			Match(input,DEDENT,Follow._DEDENT_in_block_expr583); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block_expr", 14);
			LeaveRule("block_expr", 14);
			LeaveRule_block_expr();
		}
		DebugLocation(142, 4);
		} finally { DebugExitRule(GrammarFileName, "block_expr"); }
		return value;

	}
	// $ANTLR end "block_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:144:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 15);
		TraceIn("expr_tuple", 15);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(144, 1);
		try
		{
			// SugarWalker.g:149:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:149:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(149, 4);
			DebugLocation(149, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple608); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(149, 17);
			// SugarWalker.g:149:17: (a= expr )+
			int cnt21=0;
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==Expr_Access||LA21_0==Expr_Bin||(LA21_0>=Expr_Call && LA21_0<=Expr_Prefix)||(LA21_0>=Expr_Suffix && LA21_0<=Expr_Tuple)||LA21_0==IDENT||LA21_0==INT||LA21_0==Match_Tuple||LA21_0==STRING||LA21_0==45||LA21_0==48||LA21_0==52||LA21_0==55||LA21_0==59||LA21_0==65||LA21_0==68||LA21_0==71||LA21_0==73||LA21_0==79||LA21_0==83||LA21_0==91||LA21_0==DOUBLE))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:149:18: a= expr
					{
					DebugLocation(149, 19);
					PushFollow(Follow._expr_in_expr_tuple613);
					a=expr();
					PopFollow();

					DebugLocation(149, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt21 >= 1)
						goto loop21;

					EarlyExitException eee21 = new EarlyExitException( 21, input );
					DebugRecognitionException(eee21);
					throw eee21;
				}
				cnt21++;
			}
			loop21:
				;

			} finally { DebugExitSubRule(21); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 15);
			LeaveRule("expr_tuple", 15);
			LeaveRule_expr_tuple();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_match_tuple();
	partial void LeaveRule_match_tuple();

	// $ANTLR start "match_tuple"
	// SugarWalker.g:152:1: match_tuple returns [MatchTuple value] : ^( Match_Tuple (a= IDENT )* ) ;
	[GrammarRule("match_tuple")]
	private MatchTuple match_tuple()
	{
		EnterRule_match_tuple();
		EnterRule("match_tuple", 16);
		TraceIn("match_tuple", 16);
		MatchTuple value = default(MatchTuple);


		CommonTree a = default(CommonTree);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "match_tuple");
		DebugLocation(152, 1);
		try
		{
			// SugarWalker.g:157:2: ( ^( Match_Tuple (a= IDENT )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:157:4: ^( Match_Tuple (a= IDENT )* )
			{
			DebugLocation(157, 4);
			DebugLocation(157, 6);
			Match(input,Match_Tuple,Follow._Match_Tuple_in_match_tuple640); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(157, 18);
				// SugarWalker.g:157:18: (a= IDENT )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==IDENT))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:157:19: a= IDENT
						{
						DebugLocation(157, 20);
						a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_match_tuple645); 
						DebugLocation(157, 27);
						 value.VarList.Add(a.Text); 

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("match_tuple", 16);
			LeaveRule("match_tuple", 16);
			LeaveRule_match_tuple();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "match_tuple"); }
		return value;

	}
	// $ANTLR end "match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:160:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 17);
		TraceIn("expr_list", 17);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(160, 1);
		try
		{
			// SugarWalker.g:165:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:165:4: (a= expr )+
			{
			DebugLocation(165, 4);
			// SugarWalker.g:165:4: (a= expr )+
			int cnt23=0;
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==Expr_Access||LA23_0==Expr_Bin||(LA23_0>=Expr_Call && LA23_0<=Expr_Prefix)||(LA23_0>=Expr_Suffix && LA23_0<=Expr_Tuple)||LA23_0==IDENT||LA23_0==INT||LA23_0==Match_Tuple||LA23_0==STRING||LA23_0==45||LA23_0==48||LA23_0==52||LA23_0==55||LA23_0==59||LA23_0==65||LA23_0==68||LA23_0==71||LA23_0==73||LA23_0==79||LA23_0==83||LA23_0==91||LA23_0==DOUBLE))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:165:5: a= expr
					{
					DebugLocation(165, 6);
					PushFollow(Follow._expr_in_expr_list673);
					a=expr();
					PopFollow();

					DebugLocation(165, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt23 >= 1)
						goto loop23;

					EarlyExitException eee23 = new EarlyExitException( 23, input );
					DebugRecognitionException(eee23);
					throw eee23;
				}
				cnt23++;
			}
			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 17);
			LeaveRule("expr_list", 17);
			LeaveRule_expr_list();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:168:1: call_expr returns [Expr value] : ^( Expr_Call a= expr b= expr_list ) ;
	[GrammarRule("call_expr")]
	private Expr call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 18);
		TraceIn("call_expr", 18);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(168, 1);
		try
		{
			// SugarWalker.g:169:2: ( ^( Expr_Call a= expr b= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:169:4: ^( Expr_Call a= expr b= expr_list )
			{
			DebugLocation(169, 4);
			DebugLocation(169, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr693); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(169, 17);
			PushFollow(Follow._expr_in_call_expr697);
			a=expr();
			PopFollow();

			DebugLocation(169, 24);
			PushFollow(Follow._expr_list_in_call_expr701);
			b=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(170, 2);

					value = new ExprCall(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 18);
			LeaveRule("call_expr", 18);
			LeaveRule_call_expr();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:175:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr b= expr ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 19);
		TraceIn("dict_expr", 19);
		Expr value = default(Expr);


		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(175, 1);
		try
		{
			// SugarWalker.g:176:2: ( ^( Expr_Dict a= expr b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:176:4: ^( Expr_Dict a= expr b= expr )
			{
			DebugLocation(176, 4);
			DebugLocation(176, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr721); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(176, 17);
			PushFollow(Follow._expr_in_dict_expr725);
			a=expr();
			PopFollow();

			DebugLocation(176, 24);
			PushFollow(Follow._expr_in_dict_expr729);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(177, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 19);
			LeaveRule("dict_expr", 19);
			LeaveRule_dict_expr();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:182:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda b= func_args a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 20);
		TraceIn("lambda_expr", 20);
		ExprLambda value = default(ExprLambda);


		List<Stmt> b = default(List<Stmt>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(182, 1);
		try
		{
			// SugarWalker.g:183:2: ( ^( Expr_Lambda b= func_args a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:183:4: ^( Expr_Lambda b= func_args a= expr )
			{
			DebugLocation(183, 4);
			DebugLocation(183, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr749); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(183, 19);
			PushFollow(Follow._func_args_in_lambda_expr753);
			b=func_args();
			PopFollow();

			DebugLocation(183, 31);
			PushFollow(Follow._expr_in_lambda_expr757);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(184, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 20);
			LeaveRule("lambda_expr", 20);
			LeaveRule_lambda_expr();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:189:1: new_expr returns [ExprNew value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name (b= expr_list )? ) );
	[GrammarRule("new_expr")]
	private ExprNew new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 21);
		TraceIn("new_expr", 21);
		ExprNew value = default(ExprNew);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(189, 1);
		try
		{
			// SugarWalker.g:190:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name (b= expr_list )? ) )
			int alt26=2;
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==Expr_New_Type))
			{
				alt26 = 1;
			}
			else if ((LA26_0==Expr_New_Array))
			{
				alt26 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:190:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(190, 4);
				DebugLocation(190, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr777); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(190, 21);
				PushFollow(Follow._type_name_in_new_expr781);
				a=type_name();
				PopFollow();

				DebugLocation(190, 33);
				// SugarWalker.g:190:33: (b= expr_list )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==Expr_Access||LA24_0==Expr_Bin||(LA24_0>=Expr_Call && LA24_0<=Expr_Prefix)||(LA24_0>=Expr_Suffix && LA24_0<=Expr_Tuple)||LA24_0==IDENT||LA24_0==INT||LA24_0==Match_Tuple||LA24_0==STRING||LA24_0==45||LA24_0==48||LA24_0==52||LA24_0==55||LA24_0==59||LA24_0==65||LA24_0==68||LA24_0==71||LA24_0==73||LA24_0==79||LA24_0==83||LA24_0==91||LA24_0==DOUBLE))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:190:33: b= expr_list
					{
					DebugLocation(190, 33);
					PushFollow(Follow._expr_list_in_new_expr785);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(24); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(191, 2);

						value = new ExprNew("()", a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:194:4: ^( Expr_New_Array a= type_name (b= expr_list )? )
				{
				DebugLocation(194, 4);
				DebugLocation(194, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr796); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(194, 22);
				PushFollow(Follow._type_name_in_new_expr800);
				a=type_name();
				PopFollow();

				DebugLocation(194, 34);
				// SugarWalker.g:194:34: (b= expr_list )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==Expr_Access||LA25_0==Expr_Bin||(LA25_0>=Expr_Call && LA25_0<=Expr_Prefix)||(LA25_0>=Expr_Suffix && LA25_0<=Expr_Tuple)||LA25_0==IDENT||LA25_0==INT||LA25_0==Match_Tuple||LA25_0==STRING||LA25_0==45||LA25_0==48||LA25_0==52||LA25_0==55||LA25_0==59||LA25_0==65||LA25_0==68||LA25_0==71||LA25_0==73||LA25_0==79||LA25_0==83||LA25_0==91||LA25_0==DOUBLE))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:194:34: b= expr_list
					{
					DebugLocation(194, 34);
					PushFollow(Follow._expr_list_in_new_expr804);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(25); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(195, 2);

						value = new ExprNew("[]", a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 21);
			LeaveRule("new_expr", 21);
			LeaveRule_new_expr();
		}
		DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_call_with_expr();
	partial void LeaveRule_call_with_expr();

	// $ANTLR start "call_with_expr"
	// SugarWalker.g:200:1: call_with_expr returns [ExprCall value] : ^( Expr_Call_With a= expr b= IDENT (c= expr_list )? ) ;
	[GrammarRule("call_with_expr")]
	private ExprCall call_with_expr()
	{
		EnterRule_call_with_expr();
		EnterRule("call_with_expr", 22);
		TraceIn("call_with_expr", 22);
		ExprCall value = default(ExprCall);


		CommonTree b = default(CommonTree);
		Expr a = default(Expr);
		List<Expr> c = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_with_expr");
		DebugLocation(200, 1);
		try
		{
			// SugarWalker.g:201:2: ( ^( Expr_Call_With a= expr b= IDENT (c= expr_list )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:201:4: ^( Expr_Call_With a= expr b= IDENT (c= expr_list )? )
			{
			DebugLocation(201, 4);
			DebugLocation(201, 6);
			Match(input,Expr_Call_With,Follow._Expr_Call_With_in_call_with_expr825); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(201, 22);
			PushFollow(Follow._expr_in_call_with_expr829);
			a=expr();
			PopFollow();

			DebugLocation(201, 29);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_call_with_expr833); 
			DebugLocation(201, 37);
			// SugarWalker.g:201:37: (c= expr_list )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==Expr_Access||LA27_0==Expr_Bin||(LA27_0>=Expr_Call && LA27_0<=Expr_Prefix)||(LA27_0>=Expr_Suffix && LA27_0<=Expr_Tuple)||LA27_0==IDENT||LA27_0==INT||LA27_0==Match_Tuple||LA27_0==STRING||LA27_0==45||LA27_0==48||LA27_0==52||LA27_0==55||LA27_0==59||LA27_0==65||LA27_0==68||LA27_0==71||LA27_0==73||LA27_0==79||LA27_0==83||LA27_0==91||LA27_0==DOUBLE))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:201:37: c= expr_list
				{
				DebugLocation(201, 37);
				PushFollow(Follow._expr_list_in_call_with_expr837);
				c=expr_list();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(202, 2);

					List<Expr> Args = new List<Expr>();
					Args.Add(a);
					if (c != null)
					{
						foreach (var item in c)
						{
							Args.Add(item);
						}
					}
					value = new ExprCall(new ExprConst(b.Text), Args);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_with_expr", 22);
			LeaveRule("call_with_expr", 22);
			LeaveRule_call_with_expr();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "call_with_expr"); }
		return value;

	}
	// $ANTLR end "call_with_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:216:1: expr returns [Expr value] : (tuple= expr_tuple |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix op= Infix_Func a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' text= IDENT b= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text= ( INT | DOUBLE | IDENT | STRING ) );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 23);
		TraceIn("expr", 23);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		MatchTuple match = default(MatchTuple);
		Expr call = default(Expr);
		ExprCall call_with = default(ExprCall);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		ExprNew expr_new = default(ExprNew);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(216, 1);
		try
		{
			// SugarWalker.g:217:5: (tuple= expr_tuple |match= match_tuple |call= call_expr |call_with= call_with_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Infix op= Infix_Func a= expr b= expr ) | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr ) | ^( ':=' text= IDENT b= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text= ( INT | DOUBLE | IDENT | STRING ) )
			int alt28=16;
			try { DebugEnterDecision(28, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt28 = 1;
				}
				break;
			case Match_Tuple:
				{
				alt28 = 2;
				}
				break;
			case Expr_Call:
				{
				alt28 = 3;
				}
				break;
			case Expr_Call_With:
				{
				alt28 = 4;
				}
				break;
			case Expr_Dict:
				{
				alt28 = 5;
				}
				break;
			case Expr_Lambda:
				{
				alt28 = 6;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt28 = 7;
				}
				break;
			case Expr_Infix:
				{
				alt28 = 8;
				}
				break;
			case Expr_Cond:
				{
				alt28 = 9;
				}
				break;
			case Expr_Access:
				{
				alt28 = 10;
				}
				break;
			case Expr_Bin:
				{
				alt28 = 11;
				}
				break;
			case 45:
			case 48:
			case 52:
			case 55:
			case 59:
			case 65:
			case 71:
			case 73:
			case 79:
			case 83:
			case 91:
				{
				alt28 = 12;
				}
				break;
			case 68:
				{
				alt28 = 13;
				}
				break;
			case Expr_Suffix:
				{
				alt28 = 14;
				}
				break;
			case Expr_Prefix:
				{
				alt28 = 15;
				}
				break;
			case IDENT:
			case INT:
			case STRING:
			case DOUBLE:
				{
				alt28 = 16;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:217:7: tuple= expr_tuple
				{
				DebugLocation(217, 12);
				PushFollow(Follow._expr_tuple_in_expr862);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(218, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:221:4: match= match_tuple
				{
				DebugLocation(221, 9);
				PushFollow(Follow._match_tuple_in_expr872);
				match=match_tuple();
				PopFollow();

				DebugLocation(222, 2);

						value = match;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:225:4: call= call_expr
				{
				DebugLocation(225, 8);
				PushFollow(Follow._call_expr_in_expr882);
				call=call_expr();
				PopFollow();

				DebugLocation(226, 2);

						value = call;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:229:4: call_with= call_with_expr
				{
				DebugLocation(229, 13);
				PushFollow(Follow._call_with_expr_in_expr892);
				call_with=call_with_expr();
				PopFollow();

				DebugLocation(230, 2);

						value = call_with;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:233:4: dict= dict_expr
				{
				DebugLocation(233, 8);
				PushFollow(Follow._dict_expr_in_expr902);
				dict=dict_expr();
				PopFollow();

				DebugLocation(234, 2);

						value = dict;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:237:4: lambda= lambda_expr
				{
				DebugLocation(237, 10);
				PushFollow(Follow._lambda_expr_in_expr912);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(238, 2);

						value = lambda;
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:241:4: expr_new= new_expr
				{
				DebugLocation(241, 12);
				PushFollow(Follow._new_expr_in_expr922);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(242, 2);

						value = expr_new;
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:245:4: ^( Expr_Infix op= Infix_Func a= expr b= expr )
				{
				DebugLocation(245, 4);
				DebugLocation(245, 6);
				Match(input,Expr_Infix,Follow._Expr_Infix_in_expr931); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(245, 19);
				op=(CommonTree)Match(input,Infix_Func,Follow._Infix_Func_in_expr935); 
				DebugLocation(245, 32);
				PushFollow(Follow._expr_in_expr939);
				a=expr();
				PopFollow();

				DebugLocation(245, 39);
				PushFollow(Follow._expr_in_expr943);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(246, 2);

						value = new ExprInfix(op.Text.Substring(1, op.Text.Length - 2), a, b);
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:249:3: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(249, 3);
				DebugLocation(249, 5);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr952); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(249, 16);
				PushFollow(Follow._expr_in_expr956);
				a=expr();
				PopFollow();

				DebugLocation(249, 23);
				PushFollow(Follow._expr_in_expr960);
				b=expr();
				PopFollow();

				DebugLocation(249, 30);
				PushFollow(Follow._expr_in_expr964);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(250, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:253:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT )
				{
				DebugLocation(253, 4);
				DebugLocation(253, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr974); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(253, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=60 && input.LA(1)<=63)||input.LA(1)==67)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(253, 57);
				PushFollow(Follow._expr_in_expr1000);
				a=expr();
				PopFollow();

				DebugLocation(253, 67);
				text=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr1004); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(254, 2);

						value = new ExprAccess(a, op.Text, text.Text);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:257:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr )
				{
				DebugLocation(257, 4);
				DebugLocation(257, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr1014); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(257, 17);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==43||(input.LA(1)>=46 && input.LA(1)<=47)||input.LA(1)==51||input.LA(1)==53||input.LA(1)==57||input.LA(1)==64||(input.LA(1)>=69 && input.LA(1)<=70)||input.LA(1)==72||input.LA(1)==74||(input.LA(1)>=76 && input.LA(1)<=78)||input.LA(1)==82||input.LA(1)==90||input.LA(1)==92)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(262, 9);
				PushFollow(Follow._expr_in_expr1115);
				a=expr();
				PopFollow();

				DebugLocation(262, 16);
				PushFollow(Follow._expr_in_expr1119);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(263, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// SugarWalker.g:266:4: ^(op= ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) a= expr b= expr )
				{
				DebugLocation(266, 4);
				DebugLocation(266, 8);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==45||input.LA(1)==48||input.LA(1)==52||input.LA(1)==55||input.LA(1)==59||input.LA(1)==65||input.LA(1)==71||input.LA(1)==73||input.LA(1)==79||input.LA(1)==83||input.LA(1)==91)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				Match(input, TokenTypes.Down, null); 
				DebugLocation(266, 88);
				PushFollow(Follow._expr_in_expr1177);
				a=expr();
				PopFollow();

				DebugLocation(266, 95);
				PushFollow(Follow._expr_in_expr1181);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(267, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// SugarWalker.g:270:4: ^( ':=' text= IDENT b= expr )
				{
				DebugLocation(270, 4);
				DebugLocation(270, 6);
				Match(input,68,Follow._68_in_expr1191); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(270, 15);
				text=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr1195); 
				DebugLocation(270, 23);
				PushFollow(Follow._expr_in_expr1199);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(271, 2);

						value = new ExprAlloc("auto", new List<string> { text.Text }, b);
					

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// SugarWalker.g:274:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(274, 4);
				DebugLocation(274, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr1209); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(274, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==54||input.LA(1)==58)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(274, 36);
				PushFollow(Follow._expr_in_expr1223);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(275, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// SugarWalker.g:278:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(278, 4);
				DebugLocation(278, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr1233); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(278, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==42||input.LA(1)==47||input.LA(1)==51||(input.LA(1)>=53 && input.LA(1)<=54)||(input.LA(1)>=57 && input.LA(1)<=58)||input.LA(1)==93)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(278, 72);
				PushFollow(Follow._expr_in_expr1271);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(279, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// SugarWalker.g:282:4: text= ( INT | DOUBLE | IDENT | STRING )
				{
				DebugLocation(282, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==IDENT||input.LA(1)==INT||input.LA(1)==STRING||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(283, 5);

				        value = new ExprConst(text.Text);
				    

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 23);
			LeaveRule("expr", 23);
			LeaveRule_expr();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA12 dfa12;
	private DFA19 dfa19;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa12 = new DFA12( this );
		dfa19 = new DFA19( this );
	}

	private class DFA12 : DFA
	{
		private const string DFA12_eotS =
			"\x4\xFFFF";
		private const string DFA12_eofS =
			"\x4\xFFFF";
		private const string DFA12_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA12_maxS =
			"\x1\x20\x1\x5E\x2\xFFFF";
		private const string DFA12_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA12_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA12_transitionS =
			{
				"\x1\x2\x1A\xFFFF\x1\x1",
				"\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\xC\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\x3\xFFFF\x1\x3\x1\x1\x3\xFFFF\x1\x3\x8\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x7\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA12_eot = DFA.UnpackEncodedString(DFA12_eotS);
		private static readonly short[] DFA12_eof = DFA.UnpackEncodedString(DFA12_eofS);
		private static readonly char[] DFA12_min = DFA.UnpackEncodedStringToUnsignedChars(DFA12_minS);
		private static readonly char[] DFA12_max = DFA.UnpackEncodedStringToUnsignedChars(DFA12_maxS);
		private static readonly short[] DFA12_accept = DFA.UnpackEncodedString(DFA12_acceptS);
		private static readonly short[] DFA12_special = DFA.UnpackEncodedString(DFA12_specialS);
		private static readonly short[][] DFA12_transition;

		static DFA12()
		{
			int numStates = DFA12_transitionS.Length;
			DFA12_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA12_transition[i] = DFA.UnpackEncodedString(DFA12_transitionS[i]);
			}
		}

		public DFA12( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 12;
			this.eot = DFA12_eot;
			this.eof = DFA12_eof;
			this.min = DFA12_min;
			this.max = DFA12_max;
			this.accept = DFA12_accept;
			this.special = DFA12_special;
			this.transition = DFA12_transition;
		}

		public override string Description { get { return "()* loopback of 93:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x4\xFFFF";
		private const string DFA19_eofS =
			"\x4\xFFFF";
		private const string DFA19_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA19_maxS =
			"\x1\x20\x1\x5E\x2\xFFFF";
		private const string DFA19_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA19_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x1\x2\x1A\xFFFF\x1\x1",
				"\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\xC\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\x3\xFFFF\x1\x3\x1\x1\x3\xFFFF\x1\x3\x8\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x7\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "()* loopback of 141:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root85 = new BitSet(new ulong[]{0x38100000002UL});
		public static readonly BitSet _NEWLINE_in_root90 = new BitSet(new ulong[]{0x38100000002UL});
		public static readonly BitSet _func_def_in_node112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Type_IDENT_in_type_name135 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_type_name139 = new BitSet(new ulong[]{0x8UL,0x20UL});
		public static readonly BitSet _69_in_type_name148 = new BitSet(new ulong[]{0x38000000000UL,0x1000UL});
		public static readonly BitSet _type_name_in_type_name160 = new BitSet(new ulong[]{0x38000000000UL,0x1000UL});
		public static readonly BitSet _76_in_type_name170 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Tuple_in_type_name186 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_name195 = new BitSet(new ulong[]{0x38000000008UL});
		public static readonly BitSet _Type_Ref_in_type_name212 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_name216 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Func_Args_in_func_args241 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_func_args246 = new BitSet(new ulong[]{0x89120108A7FFB88UL,0x48088292UL});
		public static readonly BitSet _type_name_in_func_def273 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _IDENT_in_func_def277 = new BitSet(new ulong[]{0x2000000000000UL,0x20UL});
		public static readonly BitSet _69_in_func_def280 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _IDENT_in_func_def285 = new BitSet(new ulong[]{0x2000000UL,0x1000UL});
		public static readonly BitSet _76_in_func_def291 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _49_in_func_def295 = new BitSet(new ulong[]{0x4000000800000UL});
		public static readonly BitSet _func_args_in_func_def300 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _50_in_func_def306 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _stmt_block_in_func_def313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block337 = new BitSet(new ulong[]{0x100000020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block340 = new BitSet(new ulong[]{0x89120118A7FFB80UL,0x48088292UL});
		public static readonly BitSet _stmt_in_stmt_block345 = new BitSet(new ulong[]{0x100000020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block351 = new BitSet(new ulong[]{0x100000020UL});
		public static readonly BitSet _DEDENT_in_stmt_block354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_stmt_alloc431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Return_in_stmt_return449 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return454 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ident_List_in_ident_list500 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_ident_list505 = new BitSet(new ulong[]{0x2000008UL});
		public static readonly BitSet _Expr_Alloc_in_alloc_expr527 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr531 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_list_in_alloc_expr535 = new BitSet(new ulong[]{0x89120108A6FFA88UL,0x48088292UL});
		public static readonly BitSet _expr_in_alloc_expr540 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDENT_in_block_expr566 = new BitSet(new ulong[]{0x100000020UL});
		public static readonly BitSet _NEWLINE_in_block_expr569 = new BitSet(new ulong[]{0x89120118A7FFB80UL,0x48088292UL});
		public static readonly BitSet _stmt_in_block_expr574 = new BitSet(new ulong[]{0x100000020UL});
		public static readonly BitSet _NEWLINE_in_block_expr580 = new BitSet(new ulong[]{0x100000020UL});
		public static readonly BitSet _DEDENT_in_block_expr583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple608 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple613 = new BitSet(new ulong[]{0x89120108A6FFA88UL,0x48088292UL});
		public static readonly BitSet _Match_Tuple_in_match_tuple640 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_match_tuple645 = new BitSet(new ulong[]{0x2000008UL});
		public static readonly BitSet _expr_in_expr_list673 = new BitSet(new ulong[]{0x89120108A6FFA82UL,0x48088292UL});
		public static readonly BitSet _Expr_Call_in_call_expr693 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr697 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_list_in_call_expr701 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr721 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr725 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_dict_expr729 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr749 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr753 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_lambda_expr757 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr777 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr781 = new BitSet(new ulong[]{0x89120108A6FFA88UL,0x48088292UL});
		public static readonly BitSet _expr_list_in_new_expr785 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr796 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr800 = new BitSet(new ulong[]{0x89120108A6FFA88UL,0x48088292UL});
		public static readonly BitSet _expr_list_in_new_expr804 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Call_With_in_call_with_expr825 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_with_expr829 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _IDENT_in_call_with_expr833 = new BitSet(new ulong[]{0x89120108A6FFA88UL,0x48088292UL});
		public static readonly BitSet _expr_list_in_call_with_expr837 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_tuple_in_expr872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_with_expr_in_expr892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Infix_in_expr931 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _Infix_Func_in_expr935 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr939 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr943 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Cond_in_expr952 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr956 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr960 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr964 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr974 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr978 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr1000 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _IDENT_in_expr1004 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr1014 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1018 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr1115 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr1119 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr1131 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1177 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr1181 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _68_in_expr1191 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_expr1195 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr1199 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr1209 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1213 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr1223 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr1233 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1237 = new BitSet(new ulong[]{0x89120108A6FFA80UL,0x48088292UL});
		public static readonly BitSet _expr_in_expr1271 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr1282 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
