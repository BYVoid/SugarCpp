//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarWalker.g 2013-04-29 10:45:22

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Expr_Access", "Expr_Alloc", "Expr_Alloc_Auto", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Cond", "Expr_Dict", "Expr_Lambda", "Expr_Match_Tuple", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_If", "Stmt_While", "Type_IDENT", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'new'", "'return'", "'|'", "'|='", "'||'", "'~'", "DOUBLE", "';'"
	};
	public const int EOF=-1;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Expr_Access=7;
	public const int Expr_Alloc=8;
	public const int Expr_Alloc_Auto=9;
	public const int Expr_Bin=10;
	public const int Expr_Block=11;
	public const int Expr_Call=12;
	public const int Expr_Cond=13;
	public const int Expr_Dict=14;
	public const int Expr_Lambda=15;
	public const int Expr_Match_Tuple=16;
	public const int Expr_New_Array=17;
	public const int Expr_New_Type=18;
	public const int Expr_Prefix=19;
	public const int Expr_Return=20;
	public const int Expr_Suffix=21;
	public const int Expr_Tuple=22;
	public const int Func_Args=23;
	public const int Func_Def=24;
	public const int IDENT=25;
	public const int INDENT=26;
	public const int INT=27;
	public const int Left_Bracket=28;
	public const int NEWLINE=29;
	public const int Right_Bracket=30;
	public const int Root=31;
	public const int SP=32;
	public const int STRING=33;
	public const int Stmt_If=34;
	public const int Stmt_While=35;
	public const int Type_IDENT=36;
	public const int Type_Tuple=37;
	public const int T__87=87;
	public const int DOUBLE=86;

	public SugarWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return SugarWalker.tokenNames; } }
	public override string GrammarFileName { get { return "SugarWalker.g"; } }




	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarWalker.g:23:8: public root returns [Root value] : (a= node ( NEWLINE )* )+ ;
	[GrammarRule("root")]
	public Root root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		Root value = default(Root);


		AstNode a = default(AstNode);


			value = new Root();

		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(23, 1);
		try
		{
			// SugarWalker.g:28:2: ( (a= node ( NEWLINE )* )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:28:4: (a= node ( NEWLINE )* )+
			{
			DebugLocation(28, 4);
			// SugarWalker.g:28:4: (a= node ( NEWLINE )* )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>=Type_IDENT && LA2_0<=Type_Tuple)))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:28:5: a= node ( NEWLINE )*
					{
					DebugLocation(28, 7);
					PushFollow(Follow._node_in_root85);
					a=node();
					PopFollow();

					DebugLocation(28, 15);
					 value.List.Add(a); 
					DebugLocation(28, 39);
					// SugarWalker.g:28:39: ( NEWLINE )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_0 = input.LA(1);

						if ((LA1_0==NEWLINE))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:28:39: NEWLINE
							{
							DebugLocation(28, 39);
							Match(input,NEWLINE,Follow._NEWLINE_in_root90); 

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(29, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return value;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarWalker.g:31:1: node returns [AstNode value] : a= func_def ;
	[GrammarRule("node")]
	private AstNode node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstNode value = default(AstNode);


		FuncDef a = default(FuncDef);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(31, 1);
		try
		{
			// SugarWalker.g:32:2: (a= func_def )
			DebugEnterAlt(1);
			// SugarWalker.g:32:4: a= func_def
			{
			DebugLocation(32, 6);
			PushFollow(Follow._func_def_in_node112);
			a=func_def();
			PopFollow();

			DebugLocation(32, 17);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(33, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return value;

	}
	// $ANTLR end "node"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarWalker.g:35:1: type_name returns [string value] : ( ^( Type_IDENT a= IDENT ) | ^( Type_Tuple (b= type_name )+ ) );
	[GrammarRule("type_name")]
	private string type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 3);
		TraceIn("type_name", 3);
		string value = default(string);


		CommonTree a = default(CommonTree);
		string b = default(string);


			value = "";

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(35, 1);
		try
		{
			// SugarWalker.g:40:2: ( ^( Type_IDENT a= IDENT ) | ^( Type_Tuple (b= type_name )+ ) )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==Type_IDENT))
			{
				alt4 = 1;
			}
			else if ((LA4_0==Type_Tuple))
			{
				alt4 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:40:4: ^( Type_IDENT a= IDENT )
				{
				DebugLocation(40, 4);
				DebugLocation(40, 6);
				Match(input,Type_IDENT,Follow._Type_IDENT_in_type_name135); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(40, 18);
				a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_type_name139); 
				DebugLocation(40, 25);
				 value+=a.Text; 

				Match(input, TokenTypes.Up, null); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:41:4: ^( Type_Tuple (b= type_name )+ )
				{
				DebugLocation(41, 4);
				bool isFirst = true; value += "std::tuple<";
				DebugLocation(42, 4);
				DebugLocation(42, 6);
				Match(input,Type_Tuple,Follow._Type_Tuple_in_type_name153); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(43, 5);
				// SugarWalker.g:43:5: (b= type_name )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>=Type_IDENT && LA3_0<=Type_Tuple)))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:43:6: b= type_name
						{
						DebugLocation(43, 7);
						PushFollow(Follow._type_name_in_type_name162);
						b=type_name();
						PopFollow();

						DebugLocation(44, 3);

									if (!isFirst) value += ",";
									isFirst = false;
									value += b;
								

						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(49, 3);

							value += ">";
						

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("type_name", 3);
			LeaveRule("type_name", 3);
			LeaveRule_type_name();
		}
		DebugLocation(52, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return value;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarWalker.g:54:1: func_args returns [List<Stmt> value] : ^( Func_Args (a= stmt )* ) ;
	[GrammarRule("func_args")]
	private List<Stmt> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 4);
		TraceIn("func_args", 4);
		List<Stmt> value = default(List<Stmt>);


		Stmt a = default(Stmt);


			value = new List<Stmt>();

		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(54, 1);
		try
		{
			// SugarWalker.g:59:2: ( ^( Func_Args (a= stmt )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:59:4: ^( Func_Args (a= stmt )* )
			{
			DebugLocation(59, 4);
			DebugLocation(59, 6);
			Match(input,Func_Args,Follow._Func_Args_in_func_args194); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(59, 16);
				// SugarWalker.g:59:16: (a= stmt )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if (((LA5_0>=Expr_Alloc && LA5_0<=Expr_Alloc_Auto)||LA5_0==Expr_Return))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:59:17: a= stmt
						{
						DebugLocation(59, 18);
						PushFollow(Follow._stmt_in_func_args199);
						a=stmt();
						PopFollow();

						DebugLocation(59, 24);
						 value.Add(a); 

						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_args", 4);
			LeaveRule("func_args", 4);
			LeaveRule_func_args();
		}
		DebugLocation(60, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return value;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarWalker.g:62:1: func_def returns [FuncDef value] : a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (args= func_args )? ')' (e= stmt_block ) ;
	[GrammarRule("func_def")]
	private FuncDef func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 5);
		TraceIn("func_def", 5);
		FuncDef value = default(FuncDef);


		CommonTree b = default(CommonTree);
		CommonTree x = default(CommonTree);
		string a = default(string);
		List<Stmt> args = default(List<Stmt>);
		StmtBlock e = default(StmtBlock);


			value = new FuncDef();

		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(62, 1);
		try
		{
			// SugarWalker.g:67:2: (a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (args= func_args )? ')' (e= stmt_block ) )
			DebugEnterAlt(1);
			// SugarWalker.g:67:4: a= type_name b= IDENT ( '<' (x= IDENT )+ '>' )? '(' (args= func_args )? ')' (e= stmt_block )
			{
			DebugLocation(67, 5);
			PushFollow(Follow._type_name_in_func_def226);
			a=type_name();
			PopFollow();

			DebugLocation(67, 17);
			b=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def230); 
			DebugLocation(67, 24);
			// SugarWalker.g:67:24: ( '<' (x= IDENT )+ '>' )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==64))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:67:25: '<' (x= IDENT )+ '>'
				{
				DebugLocation(67, 25);
				Match(input,64,Follow._64_in_func_def233); 
				DebugLocation(67, 29);
				// SugarWalker.g:67:29: (x= IDENT )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==IDENT))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:67:30: x= IDENT
						{
						DebugLocation(67, 31);
						x=(CommonTree)Match(input,IDENT,Follow._IDENT_in_func_def238); 
						DebugLocation(67, 38);
						value.GenericParameter.Add(x.Text); 

						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(67, 80);
				Match(input,71,Follow._71_in_func_def244); 

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(67, 86);
			Match(input,45,Follow._45_in_func_def248); 
			DebugLocation(67, 90);
			// SugarWalker.g:67:90: (args= func_args )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==Func_Args))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:67:91: args= func_args
				{
				DebugLocation(67, 95);
				PushFollow(Follow._func_args_in_func_def253);
				args=func_args();
				PopFollow();

				DebugLocation(67, 106);
				 value.Args = args; 

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(67, 132);
			Match(input,46,Follow._46_in_func_def259); 
			DebugLocation(68, 2);
			// SugarWalker.g:68:2: (e= stmt_block )
			DebugEnterAlt(1);
			// SugarWalker.g:68:4: e= stmt_block
			{
			DebugLocation(68, 5);
			PushFollow(Follow._stmt_block_in_func_def266);
			e=stmt_block();
			PopFollow();

			DebugLocation(69, 2);

					value.Type = a;
					value.Name = b.Text;
					value.Body = e;
				

			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("func_def", 5);
			LeaveRule("func_def", 5);
			LeaveRule_func_def();
		}
		DebugLocation(74, 1);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return value;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarWalker.g:76:1: stmt_block returns [StmtBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("stmt_block")]
	private StmtBlock stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 6);
		TraceIn("stmt_block", 6);
		StmtBlock value = default(StmtBlock);


		Stmt a = default(Stmt);


			value = new StmtBlock();

		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(76, 4);
		try
		{
			// SugarWalker.g:81:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:81:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(81, 4);
			Match(input,INDENT,Follow._INDENT_in_stmt_block290); 
			DebugLocation(81, 11);
			// SugarWalker.g:81:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				try
				{
					alt10 = dfa10.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:81:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(81, 12);
					// SugarWalker.g:81:12: ( NEWLINE )+
					int cnt9=0;
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0==NEWLINE))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:81:12: NEWLINE
							{
							DebugLocation(81, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block293); 

							}
							break;

						default:
							if (cnt9 >= 1)
								goto loop9;

							EarlyExitException eee9 = new EarlyExitException( 9, input );
							DebugRecognitionException(eee9);
							throw eee9;
						}
						cnt9++;
					}
					loop9:
						;

					} finally { DebugExitSubRule(9); }

					DebugLocation(81, 22);
					PushFollow(Follow._stmt_in_stmt_block298);
					a=stmt();
					PopFollow();

					DebugLocation(81, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(81, 58);
			// SugarWalker.g:81:58: ( NEWLINE )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:81:58: NEWLINE
					{
					DebugLocation(81, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block304); 

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(81, 67);
			Match(input,DEDENT,Follow._DEDENT_in_stmt_block307); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_block", 6);
			LeaveRule("stmt_block", 6);
			LeaveRule_stmt_block();
		}
		DebugLocation(82, 4);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return value;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarWalker.g:84:1: stmt returns [Stmt value] : a= stmt_expr ;
	[GrammarRule("stmt")]
	private Stmt stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 7);
		TraceIn("stmt", 7);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(84, 1);
		try
		{
			// SugarWalker.g:85:2: (a= stmt_expr )
			DebugEnterAlt(1);
			// SugarWalker.g:85:4: a= stmt_expr
			{
			DebugLocation(85, 5);
			PushFollow(Follow._stmt_expr_in_stmt328);
			a=stmt_expr();
			PopFollow();

			DebugLocation(85, 16);
			 value = a; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt", 7);
			LeaveRule("stmt", 7);
			LeaveRule_stmt();
		}
		DebugLocation(86, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return value;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarWalker.g:88:1: stmt_expr returns [Stmt value] : (a= stmt_alloc |a= stmt_return );
	[GrammarRule("stmt_expr")]
	private Stmt stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 8);
		TraceIn("stmt_expr", 8);
		Stmt value = default(Stmt);


		Stmt a = default(Stmt);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(88, 1);
		try
		{
			// SugarWalker.g:89:2: (a= stmt_alloc |a= stmt_return )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if (((LA12_0>=Expr_Alloc && LA12_0<=Expr_Alloc_Auto)))
			{
				alt12 = 1;
			}
			else if ((LA12_0==Expr_Return))
			{
				alt12 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:89:4: a= stmt_alloc
				{
				DebugLocation(89, 5);
				PushFollow(Follow._stmt_alloc_in_stmt_expr347);
				a=stmt_alloc();
				PopFollow();

				DebugLocation(89, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:90:4: a= stmt_return
				{
				DebugLocation(90, 5);
				PushFollow(Follow._stmt_return_in_stmt_expr356);
				a=stmt_return();
				PopFollow();

				DebugLocation(90, 18);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_expr", 8);
			LeaveRule("stmt_expr", 8);
			LeaveRule_stmt_expr();
		}
		DebugLocation(91, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return value;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarWalker.g:93:1: stmt_alloc returns [Stmt value] : (a= alloc_expr |a= alloc_expr_auto );
	[GrammarRule("stmt_alloc")]
	private Stmt stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 9);
		TraceIn("stmt_alloc", 9);
		Stmt value = default(Stmt);


		StmtAlloc a = default(StmtAlloc);

		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(93, 1);
		try
		{
			// SugarWalker.g:94:2: (a= alloc_expr |a= alloc_expr_auto )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==Expr_Alloc))
			{
				alt13 = 1;
			}
			else if ((LA13_0==Expr_Alloc_Auto))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:94:4: a= alloc_expr
				{
				DebugLocation(94, 5);
				PushFollow(Follow._alloc_expr_in_stmt_alloc375);
				a=alloc_expr();
				PopFollow();

				DebugLocation(94, 17);
				 value = a; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:95:4: a= alloc_expr_auto
				{
				DebugLocation(95, 5);
				PushFollow(Follow._alloc_expr_auto_in_stmt_alloc384);
				a=alloc_expr_auto();
				PopFollow();

				DebugLocation(95, 22);
				 value = a; 

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_alloc", 9);
			LeaveRule("stmt_alloc", 9);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return value;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarWalker.g:98:1: stmt_return returns [Stmt value] : ^( Expr_Return (a= expr )? ) ;
	[GrammarRule("stmt_return")]
	private Stmt stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 10);
		TraceIn("stmt_return", 10);
		Stmt value = default(Stmt);


		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(98, 1);
		try
		{
			// SugarWalker.g:99:2: ( ^( Expr_Return (a= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:99:4: ^( Expr_Return (a= expr )? )
			{
			DebugLocation(99, 4);
			DebugLocation(99, 6);
			Match(input,Expr_Return,Follow._Expr_Return_in_stmt_return402); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(99, 18);
				// SugarWalker.g:99:18: (a= expr )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==Expr_Access||LA14_0==Expr_Bin||(LA14_0>=Expr_Call && LA14_0<=Expr_Lambda)||(LA14_0>=Expr_New_Array && LA14_0<=Expr_Prefix)||(LA14_0>=Expr_Suffix && LA14_0<=Expr_Tuple)||LA14_0==IDENT||LA14_0==INT||LA14_0==STRING||LA14_0==DOUBLE))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:99:19: a= expr
					{
					DebugLocation(99, 20);
					PushFollow(Follow._expr_in_stmt_return407);
					a=expr();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				Match(input, TokenTypes.Up, null); 
			}

			DebugLocation(100, 2);

					value = new ExprReturn(a);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stmt_return", 10);
			LeaveRule("stmt_return", 10);
			LeaveRule_stmt_return();
		}
		DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return value;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarWalker.g:105:1: ident returns [string value] : a= IDENT ;
	[GrammarRule("ident")]
	private string ident()
	{
		EnterRule_ident();
		EnterRule("ident", 11);
		TraceIn("ident", 11);
		string value = default(string);


		CommonTree a = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(105, 1);
		try
		{
			// SugarWalker.g:106:2: (a= IDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:106:4: a= IDENT
			{
			DebugLocation(106, 5);
			a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_ident430); 
			DebugLocation(106, 12);
			 value = a.Text; 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident", 11);
			LeaveRule("ident", 11);
			LeaveRule_ident();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return value;

	}
	// $ANTLR end "ident"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarWalker.g:109:1: ident_list returns [List<string> value] : a= ident ( ( ',' a= ident )+ ';' )? ;
	[GrammarRule("ident_list")]
	private List<string> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 12);
		TraceIn("ident_list", 12);
		List<string> value = default(List<string>);


		string a = default(string);


			value = new List<string>();

		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(109, 1);
		try
		{
			// SugarWalker.g:114:2: (a= ident ( ( ',' a= ident )+ ';' )? )
			DebugEnterAlt(1);
			// SugarWalker.g:114:4: a= ident ( ( ',' a= ident )+ ';' )?
			{
			DebugLocation(114, 5);
			PushFollow(Follow._ident_in_ident_list454);
			a=ident();
			PopFollow();

			DebugLocation(114, 12);
			 value.Add(a); 
			DebugLocation(114, 31);
			// SugarWalker.g:114:31: ( ( ',' a= ident )+ ';' )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==52))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:114:32: ( ',' a= ident )+ ';'
				{
				DebugLocation(114, 32);
				// SugarWalker.g:114:32: ( ',' a= ident )+
				int cnt15=0;
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==52))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:114:33: ',' a= ident
						{
						DebugLocation(114, 33);
						Match(input,52,Follow._52_in_ident_list460); 
						DebugLocation(114, 38);
						PushFollow(Follow._ident_in_ident_list464);
						a=ident();
						PopFollow();

						DebugLocation(114, 45);
						 value.Add(a); 

						}
						break;

					default:
						if (cnt15 >= 1)
							goto loop15;

						EarlyExitException eee15 = new EarlyExitException( 15, input );
						DebugRecognitionException(eee15);
						throw eee15;
					}
					cnt15++;
				}
				loop15:
					;

				} finally { DebugExitSubRule(15); }

				DebugLocation(114, 66);
				Match(input,87,Follow._87_in_ident_list470); 

				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ident_list", 12);
			LeaveRule("ident_list", 12);
			LeaveRule_ident_list();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return value;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarWalker.g:117:1: alloc_expr returns [StmtAlloc value] : ^( Expr_Alloc a= type_name b= ident (c= expr )? ) ;
	[GrammarRule("alloc_expr")]
	private StmtAlloc alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 13);
		TraceIn("alloc_expr", 13);
		StmtAlloc value = default(StmtAlloc);


		string a = default(string);
		string b = default(string);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(117, 1);
		try
		{
			// SugarWalker.g:118:2: ( ^( Expr_Alloc a= type_name b= ident (c= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:118:4: ^( Expr_Alloc a= type_name b= ident (c= expr )? )
			{
			DebugLocation(118, 4);
			DebugLocation(118, 6);
			Match(input,Expr_Alloc,Follow._Expr_Alloc_in_alloc_expr489); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(118, 18);
			PushFollow(Follow._type_name_in_alloc_expr493);
			a=type_name();
			PopFollow();

			DebugLocation(118, 30);
			PushFollow(Follow._ident_in_alloc_expr497);
			b=ident();
			PopFollow();

			DebugLocation(118, 37);
			// SugarWalker.g:118:37: (c= expr )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Expr_Access||LA17_0==Expr_Bin||(LA17_0>=Expr_Call && LA17_0<=Expr_Lambda)||(LA17_0>=Expr_New_Array && LA17_0<=Expr_Prefix)||(LA17_0>=Expr_Suffix && LA17_0<=Expr_Tuple)||LA17_0==IDENT||LA17_0==INT||LA17_0==STRING||LA17_0==DOUBLE))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:118:38: c= expr
				{
				DebugLocation(118, 39);
				PushFollow(Follow._expr_in_alloc_expr502);
				c=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(119, 2);

					value = new StmtAlloc();
					value.Type = a;
					value.Name = b;
					value.Expr = c;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr", 13);
			LeaveRule("alloc_expr", 13);
			LeaveRule_alloc_expr();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return value;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_alloc_expr_auto();
	partial void LeaveRule_alloc_expr_auto();

	// $ANTLR start "alloc_expr_auto"
	// SugarWalker.g:127:1: alloc_expr_auto returns [StmtAlloc value] : ^( Expr_Alloc_Auto a= ident (b= expr )? ) ;
	[GrammarRule("alloc_expr_auto")]
	private StmtAlloc alloc_expr_auto()
	{
		EnterRule_alloc_expr_auto();
		EnterRule("alloc_expr_auto", 14);
		TraceIn("alloc_expr_auto", 14);
		StmtAlloc value = default(StmtAlloc);


		string a = default(string);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "alloc_expr_auto");
		DebugLocation(127, 1);
		try
		{
			// SugarWalker.g:128:2: ( ^( Expr_Alloc_Auto a= ident (b= expr )? ) )
			DebugEnterAlt(1);
			// SugarWalker.g:128:4: ^( Expr_Alloc_Auto a= ident (b= expr )? )
			{
			DebugLocation(128, 4);
			DebugLocation(128, 6);
			Match(input,Expr_Alloc_Auto,Follow._Expr_Alloc_Auto_in_alloc_expr_auto524); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(128, 23);
			PushFollow(Follow._ident_in_alloc_expr_auto528);
			a=ident();
			PopFollow();

			DebugLocation(128, 30);
			// SugarWalker.g:128:30: (b= expr )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==Expr_Access||LA18_0==Expr_Bin||(LA18_0>=Expr_Call && LA18_0<=Expr_Lambda)||(LA18_0>=Expr_New_Array && LA18_0<=Expr_Prefix)||(LA18_0>=Expr_Suffix && LA18_0<=Expr_Tuple)||LA18_0==IDENT||LA18_0==INT||LA18_0==STRING||LA18_0==DOUBLE))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:128:31: b= expr
				{
				DebugLocation(128, 32);
				PushFollow(Follow._expr_in_alloc_expr_auto533);
				b=expr();
				PopFollow();


				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			Match(input, TokenTypes.Up, null); 

			DebugLocation(129, 2);

					value = new StmtAlloc();
					value.Type = "auto";
					value.Name = a;
					value.Expr = b;
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("alloc_expr_auto", 14);
			LeaveRule("alloc_expr_auto", 14);
			LeaveRule_alloc_expr_auto();
		}
		DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr_auto"); }
		return value;

	}
	// $ANTLR end "alloc_expr_auto"

	partial void EnterRule_block_expr();
	partial void LeaveRule_block_expr();

	// $ANTLR start "block_expr"
	// SugarWalker.g:137:1: block_expr returns [ExprBlock value] : INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("block_expr")]
	private ExprBlock block_expr()
	{
		EnterRule_block_expr();
		EnterRule("block_expr", 15);
		TraceIn("block_expr", 15);
		ExprBlock value = default(ExprBlock);


		Stmt a = default(Stmt);


			value = new ExprBlock();

		try { DebugEnterRule(GrammarFileName, "block_expr");
		DebugLocation(137, 4);
		try
		{
			// SugarWalker.g:142:2: ( INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarWalker.g:142:4: INDENT ( ( NEWLINE )+ a= stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(142, 4);
			Match(input,INDENT,Follow._INDENT_in_block_expr559); 
			DebugLocation(142, 11);
			// SugarWalker.g:142:11: ( ( NEWLINE )+ a= stmt )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				try
				{
					alt20 = dfa20.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:142:12: ( NEWLINE )+ a= stmt
					{
					DebugLocation(142, 12);
					// SugarWalker.g:142:12: ( NEWLINE )+
					int cnt19=0;
					try { DebugEnterSubRule(19);
					while (true)
					{
						int alt19=2;
						try { DebugEnterDecision(19, false);
						int LA19_0 = input.LA(1);

						if ((LA19_0==NEWLINE))
						{
							alt19 = 1;
						}


						} finally { DebugExitDecision(19); }
						switch (alt19)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarWalker.g:142:12: NEWLINE
							{
							DebugLocation(142, 12);
							Match(input,NEWLINE,Follow._NEWLINE_in_block_expr562); 

							}
							break;

						default:
							if (cnt19 >= 1)
								goto loop19;

							EarlyExitException eee19 = new EarlyExitException( 19, input );
							DebugRecognitionException(eee19);
							throw eee19;
						}
						cnt19++;
					}
					loop19:
						;

					} finally { DebugExitSubRule(19); }

					DebugLocation(142, 22);
					PushFollow(Follow._stmt_in_block_expr567);
					a=stmt();
					PopFollow();

					DebugLocation(142, 28);
					 value.StmtList.Add(a); 

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }

			DebugLocation(142, 58);
			// SugarWalker.g:142:58: ( NEWLINE )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==NEWLINE))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:142:58: NEWLINE
					{
					DebugLocation(142, 58);
					Match(input,NEWLINE,Follow._NEWLINE_in_block_expr573); 

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(142, 67);
			Match(input,DEDENT,Follow._DEDENT_in_block_expr576); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block_expr", 15);
			LeaveRule("block_expr", 15);
			LeaveRule_block_expr();
		}
		DebugLocation(143, 4);
		} finally { DebugExitRule(GrammarFileName, "block_expr"); }
		return value;

	}
	// $ANTLR end "block_expr"

	partial void EnterRule_expr_tuple();
	partial void LeaveRule_expr_tuple();

	// $ANTLR start "expr_tuple"
	// SugarWalker.g:145:1: expr_tuple returns [ExprTuple value] : ^( Expr_Tuple (a= expr )+ ) ;
	[GrammarRule("expr_tuple")]
	private ExprTuple expr_tuple()
	{
		EnterRule_expr_tuple();
		EnterRule("expr_tuple", 16);
		TraceIn("expr_tuple", 16);
		ExprTuple value = default(ExprTuple);


		Expr a = default(Expr);


			value = new ExprTuple();

		try { DebugEnterRule(GrammarFileName, "expr_tuple");
		DebugLocation(145, 1);
		try
		{
			// SugarWalker.g:150:2: ( ^( Expr_Tuple (a= expr )+ ) )
			DebugEnterAlt(1);
			// SugarWalker.g:150:4: ^( Expr_Tuple (a= expr )+ )
			{
			DebugLocation(150, 4);
			DebugLocation(150, 6);
			Match(input,Expr_Tuple,Follow._Expr_Tuple_in_expr_tuple601); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(150, 17);
			// SugarWalker.g:150:17: (a= expr )+
			int cnt22=0;
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==Expr_Access||LA22_0==Expr_Bin||(LA22_0>=Expr_Call && LA22_0<=Expr_Lambda)||(LA22_0>=Expr_New_Array && LA22_0<=Expr_Prefix)||(LA22_0>=Expr_Suffix && LA22_0<=Expr_Tuple)||LA22_0==IDENT||LA22_0==INT||LA22_0==STRING||LA22_0==DOUBLE))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:150:18: a= expr
					{
					DebugLocation(150, 19);
					PushFollow(Follow._expr_in_expr_tuple606);
					a=expr();
					PopFollow();

					DebugLocation(150, 25);
					 value.ExprList.Add(a); 

					}
					break;

				default:
					if (cnt22 >= 1)
						goto loop22;

					EarlyExitException eee22 = new EarlyExitException( 22, input );
					DebugRecognitionException(eee22);
					throw eee22;
				}
				cnt22++;
			}
			loop22:
				;

			} finally { DebugExitSubRule(22); }


			Match(input, TokenTypes.Up, null); 


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_tuple", 16);
			LeaveRule("expr_tuple", 16);
			LeaveRule_expr_tuple();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_tuple"); }
		return value;

	}
	// $ANTLR end "expr_tuple"

	partial void EnterRule_expr_match_tuple();
	partial void LeaveRule_expr_match_tuple();

	// $ANTLR start "expr_match_tuple"
	// SugarWalker.g:153:1: expr_match_tuple returns [MatchTuple value] : ^( Expr_Match_Tuple (a= IDENT )* ) ;
	[GrammarRule("expr_match_tuple")]
	private MatchTuple expr_match_tuple()
	{
		EnterRule_expr_match_tuple();
		EnterRule("expr_match_tuple", 17);
		TraceIn("expr_match_tuple", 17);
		MatchTuple value = default(MatchTuple);


		CommonTree a = default(CommonTree);


			value = new MatchTuple();

		try { DebugEnterRule(GrammarFileName, "expr_match_tuple");
		DebugLocation(153, 1);
		try
		{
			// SugarWalker.g:158:2: ( ^( Expr_Match_Tuple (a= IDENT )* ) )
			DebugEnterAlt(1);
			// SugarWalker.g:158:4: ^( Expr_Match_Tuple (a= IDENT )* )
			{
			DebugLocation(158, 4);
			DebugLocation(158, 6);
			Match(input,Expr_Match_Tuple,Follow._Expr_Match_Tuple_in_expr_match_tuple633); 

			if (input.LA(1) == TokenTypes.Down)
			{
				Match(input, TokenTypes.Down, null); 
				DebugLocation(158, 23);
				// SugarWalker.g:158:23: (a= IDENT )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==IDENT))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarWalker.g:158:24: a= IDENT
						{
						DebugLocation(158, 25);
						a=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr_match_tuple638); 
						DebugLocation(158, 32);
						 value.VarList.Add(a.Text); 

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }


				Match(input, TokenTypes.Up, null); 
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_match_tuple", 17);
			LeaveRule("expr_match_tuple", 17);
			LeaveRule_expr_match_tuple();
		}
		DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_match_tuple"); }
		return value;

	}
	// $ANTLR end "expr_match_tuple"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarWalker.g:161:1: expr_list returns [List<Expr> value] : (a= expr )+ ;
	[GrammarRule("expr_list")]
	private List<Expr> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 18);
		TraceIn("expr_list", 18);
		List<Expr> value = default(List<Expr>);


		Expr a = default(Expr);


			value = new List<Expr>();

		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(161, 1);
		try
		{
			// SugarWalker.g:166:2: ( (a= expr )+ )
			DebugEnterAlt(1);
			// SugarWalker.g:166:4: (a= expr )+
			{
			DebugLocation(166, 4);
			// SugarWalker.g:166:4: (a= expr )+
			int cnt24=0;
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==Expr_Access||LA24_0==Expr_Bin||(LA24_0>=Expr_Call && LA24_0<=Expr_Lambda)||(LA24_0>=Expr_New_Array && LA24_0<=Expr_Prefix)||(LA24_0>=Expr_Suffix && LA24_0<=Expr_Tuple)||LA24_0==IDENT||LA24_0==INT||LA24_0==STRING||LA24_0==DOUBLE))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:166:5: a= expr
					{
					DebugLocation(166, 6);
					PushFollow(Follow._expr_in_expr_list666);
					a=expr();
					PopFollow();

					DebugLocation(166, 12);
					 value.Add(a); 

					}
					break;

				default:
					if (cnt24 >= 1)
						goto loop24;

					EarlyExitException eee24 = new EarlyExitException( 24, input );
					DebugRecognitionException(eee24);
					throw eee24;
				}
				cnt24++;
			}
			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr_list", 18);
			LeaveRule("expr_list", 18);
			LeaveRule_expr_list();
		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return value;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarWalker.g:169:1: call_expr returns [Expr value] : ^( Expr_Call a= expr b= expr_list ) ;
	[GrammarRule("call_expr")]
	private Expr call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 19);
		TraceIn("call_expr", 19);
		Expr value = default(Expr);


		Expr a = default(Expr);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(169, 1);
		try
		{
			// SugarWalker.g:170:2: ( ^( Expr_Call a= expr b= expr_list ) )
			DebugEnterAlt(1);
			// SugarWalker.g:170:4: ^( Expr_Call a= expr b= expr_list )
			{
			DebugLocation(170, 4);
			DebugLocation(170, 6);
			Match(input,Expr_Call,Follow._Expr_Call_in_call_expr686); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(170, 17);
			PushFollow(Follow._expr_in_call_expr690);
			a=expr();
			PopFollow();

			DebugLocation(170, 24);
			PushFollow(Follow._expr_list_in_call_expr694);
			b=expr_list();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(171, 2);

					value = new ExprCall(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("call_expr", 19);
			LeaveRule("call_expr", 19);
			LeaveRule_call_expr();
		}
		DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return value;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dict_expr();
	partial void LeaveRule_dict_expr();

	// $ANTLR start "dict_expr"
	// SugarWalker.g:176:1: dict_expr returns [Expr value] : ^( Expr_Dict a= expr b= expr ) ;
	[GrammarRule("dict_expr")]
	private Expr dict_expr()
	{
		EnterRule_dict_expr();
		EnterRule("dict_expr", 20);
		TraceIn("dict_expr", 20);
		Expr value = default(Expr);


		Expr a = default(Expr);
		Expr b = default(Expr);

		try { DebugEnterRule(GrammarFileName, "dict_expr");
		DebugLocation(176, 1);
		try
		{
			// SugarWalker.g:177:2: ( ^( Expr_Dict a= expr b= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:177:4: ^( Expr_Dict a= expr b= expr )
			{
			DebugLocation(177, 4);
			DebugLocation(177, 6);
			Match(input,Expr_Dict,Follow._Expr_Dict_in_dict_expr714); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(177, 17);
			PushFollow(Follow._expr_in_dict_expr718);
			a=expr();
			PopFollow();

			DebugLocation(177, 24);
			PushFollow(Follow._expr_in_dict_expr722);
			b=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(178, 2);

					value = new ExprDict(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("dict_expr", 20);
			LeaveRule("dict_expr", 20);
			LeaveRule_dict_expr();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "dict_expr"); }
		return value;

	}
	// $ANTLR end "dict_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarWalker.g:183:1: lambda_expr returns [ExprLambda value] : ^( Expr_Lambda b= func_args a= expr ) ;
	[GrammarRule("lambda_expr")]
	private ExprLambda lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 21);
		TraceIn("lambda_expr", 21);
		ExprLambda value = default(ExprLambda);


		List<Stmt> b = default(List<Stmt>);
		Expr a = default(Expr);

		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(183, 1);
		try
		{
			// SugarWalker.g:184:2: ( ^( Expr_Lambda b= func_args a= expr ) )
			DebugEnterAlt(1);
			// SugarWalker.g:184:4: ^( Expr_Lambda b= func_args a= expr )
			{
			DebugLocation(184, 4);
			DebugLocation(184, 6);
			Match(input,Expr_Lambda,Follow._Expr_Lambda_in_lambda_expr742); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(184, 19);
			PushFollow(Follow._func_args_in_lambda_expr746);
			b=func_args();
			PopFollow();

			DebugLocation(184, 31);
			PushFollow(Follow._expr_in_lambda_expr750);
			a=expr();
			PopFollow();


			Match(input, TokenTypes.Up, null); 

			DebugLocation(185, 2);

					value = new ExprLambda(a, b);
				

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambda_expr", 21);
			LeaveRule("lambda_expr", 21);
			LeaveRule_lambda_expr();
		}
		DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return value;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarWalker.g:190:1: new_expr returns [ExprNew value] : ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name (b= expr_list )? ) );
	[GrammarRule("new_expr")]
	private ExprNew new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 22);
		TraceIn("new_expr", 22);
		ExprNew value = default(ExprNew);


		string a = default(string);
		List<Expr> b = default(List<Expr>);

		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(190, 1);
		try
		{
			// SugarWalker.g:191:2: ( ^( Expr_New_Type a= type_name (b= expr_list )? ) | ^( Expr_New_Array a= type_name (b= expr_list )? ) )
			int alt27=2;
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==Expr_New_Type))
			{
				alt27 = 1;
			}
			else if ((LA27_0==Expr_New_Array))
			{
				alt27 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:191:4: ^( Expr_New_Type a= type_name (b= expr_list )? )
				{
				DebugLocation(191, 4);
				DebugLocation(191, 6);
				Match(input,Expr_New_Type,Follow._Expr_New_Type_in_new_expr770); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(191, 21);
				PushFollow(Follow._type_name_in_new_expr774);
				a=type_name();
				PopFollow();

				DebugLocation(191, 33);
				// SugarWalker.g:191:33: (b= expr_list )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==Expr_Access||LA25_0==Expr_Bin||(LA25_0>=Expr_Call && LA25_0<=Expr_Lambda)||(LA25_0>=Expr_New_Array && LA25_0<=Expr_Prefix)||(LA25_0>=Expr_Suffix && LA25_0<=Expr_Tuple)||LA25_0==IDENT||LA25_0==INT||LA25_0==STRING||LA25_0==DOUBLE))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:191:33: b= expr_list
					{
					DebugLocation(191, 33);
					PushFollow(Follow._expr_list_in_new_expr778);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(25); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(192, 2);

						value = new ExprNew("()", a, b);
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:195:4: ^( Expr_New_Array a= type_name (b= expr_list )? )
				{
				DebugLocation(195, 4);
				DebugLocation(195, 6);
				Match(input,Expr_New_Array,Follow._Expr_New_Array_in_new_expr789); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(195, 22);
				PushFollow(Follow._type_name_in_new_expr793);
				a=type_name();
				PopFollow();

				DebugLocation(195, 34);
				// SugarWalker.g:195:34: (b= expr_list )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==Expr_Access||LA26_0==Expr_Bin||(LA26_0>=Expr_Call && LA26_0<=Expr_Lambda)||(LA26_0>=Expr_New_Array && LA26_0<=Expr_Prefix)||(LA26_0>=Expr_Suffix && LA26_0<=Expr_Tuple)||LA26_0==IDENT||LA26_0==INT||LA26_0==STRING||LA26_0==DOUBLE))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarWalker.g:195:34: b= expr_list
					{
					DebugLocation(195, 34);
					PushFollow(Follow._expr_list_in_new_expr797);
					b=expr_list();
					PopFollow();


					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				Match(input, TokenTypes.Up, null); 

				DebugLocation(196, 2);

						value = new ExprNew("[]", a, b);
					

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("new_expr", 22);
			LeaveRule("new_expr", 22);
			LeaveRule_new_expr();
		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return value;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarWalker.g:202:1: expr returns [Expr value] : (tuple= expr_tuple |call= call_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text= ( INT | DOUBLE | IDENT | STRING ) );
	[GrammarRule("expr")]
	private Expr expr()
	{
		EnterRule_expr();
		EnterRule("expr", 23);
		TraceIn("expr", 23);
		Expr value = default(Expr);


		CommonTree op = default(CommonTree);
		CommonTree text = default(CommonTree);
		ExprTuple tuple = default(ExprTuple);
		Expr call = default(Expr);
		Expr dict = default(Expr);
		ExprLambda lambda = default(ExprLambda);
		ExprNew expr_new = default(ExprNew);
		Expr a = default(Expr);
		Expr b = default(Expr);
		Expr c = default(Expr);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(202, 1);
		try
		{
			// SugarWalker.g:203:5: (tuple= expr_tuple |call= call_expr |dict= dict_expr |lambda= lambda_expr |expr_new= new_expr | ^( Expr_Cond a= expr b= expr c= expr ) | ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT ) | ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr ) | ^( Expr_Suffix op= ( '++' | '--' ) a= expr ) | ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr ) |text= ( INT | DOUBLE | IDENT | STRING ) )
			int alt28=11;
			try { DebugEnterDecision(28, false);
			switch (input.LA(1))
			{
			case Expr_Tuple:
				{
				alt28 = 1;
				}
				break;
			case Expr_Call:
				{
				alt28 = 2;
				}
				break;
			case Expr_Dict:
				{
				alt28 = 3;
				}
				break;
			case Expr_Lambda:
				{
				alt28 = 4;
				}
				break;
			case Expr_New_Array:
			case Expr_New_Type:
				{
				alt28 = 5;
				}
				break;
			case Expr_Cond:
				{
				alt28 = 6;
				}
				break;
			case Expr_Access:
				{
				alt28 = 7;
				}
				break;
			case Expr_Bin:
				{
				alt28 = 8;
				}
				break;
			case Expr_Suffix:
				{
				alt28 = 9;
				}
				break;
			case Expr_Prefix:
				{
				alt28 = 10;
				}
				break;
			case IDENT:
			case INT:
			case STRING:
			case DOUBLE:
				{
				alt28 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarWalker.g:203:7: tuple= expr_tuple
				{
				DebugLocation(203, 12);
				PushFollow(Follow._expr_tuple_in_expr823);
				tuple=expr_tuple();
				PopFollow();

				DebugLocation(204, 2);

						value = tuple;
					

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarWalker.g:207:4: call= call_expr
				{
				DebugLocation(207, 8);
				PushFollow(Follow._call_expr_in_expr833);
				call=call_expr();
				PopFollow();

				DebugLocation(208, 2);

						value = call;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarWalker.g:211:4: dict= dict_expr
				{
				DebugLocation(211, 8);
				PushFollow(Follow._dict_expr_in_expr843);
				dict=dict_expr();
				PopFollow();

				DebugLocation(212, 2);

						value = dict;
					

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarWalker.g:215:4: lambda= lambda_expr
				{
				DebugLocation(215, 10);
				PushFollow(Follow._lambda_expr_in_expr853);
				lambda=lambda_expr();
				PopFollow();

				DebugLocation(216, 2);

						value = lambda;
					

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarWalker.g:219:4: expr_new= new_expr
				{
				DebugLocation(219, 12);
				PushFollow(Follow._new_expr_in_expr863);
				expr_new=new_expr();
				PopFollow();

				DebugLocation(220, 2);

						value = expr_new;
					

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarWalker.g:223:3: ^( Expr_Cond a= expr b= expr c= expr )
				{
				DebugLocation(223, 3);
				DebugLocation(223, 5);
				Match(input,Expr_Cond,Follow._Expr_Cond_in_expr871); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(223, 16);
				PushFollow(Follow._expr_in_expr875);
				a=expr();
				PopFollow();

				DebugLocation(223, 23);
				PushFollow(Follow._expr_in_expr879);
				b=expr();
				PopFollow();

				DebugLocation(223, 30);
				PushFollow(Follow._expr_in_expr883);
				c=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(224, 2);

						value = new ExprCond(a, b, c);
					

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarWalker.g:227:4: ^( Expr_Access op= ( '.' | '::' | '->' | '->*' | '.*' ) a= expr text= IDENT )
				{
				DebugLocation(227, 4);
				DebugLocation(227, 6);
				Match(input,Expr_Access,Follow._Expr_Access_in_expr893); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(227, 20);

				op=(CommonTree)input.LT(1);
				if ((input.LA(1)>=56 && input.LA(1)<=59)||input.LA(1)==63)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(227, 57);
				PushFollow(Follow._expr_in_expr919);
				a=expr();
				PopFollow();

				DebugLocation(227, 67);
				text=(CommonTree)Match(input,IDENT,Follow._IDENT_in_expr923); 

				Match(input, TokenTypes.Up, null); 

				DebugLocation(228, 2);

						value = new ExprAccess(a, op.Text, text.Text);
					

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarWalker.g:231:4: ^( Expr_Bin op= ( '+' | '-' | '*' | '/' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' | '<' | '<=' | '>' | '>=' | '==' | '!=' | '<<' | '>>' | '&' | '^' | '|' | '&&' | '||' ) a= expr b= expr )
				{
				DebugLocation(231, 4);
				DebugLocation(231, 6);
				Match(input,Expr_Bin,Follow._Expr_Bin_in_expr933); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(231, 17);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==39||(input.LA(1)>=41 && input.LA(1)<=44)||(input.LA(1)>=47 && input.LA(1)<=49)||input.LA(1)==51||input.LA(1)==53||input.LA(1)==55||(input.LA(1)>=60 && input.LA(1)<=61)||(input.LA(1)>=64 && input.LA(1)<=69)||(input.LA(1)>=71 && input.LA(1)<=74)||(input.LA(1)>=78 && input.LA(1)<=79)||(input.LA(1)>=82 && input.LA(1)<=84))
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(237, 9);
				PushFollow(Follow._expr_in_expr1095);
				a=expr();
				PopFollow();

				DebugLocation(237, 16);
				PushFollow(Follow._expr_in_expr1099);
				b=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(238, 2);

						value = new ExprBin(op.Text, a, b);
					

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarWalker.g:241:4: ^( Expr_Suffix op= ( '++' | '--' ) a= expr )
				{
				DebugLocation(241, 4);
				DebugLocation(241, 6);
				Match(input,Expr_Suffix,Follow._Expr_Suffix_in_expr1109); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(241, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==50||input.LA(1)==54)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(241, 36);
				PushFollow(Follow._expr_in_expr1123);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(242, 2);

						value = new ExprSuffix(op.Text, a);
					

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// SugarWalker.g:245:4: ^( Expr_Prefix op= ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' ) a= expr )
				{
				DebugLocation(245, 4);
				DebugLocation(245, 6);
				Match(input,Expr_Prefix,Follow._Expr_Prefix_in_expr1133); 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(245, 20);

				op=(CommonTree)input.LT(1);
				if (input.LA(1)==38||input.LA(1)==43||input.LA(1)==47||(input.LA(1)>=49 && input.LA(1)<=50)||(input.LA(1)>=53 && input.LA(1)<=54)||input.LA(1)==85)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(245, 72);
				PushFollow(Follow._expr_in_expr1171);
				a=expr();
				PopFollow();


				Match(input, TokenTypes.Up, null); 

				DebugLocation(246, 2);

						value = new ExprPrefix(op.Text, a);
					

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// SugarWalker.g:249:4: text= ( INT | DOUBLE | IDENT | STRING )
				{
				DebugLocation(249, 8);

				text=(CommonTree)input.LT(1);
				if (input.LA(1)==IDENT||input.LA(1)==INT||input.LA(1)==STRING||input.LA(1)==DOUBLE)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(250, 5);

				        value = new ExprConst(text.Text);
				    

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 23);
			LeaveRule("expr", 23);
			LeaveRule_expr();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return value;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region DFA
	private DFA10 dfa10;
	private DFA20 dfa20;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa10 = new DFA10( this );
		dfa20 = new DFA20( this );
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x4\xFFFF";
		private const string DFA10_eofS =
			"\x4\xFFFF";
		private const string DFA10_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA10_maxS =
			"\x2\x1D\x2\xFFFF";
		private const string DFA10_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA10_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x1\x2\x17\xFFFF\x1\x1",
				"\x1\x2\x2\xFFFF\x2\x3\xA\xFFFF\x1\x3\x8\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "()* loopback of 81:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x4\xFFFF";
		private const string DFA20_eofS =
			"\x4\xFFFF";
		private const string DFA20_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA20_maxS =
			"\x2\x1D\x2\xFFFF";
		private const string DFA20_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA20_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x1\x2\x17\xFFFF\x1\x1",
				"\x1\x2\x2\xFFFF\x2\x3\xA\xFFFF\x1\x3\x8\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "()* loopback of 142:11: ( ( NEWLINE )+ a= stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root85 = new BitSet(new ulong[]{0x3020000002UL});
		public static readonly BitSet _NEWLINE_in_root90 = new BitSet(new ulong[]{0x3020000002UL});
		public static readonly BitSet _func_def_in_node112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Type_IDENT_in_type_name135 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_type_name139 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Type_Tuple_in_type_name153 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_type_name162 = new BitSet(new ulong[]{0x3000000008UL});
		public static readonly BitSet _Func_Args_in_func_args194 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _stmt_in_func_args199 = new BitSet(new ulong[]{0x100308UL});
		public static readonly BitSet _type_name_in_func_def226 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _IDENT_in_func_def230 = new BitSet(new ulong[]{0x200000000000UL,0x1UL});
		public static readonly BitSet _64_in_func_def233 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _IDENT_in_func_def238 = new BitSet(new ulong[]{0x2000000UL,0x80UL});
		public static readonly BitSet _71_in_func_def244 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_func_def248 = new BitSet(new ulong[]{0x400000800000UL});
		public static readonly BitSet _func_args_in_func_def253 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_func_def259 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _stmt_block_in_func_def266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block290 = new BitSet(new ulong[]{0x20000020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block293 = new BitSet(new ulong[]{0x20100300UL});
		public static readonly BitSet _stmt_in_stmt_block298 = new BitSet(new ulong[]{0x20000020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block304 = new BitSet(new ulong[]{0x20000020UL});
		public static readonly BitSet _DEDENT_in_stmt_block307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_stmt_alloc375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_auto_in_stmt_alloc384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Return_in_stmt_return402 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_stmt_return407 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IDENT_in_ident430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list454 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_ident_list460 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _ident_in_ident_list464 = new BitSet(new ulong[]{0x10000000000000UL,0x800000UL});
		public static readonly BitSet _87_in_ident_list470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Alloc_in_alloc_expr489 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_alloc_expr493 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _ident_in_alloc_expr497 = new BitSet(new ulong[]{0x20A6EF488UL,0x400000UL});
		public static readonly BitSet _expr_in_alloc_expr502 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Alloc_Auto_in_alloc_expr_auto524 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _ident_in_alloc_expr_auto528 = new BitSet(new ulong[]{0x20A6EF488UL,0x400000UL});
		public static readonly BitSet _expr_in_alloc_expr_auto533 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDENT_in_block_expr559 = new BitSet(new ulong[]{0x20000020UL});
		public static readonly BitSet _NEWLINE_in_block_expr562 = new BitSet(new ulong[]{0x20100300UL});
		public static readonly BitSet _stmt_in_block_expr567 = new BitSet(new ulong[]{0x20000020UL});
		public static readonly BitSet _NEWLINE_in_block_expr573 = new BitSet(new ulong[]{0x20000020UL});
		public static readonly BitSet _DEDENT_in_block_expr576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Tuple_in_expr_tuple601 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr_tuple606 = new BitSet(new ulong[]{0x20A6EF488UL,0x400000UL});
		public static readonly BitSet _Expr_Match_Tuple_in_expr_match_tuple633 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_expr_match_tuple638 = new BitSet(new ulong[]{0x2000008UL});
		public static readonly BitSet _expr_in_expr_list666 = new BitSet(new ulong[]{0x20A6EF482UL,0x400000UL});
		public static readonly BitSet _Expr_Call_in_call_expr686 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_call_expr690 = new BitSet(new ulong[]{0x20A6EF480UL,0x400000UL});
		public static readonly BitSet _expr_list_in_call_expr694 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Dict_in_dict_expr714 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_dict_expr718 = new BitSet(new ulong[]{0x20A6EF480UL,0x400000UL});
		public static readonly BitSet _expr_in_dict_expr722 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Lambda_in_lambda_expr742 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _func_args_in_lambda_expr746 = new BitSet(new ulong[]{0x20A6EF480UL,0x400000UL});
		public static readonly BitSet _expr_in_lambda_expr750 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Type_in_new_expr770 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr774 = new BitSet(new ulong[]{0x20A6EF488UL,0x400000UL});
		public static readonly BitSet _expr_list_in_new_expr778 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_New_Array_in_new_expr789 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _type_name_in_new_expr793 = new BitSet(new ulong[]{0x20A6EF488UL,0x400000UL});
		public static readonly BitSet _expr_list_in_new_expr797 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_tuple_in_expr823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_expr_in_expr833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dict_expr_in_expr843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _new_expr_in_expr863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Cond_in_expr871 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr875 = new BitSet(new ulong[]{0x20A6EF480UL,0x400000UL});
		public static readonly BitSet _expr_in_expr879 = new BitSet(new ulong[]{0x20A6EF480UL,0x400000UL});
		public static readonly BitSet _expr_in_expr883 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Access_in_expr893 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr897 = new BitSet(new ulong[]{0x20A6EF480UL,0x400000UL});
		public static readonly BitSet _expr_in_expr919 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _IDENT_in_expr923 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Bin_in_expr933 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr937 = new BitSet(new ulong[]{0x20A6EF480UL,0x400000UL});
		public static readonly BitSet _expr_in_expr1095 = new BitSet(new ulong[]{0x20A6EF480UL,0x400000UL});
		public static readonly BitSet _expr_in_expr1099 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Suffix_in_expr1109 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1113 = new BitSet(new ulong[]{0x20A6EF480UL,0x400000UL});
		public static readonly BitSet _expr_in_expr1123 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _Expr_Prefix_in_expr1133 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _set_in_expr1137 = new BitSet(new ulong[]{0x20A6EF480UL,0x400000UL});
		public static readonly BitSet _expr_in_expr1171 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _set_in_expr1182 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
