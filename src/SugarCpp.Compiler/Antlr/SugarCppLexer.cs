//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-04-28 20:05:15

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Expr_Alloc=7;
	public const int Expr_Alloc_Auto=8;
	public const int Expr_Bin=9;
	public const int Expr_Block=10;
	public const int Expr_Call=11;
	public const int Expr_Cond=12;
	public const int Expr_Dict=13;
	public const int Expr_Dot=14;
	public const int Expr_Match_Tuple=15;
	public const int Expr_New=16;
	public const int Expr_Prefix=17;
	public const int Expr_Return=18;
	public const int Expr_Suffix=19;
	public const int Expr_Tuple=20;
	public const int Func_Def=21;
	public const int IDENT=22;
	public const int INDENT=23;
	public const int INT=24;
	public const int Left_Bracket=25;
	public const int NEWLINE=26;
	public const int Right_Bracket=27;
	public const int Root=28;
	public const int SP=29;
	public const int STRING=30;
	public const int Stmt_If=31;
	public const int Stmt_While=32;
	public const int Type_Tuple=33;

		class Indentation
		{
			public int Level;
			public int CharIndex;

			public Indentation(int Level, int CharIndex)
			{
				this.Level = Level;
				this.CharIndex = CharIndex;
			}
		}

		int CurrentIndent = 0;
		Stack<Indentation> Indents = new Stack<Indentation>();
		Stack<int>[] Bracket = new Stack<int>[3];

		Queue<IToken> tokens = new Queue<IToken>();

	    public override void Emit(IToken token) 
	    {
	        state.token = token;
	        tokens.Enqueue(token);
	    }

	    public override IToken NextToken()
	    {
	        base.NextToken();
	        if (tokens.Count == 0)
			{
				if (Indents.Count > 0)
				{
					Emit(new CommonToken(DEDENT, "DEDENT"));
					Indents.Pop();
					CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
					base.NextToken();
					return tokens.Dequeue();
				}
	            return new CommonToken(EOF, "EOF");
			}
	        return tokens.Dequeue();
	    }


    // delegates
    // delegators

	public SugarCppLexer()
	{
		OnCreated();
	}

	public SugarCppLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public SugarCppLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 1);
		TraceIn("T__34", 1);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:65:7: ( '!' )
			DebugEnterAlt(1);
			// SugarCpp.g:65:9: '!'
			{
			DebugLocation(65, 9);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 1);
			LeaveRule("T__34", 1);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 2);
		TraceIn("T__35", 2);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:66:7: ( '%' )
			DebugEnterAlt(1);
			// SugarCpp.g:66:9: '%'
			{
			DebugLocation(66, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 2);
			LeaveRule("T__35", 2);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 3);
		TraceIn("T__36", 3);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:67:7: ( '(' )
			DebugEnterAlt(1);
			// SugarCpp.g:67:9: '('
			{
			DebugLocation(67, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 3);
			LeaveRule("T__36", 3);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 4);
		TraceIn("T__37", 4);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:68:7: ( ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:68:9: ')'
			{
			DebugLocation(68, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 4);
			LeaveRule("T__37", 4);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 5);
		TraceIn("T__38", 5);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:69:7: ( '*' )
			DebugEnterAlt(1);
			// SugarCpp.g:69:9: '*'
			{
			DebugLocation(69, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 5);
			LeaveRule("T__38", 5);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 6);
		TraceIn("T__39", 6);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:70:7: ( '+' )
			DebugEnterAlt(1);
			// SugarCpp.g:70:9: '+'
			{
			DebugLocation(70, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 6);
			LeaveRule("T__39", 6);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 7);
		TraceIn("T__40", 7);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:71:7: ( '++' )
			DebugEnterAlt(1);
			// SugarCpp.g:71:9: '++'
			{
			DebugLocation(71, 9);
			Match("++"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 7);
			LeaveRule("T__40", 7);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 8);
		TraceIn("T__41", 8);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:72:7: ( ',' )
			DebugEnterAlt(1);
			// SugarCpp.g:72:9: ','
			{
			DebugLocation(72, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 8);
			LeaveRule("T__41", 8);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 9);
		TraceIn("T__42", 9);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:73:7: ( '-' )
			DebugEnterAlt(1);
			// SugarCpp.g:73:9: '-'
			{
			DebugLocation(73, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 9);
			LeaveRule("T__42", 9);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 10);
		TraceIn("T__43", 10);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:74:7: ( '--' )
			DebugEnterAlt(1);
			// SugarCpp.g:74:9: '--'
			{
			DebugLocation(74, 9);
			Match("--"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 10);
			LeaveRule("T__43", 10);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 11);
		TraceIn("T__44", 11);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:75:7: ( '.' )
			DebugEnterAlt(1);
			// SugarCpp.g:75:9: '.'
			{
			DebugLocation(75, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 11);
			LeaveRule("T__44", 11);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 12);
		TraceIn("T__45", 12);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:76:7: ( '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:76:9: '/'
			{
			DebugLocation(76, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 12);
			LeaveRule("T__45", 12);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 13);
		TraceIn("T__46", 13);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:77:7: ( '<' )
			DebugEnterAlt(1);
			// SugarCpp.g:77:9: '<'
			{
			DebugLocation(77, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 13);
			LeaveRule("T__46", 13);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 14);
		TraceIn("T__47", 14);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:78:7: ( '=' )
			DebugEnterAlt(1);
			// SugarCpp.g:78:9: '='
			{
			DebugLocation(78, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 14);
			LeaveRule("T__47", 14);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 15);
		TraceIn("T__48", 15);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:79:7: ( '>' )
			DebugEnterAlt(1);
			// SugarCpp.g:79:9: '>'
			{
			DebugLocation(79, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 15);
			LeaveRule("T__48", 15);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 16);
		TraceIn("T__49", 16);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:80:7: ( '[' )
			DebugEnterAlt(1);
			// SugarCpp.g:80:9: '['
			{
			DebugLocation(80, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 16);
			LeaveRule("T__49", 16);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 17);
		TraceIn("T__50", 17);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:81:7: ( ']' )
			DebugEnterAlt(1);
			// SugarCpp.g:81:9: ']'
			{
			DebugLocation(81, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 17);
			LeaveRule("T__50", 17);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 18);
		TraceIn("T__51", 18);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:82:7: ( 'return' )
			DebugEnterAlt(1);
			// SugarCpp.g:82:9: 'return'
			{
			DebugLocation(82, 9);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 18);
			LeaveRule("T__51", 18);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 19);
		TraceIn("T__52", 19);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:83:7: ( '|' )
			DebugEnterAlt(1);
			// SugarCpp.g:83:9: '|'
			{
			DebugLocation(83, 9);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 19);
			LeaveRule("T__52", 19);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_T__53();
	partial void LeaveRule_T__53();

	// $ANTLR start "T__53"
	[GrammarRule("T__53")]
	private void mT__53()
	{
		EnterRule_T__53();
		EnterRule("T__53", 20);
		TraceIn("T__53", 20);
		try
		{
			int _type = T__53;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:84:7: ( '~' )
			DebugEnterAlt(1);
			// SugarCpp.g:84:9: '~'
			{
			DebugLocation(84, 9);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__53", 20);
			LeaveRule("T__53", 20);
			LeaveRule_T__53();
		}
	}
	// $ANTLR end "T__53"

	partial void EnterRule_IDENT();
	partial void LeaveRule_IDENT();

	// $ANTLR start "IDENT"
	[GrammarRule("IDENT")]
	private void mIDENT()
	{
		EnterRule_IDENT();
		EnterRule("IDENT", 21);
		TraceIn("IDENT", 21);
		try
		{
			int _type = IDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:224:6: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+ ( '0' .. '9' )* )
			DebugEnterAlt(1);
			// SugarCpp.g:224:8: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+ ( '0' .. '9' )*
			{
			DebugLocation(224, 8);
			// SugarCpp.g:224:8: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(224, 8);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(224, 37);
			// SugarCpp.g:224:37: ( '0' .. '9' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(224, 37);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENT", 21);
			LeaveRule("IDENT", 21);
			LeaveRule_IDENT();
		}
	}
	// $ANTLR end "IDENT"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 22);
		TraceIn("INT", 22);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:226:4: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:226:6: ( '0' .. '9' )+
			{
			DebugLocation(226, 6);
			// SugarCpp.g:226:6: ( '0' .. '9' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(226, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 22);
			LeaveRule("INT", 22);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 23);
		TraceIn("STRING", 23);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:230:2: ( '\"' (~ '\"' )* '\"' )
			DebugEnterAlt(1);
			// SugarCpp.g:230:4: '\"' (~ '\"' )* '\"'
			{
			DebugLocation(230, 4);
			Match('\"'); 
			DebugLocation(230, 8);
			// SugarCpp.g:230:8: (~ '\"' )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='\u0000' && LA4_0<='!')||(LA4_0>='#' && LA4_0<='\uFFFF')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(230, 8);
					input.Consume();


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(230, 16);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 23);
			LeaveRule("STRING", 23);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 24);
		TraceIn("EXPONENT", 24);
		try
		{
			// SugarCpp.g:235:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:236:5: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(236, 5);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(236, 15);
			// SugarCpp.g:236:15: ( '+' | '-' )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0=='+'||LA5_0=='-'))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:
				{
				DebugLocation(236, 15);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(236, 26);
			// SugarCpp.g:236:26: ( '0' .. '9' )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='0' && LA6_0<='9')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(236, 26);
					input.Consume();


					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 24);
			LeaveRule("EXPONENT", 24);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_Left_Bracket();
	partial void LeaveRule_Left_Bracket();

	// $ANTLR start "Left_Bracket"
	[GrammarRule("Left_Bracket")]
	private void mLeft_Bracket()
	{
		EnterRule_Left_Bracket();
		EnterRule("Left_Bracket", 25);
		TraceIn("Left_Bracket", 25);
		try
		{
			int _type = Left_Bracket;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:240:2: ( '(' | '[' | '{' )
			int alt7=3;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case '(':
				{
				alt7 = 1;
				}
				break;
			case '[':
				{
				alt7 = 2;
				}
				break;
			case '{':
				{
				alt7 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:240:4: '('
				{
				DebugLocation(240, 4);
				Match('('); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:240:10: '['
				{
				DebugLocation(240, 10);
				Match('['); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:240:16: '{'
				{
				DebugLocation(240, 16);
				Match('{'); 
				DebugLocation(241, 2);

						int k = Text == "(" ? 0 : Text == "[" ? 1 : 2;
						if (Bracket[k] == null) Bracket[k] = new Stack<int>();
						Bracket[k].Push(CharIndex);
					

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Left_Bracket", 25);
			LeaveRule("Left_Bracket", 25);
			LeaveRule_Left_Bracket();
		}
	}
	// $ANTLR end "Left_Bracket"

	partial void EnterRule_Right_Bracket();
	partial void LeaveRule_Right_Bracket();

	// $ANTLR start "Right_Bracket"
	[GrammarRule("Right_Bracket")]
	private void mRight_Bracket()
	{
		EnterRule_Right_Bracket();
		EnterRule("Right_Bracket", 26);
		TraceIn("Right_Bracket", 26);
		try
		{
			int _type = Right_Bracket;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:249:2: ( ')' | ']' | '}' )
			int alt8=3;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case ')':
				{
				alt8 = 1;
				}
				break;
			case ']':
				{
				alt8 = 2;
				}
				break;
			case '}':
				{
				alt8 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:249:4: ')'
				{
				DebugLocation(249, 4);
				Match(')'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:249:10: ']'
				{
				DebugLocation(249, 10);
				Match(']'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:249:16: '}'
				{
				DebugLocation(249, 16);
				Match('}'); 
				DebugLocation(250, 2);

						int k = Text == "(" ? 0 : Text == "[" ? 1 : 2;
						int pos = Bracket[k].Pop();
						while (Indents.Count > 0 && pos < Indents.First().CharIndex)
						{
							Emit(new CommonToken(DEDENT, "DEDENT"));
							Indents.Pop();
							CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
						}
					

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Right_Bracket", 26);
			LeaveRule("Right_Bracket", 26);
			LeaveRule_Right_Bracket();
		}
	}
	// $ANTLR end "Right_Bracket"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 27);
		TraceIn("NEWLINE", 27);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			CommonToken SP1 = default(CommonToken);

			// SugarCpp.g:263:2: ( ( ( 'r' )? '\\n' )+ ( SP )? )
			DebugEnterAlt(1);
			// SugarCpp.g:263:4: ( ( 'r' )? '\\n' )+ ( SP )?
			{
			DebugLocation(263, 4);
			// SugarCpp.g:263:4: ( ( 'r' )? '\\n' )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0=='\n'||LA10_0=='r'))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:263:5: ( 'r' )? '\\n'
					{
					DebugLocation(263, 5);
					// SugarCpp.g:263:5: ( 'r' )?
					int alt9=2;
					try { DebugEnterSubRule(9);
					try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if ((LA9_0=='r'))
					{
						alt9 = 1;
					}
					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:263:5: 'r'
						{
						DebugLocation(263, 5);
						Match('r'); 

						}
						break;

					}
					} finally { DebugExitSubRule(9); }

					DebugLocation(263, 10);
					Match('\n'); 

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(263, 17);
			// SugarCpp.g:263:17: ( SP )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==' '))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:17: SP
				{
				DebugLocation(263, 17);
				int SP1Start350 = CharIndex;
				int SP1StartLine350 = Line;
				int SP1StartCharPos350 = CharPositionInLine;
				mSP(); 
				SP1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, SP1Start350, CharIndex-1);
				SP1.Line = SP1StartLine350;
				SP1.CharPositionInLine = SP1StartCharPos350;

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(264, 2);

					int indent = (SP1!=null?SP1.Text:null) == null ? 0 : (SP1!=null?SP1.Text:null).Length;
					if (indent > CurrentIndent)
					{
						Emit(new CommonToken(INDENT, "INDENT"));
						Emit(new CommonToken(NEWLINE, "NEWLINE"));
						Indents.Push(new Indentation(indent, CharIndex));
						CurrentIndent = indent;
					}
					else if (indent < CurrentIndent)
					{
						while (Indents.Count > 0 && indent < CurrentIndent)
						{
							Emit(new CommonToken(DEDENT, "DEDENT"));
							Indents.Pop();
							CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
						}
						Emit(new CommonToken(NEWLINE, "NEWLINE"));
					}
					else
					{
						Emit(new CommonToken(NEWLINE, "NEWLINE"));
						Skip();
					}
				

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 27);
			LeaveRule("NEWLINE", 27);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_SP();
	partial void LeaveRule_SP();

	// $ANTLR start "SP"
	[GrammarRule("SP")]
	private void mSP()
	{
		EnterRule_SP();
		EnterRule("SP", 28);
		TraceIn("SP", 28);
		try
		{
			// SugarCpp.g:291:12: ( ( ' ' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:291:14: ( ' ' )+
			{
			DebugLocation(291, 14);
			// SugarCpp.g:291:14: ( ' ' )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==' '))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:14: ' '
					{
					DebugLocation(291, 14);
					Match(' '); 

					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

		}
		finally
		{
			TraceOut("SP", 28);
			LeaveRule("SP", 28);
			LeaveRule_SP();
		}
	}
	// $ANTLR end "SP"

	partial void EnterRule_INDENT();
	partial void LeaveRule_INDENT();

	// $ANTLR start "INDENT"
	[GrammarRule("INDENT")]
	private void mINDENT()
	{
		EnterRule_INDENT();
		EnterRule("INDENT", 29);
		TraceIn("INDENT", 29);
		try
		{
			int _type = INDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:293:7: ({...}? => ( '\\n' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:293:9: {...}? => ( '\\n' )
			{
			DebugLocation(293, 9);
			if (!((0==1)))
			{
				throw new FailedPredicateException(input, "INDENT", "0==1");
			}
			DebugLocation(293, 19);
			// SugarCpp.g:293:19: ( '\\n' )
			DebugEnterAlt(1);
			// SugarCpp.g:293:20: '\\n'
			{
			DebugLocation(293, 20);
			Match('\n'); 

			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INDENT", 29);
			LeaveRule("INDENT", 29);
			LeaveRule_INDENT();
		}
	}
	// $ANTLR end "INDENT"

	partial void EnterRule_DEDENT();
	partial void LeaveRule_DEDENT();

	// $ANTLR start "DEDENT"
	[GrammarRule("DEDENT")]
	private void mDEDENT()
	{
		EnterRule_DEDENT();
		EnterRule("DEDENT", 30);
		TraceIn("DEDENT", 30);
		try
		{
			int _type = DEDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:294:7: ({...}? => ( '\\n' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:294:9: {...}? => ( '\\n' )
			{
			DebugLocation(294, 9);
			if (!((0==1)))
			{
				throw new FailedPredicateException(input, "DEDENT", "0==1");
			}
			DebugLocation(294, 19);
			// SugarCpp.g:294:19: ( '\\n' )
			DebugEnterAlt(1);
			// SugarCpp.g:294:20: '\\n'
			{
			DebugLocation(294, 20);
			Match('\n'); 

			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEDENT", 30);
			LeaveRule("DEDENT", 30);
			LeaveRule_DEDENT();
		}
	}
	// $ANTLR end "DEDENT"

	public override void mTokens()
	{
		// SugarCpp.g:1:8: ( T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | IDENT | INT | STRING | Left_Bracket | Right_Bracket | NEWLINE | INDENT | DEDENT )
		int alt13=28;
		try { DebugEnterDecision(13, false);
		switch (input.LA(1))
		{
		case '!':
			{
			alt13 = 1;
			}
			break;
		case '%':
			{
			alt13 = 2;
			}
			break;
		case '(':
			{
			alt13 = 3;
			}
			break;
		case ')':
			{
			alt13 = 4;
			}
			break;
		case '*':
			{
			alt13 = 5;
			}
			break;
		case '+':
			{
			int LA13_6 = input.LA(2);

			if ((LA13_6=='+'))
			{
				alt13 = 7;
			}
			else
			{
				alt13 = 6;
			}
			}
			break;
		case ',':
			{
			alt13 = 8;
			}
			break;
		case '-':
			{
			int LA13_8 = input.LA(2);

			if ((LA13_8=='-'))
			{
				alt13 = 10;
			}
			else
			{
				alt13 = 9;
			}
			}
			break;
		case '.':
			{
			alt13 = 11;
			}
			break;
		case '/':
			{
			alt13 = 12;
			}
			break;
		case '<':
			{
			alt13 = 13;
			}
			break;
		case '=':
			{
			alt13 = 14;
			}
			break;
		case '>':
			{
			alt13 = 15;
			}
			break;
		case '[':
			{
			alt13 = 16;
			}
			break;
		case ']':
			{
			alt13 = 17;
			}
			break;
		case 'r':
			{
			switch (input.LA(2))
			{
			case 'e':
				{
				int LA13_33 = input.LA(3);

				if ((LA13_33=='t'))
				{
					int LA13_36 = input.LA(4);

					if ((LA13_36=='u'))
					{
						int LA13_39 = input.LA(5);

						if ((LA13_39=='r'))
						{
							int LA13_40 = input.LA(6);

							if ((LA13_40=='n'))
							{
								int LA13_41 = input.LA(7);

								if (((LA13_41>='0' && LA13_41<='9')||(LA13_41>='A' && LA13_41<='Z')||LA13_41=='_'||(LA13_41>='a' && LA13_41<='z')))
								{
									alt13 = 21;
								}
								else
								{
									alt13 = 18;
								}
							}
							else
							{
								alt13 = 21;
							}
						}
						else
						{
							alt13 = 21;
						}
					}
					else
					{
						alt13 = 21;
					}
				}
				else
				{
					alt13 = 21;
				}
				}
				break;
			case '\n':
				{
				alt13 = 26;
				}
				break;
			default:
				alt13=21;
				break;

			}

			}
			break;
		case '|':
			{
			alt13 = 19;
			}
			break;
		case '~':
			{
			alt13 = 20;
			}
			break;
		case 'A':
		case 'B':
		case 'C':
		case 'D':
		case 'E':
		case 'F':
		case 'G':
		case 'H':
		case 'I':
		case 'J':
		case 'K':
		case 'L':
		case 'M':
		case 'N':
		case 'O':
		case 'P':
		case 'Q':
		case 'R':
		case 'S':
		case 'T':
		case 'U':
		case 'V':
		case 'W':
		case 'X':
		case 'Y':
		case 'Z':
		case '_':
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			{
			alt13 = 21;
			}
			break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			{
			alt13 = 22;
			}
			break;
		case '\"':
			{
			alt13 = 23;
			}
			break;
		case '{':
			{
			alt13 = 24;
			}
			break;
		case '}':
			{
			alt13 = 25;
			}
			break;
		case '\n':
			{
			int LA13_24 = input.LA(2);

			if ((LA13_24=='\n'||LA13_24==' '||LA13_24=='r'))
			{
				alt13 = 26;
			}
			else if ((!(((0==1)))))
			{
				alt13 = 26;
			}
			else if (((0==1)))
			{
				alt13 = 27;
			}
			else if (((0==1)))
			{
				alt13 = 28;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 24, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(13); }
		switch (alt13)
		{
		case 1:
			DebugEnterAlt(1);
			// SugarCpp.g:1:10: T__34
			{
			DebugLocation(1, 10);
			mT__34(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// SugarCpp.g:1:16: T__35
			{
			DebugLocation(1, 16);
			mT__35(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// SugarCpp.g:1:22: T__36
			{
			DebugLocation(1, 22);
			mT__36(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// SugarCpp.g:1:28: T__37
			{
			DebugLocation(1, 28);
			mT__37(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// SugarCpp.g:1:34: T__38
			{
			DebugLocation(1, 34);
			mT__38(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// SugarCpp.g:1:40: T__39
			{
			DebugLocation(1, 40);
			mT__39(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// SugarCpp.g:1:46: T__40
			{
			DebugLocation(1, 46);
			mT__40(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// SugarCpp.g:1:52: T__41
			{
			DebugLocation(1, 52);
			mT__41(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// SugarCpp.g:1:58: T__42
			{
			DebugLocation(1, 58);
			mT__42(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// SugarCpp.g:1:64: T__43
			{
			DebugLocation(1, 64);
			mT__43(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// SugarCpp.g:1:70: T__44
			{
			DebugLocation(1, 70);
			mT__44(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// SugarCpp.g:1:76: T__45
			{
			DebugLocation(1, 76);
			mT__45(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// SugarCpp.g:1:82: T__46
			{
			DebugLocation(1, 82);
			mT__46(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// SugarCpp.g:1:88: T__47
			{
			DebugLocation(1, 88);
			mT__47(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// SugarCpp.g:1:94: T__48
			{
			DebugLocation(1, 94);
			mT__48(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// SugarCpp.g:1:100: T__49
			{
			DebugLocation(1, 100);
			mT__49(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// SugarCpp.g:1:106: T__50
			{
			DebugLocation(1, 106);
			mT__50(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// SugarCpp.g:1:112: T__51
			{
			DebugLocation(1, 112);
			mT__51(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// SugarCpp.g:1:118: T__52
			{
			DebugLocation(1, 118);
			mT__52(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// SugarCpp.g:1:124: T__53
			{
			DebugLocation(1, 124);
			mT__53(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// SugarCpp.g:1:130: IDENT
			{
			DebugLocation(1, 130);
			mIDENT(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// SugarCpp.g:1:136: INT
			{
			DebugLocation(1, 136);
			mINT(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// SugarCpp.g:1:140: STRING
			{
			DebugLocation(1, 140);
			mSTRING(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// SugarCpp.g:1:147: Left_Bracket
			{
			DebugLocation(1, 147);
			mLeft_Bracket(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// SugarCpp.g:1:160: Right_Bracket
			{
			DebugLocation(1, 160);
			mRight_Bracket(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// SugarCpp.g:1:174: NEWLINE
			{
			DebugLocation(1, 174);
			mNEWLINE(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// SugarCpp.g:1:182: INDENT
			{
			DebugLocation(1, 182);
			mINDENT(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// SugarCpp.g:1:189: DEDENT
			{
			DebugLocation(1, 189);
			mDEDENT(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}

} // namespace  SugarCpp.Compiler 
