//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-04-19 15:25:52

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int Block=4;
	public const int DEDENT=5;
	public const int Func_Def=6;
	public const int INDENT=7;
	public const int INT=8;
	public const int Left_Round_Bracket=9;
	public const int NEWLINE=10;
	public const int Right_Round_Bracket=11;
	public const int Root=12;
	public const int SP=13;
	public const int Var=14;
	public const int WS=15;

		class Indentation
		{
			public int Level;
			public int CharIndex;

			public Indentation(int Level, int CharIndex)
			{
				this.Level = Level;
				this.CharIndex = CharIndex;
			}
		}

		int CurrentIndent = 0;
		Stack<Indentation> Indents = new Stack<Indentation>();
		Stack<int>[] Bracket = new Stack<int>[3];

		Queue<IToken> tokens = new Queue<IToken>();

	    public override void Emit(IToken token) 
	    {
	        state.token = token;
	        tokens.Enqueue(token);
	    }

	    public override IToken NextToken()
	    {
	        base.NextToken();
	        if (tokens.Count == 0)
			{
				if (Indents.Count > 0)
				{
					Emit(new CommonToken(DEDENT, "DEDENT"));
					Indents.Pop();
					CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
					base.NextToken();
					return tokens.Dequeue();
				}
	            return new CommonToken(EOF, "EOF");
			}
	        return tokens.Dequeue();
	    }


    // delegates
    // delegators

	public SugarCppLexer()
	{
		OnCreated();
	}

	public SugarCppLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public SugarCppLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_INDENT();
	partial void LeaveRule_INDENT();

	// $ANTLR start "INDENT"
	[GrammarRule("INDENT")]
	private void mINDENT()
	{
		EnterRule_INDENT();
		EnterRule("INDENT", 1);
		TraceIn("INDENT", 1);
		try
		{
			int _type = INDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:104:7: ({...}? => ( '\\n' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:104:9: {...}? => ( '\\n' )
			{
			DebugLocation(104, 9);
			if (!((0==1)))
			{
				throw new FailedPredicateException(input, "INDENT", "0==1");
			}
			DebugLocation(104, 19);
			// SugarCpp.g:104:19: ( '\\n' )
			DebugEnterAlt(1);
			// SugarCpp.g:104:20: '\\n'
			{
			DebugLocation(104, 20);
			Match('\n'); 

			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INDENT", 1);
			LeaveRule("INDENT", 1);
			LeaveRule_INDENT();
		}
	}
	// $ANTLR end "INDENT"

	partial void EnterRule_DEDENT();
	partial void LeaveRule_DEDENT();

	// $ANTLR start "DEDENT"
	[GrammarRule("DEDENT")]
	private void mDEDENT()
	{
		EnterRule_DEDENT();
		EnterRule("DEDENT", 2);
		TraceIn("DEDENT", 2);
		try
		{
			int _type = DEDENT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:105:7: ({...}? => ( '\\n' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:105:9: {...}? => ( '\\n' )
			{
			DebugLocation(105, 9);
			if (!((0==1)))
			{
				throw new FailedPredicateException(input, "DEDENT", "0==1");
			}
			DebugLocation(105, 19);
			// SugarCpp.g:105:19: ( '\\n' )
			DebugEnterAlt(1);
			// SugarCpp.g:105:20: '\\n'
			{
			DebugLocation(105, 20);
			Match('\n'); 

			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DEDENT", 2);
			LeaveRule("DEDENT", 2);
			LeaveRule_DEDENT();
		}
	}
	// $ANTLR end "DEDENT"

	partial void EnterRule_Var();
	partial void LeaveRule_Var();

	// $ANTLR start "Var"
	[GrammarRule("Var")]
	private void mVar()
	{
		EnterRule_Var();
		EnterRule("Var", 3);
		TraceIn("Var", 3);
		try
		{
			int _type = Var;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:107:4: ( ( 'a' .. 'z' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:107:6: ( 'a' .. 'z' )+
			{
			DebugLocation(107, 6);
			// SugarCpp.g:107:6: ( 'a' .. 'z' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(107, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Var", 3);
			LeaveRule("Var", 3);
			LeaveRule_Var();
		}
	}
	// $ANTLR end "Var"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 4);
		TraceIn("INT", 4);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:109:4: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:109:6: ( '0' .. '9' )+
			{
			DebugLocation(109, 6);
			// SugarCpp.g:109:6: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:
					{
					DebugLocation(109, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 4);
			LeaveRule("INT", 4);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 5);
		TraceIn("WS", 5);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:111:3: ( ( ' ' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:111:5: ( ' ' )+
			{
			DebugLocation(111, 5);
			// SugarCpp.g:111:5: ( ' ' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==' '))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:111:6: ' '
					{
					DebugLocation(111, 6);
					Match(' '); 

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(111, 12);
			 Skip(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 5);
			LeaveRule("WS", 5);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_Left_Round_Bracket();
	partial void LeaveRule_Left_Round_Bracket();

	// $ANTLR start "Left_Round_Bracket"
	[GrammarRule("Left_Round_Bracket")]
	private void mLeft_Round_Bracket()
	{
		EnterRule_Left_Round_Bracket();
		EnterRule("Left_Round_Bracket", 6);
		TraceIn("Left_Round_Bracket", 6);
		try
		{
			int _type = Left_Round_Bracket;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:115:2: ( '(' )
			DebugEnterAlt(1);
			// SugarCpp.g:115:4: '('
			{
			DebugLocation(115, 4);
			Match('('); 
			DebugLocation(116, 2);

					if (Bracket[0] == null) Bracket[0] = new Stack<int>();
					Bracket[0].Push(CharIndex);
				

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Left_Round_Bracket", 6);
			LeaveRule("Left_Round_Bracket", 6);
			LeaveRule_Left_Round_Bracket();
		}
	}
	// $ANTLR end "Left_Round_Bracket"

	partial void EnterRule_Right_Round_Bracket();
	partial void LeaveRule_Right_Round_Bracket();

	// $ANTLR start "Right_Round_Bracket"
	[GrammarRule("Right_Round_Bracket")]
	private void mRight_Round_Bracket()
	{
		EnterRule_Right_Round_Bracket();
		EnterRule("Right_Round_Bracket", 7);
		TraceIn("Right_Round_Bracket", 7);
		try
		{
			int _type = Right_Round_Bracket;
			int _channel = DefaultTokenChannel;
			// SugarCpp.g:124:2: ( ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:124:4: ')'
			{
			DebugLocation(124, 4);
			Match(')'); 
			DebugLocation(125, 2);

					Console.WriteLine("Here");
					int pos = Bracket[0].Pop();
					while (Indents.Count > 0 && pos < Indents.First().CharIndex)
					{
						Emit(new CommonToken(DEDENT, "DEDENT"));
						Indents.Pop();
						CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
					}
				

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Right_Round_Bracket", 7);
			LeaveRule("Right_Round_Bracket", 7);
			LeaveRule_Right_Round_Bracket();
		}
	}
	// $ANTLR end "Right_Round_Bracket"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 8);
		TraceIn("NEWLINE", 8);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			CommonToken SP1 = default(CommonToken);

			// SugarCpp.g:138:2: ( ( ( 'r' )? '\\n' )+ ( SP )? )
			DebugEnterAlt(1);
			// SugarCpp.g:138:4: ( ( 'r' )? '\\n' )+ ( SP )?
			{
			DebugLocation(138, 4);
			// SugarCpp.g:138:4: ( ( 'r' )? '\\n' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='\n'||LA5_0=='r'))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:138:5: ( 'r' )? '\\n'
					{
					DebugLocation(138, 5);
					// SugarCpp.g:138:5: ( 'r' )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0=='r'))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:138:5: 'r'
						{
						DebugLocation(138, 5);
						Match('r'); 

						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(138, 10);
					Match('\n'); 

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(138, 17);
			// SugarCpp.g:138:17: ( SP )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0==' '))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:138:17: SP
				{
				DebugLocation(138, 17);
				int SP1Start137 = CharIndex;
				int SP1StartLine137 = Line;
				int SP1StartCharPos137 = CharPositionInLine;
				mSP(); 
				SP1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, SP1Start137, CharIndex-1);
				SP1.Line = SP1StartLine137;
				SP1.CharPositionInLine = SP1StartCharPos137;

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(139, 2);

					int indent = (SP1!=null?SP1.Text:null) == null ? 0 : (SP1!=null?SP1.Text:null).Length;
					if (indent > CurrentIndent)
					{
						Emit(new CommonToken(INDENT, "INDENT"));
						Indents.Push(new Indentation(indent, CharIndex));
						CurrentIndent = indent;
					}
					else if (indent < CurrentIndent)
					{
						while (Indents.Count > 0 && indent < CurrentIndent)
						{
							Emit(new CommonToken(DEDENT, "DEDENT"));
							Indents.Pop();
							CurrentIndent = Indents.Count == 0 ? 0 : Indents.First().Level;
						}
					}
					else
					{
						Skip();
					}
				

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 8);
			LeaveRule("NEWLINE", 8);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_SP();
	partial void LeaveRule_SP();

	// $ANTLR start "SP"
	[GrammarRule("SP")]
	private void mSP()
	{
		EnterRule_SP();
		EnterRule("SP", 9);
		TraceIn("SP", 9);
		try
		{
			// SugarCpp.g:163:12: ( ( ' ' )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:163:14: ( ' ' )+
			{
			DebugLocation(163, 14);
			// SugarCpp.g:163:14: ( ' ' )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==' '))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:163:14: ' '
					{
					DebugLocation(163, 14);
					Match(' '); 

					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

		}
		finally
		{
			TraceOut("SP", 9);
			LeaveRule("SP", 9);
			LeaveRule_SP();
		}
	}
	// $ANTLR end "SP"

	public override void mTokens()
	{
		// SugarCpp.g:1:8: ( INDENT | DEDENT | Var | INT | WS | Left_Round_Bracket | Right_Round_Bracket | NEWLINE )
		int alt8=8;
		try { DebugEnterDecision(8, false);
		switch (input.LA(1))
		{
		case '\n':
			{
			int LA8_1 = input.LA(2);

			if ((LA8_1=='\n'||LA8_1==' '||LA8_1=='r'))
			{
				alt8 = 8;
			}
			else if (((0==1)))
			{
				alt8 = 1;
			}
			else if (((0==1)))
			{
				alt8 = 2;
			}
			else if ((true))
			{
				alt8 = 8;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 1, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			}
			break;
		case 'r':
			{
			int LA8_2 = input.LA(2);

			if ((LA8_2=='\n'))
			{
				alt8 = 8;
			}
			else
			{
				alt8 = 3;
			}
			}
			break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			{
			alt8 = 4;
			}
			break;
		case ' ':
			{
			alt8 = 5;
			}
			break;
		case '(':
			{
			alt8 = 6;
			}
			break;
		case ')':
			{
			alt8 = 7;
			}
			break;
		case 'a':
		case 'b':
		case 'c':
		case 'd':
		case 'e':
		case 'f':
		case 'g':
		case 'h':
		case 'i':
		case 'j':
		case 'k':
		case 'l':
		case 'm':
		case 'n':
		case 'o':
		case 'p':
		case 'q':
		case 's':
		case 't':
		case 'u':
		case 'v':
		case 'w':
		case 'x':
		case 'y':
		case 'z':
			{
			alt8 = 3;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(8); }
		switch (alt8)
		{
		case 1:
			DebugEnterAlt(1);
			// SugarCpp.g:1:10: INDENT
			{
			DebugLocation(1, 10);
			mINDENT(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// SugarCpp.g:1:17: DEDENT
			{
			DebugLocation(1, 17);
			mDEDENT(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// SugarCpp.g:1:24: Var
			{
			DebugLocation(1, 24);
			mVar(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// SugarCpp.g:1:28: INT
			{
			DebugLocation(1, 28);
			mINT(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// SugarCpp.g:1:32: WS
			{
			DebugLocation(1, 32);
			mWS(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// SugarCpp.g:1:35: Left_Round_Bracket
			{
			DebugLocation(1, 35);
			mLeft_Round_Bracket(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// SugarCpp.g:1:54: Right_Round_Bracket
			{
			DebugLocation(1, 54);
			mRight_Round_Bracket(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// SugarCpp.g:1:74: NEWLINE
			{
			DebugLocation(1, 74);
			mNEWLINE(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}

} // namespace  SugarCpp.Compiler 
