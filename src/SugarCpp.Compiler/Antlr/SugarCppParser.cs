//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-09 12:02:42

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "'\\\\'", "']'", "'^'", "'^='", "'`'", "'and'", "'catch'", "'class'", "'const'", "'defer'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'try'", "'typedef'", "'unsigned'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc_Bracket=12;
	public const int Expr_Alloc_Equal=13;
	public const int Expr_Bin=14;
	public const int Expr_Bracket=15;
	public const int Expr_Call=16;
	public const int Expr_Call_With=17;
	public const int Expr_Cond=18;
	public const int Expr_Dict=19;
	public const int Expr_Infix=20;
	public const int Expr_Lambda=21;
	public const int Expr_New_Array=22;
	public const int Expr_New_Type=23;
	public const int Expr_Prefix=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int Generic_Patameters=29;
	public const int Global_Block=30;
	public const int IDENT=31;
	public const int INDENT=32;
	public const int Ident_List=33;
	public const int Import=34;
	public const int Left_Bracket=35;
	public const int LineComment=36;
	public const int Linq_From=37;
	public const int Linq_Let=38;
	public const int Linq_Prefix=39;
	public const int Linq_Where=40;
	public const int Match_Tuple=41;
	public const int NEWLINE=42;
	public const int NUMBER=43;
	public const int Namespace=44;
	public const int Right_Bracket=45;
	public const int Root=46;
	public const int SP=47;
	public const int STRING=48;
	public const int Stmt_Block=49;
	public const int Stmt_Defer=50;
	public const int Stmt_For=51;
	public const int Stmt_ForEach=52;
	public const int Stmt_If=53;
	public const int Stmt_Linq=54;
	public const int Stmt_Loop=55;
	public const int Stmt_Return=56;
	public const int Stmt_Try=57;
	public const int Stmt_Typedef=58;
	public const int Stmt_Using=59;
	public const int Stmt_While=60;
	public const int Type_IDENT=61;
	public const int Type_Ref=62;
	public const int Type_Tuple=63;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:164:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(164, 1);
		try
		{
			// SugarCpp.g:165:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:165:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(165, 4);
			// SugarCpp.g:165:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:165:4: NEWLINE
					{
					DebugLocation(165, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root455);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(165, 13);
			PushFollow(Follow._global_block_in_root458);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(165, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root460);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 165:30: -> ^( Root global_block )
			{
				DebugLocation(165, 33);
				// SugarCpp.g:165:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(165, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(165, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:168:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(168, 1);
		try
		{
			// SugarCpp.g:169:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:169:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(169, 4);
			// SugarCpp.g:169:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||(LA3_0>=105 && LA3_0<=106)||(LA3_0>=114 && LA3_0<=115)||LA3_0==118||LA3_0==122||LA3_0==128||(LA3_0>=133 && LA3_0<=135)||LA3_0==141))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:169:5: node ( NEWLINE )+
					{
					DebugLocation(169, 5);
					PushFollow(Follow._node_in_global_block480);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(169, 10);
					// SugarCpp.g:169:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:169:10: NEWLINE
							{
							DebugLocation(169, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block482);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 169:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(169, 24);
				// SugarCpp.g:169:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(169, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(169, 39);
				// SugarCpp.g:169:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(169, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:172:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(172, 1);
		try
		{
			// SugarCpp.g:173:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:173:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(173, 4);
				PushFollow(Follow._func_def_in_node505);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:174:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(174, 4);
				PushFollow(Follow._class_def_in_node510);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:175:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(175, 4);
				PushFollow(Follow._enum_def_in_node515);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:176:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				PushFollow(Follow._global_alloc_in_node520);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:177:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 4);
				PushFollow(Follow._global_using_in_node525);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:178:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(178, 4);
				PushFollow(Follow._global_typedef_in_node530);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:179:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(179, 4);
				PushFollow(Follow._import_def_in_node535);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:180:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 4);
				PushFollow(Follow._namespace_def_in_node540);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:183:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(183, 1);
		try
		{
			// SugarCpp.g:184:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
			case 105:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:184:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args552); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:185:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args557); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:186:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				PushFollow(Follow._ident_in_attribute_args562);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:189:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(189, 1);
		try
		{
			// SugarCpp.g:190:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT||LA10_0==105))
			{
				alt10 = 1;
			}
			else if ((LA10_0==115))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:190:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(190, 4);
				PushFollow(Follow._ident_in_attribute_item573);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(190, 10);
				// SugarCpp.g:190:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==71))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:190:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(190, 11);
					char_literal18=(IToken)Match(input,71,Follow._71_in_attribute_item576);  
					stream_71.Add(char_literal18);

					DebugLocation(190, 15);
					PushFollow(Follow._attribute_args_in_attribute_item578);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(190, 30);
					// SugarCpp.g:190:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==78))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:190:31: ',' attribute_args
							{
							DebugLocation(190, 31);
							char_literal20=(IToken)Match(input,78,Follow._78_in_attribute_item581);  
							stream_78.Add(char_literal20);

							DebugLocation(190, 35);
							PushFollow(Follow._attribute_args_in_attribute_item583);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(190, 52);
					char_literal22=(IToken)Match(input,72,Follow._72_in_attribute_item587);  
					stream_72.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 190:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(190, 61);
					// SugarCpp.g:190:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(190, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(190, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(190, 79);
					// SugarCpp.g:190:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(190, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:191:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(191, 4);
				string_literal23=(IToken)Match(input,115,Follow._115_in_attribute_item605);  
				stream_115.Add(string_literal23);

				DebugLocation(191, 12);
				// SugarCpp.g:191:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==71))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:191:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(191, 13);
					char_literal24=(IToken)Match(input,71,Follow._71_in_attribute_item608);  
					stream_71.Add(char_literal24);

					DebugLocation(191, 17);
					PushFollow(Follow._attribute_args_in_attribute_item610);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(191, 32);
					// SugarCpp.g:191:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==78))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:191:33: ',' attribute_args
							{
							DebugLocation(191, 33);
							char_literal26=(IToken)Match(input,78,Follow._78_in_attribute_item613);  
							stream_78.Add(char_literal26);

							DebugLocation(191, 37);
							PushFollow(Follow._attribute_args_in_attribute_item615);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(191, 54);
					char_literal28=(IToken)Match(input,72,Follow._72_in_attribute_item619);  
					stream_72.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 115
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 191:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(191, 63);
					// SugarCpp.g:191:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(191, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(191, 75);
					adaptor.AddChild(root_1, stream_115.NextNode());
					DebugLocation(191, 83);
					// SugarCpp.g:191:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(191, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:194:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(194, 1);
		try
		{
			// SugarCpp.g:195:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:195:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(195, 4);
			// SugarCpp.g:195:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==106))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:195:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(195, 5);
					char_literal29=(IToken)Match(input,106,Follow._106_in_attribute644);  
					stream_106.Add(char_literal29);

					DebugLocation(195, 9);
					PushFollow(Follow._attribute_item_in_attribute646);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(195, 24);
					// SugarCpp.g:195:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==78))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:195:25: ',' attribute_item
							{
							DebugLocation(195, 25);
							char_literal31=(IToken)Match(input,78,Follow._78_in_attribute649);  
							stream_78.Add(char_literal31);

							DebugLocation(195, 29);
							PushFollow(Follow._attribute_item_in_attribute651);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(195, 46);
					char_literal33=(IToken)Match(input,108,Follow._108_in_attribute655);  
					stream_108.Add(char_literal33);

					DebugLocation(195, 50);
					// SugarCpp.g:195:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:195:50: NEWLINE
							{
							DebugLocation(195, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute657);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 195:61: -> ( attribute_item )+
			{
				DebugLocation(195, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(195, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:198:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(198, 1);
		try
		{
			// SugarCpp.g:199:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:199:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) )
			{
			DebugLocation(199, 4);
			// SugarCpp.g:199:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==106))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:199:4: attribute
				{
				DebugLocation(199, 4);
				PushFollow(Follow._attribute_in_global_alloc676);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(199, 15);
			PushFollow(Follow._ident_list_in_global_alloc679);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(199, 26);
			// SugarCpp.g:199:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==88))
			{
				alt19 = 1;
			}
			else if ((LA19_0==90))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:199:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(199, 28);
				char_literal37=(IToken)Match(input,88,Follow._88_in_global_alloc683);  
				stream_88.Add(char_literal37);

				DebugLocation(199, 32);
				PushFollow(Follow._type_name_in_global_alloc685);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(199, 42);
				// SugarCpp.g:199:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 90:
				case 96:
					{
					alt17 = 1;
					}
					break;
				case 71:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:199:44: ( '=' | ':=' ) expr
					{
					DebugLocation(199, 44);
					// SugarCpp.g:199:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==96))
					{
						alt15 = 1;
					}
					else if ((LA15_0==90))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:199:45: '='
						{
						DebugLocation(199, 45);
						char_literal39=(IToken)Match(input,96,Follow._96_in_global_alloc690);  
						stream_96.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:199:51: ':='
						{
						DebugLocation(199, 51);
						string_literal40=(IToken)Match(input,90,Follow._90_in_global_alloc694);  
						stream_90.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(199, 57);
					PushFollow(Follow._expr_in_global_alloc697);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 199:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(199, 65);
						// SugarCpp.g:199:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(199, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(199, 84);
						// SugarCpp.g:199:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(199, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(199, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(199, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(199, 116);
						// SugarCpp.g:199:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(199, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:200:43: '(' ( expr_list )? ')'
					{
					DebugLocation(200, 43);
					char_literal42=(IToken)Match(input,71,Follow._71_in_global_alloc757);  
					stream_71.Add(char_literal42);

					DebugLocation(200, 47);
					// SugarCpp.g:200:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==64||LA16_0==69||LA16_0==71||LA16_0==73||(LA16_0>=75 && LA16_0<=76)||(LA16_0>=79 && LA16_0<=80)||LA16_0==105||LA16_0==107||LA16_0==129||LA16_0==141))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:200:47: expr_list
						{
						DebugLocation(200, 47);
						PushFollow(Follow._expr_list_in_global_alloc759);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(200, 58);
					char_literal44=(IToken)Match(input,72,Follow._72_in_global_alloc762);  
					stream_72.Add(char_literal44);



					{
					// AST REWRITE
					// elements: type_name, attribute, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 200:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(200, 65);
						// SugarCpp.g:200:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(200, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(200, 86);
						// SugarCpp.g:200:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(200, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(200, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(200, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(200, 118);
						// SugarCpp.g:200:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(200, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:201:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 201:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(201, 20);
						// SugarCpp.g:201:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(201, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(201, 39);
						// SugarCpp.g:201:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(201, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(201, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(201, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:203:10: ':=' ( modify_expr ( ',' modify_expr )* )
				{
				DebugLocation(203, 10);
				string_literal45=(IToken)Match(input,90,Follow._90_in_global_alloc835);  
				stream_90.Add(string_literal45);

				DebugLocation(203, 15);
				// SugarCpp.g:203:15: ( modify_expr ( ',' modify_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:203:16: modify_expr ( ',' modify_expr )*
				{
				DebugLocation(203, 16);
				PushFollow(Follow._modify_expr_in_global_alloc838);
				modify_expr46=modify_expr();
				PopFollow();

				stream_modify_expr.Add(modify_expr46.Tree);
				DebugLocation(203, 28);
				// SugarCpp.g:203:28: ( ',' modify_expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==78))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:203:29: ',' modify_expr
						{
						DebugLocation(203, 29);
						char_literal47=(IToken)Match(input,78,Follow._78_in_global_alloc841);  
						stream_78.Add(char_literal47);

						DebugLocation(203, 33);
						PushFollow(Follow._modify_expr_in_global_alloc843);
						modify_expr48=modify_expr();
						PopFollow();

						stream_modify_expr.Add(modify_expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, 90, modify_expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 203:48: -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ )
				{
					DebugLocation(203, 51);
					// SugarCpp.g:203:51: ^( ':=' ( attribute )? ident_list ( modify_expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(203, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_90.NextNode(), root_1);

					DebugLocation(203, 58);
					// SugarCpp.g:203:58: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(203, 58);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(203, 69);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(203, 80);
					if (!(stream_modify_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_modify_expr.HasNext )
					{
						DebugLocation(203, 80);
						adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					}
					stream_modify_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:207:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(207, 1);
		try
		{
			// SugarCpp.g:208:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:208:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(208, 4);
			PushFollow(Follow._stmt_using_in_global_using880);
			stmt_using49=stmt_using();
			PopFollow();

			adaptor.AddChild(root_0, stmt_using49.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:211:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(211, 1);
		try
		{
			// SugarCpp.g:212:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:212:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(212, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef891);
			stmt_typedef50=stmt_typedef();
			PopFollow();

			adaptor.AddChild(root_0, stmt_typedef50.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:215:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken STRING52 = default(IToken);
		IToken NEWLINE53 = default(IToken);
		IToken INDENT54 = default(IToken);
		IToken NEWLINE55 = default(IToken);
		IToken STRING56 = default(IToken);
		IToken NEWLINE57 = default(IToken);
		IToken DEDENT58 = default(IToken);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree STRING52_tree = default(CommonTree);
		CommonTree NEWLINE53_tree = default(CommonTree);
		CommonTree INDENT54_tree = default(CommonTree);
		CommonTree NEWLINE55_tree = default(CommonTree);
		CommonTree STRING56_tree = default(CommonTree);
		CommonTree NEWLINE57_tree = default(CommonTree);
		CommonTree DEDENT58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(215, 1);
		try
		{
			// SugarCpp.g:216:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:216:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(216, 4);
			string_literal51=(IToken)Match(input,122,Follow._122_in_import_def902);  
			stream_122.Add(string_literal51);

			DebugLocation(216, 13);
			// SugarCpp.g:216:13: ( STRING )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==STRING))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:216:13: STRING
				{
				DebugLocation(216, 13);
				STRING52=(IToken)Match(input,STRING,Follow._STRING_in_import_def904);  
				stream_STRING.Add(STRING52);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(216, 21);
			// SugarCpp.g:216:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			try
			{
				alt25 = dfa25.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:216:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(216, 22);
				// SugarCpp.g:216:22: ( NEWLINE )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==NEWLINE))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:216:22: NEWLINE
						{
						DebugLocation(216, 22);
						NEWLINE53=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def908);  
						stream_NEWLINE.Add(NEWLINE53);


						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(216, 31);
				INDENT54=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def911);  
				stream_INDENT.Add(INDENT54);

				DebugLocation(216, 38);
				// SugarCpp.g:216:38: ( NEWLINE )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==NEWLINE))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:216:38: NEWLINE
						{
						DebugLocation(216, 38);
						NEWLINE55=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def913);  
						stream_NEWLINE.Add(NEWLINE55);


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(216, 48);
				// SugarCpp.g:216:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==STRING))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:216:49: STRING ( NEWLINE )+
						{
						DebugLocation(216, 49);
						STRING56=(IToken)Match(input,STRING,Follow._STRING_in_import_def918);  
						stream_STRING.Add(STRING56);

						DebugLocation(216, 56);
						// SugarCpp.g:216:56: ( NEWLINE )+
						int cnt23=0;
						try { DebugEnterSubRule(23);
						while (true)
						{
							int alt23=2;
							try { DebugEnterDecision(23, false);
							int LA23_0 = input.LA(1);

							if ((LA23_0==NEWLINE))
							{
								alt23 = 1;
							}


							} finally { DebugExitDecision(23); }
							switch (alt23)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:216:56: NEWLINE
								{
								DebugLocation(216, 56);
								NEWLINE57=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def920);  
								stream_NEWLINE.Add(NEWLINE57);


								}
								break;

							default:
								if (cnt23 >= 1)
									goto loop23;

								EarlyExitException eee23 = new EarlyExitException( 23, input );
								DebugRecognitionException(eee23);
								throw eee23;
							}
							cnt23++;
						}
						loop23:
							;

						} finally { DebugExitSubRule(23); }


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(216, 67);
				DEDENT58=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def925);  
				stream_DEDENT.Add(DEDENT58);


				}
				break;

			}
			} finally { DebugExitSubRule(25); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 216:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(216, 79);
				// SugarCpp.g:216:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(216, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(216, 88);
				// SugarCpp.g:216:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(216, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:219:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(219, 1);
		try
		{
			// SugarCpp.g:220:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:220:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(220, 4);
			// SugarCpp.g:220:4: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==106))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:4: attribute
				{
				DebugLocation(220, 4);
				PushFollow(Follow._attribute_in_enum_def947);
				attribute59=attribute();
				PopFollow();

				stream_attribute.Add(attribute59.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(220, 15);
			string_literal60=(IToken)Match(input,118,Follow._118_in_enum_def950);  
			stream_118.Add(string_literal60);

			DebugLocation(220, 22);
			PushFollow(Follow._ident_in_enum_def952);
			ident61=ident();
			PopFollow();

			stream_ident.Add(ident61.Tree);
			DebugLocation(220, 28);
			char_literal62=(IToken)Match(input,96,Follow._96_in_enum_def954);  
			stream_96.Add(char_literal62);

			DebugLocation(220, 32);
			// SugarCpp.g:220:32: ( ident ( '|' ident )* )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==IDENT||LA28_0==105))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:33: ident ( '|' ident )*
				{
				DebugLocation(220, 33);
				PushFollow(Follow._ident_in_enum_def957);
				ident63=ident();
				PopFollow();

				stream_ident.Add(ident63.Tree);
				DebugLocation(220, 39);
				// SugarCpp.g:220:39: ( '|' ident )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==138))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:220:40: '|' ident
						{
						DebugLocation(220, 40);
						char_literal64=(IToken)Match(input,138,Follow._138_in_enum_def960);  
						stream_138.Add(char_literal64);

						DebugLocation(220, 44);
						PushFollow(Follow._ident_in_enum_def962);
						ident65=ident();
						PopFollow();

						stream_ident.Add(ident65.Tree);

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 220:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(220, 57);
				// SugarCpp.g:220:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(220, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(220, 64);
				// SugarCpp.g:220:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(220, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(220, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(220, 81);
				// SugarCpp.g:220:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(220, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(220, 94);
				// SugarCpp.g:220:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(220, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:223:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken INDENT69 = default(IToken);
		IToken NEWLINE70 = default(IToken);
		IToken DEDENT72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block71 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree INDENT69_tree = default(CommonTree);
		CommonTree NEWLINE70_tree = default(CommonTree);
		CommonTree DEDENT72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(223, 1);
		try
		{
			// SugarCpp.g:224:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:224:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(224, 4);
			string_literal66=(IToken)Match(input,128,Follow._128_in_namespace_def995);  
			stream_128.Add(string_literal66);

			DebugLocation(224, 16);
			PushFollow(Follow._ident_in_namespace_def997);
			ident67=ident();
			PopFollow();

			stream_ident.Add(ident67.Tree);
			DebugLocation(224, 22);
			// SugarCpp.g:224:22: ( NEWLINE )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:224:22: NEWLINE
					{
					DebugLocation(224, 22);
					NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def999);  
					stream_NEWLINE.Add(NEWLINE68);


					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(224, 31);
			INDENT69=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1002);  
			stream_INDENT.Add(INDENT69);

			DebugLocation(224, 38);
			// SugarCpp.g:224:38: ( NEWLINE )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==NEWLINE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:224:38: NEWLINE
					{
					DebugLocation(224, 38);
					NEWLINE70=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1004);  
					stream_NEWLINE.Add(NEWLINE70);


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(224, 47);
			PushFollow(Follow._global_block_in_namespace_def1007);
			global_block71=global_block();
			PopFollow();

			stream_global_block.Add(global_block71.Tree);
			DebugLocation(224, 60);
			DEDENT72=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1009);  
			stream_DEDENT.Add(DEDENT72);



			{
			// AST REWRITE
			// elements: global_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 224:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(224, 70);
				// SugarCpp.g:224:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(224, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(224, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(224, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:227:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken NEWLINE84 = default(IToken);
		IToken INDENT85 = default(IToken);
		IToken NEWLINE86 = default(IToken);
		IToken DEDENT88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		CommonTree char_literal79_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree NEWLINE84_tree = default(CommonTree);
		CommonTree INDENT85_tree = default(CommonTree);
		CommonTree NEWLINE86_tree = default(CommonTree);
		CommonTree DEDENT88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(227, 1);
		try
		{
			// SugarCpp.g:228:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:228:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(228, 5);
			// SugarCpp.g:228:5: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==106))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:228:5: attribute
				{
				DebugLocation(228, 5);
				PushFollow(Follow._attribute_in_class_def1031);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(228, 16);
			string_literal74=(IToken)Match(input,114,Follow._114_in_class_def1034);  
			stream_114.Add(string_literal74);

			DebugLocation(228, 24);
			PushFollow(Follow._ident_in_class_def1036);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(228, 30);
			// SugarCpp.g:228:30: ( generic_parameter )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==92))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:228:31: generic_parameter
				{
				DebugLocation(228, 31);
				PushFollow(Follow._generic_parameter_in_class_def1039);
				generic_parameter76=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(228, 51);
			// SugarCpp.g:228:51: ( '(' func_args ')' )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==71))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:228:52: '(' func_args ')'
				{
				DebugLocation(228, 52);
				char_literal77=(IToken)Match(input,71,Follow._71_in_class_def1044);  
				stream_71.Add(char_literal77);

				DebugLocation(228, 56);
				PushFollow(Follow._func_args_in_class_def1046);
				func_args78=func_args();
				PopFollow();

				stream_func_args.Add(func_args78.Tree);
				DebugLocation(228, 66);
				char_literal79=(IToken)Match(input,72,Follow._72_in_class_def1048);  
				stream_72.Add(char_literal79);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(228, 72);
			// SugarCpp.g:228:72: ( ':' ident ( ',' ident )* )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==88))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:228:73: ':' ident ( ',' ident )*
				{
				DebugLocation(228, 73);
				char_literal80=(IToken)Match(input,88,Follow._88_in_class_def1053);  
				stream_88.Add(char_literal80);

				DebugLocation(228, 77);
				PushFollow(Follow._ident_in_class_def1055);
				ident81=ident();
				PopFollow();

				stream_ident.Add(ident81.Tree);
				DebugLocation(228, 83);
				// SugarCpp.g:228:83: ( ',' ident )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==78))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:228:84: ',' ident
						{
						DebugLocation(228, 84);
						char_literal82=(IToken)Match(input,78,Follow._78_in_class_def1058);  
						stream_78.Add(char_literal82);

						DebugLocation(228, 88);
						PushFollow(Follow._ident_in_class_def1060);
						ident83=ident();
						PopFollow();

						stream_ident.Add(ident83.Tree);

						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(228, 98);
			// SugarCpp.g:228:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			try
			{
				alt38 = dfa38.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:228:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(228, 99);
				// SugarCpp.g:228:99: ( NEWLINE )+
				int cnt36=0;
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==NEWLINE))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:228:99: NEWLINE
						{
						DebugLocation(228, 99);
						NEWLINE84=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1067);  
						stream_NEWLINE.Add(NEWLINE84);


						}
						break;

					default:
						if (cnt36 >= 1)
							goto loop36;

						EarlyExitException eee36 = new EarlyExitException( 36, input );
						DebugRecognitionException(eee36);
						throw eee36;
					}
					cnt36++;
				}
				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(228, 108);
				INDENT85=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1070);  
				stream_INDENT.Add(INDENT85);

				DebugLocation(228, 115);
				// SugarCpp.g:228:115: ( NEWLINE )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==NEWLINE))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:228:115: NEWLINE
						{
						DebugLocation(228, 115);
						NEWLINE86=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1072);  
						stream_NEWLINE.Add(NEWLINE86);


						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(228, 124);
				PushFollow(Follow._global_block_in_class_def1075);
				global_block87=global_block();
				PopFollow();

				stream_global_block.Add(global_block87.Tree);
				DebugLocation(228, 137);
				DEDENT88=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1077);  
				stream_DEDENT.Add(DEDENT88);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: generic_parameter, ident, func_args, attribute, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 228:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(228, 149);
				// SugarCpp.g:228:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(228, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(228, 157);
				// SugarCpp.g:228:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(228, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(228, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(228, 174);
				// SugarCpp.g:228:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(228, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(228, 193);
				// SugarCpp.g:228:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(228, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(228, 204);
				// SugarCpp.g:228:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(228, 205);
					// SugarCpp.g:228:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(228, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(228, 218);
					// SugarCpp.g:228:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(228, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(228, 228);
				// SugarCpp.g:228:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(228, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:231:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);

		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(231, 34);
		try
		{
			// SugarCpp.g:231:13: ( '*' | '[' ']' | '&' )
			int alt39=3;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case 73:
				{
				alt39 = 1;
				}
				break;
			case 106:
				{
				alt39 = 2;
				}
				break;
			case 69:
				{
				alt39 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(231, 15);
				char_literal89=(IToken)Match(input,73,Follow._73_in_type_name_op1118); 
				char_literal89_tree = (CommonTree)adaptor.Create(char_literal89);
				adaptor.AddChild(root_0, char_literal89_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:231:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(231, 21);
				char_literal90=(IToken)Match(input,106,Follow._106_in_type_name_op1122); 
				char_literal90_tree = (CommonTree)adaptor.Create(char_literal90);
				adaptor.AddChild(root_0, char_literal90_tree);
				DebugLocation(231, 25);
				char_literal91=(IToken)Match(input,108,Follow._108_in_type_name_op1124); 
				char_literal91_tree = (CommonTree)adaptor.Create(char_literal91);
				adaptor.AddChild(root_0, char_literal91_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:231:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(231, 31);
				char_literal92=(IToken)Match(input,69,Follow._69_in_type_name_op1128); 
				char_literal92_tree = (CommonTree)adaptor.Create(char_literal92);
				adaptor.AddChild(root_0, char_literal92_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
		}
		DebugLocation(231, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:232:1: type_name : ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal93 = default(IToken);
		IToken string_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(232, 1);
		try
		{
			// SugarCpp.g:233:2: ( ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:233:4: ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(233, 4);
			// SugarCpp.g:233:4: ( 'const' )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==115))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:233:4: 'const'
				{
				DebugLocation(233, 4);
				string_literal93=(IToken)Match(input,115,Follow._115_in_type_name1137);  
				stream_115.Add(string_literal93);


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(233, 13);
			// SugarCpp.g:233:13: ( 'unsigned' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==134))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:233:13: 'unsigned'
				{
				DebugLocation(233, 13);
				string_literal94=(IToken)Match(input,134,Follow._134_in_type_name1140);  
				stream_134.Add(string_literal94);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(233, 25);
			PushFollow(Follow._ident_in_type_name1143);
			ident95=ident();
			PopFollow();

			stream_ident.Add(ident95.Tree);
			DebugLocation(233, 31);
			// SugarCpp.g:233:31: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==92))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:233:32: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(233, 32);
				char_literal96=(IToken)Match(input,92,Follow._92_in_type_name1146);  
				stream_92.Add(char_literal96);

				DebugLocation(233, 36);
				// SugarCpp.g:233:36: ( type_name ( ',' type_name )* )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==IDENT||LA43_0==105||LA43_0==115||LA43_0==134))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:233:37: type_name ( ',' type_name )*
					{
					DebugLocation(233, 37);
					PushFollow(Follow._type_name_in_type_name1149);
					type_name97=type_name();
					PopFollow();

					stream_type_name.Add(type_name97.Tree);
					DebugLocation(233, 47);
					// SugarCpp.g:233:47: ( ',' type_name )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==78))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:233:48: ',' type_name
							{
							DebugLocation(233, 48);
							char_literal98=(IToken)Match(input,78,Follow._78_in_type_name1152);  
							stream_78.Add(char_literal98);

							DebugLocation(233, 52);
							PushFollow(Follow._type_name_in_type_name1154);
							type_name99=type_name();
							PopFollow();

							stream_type_name.Add(type_name99.Tree);

							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(233, 66);
				char_literal100=(IToken)Match(input,99,Follow._99_in_type_name1160);  
				stream_99.Add(char_literal100);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(233, 72);
			// SugarCpp.g:233:72: ( type_name_op )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==106))
				{
					int LA45_2 = input.LA(2);

					if ((LA45_2==108))
					{
						alt45 = 1;
					}


				}
				else if ((LA45_0==69||LA45_0==73))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:233:72: type_name_op
					{
					DebugLocation(233, 72);
					PushFollow(Follow._type_name_op_in_type_name1164);
					type_name_op101=type_name_op();
					PopFollow();

					stream_type_name_op.Add(type_name_op101.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: 115, type_name, type_name_op, 134, ident, 99, 92
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 233:86: -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(233, 89);
				// SugarCpp.g:233:89: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(233, 91);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(233, 102);
				// SugarCpp.g:233:102: ( 'const' )?
				if (stream_115.HasNext)
				{
					DebugLocation(233, 102);
					adaptor.AddChild(root_1, stream_115.NextNode());

				}
				stream_115.Reset();
				DebugLocation(233, 111);
				// SugarCpp.g:233:111: ( 'unsigned' )?
				if (stream_134.HasNext)
				{
					DebugLocation(233, 111);
					adaptor.AddChild(root_1, stream_134.NextNode());

				}
				stream_134.Reset();
				DebugLocation(233, 123);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(233, 129);
				// SugarCpp.g:233:129: ( '<' ( type_name )* '>' )?
				if (stream_type_name.HasNext||stream_99.HasNext||stream_92.HasNext)
				{
					DebugLocation(233, 130);
					adaptor.AddChild(root_1, stream_92.NextNode());
					DebugLocation(233, 134);
					// SugarCpp.g:233:134: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(233, 134);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(233, 145);
					adaptor.AddChild(root_1, stream_99.NextNode());

				}
				stream_type_name.Reset();
				stream_99.Reset();
				stream_92.Reset();
				DebugLocation(233, 152);
				// SugarCpp.g:233:152: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(233, 152);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:236:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 16);
		TraceIn("generic_parameter_inside", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(236, 1);
		try
		{
			// SugarCpp.g:237:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:237:4: ident ( ',' ident )*
			{
			DebugLocation(237, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1204);
			ident102=ident();
			PopFollow();

			stream_ident.Add(ident102.Tree);
			DebugLocation(237, 10);
			// SugarCpp.g:237:10: ( ',' ident )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==78))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:237:11: ',' ident
					{
					DebugLocation(237, 11);
					char_literal103=(IToken)Match(input,78,Follow._78_in_generic_parameter_inside1207);  
					stream_78.Add(char_literal103);

					DebugLocation(237, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1209);
					ident104=ident();
					PopFollow();

					stream_ident.Add(ident104.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 237:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(237, 26);
				// SugarCpp.g:237:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(237, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(237, 47);
				// SugarCpp.g:237:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(237, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 16);
			LeaveRule("generic_parameter_inside", 16);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:240:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 17);
		TraceIn("generic_parameter", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(240, 1);
		try
		{
			// SugarCpp.g:241:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(241, 4);
			char_literal105=(IToken)Match(input,92,Follow._92_in_generic_parameter1231);  
			stream_92.Add(char_literal105);

			DebugLocation(241, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1233);
			generic_parameter_inside106=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside106.Tree);
			DebugLocation(241, 33);
			char_literal107=(IToken)Match(input,99,Follow._99_in_generic_parameter1235);  
			stream_99.Add(char_literal107);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 241:37: -> generic_parameter_inside
			{
				DebugLocation(241, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 17);
			LeaveRule("generic_parameter", 17);
			LeaveRule_generic_parameter();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:244:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 18);
		TraceIn("func_args", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(244, 1);
		try
		{
			// SugarCpp.g:245:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:245:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(245, 4);
			PushFollow(Follow._func_args_item_in_func_args1250);
			func_args_item108=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item108.Tree);
			DebugLocation(245, 19);
			// SugarCpp.g:245:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==78))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:245:20: ',' func_args_item
					{
					DebugLocation(245, 20);
					char_literal109=(IToken)Match(input,78,Follow._78_in_func_args1253);  
					stream_78.Add(char_literal109);

					DebugLocation(245, 24);
					PushFollow(Follow._func_args_item_in_func_args1255);
					func_args_item110=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item110.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 245:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(245, 44);
				// SugarCpp.g:245:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(245, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(245, 56);
				// SugarCpp.g:245:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(245, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 18);
			LeaveRule("func_args", 18);
			LeaveRule_func_args();
		}
		DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:248:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 19);
		TraceIn("func_args_item", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken string_literal115 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken string_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree string_literal115_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree string_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(248, 1);
		try
		{
			// SugarCpp.g:249:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt51=2;
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==IDENT||LA51_0==105))
			{
				alt51 = 1;
			}
			else if ((LA51_0==90))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:249:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(249, 4);
				PushFollow(Follow._ident_list_in_func_args_item1277);
				ident_list111=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list111.Tree);
				DebugLocation(249, 15);
				char_literal112=(IToken)Match(input,88,Follow._88_in_func_args_item1279);  
				stream_88.Add(char_literal112);

				DebugLocation(249, 19);
				PushFollow(Follow._type_name_in_func_args_item1281);
				type_name113=type_name();
				PopFollow();

				stream_type_name.Add(type_name113.Tree);
				DebugLocation(249, 29);
				// SugarCpp.g:249:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt50=3;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				switch (input.LA(1))
				{
				case 90:
				case 96:
					{
					alt50 = 1;
					}
					break;
				case 71:
					{
					alt50 = 2;
					}
					break;
				case 72:
				case 78:
					{
					alt50 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:249:31: ( '=' | ':=' ) expr
					{
					DebugLocation(249, 31);
					// SugarCpp.g:249:31: ( '=' | ':=' )
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==96))
					{
						alt48 = 1;
					}
					else if ((LA48_0==90))
					{
						alt48 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:249:32: '='
						{
						DebugLocation(249, 32);
						char_literal114=(IToken)Match(input,96,Follow._96_in_func_args_item1286);  
						stream_96.Add(char_literal114);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:249:38: ':='
						{
						DebugLocation(249, 38);
						string_literal115=(IToken)Match(input,90,Follow._90_in_func_args_item1290);  
						stream_90.Add(string_literal115);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(249, 44);
					PushFollow(Follow._expr_in_func_args_item1293);
					expr116=expr();
					PopFollow();

					stream_expr.Add(expr116.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 249:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(249, 53);
						// SugarCpp.g:249:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(249, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(249, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(249, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(249, 93);
						// SugarCpp.g:249:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(249, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:250:33: '(' ( expr_list )? ')'
					{
					DebugLocation(250, 33);
					char_literal117=(IToken)Match(input,71,Follow._71_in_func_args_item1341);  
					stream_71.Add(char_literal117);

					DebugLocation(250, 37);
					// SugarCpp.g:250:37: ( expr_list )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, false);
					int LA49_0 = input.LA(1);

					if ((LA49_0==IDENT||LA49_0==NUMBER||LA49_0==STRING||LA49_0==64||LA49_0==69||LA49_0==71||LA49_0==73||(LA49_0>=75 && LA49_0<=76)||(LA49_0>=79 && LA49_0<=80)||LA49_0==105||LA49_0==107||LA49_0==129||LA49_0==141))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:250:37: expr_list
						{
						DebugLocation(250, 37);
						PushFollow(Follow._expr_list_in_func_args_item1343);
						expr_list118=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list118.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(250, 48);
					char_literal119=(IToken)Match(input,72,Follow._72_in_func_args_item1346);  
					stream_72.Add(char_literal119);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 250:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(250, 56);
						// SugarCpp.g:250:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(250, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(250, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(250, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(250, 98);
						// SugarCpp.g:250:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(250, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:251:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 251:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(251, 18);
						// SugarCpp.g:251:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(251, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(251, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(251, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:253:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(253, 8);
				string_literal120=(IToken)Match(input,90,Follow._90_in_func_args_item1403); 
				string_literal120_tree = (CommonTree)adaptor.Create(string_literal120);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal120_tree, root_0);
				DebugLocation(253, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1407);
				modify_expr121=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr121.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 19);
			LeaveRule("func_args_item", 19);
			LeaveRule_func_args_item();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:256:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 20);
		TraceIn("func_def", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken NEWLINE130 = default(IToken);
		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree NEWLINE130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(256, 4);
		try
		{
			// SugarCpp.g:257:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:257:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(257, 4);
			// SugarCpp.g:257:4: ( attribute )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==106))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:4: attribute
				{
				DebugLocation(257, 4);
				PushFollow(Follow._attribute_in_func_def1418);
				attribute122=attribute();
				PopFollow();

				stream_attribute.Add(attribute122.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(257, 15);
			// SugarCpp.g:257:15: ( type_name )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:15: type_name
				{
				DebugLocation(257, 15);
				PushFollow(Follow._type_name_in_func_def1421);
				type_name123=type_name();
				PopFollow();

				stream_type_name.Add(type_name123.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(257, 26);
			// SugarCpp.g:257:26: ( '~' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==141))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:26: '~'
				{
				DebugLocation(257, 26);
				char_literal124=(IToken)Match(input,141,Follow._141_in_func_def1424);  
				stream_141.Add(char_literal124);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(257, 31);
			PushFollow(Follow._ident_in_func_def1427);
			ident125=ident();
			PopFollow();

			stream_ident.Add(ident125.Tree);
			DebugLocation(257, 37);
			// SugarCpp.g:257:37: ( generic_parameter )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==92))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:37: generic_parameter
				{
				DebugLocation(257, 37);
				PushFollow(Follow._generic_parameter_in_func_def1429);
				generic_parameter126=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(257, 56);
			char_literal127=(IToken)Match(input,71,Follow._71_in_func_def1432);  
			stream_71.Add(char_literal127);

			DebugLocation(257, 60);
			// SugarCpp.g:257:60: ( func_args )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==90||LA56_0==105))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:60: func_args
				{
				DebugLocation(257, 60);
				PushFollow(Follow._func_args_in_func_def1434);
				func_args128=func_args();
				PopFollow();

				stream_func_args.Add(func_args128.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(257, 71);
			char_literal129=(IToken)Match(input,72,Follow._72_in_func_def1437);  
			stream_72.Add(char_literal129);

			DebugLocation(257, 75);
			// SugarCpp.g:257:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==NEWLINE))
			{
				alt58 = 1;
			}
			else if ((LA58_0==96))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(257, 76);
				// SugarCpp.g:257:76: ( NEWLINE )+
				int cnt57=0;
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==NEWLINE))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:257:76: NEWLINE
						{
						DebugLocation(257, 76);
						NEWLINE130=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1440);  
						stream_NEWLINE.Add(NEWLINE130);


						}
						break;

					default:
						if (cnt57 >= 1)
							goto loop57;

						EarlyExitException eee57 = new EarlyExitException( 57, input );
						DebugRecognitionException(eee57);
						throw eee57;
					}
					cnt57++;
				}
				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(257, 85);
				PushFollow(Follow._stmt_block_in_func_def1443);
				stmt_block131=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block131.Tree);


				{
				// AST REWRITE
				// elements: func_args, stmt_block, generic_parameter, 141, attribute, type_name, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 257:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(257, 99);
					// SugarCpp.g:257:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(257, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(257, 110);
					// SugarCpp.g:257:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(257, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(257, 121);
					// SugarCpp.g:257:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(257, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(257, 132);
					// SugarCpp.g:257:132: ( '~' )?
					if (stream_141.HasNext)
					{
						DebugLocation(257, 132);
						adaptor.AddChild(root_1, stream_141.NextNode());

					}
					stream_141.Reset();
					DebugLocation(257, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(257, 143);
					// SugarCpp.g:257:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(257, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(257, 162);
					// SugarCpp.g:257:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(257, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(257, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:258:23: '=' expr
				{
				DebugLocation(258, 23);
				char_literal132=(IToken)Match(input,96,Follow._96_in_func_def1492);  
				stream_96.Add(char_literal132);

				DebugLocation(258, 27);
				PushFollow(Follow._expr_in_func_def1494);
				expr133=expr();
				PopFollow();

				stream_expr.Add(expr133.Tree);


				{
				// AST REWRITE
				// elements: 141, ident, func_args, generic_parameter, attribute, expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 258:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(258, 36);
					// SugarCpp.g:258:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(258, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(258, 47);
					// SugarCpp.g:258:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(258, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(258, 58);
					// SugarCpp.g:258:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(258, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(258, 69);
					// SugarCpp.g:258:69: ( '~' )?
					if (stream_141.HasNext)
					{
						DebugLocation(258, 69);
						adaptor.AddChild(root_1, stream_141.NextNode());

					}
					stream_141.Reset();
					DebugLocation(258, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(258, 80);
					// SugarCpp.g:258:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(258, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(258, 99);
					// SugarCpp.g:258:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(258, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(258, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 20);
			LeaveRule("func_def", 20);
			LeaveRule_func_def();
		}
		DebugLocation(259, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:261:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 21);
		TraceIn("stmt_block", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT134 = default(IToken);
		IToken NEWLINE135 = default(IToken);
		IToken NEWLINE137 = default(IToken);
		IToken DEDENT138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT134_tree = default(CommonTree);
		CommonTree NEWLINE135_tree = default(CommonTree);
		CommonTree NEWLINE137_tree = default(CommonTree);
		CommonTree DEDENT138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(261, 1);
		try
		{
			// SugarCpp.g:262:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:262:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(262, 4);
			INDENT134=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1535);  
			stream_INDENT.Add(INDENT134);

			DebugLocation(262, 11);
			// SugarCpp.g:262:11: ( NEWLINE )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==NEWLINE))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:262:11: NEWLINE
					{
					DebugLocation(262, 11);
					NEWLINE135=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1537);  
					stream_NEWLINE.Add(NEWLINE135);


					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(262, 21);
			// SugarCpp.g:262:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==71||LA61_0==105||LA61_0==116||(LA61_0>=119 && LA61_0<=121)||(LA61_0>=126 && LA61_0<=127)||(LA61_0>=131 && LA61_0<=133)||(LA61_0>=135 && LA61_0<=137)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:262:22: stmt ( NEWLINE )+
					{
					DebugLocation(262, 22);
					PushFollow(Follow._stmt_in_stmt_block1542);
					stmt136=stmt();
					PopFollow();

					stream_stmt.Add(stmt136.Tree);
					DebugLocation(262, 27);
					// SugarCpp.g:262:27: ( NEWLINE )+
					int cnt60=0;
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==NEWLINE))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:262:27: NEWLINE
							{
							DebugLocation(262, 27);
							NEWLINE137=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1544);  
							stream_NEWLINE.Add(NEWLINE137);


							}
							break;

						default:
							if (cnt60 >= 1)
								goto loop60;

							EarlyExitException eee60 = new EarlyExitException( 60, input );
							DebugRecognitionException(eee60);
							throw eee60;
						}
						cnt60++;
					}
					loop60:
						;

					} finally { DebugExitSubRule(60); }


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(262, 38);
			DEDENT138=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1549);  
			stream_DEDENT.Add(DEDENT138);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 262:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(262, 48);
				// SugarCpp.g:262:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(262, 61);
				// SugarCpp.g:262:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(262, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 21);
			LeaveRule("stmt_block", 21);
			LeaveRule_stmt_block();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:265:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 22);
		TraceIn("stmt", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_linq144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(265, 1);
		try
		{
			// SugarCpp.g:266:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer )
			int alt62=7;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 71:
			case 105:
			case 131:
			case 133:
			case 135:
				{
				alt62 = 1;
				}
				break;
			case 121:
				{
				alt62 = 2;
				}
				break;
			case 119:
				{
				alt62 = 3;
				}
				break;
			case 127:
			case 137:
				{
				alt62 = 4;
				}
				break;
			case 132:
				{
				alt62 = 5;
				}
				break;
			case 120:
			case 126:
			case 136:
				{
				alt62 = 6;
				}
				break;
			case 116:
				{
				alt62 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(266, 4);
				PushFollow(Follow._stmt_expr_in_stmt1569);
				stmt_expr139=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr139.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:267:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(267, 4);
				PushFollow(Follow._stmt_if_in_stmt1574);
				stmt_if140=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if140.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:268:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(268, 4);
				PushFollow(Follow._stmt_for_in_stmt1579);
				stmt_for141=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for141.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:269:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(269, 4);
				PushFollow(Follow._stmt_while_in_stmt1584);
				stmt_while142=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while142.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:270:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(270, 4);
				PushFollow(Follow._stmt_try_in_stmt1589);
				stmt_try143=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try143.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:271:4: stmt_linq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(271, 4);
				PushFollow(Follow._stmt_linq_in_stmt1594);
				stmt_linq144=stmt_linq();
				PopFollow();

				adaptor.AddChild(root_0, stmt_linq144.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:272:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(272, 4);
				PushFollow(Follow._stmt_defer_in_stmt1599);
				stmt_defer145=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer145.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 22);
			LeaveRule("stmt", 22);
			LeaveRule_stmt();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:275:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 23);
		TraceIn("stmt_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef149 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(275, 1);
		try
		{
			// SugarCpp.g:276:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt63=5;
			try { DebugEnterDecision(63, false);
			try
			{
				alt63 = dfa63.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:276:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(276, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr1610);
				stmt_alloc146=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc146.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:277:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(277, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr1615);
				stmt_return147=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return147.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:278:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(278, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr1620);
				stmt_using148=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using148.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:279:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(279, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1625);
				stmt_typedef149=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef149.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:280:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(280, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr1630);
				stmt_modify150=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify150.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 23);
			LeaveRule("stmt_expr", 23);
			LeaveRule_stmt_expr();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:283:1: stmt_defer : 'defer' stmt -> ^( Stmt_Defer stmt ) ;
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 24);
		TraceIn("stmt_defer", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt152 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(283, 1);
		try
		{
			// SugarCpp.g:284:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) )
			DebugEnterAlt(1);
			// SugarCpp.g:284:4: 'defer' stmt
			{
			DebugLocation(284, 4);
			string_literal151=(IToken)Match(input,116,Follow._116_in_stmt_defer1641);  
			stream_116.Add(string_literal151);

			DebugLocation(284, 12);
			PushFollow(Follow._stmt_in_stmt_defer1643);
			stmt152=stmt();
			PopFollow();

			stream_stmt.Add(stmt152.Tree);


			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 284:17: -> ^( Stmt_Defer stmt )
			{
				DebugLocation(284, 20);
				// SugarCpp.g:284:20: ^( Stmt_Defer stmt )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(284, 22);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

				DebugLocation(284, 33);
				adaptor.AddChild(root_1, stream_stmt.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 24);
			LeaveRule("stmt_defer", 24);
			LeaveRule_stmt_defer();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:287:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 25);
		TraceIn("stmt_typedef", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal153 = default(IToken);
		IToken char_literal155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal153_tree = default(CommonTree);
		CommonTree char_literal155_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(287, 1);
		try
		{
			// SugarCpp.g:288:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:288:4: 'typedef' ident '=' type_name
			{
			DebugLocation(288, 4);
			string_literal153=(IToken)Match(input,133,Follow._133_in_stmt_typedef1662);  
			stream_133.Add(string_literal153);

			DebugLocation(288, 14);
			PushFollow(Follow._ident_in_stmt_typedef1664);
			ident154=ident();
			PopFollow();

			stream_ident.Add(ident154.Tree);
			DebugLocation(288, 20);
			char_literal155=(IToken)Match(input,96,Follow._96_in_stmt_typedef1666);  
			stream_96.Add(char_literal155);

			DebugLocation(288, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1668);
			type_name156=type_name();
			PopFollow();

			stream_type_name.Add(type_name156.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 288:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(288, 37);
				// SugarCpp.g:288:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(288, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(288, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(288, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 25);
			LeaveRule("stmt_typedef", 25);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:291:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 26);
		TraceIn("stmt_using_item", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal158 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal158_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(291, 36);
		try
		{
			// SugarCpp.g:291:16: ( ident | 'namespace' )
			int alt64=2;
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==IDENT||LA64_0==105))
			{
				alt64 = 1;
			}
			else if ((LA64_0==128))
			{
				alt64 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:291:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(291, 18);
				PushFollow(Follow._ident_in_stmt_using_item1687);
				ident157=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident157.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:291:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(291, 26);
				string_literal158=(IToken)Match(input,128,Follow._128_in_stmt_using_item1691); 
				string_literal158_tree = (CommonTree)adaptor.Create(string_literal158);
				adaptor.AddChild(root_0, string_literal158_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 26);
			LeaveRule("stmt_using_item", 26);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(291, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:292:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 27);
		TraceIn("stmt_using", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal159 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item160 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal159_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(292, 1);
		try
		{
			// SugarCpp.g:293:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:293:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(293, 4);
			string_literal159=(IToken)Match(input,135,Follow._135_in_stmt_using1699);  
			stream_135.Add(string_literal159);

			DebugLocation(293, 12);
			// SugarCpp.g:293:12: ( stmt_using_item )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==IDENT||LA65_0==105||LA65_0==128))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:293:12: stmt_using_item
					{
					DebugLocation(293, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1701);
					stmt_using_item160=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item160.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 293:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(293, 32);
				// SugarCpp.g:293:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(293, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(293, 45);
				// SugarCpp.g:293:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(293, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 27);
			LeaveRule("stmt_using", 27);
			LeaveRule_stmt_using();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:296:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 28);
		TraceIn("stmt_return", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr162 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(296, 1);
		try
		{
			// SugarCpp.g:297:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:297:4: 'return' ( expr )?
			{
			DebugLocation(297, 4);
			string_literal161=(IToken)Match(input,131,Follow._131_in_stmt_return1722);  
			stream_131.Add(string_literal161);

			DebugLocation(297, 13);
			// SugarCpp.g:297:13: ( expr )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==IDENT||LA66_0==NUMBER||LA66_0==STRING||LA66_0==64||LA66_0==69||LA66_0==71||LA66_0==73||(LA66_0>=75 && LA66_0<=76)||(LA66_0>=79 && LA66_0<=80)||LA66_0==105||LA66_0==107||LA66_0==129||LA66_0==141))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:297:13: expr
				{
				DebugLocation(297, 13);
				PushFollow(Follow._expr_in_stmt_return1724);
				expr162=expr();
				PopFollow();

				stream_expr.Add(expr162.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(66); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 297:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(297, 22);
				// SugarCpp.g:297:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(297, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(297, 36);
				// SugarCpp.g:297:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(297, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 28);
			LeaveRule("stmt_return", 28);
			LeaveRule_stmt_return();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:300:1: stmt_if : 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 29);
		TraceIn("stmt_if", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal163 = default(IToken);
		IToken NEWLINE166 = default(IToken);
		IToken string_literal167 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block168 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal163_tree = default(CommonTree);
		CommonTree NEWLINE166_tree = default(CommonTree);
		CommonTree string_literal167_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(300, 1);
		try
		{
			// SugarCpp.g:301:2: ( 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:301:4: 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )?
			{
			DebugLocation(301, 4);
			string_literal163=(IToken)Match(input,121,Follow._121_in_stmt_if1745);  
			stream_121.Add(string_literal163);

			DebugLocation(301, 9);
			PushFollow(Follow._expr_in_stmt_if1747);
			expr164=expr();
			PopFollow();

			stream_expr.Add(expr164.Tree);
			DebugLocation(301, 14);
			PushFollow(Follow._stmt_block_in_stmt_if1749);
			stmt_block165=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block165.Tree);
			DebugLocation(301, 25);
			// SugarCpp.g:301:25: ( ( NEWLINE )* 'else' stmt_block )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			try
			{
				alt68 = dfa68.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:301:26: ( NEWLINE )* 'else' stmt_block
				{
				DebugLocation(301, 26);
				// SugarCpp.g:301:26: ( NEWLINE )*
				try { DebugEnterSubRule(67);
				while (true)
				{
					int alt67=2;
					try { DebugEnterDecision(67, false);
					int LA67_0 = input.LA(1);

					if ((LA67_0==NEWLINE))
					{
						alt67 = 1;
					}


					} finally { DebugExitDecision(67); }
					switch ( alt67 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:301:26: NEWLINE
						{
						DebugLocation(301, 26);
						NEWLINE166=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1752);  
						stream_NEWLINE.Add(NEWLINE166);


						}
						break;

					default:
						goto loop67;
					}
				}

				loop67:
					;

				} finally { DebugExitSubRule(67); }

				DebugLocation(301, 35);
				string_literal167=(IToken)Match(input,117,Follow._117_in_stmt_if1755);  
				stream_117.Add(string_literal167);

				DebugLocation(301, 42);
				PushFollow(Follow._stmt_block_in_stmt_if1757);
				stmt_block168=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block168.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }



			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 301:55: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(301, 58);
				// SugarCpp.g:301:58: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(301, 60);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(301, 68);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(301, 73);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(301, 84);
				// SugarCpp.g:301:84: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(301, 84);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 29);
			LeaveRule("stmt_if", 29);
			LeaveRule_stmt_if();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:304:1: stmt_while : ( 'while' expr stmt_block -> ^( Stmt_While expr stmt_block ) | 'loop' stmt_block -> ^( Stmt_Loop stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 30);
		TraceIn("stmt_while", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal169 = default(IToken);
		IToken string_literal172 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block173 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal169_tree = default(CommonTree);
		CommonTree string_literal172_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(304, 1);
		try
		{
			// SugarCpp.g:305:2: ( 'while' expr stmt_block -> ^( Stmt_While expr stmt_block ) | 'loop' stmt_block -> ^( Stmt_Loop stmt_block ) )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==137))
			{
				alt69 = 1;
			}
			else if ((LA69_0==127))
			{
				alt69 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:305:4: 'while' expr stmt_block
				{
				DebugLocation(305, 4);
				string_literal169=(IToken)Match(input,137,Follow._137_in_stmt_while1783);  
				stream_137.Add(string_literal169);

				DebugLocation(305, 12);
				PushFollow(Follow._expr_in_stmt_while1785);
				expr170=expr();
				PopFollow();

				stream_expr.Add(expr170.Tree);
				DebugLocation(305, 17);
				PushFollow(Follow._stmt_block_in_stmt_while1787);
				stmt_block171=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block171.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 305:28: -> ^( Stmt_While expr stmt_block )
				{
					DebugLocation(305, 31);
					// SugarCpp.g:305:31: ^( Stmt_While expr stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(305, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

					DebugLocation(305, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(305, 49);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:306:4: 'loop' stmt_block
				{
				DebugLocation(306, 4);
				string_literal172=(IToken)Match(input,127,Follow._127_in_stmt_while1802);  
				stream_127.Add(string_literal172);

				DebugLocation(306, 11);
				PushFollow(Follow._stmt_block_in_stmt_while1804);
				stmt_block173=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block173.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 306:22: -> ^( Stmt_Loop stmt_block )
				{
					DebugLocation(306, 25);
					// SugarCpp.g:306:25: ^( Stmt_Loop stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(306, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(306, 37);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 30);
			LeaveRule("stmt_while", 30);
			LeaveRule_stmt_while();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:309:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 31);
		TraceIn("stmt_for", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal174 = default(IToken);
		IToken char_literal175 = default(IToken);
		IToken char_literal177 = default(IToken);
		IToken char_literal179 = default(IToken);
		IToken string_literal181 = default(IToken);
		IToken char_literal183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block184 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree char_literal175_tree = default(CommonTree);
		CommonTree char_literal177_tree = default(CommonTree);
		CommonTree char_literal179_tree = default(CommonTree);
		CommonTree string_literal181_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(309, 1);
		try
		{
			// SugarCpp.g:314:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:314:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(314, 4);
			string_literal174=(IToken)Match(input,119,Follow._119_in_stmt_for1828);  
			stream_119.Add(string_literal174);

			DebugLocation(314, 10);
			char_literal175=(IToken)Match(input,71,Follow._71_in_stmt_for1830);  
			stream_71.Add(char_literal175);

			DebugLocation(314, 14);
			PushFollow(Follow._expr_in_stmt_for1832);
			expr176=expr();
			PopFollow();

			stream_expr.Add(expr176.Tree);
			DebugLocation(314, 19);
			// SugarCpp.g:314:19: ( ';' expr ';' expr | 'in' expr )
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==91))
			{
				alt70 = 1;
			}
			else if ((LA70_0==123))
			{
				alt70 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:20: ';' expr ';' expr
				{
				DebugLocation(314, 20);
				char_literal177=(IToken)Match(input,91,Follow._91_in_stmt_for1835);  
				stream_91.Add(char_literal177);

				DebugLocation(314, 24);
				PushFollow(Follow._expr_in_stmt_for1837);
				expr178=expr();
				PopFollow();

				stream_expr.Add(expr178.Tree);
				DebugLocation(314, 29);
				char_literal179=(IToken)Match(input,91,Follow._91_in_stmt_for1839);  
				stream_91.Add(char_literal179);

				DebugLocation(314, 33);
				PushFollow(Follow._expr_in_stmt_for1841);
				expr180=expr();
				PopFollow();

				stream_expr.Add(expr180.Tree);
				DebugLocation(314, 38);
				type=0;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:314:50: 'in' expr
				{
				DebugLocation(314, 50);
				string_literal181=(IToken)Match(input,123,Follow._123_in_stmt_for1847);  
				stream_123.Add(string_literal181);

				DebugLocation(314, 55);
				PushFollow(Follow._expr_in_stmt_for1849);
				expr182=expr();
				PopFollow();

				stream_expr.Add(expr182.Tree);
				DebugLocation(314, 60);
				type=1;

				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(314, 71);
			char_literal183=(IToken)Match(input,72,Follow._72_in_stmt_for1854);  
			stream_72.Add(char_literal183);

			DebugLocation(314, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1856);
			stmt_block184=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block184.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, expr, expr, expr, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 315:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(315, 18);
				// SugarCpp.g:315:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(315, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(315, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(315, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(315, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(315, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 316:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(316, 7);
				// SugarCpp.g:316:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(316, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(316, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(316, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(316, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 31);
			LeaveRule("stmt_for", 31);
			LeaveRule_stmt_for();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:319:1: stmt_try : 'try' stmt_block 'catch' expr stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 32);
		TraceIn("stmt_try", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal185 = default(IToken);
		IToken string_literal187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block189 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal185_tree = default(CommonTree);
		CommonTree string_literal187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(319, 1);
		try
		{
			// SugarCpp.g:320:2: ( 'try' stmt_block 'catch' expr stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:320:4: 'try' stmt_block 'catch' expr stmt_block
			{
			DebugLocation(320, 4);
			string_literal185=(IToken)Match(input,132,Follow._132_in_stmt_try1901);  
			stream_132.Add(string_literal185);

			DebugLocation(320, 10);
			PushFollow(Follow._stmt_block_in_stmt_try1903);
			stmt_block186=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block186.Tree);
			DebugLocation(320, 21);
			string_literal187=(IToken)Match(input,113,Follow._113_in_stmt_try1905);  
			stream_113.Add(string_literal187);

			DebugLocation(320, 29);
			PushFollow(Follow._expr_in_stmt_try1907);
			expr188=expr();
			PopFollow();

			stream_expr.Add(expr188.Tree);
			DebugLocation(320, 34);
			PushFollow(Follow._stmt_block_in_stmt_try1909);
			stmt_block189=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block189.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 320:45: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(320, 48);
				// SugarCpp.g:320:48: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(320, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(320, 59);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(320, 70);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(320, 75);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 32);
			LeaveRule("stmt_try", 32);
			LeaveRule_stmt_try();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarCpp.g:323:1: linq_item : ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) );
	[GrammarRule("linq_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 33);
		TraceIn("linq_item", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal190 = default(IToken);
		IToken string_literal192 = default(IToken);
		IToken string_literal194 = default(IToken);
		IToken char_literal196 = default(IToken);
		IToken string_literal198 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr193 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr199 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal190_tree = default(CommonTree);
		CommonTree string_literal192_tree = default(CommonTree);
		CommonTree string_literal194_tree = default(CommonTree);
		CommonTree char_literal196_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(323, 1);
		try
		{
			// SugarCpp.g:324:2: ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) )
			int alt71=3;
			try { DebugEnterDecision(71, false);
			switch (input.LA(1))
			{
			case 120:
				{
				alt71 = 1;
				}
				break;
			case 126:
				{
				alt71 = 2;
				}
				break;
			case 136:
				{
				alt71 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:324:4: 'from' expr 'in' expr
				{
				DebugLocation(324, 4);
				string_literal190=(IToken)Match(input,120,Follow._120_in_linq_item1932);  
				stream_120.Add(string_literal190);

				DebugLocation(324, 11);
				PushFollow(Follow._expr_in_linq_item1934);
				expr191=expr();
				PopFollow();

				stream_expr.Add(expr191.Tree);
				DebugLocation(324, 16);
				string_literal192=(IToken)Match(input,123,Follow._123_in_linq_item1936);  
				stream_123.Add(string_literal192);

				DebugLocation(324, 21);
				PushFollow(Follow._expr_in_linq_item1938);
				expr193=expr();
				PopFollow();

				stream_expr.Add(expr193.Tree);


				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 324:26: -> ^( Linq_From expr expr )
				{
					DebugLocation(324, 29);
					// SugarCpp.g:324:29: ^( Linq_From expr expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(324, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_From, "Linq_From"), root_1);

					DebugLocation(324, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(324, 46);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:325:4: 'let' ident '=' expr
				{
				DebugLocation(325, 4);
				string_literal194=(IToken)Match(input,126,Follow._126_in_linq_item1953);  
				stream_126.Add(string_literal194);

				DebugLocation(325, 10);
				PushFollow(Follow._ident_in_linq_item1955);
				ident195=ident();
				PopFollow();

				stream_ident.Add(ident195.Tree);
				DebugLocation(325, 16);
				char_literal196=(IToken)Match(input,96,Follow._96_in_linq_item1957);  
				stream_96.Add(char_literal196);

				DebugLocation(325, 20);
				PushFollow(Follow._expr_in_linq_item1959);
				expr197=expr();
				PopFollow();

				stream_expr.Add(expr197.Tree);


				{
				// AST REWRITE
				// elements: ident, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 325:25: -> ^( Linq_Let ident expr )
				{
					DebugLocation(325, 28);
					// SugarCpp.g:325:28: ^( Linq_Let ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(325, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Let, "Linq_Let"), root_1);

					DebugLocation(325, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(325, 45);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:326:4: 'where' expr
				{
				DebugLocation(326, 4);
				string_literal198=(IToken)Match(input,136,Follow._136_in_linq_item1974);  
				stream_136.Add(string_literal198);

				DebugLocation(326, 12);
				PushFollow(Follow._expr_in_linq_item1976);
				expr199=expr();
				PopFollow();

				stream_expr.Add(expr199.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 326:17: -> ^( Linq_Where expr )
				{
					DebugLocation(326, 20);
					// SugarCpp.g:326:20: ^( Linq_Where expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(326, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Where, "Linq_Where"), root_1);

					DebugLocation(326, 33);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_item", 33);
			LeaveRule("linq_item", 33);
			LeaveRule_linq_item();
		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return retval;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarCpp.g:329:1: linq_prefix : ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 34);
		TraceIn("linq_prefix", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE202 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item200 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item201 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE202_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_linq_item=new RewriteRuleSubtreeStream(adaptor,"rule linq_item");
		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(329, 1);
		try
		{
			// SugarCpp.g:330:2: ( ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:330:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			{
			DebugLocation(330, 4);
			// SugarCpp.g:330:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			int cnt74=0;
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==120||LA74_0==126||LA74_0==136))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:330:5: linq_item ( linq_item )* ( NEWLINE )+
					{
					DebugLocation(330, 5);
					PushFollow(Follow._linq_item_in_linq_prefix1996);
					linq_item200=linq_item();
					PopFollow();

					stream_linq_item.Add(linq_item200.Tree);
					DebugLocation(330, 15);
					// SugarCpp.g:330:15: ( linq_item )*
					try { DebugEnterSubRule(72);
					while (true)
					{
						int alt72=2;
						try { DebugEnterDecision(72, false);
						int LA72_0 = input.LA(1);

						if ((LA72_0==120||LA72_0==126||LA72_0==136))
						{
							alt72 = 1;
						}


						} finally { DebugExitDecision(72); }
						switch ( alt72 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:330:15: linq_item
							{
							DebugLocation(330, 15);
							PushFollow(Follow._linq_item_in_linq_prefix1998);
							linq_item201=linq_item();
							PopFollow();

							stream_linq_item.Add(linq_item201.Tree);

							}
							break;

						default:
							goto loop72;
						}
					}

					loop72:
						;

					} finally { DebugExitSubRule(72); }

					DebugLocation(330, 26);
					// SugarCpp.g:330:26: ( NEWLINE )+
					int cnt73=0;
					try { DebugEnterSubRule(73);
					while (true)
					{
						int alt73=2;
						try { DebugEnterDecision(73, false);
						int LA73_0 = input.LA(1);

						if ((LA73_0==NEWLINE))
						{
							alt73 = 1;
						}


						} finally { DebugExitDecision(73); }
						switch (alt73)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:330:26: NEWLINE
							{
							DebugLocation(330, 26);
							NEWLINE202=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix2001);  
							stream_NEWLINE.Add(NEWLINE202);


							}
							break;

						default:
							if (cnt73 >= 1)
								goto loop73;

							EarlyExitException eee73 = new EarlyExitException( 73, input );
							DebugRecognitionException(eee73);
							throw eee73;
						}
						cnt73++;
					}
					loop73:
						;

					} finally { DebugExitSubRule(73); }


					}
					break;

				default:
					if (cnt74 >= 1)
						goto loop74;

					EarlyExitException eee74 = new EarlyExitException( 74, input );
					DebugRecognitionException(eee74);
					throw eee74;
				}
				cnt74++;
			}
			loop74:
				;

			} finally { DebugExitSubRule(74); }



			{
			// AST REWRITE
			// elements: linq_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 330:37: -> ^( Linq_Prefix ( linq_item )+ )
			{
				DebugLocation(330, 40);
				// SugarCpp.g:330:40: ^( Linq_Prefix ( linq_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(330, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Prefix, "Linq_Prefix"), root_1);

				DebugLocation(330, 54);
				if (!(stream_linq_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_linq_item.HasNext )
				{
					DebugLocation(330, 54);
					adaptor.AddChild(root_1, stream_linq_item.NextTree());

				}
				stream_linq_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_prefix", 34);
			LeaveRule("linq_prefix", 34);
			LeaveRule_linq_prefix();
		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return retval;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarCpp.g:333:1: stmt_linq : linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 35);
		TraceIn("stmt_linq", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> linq_prefix203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block204 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_linq_prefix=new RewriteRuleSubtreeStream(adaptor,"rule linq_prefix");
		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(333, 1);
		try
		{
			// SugarCpp.g:334:2: ( linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:334:4: linq_prefix stmt_block
			{
			DebugLocation(334, 4);
			PushFollow(Follow._linq_prefix_in_stmt_linq2024);
			linq_prefix203=linq_prefix();
			PopFollow();

			stream_linq_prefix.Add(linq_prefix203.Tree);
			DebugLocation(334, 16);
			PushFollow(Follow._stmt_block_in_stmt_linq2026);
			stmt_block204=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block204.Tree);


			{
			// AST REWRITE
			// elements: linq_prefix, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 334:27: -> ^( Stmt_Linq linq_prefix stmt_block )
			{
				DebugLocation(334, 30);
				// SugarCpp.g:334:30: ^( Stmt_Linq linq_prefix stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(334, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Linq, "Stmt_Linq"), root_1);

				DebugLocation(334, 42);
				adaptor.AddChild(root_1, stream_linq_prefix.NextTree());
				DebugLocation(334, 54);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_linq", 35);
			LeaveRule("stmt_linq", 35);
			LeaveRule_stmt_linq();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return retval;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:337:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 36);
		TraceIn("ident_list", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal206 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident207 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal206_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(337, 1);
		try
		{
			// SugarCpp.g:338:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:338:4: ident ( ',' ident )*
			{
			DebugLocation(338, 4);
			PushFollow(Follow._ident_in_ident_list2047);
			ident205=ident();
			PopFollow();

			stream_ident.Add(ident205.Tree);
			DebugLocation(338, 10);
			// SugarCpp.g:338:10: ( ',' ident )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==78))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:338:11: ',' ident
					{
					DebugLocation(338, 11);
					char_literal206=(IToken)Match(input,78,Follow._78_in_ident_list2050);  
					stream_78.Add(char_literal206);

					DebugLocation(338, 15);
					PushFollow(Follow._ident_in_ident_list2052);
					ident207=ident();
					PopFollow();

					stream_ident.Add(ident207.Tree);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 338:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(338, 26);
				// SugarCpp.g:338:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(338, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(338, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(338, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 36);
			LeaveRule("ident_list", 36);
			LeaveRule_ident_list();
		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:341:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ident_list ( modify_expr )+ ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 37);
		TraceIn("stmt_alloc", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal209 = default(IToken);
		IToken char_literal211 = default(IToken);
		IToken string_literal212 = default(IToken);
		IToken char_literal214 = default(IToken);
		IToken char_literal216 = default(IToken);
		IToken string_literal217 = default(IToken);
		IToken char_literal219 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal209_tree = default(CommonTree);
		CommonTree char_literal211_tree = default(CommonTree);
		CommonTree string_literal212_tree = default(CommonTree);
		CommonTree char_literal214_tree = default(CommonTree);
		CommonTree char_literal216_tree = default(CommonTree);
		CommonTree string_literal217_tree = default(CommonTree);
		CommonTree char_literal219_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(341, 1);
		try
		{
			// SugarCpp.g:342:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ident_list ( modify_expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:342:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ident_list ( modify_expr )+ ) )
			{
			DebugLocation(342, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2074);
			ident_list208=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list208.Tree);
			DebugLocation(342, 15);
			// SugarCpp.g:342:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ident_list ( modify_expr )+ ) )
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==88))
			{
				alt80 = 1;
			}
			else if ((LA80_0==90))
			{
				alt80 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:342:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(342, 17);
				char_literal209=(IToken)Match(input,88,Follow._88_in_stmt_alloc2078);  
				stream_88.Add(char_literal209);

				DebugLocation(342, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2080);
				type_name210=type_name();
				PopFollow();

				stream_type_name.Add(type_name210.Tree);
				DebugLocation(342, 31);
				// SugarCpp.g:342:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt78=3;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, false);
				switch (input.LA(1))
				{
				case 90:
				case 96:
					{
					alt78 = 1;
					}
					break;
				case 71:
					{
					alt78 = 2;
					}
					break;
				case NEWLINE:
					{
					alt78 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:342:33: ( '=' | ':=' ) expr
					{
					DebugLocation(342, 33);
					// SugarCpp.g:342:33: ( '=' | ':=' )
					int alt76=2;
					try { DebugEnterSubRule(76);
					try { DebugEnterDecision(76, false);
					int LA76_0 = input.LA(1);

					if ((LA76_0==96))
					{
						alt76 = 1;
					}
					else if ((LA76_0==90))
					{
						alt76 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(76); }
					switch (alt76)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:342:34: '='
						{
						DebugLocation(342, 34);
						char_literal211=(IToken)Match(input,96,Follow._96_in_stmt_alloc2085);  
						stream_96.Add(char_literal211);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:342:40: ':='
						{
						DebugLocation(342, 40);
						string_literal212=(IToken)Match(input,90,Follow._90_in_stmt_alloc2089);  
						stream_90.Add(string_literal212);


						}
						break;

					}
					} finally { DebugExitSubRule(76); }

					DebugLocation(342, 46);
					PushFollow(Follow._expr_in_stmt_alloc2092);
					expr213=expr();
					PopFollow();

					stream_expr.Add(expr213.Tree);


					{
					// AST REWRITE
					// elements: ident_list, expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 342:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(342, 55);
						// SugarCpp.g:342:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(342, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(342, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(342, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(342, 95);
						// SugarCpp.g:342:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(342, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:343:33: '(' ( expr_list )? ')'
					{
					DebugLocation(343, 33);
					char_literal214=(IToken)Match(input,71,Follow._71_in_stmt_alloc2140);  
					stream_71.Add(char_literal214);

					DebugLocation(343, 37);
					// SugarCpp.g:343:37: ( expr_list )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, false);
					int LA77_0 = input.LA(1);

					if ((LA77_0==IDENT||LA77_0==NUMBER||LA77_0==STRING||LA77_0==64||LA77_0==69||LA77_0==71||LA77_0==73||(LA77_0>=75 && LA77_0<=76)||(LA77_0>=79 && LA77_0<=80)||LA77_0==105||LA77_0==107||LA77_0==129||LA77_0==141))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:343:37: expr_list
						{
						DebugLocation(343, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc2142);
						expr_list215=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list215.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(343, 48);
					char_literal216=(IToken)Match(input,72,Follow._72_in_stmt_alloc2145);  
					stream_72.Add(char_literal216);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 343:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(343, 56);
						// SugarCpp.g:343:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(343, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(343, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(343, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(343, 98);
						// SugarCpp.g:343:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(343, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:344:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 344:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(344, 18);
						// SugarCpp.g:344:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(344, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(344, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(344, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(78); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:346:8: ':=' ( modify_expr ( ',' modify_expr )* )
				{
				DebugLocation(346, 8);
				string_literal217=(IToken)Match(input,90,Follow._90_in_stmt_alloc2206);  
				stream_90.Add(string_literal217);

				DebugLocation(346, 14);
				// SugarCpp.g:346:14: ( modify_expr ( ',' modify_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:346:15: modify_expr ( ',' modify_expr )*
				{
				DebugLocation(346, 15);
				PushFollow(Follow._modify_expr_in_stmt_alloc2210);
				modify_expr218=modify_expr();
				PopFollow();

				stream_modify_expr.Add(modify_expr218.Tree);
				DebugLocation(346, 27);
				// SugarCpp.g:346:27: ( ',' modify_expr )*
				try { DebugEnterSubRule(79);
				while (true)
				{
					int alt79=2;
					try { DebugEnterDecision(79, false);
					int LA79_0 = input.LA(1);

					if ((LA79_0==78))
					{
						alt79 = 1;
					}


					} finally { DebugExitDecision(79); }
					switch ( alt79 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:346:28: ',' modify_expr
						{
						DebugLocation(346, 28);
						char_literal219=(IToken)Match(input,78,Follow._78_in_stmt_alloc2213);  
						stream_78.Add(char_literal219);

						DebugLocation(346, 32);
						PushFollow(Follow._modify_expr_in_stmt_alloc2215);
						modify_expr220=modify_expr();
						PopFollow();

						stream_modify_expr.Add(modify_expr220.Tree);

						}
						break;

					default:
						goto loop79;
					}
				}

				loop79:
					;

				} finally { DebugExitSubRule(79); }


				}



				{
				// AST REWRITE
				// elements: 90, ident_list, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 346:47: -> ^( ':=' ident_list ( modify_expr )+ )
				{
					DebugLocation(346, 50);
					// SugarCpp.g:346:50: ^( ':=' ident_list ( modify_expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(346, 52);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_90.NextNode(), root_1);

					DebugLocation(346, 57);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(346, 68);
					if (!(stream_modify_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_modify_expr.HasNext )
					{
						DebugLocation(346, 68);
						adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					}
					stream_modify_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 37);
			LeaveRule("stmt_alloc", 37);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:349:1: stmt_modify : lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 38);
		TraceIn("stmt_modify", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal224 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal224_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(349, 1);
		try
		{
			// SugarCpp.g:350:2: ( lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:350:4: lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(350, 4);
			PushFollow(Follow._lvalue_in_stmt_modify2241);
			lvalue221=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue221.Tree);
			DebugLocation(350, 11);
			// SugarCpp.g:350:11: ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )?
			int alt81=3;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==67||LA81_0==70||LA81_0==74||LA81_0==77||LA81_0==81||LA81_0==87||LA81_0==94||LA81_0==96||LA81_0==102||LA81_0==110||LA81_0==139))
			{
				alt81 = 1;
			}
			else if ((LA81_0==104))
			{
				alt81 = 2;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:350:13: modify_expr_op ^ modify_expr
				{
				DebugLocation(350, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify2245);
				modify_expr_op222=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op222.Tree, root_0);
				DebugLocation(350, 29);
				PushFollow(Follow._modify_expr_in_stmt_modify2248);
				modify_expr223=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr223.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:351:13: '?=' ^ modify_expr
				{
				DebugLocation(351, 17);
				string_literal224=(IToken)Match(input,104,Follow._104_in_stmt_modify2262); 
				string_literal224_tree = (CommonTree)adaptor.Create(string_literal224);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal224_tree, root_0);
				DebugLocation(351, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify2265);
				modify_expr225=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr225.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 38);
			LeaveRule("stmt_modify", 38);
			LeaveRule_stmt_modify();
		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:354:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 39);
		TraceIn("expr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr226 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(354, 1);
		try
		{
			// SugarCpp.g:355:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:355:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(355, 4);
			PushFollow(Follow._lambda_expr_in_expr2278);
			lambda_expr226=lambda_expr();
			PopFollow();

			adaptor.AddChild(root_0, lambda_expr226.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 39);
			LeaveRule("expr", 39);
			LeaveRule_expr();
		}
		DebugLocation(356, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:358:1: lambda_expr : ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 40);
		TraceIn("lambda_expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal227 = default(IToken);
		IToken char_literal228 = default(IToken);
		IToken char_literal230 = default(IToken);
		IToken string_literal231 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr233 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal227_tree = default(CommonTree);
		CommonTree char_literal228_tree = default(CommonTree);
		CommonTree char_literal230_tree = default(CommonTree);
		CommonTree string_literal231_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(358, 1);
		try
		{
			// SugarCpp.g:359:2: ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr )
			int alt83=2;
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==107))
			{
				alt83 = 1;
			}
			else if ((LA83_0==IDENT||LA83_0==NUMBER||LA83_0==STRING||LA83_0==64||LA83_0==69||LA83_0==71||LA83_0==73||(LA83_0>=75 && LA83_0<=76)||(LA83_0>=79 && LA83_0<=80)||LA83_0==105||LA83_0==129||LA83_0==141))
			{
				alt83 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:359:4: '\\\\' '(' ( func_args )? ')' '=>' lambda_expr
				{
				DebugLocation(359, 4);
				char_literal227=(IToken)Match(input,107,Follow._107_in_lambda_expr2289);  
				stream_107.Add(char_literal227);

				DebugLocation(359, 9);
				char_literal228=(IToken)Match(input,71,Follow._71_in_lambda_expr2291);  
				stream_71.Add(char_literal228);

				DebugLocation(359, 13);
				// SugarCpp.g:359:13: ( func_args )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==IDENT||LA82_0==90||LA82_0==105))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:359:13: func_args
					{
					DebugLocation(359, 13);
					PushFollow(Follow._func_args_in_lambda_expr2293);
					func_args229=func_args();
					PopFollow();

					stream_func_args.Add(func_args229.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(82); }

				DebugLocation(359, 24);
				char_literal230=(IToken)Match(input,72,Follow._72_in_lambda_expr2296);  
				stream_72.Add(char_literal230);

				DebugLocation(359, 28);
				string_literal231=(IToken)Match(input,98,Follow._98_in_lambda_expr2298);  
				stream_98.Add(string_literal231);

				DebugLocation(359, 33);
				PushFollow(Follow._lambda_expr_in_lambda_expr2300);
				lambda_expr232=lambda_expr();
				PopFollow();

				stream_lambda_expr.Add(lambda_expr232.Tree);


				{
				// AST REWRITE
				// elements: func_args, lambda_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 359:45: -> ^( Expr_Lambda ( func_args )? lambda_expr )
				{
					DebugLocation(359, 48);
					// SugarCpp.g:359:48: ^( Expr_Lambda ( func_args )? lambda_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(359, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(359, 62);
					// SugarCpp.g:359:62: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(359, 62);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(359, 73);
					adaptor.AddChild(root_1, stream_lambda_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:360:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(360, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr2316);
				modify_expr233=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr233.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 40);
			LeaveRule("lambda_expr", 40);
			LeaveRule_lambda_expr();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:363:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 41);
		TraceIn("modify_expr_op", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set234 = default(IToken);

		CommonTree set234_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(363, 91);
		try
		{
			// SugarCpp.g:363:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(363, 15);

			set234=(IToken)input.LT(1);
			if (input.LA(1)==67||input.LA(1)==70||input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==87||input.LA(1)==94||input.LA(1)==96||input.LA(1)==102||input.LA(1)==110||input.LA(1)==139)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set234));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 41);
			LeaveRule("modify_expr_op", 41);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(363, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:364:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 42);
		TraceIn("modify_expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set236 = default(IToken);
		IToken char_literal238 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr235 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set236_tree = default(CommonTree);
		CommonTree char_literal238_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(364, 1);
		try
		{
			// SugarCpp.g:365:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:365:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(365, 4);
			PushFollow(Follow._cond_expr_in_modify_expr2373);
			cond_expr235=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr235.Tree);
			DebugLocation(365, 14);
			// SugarCpp.g:365:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt85=3;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==67||LA85_0==70||LA85_0==74||LA85_0==77||LA85_0==81||LA85_0==87||LA85_0==90||LA85_0==94||LA85_0==102||LA85_0==110||LA85_0==139))
			{
				alt85 = 1;
			}
			else if ((LA85_0==96))
			{
				alt85 = 2;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:365:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(365, 94);

				set236=(IToken)input.LT(1);
				set236=(IToken)input.LT(1);
				if (input.LA(1)==67||input.LA(1)==70||input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==102||input.LA(1)==110||input.LA(1)==139)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set236), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(365, 96);
				PushFollow(Follow._cond_expr_in_modify_expr2422);
				cond_expr237=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr237.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:366:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(366, 7);
				// SugarCpp.g:366:7: ( '=' ^ cond_expr )+
				int cnt84=0;
				try { DebugEnterSubRule(84);
				while (true)
				{
					int alt84=2;
					try { DebugEnterDecision(84, false);
					int LA84_0 = input.LA(1);

					if ((LA84_0==96))
					{
						alt84 = 1;
					}


					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:366:8: '=' ^ cond_expr
						{
						DebugLocation(366, 11);
						char_literal238=(IToken)Match(input,96,Follow._96_in_modify_expr2431); 
						char_literal238_tree = (CommonTree)adaptor.Create(char_literal238);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal238_tree, root_0);
						DebugLocation(366, 13);
						PushFollow(Follow._cond_expr_in_modify_expr2434);
						cond_expr239=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr239.Tree);

						}
						break;

					default:
						if (cnt84 >= 1)
							goto loop84;

						EarlyExitException eee84 = new EarlyExitException( 84, input );
						DebugRecognitionException(eee84);
						throw eee84;
					}
					cnt84++;
				}
				loop84:
					;

				} finally { DebugExitSubRule(84); }


				}
				break;

			}
			} finally { DebugExitSubRule(85); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 42);
			LeaveRule("modify_expr", 42);
			LeaveRule_modify_expr();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:369:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 43);
		TraceIn("cond_expr_item", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(369, 26);
		try
		{
			// SugarCpp.g:369:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:369:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(369, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item2447);
			cond_expr240=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr240.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 43);
			LeaveRule("cond_expr_item", 43);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(369, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:370:1: cond_expr : (a= or_expr -> $a) ( '?' a= cond_expr_item ':' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 44);
		TraceIn("cond_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal241 = default(IToken);
		IToken char_literal242 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal241_tree = default(CommonTree);
		CommonTree char_literal242_tree = default(CommonTree);
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(370, 1);
		try
		{
			// SugarCpp.g:371:2: ( (a= or_expr -> $a) ( '?' a= cond_expr_item ':' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:371:4: (a= or_expr -> $a) ( '?' a= cond_expr_item ':' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(371, 4);
			// SugarCpp.g:371:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:371:5: a= or_expr
			{
			DebugLocation(371, 6);
			PushFollow(Follow._or_expr_in_cond_expr2459);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 371:15: -> $a
			{
				DebugLocation(371, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(371, 22);
			// SugarCpp.g:371:22: ( '?' a= cond_expr_item ':' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_0 = input.LA(1);

			if ((LA86_0==103))
			{
				alt86 = 1;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:371:23: '?' a= cond_expr_item ':' b= cond_expr_item
				{
				DebugLocation(371, 23);
				char_literal241=(IToken)Match(input,103,Follow._103_in_cond_expr2468);  
				stream_103.Add(char_literal241);

				DebugLocation(371, 28);
				PushFollow(Follow._cond_expr_item_in_cond_expr2472);
				a=cond_expr_item();
				PopFollow();

				stream_cond_expr_item.Add(a.Tree);
				DebugLocation(371, 44);
				char_literal242=(IToken)Match(input,88,Follow._88_in_cond_expr2474);  
				stream_88.Add(char_literal242);

				DebugLocation(371, 49);
				PushFollow(Follow._cond_expr_item_in_cond_expr2478);
				b=cond_expr_item();
				PopFollow();

				stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cond_expr, a, b
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 371:65: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(371, 68);
					// SugarCpp.g:371:68: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(371, 70);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(371, 81);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(371, 84);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(371, 95);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 44);
			LeaveRule("cond_expr", 44);
			LeaveRule_cond_expr();
		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:374:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 45);
		TraceIn("or_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal243 = default(IToken);
		IToken string_literal244 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal243_tree = default(CommonTree);
		CommonTree string_literal244_tree = default(CommonTree);
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(374, 1);
		try
		{
			// SugarCpp.g:375:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:375:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )*
			{
			DebugLocation(375, 4);
			// SugarCpp.g:375:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:375:5: a= and_expr
			{
			DebugLocation(375, 6);
			PushFollow(Follow._and_expr_in_or_expr2509);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 375:16: -> $a
			{
				DebugLocation(375, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(375, 23);
			// SugarCpp.g:375:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=3;
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==140))
				{
					alt87 = 1;
				}
				else if ((LA87_0==130))
				{
					alt87 = 2;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:375:25: '||' b= and_expr
					{
					DebugLocation(375, 25);
					string_literal243=(IToken)Match(input,140,Follow._140_in_or_expr2519);  
					stream_140.Add(string_literal243);

					DebugLocation(375, 31);
					PushFollow(Follow._and_expr_in_or_expr2523);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 140, or_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 375:41: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(375, 44);
						// SugarCpp.g:375:44: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(375, 55);
						adaptor.AddChild(root_1, stream_140.NextNode());
						DebugLocation(375, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(375, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:376:25: 'or' b= and_expr
					{
					DebugLocation(376, 25);
					string_literal244=(IToken)Match(input,130,Follow._130_in_or_expr2563);  
					stream_130.Add(string_literal244);

					DebugLocation(376, 31);
					PushFollow(Follow._and_expr_in_or_expr2567);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 130, or_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 376:41: -> ^( 'or' $or_expr $b)
					{
						DebugLocation(376, 44);
						// SugarCpp.g:376:44: ^( 'or' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(376, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

						DebugLocation(376, 52);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(376, 61);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 45);
			LeaveRule("or_expr", 45);
			LeaveRule_or_expr();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:379:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( Expr_Bin 'and' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 46);
		TraceIn("and_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal245 = default(IToken);
		IToken string_literal246 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal245_tree = default(CommonTree);
		CommonTree string_literal246_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(379, 1);
		try
		{
			// SugarCpp.g:380:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( Expr_Bin 'and' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:380:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( Expr_Bin 'and' $and_expr $b) )*
			{
			DebugLocation(380, 4);
			// SugarCpp.g:380:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:380:5: a= bit_or
			{
			DebugLocation(380, 6);
			PushFollow(Follow._bit_or_in_and_expr2595);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 380:14: -> $a
			{
				DebugLocation(380, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(380, 21);
			// SugarCpp.g:380:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( Expr_Bin 'and' $and_expr $b) )*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=3;
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==68))
				{
					alt88 = 1;
				}
				else if ((LA88_0==112))
				{
					alt88 = 2;
				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:380:23: '&&' b= bit_or
					{
					DebugLocation(380, 23);
					string_literal245=(IToken)Match(input,68,Follow._68_in_and_expr2605);  
					stream_68.Add(string_literal245);

					DebugLocation(380, 29);
					PushFollow(Follow._bit_or_in_and_expr2609);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, b, 68
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 380:37: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(380, 40);
						// SugarCpp.g:380:40: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(380, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(380, 51);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(380, 57);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(380, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:381:11: 'and' b= bit_or
					{
					DebugLocation(381, 11);
					string_literal246=(IToken)Match(input,112,Follow._112_in_and_expr2635);  
					stream_112.Add(string_literal246);

					DebugLocation(381, 18);
					PushFollow(Follow._bit_or_in_and_expr2639);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 112, b, and_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 381:26: -> ^( Expr_Bin 'and' $and_expr $b)
					{
						DebugLocation(381, 29);
						// SugarCpp.g:381:29: ^( Expr_Bin 'and' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(381, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(381, 40);
						adaptor.AddChild(root_1, stream_112.NextNode());
						DebugLocation(381, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(381, 57);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 46);
			LeaveRule("and_expr", 46);
			LeaveRule_and_expr();
		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:384:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 47);
		TraceIn("bit_or", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal247 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal247_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(384, 1);
		try
		{
			// SugarCpp.g:385:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:385:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(385, 4);
			// SugarCpp.g:385:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:385:5: a= bit_xor
			{
			DebugLocation(385, 6);
			PushFollow(Follow._bit_xor_in_bit_or2669);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 385:15: -> $a
			{
				DebugLocation(385, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(385, 22);
			// SugarCpp.g:385:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==138))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:385:23: '|' b= bit_xor
					{
					DebugLocation(385, 23);
					char_literal247=(IToken)Match(input,138,Follow._138_in_bit_or2678);  
					stream_138.Add(char_literal247);

					DebugLocation(385, 28);
					PushFollow(Follow._bit_xor_in_bit_or2682);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_or, b, 138
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 385:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(385, 40);
						// SugarCpp.g:385:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(385, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(385, 51);
						adaptor.AddChild(root_1, stream_138.NextNode());
						DebugLocation(385, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(385, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 47);
			LeaveRule("bit_or", 47);
			LeaveRule_bit_or();
		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:388:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 48);
		TraceIn("bit_xor", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal248 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal248_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(388, 1);
		try
		{
			// SugarCpp.g:389:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:389:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(389, 4);
			// SugarCpp.g:389:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:389:5: a= bit_and
			{
			DebugLocation(389, 6);
			PushFollow(Follow._bit_and_in_bit_xor2712);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 389:15: -> $a
			{
				DebugLocation(389, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(389, 22);
			// SugarCpp.g:389:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==109))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:389:23: '^' b= bit_and
					{
					DebugLocation(389, 23);
					char_literal248=(IToken)Match(input,109,Follow._109_in_bit_xor2721);  
					stream_109.Add(char_literal248);

					DebugLocation(389, 28);
					PushFollow(Follow._bit_and_in_bit_xor2725);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_xor, 109
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 389:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(389, 40);
						// SugarCpp.g:389:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(389, 51);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(389, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(389, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 48);
			LeaveRule("bit_xor", 48);
			LeaveRule_bit_xor();
		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:392:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 49);
		TraceIn("bit_and", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal249 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal249_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(392, 1);
		try
		{
			// SugarCpp.g:393:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:393:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(393, 4);
			// SugarCpp.g:393:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:393:5: a= cmp_equ_expr
			{
			DebugLocation(393, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and2755);
			a=cmp_equ_expr();
			PopFollow();

			stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 393:20: -> $a
			{
				DebugLocation(393, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(393, 27);
			// SugarCpp.g:393:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==69))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:393:28: '&' b= cmp_equ_expr
					{
					DebugLocation(393, 28);
					char_literal249=(IToken)Match(input,69,Follow._69_in_bit_and2764);  
					stream_69.Add(char_literal249);

					DebugLocation(393, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and2768);
					b=cmp_equ_expr();
					PopFollow();

					stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_and, 69
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 393:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(393, 50);
						// SugarCpp.g:393:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(393, 61);
						adaptor.AddChild(root_1, stream_69.NextNode());
						DebugLocation(393, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(393, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 49);
			LeaveRule("bit_and", 49);
			LeaveRule_bit_and();
		}
		DebugLocation(394, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:396:1: cmp_equ_expr_op : ( '==' | 'is' | '!=' | 'isnt' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 50);
		TraceIn("cmp_equ_expr_op", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set250 = default(IToken);

		CommonTree set250_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(396, 45);
		try
		{
			// SugarCpp.g:396:16: ( '==' | 'is' | '!=' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(396, 16);

			set250=(IToken)input.LT(1);
			if (input.LA(1)==65||input.LA(1)==97||(input.LA(1)>=124 && input.LA(1)<=125))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set250));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 50);
			LeaveRule("cmp_equ_expr_op", 50);
			LeaveRule_cmp_equ_expr_op();
		}
		DebugLocation(396, 45);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:397:1: cmp_equ_expr : (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 51);
		TraceIn("cmp_equ_expr", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(397, 1);
		try
		{
			// SugarCpp.g:398:2: ( (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:398:4: (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) )?
			{
			DebugLocation(398, 4);
			// SugarCpp.g:398:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:398:5: a= cmp_expr
			{
			DebugLocation(398, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr2817);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 398:16: -> $a
			{
				DebugLocation(398, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(398, 23);
			// SugarCpp.g:398:23: (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) )?
			int alt92=2;
			try { DebugEnterSubRule(92);
			try { DebugEnterDecision(92, false);
			int LA92_0 = input.LA(1);

			if ((LA92_0==65||LA92_0==97||(LA92_0>=124 && LA92_0<=125)))
			{
				alt92 = 1;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:398:25: op= cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(398, 27);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr2829);
				op=cmp_equ_expr_op();
				PopFollow();

				stream_cmp_equ_expr_op.Add(op.Tree);
				DebugLocation(398, 45);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr2833);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_equ_expr, op
				// token labels: 
				// rule labels: retval, op, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 398:55: -> ^( Expr_Bin $op $cmp_equ_expr $b)
				{
					DebugLocation(398, 58);
					// SugarCpp.g:398:58: ^( Expr_Bin $op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(398, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(398, 70);
					adaptor.AddChild(root_1, stream_op.NextTree());
					DebugLocation(398, 74);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(398, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 51);
			LeaveRule("cmp_equ_expr", 51);
			LeaveRule_cmp_equ_expr();
		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:401:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 52);
		TraceIn("cmp_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal251 = default(IToken);
		IToken char_literal253 = default(IToken);
		IToken char_literal254 = default(IToken);
		IToken char_literal256 = default(IToken);
		IToken string_literal257 = default(IToken);
		IToken char_literal258 = default(IToken);
		IToken string_literal259 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list255 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal251_tree = default(CommonTree);
		CommonTree char_literal253_tree = default(CommonTree);
		CommonTree char_literal254_tree = default(CommonTree);
		CommonTree char_literal256_tree = default(CommonTree);
		CommonTree string_literal257_tree = default(CommonTree);
		CommonTree char_literal258_tree = default(CommonTree);
		CommonTree string_literal259_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(401, 1);
		try
		{
			// SugarCpp.g:402:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:402:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			{
			DebugLocation(402, 4);
			// SugarCpp.g:402:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:402:5: a= infix_expr
			{
			DebugLocation(402, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr2866);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 402:18: -> $a
			{
				DebugLocation(402, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(402, 25);
			// SugarCpp.g:402:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			try { DebugEnterSubRule(96);
			while (true)
			{
				int alt96=5;
				try { DebugEnterDecision(96, false);
				switch (input.LA(1))
				{
				case 92:
					{
					alt96 = 1;
					}
					break;
				case 95:
					{
					alt96 = 2;
					}
					break;
				case 99:
					{
					alt96 = 3;
					}
					break;
				case 100:
					{
					alt96 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(96); }
				switch ( alt96 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:402:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					{
					DebugLocation(402, 27);
					char_literal251=(IToken)Match(input,92,Follow._92_in_cmp_expr2876);  
					stream_92.Add(char_literal251);

					DebugLocation(402, 32);
					PushFollow(Follow._infix_expr_in_cmp_expr2880);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);
					DebugLocation(402, 44);
					// SugarCpp.g:402:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					int alt95=2;
					try { DebugEnterSubRule(95);
					try { DebugEnterDecision(95, false);
					switch (input.LA(1))
					{
					case IDENT:
					case 105:
						{
						alt95 = 1;
						}
						break;
					case 99:
						{
						int LA95_3 = input.LA(2);

						if (((b.Tree.Token.Type == IDENT)))
						{
							alt95 = 1;
						}
						else if ((true))
						{
							alt95 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 95, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case INDENT:
					case NEWLINE:
					case 65:
					case 67:
					case 68:
					case 69:
					case 70:
					case 72:
					case 74:
					case 77:
					case 78:
					case 81:
					case 87:
					case 88:
					case 90:
					case 91:
					case 92:
					case 94:
					case 95:
					case 96:
					case 97:
					case 100:
					case 102:
					case 103:
					case 108:
					case 109:
					case 110:
					case 112:
					case 120:
					case 123:
					case 124:
					case 125:
					case 126:
					case 130:
					case 136:
					case 138:
					case 139:
					case 140:
						{
						alt95 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(95); }
					switch (alt95)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:402:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
						{
						DebugLocation(402, 46);
						if (!((b.Tree.Token.Type == IDENT)))
						{
							throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
						}
						DebugLocation(402, 76);
						// SugarCpp.g:402:76: ( ident )*
						try { DebugEnterSubRule(93);
						while (true)
						{
							int alt93=2;
							try { DebugEnterDecision(93, false);
							int LA93_0 = input.LA(1);

							if ((LA93_0==IDENT||LA93_0==105))
							{
								alt93 = 1;
							}


							} finally { DebugExitDecision(93); }
							switch ( alt93 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:402:76: ident
								{
								DebugLocation(402, 76);
								PushFollow(Follow._ident_in_cmp_expr2886);
								ident252=ident();
								PopFollow();

								stream_ident.Add(ident252.Tree);

								}
								break;

							default:
								goto loop93;
							}
						}

						loop93:
							;

						} finally { DebugExitSubRule(93); }

						DebugLocation(402, 83);
						char_literal253=(IToken)Match(input,99,Follow._99_in_cmp_expr2889);  
						stream_99.Add(char_literal253);

						DebugLocation(402, 87);
						char_literal254=(IToken)Match(input,71,Follow._71_in_cmp_expr2891);  
						stream_71.Add(char_literal254);

						DebugLocation(402, 91);
						// SugarCpp.g:402:91: ( expr_list )?
						int alt94=2;
						try { DebugEnterSubRule(94);
						try { DebugEnterDecision(94, false);
						int LA94_0 = input.LA(1);

						if ((LA94_0==IDENT||LA94_0==NUMBER||LA94_0==STRING||LA94_0==64||LA94_0==69||LA94_0==71||LA94_0==73||(LA94_0>=75 && LA94_0<=76)||(LA94_0>=79 && LA94_0<=80)||LA94_0==105||LA94_0==107||LA94_0==129||LA94_0==141))
						{
							alt94 = 1;
						}
						} finally { DebugExitDecision(94); }
						switch (alt94)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:402:91: expr_list
							{
							DebugLocation(402, 91);
							PushFollow(Follow._expr_list_in_cmp_expr2893);
							expr_list255=expr_list();
							PopFollow();

							stream_expr_list.Add(expr_list255.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(94); }

						DebugLocation(402, 102);
						char_literal256=(IToken)Match(input,72,Follow._72_in_cmp_expr2896);  
						stream_72.Add(char_literal256);



						{
						// AST REWRITE
						// elements: cmp_expr, b, ident, expr_list
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 402:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
							DebugLocation(402, 109);
							// SugarCpp.g:402:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(402, 111);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(402, 122);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(402, 131);
							// SugarCpp.g:402:131: ^( Generic_Patameters $b ( ident )* )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(402, 133);
							root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

							DebugLocation(402, 153);
							adaptor.AddChild(root_2, stream_b.NextTree());
							DebugLocation(402, 155);
							// SugarCpp.g:402:155: ( ident )*
							while ( stream_ident.HasNext )
							{
								DebugLocation(402, 155);
								adaptor.AddChild(root_2, stream_ident.NextTree());

							}
							stream_ident.Reset();

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(402, 163);
							// SugarCpp.g:402:163: ( expr_list )?
							if (stream_expr_list.HasNext)
							{
								DebugLocation(402, 163);
								adaptor.AddChild(root_1, stream_expr_list.NextTree());

							}
							stream_expr_list.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:403:46: 
						{

						{
						// AST REWRITE
						// elements: cmp_expr, b, 92
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 403:46: -> ^( Expr_Bin '<' $cmp_expr $b)
						{
							DebugLocation(403, 49);
							// SugarCpp.g:403:49: ^( Expr_Bin '<' $cmp_expr $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(403, 51);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

							DebugLocation(403, 60);
							adaptor.AddChild(root_1, stream_92.NextNode());
							DebugLocation(403, 65);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(403, 75);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(95); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:404:27: '<=' b= infix_expr
					{
					DebugLocation(404, 27);
					string_literal257=(IToken)Match(input,95,Follow._95_in_cmp_expr3006);  
					stream_95.Add(string_literal257);

					DebugLocation(404, 33);
					PushFollow(Follow._infix_expr_in_cmp_expr3010);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr, 95
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 404:45: -> ^( Expr_Bin '<=' $cmp_expr $b)
					{
						DebugLocation(404, 48);
						// SugarCpp.g:404:48: ^( Expr_Bin '<=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(404, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(404, 59);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(404, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(404, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:405:12: '>' b= infix_expr
					{
					DebugLocation(405, 12);
					char_literal258=(IToken)Match(input,99,Follow._99_in_cmp_expr3037);  
					stream_99.Add(char_literal258);

					DebugLocation(405, 17);
					PushFollow(Follow._infix_expr_in_cmp_expr3041);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 99, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 405:29: -> ^( Expr_Bin '>' $cmp_expr $b)
					{
						DebugLocation(405, 32);
						// SugarCpp.g:405:32: ^( Expr_Bin '>' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(405, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(405, 43);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(405, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(405, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:406:12: '>=' b= infix_expr
					{
					DebugLocation(406, 12);
					string_literal259=(IToken)Match(input,100,Follow._100_in_cmp_expr3068);  
					stream_100.Add(string_literal259);

					DebugLocation(406, 18);
					PushFollow(Follow._infix_expr_in_cmp_expr3072);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr, 100
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 406:30: -> ^( Expr_Bin '>=' $cmp_expr $b)
					{
						DebugLocation(406, 33);
						// SugarCpp.g:406:33: ^( Expr_Bin '>=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(406, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(406, 44);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(406, 50);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(406, 60);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop96;
				}
			}

			loop96:
				;

			} finally { DebugExitSubRule(96); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 52);
			LeaveRule("cmp_expr", 52);
			LeaveRule_cmp_expr();
		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:409:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 53);
		TraceIn("infix_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func260 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(409, 1);
		try
		{
			// SugarCpp.g:410:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:410:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(410, 4);
			// SugarCpp.g:410:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:410:5: a= shift_expr
			{
			DebugLocation(410, 6);
			PushFollow(Follow._shift_expr_in_infix_expr3102);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 410:18: -> $a
			{
				DebugLocation(410, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(410, 25);
			// SugarCpp.g:410:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==111))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:410:27: infix_func b= shift_expr
					{
					DebugLocation(410, 27);
					PushFollow(Follow._infix_func_in_infix_expr3112);
					infix_func260=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func260.Tree);
					DebugLocation(410, 39);
					PushFollow(Follow._shift_expr_in_infix_expr3116);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_func, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 410:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(410, 55);
						// SugarCpp.g:410:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(410, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(410, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(410, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(410, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 53);
			LeaveRule("infix_expr", 53);
			LeaveRule_infix_expr();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:413:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 54);
		TraceIn("shift_expr_op", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set261 = default(IToken);

		CommonTree set261_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(413, 27);
		try
		{
			// SugarCpp.g:413:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(413, 14);

			set261=(IToken)input.LT(1);
			if (input.LA(1)==93||input.LA(1)==101)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set261));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 54);
			LeaveRule("shift_expr_op", 54);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(413, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:414:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 55);
		TraceIn("shift_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op262 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(414, 1);
		try
		{
			// SugarCpp.g:415:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:415:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(415, 4);
			// SugarCpp.g:415:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:415:5: a= add_expr
			{
			DebugLocation(415, 6);
			PushFollow(Follow._add_expr_in_shift_expr3159);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 415:16: -> $a
			{
				DebugLocation(415, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(415, 23);
			// SugarCpp.g:415:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==93||LA98_0==101))
				{
					alt98 = 1;
				}


				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:415:24: shift_expr_op b= add_expr
					{
					DebugLocation(415, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr3168);
					shift_expr_op262=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op262.Tree);
					DebugLocation(415, 39);
					PushFollow(Follow._add_expr_in_shift_expr3172);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 415:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(415, 52);
						// SugarCpp.g:415:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(415, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(415, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(415, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(415, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 55);
			LeaveRule("shift_expr", 55);
			LeaveRule_shift_expr();
		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:418:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 56);
		TraceIn("add_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal263 = default(IToken);
		IToken char_literal264 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal263_tree = default(CommonTree);
		CommonTree char_literal264_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(418, 1);
		try
		{
			// SugarCpp.g:419:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:419:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(419, 4);
			// SugarCpp.g:419:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:419:5: a= mul_expr
			{
			DebugLocation(419, 6);
			PushFollow(Follow._mul_expr_in_add_expr3202);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 419:16: -> $a
			{
				DebugLocation(419, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(419, 23);
			// SugarCpp.g:419:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=3;
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==75))
				{
					alt99 = 1;
				}
				else if ((LA99_0==79))
				{
					alt99 = 2;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:419:25: '+' b= mul_expr
					{
					DebugLocation(419, 25);
					char_literal263=(IToken)Match(input,75,Follow._75_in_add_expr3212);  
					stream_75.Add(char_literal263);

					DebugLocation(419, 30);
					PushFollow(Follow._mul_expr_in_add_expr3216);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 75
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 419:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(419, 43);
						// SugarCpp.g:419:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(419, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(419, 54);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(419, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(419, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:420:10: '-' b= mul_expr
					{
					DebugLocation(420, 10);
					char_literal264=(IToken)Match(input,79,Follow._79_in_add_expr3241);  
					stream_79.Add(char_literal264);

					DebugLocation(420, 15);
					PushFollow(Follow._mul_expr_in_add_expr3245);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 79
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 420:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(420, 28);
						// SugarCpp.g:420:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(420, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(420, 39);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(420, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(420, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 56);
			LeaveRule("add_expr", 56);
			LeaveRule_add_expr();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:424:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 57);
		TraceIn("mul_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal265 = default(IToken);
		IToken char_literal266 = default(IToken);
		IToken char_literal267 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal265_tree = default(CommonTree);
		CommonTree char_literal266_tree = default(CommonTree);
		CommonTree char_literal267_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(424, 1);
		try
		{
			// SugarCpp.g:425:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:425:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(425, 4);
			// SugarCpp.g:425:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:425:5: a= selector_expr
			{
			DebugLocation(425, 6);
			PushFollow(Follow._selector_expr_in_mul_expr3283);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 425:21: -> $a
			{
				DebugLocation(425, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(425, 28);
			// SugarCpp.g:425:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=4;
				try { DebugEnterDecision(100, false);
				switch (input.LA(1))
				{
				case 73:
					{
					alt100 = 1;
					}
					break;
				case 86:
					{
					alt100 = 2;
					}
					break;
				case 66:
					{
					alt100 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:425:30: '*' b= selector_expr
					{
					DebugLocation(425, 30);
					char_literal265=(IToken)Match(input,73,Follow._73_in_mul_expr3293);  
					stream_73.Add(char_literal265);

					DebugLocation(425, 35);
					PushFollow(Follow._selector_expr_in_mul_expr3297);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 73, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 425:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(425, 53);
						// SugarCpp.g:425:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(425, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(425, 64);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(425, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(425, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:426:15: '/' b= selector_expr
					{
					DebugLocation(426, 15);
					char_literal266=(IToken)Match(input,86,Follow._86_in_mul_expr3327);  
					stream_86.Add(char_literal266);

					DebugLocation(426, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3331);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 86
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 426:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(426, 38);
						// SugarCpp.g:426:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(426, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(426, 49);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(426, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(426, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:427:15: '%' b= selector_expr
					{
					DebugLocation(427, 15);
					char_literal267=(IToken)Match(input,66,Follow._66_in_mul_expr3361);  
					stream_66.Add(char_literal267);

					DebugLocation(427, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3365);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 66, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 427:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(427, 38);
						// SugarCpp.g:427:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(427, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(427, 49);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(427, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(427, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 57);
			LeaveRule("mul_expr", 57);
			LeaveRule_mul_expr();
		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:431:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 58);
		TraceIn("selector_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal268 = default(IToken);
		IToken string_literal269 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal268_tree = default(CommonTree);
		CommonTree string_literal269_tree = default(CommonTree);
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(431, 1);
		try
		{
			// SugarCpp.g:432:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:432:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(432, 4);
			// SugarCpp.g:432:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:432:5: a= prefix_expr
			{
			DebugLocation(432, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr3408);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 432:19: -> $a
			{
				DebugLocation(432, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(432, 26);
			// SugarCpp.g:432:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=3;
				try { DebugEnterDecision(101, false);
				int LA101_0 = input.LA(1);

				if ((LA101_0==83))
				{
					alt101 = 1;
				}
				else if ((LA101_0==85))
				{
					alt101 = 2;
				}


				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:432:28: '->*' b= ident
					{
					DebugLocation(432, 28);
					string_literal268=(IToken)Match(input,83,Follow._83_in_selector_expr3418);  
					stream_83.Add(string_literal268);

					DebugLocation(432, 35);
					PushFollow(Follow._ident_in_selector_expr3422);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 83, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 432:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(432, 45);
						// SugarCpp.g:432:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(432, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(432, 59);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(432, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(432, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:433:13: '.*' b= ident
					{
					DebugLocation(433, 13);
					string_literal269=(IToken)Match(input,85,Follow._85_in_selector_expr3450);  
					stream_85.Add(string_literal269);

					DebugLocation(433, 20);
					PushFollow(Follow._ident_in_selector_expr3455);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 85, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 433:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(433, 30);
						// SugarCpp.g:433:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(433, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(433, 44);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(433, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(433, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 58);
			LeaveRule("selector_expr", 58);
			LeaveRule_selector_expr();
		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:437:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 59);
		TraceIn("prefix_expr_op", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set270 = default(IToken);

		CommonTree set270_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(437, 64);
		try
		{
			// SugarCpp.g:437:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(437, 15);

			set270=(IToken)input.LT(1);
			if (input.LA(1)==64||input.LA(1)==69||input.LA(1)==73||(input.LA(1)>=75 && input.LA(1)<=76)||(input.LA(1)>=79 && input.LA(1)<=80)||input.LA(1)==141)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set270));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 59);
			LeaveRule("prefix_expr_op", 59);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(437, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:438:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 60);
		TraceIn("prefix_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal273 = default(IToken);
		IToken char_literal275 = default(IToken);
		IToken char_literal277 = default(IToken);
		IToken char_literal278 = default(IToken);
		IToken char_literal280 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr281 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree char_literal275_tree = default(CommonTree);
		CommonTree char_literal277_tree = default(CommonTree);
		CommonTree char_literal278_tree = default(CommonTree);
		CommonTree char_literal280_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(438, 1);
		try
		{
			// SugarCpp.g:439:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt104=3;
			try { DebugEnterDecision(104, false);
			switch (input.LA(1))
			{
			case 64:
			case 69:
			case 73:
			case 75:
			case 76:
			case 79:
			case 80:
			case 141:
				{
				alt104 = 1;
				}
				break;
			case 129:
				{
				alt104 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 71:
			case 105:
				{
				alt104 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:439:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(439, 4);
				// SugarCpp.g:439:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:439:5: prefix_expr_op prefix_expr
				{
				DebugLocation(439, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr3530);
				prefix_expr_op271=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op271.Tree);
				DebugLocation(439, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr3532);
				prefix_expr272=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr272.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 439:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(439, 36);
					// SugarCpp.g:439:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(439, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(439, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(439, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:440:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(440, 4);
				string_literal273=(IToken)Match(input,129,Follow._129_in_prefix_expr3548);  
				stream_129.Add(string_literal273);

				DebugLocation(440, 10);
				PushFollow(Follow._type_name_in_prefix_expr3550);
				type_name274=type_name();
				PopFollow();

				stream_type_name.Add(type_name274.Tree);
				DebugLocation(440, 20);
				// SugarCpp.g:440:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==71))
				{
					alt103 = 1;
				}
				else if ((LA103_0==106))
				{
					alt103 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:440:22: '(' ( expr_list )? ')'
					{
					DebugLocation(440, 22);
					char_literal275=(IToken)Match(input,71,Follow._71_in_prefix_expr3554);  
					stream_71.Add(char_literal275);

					DebugLocation(440, 26);
					// SugarCpp.g:440:26: ( expr_list )?
					int alt102=2;
					try { DebugEnterSubRule(102);
					try { DebugEnterDecision(102, false);
					int LA102_0 = input.LA(1);

					if ((LA102_0==IDENT||LA102_0==NUMBER||LA102_0==STRING||LA102_0==64||LA102_0==69||LA102_0==71||LA102_0==73||(LA102_0>=75 && LA102_0<=76)||(LA102_0>=79 && LA102_0<=80)||LA102_0==105||LA102_0==107||LA102_0==129||LA102_0==141))
					{
						alt102 = 1;
					}
					} finally { DebugExitDecision(102); }
					switch (alt102)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:440:26: expr_list
						{
						DebugLocation(440, 26);
						PushFollow(Follow._expr_list_in_prefix_expr3556);
						expr_list276=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list276.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(102); }

					DebugLocation(440, 37);
					char_literal277=(IToken)Match(input,72,Follow._72_in_prefix_expr3559);  
					stream_72.Add(char_literal277);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 440:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(440, 44);
						// SugarCpp.g:440:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(440, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(440, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(440, 70);
						// SugarCpp.g:440:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(440, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:441:10: '[' expr_list ']'
					{
					DebugLocation(441, 10);
					char_literal278=(IToken)Match(input,106,Follow._106_in_prefix_expr3581);  
					stream_106.Add(char_literal278);

					DebugLocation(441, 14);
					PushFollow(Follow._expr_list_in_prefix_expr3583);
					expr_list279=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list279.Tree);
					DebugLocation(441, 24);
					char_literal280=(IToken)Match(input,108,Follow._108_in_prefix_expr3585);  
					stream_108.Add(char_literal280);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(441, 31);
						// SugarCpp.g:441:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(441, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(441, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(103); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:442:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(442, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr3601);
				suffix_expr281=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr281.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 60);
			LeaveRule("prefix_expr", 60);
			LeaveRule_prefix_expr();
		}
		DebugLocation(443, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:445:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 61);
		TraceIn("expr_list", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal283 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr282 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr284 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal283_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(445, 1);
		try
		{
			// SugarCpp.g:446:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:446:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(446, 4);
			PushFollow(Follow._expr_in_expr_list3613);
			expr282=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr282.Tree);
			DebugLocation(446, 9);
			// SugarCpp.g:446:9: ( ',' ! expr )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==78))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:446:10: ',' ! expr
					{
					DebugLocation(446, 13);
					char_literal283=(IToken)Match(input,78,Follow._78_in_expr_list3616); 
					DebugLocation(446, 15);
					PushFollow(Follow._expr_in_expr_list3619);
					expr284=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr284.Tree);

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 61);
			LeaveRule("expr_list", 61);
			LeaveRule_expr_list();
		}
		DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:449:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 62);
		TraceIn("suffix_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal285 = default(IToken);
		IToken string_literal286 = default(IToken);
		IToken char_literal287 = default(IToken);
		IToken string_literal289 = default(IToken);
		IToken char_literal291 = default(IToken);
		IToken char_literal293 = default(IToken);
		IToken char_literal294 = default(IToken);
		IToken char_literal296 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident290 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list292 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list295 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal285_tree = default(CommonTree);
		CommonTree string_literal286_tree = default(CommonTree);
		CommonTree char_literal287_tree = default(CommonTree);
		CommonTree string_literal289_tree = default(CommonTree);
		CommonTree char_literal291_tree = default(CommonTree);
		CommonTree char_literal293_tree = default(CommonTree);
		CommonTree char_literal294_tree = default(CommonTree);
		CommonTree char_literal296_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(449, 1);
		try
		{
			// SugarCpp.g:450:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:450:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			{
			DebugLocation(450, 4);
			// SugarCpp.g:450:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:450:5: a= atom_expr
			{
			DebugLocation(450, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr3635);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 450:17: -> $a
			{
				DebugLocation(450, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(450, 24);
			// SugarCpp.g:450:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=7;
				try { DebugEnterDecision(108, false);
				switch (input.LA(1))
				{
				case 76:
					{
					alt108 = 1;
					}
					break;
				case 80:
					{
					alt108 = 2;
					}
					break;
				case 84:
					{
					alt108 = 3;
					}
					break;
				case 82:
					{
					alt108 = 4;
					}
					break;
				case 71:
					{
					alt108 = 5;
					}
					break;
				case 106:
					{
					alt108 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(108); }
				switch ( alt108 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:450:26: '++'
					{
					DebugLocation(450, 26);
					string_literal285=(IToken)Match(input,76,Follow._76_in_suffix_expr3645);  
					stream_76.Add(string_literal285);



					{
					// AST REWRITE
					// elements: suffix_expr, 76
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 450:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(450, 34);
						// SugarCpp.g:450:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(450, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(450, 48);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(450, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:451:14: '--'
					{
					DebugLocation(451, 14);
					string_literal286=(IToken)Match(input,80,Follow._80_in_suffix_expr3671);  
					stream_80.Add(string_literal286);



					{
					// AST REWRITE
					// elements: 80, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 451:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(451, 22);
						// SugarCpp.g:451:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(451, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(451, 36);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(451, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:452:11: '.' ident
					{
					DebugLocation(452, 11);
					char_literal287=(IToken)Match(input,84,Follow._84_in_suffix_expr3694);  
					stream_84.Add(char_literal287);

					DebugLocation(452, 15);
					PushFollow(Follow._ident_in_suffix_expr3696);
					ident288=ident();
					PopFollow();

					stream_ident.Add(ident288.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 84
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 452:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(452, 24);
						// SugarCpp.g:452:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(452, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(452, 38);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(452, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(452, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:453:11: '->' ident
					{
					DebugLocation(453, 11);
					string_literal289=(IToken)Match(input,82,Follow._82_in_suffix_expr3721);  
					stream_82.Add(string_literal289);

					DebugLocation(453, 16);
					PushFollow(Follow._ident_in_suffix_expr3723);
					ident290=ident();
					PopFollow();

					stream_ident.Add(ident290.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 82
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 453:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(453, 25);
						// SugarCpp.g:453:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(453, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(453, 39);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(453, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(453, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:454:11: '(' ( expr_list )? ')'
					{
					DebugLocation(454, 11);
					char_literal291=(IToken)Match(input,71,Follow._71_in_suffix_expr3748);  
					stream_71.Add(char_literal291);

					DebugLocation(454, 15);
					// SugarCpp.g:454:15: ( expr_list )?
					int alt106=2;
					try { DebugEnterSubRule(106);
					try { DebugEnterDecision(106, false);
					int LA106_0 = input.LA(1);

					if ((LA106_0==IDENT||LA106_0==NUMBER||LA106_0==STRING||LA106_0==64||LA106_0==69||LA106_0==71||LA106_0==73||(LA106_0>=75 && LA106_0<=76)||(LA106_0>=79 && LA106_0<=80)||LA106_0==105||LA106_0==107||LA106_0==129||LA106_0==141))
					{
						alt106 = 1;
					}
					} finally { DebugExitDecision(106); }
					switch (alt106)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:454:15: expr_list
						{
						DebugLocation(454, 15);
						PushFollow(Follow._expr_list_in_suffix_expr3750);
						expr_list292=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list292.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(106); }

					DebugLocation(454, 26);
					char_literal293=(IToken)Match(input,72,Follow._72_in_suffix_expr3753);  
					stream_72.Add(char_literal293);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 454:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(454, 33);
						// SugarCpp.g:454:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(454, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(454, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(454, 58);
						// SugarCpp.g:454:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(454, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:455:11: '[' ( expr_list )? ']'
					{
					DebugLocation(455, 11);
					char_literal294=(IToken)Match(input,106,Follow._106_in_suffix_expr3777);  
					stream_106.Add(char_literal294);

					DebugLocation(455, 15);
					// SugarCpp.g:455:15: ( expr_list )?
					int alt107=2;
					try { DebugEnterSubRule(107);
					try { DebugEnterDecision(107, false);
					int LA107_0 = input.LA(1);

					if ((LA107_0==IDENT||LA107_0==NUMBER||LA107_0==STRING||LA107_0==64||LA107_0==69||LA107_0==71||LA107_0==73||(LA107_0>=75 && LA107_0<=76)||(LA107_0>=79 && LA107_0<=80)||LA107_0==105||LA107_0==107||LA107_0==129||LA107_0==141))
					{
						alt107 = 1;
					}
					} finally { DebugExitDecision(107); }
					switch (alt107)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:455:15: expr_list
						{
						DebugLocation(455, 15);
						PushFollow(Follow._expr_list_in_suffix_expr3779);
						expr_list295=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list295.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(107); }

					DebugLocation(455, 26);
					char_literal296=(IToken)Match(input,108,Follow._108_in_suffix_expr3782);  
					stream_108.Add(char_literal296);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 455:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(455, 33);
						// SugarCpp.g:455:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(455, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(455, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(455, 58);
						// SugarCpp.g:455:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(455, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop108;
				}
			}

			loop108:
				;

			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 62);
			LeaveRule("suffix_expr", 62);
			LeaveRule_suffix_expr();
		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:460:1: atom_expr : ( NUMBER | ident | STRING | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 63);
		TraceIn("atom_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER297 = default(IToken);
		IToken STRING299 = default(IToken);
		IToken char_literal300 = default(IToken);
		IToken char_literal302 = default(IToken);
		IToken char_literal304 = default(IToken);
		IToken char_literal305 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr303 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER297_tree = default(CommonTree);
		CommonTree STRING299_tree = default(CommonTree);
		CommonTree char_literal300_tree = default(CommonTree);
		CommonTree char_literal302_tree = default(CommonTree);
		CommonTree char_literal304_tree = default(CommonTree);
		CommonTree char_literal305_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(460, 1);
		try
		{
			// SugarCpp.g:461:2: ( NUMBER | ident | STRING | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt111=4;
			try { DebugEnterDecision(111, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt111 = 1;
				}
				break;
			case IDENT:
			case 105:
				{
				alt111 = 2;
				}
				break;
			case STRING:
				{
				alt111 = 3;
				}
				break;
			case 71:
				{
				alt111 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 111, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:461:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(461, 4);
				NUMBER297=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr3828); 
				NUMBER297_tree = (CommonTree)adaptor.Create(NUMBER297);
				adaptor.AddChild(root_0, NUMBER297_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:462:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(462, 4);
				PushFollow(Follow._ident_in_atom_expr3833);
				ident298=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident298.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:463:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(463, 4);
				STRING299=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr3838); 
				STRING299_tree = (CommonTree)adaptor.Create(STRING299);
				adaptor.AddChild(root_0, STRING299_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:464:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(464, 4);
				char_literal300=(IToken)Match(input,71,Follow._71_in_atom_expr3843);  
				stream_71.Add(char_literal300);

				DebugLocation(464, 8);
				PushFollow(Follow._expr_in_atom_expr3845);
				expr301=expr();
				PopFollow();

				stream_expr.Add(expr301.Tree);
				DebugLocation(464, 13);
				// SugarCpp.g:464:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, false);
				int LA110_0 = input.LA(1);

				if ((LA110_0==78))
				{
					alt110 = 1;
				}
				else if ((LA110_0==72))
				{
					alt110 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:464:15: ( ',' expr )+ ')'
					{
					DebugLocation(464, 15);
					// SugarCpp.g:464:15: ( ',' expr )+
					int cnt109=0;
					try { DebugEnterSubRule(109);
					while (true)
					{
						int alt109=2;
						try { DebugEnterDecision(109, false);
						int LA109_0 = input.LA(1);

						if ((LA109_0==78))
						{
							alt109 = 1;
						}


						} finally { DebugExitDecision(109); }
						switch (alt109)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:464:16: ',' expr
							{
							DebugLocation(464, 16);
							char_literal302=(IToken)Match(input,78,Follow._78_in_atom_expr3850);  
							stream_78.Add(char_literal302);

							DebugLocation(464, 20);
							PushFollow(Follow._expr_in_atom_expr3852);
							expr303=expr();
							PopFollow();

							stream_expr.Add(expr303.Tree);

							}
							break;

						default:
							if (cnt109 >= 1)
								goto loop109;

							EarlyExitException eee109 = new EarlyExitException( 109, input );
							DebugRecognitionException(eee109);
							throw eee109;
						}
						cnt109++;
					}
					loop109:
						;

					} finally { DebugExitSubRule(109); }

					DebugLocation(464, 27);
					char_literal304=(IToken)Match(input,72,Follow._72_in_atom_expr3856);  
					stream_72.Add(char_literal304);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 464:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(464, 34);
						// SugarCpp.g:464:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(464, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(464, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(464, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:465:15: ')'
					{
					DebugLocation(465, 15);
					char_literal305=(IToken)Match(input,72,Follow._72_in_atom_expr3881);  
					stream_72.Add(char_literal305);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 465:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(465, 22);
						// SugarCpp.g:465:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(465, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(465, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(110); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 63);
			LeaveRule("atom_expr", 63);
			LeaveRule_atom_expr();
		}
		DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:469:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 64);
		TraceIn("lvalue_item", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal306 = default(IToken);
		IToken string_literal307 = default(IToken);
		IToken char_literal308 = default(IToken);
		IToken string_literal310 = default(IToken);
		IToken char_literal313 = default(IToken);
		IToken char_literal315 = default(IToken);
		IToken char_literal316 = default(IToken);
		IToken char_literal318 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter312 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list314 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list317 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal306_tree = default(CommonTree);
		CommonTree string_literal307_tree = default(CommonTree);
		CommonTree char_literal308_tree = default(CommonTree);
		CommonTree string_literal310_tree = default(CommonTree);
		CommonTree char_literal313_tree = default(CommonTree);
		CommonTree char_literal315_tree = default(CommonTree);
		CommonTree char_literal316_tree = default(CommonTree);
		CommonTree char_literal318_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(469, 1);
		try
		{
			// SugarCpp.g:470:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:470:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(470, 4);
			// SugarCpp.g:470:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:470:5: a= lvalue_atom
			{
			DebugLocation(470, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item3911);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 470:19: -> $a
			{
				DebugLocation(470, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(470, 26);
			// SugarCpp.g:470:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=7;
				try { DebugEnterDecision(115, false);
				switch (input.LA(1))
				{
				case 76:
					{
					alt115 = 1;
					}
					break;
				case 80:
					{
					alt115 = 2;
					}
					break;
				case 84:
					{
					alt115 = 3;
					}
					break;
				case 82:
					{
					alt115 = 4;
					}
					break;
				case 71:
				case 92:
					{
					alt115 = 5;
					}
					break;
				case 106:
					{
					alt115 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:470:28: '++'
					{
					DebugLocation(470, 28);
					string_literal306=(IToken)Match(input,76,Follow._76_in_lvalue_item3921);  
					stream_76.Add(string_literal306);



					{
					// AST REWRITE
					// elements: 76, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 470:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(470, 36);
						// SugarCpp.g:470:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(470, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(470, 50);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(470, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:471:16: '--'
					{
					DebugLocation(471, 16);
					string_literal307=(IToken)Match(input,80,Follow._80_in_lvalue_item3949);  
					stream_80.Add(string_literal307);



					{
					// AST REWRITE
					// elements: lvalue_item, 80
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 471:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(471, 24);
						// SugarCpp.g:471:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(471, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(471, 38);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(471, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:472:13: '.' ident
					{
					DebugLocation(472, 13);
					char_literal308=(IToken)Match(input,84,Follow._84_in_lvalue_item3974);  
					stream_84.Add(char_literal308);

					DebugLocation(472, 17);
					PushFollow(Follow._ident_in_lvalue_item3976);
					ident309=ident();
					PopFollow();

					stream_ident.Add(ident309.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_item, 84
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 472:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(472, 26);
						// SugarCpp.g:472:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(472, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(472, 40);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(472, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(472, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:473:13: '->' ident
					{
					DebugLocation(473, 13);
					string_literal310=(IToken)Match(input,82,Follow._82_in_lvalue_item4003);  
					stream_82.Add(string_literal310);

					DebugLocation(473, 18);
					PushFollow(Follow._ident_in_lvalue_item4005);
					ident311=ident();
					PopFollow();

					stream_ident.Add(ident311.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_item, 82
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 473:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(473, 27);
						// SugarCpp.g:473:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(473, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(473, 41);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(473, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(473, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:474:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(474, 13);
					// SugarCpp.g:474:13: ( generic_parameter )?
					int alt112=2;
					try { DebugEnterSubRule(112);
					try { DebugEnterDecision(112, false);
					int LA112_0 = input.LA(1);

					if ((LA112_0==92))
					{
						alt112 = 1;
					}
					} finally { DebugExitDecision(112); }
					switch (alt112)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:474:13: generic_parameter
						{
						DebugLocation(474, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item4032);
						generic_parameter312=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter312.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(112); }

					DebugLocation(474, 32);
					char_literal313=(IToken)Match(input,71,Follow._71_in_lvalue_item4035);  
					stream_71.Add(char_literal313);

					DebugLocation(474, 36);
					// SugarCpp.g:474:36: ( expr_list )?
					int alt113=2;
					try { DebugEnterSubRule(113);
					try { DebugEnterDecision(113, false);
					int LA113_0 = input.LA(1);

					if ((LA113_0==IDENT||LA113_0==NUMBER||LA113_0==STRING||LA113_0==64||LA113_0==69||LA113_0==71||LA113_0==73||(LA113_0>=75 && LA113_0<=76)||(LA113_0>=79 && LA113_0<=80)||LA113_0==105||LA113_0==107||LA113_0==129||LA113_0==141))
					{
						alt113 = 1;
					}
					} finally { DebugExitDecision(113); }
					switch (alt113)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:474:36: expr_list
						{
						DebugLocation(474, 36);
						PushFollow(Follow._expr_list_in_lvalue_item4037);
						expr_list314=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list314.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(113); }

					DebugLocation(474, 47);
					char_literal315=(IToken)Match(input,72,Follow._72_in_lvalue_item4040);  
					stream_72.Add(char_literal315);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 474:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(474, 54);
						// SugarCpp.g:474:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(474, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(474, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(474, 79);
						// SugarCpp.g:474:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(474, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(474, 98);
						// SugarCpp.g:474:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(474, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:475:13: '[' ( expr_list )? ']'
					{
					DebugLocation(475, 13);
					char_literal316=(IToken)Match(input,106,Follow._106_in_lvalue_item4069);  
					stream_106.Add(char_literal316);

					DebugLocation(475, 17);
					// SugarCpp.g:475:17: ( expr_list )?
					int alt114=2;
					try { DebugEnterSubRule(114);
					try { DebugEnterDecision(114, false);
					int LA114_0 = input.LA(1);

					if ((LA114_0==IDENT||LA114_0==NUMBER||LA114_0==STRING||LA114_0==64||LA114_0==69||LA114_0==71||LA114_0==73||(LA114_0>=75 && LA114_0<=76)||(LA114_0>=79 && LA114_0<=80)||LA114_0==105||LA114_0==107||LA114_0==129||LA114_0==141))
					{
						alt114 = 1;
					}
					} finally { DebugExitDecision(114); }
					switch (alt114)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:475:17: expr_list
						{
						DebugLocation(475, 17);
						PushFollow(Follow._expr_list_in_lvalue_item4071);
						expr_list317=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list317.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(114); }

					DebugLocation(475, 28);
					char_literal318=(IToken)Match(input,108,Follow._108_in_lvalue_item4074);  
					stream_108.Add(char_literal318);



					{
					// AST REWRITE
					// elements: expr_list, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 475:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(475, 35);
						// SugarCpp.g:475:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(475, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(475, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(475, 60);
						// SugarCpp.g:475:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(475, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 64);
			LeaveRule("lvalue_item", 64);
			LeaveRule_lvalue_item();
		}
		DebugLocation(477, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:479:1: lvalue_atom : ident ;
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 65);
		TraceIn("lvalue_atom", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> ident319 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(479, 1);
		try
		{
			// SugarCpp.g:480:2: ( ident )
			DebugEnterAlt(1);
			// SugarCpp.g:480:4: ident
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(480, 4);
			PushFollow(Follow._ident_in_lvalue_atom4113);
			ident319=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident319.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 65);
			LeaveRule("lvalue_atom", 65);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(481, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:483:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 66);
		TraceIn("lvalue", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal320 = default(IToken);
		IToken char_literal322 = default(IToken);
		IToken char_literal324 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item321 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item323 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item325 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal320_tree = default(CommonTree);
		CommonTree char_literal322_tree = default(CommonTree);
		CommonTree char_literal324_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(483, 1);
		try
		{
			// SugarCpp.g:484:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt117=2;
			try { DebugEnterDecision(117, false);
			int LA117_0 = input.LA(1);

			if ((LA117_0==71))
			{
				alt117 = 1;
			}
			else if ((LA117_0==IDENT||LA117_0==105))
			{
				alt117 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:484:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(484, 4);
				char_literal320=(IToken)Match(input,71,Follow._71_in_lvalue4124);  
				stream_71.Add(char_literal320);

				DebugLocation(484, 8);
				PushFollow(Follow._lvalue_item_in_lvalue4126);
				lvalue_item321=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item321.Tree);
				DebugLocation(484, 20);
				// SugarCpp.g:484:20: ( ',' lvalue_item )+
				int cnt116=0;
				try { DebugEnterSubRule(116);
				while (true)
				{
					int alt116=2;
					try { DebugEnterDecision(116, false);
					int LA116_0 = input.LA(1);

					if ((LA116_0==78))
					{
						alt116 = 1;
					}


					} finally { DebugExitDecision(116); }
					switch (alt116)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:484:21: ',' lvalue_item
						{
						DebugLocation(484, 21);
						char_literal322=(IToken)Match(input,78,Follow._78_in_lvalue4129);  
						stream_78.Add(char_literal322);

						DebugLocation(484, 25);
						PushFollow(Follow._lvalue_item_in_lvalue4131);
						lvalue_item323=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item323.Tree);

						}
						break;

					default:
						if (cnt116 >= 1)
							goto loop116;

						EarlyExitException eee116 = new EarlyExitException( 116, input );
						DebugRecognitionException(eee116);
						throw eee116;
					}
					cnt116++;
				}
				loop116:
					;

				} finally { DebugExitSubRule(116); }

				DebugLocation(484, 39);
				char_literal324=(IToken)Match(input,72,Follow._72_in_lvalue4135);  
				stream_72.Add(char_literal324);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 484:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(484, 46);
					// SugarCpp.g:484:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(484, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(484, 60);
					// SugarCpp.g:484:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(484, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:485:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(485, 4);
				PushFollow(Follow._lvalue_item_in_lvalue4149);
				lvalue_item325=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item325.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 66);
			LeaveRule("lvalue", 66);
			LeaveRule_lvalue();
		}
		DebugLocation(486, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:488:1: ident : ( '@' )? IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 67);
		TraceIn("ident", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal326 = default(IToken);
		IToken IDENT327 = default(IToken);
		IToken string_literal328 = default(IToken);
		IToken IDENT329 = default(IToken);

		CommonTree char_literal326_tree = default(CommonTree);
		CommonTree IDENT327_tree = default(CommonTree);
		CommonTree string_literal328_tree = default(CommonTree);
		CommonTree IDENT329_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(488, 1);
		try
		{
			// SugarCpp.g:489:2: ( ( '@' )? IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:489:4: ( '@' )? IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(489, 4);
			// SugarCpp.g:489:4: ( '@' )?
			int alt118=2;
			try { DebugEnterSubRule(118);
			try { DebugEnterDecision(118, false);
			int LA118_0 = input.LA(1);

			if ((LA118_0==105))
			{
				alt118 = 1;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:489:4: '@'
				{
				DebugLocation(489, 4);
				char_literal326=(IToken)Match(input,105,Follow._105_in_ident4160); 
				char_literal326_tree = (CommonTree)adaptor.Create(char_literal326);
				adaptor.AddChild(root_0, char_literal326_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(118); }

			DebugLocation(489, 9);
			IDENT327=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4163); 
			IDENT327_tree = (CommonTree)adaptor.Create(IDENT327);
			adaptor.AddChild(root_0, IDENT327_tree);
			DebugLocation(489, 15);
			// SugarCpp.g:489:15: ( '::' IDENT )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==89))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:489:16: '::' IDENT
					{
					DebugLocation(489, 16);
					string_literal328=(IToken)Match(input,89,Follow._89_in_ident4166); 
					string_literal328_tree = (CommonTree)adaptor.Create(string_literal328);
					adaptor.AddChild(root_0, string_literal328_tree);
					DebugLocation(489, 21);
					IDENT329=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4168); 
					IDENT329_tree = (CommonTree)adaptor.Create(IDENT329);
					adaptor.AddChild(root_0, IDENT329_tree);

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 67);
			LeaveRule("ident", 67);
			LeaveRule_ident();
		}
		DebugLocation(490, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:492:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 68);
		TraceIn("infix_func", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal330 = default(IToken);
		IToken char_literal332 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident331 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal330_tree = default(CommonTree);
		CommonTree char_literal332_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(492, 1);
		try
		{
			// SugarCpp.g:493:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:493:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(493, 7);
			char_literal330=(IToken)Match(input,111,Follow._111_in_infix_func4181); 
			DebugLocation(493, 9);
			PushFollow(Follow._ident_in_infix_func4184);
			ident331=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident331.Tree);
			DebugLocation(493, 18);
			char_literal332=(IToken)Match(input,111,Follow._111_in_infix_func4186); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 68);
			LeaveRule("infix_func", 68);
			LeaveRule_infix_func();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA25 dfa25;
	private DFA38 dfa38;
	private DFA53 dfa53;
	private DFA63 dfa63;
	private DFA68 dfa68;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa25 = new DFA25( this );
		dfa38 = new DFA38( this );
		dfa53 = new DFA53( this );
		dfa63 = new DFA63( this );
		dfa68 = new DFA68( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x57\xFFFF";
		private const string DFA4_eofS =
			"\x57\xFFFF";
		private const string DFA4_minS =
			"\x2\x1F\x1\xFFFF\x2\x1F\x6\xFFFF\x1\x1F\x2\x47\x1\x1F\x1\xFFFF\x3\x1F"+
			"\x1\x2A\x2\x1F\x1\x47\x2\x48\x1\x1F\x1\x48\x1\x1F\x2\x47\x1\x1F\x2\x48"+
			"\x1\x1F\x1\x48\x1\x1F\x1\x4E\x5\x1F\x1\x4E\x1\x1F\x2\x48\x1\x1F\x2\x48"+
			"\x1\x47\x2\x48\x1\x1F\x3\x48\x1\x1F\x3\x48\x1\x1F\x2\x48\x2\x1F\x1\x4E"+
			"\x2\x1F\x1\x4E\x2\x1F\x3\x48\x1\x1F\x4\x48\x1\x1F\x3\x48\x2\x1F\x2\x48";
		private const string DFA4_maxS =
			"\x1\x8D\x1\x73\x1\xFFFF\x1\x1F\x1\x8D\x6\xFFFF\x1\x1F\x2\x6C\x1\x1F\x1"+
			"\xFFFF\x1\x1F\x1\x69\x1\x73\x1\x2A\x1\x69\x1\x8D\x1\x6C\x2\x4E\x1\x1F"+
			"\x1\x59\x1\x1F\x2\x6C\x1\x8D\x2\x4E\x1\x1F\x1\x59\x1\x69\x1\x6C\x2\x1F"+
			"\x3\x69\x1\x6C\x1\x1F\x2\x4E\x1\x1F\x2\x59\x1\x6C\x2\x4E\x1\x1F\x1\x59"+
			"\x2\x4E\x1\x1F\x1\x59\x2\x4E\x1\x1F\x2\x59\x1\x1F\x1\x69\x1\x6C\x1\x1F"+
			"\x1\x69\x1\x6C\x2\x1F\x1\x59\x2\x4E\x1\x1F\x2\x59\x2\x4E\x1\x1F\x3\x59"+
			"\x2\x1F\x2\x59";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x2\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x4\xFFFF"+
			"\x1\x4\x47\xFFFF";
		private const string DFA4_specialS =
			"\x57\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x4\x49\xFFFF\x1\x3\x1\x1\x7\xFFFF\x1\x5\x1\x2\x2\xFFFF\x1\x6\x3"+
				"\xFFFF\x1\x9\x5\xFFFF\x1\xA\x4\xFFFF\x1\x8\x1\x2\x1\x7\x5\xFFFF\x1\x2",
				"\x1\xC\x49\xFFFF\x1\xB\x9\xFFFF\x1\xD",
				"",
				"\x1\x4",
				"\x1\x2\x25\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xF"+
				"\x9\xFFFF\x1\xF\x1\xE\x1\xF\x1\xFFFF\x1\x2\xC\xFFFF\x2\x2\x22\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xC",
				"\x1\x11\x6\xFFFF\x1\x12\xA\xFFFF\x1\x10\x12\xFFFF\x1\x13",
				"\x1\x14\x6\xFFFF\x1\x12\x1D\xFFFF\x1\x13",
				"\x1\x15",
				"",
				"\x1\x16",
				"\x1\x1A\xB\xFFFF\x1\x17\x4\xFFFF\x1\x18\x38\xFFFF\x1\x19",
				"\x1\x1C\x49\xFFFF\x1\x1B\x9\xFFFF\x1\x1D",
				"\x1\x1E",
				"\x1\x22\xB\xFFFF\x1\x1F\x4\xFFFF\x1\x20\x38\xFFFF\x1\x21",
				"\x1\x2\x25\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xF"+
				"\x9\xFFFF\x1\xF\x1\xE\x1\xF\x1\xFFFF\x1\x2\xC\xFFFF\x2\x2\x22\xFFFF"+
				"\x1\x2",
				"\x1\x11\x6\xFFFF\x1\x12\xA\xFFFF\x1\x10\x12\xFFFF\x1\x13",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x1A",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x25",
				"\x1\x1C",
				"\x1\x27\x6\xFFFF\x1\x12\xA\xFFFF\x1\x26\x12\xFFFF\x1\x13",
				"\x1\x28\x6\xFFFF\x1\x12\x1D\xFFFF\x1\x13",
				"\x1\x4\xA\xFFFF\x1\x1E\x3E\xFFFF\x1\x3\x1\x1\x7\xFFFF\x1\x5\x1\x2\x2"+
				"\xFFFF\x1\x6\xF\xFFFF\x1\x2\x6\xFFFF\x1\x2",
				"\x1\x2A\x5\xFFFF\x1\x29",
				"\x1\x2A\x5\xFFFF\x1\x29",
				"\x1\x22",
				"\x1\x2A\x5\xFFFF\x1\x29\xA\xFFFF\x1\x2B",
				"\x1\x2F\xB\xFFFF\x1\x2C\x4\xFFFF\x1\x2D\x38\xFFFF\x1\x2E",
				"\x1\x12\x1D\xFFFF\x1\x13",
				"\x1\x30",
				"\x1\x31",
				"\x1\x35\xB\xFFFF\x1\x32\x4\xFFFF\x1\x33\x38\xFFFF\x1\x34",
				"\x1\x39\xB\xFFFF\x1\x36\x4\xFFFF\x1\x37\x38\xFFFF\x1\x38",
				"\x1\x3D\xB\xFFFF\x1\x3A\x4\xFFFF\x1\x3B\x38\xFFFF\x1\x3C",
				"\x1\x12\x1D\xFFFF\x1\x13",
				"\x1\x3E",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x2F",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x3F",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x25",
				"\x1\x27\x6\xFFFF\x1\x12\xA\xFFFF\x1\x26\x12\xFFFF\x1\x13",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x35",
				"\x1\x41\x5\xFFFF\x1\x40\xA\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x39",
				"\x1\x44\x5\xFFFF\x1\x43\xA\xFFFF\x1\x45",
				"\x1\x2A\x5\xFFFF\x1\x29",
				"\x1\x2A\x5\xFFFF\x1\x29",
				"\x1\x3D",
				"\x1\x2A\x5\xFFFF\x1\x29\xA\xFFFF\x1\x46",
				"\x1\x2A\x5\xFFFF\x1\x29\xA\xFFFF\x1\x2B",
				"\x1\x47",
				"\x1\x4B\xB\xFFFF\x1\x48\x4\xFFFF\x1\x49\x38\xFFFF\x1\x4A",
				"\x1\x12\x1D\xFFFF\x1\x13",
				"\x1\x4C",
				"\x1\x50\xB\xFFFF\x1\x4D\x4\xFFFF\x1\x4E\x38\xFFFF\x1\x4F",
				"\x1\x12\x1D\xFFFF\x1\x13",
				"\x1\x51",
				"\x1\x52",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x4B",
				"\x1\x41\x5\xFFFF\x1\x40\xA\xFFFF\x1\x53",
				"\x1\x41\x5\xFFFF\x1\x40\xA\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x50",
				"\x1\x44\x5\xFFFF\x1\x43\xA\xFFFF\x1\x54",
				"\x1\x44\x5\xFFFF\x1\x43\xA\xFFFF\x1\x45",
				"\x1\x2A\x5\xFFFF\x1\x29\xA\xFFFF\x1\x46",
				"\x1\x55",
				"\x1\x56",
				"\x1\x41\x5\xFFFF\x1\x40\xA\xFFFF\x1\x53",
				"\x1\x44\x5\xFFFF\x1\x43\xA\xFFFF\x1\x54"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "172:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x4\xFFFF";
		private const string DFA25_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA25_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA25_maxS =
			"\x1\x2A\x1\x8D\x2\xFFFF";
		private const string DFA25_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA25_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x16\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x3E\xFFFF\x2\x3\x7\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x4\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "216:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\x4\xFFFF";
		private const string DFA38_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA38_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA38_maxS =
			"\x1\x2A\x1\x8D\x2\xFFFF";
		private const string DFA38_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA38_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x16\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x3E\xFFFF\x2\x3\x7\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x4\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "228:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\x12\xFFFF";
		private const string DFA53_eofS =
			"\x12\xFFFF";
		private const string DFA53_minS =
			"\x1\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x4\x1F\x1\x45\x3\x1F\x1\x45\x1\x1F\x1"+
			"\x45\x1\x1F\x1\x45";
		private const string DFA53_maxS =
			"\x1\x8D\x1\xFFFF\x1\x1F\x1\x8D\x1\xFFFF\x1\x1F\x1\x86\x1\x8D\x1\x1F\x1"+
			"\x6A\x1\x1F\x1\x86\x1\x8D\x1\x6A\x1\x1F\x1\x6A\x1\x1F\x1\x6A";
		private const string DFA53_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xD\xFFFF";
		private const string DFA53_specialS =
			"\x12\xFFFF}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x3\x49\xFFFF\x1\x2\x9\xFFFF\x1\x1\x12\xFFFF\x1\x1\x6\xFFFF\x1\x4",
				"",
				"\x1\x3",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x4\x1\xFFFF\x1\x1\xF\xFFFF\x1\x5"+
				"\x2\xFFFF\x1\x6\xC\xFFFF\x2\x1\x22\xFFFF\x1\x1",
				"",
				"\x1\x7",
				"\x1\x9\x43\xFFFF\x1\x1\x5\xFFFF\x1\x8\x9\xFFFF\x1\x1\x12\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x4\x1\xFFFF\x1\x1\xF\xFFFF\x1\x5"+
				"\x2\xFFFF\x1\x6\xC\xFFFF\x2\x1\x22\xFFFF\x1\x1",
				"\x1\x9",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\xA\xFFFF\x1\xA\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xF\x49\xFFFF\x1\xE\x9\xFFFF\x1\x1\x12\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x4\x1\xFFFF\x1\x1\x1F\xFFFF\x2\x1"+
				"\x22\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\xA\xFFFF\x1\xA\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xF",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\xA\xFFFF\x1\x10\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x11",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\xA\xFFFF\x1\x10\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "257:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA63 : DFA
	{
		private const string DFA63_eotS =
			"\xA\xFFFF";
		private const string DFA63_eofS =
			"\xA\xFFFF";
		private const string DFA63_minS =
			"\x2\x1F\x1\x2A\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x2A";
		private const string DFA63_maxS =
			"\x1\x87\x1\x1F\x1\x8B\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x8B";
		private const string DFA63_acceptS =
			"\x3\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA63_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA63_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x6\x21\xFFFF\x1\x1\x19\xFFFF\x1\x3\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x4",
				"\x1\x2",
				"\x1\x6\x18\xFFFF\x1\x6\x2\xFFFF\x2\x6\x2\xFFFF\x1\x6\x1\xFFFF\x2\x6"+
				"\x1\x8\x1\xFFFF\x3\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\x8\x1\x7\x1\x8"+
				"\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x5\xFFFF\x1\x6\x1\xFFFF"+
				"\x1\x6\x1\xFFFF\x1\x6\x3\xFFFF\x1\x6\x1C\xFFFF\x1\x6",
				"",
				"",
				"",
				"",
				"\x1\x9",
				"",
				"\x1\x6\x18\xFFFF\x1\x6\x2\xFFFF\x2\x6\x2\xFFFF\x1\x6\x1\xFFFF\x2\x6"+
				"\x1\x8\x1\xFFFF\x3\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\x8\x1\x7\x1\x8"+
				"\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x5\xFFFF\x1\x6\x1\xFFFF"+
				"\x1\x6\x1\xFFFF\x1\x6\x3\xFFFF\x1\x6\x1C\xFFFF\x1\x6"
			};

		private static readonly short[] DFA63_eot = DFA.UnpackEncodedString(DFA63_eotS);
		private static readonly short[] DFA63_eof = DFA.UnpackEncodedString(DFA63_eofS);
		private static readonly char[] DFA63_min = DFA.UnpackEncodedStringToUnsignedChars(DFA63_minS);
		private static readonly char[] DFA63_max = DFA.UnpackEncodedStringToUnsignedChars(DFA63_maxS);
		private static readonly short[] DFA63_accept = DFA.UnpackEncodedString(DFA63_acceptS);
		private static readonly short[] DFA63_special = DFA.UnpackEncodedString(DFA63_specialS);
		private static readonly short[][] DFA63_transition;

		static DFA63()
		{
			int numStates = DFA63_transitionS.Length;
			DFA63_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA63_transition[i] = DFA.UnpackEncodedString(DFA63_transitionS[i]);
			}
		}

		public DFA63( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 63;
			this.eot = DFA63_eot;
			this.eof = DFA63_eof;
			this.min = DFA63_min;
			this.max = DFA63_max;
			this.accept = DFA63_accept;
			this.special = DFA63_special;
			this.transition = DFA63_transition;
		}

		public override string Description { get { return "275:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA68 : DFA
	{
		private const string DFA68_eotS =
			"\x4\xFFFF";
		private const string DFA68_eofS =
			"\x4\xFFFF";
		private const string DFA68_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA68_maxS =
			"\x1\x75\x1\x89\x2\xFFFF";
		private const string DFA68_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA68_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA68_transitionS =
			{
				"\x1\x1\x4A\xFFFF\x1\x2",
				"\x1\x3\x16\xFFFF\x1\x3\xA\xFFFF\x1\x1\x1C\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xA\xFFFF\x1\x3\x1\x2\x1\xFFFF\x3\x3\x4\xFFFF\x2\x3\x3\xFFFF\x3\x3"+
				"\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA68_eot = DFA.UnpackEncodedString(DFA68_eotS);
		private static readonly short[] DFA68_eof = DFA.UnpackEncodedString(DFA68_eofS);
		private static readonly char[] DFA68_min = DFA.UnpackEncodedStringToUnsignedChars(DFA68_minS);
		private static readonly char[] DFA68_max = DFA.UnpackEncodedStringToUnsignedChars(DFA68_maxS);
		private static readonly short[] DFA68_accept = DFA.UnpackEncodedString(DFA68_acceptS);
		private static readonly short[] DFA68_special = DFA.UnpackEncodedString(DFA68_specialS);
		private static readonly short[][] DFA68_transition;

		static DFA68()
		{
			int numStates = DFA68_transitionS.Length;
			DFA68_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA68_transition[i] = DFA.UnpackEncodedString(DFA68_transitionS[i]);
			}
		}

		public DFA68( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 68;
			this.eot = DFA68_eot;
			this.eof = DFA68_eof;
			this.min = DFA68_min;
			this.max = DFA68_max;
			this.accept = DFA68_accept;
			this.special = DFA68_special;
			this.transition = DFA68_transition;
		}

		public override string Description { get { return "301:25: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root455 = new BitSet(new ulong[]{0x40080000000UL,0x44C060000000000UL,0x20E1UL});
		public static readonly BitSet _global_block_in_root458 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block480 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block482 = new BitSet(new ulong[]{0x40080000002UL,0x44C060000000000UL,0x20E1UL});
		public static readonly BitSet _func_def_in_node505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item573 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _71_in_attribute_item576 = new BitSet(new ulong[]{0x1080080000000UL,0x20000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item578 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_attribute_item581 = new BitSet(new ulong[]{0x1080080000000UL,0x20000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item583 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_attribute_item587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_attribute_item605 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _71_in_attribute_item608 = new BitSet(new ulong[]{0x1080080000000UL,0x20000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item610 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_attribute_item613 = new BitSet(new ulong[]{0x1080080000000UL,0x20000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item615 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_attribute_item619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_attribute644 = new BitSet(new ulong[]{0x80000000UL,0x8020000000000UL});
		public static readonly BitSet _attribute_item_in_attribute646 = new BitSet(new ulong[]{0x0UL,0x100000004000UL});
		public static readonly BitSet _78_in_attribute649 = new BitSet(new ulong[]{0x80000000UL,0x8020000000000UL});
		public static readonly BitSet _attribute_item_in_attribute651 = new BitSet(new ulong[]{0x0UL,0x100000004000UL});
		public static readonly BitSet _108_in_attribute655 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute657 = new BitSet(new ulong[]{0x40000000002UL,0x40000000000UL});
		public static readonly BitSet _attribute_in_global_alloc676 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc679 = new BitSet(new ulong[]{0x0UL,0x5000000UL});
		public static readonly BitSet _88_in_global_alloc683 = new BitSet(new ulong[]{0x80000000UL,0x8020000000000UL,0x40UL});
		public static readonly BitSet _type_name_in_global_alloc685 = new BitSet(new ulong[]{0x2UL,0x104000080UL});
		public static readonly BitSet _96_in_global_alloc690 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _90_in_global_alloc694 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_global_alloc697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_global_alloc757 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019BA1UL,0x2002UL});
		public static readonly BitSet _expr_list_in_global_alloc759 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_global_alloc762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_global_alloc835 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _modify_expr_in_global_alloc838 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_global_alloc841 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _modify_expr_in_global_alloc843 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _stmt_using_in_global_using880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_import_def902 = new BitSet(new ulong[]{0x1040000000002UL});
		public static readonly BitSet _STRING_in_import_def904 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def908 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_import_def911 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def913 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _STRING_in_import_def918 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def920 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _DEDENT_in_import_def925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def947 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_enum_def950 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def952 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_enum_def954 = new BitSet(new ulong[]{0x80000002UL,0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def957 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_enum_def960 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def962 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _128_in_namespace_def995 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_namespace_def997 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def999 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1002 = new BitSet(new ulong[]{0x40080000100UL,0x44C060000000000UL,0x20E1UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1004 = new BitSet(new ulong[]{0x40080000100UL,0x44C060000000000UL,0x20E1UL});
		public static readonly BitSet _global_block_in_namespace_def1007 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1031 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_class_def1034 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1036 = new BitSet(new ulong[]{0x40000000002UL,0x11000080UL});
		public static readonly BitSet _generic_parameter_in_class_def1039 = new BitSet(new ulong[]{0x40000000002UL,0x1000080UL});
		public static readonly BitSet _71_in_class_def1044 = new BitSet(new ulong[]{0x80000000UL,0x20004000000UL});
		public static readonly BitSet _func_args_in_class_def1046 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_class_def1048 = new BitSet(new ulong[]{0x40000000002UL,0x1000000UL});
		public static readonly BitSet _88_in_class_def1053 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1055 = new BitSet(new ulong[]{0x40000000002UL,0x4000UL});
		public static readonly BitSet _78_in_class_def1058 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1060 = new BitSet(new ulong[]{0x40000000002UL,0x4000UL});
		public static readonly BitSet _NEWLINE_in_class_def1067 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_class_def1070 = new BitSet(new ulong[]{0x40080000100UL,0x44C060000000000UL,0x20E1UL});
		public static readonly BitSet _NEWLINE_in_class_def1072 = new BitSet(new ulong[]{0x40080000100UL,0x44C060000000000UL,0x20E1UL});
		public static readonly BitSet _global_block_in_class_def1075 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_type_name_op1118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_type_name_op1122 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_type_name_op1124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_type_name_op1128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_type_name1137 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL,0x40UL});
		public static readonly BitSet _134_in_type_name1140 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_type_name1143 = new BitSet(new ulong[]{0x2UL,0x40010000220UL});
		public static readonly BitSet _92_in_type_name1146 = new BitSet(new ulong[]{0x80000000UL,0x8020800000000UL,0x40UL});
		public static readonly BitSet _type_name_in_type_name1149 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _78_in_type_name1152 = new BitSet(new ulong[]{0x80000000UL,0x8020000000000UL,0x40UL});
		public static readonly BitSet _type_name_in_type_name1154 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _99_in_type_name1160 = new BitSet(new ulong[]{0x2UL,0x40000000220UL});
		public static readonly BitSet _type_name_op_in_type_name1164 = new BitSet(new ulong[]{0x2UL,0x40000000220UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1204 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_generic_parameter_inside1207 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1209 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _92_in_generic_parameter1231 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1233 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_generic_parameter1235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1250 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_func_args1253 = new BitSet(new ulong[]{0x80000000UL,0x20004000000UL});
		public static readonly BitSet _func_args_item_in_func_args1255 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _ident_list_in_func_args_item1277 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_func_args_item1279 = new BitSet(new ulong[]{0x80000000UL,0x8020000000000UL,0x40UL});
		public static readonly BitSet _type_name_in_func_args_item1281 = new BitSet(new ulong[]{0x2UL,0x104000080UL});
		public static readonly BitSet _96_in_func_args_item1286 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _90_in_func_args_item1290 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_func_args_item1293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_func_args_item1341 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019BA1UL,0x2002UL});
		public static readonly BitSet _expr_list_in_func_args_item1343 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_func_args_item1346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_func_args_item1403 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _modify_expr_in_func_args_item1407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1418 = new BitSet(new ulong[]{0x80000000UL,0x8020000000000UL,0x2040UL});
		public static readonly BitSet _type_name_in_func_def1421 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL,0x2000UL});
		public static readonly BitSet _141_in_func_def1424 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_func_def1427 = new BitSet(new ulong[]{0x0UL,0x10000080UL});
		public static readonly BitSet _generic_parameter_in_func_def1429 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_func_def1432 = new BitSet(new ulong[]{0x80000000UL,0x20004000100UL});
		public static readonly BitSet _func_args_in_func_def1434 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_func_def1437 = new BitSet(new ulong[]{0x40000000000UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1440 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _stmt_block_in_func_def1443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_func_def1492 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_func_def1494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1535 = new BitSet(new ulong[]{0x40080000100UL,0xC390020000000080UL,0x3B8UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1537 = new BitSet(new ulong[]{0x40080000100UL,0xC390020000000080UL,0x3B8UL});
		public static readonly BitSet _stmt_in_stmt_block1542 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1544 = new BitSet(new ulong[]{0x40080000100UL,0xC390020000000080UL,0x3B8UL});
		public static readonly BitSet _DEDENT_in_stmt_block1549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1574 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr1610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr1615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr1630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_defer1641 = new BitSet(new ulong[]{0x80000000UL,0xC390020000000080UL,0x3B8UL});
		public static readonly BitSet _stmt_in_stmt_defer1643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_stmt_typedef1662 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1664 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_stmt_typedef1666 = new BitSet(new ulong[]{0x80000000UL,0x8020000000000UL,0x40UL});
		public static readonly BitSet _type_name_in_stmt_typedef1668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_stmt_using_item1691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_stmt_using1699 = new BitSet(new ulong[]{0x80000002UL,0x20000000000UL,0x1UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1701 = new BitSet(new ulong[]{0x80000002UL,0x20000000000UL,0x1UL});
		public static readonly BitSet _131_in_stmt_return1722 = new BitSet(new ulong[]{0x1080080000002UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_stmt_return1724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_stmt_if1745 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_stmt_if1747 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1749 = new BitSet(new ulong[]{0x40000000002UL,0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1752 = new BitSet(new ulong[]{0x40000000000UL,0x20000000000000UL});
		public static readonly BitSet _117_in_stmt_if1755 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_stmt_while1783 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_stmt_while1785 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1787 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_stmt_while1802 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_stmt_for1828 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stmt_for1830 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_stmt_for1832 = new BitSet(new ulong[]{0x0UL,0x800000008000000UL});
		public static readonly BitSet _91_in_stmt_for1835 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_stmt_for1837 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_stmt_for1839 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_stmt_for1841 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _123_in_stmt_for1847 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_stmt_for1849 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_for1854 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_stmt_try1901 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1903 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_stmt_try1905 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_stmt_try1907 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_linq_item1932 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_linq_item1934 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_linq_item1936 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_linq_item1938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_linq_item1953 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_linq_item1955 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_linq_item1957 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_linq_item1959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_linq_item1974 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_linq_item1976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _linq_item_in_linq_prefix1996 = new BitSet(new ulong[]{0x40000000000UL,0x4100000000000000UL,0x100UL});
		public static readonly BitSet _linq_item_in_linq_prefix1998 = new BitSet(new ulong[]{0x40000000000UL,0x4100000000000000UL,0x100UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix2001 = new BitSet(new ulong[]{0x40000000002UL,0x4100000000000000UL,0x100UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq2024 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq2026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2047 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_ident_list2050 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_ident_list2052 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2074 = new BitSet(new ulong[]{0x0UL,0x5000000UL});
		public static readonly BitSet _88_in_stmt_alloc2078 = new BitSet(new ulong[]{0x80000000UL,0x8020000000000UL,0x40UL});
		public static readonly BitSet _type_name_in_stmt_alloc2080 = new BitSet(new ulong[]{0x2UL,0x104000080UL});
		public static readonly BitSet _96_in_stmt_alloc2085 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _90_in_stmt_alloc2089 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_stmt_alloc2092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_stmt_alloc2140 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019BA1UL,0x2002UL});
		public static readonly BitSet _expr_list_in_stmt_alloc2142 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_alloc2145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_stmt_alloc2206 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc2210 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_stmt_alloc2213 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc2215 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _lvalue_in_stmt_modify2241 = new BitSet(new ulong[]{0x2UL,0x414140822448UL,0x800UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify2245 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_stmt_modify2262 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_lambda_expr2289 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_lambda_expr2291 = new BitSet(new ulong[]{0x80000000UL,0x20004000100UL});
		public static readonly BitSet _func_args_in_lambda_expr2293 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_lambda_expr2296 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_lambda_expr2298 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _lambda_expr_in_lambda_expr2300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr2316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr2373 = new BitSet(new ulong[]{0x2UL,0x404144822448UL,0x800UL});
		public static readonly BitSet _set_in_modify_expr2377 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _cond_expr_in_modify_expr2422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_modify_expr2431 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _cond_expr_in_modify_expr2434 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item2447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr2459 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_cond_expr2468 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2472 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_cond_expr2474 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr2509 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1004UL});
		public static readonly BitSet _140_in_or_expr2519 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _and_expr_in_or_expr2523 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1004UL});
		public static readonly BitSet _130_in_or_expr2563 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _and_expr_in_or_expr2567 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1004UL});
		public static readonly BitSet _bit_or_in_and_expr2595 = new BitSet(new ulong[]{0x2UL,0x1000000000010UL});
		public static readonly BitSet _68_in_and_expr2605 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _bit_or_in_and_expr2609 = new BitSet(new ulong[]{0x2UL,0x1000000000010UL});
		public static readonly BitSet _112_in_and_expr2635 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _bit_or_in_and_expr2639 = new BitSet(new ulong[]{0x2UL,0x1000000000010UL});
		public static readonly BitSet _bit_xor_in_bit_or2669 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_bit_or2678 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _bit_xor_in_bit_or2682 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _bit_and_in_bit_xor2712 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _109_in_bit_xor2721 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _bit_and_in_bit_xor2725 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2755 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_bit_and2764 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2768 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2817 = new BitSet(new ulong[]{0x2UL,0x3000000200000002UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr2829 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _infix_expr_in_cmp_expr2866 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _92_in_cmp_expr2876 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _infix_expr_in_cmp_expr2880 = new BitSet(new ulong[]{0x80000002UL,0x21890000000UL});
		public static readonly BitSet _ident_in_cmp_expr2886 = new BitSet(new ulong[]{0x80000000UL,0x20800000000UL});
		public static readonly BitSet _99_in_cmp_expr2889 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_cmp_expr2891 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019BA1UL,0x2002UL});
		public static readonly BitSet _expr_list_in_cmp_expr2893 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_cmp_expr2896 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _95_in_cmp_expr3006 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3010 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _99_in_cmp_expr3037 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3041 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _100_in_cmp_expr3068 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3072 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _shift_expr_in_infix_expr3102 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr3112 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _shift_expr_in_infix_expr3116 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr3159 = new BitSet(new ulong[]{0x2UL,0x2020000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr3168 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _add_expr_in_shift_expr3172 = new BitSet(new ulong[]{0x2UL,0x2020000000UL});
		public static readonly BitSet _mul_expr_in_add_expr3202 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _75_in_add_expr3212 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _mul_expr_in_add_expr3216 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _79_in_add_expr3241 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _mul_expr_in_add_expr3245 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _selector_expr_in_mul_expr3283 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _73_in_mul_expr3293 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _selector_expr_in_mul_expr3297 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _86_in_mul_expr3327 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _selector_expr_in_mul_expr3331 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _66_in_mul_expr3361 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _selector_expr_in_mul_expr3365 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _prefix_expr_in_selector_expr3408 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _83_in_selector_expr3418 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr3422 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _85_in_selector_expr3450 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr3455 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr3530 = new BitSet(new ulong[]{0x1080080000000UL,0x20000019AA1UL,0x2002UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr3532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_prefix_expr3548 = new BitSet(new ulong[]{0x80000000UL,0x8020000000000UL,0x40UL});
		public static readonly BitSet _type_name_in_prefix_expr3550 = new BitSet(new ulong[]{0x0UL,0x40000000080UL});
		public static readonly BitSet _71_in_prefix_expr3554 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019BA1UL,0x2002UL});
		public static readonly BitSet _expr_list_in_prefix_expr3556 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_prefix_expr3559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_prefix_expr3581 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_list_in_prefix_expr3583 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_prefix_expr3585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr3601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list3613 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_expr_list3616 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_expr_list3619 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr3635 = new BitSet(new ulong[]{0x2UL,0x40000151080UL});
		public static readonly BitSet _76_in_suffix_expr3645 = new BitSet(new ulong[]{0x2UL,0x40000151080UL});
		public static readonly BitSet _80_in_suffix_expr3671 = new BitSet(new ulong[]{0x2UL,0x40000151080UL});
		public static readonly BitSet _84_in_suffix_expr3694 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr3696 = new BitSet(new ulong[]{0x2UL,0x40000151080UL});
		public static readonly BitSet _82_in_suffix_expr3721 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr3723 = new BitSet(new ulong[]{0x2UL,0x40000151080UL});
		public static readonly BitSet _71_in_suffix_expr3748 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019BA1UL,0x2002UL});
		public static readonly BitSet _expr_list_in_suffix_expr3750 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_suffix_expr3753 = new BitSet(new ulong[]{0x2UL,0x40000151080UL});
		public static readonly BitSet _106_in_suffix_expr3777 = new BitSet(new ulong[]{0x1080080000000UL,0x1A0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_list_in_suffix_expr3779 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_suffix_expr3782 = new BitSet(new ulong[]{0x2UL,0x40000151080UL});
		public static readonly BitSet _NUMBER_in_atom_expr3828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr3833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr3838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_atom_expr3843 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_atom_expr3845 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_atom_expr3850 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_in_atom_expr3852 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_atom_expr3856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_atom_expr3881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item3911 = new BitSet(new ulong[]{0x2UL,0x40010151080UL});
		public static readonly BitSet _76_in_lvalue_item3921 = new BitSet(new ulong[]{0x2UL,0x40010151080UL});
		public static readonly BitSet _80_in_lvalue_item3949 = new BitSet(new ulong[]{0x2UL,0x40010151080UL});
		public static readonly BitSet _84_in_lvalue_item3974 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_item3976 = new BitSet(new ulong[]{0x2UL,0x40010151080UL});
		public static readonly BitSet _82_in_lvalue_item4003 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_item4005 = new BitSet(new ulong[]{0x2UL,0x40010151080UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item4032 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_lvalue_item4035 = new BitSet(new ulong[]{0x1080080000000UL,0xA0000019BA1UL,0x2002UL});
		public static readonly BitSet _expr_list_in_lvalue_item4037 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_lvalue_item4040 = new BitSet(new ulong[]{0x2UL,0x40010151080UL});
		public static readonly BitSet _106_in_lvalue_item4069 = new BitSet(new ulong[]{0x1080080000000UL,0x1A0000019AA1UL,0x2002UL});
		public static readonly BitSet _expr_list_in_lvalue_item4071 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_lvalue_item4074 = new BitSet(new ulong[]{0x2UL,0x40010151080UL});
		public static readonly BitSet _ident_in_lvalue_atom4113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_lvalue4124 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4126 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_lvalue4129 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4131 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_lvalue4135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue4149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_ident4160 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident4163 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_ident4166 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident4168 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _111_in_infix_func4181 = new BitSet(new ulong[]{0x80000000UL,0x20000000000UL});
		public static readonly BitSet _ident_in_infix_func4184 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_infix_func4186 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
