//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-12 18:49:44

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'is'", "'isnt'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int For_Item_Down_To=33;
	public const int For_Item_Each=34;
	public const int For_Item_To=35;
	public const int For_Item_When=36;
	public const int Func_Args=37;
	public const int Func_Def=38;
	public const int Generic_Patameters=39;
	public const int Global_Block=40;
	public const int IDENT=41;
	public const int INDENT=42;
	public const int Ident_List=43;
	public const int Import=44;
	public const int Left_Bracket=45;
	public const int LineComment=46;
	public const int Match_Tuple=47;
	public const int NEWLINE=48;
	public const int NUMBER=49;
	public const int Namespace=50;
	public const int Right_Bracket=51;
	public const int Root=52;
	public const int SP=53;
	public const int STRING=54;
	public const int Stmt_Block=55;
	public const int Stmt_Defer=56;
	public const int Stmt_Finally=57;
	public const int Stmt_For=58;
	public const int Stmt_If=59;
	public const int Stmt_Loop=60;
	public const int Stmt_Return=61;
	public const int Stmt_Try=62;
	public const int Stmt_Typedef=63;
	public const int Stmt_Unless=64;
	public const int Stmt_Until=65;
	public const int Stmt_Using=66;
	public const int Stmt_While=67;
	public const int Type_IDENT=68;
	public const int Type_Ref=69;
	public const int Type_Tuple=70;
	public const int White_Space=71;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:195:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(195, 1);
		try
		{
			// SugarCpp.g:196:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:196:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(196, 4);
			// SugarCpp.g:196:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:196:4: NEWLINE
					{
					DebugLocation(196, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root500);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(196, 13);
			PushFollow(Follow._global_block_in_root503);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(196, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root505);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 196:30: -> ^( Root global_block )
			{
				DebugLocation(196, 33);
				// SugarCpp.g:196:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(196, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(196, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:199:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(199, 1);
		try
		{
			// SugarCpp.g:200:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:200:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(200, 4);
			// SugarCpp.g:200:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==114||(LA3_0>=123 && LA3_0<=124)||LA3_0==128||LA3_0==132||LA3_0==136||LA3_0==143||LA3_0==145||LA3_0==147||LA3_0==152))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:200:5: node ( NEWLINE )+
					{
					DebugLocation(200, 5);
					PushFollow(Follow._node_in_global_block525);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(200, 10);
					// SugarCpp.g:200:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:200:10: NEWLINE
							{
							DebugLocation(200, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block527);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 200:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(200, 24);
				// SugarCpp.g:200:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(200, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(200, 39);
				// SugarCpp.g:200:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(200, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:203:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(203, 1);
		try
		{
			// SugarCpp.g:204:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:204:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(204, 4);
				PushFollow(Follow._func_def_in_node550);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:205:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(205, 4);
				PushFollow(Follow._class_def_in_node555);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:206:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(206, 4);
				PushFollow(Follow._enum_def_in_node560);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:207:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(207, 4);
				PushFollow(Follow._global_alloc_in_node565);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:208:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(208, 4);
				PushFollow(Follow._global_using_in_node570);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:209:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(209, 4);
				PushFollow(Follow._global_typedef_in_node575);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:210:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._import_def_in_node580);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:211:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(211, 4);
				PushFollow(Follow._namespace_def_in_node585);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:214:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args597); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:216:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args602); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:217:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 4);
				PushFollow(Follow._ident_in_attribute_args607);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:220:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(220, 1);
		try
		{
			// SugarCpp.g:221:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==124))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:221:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(221, 4);
				PushFollow(Follow._ident_in_attribute_item618);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(221, 10);
				// SugarCpp.g:221:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==79))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:221:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(221, 11);
					char_literal18=(IToken)Match(input,79,Follow._79_in_attribute_item621);  
					stream_79.Add(char_literal18);

					DebugLocation(221, 15);
					PushFollow(Follow._attribute_args_in_attribute_item623);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(221, 30);
					// SugarCpp.g:221:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==86))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:221:31: ',' attribute_args
							{
							DebugLocation(221, 31);
							char_literal20=(IToken)Match(input,86,Follow._86_in_attribute_item626);  
							stream_86.Add(char_literal20);

							DebugLocation(221, 35);
							PushFollow(Follow._attribute_args_in_attribute_item628);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(221, 52);
					char_literal22=(IToken)Match(input,80,Follow._80_in_attribute_item632);  
					stream_80.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: attribute_args, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 221:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(221, 61);
					// SugarCpp.g:221:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(221, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(221, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(221, 79);
					// SugarCpp.g:221:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(221, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:222:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(222, 4);
				string_literal23=(IToken)Match(input,124,Follow._124_in_attribute_item650);  
				stream_124.Add(string_literal23);

				DebugLocation(222, 12);
				// SugarCpp.g:222:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==79))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:222:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(222, 13);
					char_literal24=(IToken)Match(input,79,Follow._79_in_attribute_item653);  
					stream_79.Add(char_literal24);

					DebugLocation(222, 17);
					PushFollow(Follow._attribute_args_in_attribute_item655);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(222, 32);
					// SugarCpp.g:222:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==86))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:222:33: ',' attribute_args
							{
							DebugLocation(222, 33);
							char_literal26=(IToken)Match(input,86,Follow._86_in_attribute_item658);  
							stream_86.Add(char_literal26);

							DebugLocation(222, 37);
							PushFollow(Follow._attribute_args_in_attribute_item660);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(222, 54);
					char_literal28=(IToken)Match(input,80,Follow._80_in_attribute_item664);  
					stream_80.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 124, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 222:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(222, 63);
					// SugarCpp.g:222:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(222, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(222, 75);
					adaptor.AddChild(root_1, stream_124.NextNode());
					DebugLocation(222, 83);
					// SugarCpp.g:222:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(222, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:225:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:226:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(226, 4);
			// SugarCpp.g:226:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==114))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:226:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(226, 5);
					char_literal29=(IToken)Match(input,114,Follow._114_in_attribute689);  
					stream_114.Add(char_literal29);

					DebugLocation(226, 9);
					PushFollow(Follow._attribute_item_in_attribute691);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(226, 24);
					// SugarCpp.g:226:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==86))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:226:25: ',' attribute_item
							{
							DebugLocation(226, 25);
							char_literal31=(IToken)Match(input,86,Follow._86_in_attribute694);  
							stream_86.Add(char_literal31);

							DebugLocation(226, 29);
							PushFollow(Follow._attribute_item_in_attribute696);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(226, 46);
					char_literal33=(IToken)Match(input,115,Follow._115_in_attribute700);  
					stream_115.Add(char_literal33);

					DebugLocation(226, 50);
					// SugarCpp.g:226:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:226:50: NEWLINE
							{
							DebugLocation(226, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute702);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 226:61: -> ( attribute_item )+
			{
				DebugLocation(226, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(226, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:229:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(229, 1);
		try
		{
			// SugarCpp.g:230:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:230:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(230, 4);
			// SugarCpp.g:230:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==114))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:230:4: attribute
				{
				DebugLocation(230, 4);
				PushFollow(Follow._attribute_in_global_alloc721);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(230, 15);
			PushFollow(Follow._ident_list_in_global_alloc724);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(230, 26);
			// SugarCpp.g:230:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==96))
			{
				alt19 = 1;
			}
			else if ((LA19_0==98))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:230:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(230, 28);
				char_literal37=(IToken)Match(input,96,Follow._96_in_global_alloc728);  
				stream_96.Add(char_literal37);

				DebugLocation(230, 32);
				PushFollow(Follow._type_name_in_global_alloc730);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(230, 42);
				// SugarCpp.g:230:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 98:
				case 104:
					{
					alt17 = 1;
					}
					break;
				case 79:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:230:44: ( '=' | ':=' ) expr
					{
					DebugLocation(230, 44);
					// SugarCpp.g:230:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==104))
					{
						alt15 = 1;
					}
					else if ((LA15_0==98))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:230:45: '='
						{
						DebugLocation(230, 45);
						char_literal39=(IToken)Match(input,104,Follow._104_in_global_alloc735);  
						stream_104.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:230:51: ':='
						{
						DebugLocation(230, 51);
						string_literal40=(IToken)Match(input,98,Follow._98_in_global_alloc739);  
						stream_98.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(230, 57);
					PushFollow(Follow._expr_in_global_alloc742);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: ident_list, attribute, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 230:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(230, 65);
						// SugarCpp.g:230:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(230, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(230, 84);
						// SugarCpp.g:230:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(230, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(230, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(230, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(230, 116);
						// SugarCpp.g:230:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(230, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:231:43: '(' ( expr_list )? ')'
					{
					DebugLocation(231, 43);
					char_literal42=(IToken)Match(input,79,Follow._79_in_global_alloc802);  
					stream_79.Add(char_literal42);

					DebugLocation(231, 47);
					// SugarCpp.g:231:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==72||LA16_0==77||LA16_0==79||LA16_0==81||(LA16_0>=83 && LA16_0<=84)||(LA16_0>=87 && LA16_0<=88)||(LA16_0>=113 && LA16_0<=114)||LA16_0==137||LA16_0==152))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:231:47: expr_list
						{
						DebugLocation(231, 47);
						PushFollow(Follow._expr_list_in_global_alloc804);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(231, 58);
					char_literal44=(IToken)Match(input,80,Follow._80_in_global_alloc807);  
					stream_80.Add(char_literal44);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 231:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(231, 65);
						// SugarCpp.g:231:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(231, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(231, 86);
						// SugarCpp.g:231:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(231, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(231, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(231, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(231, 118);
						// SugarCpp.g:231:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(231, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:232:17: 
					{

					{
					// AST REWRITE
					// elements: attribute, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 232:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(232, 20);
						// SugarCpp.g:232:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(232, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(232, 39);
						// SugarCpp.g:232:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(232, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(232, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(232, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:234:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(234, 10);
				string_literal45=(IToken)Match(input,98,Follow._98_in_global_alloc880);  
				stream_98.Add(string_literal45);

				DebugLocation(234, 15);
				// SugarCpp.g:234:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:234:16: expr ( ',' expr )*
				{
				DebugLocation(234, 16);
				PushFollow(Follow._expr_in_global_alloc883);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(234, 21);
				// SugarCpp.g:234:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==86))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:234:22: ',' expr
						{
						DebugLocation(234, 22);
						char_literal47=(IToken)Match(input,86,Follow._86_in_global_alloc886);  
						stream_86.Add(char_literal47);

						DebugLocation(234, 26);
						PushFollow(Follow._expr_in_global_alloc888);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: 98, ident_list, attribute, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 234:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(234, 37);
					// SugarCpp.g:234:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(234, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_98.NextNode(), root_1);

					DebugLocation(234, 44);
					// SugarCpp.g:234:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(234, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(234, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(234, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(234, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:238:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(238, 1);
		try
		{
			// SugarCpp.g:239:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:239:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(239, 4);
			PushFollow(Follow._stmt_using_in_global_using925);
			stmt_using49=stmt_using();
			PopFollow();

			adaptor.AddChild(root_0, stmt_using49.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:242:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(242, 1);
		try
		{
			// SugarCpp.g:243:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:243:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(243, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef936);
			stmt_typedef50=stmt_typedef();
			PopFollow();

			adaptor.AddChild(root_0, stmt_typedef50.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:246:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken STRING52 = default(IToken);
		IToken NEWLINE53 = default(IToken);
		IToken INDENT54 = default(IToken);
		IToken NEWLINE55 = default(IToken);
		IToken STRING56 = default(IToken);
		IToken NEWLINE57 = default(IToken);
		IToken DEDENT58 = default(IToken);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree STRING52_tree = default(CommonTree);
		CommonTree NEWLINE53_tree = default(CommonTree);
		CommonTree INDENT54_tree = default(CommonTree);
		CommonTree NEWLINE55_tree = default(CommonTree);
		CommonTree STRING56_tree = default(CommonTree);
		CommonTree NEWLINE57_tree = default(CommonTree);
		CommonTree DEDENT58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(246, 1);
		try
		{
			// SugarCpp.g:247:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:247:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(247, 4);
			string_literal51=(IToken)Match(input,132,Follow._132_in_import_def947);  
			stream_132.Add(string_literal51);

			DebugLocation(247, 13);
			// SugarCpp.g:247:13: ( STRING )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==STRING))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:13: STRING
				{
				DebugLocation(247, 13);
				STRING52=(IToken)Match(input,STRING,Follow._STRING_in_import_def949);  
				stream_STRING.Add(STRING52);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(247, 21);
			// SugarCpp.g:247:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			try
			{
				alt25 = dfa25.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(247, 22);
				// SugarCpp.g:247:22: ( NEWLINE )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==NEWLINE))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:247:22: NEWLINE
						{
						DebugLocation(247, 22);
						NEWLINE53=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def953);  
						stream_NEWLINE.Add(NEWLINE53);


						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(247, 31);
				INDENT54=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def956);  
				stream_INDENT.Add(INDENT54);

				DebugLocation(247, 38);
				// SugarCpp.g:247:38: ( NEWLINE )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==NEWLINE))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:247:38: NEWLINE
						{
						DebugLocation(247, 38);
						NEWLINE55=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def958);  
						stream_NEWLINE.Add(NEWLINE55);


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(247, 48);
				// SugarCpp.g:247:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==STRING))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:247:49: STRING ( NEWLINE )+
						{
						DebugLocation(247, 49);
						STRING56=(IToken)Match(input,STRING,Follow._STRING_in_import_def963);  
						stream_STRING.Add(STRING56);

						DebugLocation(247, 56);
						// SugarCpp.g:247:56: ( NEWLINE )+
						int cnt23=0;
						try { DebugEnterSubRule(23);
						while (true)
						{
							int alt23=2;
							try { DebugEnterDecision(23, false);
							int LA23_0 = input.LA(1);

							if ((LA23_0==NEWLINE))
							{
								alt23 = 1;
							}


							} finally { DebugExitDecision(23); }
							switch (alt23)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:247:56: NEWLINE
								{
								DebugLocation(247, 56);
								NEWLINE57=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def965);  
								stream_NEWLINE.Add(NEWLINE57);


								}
								break;

							default:
								if (cnt23 >= 1)
									goto loop23;

								EarlyExitException eee23 = new EarlyExitException( 23, input );
								DebugRecognitionException(eee23);
								throw eee23;
							}
							cnt23++;
						}
						loop23:
							;

						} finally { DebugExitSubRule(23); }


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(247, 67);
				DEDENT58=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def970);  
				stream_DEDENT.Add(DEDENT58);


				}
				break;

			}
			} finally { DebugExitSubRule(25); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 247:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(247, 79);
				// SugarCpp.g:247:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(247, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(247, 88);
				// SugarCpp.g:247:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(247, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:250:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(250, 1);
		try
		{
			// SugarCpp.g:251:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:251:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(251, 4);
			// SugarCpp.g:251:4: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==114))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:251:4: attribute
				{
				DebugLocation(251, 4);
				PushFollow(Follow._attribute_in_enum_def992);
				attribute59=attribute();
				PopFollow();

				stream_attribute.Add(attribute59.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(251, 15);
			string_literal60=(IToken)Match(input,128,Follow._128_in_enum_def995);  
			stream_128.Add(string_literal60);

			DebugLocation(251, 22);
			PushFollow(Follow._ident_in_enum_def997);
			ident61=ident();
			PopFollow();

			stream_ident.Add(ident61.Tree);
			DebugLocation(251, 28);
			char_literal62=(IToken)Match(input,104,Follow._104_in_enum_def999);  
			stream_104.Add(char_literal62);

			DebugLocation(251, 32);
			// SugarCpp.g:251:32: ( ident ( '|' ident )* )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==IDENT))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:251:33: ident ( '|' ident )*
				{
				DebugLocation(251, 33);
				PushFollow(Follow._ident_in_enum_def1002);
				ident63=ident();
				PopFollow();

				stream_ident.Add(ident63.Tree);
				DebugLocation(251, 39);
				// SugarCpp.g:251:39: ( '|' ident )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==149))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:251:40: '|' ident
						{
						DebugLocation(251, 40);
						char_literal64=(IToken)Match(input,149,Follow._149_in_enum_def1005);  
						stream_149.Add(char_literal64);

						DebugLocation(251, 44);
						PushFollow(Follow._ident_in_enum_def1007);
						ident65=ident();
						PopFollow();

						stream_ident.Add(ident65.Tree);

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: ident, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 251:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(251, 57);
				// SugarCpp.g:251:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(251, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(251, 64);
				// SugarCpp.g:251:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(251, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(251, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(251, 81);
				// SugarCpp.g:251:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(251, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(251, 94);
				// SugarCpp.g:251:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(251, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:254:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken INDENT69 = default(IToken);
		IToken NEWLINE70 = default(IToken);
		IToken DEDENT72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block71 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree INDENT69_tree = default(CommonTree);
		CommonTree NEWLINE70_tree = default(CommonTree);
		CommonTree DEDENT72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(254, 1);
		try
		{
			// SugarCpp.g:255:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:255:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(255, 4);
			string_literal66=(IToken)Match(input,136,Follow._136_in_namespace_def1040);  
			stream_136.Add(string_literal66);

			DebugLocation(255, 16);
			PushFollow(Follow._ident_in_namespace_def1042);
			ident67=ident();
			PopFollow();

			stream_ident.Add(ident67.Tree);
			DebugLocation(255, 22);
			// SugarCpp.g:255:22: ( NEWLINE )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:255:22: NEWLINE
					{
					DebugLocation(255, 22);
					NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1044);  
					stream_NEWLINE.Add(NEWLINE68);


					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(255, 31);
			INDENT69=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1047);  
			stream_INDENT.Add(INDENT69);

			DebugLocation(255, 38);
			// SugarCpp.g:255:38: ( NEWLINE )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==NEWLINE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:255:38: NEWLINE
					{
					DebugLocation(255, 38);
					NEWLINE70=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1049);  
					stream_NEWLINE.Add(NEWLINE70);


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(255, 47);
			PushFollow(Follow._global_block_in_namespace_def1052);
			global_block71=global_block();
			PopFollow();

			stream_global_block.Add(global_block71.Tree);
			DebugLocation(255, 60);
			DEDENT72=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1054);  
			stream_DEDENT.Add(DEDENT72);



			{
			// AST REWRITE
			// elements: global_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 255:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(255, 70);
				// SugarCpp.g:255:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(255, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(255, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(255, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:258:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken NEWLINE84 = default(IToken);
		IToken INDENT85 = default(IToken);
		IToken NEWLINE86 = default(IToken);
		IToken DEDENT88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		CommonTree char_literal79_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree NEWLINE84_tree = default(CommonTree);
		CommonTree INDENT85_tree = default(CommonTree);
		CommonTree NEWLINE86_tree = default(CommonTree);
		CommonTree DEDENT88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(258, 1);
		try
		{
			// SugarCpp.g:259:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:259:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(259, 5);
			// SugarCpp.g:259:5: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==114))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:5: attribute
				{
				DebugLocation(259, 5);
				PushFollow(Follow._attribute_in_class_def1076);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(259, 16);
			string_literal74=(IToken)Match(input,123,Follow._123_in_class_def1079);  
			stream_123.Add(string_literal74);

			DebugLocation(259, 24);
			PushFollow(Follow._ident_in_class_def1081);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(259, 30);
			// SugarCpp.g:259:30: ( generic_parameter )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==99))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:31: generic_parameter
				{
				DebugLocation(259, 31);
				PushFollow(Follow._generic_parameter_in_class_def1084);
				generic_parameter76=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(259, 51);
			// SugarCpp.g:259:51: ( '(' func_args ')' )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==79))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:52: '(' func_args ')'
				{
				DebugLocation(259, 52);
				char_literal77=(IToken)Match(input,79,Follow._79_in_class_def1089);  
				stream_79.Add(char_literal77);

				DebugLocation(259, 56);
				PushFollow(Follow._func_args_in_class_def1091);
				func_args78=func_args();
				PopFollow();

				stream_func_args.Add(func_args78.Tree);
				DebugLocation(259, 66);
				char_literal79=(IToken)Match(input,80,Follow._80_in_class_def1093);  
				stream_80.Add(char_literal79);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(259, 72);
			// SugarCpp.g:259:72: ( ':' ident ( ',' ident )* )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==96))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:73: ':' ident ( ',' ident )*
				{
				DebugLocation(259, 73);
				char_literal80=(IToken)Match(input,96,Follow._96_in_class_def1098);  
				stream_96.Add(char_literal80);

				DebugLocation(259, 77);
				PushFollow(Follow._ident_in_class_def1100);
				ident81=ident();
				PopFollow();

				stream_ident.Add(ident81.Tree);
				DebugLocation(259, 83);
				// SugarCpp.g:259:83: ( ',' ident )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==86))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:259:84: ',' ident
						{
						DebugLocation(259, 84);
						char_literal82=(IToken)Match(input,86,Follow._86_in_class_def1103);  
						stream_86.Add(char_literal82);

						DebugLocation(259, 88);
						PushFollow(Follow._ident_in_class_def1105);
						ident83=ident();
						PopFollow();

						stream_ident.Add(ident83.Tree);

						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(259, 98);
			// SugarCpp.g:259:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			try
			{
				alt38 = dfa38.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(259, 99);
				// SugarCpp.g:259:99: ( NEWLINE )+
				int cnt36=0;
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==NEWLINE))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:259:99: NEWLINE
						{
						DebugLocation(259, 99);
						NEWLINE84=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1112);  
						stream_NEWLINE.Add(NEWLINE84);


						}
						break;

					default:
						if (cnt36 >= 1)
							goto loop36;

						EarlyExitException eee36 = new EarlyExitException( 36, input );
						DebugRecognitionException(eee36);
						throw eee36;
					}
					cnt36++;
				}
				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(259, 108);
				INDENT85=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1115);  
				stream_INDENT.Add(INDENT85);

				DebugLocation(259, 115);
				// SugarCpp.g:259:115: ( NEWLINE )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==NEWLINE))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:259:115: NEWLINE
						{
						DebugLocation(259, 115);
						NEWLINE86=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1117);  
						stream_NEWLINE.Add(NEWLINE86);


						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(259, 124);
				PushFollow(Follow._global_block_in_class_def1120);
				global_block87=global_block();
				PopFollow();

				stream_global_block.Add(global_block87.Tree);
				DebugLocation(259, 137);
				DEDENT88=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1122);  
				stream_DEDENT.Add(DEDENT88);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: func_args, generic_parameter, attribute, ident, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 259:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(259, 149);
				// SugarCpp.g:259:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(259, 157);
				// SugarCpp.g:259:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(259, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(259, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(259, 174);
				// SugarCpp.g:259:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(259, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(259, 193);
				// SugarCpp.g:259:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(259, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(259, 204);
				// SugarCpp.g:259:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(259, 205);
					// SugarCpp.g:259:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(259, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(259, 218);
					// SugarCpp.g:259:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(259, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(259, 228);
				// SugarCpp.g:259:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(259, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:262:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);

		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(262, 34);
		try
		{
			// SugarCpp.g:262:13: ( '*' | '[' ']' | '&' )
			int alt39=3;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case 81:
				{
				alt39 = 1;
				}
				break;
			case 114:
				{
				alt39 = 2;
				}
				break;
			case 77:
				{
				alt39 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(262, 15);
				char_literal89=(IToken)Match(input,81,Follow._81_in_type_name_op1163); 
				char_literal89_tree = (CommonTree)adaptor.Create(char_literal89);
				adaptor.AddChild(root_0, char_literal89_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:262:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(262, 21);
				char_literal90=(IToken)Match(input,114,Follow._114_in_type_name_op1167); 
				char_literal90_tree = (CommonTree)adaptor.Create(char_literal90);
				adaptor.AddChild(root_0, char_literal90_tree);
				DebugLocation(262, 25);
				char_literal91=(IToken)Match(input,115,Follow._115_in_type_name_op1169); 
				char_literal91_tree = (CommonTree)adaptor.Create(char_literal91);
				adaptor.AddChild(root_0, char_literal91_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:262:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(262, 31);
				char_literal92=(IToken)Match(input,77,Follow._77_in_type_name_op1173); 
				char_literal92_tree = (CommonTree)adaptor.Create(char_literal92);
				adaptor.AddChild(root_0, char_literal92_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
		}
		DebugLocation(262, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:263:1: type_name : ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal93 = default(IToken);
		IToken string_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(263, 1);
		try
		{
			// SugarCpp.g:264:2: ( ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:264:4: ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(264, 4);
			// SugarCpp.g:264:4: ( 'const' )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==124))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:4: 'const'
				{
				DebugLocation(264, 4);
				string_literal93=(IToken)Match(input,124,Follow._124_in_type_name1182);  
				stream_124.Add(string_literal93);


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(264, 13);
			// SugarCpp.g:264:13: ( 'unsigned' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==145))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:13: 'unsigned'
				{
				DebugLocation(264, 13);
				string_literal94=(IToken)Match(input,145,Follow._145_in_type_name1185);  
				stream_145.Add(string_literal94);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(264, 25);
			PushFollow(Follow._ident_in_type_name1188);
			ident95=ident();
			PopFollow();

			stream_ident.Add(ident95.Tree);
			DebugLocation(264, 31);
			// SugarCpp.g:264:31: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==99))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:32: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(264, 32);
				char_literal96=(IToken)Match(input,99,Follow._99_in_type_name1191);  
				stream_99.Add(char_literal96);

				DebugLocation(264, 36);
				// SugarCpp.g:264:36: ( type_name ( ',' type_name )* )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==IDENT||LA43_0==124||LA43_0==145))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:264:37: type_name ( ',' type_name )*
					{
					DebugLocation(264, 37);
					PushFollow(Follow._type_name_in_type_name1194);
					type_name97=type_name();
					PopFollow();

					stream_type_name.Add(type_name97.Tree);
					DebugLocation(264, 47);
					// SugarCpp.g:264:47: ( ',' type_name )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==86))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:264:48: ',' type_name
							{
							DebugLocation(264, 48);
							char_literal98=(IToken)Match(input,86,Follow._86_in_type_name1197);  
							stream_86.Add(char_literal98);

							DebugLocation(264, 52);
							PushFollow(Follow._type_name_in_type_name1199);
							type_name99=type_name();
							PopFollow();

							stream_type_name.Add(type_name99.Tree);

							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(264, 66);
				char_literal100=(IToken)Match(input,107,Follow._107_in_type_name1205);  
				stream_107.Add(char_literal100);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(264, 72);
			// SugarCpp.g:264:72: ( type_name_op )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==114))
				{
					int LA45_2 = input.LA(2);

					if ((LA45_2==115))
					{
						alt45 = 1;
					}


				}
				else if ((LA45_0==77||LA45_0==81))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:264:72: type_name_op
					{
					DebugLocation(264, 72);
					PushFollow(Follow._type_name_op_in_type_name1209);
					type_name_op101=type_name_op();
					PopFollow();

					stream_type_name_op.Add(type_name_op101.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: 145, 107, 124, ident, 99, type_name_op, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 264:86: -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(264, 89);
				// SugarCpp.g:264:89: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(264, 91);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(264, 102);
				// SugarCpp.g:264:102: ( 'const' )?
				if (stream_124.HasNext)
				{
					DebugLocation(264, 102);
					adaptor.AddChild(root_1, stream_124.NextNode());

				}
				stream_124.Reset();
				DebugLocation(264, 111);
				// SugarCpp.g:264:111: ( 'unsigned' )?
				if (stream_145.HasNext)
				{
					DebugLocation(264, 111);
					adaptor.AddChild(root_1, stream_145.NextNode());

				}
				stream_145.Reset();
				DebugLocation(264, 123);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(264, 129);
				// SugarCpp.g:264:129: ( '<' ( type_name )* '>' )?
				if (stream_107.HasNext||stream_99.HasNext||stream_type_name.HasNext)
				{
					DebugLocation(264, 130);
					adaptor.AddChild(root_1, stream_99.NextNode());
					DebugLocation(264, 134);
					// SugarCpp.g:264:134: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(264, 134);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(264, 145);
					adaptor.AddChild(root_1, stream_107.NextNode());

				}
				stream_107.Reset();
				stream_99.Reset();
				stream_type_name.Reset();
				DebugLocation(264, 152);
				// SugarCpp.g:264:152: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(264, 152);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:267:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 16);
		TraceIn("generic_parameter_inside", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(267, 1);
		try
		{
			// SugarCpp.g:268:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:268:4: ident ( ',' ident )*
			{
			DebugLocation(268, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1249);
			ident102=ident();
			PopFollow();

			stream_ident.Add(ident102.Tree);
			DebugLocation(268, 10);
			// SugarCpp.g:268:10: ( ',' ident )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==86))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:268:11: ',' ident
					{
					DebugLocation(268, 11);
					char_literal103=(IToken)Match(input,86,Follow._86_in_generic_parameter_inside1252);  
					stream_86.Add(char_literal103);

					DebugLocation(268, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1254);
					ident104=ident();
					PopFollow();

					stream_ident.Add(ident104.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 268:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(268, 26);
				// SugarCpp.g:268:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(268, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(268, 47);
				// SugarCpp.g:268:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(268, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 16);
			LeaveRule("generic_parameter_inside", 16);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:271:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 17);
		TraceIn("generic_parameter", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(271, 1);
		try
		{
			// SugarCpp.g:272:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:272:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(272, 4);
			char_literal105=(IToken)Match(input,99,Follow._99_in_generic_parameter1276);  
			stream_99.Add(char_literal105);

			DebugLocation(272, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1278);
			generic_parameter_inside106=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside106.Tree);
			DebugLocation(272, 33);
			char_literal107=(IToken)Match(input,107,Follow._107_in_generic_parameter1280);  
			stream_107.Add(char_literal107);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 272:37: -> generic_parameter_inside
			{
				DebugLocation(272, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 17);
			LeaveRule("generic_parameter", 17);
			LeaveRule_generic_parameter();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:275:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 18);
		TraceIn("func_args", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(275, 1);
		try
		{
			// SugarCpp.g:276:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:276:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(276, 4);
			PushFollow(Follow._func_args_item_in_func_args1295);
			func_args_item108=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item108.Tree);
			DebugLocation(276, 19);
			// SugarCpp.g:276:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==86))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:20: ',' func_args_item
					{
					DebugLocation(276, 20);
					char_literal109=(IToken)Match(input,86,Follow._86_in_func_args1298);  
					stream_86.Add(char_literal109);

					DebugLocation(276, 24);
					PushFollow(Follow._func_args_item_in_func_args1300);
					func_args_item110=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item110.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 276:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(276, 44);
				// SugarCpp.g:276:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(276, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(276, 56);
				// SugarCpp.g:276:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(276, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 18);
			LeaveRule("func_args", 18);
			LeaveRule_func_args();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:279:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 19);
		TraceIn("func_args_item", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken string_literal115 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken string_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree string_literal115_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree string_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(279, 1);
		try
		{
			// SugarCpp.g:280:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt51=2;
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==IDENT))
			{
				alt51 = 1;
			}
			else if ((LA51_0==98))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:280:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(280, 4);
				PushFollow(Follow._ident_list_in_func_args_item1322);
				ident_list111=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list111.Tree);
				DebugLocation(280, 15);
				char_literal112=(IToken)Match(input,96,Follow._96_in_func_args_item1324);  
				stream_96.Add(char_literal112);

				DebugLocation(280, 19);
				PushFollow(Follow._type_name_in_func_args_item1326);
				type_name113=type_name();
				PopFollow();

				stream_type_name.Add(type_name113.Tree);
				DebugLocation(280, 29);
				// SugarCpp.g:280:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt50=3;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				switch (input.LA(1))
				{
				case 98:
				case 104:
					{
					alt50 = 1;
					}
					break;
				case 79:
					{
					alt50 = 2;
					}
					break;
				case 80:
				case 86:
					{
					alt50 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:31: ( '=' | ':=' ) expr
					{
					DebugLocation(280, 31);
					// SugarCpp.g:280:31: ( '=' | ':=' )
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==104))
					{
						alt48 = 1;
					}
					else if ((LA48_0==98))
					{
						alt48 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:280:32: '='
						{
						DebugLocation(280, 32);
						char_literal114=(IToken)Match(input,104,Follow._104_in_func_args_item1331);  
						stream_104.Add(char_literal114);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:280:38: ':='
						{
						DebugLocation(280, 38);
						string_literal115=(IToken)Match(input,98,Follow._98_in_func_args_item1335);  
						stream_98.Add(string_literal115);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(280, 44);
					PushFollow(Follow._expr_in_func_args_item1338);
					expr116=expr();
					PopFollow();

					stream_expr.Add(expr116.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 280:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(280, 53);
						// SugarCpp.g:280:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(280, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(280, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(280, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(280, 93);
						// SugarCpp.g:280:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(280, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:281:33: '(' ( expr_list )? ')'
					{
					DebugLocation(281, 33);
					char_literal117=(IToken)Match(input,79,Follow._79_in_func_args_item1386);  
					stream_79.Add(char_literal117);

					DebugLocation(281, 37);
					// SugarCpp.g:281:37: ( expr_list )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, false);
					int LA49_0 = input.LA(1);

					if ((LA49_0==IDENT||LA49_0==NUMBER||LA49_0==STRING||LA49_0==72||LA49_0==77||LA49_0==79||LA49_0==81||(LA49_0>=83 && LA49_0<=84)||(LA49_0>=87 && LA49_0<=88)||(LA49_0>=113 && LA49_0<=114)||LA49_0==137||LA49_0==152))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:281:37: expr_list
						{
						DebugLocation(281, 37);
						PushFollow(Follow._expr_list_in_func_args_item1388);
						expr_list118=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list118.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(281, 48);
					char_literal119=(IToken)Match(input,80,Follow._80_in_func_args_item1391);  
					stream_80.Add(char_literal119);



					{
					// AST REWRITE
					// elements: expr_list, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 281:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(281, 56);
						// SugarCpp.g:281:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(281, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(281, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(281, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(281, 98);
						// SugarCpp.g:281:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(281, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:282:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 282:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(282, 18);
						// SugarCpp.g:282:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(282, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(282, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(282, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:284:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(284, 8);
				string_literal120=(IToken)Match(input,98,Follow._98_in_func_args_item1448); 
				string_literal120_tree = (CommonTree)adaptor.Create(string_literal120);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal120_tree, root_0);
				DebugLocation(284, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1452);
				modify_expr121=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr121.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 19);
			LeaveRule("func_args_item", 19);
			LeaveRule_func_args_item();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:287:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 20);
		TraceIn("func_def", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken NEWLINE130 = default(IToken);
		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree NEWLINE130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(287, 4);
		try
		{
			// SugarCpp.g:288:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:288:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(288, 4);
			// SugarCpp.g:288:4: ( attribute )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==114))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:4: attribute
				{
				DebugLocation(288, 4);
				PushFollow(Follow._attribute_in_func_def1463);
				attribute122=attribute();
				PopFollow();

				stream_attribute.Add(attribute122.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(288, 15);
			// SugarCpp.g:288:15: ( type_name )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:15: type_name
				{
				DebugLocation(288, 15);
				PushFollow(Follow._type_name_in_func_def1466);
				type_name123=type_name();
				PopFollow();

				stream_type_name.Add(type_name123.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(288, 26);
			// SugarCpp.g:288:26: ( '~' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==152))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:26: '~'
				{
				DebugLocation(288, 26);
				char_literal124=(IToken)Match(input,152,Follow._152_in_func_def1469);  
				stream_152.Add(char_literal124);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(288, 31);
			PushFollow(Follow._ident_in_func_def1472);
			ident125=ident();
			PopFollow();

			stream_ident.Add(ident125.Tree);
			DebugLocation(288, 37);
			// SugarCpp.g:288:37: ( generic_parameter )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==99))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:37: generic_parameter
				{
				DebugLocation(288, 37);
				PushFollow(Follow._generic_parameter_in_func_def1474);
				generic_parameter126=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(288, 56);
			char_literal127=(IToken)Match(input,79,Follow._79_in_func_def1477);  
			stream_79.Add(char_literal127);

			DebugLocation(288, 60);
			// SugarCpp.g:288:60: ( func_args )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==98))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:60: func_args
				{
				DebugLocation(288, 60);
				PushFollow(Follow._func_args_in_func_def1479);
				func_args128=func_args();
				PopFollow();

				stream_func_args.Add(func_args128.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(288, 71);
			char_literal129=(IToken)Match(input,80,Follow._80_in_func_def1482);  
			stream_80.Add(char_literal129);

			DebugLocation(288, 75);
			// SugarCpp.g:288:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==NEWLINE))
			{
				alt58 = 1;
			}
			else if ((LA58_0==104))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(288, 76);
				// SugarCpp.g:288:76: ( NEWLINE )+
				int cnt57=0;
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==NEWLINE))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:288:76: NEWLINE
						{
						DebugLocation(288, 76);
						NEWLINE130=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1485);  
						stream_NEWLINE.Add(NEWLINE130);


						}
						break;

					default:
						if (cnt57 >= 1)
							goto loop57;

						EarlyExitException eee57 = new EarlyExitException( 57, input );
						DebugRecognitionException(eee57);
						throw eee57;
					}
					cnt57++;
				}
				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(288, 85);
				PushFollow(Follow._stmt_block_in_func_def1488);
				stmt_block131=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block131.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, attribute, func_args, ident, type_name, 152, generic_parameter
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 288:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(288, 99);
					// SugarCpp.g:288:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(288, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(288, 110);
					// SugarCpp.g:288:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(288, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(288, 121);
					// SugarCpp.g:288:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(288, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(288, 132);
					// SugarCpp.g:288:132: ( '~' )?
					if (stream_152.HasNext)
					{
						DebugLocation(288, 132);
						adaptor.AddChild(root_1, stream_152.NextNode());

					}
					stream_152.Reset();
					DebugLocation(288, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(288, 143);
					// SugarCpp.g:288:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(288, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(288, 162);
					// SugarCpp.g:288:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(288, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(288, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:289:23: '=' expr
				{
				DebugLocation(289, 23);
				char_literal132=(IToken)Match(input,104,Follow._104_in_func_def1537);  
				stream_104.Add(char_literal132);

				DebugLocation(289, 27);
				PushFollow(Follow._expr_in_func_def1539);
				expr133=expr();
				PopFollow();

				stream_expr.Add(expr133.Tree);


				{
				// AST REWRITE
				// elements: ident, generic_parameter, expr, func_args, type_name, attribute, 152
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 289:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(289, 36);
					// SugarCpp.g:289:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(289, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(289, 47);
					// SugarCpp.g:289:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(289, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(289, 58);
					// SugarCpp.g:289:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(289, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(289, 69);
					// SugarCpp.g:289:69: ( '~' )?
					if (stream_152.HasNext)
					{
						DebugLocation(289, 69);
						adaptor.AddChild(root_1, stream_152.NextNode());

					}
					stream_152.Reset();
					DebugLocation(289, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(289, 80);
					// SugarCpp.g:289:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(289, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(289, 99);
					// SugarCpp.g:289:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(289, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(289, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 20);
			LeaveRule("func_def", 20);
			LeaveRule_func_def();
		}
		DebugLocation(290, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:292:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 21);
		TraceIn("stmt_block", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT134 = default(IToken);
		IToken NEWLINE135 = default(IToken);
		IToken NEWLINE137 = default(IToken);
		IToken DEDENT138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT134_tree = default(CommonTree);
		CommonTree NEWLINE135_tree = default(CommonTree);
		CommonTree NEWLINE137_tree = default(CommonTree);
		CommonTree DEDENT138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(292, 1);
		try
		{
			// SugarCpp.g:293:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:293:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(293, 4);
			INDENT134=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1580);  
			stream_INDENT.Add(INDENT134);

			DebugLocation(293, 11);
			// SugarCpp.g:293:11: ( NEWLINE )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==NEWLINE))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:293:11: NEWLINE
					{
					DebugLocation(293, 11);
					NEWLINE135=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1582);  
					stream_NEWLINE.Add(NEWLINE135);


					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(293, 21);
			// SugarCpp.g:293:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==79||LA61_0==113||LA61_0==125||(LA61_0>=129 && LA61_0<=131)||LA61_0==135||LA61_0==139||(LA61_0>=142 && LA61_0<=144)||(LA61_0>=146 && LA61_0<=148)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:293:22: stmt ( NEWLINE )+
					{
					DebugLocation(293, 22);
					PushFollow(Follow._stmt_in_stmt_block1587);
					stmt136=stmt();
					PopFollow();

					stream_stmt.Add(stmt136.Tree);
					DebugLocation(293, 27);
					// SugarCpp.g:293:27: ( NEWLINE )+
					int cnt60=0;
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==NEWLINE))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:293:27: NEWLINE
							{
							DebugLocation(293, 27);
							NEWLINE137=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1589);  
							stream_NEWLINE.Add(NEWLINE137);


							}
							break;

						default:
							if (cnt60 >= 1)
								goto loop60;

							EarlyExitException eee60 = new EarlyExitException( 60, input );
							DebugRecognitionException(eee60);
							throw eee60;
						}
						cnt60++;
					}
					loop60:
						;

					} finally { DebugExitSubRule(60); }


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(293, 38);
			DEDENT138=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1594);  
			stream_DEDENT.Add(DEDENT138);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 293:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(293, 48);
				// SugarCpp.g:293:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(293, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(293, 61);
				// SugarCpp.g:293:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(293, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 21);
			LeaveRule("stmt_block", 21);
			LeaveRule_stmt_block();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:296:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 22);
		TraceIn("stmt", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer144 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(296, 1);
		try
		{
			// SugarCpp.g:297:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_defer )
			int alt62=6;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 79:
			case 113:
			case 139:
			case 143:
			case 147:
				{
				alt62 = 1;
				}
				break;
			case 131:
			case 144:
				{
				alt62 = 2;
				}
				break;
			case 130:
				{
				alt62 = 3;
				}
				break;
			case 135:
			case 146:
			case 148:
				{
				alt62 = 4;
				}
				break;
			case 142:
				{
				alt62 = 5;
				}
				break;
			case 125:
			case 129:
				{
				alt62 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:297:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(297, 4);
				PushFollow(Follow._stmt_expr_in_stmt1614);
				stmt_expr139=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr139.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:298:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(298, 4);
				PushFollow(Follow._stmt_if_in_stmt1619);
				stmt_if140=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if140.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:299:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(299, 4);
				PushFollow(Follow._stmt_for_in_stmt1624);
				stmt_for141=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for141.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:300:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(300, 4);
				PushFollow(Follow._stmt_while_in_stmt1629);
				stmt_while142=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while142.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:301:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(301, 4);
				PushFollow(Follow._stmt_try_in_stmt1634);
				stmt_try143=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try143.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:302:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(302, 4);
				PushFollow(Follow._stmt_defer_in_stmt1639);
				stmt_defer144=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer144.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 22);
			LeaveRule("stmt", 22);
			LeaveRule_stmt();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:305:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 23);
		TraceIn("stmt_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal145 = default(IToken);
		IToken string_literal147 = default(IToken);
		IToken string_literal149 = default(IToken);
		IToken string_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr152 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal145_tree = default(CommonTree);
		CommonTree string_literal147_tree = default(CommonTree);
		CommonTree string_literal149_tree = default(CommonTree);
		CommonTree string_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(305, 1);
		try
		{
			// SugarCpp.g:306:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:306:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(306, 4);
			// SugarCpp.g:306:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:306:5: a= stmt_expr_item
			{
			DebugLocation(306, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1653);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 306:22: -> $a
			{
				DebugLocation(306, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(306, 29);
			// SugarCpp.g:306:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=5;
				try { DebugEnterDecision(63, false);
				switch (input.LA(1))
				{
				case 131:
					{
					alt63 = 1;
					}
					break;
				case 144:
					{
					alt63 = 2;
					}
					break;
				case 148:
					{
					alt63 = 3;
					}
					break;
				case 146:
					{
					alt63 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:306:31: 'if' expr
					{
					DebugLocation(306, 31);
					string_literal145=(IToken)Match(input,131,Follow._131_in_stmt_expr1663);  
					stream_131.Add(string_literal145);

					DebugLocation(306, 36);
					PushFollow(Follow._expr_in_stmt_expr1665);
					expr146=expr();
					PopFollow();

					stream_expr.Add(expr146.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 306:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(306, 44);
						// SugarCpp.g:306:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(306, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(306, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(306, 59);
						// SugarCpp.g:306:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(306, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(306, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:307:13: 'unless' expr
					{
					DebugLocation(307, 13);
					string_literal147=(IToken)Match(input,144,Follow._144_in_stmt_expr1694);  
					stream_144.Add(string_literal147);

					DebugLocation(307, 22);
					PushFollow(Follow._expr_in_stmt_expr1696);
					expr148=expr();
					PopFollow();

					stream_expr.Add(expr148.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 307:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(307, 30);
						// SugarCpp.g:307:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(307, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(307, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(307, 49);
						// SugarCpp.g:307:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(307, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(307, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:308:13: 'while' expr
					{
					DebugLocation(308, 13);
					string_literal149=(IToken)Match(input,148,Follow._148_in_stmt_expr1725);  
					stream_148.Add(string_literal149);

					DebugLocation(308, 21);
					PushFollow(Follow._expr_in_stmt_expr1727);
					expr150=expr();
					PopFollow();

					stream_expr.Add(expr150.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 308:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(308, 29);
						// SugarCpp.g:308:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(308, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(308, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(308, 47);
						// SugarCpp.g:308:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(308, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(308, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:309:13: 'until' expr
					{
					DebugLocation(309, 13);
					string_literal151=(IToken)Match(input,146,Follow._146_in_stmt_expr1756);  
					stream_146.Add(string_literal151);

					DebugLocation(309, 21);
					PushFollow(Follow._expr_in_stmt_expr1758);
					expr152=expr();
					PopFollow();

					stream_expr.Add(expr152.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 309:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(309, 29);
						// SugarCpp.g:309:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(309, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(309, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(309, 47);
						// SugarCpp.g:309:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(309, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(309, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 23);
			LeaveRule("stmt_expr", 23);
			LeaveRule_stmt_expr();
		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:318:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 24);
		TraceIn("stmt_expr_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(318, 1);
		try
		{
			// SugarCpp.g:319:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt64=5;
			try { DebugEnterDecision(64, false);
			try
			{
				alt64 = dfa64.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:319:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(319, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item1809);
				stmt_alloc153=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc153.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:320:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(320, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item1814);
				stmt_return154=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return154.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:321:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(321, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item1819);
				stmt_using155=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using155.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:322:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(322, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item1824);
				stmt_typedef156=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef156.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:323:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(323, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item1829);
				stmt_modify157=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify157.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 24);
			LeaveRule("stmt_expr_item", 24);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:326:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 25);
		TraceIn("stmt_defer", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal158 = default(IToken);
		IToken string_literal160 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt161 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal158_tree = default(CommonTree);
		CommonTree string_literal160_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(326, 1);
		try
		{
			// SugarCpp.g:327:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt65=2;
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==125))
			{
				alt65 = 1;
			}
			else if ((LA65_0==129))
			{
				alt65 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:327:4: 'defer' stmt
				{
				DebugLocation(327, 4);
				string_literal158=(IToken)Match(input,125,Follow._125_in_stmt_defer1840);  
				stream_125.Add(string_literal158);

				DebugLocation(327, 12);
				PushFollow(Follow._stmt_in_stmt_defer1842);
				stmt159=stmt();
				PopFollow();

				stream_stmt.Add(stmt159.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 327:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(327, 20);
					// SugarCpp.g:327:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(327, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(327, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:328:4: 'finally' stmt
				{
				DebugLocation(328, 4);
				string_literal160=(IToken)Match(input,129,Follow._129_in_stmt_defer1855);  
				stream_129.Add(string_literal160);

				DebugLocation(328, 14);
				PushFollow(Follow._stmt_in_stmt_defer1857);
				stmt161=stmt();
				PopFollow();

				stream_stmt.Add(stmt161.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 328:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(328, 22);
					// SugarCpp.g:328:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(328, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(328, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 25);
			LeaveRule("stmt_defer", 25);
			LeaveRule_stmt_defer();
		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:331:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 26);
		TraceIn("stmt_typedef", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal162 = default(IToken);
		IToken char_literal164 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name165 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal162_tree = default(CommonTree);
		CommonTree char_literal164_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(331, 1);
		try
		{
			// SugarCpp.g:332:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:332:4: 'typedef' ident '=' type_name
			{
			DebugLocation(332, 4);
			string_literal162=(IToken)Match(input,143,Follow._143_in_stmt_typedef1876);  
			stream_143.Add(string_literal162);

			DebugLocation(332, 14);
			PushFollow(Follow._ident_in_stmt_typedef1878);
			ident163=ident();
			PopFollow();

			stream_ident.Add(ident163.Tree);
			DebugLocation(332, 20);
			char_literal164=(IToken)Match(input,104,Follow._104_in_stmt_typedef1880);  
			stream_104.Add(char_literal164);

			DebugLocation(332, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1882);
			type_name165=type_name();
			PopFollow();

			stream_type_name.Add(type_name165.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 332:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(332, 37);
				// SugarCpp.g:332:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(332, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(332, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(332, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 26);
			LeaveRule("stmt_typedef", 26);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:335:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 27);
		TraceIn("stmt_using_item", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal167 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident166 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal167_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(335, 36);
		try
		{
			// SugarCpp.g:335:16: ( ident | 'namespace' )
			int alt66=2;
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==IDENT))
			{
				alt66 = 1;
			}
			else if ((LA66_0==136))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:335:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(335, 18);
				PushFollow(Follow._ident_in_stmt_using_item1901);
				ident166=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident166.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:335:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(335, 26);
				string_literal167=(IToken)Match(input,136,Follow._136_in_stmt_using_item1905); 
				string_literal167_tree = (CommonTree)adaptor.Create(string_literal167);
				adaptor.AddChild(root_0, string_literal167_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 27);
			LeaveRule("stmt_using_item", 27);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(335, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:336:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 28);
		TraceIn("stmt_using", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(336, 1);
		try
		{
			// SugarCpp.g:337:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:337:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(337, 4);
			string_literal168=(IToken)Match(input,147,Follow._147_in_stmt_using1913);  
			stream_147.Add(string_literal168);

			DebugLocation(337, 12);
			// SugarCpp.g:337:12: ( stmt_using_item )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==IDENT||LA67_0==136))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:337:12: stmt_using_item
					{
					DebugLocation(337, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1915);
					stmt_using_item169=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item169.Tree);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 337:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(337, 32);
				// SugarCpp.g:337:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(337, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(337, 45);
				// SugarCpp.g:337:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(337, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 28);
			LeaveRule("stmt_using", 28);
			LeaveRule_stmt_using();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:340:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 29);
		TraceIn("stmt_return", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal170 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr171 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal170_tree = default(CommonTree);
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(340, 1);
		try
		{
			// SugarCpp.g:341:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:341:4: 'return' ( expr )?
			{
			DebugLocation(341, 4);
			string_literal170=(IToken)Match(input,139,Follow._139_in_stmt_return1936);  
			stream_139.Add(string_literal170);

			DebugLocation(341, 13);
			// SugarCpp.g:341:13: ( expr )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==IDENT||LA68_0==NUMBER||LA68_0==STRING||LA68_0==72||LA68_0==77||LA68_0==79||LA68_0==81||(LA68_0>=83 && LA68_0<=84)||(LA68_0>=87 && LA68_0<=88)||(LA68_0>=113 && LA68_0<=114)||LA68_0==137||LA68_0==152))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:341:13: expr
				{
				DebugLocation(341, 13);
				PushFollow(Follow._expr_in_stmt_return1938);
				expr171=expr();
				PopFollow();

				stream_expr.Add(expr171.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 341:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(341, 22);
				// SugarCpp.g:341:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(341, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(341, 36);
				// SugarCpp.g:341:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(341, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 29);
			LeaveRule("stmt_return", 29);
			LeaveRule_stmt_return();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:344:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 30);
		TraceIn("stmt_if", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal172 = default(IToken);
		IToken NEWLINE174 = default(IToken);
		IToken NEWLINE176 = default(IToken);
		IToken string_literal177 = default(IToken);
		IToken string_literal179 = default(IToken);
		IToken string_literal181 = default(IToken);
		IToken NEWLINE183 = default(IToken);
		IToken NEWLINE185 = default(IToken);
		IToken string_literal186 = default(IToken);
		IToken string_literal188 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block187 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt189 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal172_tree = default(CommonTree);
		CommonTree NEWLINE174_tree = default(CommonTree);
		CommonTree NEWLINE176_tree = default(CommonTree);
		CommonTree string_literal177_tree = default(CommonTree);
		CommonTree string_literal179_tree = default(CommonTree);
		CommonTree string_literal181_tree = default(CommonTree);
		CommonTree NEWLINE183_tree = default(CommonTree);
		CommonTree NEWLINE185_tree = default(CommonTree);
		CommonTree string_literal186_tree = default(CommonTree);
		CommonTree string_literal188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(344, 1);
		try
		{
			// SugarCpp.g:345:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) )
			int alt77=2;
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==131))
			{
				alt77 = 1;
			}
			else if ((LA77_0==144))
			{
				alt77 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:345:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(345, 4);
				string_literal172=(IToken)Match(input,131,Follow._131_in_stmt_if1959);  
				stream_131.Add(string_literal172);

				DebugLocation(345, 9);
				PushFollow(Follow._expr_in_stmt_if1961);
				expr173=expr();
				PopFollow();

				stream_expr.Add(expr173.Tree);
				DebugLocation(345, 14);
				// SugarCpp.g:345:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==NEWLINE))
				{
					alt72 = 1;
				}
				else if ((LA72_0==140))
				{
					alt72 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:345:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )?
					{
					DebugLocation(345, 15);
					// SugarCpp.g:345:15: ( NEWLINE )+
					int cnt69=0;
					try { DebugEnterSubRule(69);
					while (true)
					{
						int alt69=2;
						try { DebugEnterDecision(69, false);
						int LA69_0 = input.LA(1);

						if ((LA69_0==NEWLINE))
						{
							alt69 = 1;
						}


						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:345:15: NEWLINE
							{
							DebugLocation(345, 15);
							NEWLINE174=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1964);  
							stream_NEWLINE.Add(NEWLINE174);


							}
							break;

						default:
							if (cnt69 >= 1)
								goto loop69;

							EarlyExitException eee69 = new EarlyExitException( 69, input );
							DebugRecognitionException(eee69);
							throw eee69;
						}
						cnt69++;
					}
					loop69:
						;

					} finally { DebugExitSubRule(69); }

					DebugLocation(345, 24);
					PushFollow(Follow._stmt_block_in_stmt_if1967);
					stmt_block175=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block175.Tree);
					DebugLocation(345, 35);
					// SugarCpp.g:345:35: ( ( NEWLINE )* 'else' stmt_block )?
					int alt71=2;
					try { DebugEnterSubRule(71);
					try { DebugEnterDecision(71, false);
					try
					{
						alt71 = dfa71.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(71); }
					switch (alt71)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:345:36: ( NEWLINE )* 'else' stmt_block
						{
						DebugLocation(345, 36);
						// SugarCpp.g:345:36: ( NEWLINE )*
						try { DebugEnterSubRule(70);
						while (true)
						{
							int alt70=2;
							try { DebugEnterDecision(70, false);
							int LA70_0 = input.LA(1);

							if ((LA70_0==NEWLINE))
							{
								alt70 = 1;
							}


							} finally { DebugExitDecision(70); }
							switch ( alt70 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:345:36: NEWLINE
								{
								DebugLocation(345, 36);
								NEWLINE176=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1970);  
								stream_NEWLINE.Add(NEWLINE176);


								}
								break;

							default:
								goto loop70;
							}
						}

						loop70:
							;

						} finally { DebugExitSubRule(70); }

						DebugLocation(345, 45);
						string_literal177=(IToken)Match(input,127,Follow._127_in_stmt_if1973);  
						stream_127.Add(string_literal177);

						DebugLocation(345, 52);
						PushFollow(Follow._stmt_block_in_stmt_if1975);
						stmt_block178=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block178.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(71); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 345:65: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(345, 68);
						// SugarCpp.g:345:68: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(345, 70);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(345, 78);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(345, 83);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(345, 94);
						// SugarCpp.g:345:94: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(345, 94);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:346:16: 'then' stmt
					{
					DebugLocation(346, 16);
					string_literal179=(IToken)Match(input,140,Follow._140_in_stmt_if2007);  
					stream_140.Add(string_literal179);

					DebugLocation(346, 23);
					PushFollow(Follow._stmt_in_stmt_if2009);
					stmt180=stmt();
					PopFollow();

					stream_stmt.Add(stmt180.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 346:28: -> ^( Stmt_If expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(346, 31);
						// SugarCpp.g:346:31: ^( Stmt_If expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(346, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(346, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(346, 46);
						// SugarCpp.g:346:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(346, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(346, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(72); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:348:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(348, 4);
				string_literal181=(IToken)Match(input,144,Follow._144_in_stmt_if2034);  
				stream_144.Add(string_literal181);

				DebugLocation(348, 13);
				PushFollow(Follow._expr_in_stmt_if2036);
				expr182=expr();
				PopFollow();

				stream_expr.Add(expr182.Tree);
				DebugLocation(348, 18);
				// SugarCpp.g:348:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				int alt76=2;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==NEWLINE))
				{
					alt76 = 1;
				}
				else if ((LA76_0==140))
				{
					alt76 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:348:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )?
					{
					DebugLocation(348, 19);
					// SugarCpp.g:348:19: ( NEWLINE )+
					int cnt73=0;
					try { DebugEnterSubRule(73);
					while (true)
					{
						int alt73=2;
						try { DebugEnterDecision(73, false);
						int LA73_0 = input.LA(1);

						if ((LA73_0==NEWLINE))
						{
							alt73 = 1;
						}


						} finally { DebugExitDecision(73); }
						switch (alt73)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:348:19: NEWLINE
							{
							DebugLocation(348, 19);
							NEWLINE183=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2039);  
							stream_NEWLINE.Add(NEWLINE183);


							}
							break;

						default:
							if (cnt73 >= 1)
								goto loop73;

							EarlyExitException eee73 = new EarlyExitException( 73, input );
							DebugRecognitionException(eee73);
							throw eee73;
						}
						cnt73++;
					}
					loop73:
						;

					} finally { DebugExitSubRule(73); }

					DebugLocation(348, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2042);
					stmt_block184=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block184.Tree);
					DebugLocation(348, 39);
					// SugarCpp.g:348:39: ( ( NEWLINE )* 'else' stmt_block )?
					int alt75=2;
					try { DebugEnterSubRule(75);
					try { DebugEnterDecision(75, false);
					try
					{
						alt75 = dfa75.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:348:40: ( NEWLINE )* 'else' stmt_block
						{
						DebugLocation(348, 40);
						// SugarCpp.g:348:40: ( NEWLINE )*
						try { DebugEnterSubRule(74);
						while (true)
						{
							int alt74=2;
							try { DebugEnterDecision(74, false);
							int LA74_0 = input.LA(1);

							if ((LA74_0==NEWLINE))
							{
								alt74 = 1;
							}


							} finally { DebugExitDecision(74); }
							switch ( alt74 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:348:40: NEWLINE
								{
								DebugLocation(348, 40);
								NEWLINE185=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2045);  
								stream_NEWLINE.Add(NEWLINE185);


								}
								break;

							default:
								goto loop74;
							}
						}

						loop74:
							;

						} finally { DebugExitSubRule(74); }

						DebugLocation(348, 49);
						string_literal186=(IToken)Match(input,127,Follow._127_in_stmt_if2048);  
						stream_127.Add(string_literal186);

						DebugLocation(348, 56);
						PushFollow(Follow._stmt_block_in_stmt_if2050);
						stmt_block187=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block187.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(75); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 348:69: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(348, 72);
						// SugarCpp.g:348:72: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(348, 74);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(348, 86);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(348, 91);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(348, 102);
						// SugarCpp.g:348:102: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(348, 102);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:349:20: 'then' stmt
					{
					DebugLocation(349, 20);
					string_literal188=(IToken)Match(input,140,Follow._140_in_stmt_if2086);  
					stream_140.Add(string_literal188);

					DebugLocation(349, 27);
					PushFollow(Follow._stmt_in_stmt_if2088);
					stmt189=stmt();
					PopFollow();

					stream_stmt.Add(stmt189.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 349:32: -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(349, 35);
						// SugarCpp.g:349:35: ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(349, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(349, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(349, 54);
						// SugarCpp.g:349:54: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(349, 56);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(349, 67);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(76); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 30);
			LeaveRule("stmt_if", 30);
			LeaveRule_stmt_if();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:353:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 31);
		TraceIn("stmt_while", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal190 = default(IToken);
		IToken NEWLINE192 = default(IToken);
		IToken string_literal194 = default(IToken);
		IToken string_literal196 = default(IToken);
		IToken NEWLINE198 = default(IToken);
		IToken string_literal200 = default(IToken);
		IToken string_literal202 = default(IToken);
		IToken NEWLINE204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block193 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block205 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal190_tree = default(CommonTree);
		CommonTree NEWLINE192_tree = default(CommonTree);
		CommonTree string_literal194_tree = default(CommonTree);
		CommonTree string_literal196_tree = default(CommonTree);
		CommonTree NEWLINE198_tree = default(CommonTree);
		CommonTree string_literal200_tree = default(CommonTree);
		CommonTree string_literal202_tree = default(CommonTree);
		CommonTree NEWLINE204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(353, 1);
		try
		{
			// SugarCpp.g:354:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt84=3;
			try { DebugEnterDecision(84, false);
			switch (input.LA(1))
			{
			case 148:
				{
				alt84 = 1;
				}
				break;
			case 146:
				{
				alt84 = 2;
				}
				break;
			case 135:
				{
				alt84 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(354, 4);
				string_literal190=(IToken)Match(input,148,Follow._148_in_stmt_while2123);  
				stream_148.Add(string_literal190);

				DebugLocation(354, 12);
				PushFollow(Follow._expr_in_stmt_while2125);
				expr191=expr();
				PopFollow();

				stream_expr.Add(expr191.Tree);
				DebugLocation(354, 17);
				// SugarCpp.g:354:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==NEWLINE))
				{
					alt79 = 1;
				}
				else if ((LA79_0==140))
				{
					alt79 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:354:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(354, 19);
					// SugarCpp.g:354:19: ( NEWLINE )+
					int cnt78=0;
					try { DebugEnterSubRule(78);
					while (true)
					{
						int alt78=2;
						try { DebugEnterDecision(78, false);
						int LA78_0 = input.LA(1);

						if ((LA78_0==NEWLINE))
						{
							alt78 = 1;
						}


						} finally { DebugExitDecision(78); }
						switch (alt78)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:354:19: NEWLINE
							{
							DebugLocation(354, 19);
							NEWLINE192=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2129);  
							stream_NEWLINE.Add(NEWLINE192);


							}
							break;

						default:
							if (cnt78 >= 1)
								goto loop78;

							EarlyExitException eee78 = new EarlyExitException( 78, input );
							DebugRecognitionException(eee78);
							throw eee78;
						}
						cnt78++;
					}
					loop78:
						;

					} finally { DebugExitSubRule(78); }

					DebugLocation(354, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2132);
					stmt_block193=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block193.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 354:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(354, 42);
						// SugarCpp.g:354:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(354, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(354, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(354, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:355:13: 'then' stmt
					{
					DebugLocation(355, 13);
					string_literal194=(IToken)Match(input,140,Follow._140_in_stmt_while2156);  
					stream_140.Add(string_literal194);

					DebugLocation(355, 20);
					PushFollow(Follow._stmt_in_stmt_while2158);
					stmt195=stmt();
					PopFollow();

					stream_stmt.Add(stmt195.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 355:25: -> ^( Stmt_While expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(355, 28);
						// SugarCpp.g:355:28: ^( Stmt_While expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(355, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(355, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(355, 46);
						// SugarCpp.g:355:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(355, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(355, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(79); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:357:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(357, 4);
				string_literal196=(IToken)Match(input,146,Follow._146_in_stmt_while2186);  
				stream_146.Add(string_literal196);

				DebugLocation(357, 12);
				PushFollow(Follow._expr_in_stmt_while2188);
				expr197=expr();
				PopFollow();

				stream_expr.Add(expr197.Tree);
				DebugLocation(357, 17);
				// SugarCpp.g:357:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==NEWLINE))
				{
					alt81 = 1;
				}
				else if ((LA81_0==140))
				{
					alt81 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:357:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(357, 19);
					// SugarCpp.g:357:19: ( NEWLINE )+
					int cnt80=0;
					try { DebugEnterSubRule(80);
					while (true)
					{
						int alt80=2;
						try { DebugEnterDecision(80, false);
						int LA80_0 = input.LA(1);

						if ((LA80_0==NEWLINE))
						{
							alt80 = 1;
						}


						} finally { DebugExitDecision(80); }
						switch (alt80)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:357:19: NEWLINE
							{
							DebugLocation(357, 19);
							NEWLINE198=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2192);  
							stream_NEWLINE.Add(NEWLINE198);


							}
							break;

						default:
							if (cnt80 >= 1)
								goto loop80;

							EarlyExitException eee80 = new EarlyExitException( 80, input );
							DebugRecognitionException(eee80);
							throw eee80;
						}
						cnt80++;
					}
					loop80:
						;

					} finally { DebugExitSubRule(80); }

					DebugLocation(357, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2195);
					stmt_block199=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block199.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 357:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(357, 42);
						// SugarCpp.g:357:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(357, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(357, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(357, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:358:13: 'then' stmt
					{
					DebugLocation(358, 13);
					string_literal200=(IToken)Match(input,140,Follow._140_in_stmt_while2219);  
					stream_140.Add(string_literal200);

					DebugLocation(358, 20);
					PushFollow(Follow._stmt_in_stmt_while2221);
					stmt201=stmt();
					PopFollow();

					stream_stmt.Add(stmt201.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 358:25: -> ^( Stmt_Until expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(358, 28);
						// SugarCpp.g:358:28: ^( Stmt_Until expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(358, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(358, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(358, 46);
						// SugarCpp.g:358:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(358, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(358, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(81); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:360:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(360, 4);
				string_literal202=(IToken)Match(input,135,Follow._135_in_stmt_while2249);  
				stream_135.Add(string_literal202);

				DebugLocation(360, 11);
				// SugarCpp.g:360:11: ( expr )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==IDENT||LA82_0==NUMBER||LA82_0==STRING||LA82_0==72||LA82_0==77||LA82_0==79||LA82_0==81||(LA82_0>=83 && LA82_0<=84)||(LA82_0>=87 && LA82_0<=88)||(LA82_0>=113 && LA82_0<=114)||LA82_0==137||LA82_0==152))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:360:11: expr
					{
					DebugLocation(360, 11);
					PushFollow(Follow._expr_in_stmt_while2251);
					expr203=expr();
					PopFollow();

					stream_expr.Add(expr203.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(82); }

				DebugLocation(360, 17);
				// SugarCpp.g:360:17: ( NEWLINE )+
				int cnt83=0;
				try { DebugEnterSubRule(83);
				while (true)
				{
					int alt83=2;
					try { DebugEnterDecision(83, false);
					int LA83_0 = input.LA(1);

					if ((LA83_0==NEWLINE))
					{
						alt83 = 1;
					}


					} finally { DebugExitDecision(83); }
					switch (alt83)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:360:17: NEWLINE
						{
						DebugLocation(360, 17);
						NEWLINE204=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2254);  
						stream_NEWLINE.Add(NEWLINE204);


						}
						break;

					default:
						if (cnt83 >= 1)
							goto loop83;

						EarlyExitException eee83 = new EarlyExitException( 83, input );
						DebugRecognitionException(eee83);
						throw eee83;
					}
					cnt83++;
				}
				loop83:
					;

				} finally { DebugExitSubRule(83); }

				DebugLocation(360, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2257);
				stmt_block205=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block205.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 360:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(360, 40);
					// SugarCpp.g:360:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(360, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(360, 52);
					// SugarCpp.g:360:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(360, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(360, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 31);
			LeaveRule("stmt_while", 31);
			LeaveRule_stmt_while();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:363:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 32);
		TraceIn("for_range", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal207 = default(IToken);
		IToken string_literal208 = default(IToken);
		IToken string_literal209 = default(IToken);
		IToken string_literal210 = default(IToken);
		IToken string_literal211 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident206 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal207_tree = default(CommonTree);
		CommonTree string_literal208_tree = default(CommonTree);
		CommonTree string_literal209_tree = default(CommonTree);
		CommonTree string_literal210_tree = default(CommonTree);
		CommonTree string_literal211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(363, 1);
		try
		{
			// SugarCpp.g:364:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:364:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(364, 4);
			PushFollow(Follow._ident_in_for_range2279);
			ident206=ident();
			PopFollow();

			stream_ident.Add(ident206.Tree);
			DebugLocation(364, 10);
			string_literal207=(IToken)Match(input,100,Follow._100_in_for_range2281);  
			stream_100.Add(string_literal207);

			DebugLocation(364, 16);
			PushFollow(Follow._expr_in_for_range2285);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(364, 22);
			// SugarCpp.g:364:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt87=3;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			switch (input.LA(1))
			{
			case 141:
				{
				alt87 = 1;
				}
				break;
			case 126:
				{
				alt87 = 2;
				}
				break;
			case NEWLINE:
			case 86:
				{
				alt87 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(364, 23);
				string_literal208=(IToken)Match(input,141,Follow._141_in_for_range2288);  
				stream_141.Add(string_literal208);

				DebugLocation(364, 29);
				PushFollow(Follow._expr_in_for_range2292);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(364, 35);
				// SugarCpp.g:364:35: ( 'by' c= expr )?
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==121))
				{
					alt85 = 1;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:364:36: 'by' c= expr
					{
					DebugLocation(364, 36);
					string_literal209=(IToken)Match(input,121,Follow._121_in_for_range2295);  
					stream_121.Add(string_literal209);

					DebugLocation(364, 42);
					PushFollow(Follow._expr_in_for_range2299);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(85); }



				{
				// AST REWRITE
				// elements: b, a, ident, c
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 364:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(364, 53);
					// SugarCpp.g:364:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(364, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(364, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(364, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(364, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(364, 80);
					// SugarCpp.g:364:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(364, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:365:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(365, 8);
				string_literal210=(IToken)Match(input,126,Follow._126_in_for_range2328);  
				stream_126.Add(string_literal210);

				DebugLocation(365, 18);
				PushFollow(Follow._expr_in_for_range2332);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(365, 24);
				// SugarCpp.g:365:24: ( 'by' c= expr )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==121))
				{
					alt86 = 1;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:365:25: 'by' c= expr
					{
					DebugLocation(365, 25);
					string_literal211=(IToken)Match(input,121,Follow._121_in_for_range2335);  
					stream_121.Add(string_literal211);

					DebugLocation(365, 31);
					PushFollow(Follow._expr_in_for_range2339);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(86); }



				{
				// AST REWRITE
				// elements: a, c, ident, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 365:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(365, 42);
					// SugarCpp.g:365:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(365, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(365, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(365, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(365, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(365, 74);
					// SugarCpp.g:365:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(365, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:366:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 366:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(366, 12);
					// SugarCpp.g:366:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(366, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(366, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(366, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 32);
			LeaveRule("for_range", 32);
			LeaveRule_for_range();
		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:370:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 33);
		TraceIn("for_when", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(370, 1);
		try
		{
			// SugarCpp.g:371:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:371:4: expr
			{
			DebugLocation(371, 4);
			PushFollow(Follow._expr_in_for_when2397);
			expr212=expr();
			PopFollow();

			stream_expr.Add(expr212.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 371:9: -> ^( For_Item_When expr )
			{
				DebugLocation(371, 12);
				// SugarCpp.g:371:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(371, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(371, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 33);
			LeaveRule("for_when", 33);
			LeaveRule_for_when();
		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:374:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 34);
		TraceIn("for_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when214 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(374, 1);
		try
		{
			// SugarCpp.g:375:2: ( for_range | for_when )
			int alt88=2;
			try { DebugEnterDecision(88, false);
			try
			{
				alt88 = dfa88.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:375:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(375, 4);
				PushFollow(Follow._for_range_in_for_item2416);
				for_range213=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range213.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:376:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(376, 4);
				PushFollow(Follow._for_when_in_for_item2421);
				for_when214=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when214.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 34);
			LeaveRule("for_item", 34);
			LeaveRule_for_item();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:379:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 35);
		TraceIn("stmt_for", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal215 = default(IToken);
		IToken char_literal217 = default(IToken);
		IToken NEWLINE219 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal215_tree = default(CommonTree);
		CommonTree char_literal217_tree = default(CommonTree);
		CommonTree NEWLINE219_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(379, 1);
		try
		{
			// SugarCpp.g:380:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:380:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(380, 4);
			string_literal215=(IToken)Match(input,130,Follow._130_in_stmt_for2432);  
			stream_130.Add(string_literal215);

			DebugLocation(380, 10);
			// SugarCpp.g:380:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:380:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(380, 12);
			PushFollow(Follow._for_item_in_stmt_for2436);
			for_item216=for_item();
			PopFollow();

			stream_for_item.Add(for_item216.Tree);
			DebugLocation(380, 21);
			// SugarCpp.g:380:21: ( ',' for_item )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==86))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:380:22: ',' for_item
					{
					DebugLocation(380, 22);
					char_literal217=(IToken)Match(input,86,Follow._86_in_stmt_for2439);  
					stream_86.Add(char_literal217);

					DebugLocation(380, 26);
					PushFollow(Follow._for_item_in_stmt_for2441);
					for_item218=for_item();
					PopFollow();

					stream_for_item.Add(for_item218.Tree);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(380, 37);
			// SugarCpp.g:380:37: ( NEWLINE )+
			int cnt90=0;
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==NEWLINE))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:380:37: NEWLINE
					{
					DebugLocation(380, 37);
					NEWLINE219=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2445);  
					stream_NEWLINE.Add(NEWLINE219);


					}
					break;

				default:
					if (cnt90 >= 1)
						goto loop90;

					EarlyExitException eee90 = new EarlyExitException( 90, input );
					DebugRecognitionException(eee90);
					throw eee90;
				}
				cnt90++;
			}
			loop90:
				;

			} finally { DebugExitSubRule(90); }

			DebugLocation(380, 46);
			PushFollow(Follow._stmt_block_in_stmt_for2448);
			stmt_block220=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block220.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 380:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(380, 60);
				// SugarCpp.g:380:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(380, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(380, 71);
				// SugarCpp.g:380:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(380, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(380, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 35);
			LeaveRule("stmt_for", 35);
			LeaveRule_stmt_for();
		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:385:1: stmt_try : 'try' stmt_block 'catch' stmt_alloc stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 36);
		TraceIn("stmt_try", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal221 = default(IToken);
		IToken string_literal223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree string_literal223_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(385, 1);
		try
		{
			// SugarCpp.g:386:2: ( 'try' stmt_block 'catch' stmt_alloc stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:386:4: 'try' stmt_block 'catch' stmt_alloc stmt_block
			{
			DebugLocation(386, 4);
			string_literal221=(IToken)Match(input,142,Follow._142_in_stmt_try2479);  
			stream_142.Add(string_literal221);

			DebugLocation(386, 10);
			PushFollow(Follow._stmt_block_in_stmt_try2481);
			stmt_block222=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block222.Tree);
			DebugLocation(386, 21);
			string_literal223=(IToken)Match(input,122,Follow._122_in_stmt_try2483);  
			stream_122.Add(string_literal223);

			DebugLocation(386, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try2485);
			stmt_alloc224=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc224.Tree);
			DebugLocation(386, 40);
			PushFollow(Follow._stmt_block_in_stmt_try2487);
			stmt_block225=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block225.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 386:51: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(386, 54);
				// SugarCpp.g:386:54: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(386, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(386, 65);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(386, 76);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(386, 87);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 36);
			LeaveRule("stmt_try", 36);
			LeaveRule_stmt_try();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:389:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 37);
		TraceIn("ident_list", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal227 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident228 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal227_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(389, 1);
		try
		{
			// SugarCpp.g:390:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:390:4: ident ( ',' ident )*
			{
			DebugLocation(390, 4);
			PushFollow(Follow._ident_in_ident_list2510);
			ident226=ident();
			PopFollow();

			stream_ident.Add(ident226.Tree);
			DebugLocation(390, 10);
			// SugarCpp.g:390:10: ( ',' ident )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==86))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:390:11: ',' ident
					{
					DebugLocation(390, 11);
					char_literal227=(IToken)Match(input,86,Follow._86_in_ident_list2513);  
					stream_86.Add(char_literal227);

					DebugLocation(390, 15);
					PushFollow(Follow._ident_in_ident_list2515);
					ident228=ident();
					PopFollow();

					stream_ident.Add(ident228.Tree);

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 390:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(390, 26);
				// SugarCpp.g:390:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(390, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(390, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(390, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 37);
			LeaveRule("ident_list", 37);
			LeaveRule_ident_list();
		}
		DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:393:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 38);
		TraceIn("stmt_alloc", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal230 = default(IToken);
		IToken char_literal232 = default(IToken);
		IToken string_literal233 = default(IToken);
		IToken char_literal235 = default(IToken);
		IToken char_literal237 = default(IToken);
		IToken string_literal238 = default(IToken);
		IToken char_literal240 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr239 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr241 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal230_tree = default(CommonTree);
		CommonTree char_literal232_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree char_literal235_tree = default(CommonTree);
		CommonTree char_literal237_tree = default(CommonTree);
		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree char_literal240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(393, 1);
		try
		{
			// SugarCpp.g:394:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:394:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			{
			DebugLocation(394, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2537);
			ident_list229=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list229.Tree);
			DebugLocation(394, 15);
			// SugarCpp.g:394:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			int alt96=2;
			try { DebugEnterSubRule(96);
			try { DebugEnterDecision(96, false);
			int LA96_0 = input.LA(1);

			if ((LA96_0==96))
			{
				alt96 = 1;
			}
			else if ((LA96_0==98))
			{
				alt96 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:394:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(394, 17);
				char_literal230=(IToken)Match(input,96,Follow._96_in_stmt_alloc2541);  
				stream_96.Add(char_literal230);

				DebugLocation(394, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2543);
				type_name231=type_name();
				PopFollow();

				stream_type_name.Add(type_name231.Tree);
				DebugLocation(394, 31);
				// SugarCpp.g:394:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt94=3;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				switch (input.LA(1))
				{
				case 98:
				case 104:
					{
					alt94 = 1;
					}
					break;
				case 79:
					{
					alt94 = 2;
					}
					break;
				case INDENT:
				case NEWLINE:
				case 131:
				case 144:
				case 146:
				case 148:
					{
					alt94 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:394:33: ( '=' | ':=' ) expr
					{
					DebugLocation(394, 33);
					// SugarCpp.g:394:33: ( '=' | ':=' )
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, false);
					int LA92_0 = input.LA(1);

					if ((LA92_0==104))
					{
						alt92 = 1;
					}
					else if ((LA92_0==98))
					{
						alt92 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:394:34: '='
						{
						DebugLocation(394, 34);
						char_literal232=(IToken)Match(input,104,Follow._104_in_stmt_alloc2548);  
						stream_104.Add(char_literal232);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:394:40: ':='
						{
						DebugLocation(394, 40);
						string_literal233=(IToken)Match(input,98,Follow._98_in_stmt_alloc2552);  
						stream_98.Add(string_literal233);


						}
						break;

					}
					} finally { DebugExitSubRule(92); }

					DebugLocation(394, 46);
					PushFollow(Follow._expr_in_stmt_alloc2555);
					expr234=expr();
					PopFollow();

					stream_expr.Add(expr234.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(394, 55);
						// SugarCpp.g:394:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(394, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(394, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(394, 95);
						// SugarCpp.g:394:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(394, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:395:33: '(' ( expr_list )? ')'
					{
					DebugLocation(395, 33);
					char_literal235=(IToken)Match(input,79,Follow._79_in_stmt_alloc2603);  
					stream_79.Add(char_literal235);

					DebugLocation(395, 37);
					// SugarCpp.g:395:37: ( expr_list )?
					int alt93=2;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, false);
					int LA93_0 = input.LA(1);

					if ((LA93_0==IDENT||LA93_0==NUMBER||LA93_0==STRING||LA93_0==72||LA93_0==77||LA93_0==79||LA93_0==81||(LA93_0>=83 && LA93_0<=84)||(LA93_0>=87 && LA93_0<=88)||(LA93_0>=113 && LA93_0<=114)||LA93_0==137||LA93_0==152))
					{
						alt93 = 1;
					}
					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:395:37: expr_list
						{
						DebugLocation(395, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc2605);
						expr_list236=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list236.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(93); }

					DebugLocation(395, 48);
					char_literal237=(IToken)Match(input,80,Follow._80_in_stmt_alloc2608);  
					stream_80.Add(char_literal237);



					{
					// AST REWRITE
					// elements: type_name, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(395, 56);
						// SugarCpp.g:395:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(395, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(395, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(395, 98);
						// SugarCpp.g:395:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(395, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:396:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 396:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(396, 18);
						// SugarCpp.g:396:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(396, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(396, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(94); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:398:8: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(398, 8);
				string_literal238=(IToken)Match(input,98,Follow._98_in_stmt_alloc2669);  
				stream_98.Add(string_literal238);

				DebugLocation(398, 14);
				// SugarCpp.g:398:14: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:398:15: expr ( ',' expr )*
				{
				DebugLocation(398, 15);
				PushFollow(Follow._expr_in_stmt_alloc2673);
				expr239=expr();
				PopFollow();

				stream_expr.Add(expr239.Tree);
				DebugLocation(398, 20);
				// SugarCpp.g:398:20: ( ',' expr )*
				try { DebugEnterSubRule(95);
				while (true)
				{
					int alt95=2;
					try { DebugEnterDecision(95, false);
					int LA95_0 = input.LA(1);

					if ((LA95_0==86))
					{
						alt95 = 1;
					}


					} finally { DebugExitDecision(95); }
					switch ( alt95 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:398:21: ',' expr
						{
						DebugLocation(398, 21);
						char_literal240=(IToken)Match(input,86,Follow._86_in_stmt_alloc2676);  
						stream_86.Add(char_literal240);

						DebugLocation(398, 25);
						PushFollow(Follow._expr_in_stmt_alloc2678);
						expr241=expr();
						PopFollow();

						stream_expr.Add(expr241.Tree);

						}
						break;

					default:
						goto loop95;
					}
				}

				loop95:
					;

				} finally { DebugExitSubRule(95); }


				}



				{
				// AST REWRITE
				// elements: ident_list, 98, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 398:33: -> ^( ':=' ident_list ( expr )* )
				{
					DebugLocation(398, 36);
					// SugarCpp.g:398:36: ^( ':=' ident_list ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(398, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_98.NextNode(), root_1);

					DebugLocation(398, 43);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(398, 54);
					// SugarCpp.g:398:54: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(398, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(96); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 38);
			LeaveRule("stmt_alloc", 38);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:401:1: stmt_modify : lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 39);
		TraceIn("stmt_modify", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal245 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op243 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr246 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal245_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(401, 1);
		try
		{
			// SugarCpp.g:402:2: ( lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:402:4: lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(402, 4);
			PushFollow(Follow._lvalue_in_stmt_modify2704);
			lvalue242=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue242.Tree);
			DebugLocation(402, 11);
			// SugarCpp.g:402:11: ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			int alt97=3;
			try { DebugEnterSubRule(97);
			try { DebugEnterDecision(97, false);
			int LA97_0 = input.LA(1);

			if ((LA97_0==75||LA97_0==78||LA97_0==82||LA97_0==85||LA97_0==89||LA97_0==95||LA97_0==102||LA97_0==104||LA97_0==110||LA97_0==117||LA97_0==150))
			{
				alt97 = 1;
			}
			else if ((LA97_0==112))
			{
				alt97 = 2;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:402:13: modify_expr_op ^ expr
				{
				DebugLocation(402, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify2708);
				modify_expr_op243=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op243.Tree, root_0);
				DebugLocation(402, 29);
				PushFollow(Follow._expr_in_stmt_modify2711);
				expr244=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr244.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:403:13: '?=' ^ modify_expr
				{
				DebugLocation(403, 17);
				string_literal245=(IToken)Match(input,112,Follow._112_in_stmt_modify2725); 
				string_literal245_tree = (CommonTree)adaptor.Create(string_literal245);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal245_tree, root_0);
				DebugLocation(403, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify2728);
				modify_expr246=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr246.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(97); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 39);
			LeaveRule("stmt_modify", 39);
			LeaveRule_stmt_modify();
		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:406:1: expr : list_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 40);
		TraceIn("expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(406, 1);
		try
		{
			// SugarCpp.g:407:2: ( list_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:407:4: list_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(407, 4);
			PushFollow(Follow._list_expr_in_expr2741);
			list_expr247=list_expr();
			PopFollow();

			adaptor.AddChild(root_0, list_expr247.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 40);
			LeaveRule("expr", 40);
			LeaveRule_expr();
		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:410:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 41);
		TraceIn("list_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal248 = default(IToken);
		IToken char_literal249 = default(IToken);
		IToken NEWLINE250 = default(IToken);
		IToken INDENT251 = default(IToken);
		IToken DEDENT252 = default(IToken);
		IToken char_literal254 = default(IToken);
		IToken NEWLINE255 = default(IToken);
		IToken INDENT256 = default(IToken);
		IToken DEDENT257 = default(IToken);
		IToken char_literal259 = default(IToken);
		IToken NEWLINE260 = default(IToken);
		IToken INDENT261 = default(IToken);
		IToken DEDENT262 = default(IToken);
		IToken char_literal263 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr253 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr258 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr264 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal248_tree = default(CommonTree);
		CommonTree char_literal249_tree = default(CommonTree);
		CommonTree NEWLINE250_tree = default(CommonTree);
		CommonTree INDENT251_tree = default(CommonTree);
		CommonTree DEDENT252_tree = default(CommonTree);
		CommonTree char_literal254_tree = default(CommonTree);
		CommonTree NEWLINE255_tree = default(CommonTree);
		CommonTree INDENT256_tree = default(CommonTree);
		CommonTree DEDENT257_tree = default(CommonTree);
		CommonTree char_literal259_tree = default(CommonTree);
		CommonTree NEWLINE260_tree = default(CommonTree);
		CommonTree INDENT261_tree = default(CommonTree);
		CommonTree DEDENT262_tree = default(CommonTree);
		CommonTree char_literal263_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(410, 1);
		try
		{
			// SugarCpp.g:411:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt103=2;
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==114))
			{
				alt103 = 1;
			}
			else if ((LA103_0==IDENT||LA103_0==NUMBER||LA103_0==STRING||LA103_0==72||LA103_0==77||LA103_0==79||LA103_0==81||(LA103_0>=83 && LA103_0<=84)||(LA103_0>=87 && LA103_0<=88)||LA103_0==113||LA103_0==137||LA103_0==152))
			{
				alt103 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:411:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(411, 4);
				char_literal248=(IToken)Match(input,114,Follow._114_in_list_expr2752);  
				stream_114.Add(char_literal248);

				DebugLocation(411, 8);
				// SugarCpp.g:411:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				try
				{
					alt101 = dfa101.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:411:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(411, 9);
					// SugarCpp.g:411:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(98);
					while (true)
					{
						int alt98=5;
						try { DebugEnterDecision(98, false);
						switch (input.LA(1))
						{
						case 86:
							{
							alt98 = 1;
							}
							break;
						case NEWLINE:
							{
							alt98 = 2;
							}
							break;
						case INDENT:
							{
							alt98 = 3;
							}
							break;
						case DEDENT:
							{
							alt98 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(98); }
						switch ( alt98 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:411:10: ','
							{
							DebugLocation(411, 10);
							char_literal249=(IToken)Match(input,86,Follow._86_in_list_expr2756);  
							stream_86.Add(char_literal249);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:411:16: NEWLINE
							{
							DebugLocation(411, 16);
							NEWLINE250=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr2760);  
							stream_NEWLINE.Add(NEWLINE250);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:411:26: INDENT
							{
							DebugLocation(411, 26);
							INDENT251=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr2764);  
							stream_INDENT.Add(INDENT251);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:411:35: DEDENT
							{
							DebugLocation(411, 35);
							DEDENT252=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr2768);  
							stream_DEDENT.Add(DEDENT252);


							}
							break;

						default:
							goto loop98;
						}
					}

					loop98:
						;

					} finally { DebugExitSubRule(98); }

					DebugLocation(411, 44);
					PushFollow(Follow._list_expr_in_list_expr2772);
					list_expr253=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr253.Tree);
					DebugLocation(411, 54);
					// SugarCpp.g:411:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(100);
					while (true)
					{
						int alt100=2;
						try { DebugEnterDecision(100, false);
						try
						{
							alt100 = dfa100.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(100); }
						switch ( alt100 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:411:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(411, 55);
							// SugarCpp.g:411:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt99=0;
							try { DebugEnterSubRule(99);
							while (true)
							{
								int alt99=5;
								try { DebugEnterDecision(99, false);
								switch (input.LA(1))
								{
								case 86:
									{
									alt99 = 1;
									}
									break;
								case NEWLINE:
									{
									alt99 = 2;
									}
									break;
								case INDENT:
									{
									alt99 = 3;
									}
									break;
								case DEDENT:
									{
									alt99 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(99); }
								switch (alt99)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:411:56: ','
									{
									DebugLocation(411, 56);
									char_literal254=(IToken)Match(input,86,Follow._86_in_list_expr2776);  
									stream_86.Add(char_literal254);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:411:62: NEWLINE
									{
									DebugLocation(411, 62);
									NEWLINE255=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr2780);  
									stream_NEWLINE.Add(NEWLINE255);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:411:72: INDENT
									{
									DebugLocation(411, 72);
									INDENT256=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr2784);  
									stream_INDENT.Add(INDENT256);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:411:81: DEDENT
									{
									DebugLocation(411, 81);
									DEDENT257=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr2788);  
									stream_DEDENT.Add(DEDENT257);


									}
									break;

								default:
									if (cnt99 >= 1)
										goto loop99;

									EarlyExitException eee99 = new EarlyExitException( 99, input );
									DebugRecognitionException(eee99);
									throw eee99;
								}
								cnt99++;
							}
							loop99:
								;

							} finally { DebugExitSubRule(99); }

							DebugLocation(411, 90);
							PushFollow(Follow._list_expr_in_list_expr2792);
							list_expr258=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr258.Tree);

							}
							break;

						default:
							goto loop100;
						}
					}

					loop100:
						;

					} finally { DebugExitSubRule(100); }


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(411, 104);
				// SugarCpp.g:411:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(102);
				while (true)
				{
					int alt102=5;
					try { DebugEnterDecision(102, false);
					switch (input.LA(1))
					{
					case 86:
						{
						alt102 = 1;
						}
						break;
					case NEWLINE:
						{
						alt102 = 2;
						}
						break;
					case INDENT:
						{
						alt102 = 3;
						}
						break;
					case DEDENT:
						{
						alt102 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(102); }
					switch ( alt102 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:411:105: ','
						{
						DebugLocation(411, 105);
						char_literal259=(IToken)Match(input,86,Follow._86_in_list_expr2799);  
						stream_86.Add(char_literal259);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:411:111: NEWLINE
						{
						DebugLocation(411, 111);
						NEWLINE260=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr2803);  
						stream_NEWLINE.Add(NEWLINE260);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:411:121: INDENT
						{
						DebugLocation(411, 121);
						INDENT261=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr2807);  
						stream_INDENT.Add(INDENT261);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:411:130: DEDENT
						{
						DebugLocation(411, 130);
						DEDENT262=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr2811);  
						stream_DEDENT.Add(DEDENT262);


						}
						break;

					default:
						goto loop102;
					}
				}

				loop102:
					;

				} finally { DebugExitSubRule(102); }

				DebugLocation(411, 139);
				char_literal263=(IToken)Match(input,115,Follow._115_in_list_expr2815);  
				stream_115.Add(char_literal263);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 411:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(411, 146);
					// SugarCpp.g:411:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(411, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(411, 158);
					// SugarCpp.g:411:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(411, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:412:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(412, 4);
				PushFollow(Follow._lambda_expr_in_list_expr2829);
				lambda_expr264=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr264.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 41);
			LeaveRule("list_expr", 41);
			LeaveRule_list_expr();
		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:415:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 42);
		TraceIn("lambda_expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal265 = default(IToken);
		IToken char_literal267 = default(IToken);
		IToken string_literal268 = default(IToken);
		IToken string_literal270 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr272 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal265_tree = default(CommonTree);
		CommonTree char_literal267_tree = default(CommonTree);
		CommonTree string_literal268_tree = default(CommonTree);
		CommonTree string_literal270_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(415, 1);
		try
		{
			// SugarCpp.g:416:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt106=2;
			try { DebugEnterDecision(106, false);
			try
			{
				alt106 = dfa106.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:416:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(416, 4);
				char_literal265=(IToken)Match(input,79,Follow._79_in_lambda_expr2840);  
				stream_79.Add(char_literal265);

				DebugLocation(416, 8);
				// SugarCpp.g:416:8: ( func_args )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==IDENT||LA104_0==98))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:416:8: func_args
					{
					DebugLocation(416, 8);
					PushFollow(Follow._func_args_in_lambda_expr2842);
					func_args266=func_args();
					PopFollow();

					stream_func_args.Add(func_args266.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(104); }

				DebugLocation(416, 19);
				char_literal267=(IToken)Match(input,80,Follow._80_in_lambda_expr2845);  
				stream_80.Add(char_literal267);

				DebugLocation(416, 23);
				// SugarCpp.g:416:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==90))
				{
					alt105 = 1;
				}
				else if ((LA105_0==106))
				{
					alt105 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:416:25: '->' expr
					{
					DebugLocation(416, 25);
					string_literal268=(IToken)Match(input,90,Follow._90_in_lambda_expr2849);  
					stream_90.Add(string_literal268);

					DebugLocation(416, 30);
					PushFollow(Follow._expr_in_lambda_expr2851);
					expr269=expr();
					PopFollow();

					stream_expr.Add(expr269.Tree);


					{
					// AST REWRITE
					// elements: 90, func_args, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 416:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(416, 39);
						// SugarCpp.g:416:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(416, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(416, 53);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(416, 58);
						// SugarCpp.g:416:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(416, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(416, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:417:25: '=>' expr
					{
					DebugLocation(417, 25);
					string_literal270=(IToken)Match(input,106,Follow._106_in_lambda_expr2891);  
					stream_106.Add(string_literal270);

					DebugLocation(417, 30);
					PushFollow(Follow._expr_in_lambda_expr2893);
					expr271=expr();
					PopFollow();

					stream_expr.Add(expr271.Tree);


					{
					// AST REWRITE
					// elements: func_args, 106, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 417:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(417, 39);
						// SugarCpp.g:417:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(417, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(417, 53);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(417, 58);
						// SugarCpp.g:417:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(417, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(417, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(105); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:418:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(418, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr2913);
				modify_expr272=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr272.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 42);
			LeaveRule("lambda_expr", 42);
			LeaveRule_lambda_expr();
		}
		DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:421:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 43);
		TraceIn("modify_expr_op", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set273 = default(IToken);

		CommonTree set273_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(421, 91);
		try
		{
			// SugarCpp.g:421:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(421, 15);

			set273=(IToken)input.LT(1);
			if (input.LA(1)==75||input.LA(1)==78||input.LA(1)==82||input.LA(1)==85||input.LA(1)==89||input.LA(1)==95||input.LA(1)==102||input.LA(1)==104||input.LA(1)==110||input.LA(1)==117||input.LA(1)==150)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set273));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 43);
			LeaveRule("modify_expr_op", 43);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(421, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:422:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 44);
		TraceIn("modify_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set275 = default(IToken);
		IToken char_literal277 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr278 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set275_tree = default(CommonTree);
		CommonTree char_literal277_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(422, 1);
		try
		{
			// SugarCpp.g:423:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:423:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(423, 4);
			PushFollow(Follow._cond_expr_in_modify_expr2970);
			cond_expr274=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr274.Tree);
			DebugLocation(423, 14);
			// SugarCpp.g:423:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt108=3;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_0 = input.LA(1);

			if ((LA108_0==75||LA108_0==78||LA108_0==82||LA108_0==85||LA108_0==89||LA108_0==95||LA108_0==98||LA108_0==102||LA108_0==110||LA108_0==117||LA108_0==150))
			{
				alt108 = 1;
			}
			else if ((LA108_0==104))
			{
				alt108 = 2;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:423:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(423, 94);

				set275=(IToken)input.LT(1);
				set275=(IToken)input.LT(1);
				if (input.LA(1)==75||input.LA(1)==78||input.LA(1)==82||input.LA(1)==85||input.LA(1)==89||input.LA(1)==95||input.LA(1)==98||input.LA(1)==102||input.LA(1)==110||input.LA(1)==117||input.LA(1)==150)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set275), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(423, 96);
				PushFollow(Follow._cond_expr_in_modify_expr3019);
				cond_expr276=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr276.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:424:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(424, 7);
				// SugarCpp.g:424:7: ( '=' ^ cond_expr )+
				int cnt107=0;
				try { DebugEnterSubRule(107);
				while (true)
				{
					int alt107=2;
					try { DebugEnterDecision(107, false);
					int LA107_0 = input.LA(1);

					if ((LA107_0==104))
					{
						alt107 = 1;
					}


					} finally { DebugExitDecision(107); }
					switch (alt107)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:424:8: '=' ^ cond_expr
						{
						DebugLocation(424, 11);
						char_literal277=(IToken)Match(input,104,Follow._104_in_modify_expr3028); 
						char_literal277_tree = (CommonTree)adaptor.Create(char_literal277);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal277_tree, root_0);
						DebugLocation(424, 13);
						PushFollow(Follow._cond_expr_in_modify_expr3031);
						cond_expr278=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr278.Tree);

						}
						break;

					default:
						if (cnt107 >= 1)
							goto loop107;

						EarlyExitException eee107 = new EarlyExitException( 107, input );
						DebugRecognitionException(eee107);
						throw eee107;
					}
					cnt107++;
				}
				loop107:
					;

				} finally { DebugExitSubRule(107); }


				}
				break;

			}
			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 44);
			LeaveRule("modify_expr", 44);
			LeaveRule_modify_expr();
		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:427:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 45);
		TraceIn("cond_expr_item", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr279 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(427, 24);
		try
		{
			// SugarCpp.g:427:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:427:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(427, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item3044);
			or_expr279=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr279.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 45);
			LeaveRule("cond_expr_item", 45);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(427, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:428:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 46);
		TraceIn("cond_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal280 = default(IToken);
		IToken char_literal281 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal280_tree = default(CommonTree);
		CommonTree char_literal281_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(428, 1);
		try
		{
			// SugarCpp.g:429:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:429:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(429, 4);
			// SugarCpp.g:429:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:429:5: a= or_expr
			{
			DebugLocation(429, 6);
			PushFollow(Follow._or_expr_in_cond_expr3056);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 429:15: -> $a
			{
				DebugLocation(429, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(429, 22);
			// SugarCpp.g:429:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt111=2;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			int LA111_0 = input.LA(1);

			if ((LA111_0==111))
			{
				alt111 = 1;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:429:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(429, 23);
				char_literal280=(IToken)Match(input,111,Follow._111_in_cond_expr3065);  
				stream_111.Add(char_literal280);

				DebugLocation(429, 27);
				// SugarCpp.g:429:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt110=2;
				try { DebugEnterSubRule(110);
				try { DebugEnterDecision(110, false);
				int LA110_0 = input.LA(1);

				if ((LA110_0==IDENT||LA110_0==NUMBER||LA110_0==STRING||LA110_0==72||LA110_0==77||LA110_0==79||LA110_0==81||(LA110_0>=83 && LA110_0<=84)||(LA110_0>=87 && LA110_0<=88)||LA110_0==113||LA110_0==137||LA110_0==152))
				{
					alt110 = 1;
				}
				else if ((LA110_0==DEDENT||LA110_0==INDENT||LA110_0==NEWLINE||LA110_0==75||LA110_0==78||LA110_0==80||LA110_0==82||(LA110_0>=85 && LA110_0<=86)||LA110_0==89||LA110_0==95||LA110_0==98||LA110_0==102||LA110_0==104||LA110_0==110||LA110_0==115||LA110_0==117||LA110_0==121||LA110_0==126||LA110_0==131||(LA110_0>=140 && LA110_0<=141)||LA110_0==144||LA110_0==146||LA110_0==148||LA110_0==150))
				{
					alt110 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:429:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(429, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr3071);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(429, 46);
					// SugarCpp.g:429:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt109=2;
					try { DebugEnterSubRule(109);
					try { DebugEnterDecision(109, false);
					int LA109_0 = input.LA(1);

					if ((LA109_0==96))
					{
						alt109 = 1;
					}
					else if ((LA109_0==DEDENT||LA109_0==INDENT||LA109_0==NEWLINE||LA109_0==75||LA109_0==78||LA109_0==80||LA109_0==82||(LA109_0>=85 && LA109_0<=86)||LA109_0==89||LA109_0==95||LA109_0==98||LA109_0==102||LA109_0==104||LA109_0==110||LA109_0==115||LA109_0==117||LA109_0==121||LA109_0==126||LA109_0==131||(LA109_0>=140 && LA109_0<=141)||LA109_0==144||LA109_0==146||LA109_0==148||LA109_0==150))
					{
						alt109 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 109, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(109); }
					switch (alt109)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:429:48: ':' b= cond_expr_item
						{
						DebugLocation(429, 48);
						char_literal281=(IToken)Match(input,96,Follow._96_in_cond_expr3075);  
						stream_96.Add(char_literal281);

						DebugLocation(429, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr3079);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: cond_expr, a, b
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 429:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(429, 72);
							// SugarCpp.g:429:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(429, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(429, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(429, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(429, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:430:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 430:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(430, 20);
							// SugarCpp.g:430:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(430, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(430, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(430, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(109); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:432:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 432:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(432, 14);
						// SugarCpp.g:432:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(432, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(432, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(110); }


				}
				break;

			}
			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 46);
			LeaveRule("cond_expr", 46);
			LeaveRule_cond_expr();
		}
		DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:436:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 47);
		TraceIn("or_op", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set282 = default(IToken);

		CommonTree set282_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(436, 19);
		try
		{
			// SugarCpp.g:436:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(436, 6);

			set282=(IToken)input.LT(1);
			if (input.LA(1)==138||input.LA(1)==151)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set282));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 47);
			LeaveRule("or_op", 47);
			LeaveRule_or_op();
		}
		DebugLocation(436, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:437:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 48);
		TraceIn("or_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(437, 1);
		try
		{
			// SugarCpp.g:438:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:438:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(438, 4);
			// SugarCpp.g:438:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:438:5: a= and_expr
			{
			DebugLocation(438, 6);
			PushFollow(Follow._and_expr_in_or_expr3193);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 438:16: -> $a
			{
				DebugLocation(438, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(438, 23);
			// SugarCpp.g:438:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==138||LA112_0==151))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:438:24: op= or_op b= and_expr
					{
					DebugLocation(438, 26);
					PushFollow(Follow._or_op_in_or_expr3204);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(438, 34);
					PushFollow(Follow._and_expr_in_or_expr3208);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, b, or_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 438:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(438, 47);
						// SugarCpp.g:438:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(438, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(438, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(438, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(438, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 48);
			LeaveRule("or_expr", 48);
			LeaveRule_or_expr();
		}
		DebugLocation(439, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:441:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 49);
		TraceIn("and_op", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set283 = default(IToken);

		CommonTree set283_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(441, 21);
		try
		{
			// SugarCpp.g:441:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(441, 7);

			set283=(IToken)input.LT(1);
			if (input.LA(1)==76||input.LA(1)==119)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set283));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 49);
			LeaveRule("and_op", 49);
			LeaveRule_and_op();
		}
		DebugLocation(441, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:442:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 50);
		TraceIn("and_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(442, 1);
		try
		{
			// SugarCpp.g:443:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:443:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(443, 4);
			// SugarCpp.g:443:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:443:5: a= bit_or
			{
			DebugLocation(443, 6);
			PushFollow(Follow._bit_or_in_and_expr3250);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 443:14: -> $a
			{
				DebugLocation(443, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(443, 21);
			// SugarCpp.g:443:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_0 = input.LA(1);

				if ((LA113_0==76||LA113_0==119))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:443:22: op= and_op b= bit_or
					{
					DebugLocation(443, 24);
					PushFollow(Follow._and_op_in_and_expr3261);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(443, 33);
					PushFollow(Follow._bit_or_in_and_expr3265);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 443:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(443, 44);
						// SugarCpp.g:443:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(443, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(443, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(443, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(443, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 50);
			LeaveRule("and_expr", 50);
			LeaveRule_and_expr();
		}
		DebugLocation(444, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:446:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 51);
		TraceIn("bit_or", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal284 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal284_tree = default(CommonTree);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(446, 1);
		try
		{
			// SugarCpp.g:447:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:447:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(447, 4);
			// SugarCpp.g:447:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:447:5: a= bit_xor
			{
			DebugLocation(447, 6);
			PushFollow(Follow._bit_xor_in_bit_or3296);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 447:15: -> $a
			{
				DebugLocation(447, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(447, 22);
			// SugarCpp.g:447:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==149))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:447:23: '|' b= bit_xor
					{
					DebugLocation(447, 23);
					char_literal284=(IToken)Match(input,149,Follow._149_in_bit_or3305);  
					stream_149.Add(char_literal284);

					DebugLocation(447, 28);
					PushFollow(Follow._bit_xor_in_bit_or3309);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 149, bit_or, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 447:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(447, 40);
						// SugarCpp.g:447:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(447, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(447, 51);
						adaptor.AddChild(root_1, stream_149.NextNode());
						DebugLocation(447, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(447, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 51);
			LeaveRule("bit_or", 51);
			LeaveRule_bit_or();
		}
		DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:450:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 52);
		TraceIn("bit_xor", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal285 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal285_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(450, 1);
		try
		{
			// SugarCpp.g:451:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:451:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(451, 4);
			// SugarCpp.g:451:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:451:5: a= bit_and
			{
			DebugLocation(451, 6);
			PushFollow(Follow._bit_and_in_bit_xor3339);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 451:15: -> $a
			{
				DebugLocation(451, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(451, 22);
			// SugarCpp.g:451:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==116))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:451:23: '^' b= bit_and
					{
					DebugLocation(451, 23);
					char_literal285=(IToken)Match(input,116,Follow._116_in_bit_xor3348);  
					stream_116.Add(char_literal285);

					DebugLocation(451, 28);
					PushFollow(Follow._bit_and_in_bit_xor3352);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 116, bit_xor, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 451:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(451, 40);
						// SugarCpp.g:451:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(451, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(451, 51);
						adaptor.AddChild(root_1, stream_116.NextNode());
						DebugLocation(451, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(451, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 52);
			LeaveRule("bit_xor", 52);
			LeaveRule_bit_xor();
		}
		DebugLocation(452, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:454:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 53);
		TraceIn("bit_and", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal286 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal286_tree = default(CommonTree);
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(454, 1);
		try
		{
			// SugarCpp.g:455:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:455:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(455, 4);
			// SugarCpp.g:455:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:455:5: a= cmp_expr
			{
			DebugLocation(455, 6);
			PushFollow(Follow._cmp_expr_in_bit_and3382);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 455:16: -> $a
			{
				DebugLocation(455, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(455, 23);
			// SugarCpp.g:455:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==77))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:455:24: '&' b= cmp_expr
					{
					DebugLocation(455, 24);
					char_literal286=(IToken)Match(input,77,Follow._77_in_bit_and3391);  
					stream_77.Add(char_literal286);

					DebugLocation(455, 29);
					PushFollow(Follow._cmp_expr_in_bit_and3395);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, b, 77
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 455:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(455, 42);
						// SugarCpp.g:455:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(455, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(455, 53);
						adaptor.AddChild(root_1, stream_77.NextNode());
						DebugLocation(455, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(455, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 53);
			LeaveRule("bit_and", 53);
			LeaveRule_bit_and();
		}
		DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:458:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 54);
		TraceIn("chain_op", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set287 = default(IToken);

		CommonTree set287_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(458, 64);
		try
		{
			// SugarCpp.g:458:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(458, 9);

			set287=(IToken)input.LT(1);
			if (input.LA(1)==73||input.LA(1)==99||input.LA(1)==103||input.LA(1)==105||(input.LA(1)>=107 && input.LA(1)<=108)||(input.LA(1)>=133 && input.LA(1)<=134))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set287));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 54);
			LeaveRule("chain_op", 54);
			LeaveRule_chain_op();
		}
		DebugLocation(458, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:459:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 55);
		TraceIn("no_less_op", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set288 = default(IToken);

		CommonTree set288_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(459, 60);
		try
		{
			// SugarCpp.g:459:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(459, 11);

			set288=(IToken)input.LT(1);
			if (input.LA(1)==73||input.LA(1)==103||input.LA(1)==105||(input.LA(1)>=107 && input.LA(1)<=108)||(input.LA(1)>=133 && input.LA(1)<=134))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set288));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 55);
			LeaveRule("no_less_op", 55);
			LeaveRule_no_less_op();
		}
		DebugLocation(459, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:460:1: chain_list : ( chain_op infix_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 56);
		TraceIn("chain_list", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op289 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_expr290 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(460, 35);
		try
		{
			// SugarCpp.g:460:11: ( ( chain_op infix_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:460:13: ( chain_op infix_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(460, 13);
			// SugarCpp.g:460:13: ( chain_op infix_expr )+
			int cnt117=0;
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==73||LA117_0==99||LA117_0==103||LA117_0==105||(LA117_0>=107 && LA117_0<=108)||(LA117_0>=133 && LA117_0<=134)))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:460:14: chain_op infix_expr
					{
					DebugLocation(460, 14);
					PushFollow(Follow._chain_op_in_chain_list3487);
					chain_op289=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op289.Tree);
					DebugLocation(460, 23);
					PushFollow(Follow._infix_expr_in_chain_list3489);
					infix_expr290=infix_expr();
					PopFollow();

					adaptor.AddChild(root_0, infix_expr290.Tree);

					}
					break;

				default:
					if (cnt117 >= 1)
						goto loop117;

					EarlyExitException eee117 = new EarlyExitException( 117, input );
					DebugRecognitionException(eee117);
					throw eee117;
				}
				cnt117++;
			}
			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 56);
			LeaveRule("chain_list", 56);
			LeaveRule_chain_list();
		}
		DebugLocation(460, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:461:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 57);
		TraceIn("cmp_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal291 = default(IToken);
		IToken char_literal293 = default(IToken);
		IToken char_literal294 = default(IToken);
		IToken char_literal296 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident292 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list295 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list297 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list298 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal291_tree = default(CommonTree);
		CommonTree char_literal293_tree = default(CommonTree);
		CommonTree char_literal294_tree = default(CommonTree);
		CommonTree char_literal296_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(461, 1);
		try
		{
			// SugarCpp.g:462:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:462:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(462, 4);
			// SugarCpp.g:462:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:462:5: a= infix_expr
			{
			DebugLocation(462, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr3503);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 462:18: -> $a
			{
				DebugLocation(462, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(462, 25);
			// SugarCpp.g:462:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt122=3;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==99))
			{
				alt122 = 1;
			}
			else if ((LA122_0==73||LA122_0==103||LA122_0==105||(LA122_0>=107 && LA122_0<=108)||(LA122_0>=133 && LA122_0<=134)))
			{
				alt122 = 2;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:462:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(462, 27);
				char_literal291=(IToken)Match(input,99,Follow._99_in_cmp_expr3513);  
				stream_99.Add(char_literal291);

				DebugLocation(462, 32);
				PushFollow(Follow._infix_expr_in_cmp_expr3517);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(462, 44);
				// SugarCpp.g:462:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt120=3;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt120 = 1;
					}
					break;
				case 107:
					{
					int LA120_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt120 = 1;
					}
					else if ((true))
					{
						alt120 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 120, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 73:
				case 99:
				case 103:
				case 105:
				case 108:
				case 133:
				case 134:
					{
					alt120 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 75:
				case 76:
				case 77:
				case 78:
				case 80:
				case 82:
				case 85:
				case 86:
				case 89:
				case 95:
				case 96:
				case 98:
				case 102:
				case 104:
				case 110:
				case 111:
				case 115:
				case 116:
				case 117:
				case 119:
				case 121:
				case 126:
				case 131:
				case 138:
				case 140:
				case 141:
				case 144:
				case 146:
				case 148:
				case 149:
				case 150:
				case 151:
					{
					alt120 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:462:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(462, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(462, 76);
					// SugarCpp.g:462:76: ( ident )*
					try { DebugEnterSubRule(118);
					while (true)
					{
						int alt118=2;
						try { DebugEnterDecision(118, false);
						int LA118_0 = input.LA(1);

						if ((LA118_0==IDENT))
						{
							alt118 = 1;
						}


						} finally { DebugExitDecision(118); }
						switch ( alt118 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:462:76: ident
							{
							DebugLocation(462, 76);
							PushFollow(Follow._ident_in_cmp_expr3523);
							ident292=ident();
							PopFollow();

							stream_ident.Add(ident292.Tree);

							}
							break;

						default:
							goto loop118;
						}
					}

					loop118:
						;

					} finally { DebugExitSubRule(118); }

					DebugLocation(462, 83);
					char_literal293=(IToken)Match(input,107,Follow._107_in_cmp_expr3526);  
					stream_107.Add(char_literal293);

					DebugLocation(462, 87);
					char_literal294=(IToken)Match(input,79,Follow._79_in_cmp_expr3528);  
					stream_79.Add(char_literal294);

					DebugLocation(462, 91);
					// SugarCpp.g:462:91: ( expr_list )?
					int alt119=2;
					try { DebugEnterSubRule(119);
					try { DebugEnterDecision(119, false);
					int LA119_0 = input.LA(1);

					if ((LA119_0==IDENT||LA119_0==NUMBER||LA119_0==STRING||LA119_0==72||LA119_0==77||LA119_0==79||LA119_0==81||(LA119_0>=83 && LA119_0<=84)||(LA119_0>=87 && LA119_0<=88)||(LA119_0>=113 && LA119_0<=114)||LA119_0==137||LA119_0==152))
					{
						alt119 = 1;
					}
					} finally { DebugExitDecision(119); }
					switch (alt119)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:462:91: expr_list
						{
						DebugLocation(462, 91);
						PushFollow(Follow._expr_list_in_cmp_expr3530);
						expr_list295=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list295.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(119); }

					DebugLocation(462, 102);
					char_literal296=(IToken)Match(input,80,Follow._80_in_cmp_expr3533);  
					stream_80.Add(char_literal296);



					{
					// AST REWRITE
					// elements: b, expr_list, ident, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 462:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(462, 109);
						// SugarCpp.g:462:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(462, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(462, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(462, 131);
						// SugarCpp.g:462:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(462, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(462, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(462, 155);
						// SugarCpp.g:462:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(462, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(462, 163);
						// SugarCpp.g:462:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(462, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:463:46: chain_list
					{
					DebugLocation(463, 46);
					PushFollow(Follow._chain_list_in_cmp_expr3602);
					chain_list297=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list297.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, chain_list, b, 99
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 463:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(463, 60);
						// SugarCpp.g:463:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(463, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(463, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(463, 84);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(463, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(463, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:464:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, 99, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 464:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(464, 19);
						// SugarCpp.g:464:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(464, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(464, 30);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(464, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(464, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(120); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:465:27: op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(465, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr3679);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(465, 42);
				PushFollow(Follow._infix_expr_in_cmp_expr3683);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(465, 54);
				// SugarCpp.g:465:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, false);
				int LA121_0 = input.LA(1);

				if ((LA121_0==73||LA121_0==99||LA121_0==103||LA121_0==105||(LA121_0>=107 && LA121_0<=108)||(LA121_0>=133 && LA121_0<=134)))
				{
					alt121 = 1;
				}
				else if ((LA121_0==DEDENT||LA121_0==INDENT||LA121_0==NEWLINE||(LA121_0>=75 && LA121_0<=78)||LA121_0==80||LA121_0==82||(LA121_0>=85 && LA121_0<=86)||LA121_0==89||(LA121_0>=95 && LA121_0<=96)||LA121_0==98||LA121_0==102||LA121_0==104||(LA121_0>=110 && LA121_0<=111)||(LA121_0>=115 && LA121_0<=117)||LA121_0==119||LA121_0==121||LA121_0==126||LA121_0==131||LA121_0==138||(LA121_0>=140 && LA121_0<=141)||LA121_0==144||LA121_0==146||(LA121_0>=148 && LA121_0<=151)))
				{
					alt121 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 121, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:465:56: chain_list
					{
					DebugLocation(465, 56);
					PushFollow(Follow._chain_list_in_cmp_expr3687);
					chain_list298=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list298.Tree);


					{
					// AST REWRITE
					// elements: b, chain_list, cmp_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 465:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(465, 70);
						// SugarCpp.g:465:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(465, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(465, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(465, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(465, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(465, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:466:17: 
					{

					{
					// AST REWRITE
					// elements: b, op, cmp_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 466:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(466, 20);
						// SugarCpp.g:466:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(466, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(466, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(466, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(466, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(121); }


				}
				break;

			}
			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 57);
			LeaveRule("cmp_expr", 57);
			LeaveRule_cmp_expr();
		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:471:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 58);
		TraceIn("infix_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func299 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(471, 1);
		try
		{
			// SugarCpp.g:472:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:472:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(472, 4);
			// SugarCpp.g:472:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:472:5: a= shift_expr
			{
			DebugLocation(472, 6);
			PushFollow(Follow._shift_expr_in_infix_expr3778);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 472:18: -> $a
			{
				DebugLocation(472, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(472, 25);
			// SugarCpp.g:472:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==118))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:472:27: infix_func b= shift_expr
					{
					DebugLocation(472, 27);
					PushFollow(Follow._infix_func_in_infix_expr3788);
					infix_func299=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func299.Tree);
					DebugLocation(472, 39);
					PushFollow(Follow._shift_expr_in_infix_expr3792);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, b, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 472:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(472, 55);
						// SugarCpp.g:472:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(472, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(472, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(472, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(472, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 58);
			LeaveRule("infix_expr", 58);
			LeaveRule_infix_expr();
		}
		DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:475:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 59);
		TraceIn("shift_expr_op", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set300 = default(IToken);

		CommonTree set300_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(475, 27);
		try
		{
			// SugarCpp.g:475:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(475, 14);

			set300=(IToken)input.LT(1);
			if (input.LA(1)==101||input.LA(1)==109)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set300));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 59);
			LeaveRule("shift_expr_op", 59);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(475, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:476:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 60);
		TraceIn("shift_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op301 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(476, 1);
		try
		{
			// SugarCpp.g:477:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:477:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(477, 4);
			// SugarCpp.g:477:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:477:5: a= add_expr
			{
			DebugLocation(477, 6);
			PushFollow(Follow._add_expr_in_shift_expr3835);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 477:16: -> $a
			{
				DebugLocation(477, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(477, 23);
			// SugarCpp.g:477:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==101||LA124_0==109))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:477:24: shift_expr_op b= add_expr
					{
					DebugLocation(477, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr3844);
					shift_expr_op301=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op301.Tree);
					DebugLocation(477, 39);
					PushFollow(Follow._add_expr_in_shift_expr3848);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr_op, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 477:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(477, 52);
						// SugarCpp.g:477:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(477, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(477, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(477, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(477, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 60);
			LeaveRule("shift_expr", 60);
			LeaveRule_shift_expr();
		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:480:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 61);
		TraceIn("add_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal302 = default(IToken);
		IToken char_literal303 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal302_tree = default(CommonTree);
		CommonTree char_literal303_tree = default(CommonTree);
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(480, 1);
		try
		{
			// SugarCpp.g:481:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:481:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(481, 4);
			// SugarCpp.g:481:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:481:5: a= mul_expr
			{
			DebugLocation(481, 6);
			PushFollow(Follow._mul_expr_in_add_expr3878);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 481:16: -> $a
			{
				DebugLocation(481, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(481, 23);
			// SugarCpp.g:481:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=3;
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==83))
				{
					alt125 = 1;
				}
				else if ((LA125_0==87))
				{
					alt125 = 2;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:25: '+' b= mul_expr
					{
					DebugLocation(481, 25);
					char_literal302=(IToken)Match(input,83,Follow._83_in_add_expr3888);  
					stream_83.Add(char_literal302);

					DebugLocation(481, 30);
					PushFollow(Follow._mul_expr_in_add_expr3892);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 83
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 481:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(481, 43);
						// SugarCpp.g:481:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(481, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(481, 54);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(481, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(481, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:482:10: '-' b= mul_expr
					{
					DebugLocation(482, 10);
					char_literal303=(IToken)Match(input,87,Follow._87_in_add_expr3917);  
					stream_87.Add(char_literal303);

					DebugLocation(482, 15);
					PushFollow(Follow._mul_expr_in_add_expr3921);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 87
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 482:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(482, 28);
						// SugarCpp.g:482:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(482, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(482, 39);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(482, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(482, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 61);
			LeaveRule("add_expr", 61);
			LeaveRule_add_expr();
		}
		DebugLocation(484, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:486:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 62);
		TraceIn("mul_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal304 = default(IToken);
		IToken char_literal305 = default(IToken);
		IToken char_literal306 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal304_tree = default(CommonTree);
		CommonTree char_literal305_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(486, 1);
		try
		{
			// SugarCpp.g:487:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:487:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(487, 4);
			// SugarCpp.g:487:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:487:5: a= selector_expr
			{
			DebugLocation(487, 6);
			PushFollow(Follow._selector_expr_in_mul_expr3959);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 487:21: -> $a
			{
				DebugLocation(487, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(487, 28);
			// SugarCpp.g:487:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=4;
				try { DebugEnterDecision(126, false);
				switch (input.LA(1))
				{
				case 81:
					{
					alt126 = 1;
					}
					break;
				case 94:
					{
					alt126 = 2;
					}
					break;
				case 74:
					{
					alt126 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:487:30: '*' b= selector_expr
					{
					DebugLocation(487, 30);
					char_literal304=(IToken)Match(input,81,Follow._81_in_mul_expr3969);  
					stream_81.Add(char_literal304);

					DebugLocation(487, 35);
					PushFollow(Follow._selector_expr_in_mul_expr3973);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 81, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 487:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(487, 53);
						// SugarCpp.g:487:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(487, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(487, 64);
						adaptor.AddChild(root_1, stream_81.NextNode());
						DebugLocation(487, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(487, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:488:15: '/' b= selector_expr
					{
					DebugLocation(488, 15);
					char_literal305=(IToken)Match(input,94,Follow._94_in_mul_expr4003);  
					stream_94.Add(char_literal305);

					DebugLocation(488, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4007);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 94, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 488:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(488, 38);
						// SugarCpp.g:488:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(488, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(488, 49);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(488, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(488, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:489:15: '%' b= selector_expr
					{
					DebugLocation(489, 15);
					char_literal306=(IToken)Match(input,74,Follow._74_in_mul_expr4037);  
					stream_74.Add(char_literal306);

					DebugLocation(489, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4041);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 74
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 489:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(489, 38);
						// SugarCpp.g:489:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(489, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(489, 49);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(489, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(489, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 62);
			LeaveRule("mul_expr", 62);
			LeaveRule_mul_expr();
		}
		DebugLocation(491, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:493:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 63);
		TraceIn("selector_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal307 = default(IToken);
		IToken string_literal308 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal307_tree = default(CommonTree);
		CommonTree string_literal308_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(493, 1);
		try
		{
			// SugarCpp.g:494:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:494:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(494, 4);
			// SugarCpp.g:494:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:494:5: a= cast_expr
			{
			DebugLocation(494, 6);
			PushFollow(Follow._cast_expr_in_selector_expr4084);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 494:17: -> $a
			{
				DebugLocation(494, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(494, 24);
			// SugarCpp.g:494:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=3;
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==91))
				{
					alt127 = 1;
				}
				else if ((LA127_0==93))
				{
					alt127 = 2;
				}


				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:494:26: '->*' b= ident
					{
					DebugLocation(494, 26);
					string_literal307=(IToken)Match(input,91,Follow._91_in_selector_expr4094);  
					stream_91.Add(string_literal307);

					DebugLocation(494, 33);
					PushFollow(Follow._ident_in_selector_expr4098);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 91, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 494:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(494, 43);
						// SugarCpp.g:494:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(494, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(494, 57);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(494, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(494, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:495:11: '.*' b= ident
					{
					DebugLocation(495, 11);
					string_literal308=(IToken)Match(input,93,Follow._93_in_selector_expr4124);  
					stream_93.Add(string_literal308);

					DebugLocation(495, 18);
					PushFollow(Follow._ident_in_selector_expr4129);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 93, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 495:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(495, 28);
						// SugarCpp.g:495:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(495, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(495, 42);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(495, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(495, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 63);
			LeaveRule("selector_expr", 63);
			LeaveRule_selector_expr();
		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:499:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 64);
		TraceIn("cast_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal309 = default(IToken);
		IToken char_literal310 = default(IToken);
		IToken char_literal312 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name311 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal309_tree = default(CommonTree);
		CommonTree char_literal310_tree = default(CommonTree);
		CommonTree char_literal312_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(499, 1);
		try
		{
			// SugarCpp.g:500:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:500:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(500, 4);
			// SugarCpp.g:500:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:500:5: a= prefix_expr
			{
			DebugLocation(500, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr4169);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 500:19: -> $a
			{
				DebugLocation(500, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(500, 26);
			// SugarCpp.g:500:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt128=2;
			try { DebugEnterSubRule(128);
			try { DebugEnterDecision(128, false);
			int LA128_0 = input.LA(1);

			if ((LA128_0==120))
			{
				alt128 = 1;
			}
			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:500:27: 'as' '(' type_name ')'
				{
				DebugLocation(500, 27);
				string_literal309=(IToken)Match(input,120,Follow._120_in_cast_expr4178);  
				stream_120.Add(string_literal309);

				DebugLocation(500, 32);
				char_literal310=(IToken)Match(input,79,Follow._79_in_cast_expr4180);  
				stream_79.Add(char_literal310);

				DebugLocation(500, 36);
				PushFollow(Follow._type_name_in_cast_expr4182);
				type_name311=type_name();
				PopFollow();

				stream_type_name.Add(type_name311.Tree);
				DebugLocation(500, 46);
				char_literal312=(IToken)Match(input,80,Follow._80_in_cast_expr4184);  
				stream_80.Add(char_literal312);



				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 500:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(500, 53);
					// SugarCpp.g:500:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(500, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(500, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(500, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 64);
			LeaveRule("cast_expr", 64);
			LeaveRule_cast_expr();
		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:503:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 65);
		TraceIn("prefix_expr_op", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set313 = default(IToken);

		CommonTree set313_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(503, 63);
		try
		{
			// SugarCpp.g:503:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(503, 15);

			set313=(IToken)input.LT(1);
			if (input.LA(1)==72||input.LA(1)==77||input.LA(1)==81||(input.LA(1)>=83 && input.LA(1)<=84)||(input.LA(1)>=87 && input.LA(1)<=88)||input.LA(1)==152)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set313));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 65);
			LeaveRule("prefix_expr_op", 65);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(503, 63);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:504:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 66);
		TraceIn("prefix_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal316 = default(IToken);
		IToken char_literal318 = default(IToken);
		IToken char_literal320 = default(IToken);
		IToken char_literal321 = default(IToken);
		IToken char_literal323 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op314 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr315 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list319 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list322 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr324 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal316_tree = default(CommonTree);
		CommonTree char_literal318_tree = default(CommonTree);
		CommonTree char_literal320_tree = default(CommonTree);
		CommonTree char_literal321_tree = default(CommonTree);
		CommonTree char_literal323_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(504, 1);
		try
		{
			// SugarCpp.g:505:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt131=3;
			try { DebugEnterDecision(131, false);
			switch (input.LA(1))
			{
			case 72:
			case 77:
			case 81:
			case 83:
			case 84:
			case 87:
			case 88:
			case 152:
				{
				alt131 = 1;
				}
				break;
			case 137:
				{
				alt131 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 79:
			case 113:
				{
				alt131 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 131, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:505:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(505, 4);
				// SugarCpp.g:505:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:505:5: prefix_expr_op prefix_expr
				{
				DebugLocation(505, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr4242);
				prefix_expr_op314=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op314.Tree);
				DebugLocation(505, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr4244);
				prefix_expr315=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr315.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 505:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(505, 36);
					// SugarCpp.g:505:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(505, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(505, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(505, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:506:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(506, 4);
				string_literal316=(IToken)Match(input,137,Follow._137_in_prefix_expr4260);  
				stream_137.Add(string_literal316);

				DebugLocation(506, 10);
				PushFollow(Follow._type_name_in_prefix_expr4262);
				type_name317=type_name();
				PopFollow();

				stream_type_name.Add(type_name317.Tree);
				DebugLocation(506, 20);
				// SugarCpp.g:506:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==79))
				{
					alt130 = 1;
				}
				else if ((LA130_0==114))
				{
					alt130 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 130, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:506:22: '(' ( expr_list )? ')'
					{
					DebugLocation(506, 22);
					char_literal318=(IToken)Match(input,79,Follow._79_in_prefix_expr4266);  
					stream_79.Add(char_literal318);

					DebugLocation(506, 26);
					// SugarCpp.g:506:26: ( expr_list )?
					int alt129=2;
					try { DebugEnterSubRule(129);
					try { DebugEnterDecision(129, false);
					int LA129_0 = input.LA(1);

					if ((LA129_0==IDENT||LA129_0==NUMBER||LA129_0==STRING||LA129_0==72||LA129_0==77||LA129_0==79||LA129_0==81||(LA129_0>=83 && LA129_0<=84)||(LA129_0>=87 && LA129_0<=88)||(LA129_0>=113 && LA129_0<=114)||LA129_0==137||LA129_0==152))
					{
						alt129 = 1;
					}
					} finally { DebugExitDecision(129); }
					switch (alt129)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:506:26: expr_list
						{
						DebugLocation(506, 26);
						PushFollow(Follow._expr_list_in_prefix_expr4268);
						expr_list319=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list319.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(129); }

					DebugLocation(506, 37);
					char_literal320=(IToken)Match(input,80,Follow._80_in_prefix_expr4271);  
					stream_80.Add(char_literal320);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 506:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(506, 44);
						// SugarCpp.g:506:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(506, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(506, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(506, 70);
						// SugarCpp.g:506:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(506, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:507:10: '[' expr_list ']'
					{
					DebugLocation(507, 10);
					char_literal321=(IToken)Match(input,114,Follow._114_in_prefix_expr4293);  
					stream_114.Add(char_literal321);

					DebugLocation(507, 14);
					PushFollow(Follow._expr_list_in_prefix_expr4295);
					expr_list322=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list322.Tree);
					DebugLocation(507, 24);
					char_literal323=(IToken)Match(input,115,Follow._115_in_prefix_expr4297);  
					stream_115.Add(char_literal323);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 507:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(507, 31);
						// SugarCpp.g:507:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(507, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(507, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(507, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(130); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:508:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(508, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr4313);
				suffix_expr324=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr324.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 66);
			LeaveRule("prefix_expr", 66);
			LeaveRule_prefix_expr();
		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:511:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 67);
		TraceIn("expr_list", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal326 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr325 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr327 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal326_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(511, 1);
		try
		{
			// SugarCpp.g:512:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:512:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(512, 4);
			PushFollow(Follow._expr_in_expr_list4325);
			expr325=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr325.Tree);
			DebugLocation(512, 9);
			// SugarCpp.g:512:9: ( ',' ! expr )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==86))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:512:10: ',' ! expr
					{
					DebugLocation(512, 13);
					char_literal326=(IToken)Match(input,86,Follow._86_in_expr_list4328); 
					DebugLocation(512, 15);
					PushFollow(Follow._expr_in_expr_list4331);
					expr327=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr327.Tree);

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 67);
			LeaveRule("expr_list", 67);
			LeaveRule_expr_list();
		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:515:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 68);
		TraceIn("suffix_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal328 = default(IToken);
		IToken string_literal329 = default(IToken);
		IToken char_literal330 = default(IToken);
		IToken string_literal332 = default(IToken);
		IToken char_literal334 = default(IToken);
		IToken char_literal336 = default(IToken);
		IToken char_literal337 = default(IToken);
		IToken char_literal339 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident331 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list338 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal328_tree = default(CommonTree);
		CommonTree string_literal329_tree = default(CommonTree);
		CommonTree char_literal330_tree = default(CommonTree);
		CommonTree string_literal332_tree = default(CommonTree);
		CommonTree char_literal334_tree = default(CommonTree);
		CommonTree char_literal336_tree = default(CommonTree);
		CommonTree char_literal337_tree = default(CommonTree);
		CommonTree char_literal339_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(515, 1);
		try
		{
			// SugarCpp.g:516:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:516:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			{
			DebugLocation(516, 4);
			// SugarCpp.g:516:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:516:5: a= atom_expr
			{
			DebugLocation(516, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr4347);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 516:17: -> $a
			{
				DebugLocation(516, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(516, 24);
			// SugarCpp.g:516:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			try { DebugEnterSubRule(135);
			while (true)
			{
				int alt135=7;
				try { DebugEnterDecision(135, false);
				switch (input.LA(1))
				{
				case 84:
					{
					alt135 = 1;
					}
					break;
				case 88:
					{
					alt135 = 2;
					}
					break;
				case 92:
					{
					alt135 = 3;
					}
					break;
				case 90:
					{
					alt135 = 4;
					}
					break;
				case 79:
					{
					alt135 = 5;
					}
					break;
				case 114:
					{
					alt135 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(135); }
				switch ( alt135 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:516:26: '++'
					{
					DebugLocation(516, 26);
					string_literal328=(IToken)Match(input,84,Follow._84_in_suffix_expr4357);  
					stream_84.Add(string_literal328);



					{
					// AST REWRITE
					// elements: suffix_expr, 84
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 516:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(516, 34);
						// SugarCpp.g:516:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(516, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(516, 48);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(516, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:517:14: '--'
					{
					DebugLocation(517, 14);
					string_literal329=(IToken)Match(input,88,Follow._88_in_suffix_expr4383);  
					stream_88.Add(string_literal329);



					{
					// AST REWRITE
					// elements: 88, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 517:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(517, 22);
						// SugarCpp.g:517:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(517, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(517, 36);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(517, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:518:11: '.' ident
					{
					DebugLocation(518, 11);
					char_literal330=(IToken)Match(input,92,Follow._92_in_suffix_expr4406);  
					stream_92.Add(char_literal330);

					DebugLocation(518, 15);
					PushFollow(Follow._ident_in_suffix_expr4408);
					ident331=ident();
					PopFollow();

					stream_ident.Add(ident331.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 92
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 518:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(518, 24);
						// SugarCpp.g:518:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(518, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(518, 38);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(518, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(518, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:519:11: '->' ident
					{
					DebugLocation(519, 11);
					string_literal332=(IToken)Match(input,90,Follow._90_in_suffix_expr4433);  
					stream_90.Add(string_literal332);

					DebugLocation(519, 16);
					PushFollow(Follow._ident_in_suffix_expr4435);
					ident333=ident();
					PopFollow();

					stream_ident.Add(ident333.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 90
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 519:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(519, 25);
						// SugarCpp.g:519:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(519, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(519, 39);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(519, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(519, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:520:11: '(' ( expr_list )? ')'
					{
					DebugLocation(520, 11);
					char_literal334=(IToken)Match(input,79,Follow._79_in_suffix_expr4460);  
					stream_79.Add(char_literal334);

					DebugLocation(520, 15);
					// SugarCpp.g:520:15: ( expr_list )?
					int alt133=2;
					try { DebugEnterSubRule(133);
					try { DebugEnterDecision(133, false);
					int LA133_0 = input.LA(1);

					if ((LA133_0==IDENT||LA133_0==NUMBER||LA133_0==STRING||LA133_0==72||LA133_0==77||LA133_0==79||LA133_0==81||(LA133_0>=83 && LA133_0<=84)||(LA133_0>=87 && LA133_0<=88)||(LA133_0>=113 && LA133_0<=114)||LA133_0==137||LA133_0==152))
					{
						alt133 = 1;
					}
					} finally { DebugExitDecision(133); }
					switch (alt133)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:520:15: expr_list
						{
						DebugLocation(520, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4462);
						expr_list335=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list335.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(133); }

					DebugLocation(520, 26);
					char_literal336=(IToken)Match(input,80,Follow._80_in_suffix_expr4465);  
					stream_80.Add(char_literal336);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 520:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(520, 33);
						// SugarCpp.g:520:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(520, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(520, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(520, 58);
						// SugarCpp.g:520:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(520, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:521:11: '[' ( expr_list )? ']'
					{
					DebugLocation(521, 11);
					char_literal337=(IToken)Match(input,114,Follow._114_in_suffix_expr4489);  
					stream_114.Add(char_literal337);

					DebugLocation(521, 15);
					// SugarCpp.g:521:15: ( expr_list )?
					int alt134=2;
					try { DebugEnterSubRule(134);
					try { DebugEnterDecision(134, false);
					int LA134_0 = input.LA(1);

					if ((LA134_0==IDENT||LA134_0==NUMBER||LA134_0==STRING||LA134_0==72||LA134_0==77||LA134_0==79||LA134_0==81||(LA134_0>=83 && LA134_0<=84)||(LA134_0>=87 && LA134_0<=88)||(LA134_0>=113 && LA134_0<=114)||LA134_0==137||LA134_0==152))
					{
						alt134 = 1;
					}
					} finally { DebugExitDecision(134); }
					switch (alt134)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:521:15: expr_list
						{
						DebugLocation(521, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4491);
						expr_list338=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list338.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(134); }

					DebugLocation(521, 26);
					char_literal339=(IToken)Match(input,115,Follow._115_in_suffix_expr4494);  
					stream_115.Add(char_literal339);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 521:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(521, 33);
						// SugarCpp.g:521:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(521, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(521, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(521, 58);
						// SugarCpp.g:521:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(521, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop135;
				}
			}

			loop135:
				;

			} finally { DebugExitSubRule(135); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 68);
			LeaveRule("suffix_expr", 68);
			LeaveRule_suffix_expr();
		}
		DebugLocation(524, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:526:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 69);
		TraceIn("atom_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER340 = default(IToken);
		IToken STRING342 = default(IToken);
		IToken char_literal343 = default(IToken);
		IToken char_literal345 = default(IToken);
		IToken char_literal347 = default(IToken);
		IToken char_literal349 = default(IToken);
		IToken char_literal350 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident341 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr348 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER340_tree = default(CommonTree);
		CommonTree STRING342_tree = default(CommonTree);
		CommonTree char_literal343_tree = default(CommonTree);
		CommonTree char_literal345_tree = default(CommonTree);
		CommonTree char_literal347_tree = default(CommonTree);
		CommonTree char_literal349_tree = default(CommonTree);
		CommonTree char_literal350_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(526, 1);
		try
		{
			// SugarCpp.g:527:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt138=5;
			try { DebugEnterDecision(138, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt138 = 1;
				}
				break;
			case IDENT:
				{
				alt138 = 2;
				}
				break;
			case STRING:
				{
				alt138 = 3;
				}
				break;
			case 113:
				{
				alt138 = 4;
				}
				break;
			case 79:
				{
				alt138 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 138, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:527:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(527, 4);
				NUMBER340=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr4540); 
				NUMBER340_tree = (CommonTree)adaptor.Create(NUMBER340);
				adaptor.AddChild(root_0, NUMBER340_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:528:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(528, 4);
				PushFollow(Follow._ident_in_atom_expr4545);
				ident341=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident341.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:529:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(529, 4);
				STRING342=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr4550); 
				STRING342_tree = (CommonTree)adaptor.Create(STRING342);
				adaptor.AddChild(root_0, STRING342_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:530:4: '@' ident
				{
				DebugLocation(530, 4);
				char_literal343=(IToken)Match(input,113,Follow._113_in_atom_expr4555);  
				stream_113.Add(char_literal343);

				DebugLocation(530, 8);
				PushFollow(Follow._ident_in_atom_expr4557);
				ident344=ident();
				PopFollow();

				stream_ident.Add(ident344.Tree);


				{
				// AST REWRITE
				// elements: 113, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 530:14: -> ^( '@' ident )
				{
					DebugLocation(530, 17);
					// SugarCpp.g:530:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(530, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(530, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:531:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(531, 4);
				char_literal345=(IToken)Match(input,79,Follow._79_in_atom_expr4570);  
				stream_79.Add(char_literal345);

				DebugLocation(531, 8);
				PushFollow(Follow._expr_in_atom_expr4572);
				expr346=expr();
				PopFollow();

				stream_expr.Add(expr346.Tree);
				DebugLocation(531, 13);
				// SugarCpp.g:531:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==86))
				{
					alt137 = 1;
				}
				else if ((LA137_0==80))
				{
					alt137 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:531:15: ( ',' expr )+ ')'
					{
					DebugLocation(531, 15);
					// SugarCpp.g:531:15: ( ',' expr )+
					int cnt136=0;
					try { DebugEnterSubRule(136);
					while (true)
					{
						int alt136=2;
						try { DebugEnterDecision(136, false);
						int LA136_0 = input.LA(1);

						if ((LA136_0==86))
						{
							alt136 = 1;
						}


						} finally { DebugExitDecision(136); }
						switch (alt136)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:531:16: ',' expr
							{
							DebugLocation(531, 16);
							char_literal347=(IToken)Match(input,86,Follow._86_in_atom_expr4577);  
							stream_86.Add(char_literal347);

							DebugLocation(531, 20);
							PushFollow(Follow._expr_in_atom_expr4579);
							expr348=expr();
							PopFollow();

							stream_expr.Add(expr348.Tree);

							}
							break;

						default:
							if (cnt136 >= 1)
								goto loop136;

							EarlyExitException eee136 = new EarlyExitException( 136, input );
							DebugRecognitionException(eee136);
							throw eee136;
						}
						cnt136++;
					}
					loop136:
						;

					} finally { DebugExitSubRule(136); }

					DebugLocation(531, 27);
					char_literal349=(IToken)Match(input,80,Follow._80_in_atom_expr4583);  
					stream_80.Add(char_literal349);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 531:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(531, 34);
						// SugarCpp.g:531:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(531, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(531, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(531, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:532:15: ')'
					{
					DebugLocation(532, 15);
					char_literal350=(IToken)Match(input,80,Follow._80_in_atom_expr4608);  
					stream_80.Add(char_literal350);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 532:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(532, 22);
						// SugarCpp.g:532:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(532, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(532, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(137); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 69);
			LeaveRule("atom_expr", 69);
			LeaveRule_atom_expr();
		}
		DebugLocation(534, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:536:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 70);
		TraceIn("lvalue_item", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal351 = default(IToken);
		IToken string_literal352 = default(IToken);
		IToken char_literal353 = default(IToken);
		IToken string_literal355 = default(IToken);
		IToken char_literal358 = default(IToken);
		IToken char_literal360 = default(IToken);
		IToken char_literal361 = default(IToken);
		IToken char_literal363 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident354 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident356 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter357 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list359 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list362 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal351_tree = default(CommonTree);
		CommonTree string_literal352_tree = default(CommonTree);
		CommonTree char_literal353_tree = default(CommonTree);
		CommonTree string_literal355_tree = default(CommonTree);
		CommonTree char_literal358_tree = default(CommonTree);
		CommonTree char_literal360_tree = default(CommonTree);
		CommonTree char_literal361_tree = default(CommonTree);
		CommonTree char_literal363_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(536, 1);
		try
		{
			// SugarCpp.g:537:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:537:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(537, 4);
			// SugarCpp.g:537:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:537:5: a= lvalue_atom
			{
			DebugLocation(537, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item4638);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 537:19: -> $a
			{
				DebugLocation(537, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(537, 26);
			// SugarCpp.g:537:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=7;
				try { DebugEnterDecision(142, false);
				switch (input.LA(1))
				{
				case 84:
					{
					alt142 = 1;
					}
					break;
				case 88:
					{
					alt142 = 2;
					}
					break;
				case 92:
					{
					alt142 = 3;
					}
					break;
				case 90:
					{
					alt142 = 4;
					}
					break;
				case 79:
				case 99:
					{
					alt142 = 5;
					}
					break;
				case 114:
					{
					alt142 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(142); }
				switch ( alt142 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:537:28: '++'
					{
					DebugLocation(537, 28);
					string_literal351=(IToken)Match(input,84,Follow._84_in_lvalue_item4648);  
					stream_84.Add(string_literal351);



					{
					// AST REWRITE
					// elements: lvalue_item, 84
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 537:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(537, 36);
						// SugarCpp.g:537:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(537, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(537, 50);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(537, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:538:16: '--'
					{
					DebugLocation(538, 16);
					string_literal352=(IToken)Match(input,88,Follow._88_in_lvalue_item4676);  
					stream_88.Add(string_literal352);



					{
					// AST REWRITE
					// elements: 88, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 538:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(538, 24);
						// SugarCpp.g:538:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(538, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(538, 38);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(538, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:539:13: '.' ident
					{
					DebugLocation(539, 13);
					char_literal353=(IToken)Match(input,92,Follow._92_in_lvalue_item4701);  
					stream_92.Add(char_literal353);

					DebugLocation(539, 17);
					PushFollow(Follow._ident_in_lvalue_item4703);
					ident354=ident();
					PopFollow();

					stream_ident.Add(ident354.Tree);


					{
					// AST REWRITE
					// elements: lvalue_item, ident, 92
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 539:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(539, 26);
						// SugarCpp.g:539:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(539, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(539, 40);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(539, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(539, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:540:13: '->' ident
					{
					DebugLocation(540, 13);
					string_literal355=(IToken)Match(input,90,Follow._90_in_lvalue_item4730);  
					stream_90.Add(string_literal355);

					DebugLocation(540, 18);
					PushFollow(Follow._ident_in_lvalue_item4732);
					ident356=ident();
					PopFollow();

					stream_ident.Add(ident356.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_item, 90
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 540:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(540, 27);
						// SugarCpp.g:540:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(540, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(540, 41);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(540, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(540, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:541:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(541, 13);
					// SugarCpp.g:541:13: ( generic_parameter )?
					int alt139=2;
					try { DebugEnterSubRule(139);
					try { DebugEnterDecision(139, false);
					int LA139_0 = input.LA(1);

					if ((LA139_0==99))
					{
						alt139 = 1;
					}
					} finally { DebugExitDecision(139); }
					switch (alt139)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:541:13: generic_parameter
						{
						DebugLocation(541, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item4759);
						generic_parameter357=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter357.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(139); }

					DebugLocation(541, 32);
					char_literal358=(IToken)Match(input,79,Follow._79_in_lvalue_item4762);  
					stream_79.Add(char_literal358);

					DebugLocation(541, 36);
					// SugarCpp.g:541:36: ( expr_list )?
					int alt140=2;
					try { DebugEnterSubRule(140);
					try { DebugEnterDecision(140, false);
					int LA140_0 = input.LA(1);

					if ((LA140_0==IDENT||LA140_0==NUMBER||LA140_0==STRING||LA140_0==72||LA140_0==77||LA140_0==79||LA140_0==81||(LA140_0>=83 && LA140_0<=84)||(LA140_0>=87 && LA140_0<=88)||(LA140_0>=113 && LA140_0<=114)||LA140_0==137||LA140_0==152))
					{
						alt140 = 1;
					}
					} finally { DebugExitDecision(140); }
					switch (alt140)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:541:36: expr_list
						{
						DebugLocation(541, 36);
						PushFollow(Follow._expr_list_in_lvalue_item4764);
						expr_list359=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list359.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(140); }

					DebugLocation(541, 47);
					char_literal360=(IToken)Match(input,80,Follow._80_in_lvalue_item4767);  
					stream_80.Add(char_literal360);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 541:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(541, 54);
						// SugarCpp.g:541:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(541, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(541, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(541, 79);
						// SugarCpp.g:541:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(541, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(541, 98);
						// SugarCpp.g:541:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(541, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:542:13: '[' ( expr_list )? ']'
					{
					DebugLocation(542, 13);
					char_literal361=(IToken)Match(input,114,Follow._114_in_lvalue_item4796);  
					stream_114.Add(char_literal361);

					DebugLocation(542, 17);
					// SugarCpp.g:542:17: ( expr_list )?
					int alt141=2;
					try { DebugEnterSubRule(141);
					try { DebugEnterDecision(141, false);
					int LA141_0 = input.LA(1);

					if ((LA141_0==IDENT||LA141_0==NUMBER||LA141_0==STRING||LA141_0==72||LA141_0==77||LA141_0==79||LA141_0==81||(LA141_0>=83 && LA141_0<=84)||(LA141_0>=87 && LA141_0<=88)||(LA141_0>=113 && LA141_0<=114)||LA141_0==137||LA141_0==152))
					{
						alt141 = 1;
					}
					} finally { DebugExitDecision(141); }
					switch (alt141)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:542:17: expr_list
						{
						DebugLocation(542, 17);
						PushFollow(Follow._expr_list_in_lvalue_item4798);
						expr_list362=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list362.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(141); }

					DebugLocation(542, 28);
					char_literal363=(IToken)Match(input,115,Follow._115_in_lvalue_item4801);  
					stream_115.Add(char_literal363);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 542:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(542, 35);
						// SugarCpp.g:542:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(542, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(542, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(542, 60);
						// SugarCpp.g:542:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(542, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop142;
				}
			}

			loop142:
				;

			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 70);
			LeaveRule("lvalue_item", 70);
			LeaveRule_lvalue_item();
		}
		DebugLocation(544, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:546:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 71);
		TraceIn("lvalue_atom", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal365 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident364 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident366 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal365_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(546, 1);
		try
		{
			// SugarCpp.g:547:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt143=2;
			try { DebugEnterDecision(143, false);
			int LA143_0 = input.LA(1);

			if ((LA143_0==IDENT))
			{
				alt143 = 1;
			}
			else if ((LA143_0==113))
			{
				alt143 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 143, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:547:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(547, 4);
				PushFollow(Follow._ident_in_lvalue_atom4840);
				ident364=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident364.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:548:4: '@' ident
				{
				DebugLocation(548, 4);
				char_literal365=(IToken)Match(input,113,Follow._113_in_lvalue_atom4845);  
				stream_113.Add(char_literal365);

				DebugLocation(548, 8);
				PushFollow(Follow._ident_in_lvalue_atom4847);
				ident366=ident();
				PopFollow();

				stream_ident.Add(ident366.Tree);


				{
				// AST REWRITE
				// elements: ident, 113
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 548:14: -> ^( '@' ident )
				{
					DebugLocation(548, 17);
					// SugarCpp.g:548:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(548, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(548, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 71);
			LeaveRule("lvalue_atom", 71);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(549, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:551:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 72);
		TraceIn("lvalue", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal367 = default(IToken);
		IToken char_literal369 = default(IToken);
		IToken char_literal371 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item368 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item370 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item372 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal367_tree = default(CommonTree);
		CommonTree char_literal369_tree = default(CommonTree);
		CommonTree char_literal371_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(551, 1);
		try
		{
			// SugarCpp.g:552:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt145=2;
			try { DebugEnterDecision(145, false);
			int LA145_0 = input.LA(1);

			if ((LA145_0==79))
			{
				alt145 = 1;
			}
			else if ((LA145_0==IDENT||LA145_0==113))
			{
				alt145 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 145, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:552:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(552, 4);
				char_literal367=(IToken)Match(input,79,Follow._79_in_lvalue4866);  
				stream_79.Add(char_literal367);

				DebugLocation(552, 8);
				PushFollow(Follow._lvalue_item_in_lvalue4868);
				lvalue_item368=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item368.Tree);
				DebugLocation(552, 20);
				// SugarCpp.g:552:20: ( ',' lvalue_item )+
				int cnt144=0;
				try { DebugEnterSubRule(144);
				while (true)
				{
					int alt144=2;
					try { DebugEnterDecision(144, false);
					int LA144_0 = input.LA(1);

					if ((LA144_0==86))
					{
						alt144 = 1;
					}


					} finally { DebugExitDecision(144); }
					switch (alt144)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:552:21: ',' lvalue_item
						{
						DebugLocation(552, 21);
						char_literal369=(IToken)Match(input,86,Follow._86_in_lvalue4871);  
						stream_86.Add(char_literal369);

						DebugLocation(552, 25);
						PushFollow(Follow._lvalue_item_in_lvalue4873);
						lvalue_item370=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item370.Tree);

						}
						break;

					default:
						if (cnt144 >= 1)
							goto loop144;

						EarlyExitException eee144 = new EarlyExitException( 144, input );
						DebugRecognitionException(eee144);
						throw eee144;
					}
					cnt144++;
				}
				loop144:
					;

				} finally { DebugExitSubRule(144); }

				DebugLocation(552, 39);
				char_literal371=(IToken)Match(input,80,Follow._80_in_lvalue4877);  
				stream_80.Add(char_literal371);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 552:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(552, 46);
					// SugarCpp.g:552:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(552, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(552, 60);
					// SugarCpp.g:552:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(552, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:553:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(553, 4);
				PushFollow(Follow._lvalue_item_in_lvalue4891);
				lvalue_item372=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item372.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 72);
			LeaveRule("lvalue", 72);
			LeaveRule_lvalue();
		}
		DebugLocation(554, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:556:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 73);
		TraceIn("ident", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT373 = default(IToken);
		IToken string_literal374 = default(IToken);
		IToken IDENT375 = default(IToken);

		CommonTree IDENT373_tree = default(CommonTree);
		CommonTree string_literal374_tree = default(CommonTree);
		CommonTree IDENT375_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(556, 1);
		try
		{
			// SugarCpp.g:557:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:557:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(557, 4);
			IDENT373=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4902); 
			IDENT373_tree = (CommonTree)adaptor.Create(IDENT373);
			adaptor.AddChild(root_0, IDENT373_tree);
			DebugLocation(557, 10);
			// SugarCpp.g:557:10: ( '::' IDENT )*
			try { DebugEnterSubRule(146);
			while (true)
			{
				int alt146=2;
				try { DebugEnterDecision(146, false);
				int LA146_0 = input.LA(1);

				if ((LA146_0==97))
				{
					alt146 = 1;
				}


				} finally { DebugExitDecision(146); }
				switch ( alt146 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:557:11: '::' IDENT
					{
					DebugLocation(557, 11);
					string_literal374=(IToken)Match(input,97,Follow._97_in_ident4905); 
					string_literal374_tree = (CommonTree)adaptor.Create(string_literal374);
					adaptor.AddChild(root_0, string_literal374_tree);
					DebugLocation(557, 16);
					IDENT375=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4907); 
					IDENT375_tree = (CommonTree)adaptor.Create(IDENT375);
					adaptor.AddChild(root_0, IDENT375_tree);

					}
					break;

				default:
					goto loop146;
				}
			}

			loop146:
				;

			} finally { DebugExitSubRule(146); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 73);
			LeaveRule("ident", 73);
			LeaveRule_ident();
		}
		DebugLocation(558, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:560:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 74);
		TraceIn("infix_func", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal376 = default(IToken);
		IToken char_literal378 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident377 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal376_tree = default(CommonTree);
		CommonTree char_literal378_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(560, 1);
		try
		{
			// SugarCpp.g:561:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:561:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(561, 7);
			char_literal376=(IToken)Match(input,118,Follow._118_in_infix_func4920); 
			DebugLocation(561, 9);
			PushFollow(Follow._ident_in_infix_func4923);
			ident377=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident377.Tree);
			DebugLocation(561, 18);
			char_literal378=(IToken)Match(input,118,Follow._118_in_infix_func4925); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 74);
			LeaveRule("infix_func", 74);
			LeaveRule_infix_func();
		}
		DebugLocation(562, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA25 dfa25;
	private DFA38 dfa38;
	private DFA53 dfa53;
	private DFA64 dfa64;
	private DFA71 dfa71;
	private DFA75 dfa75;
	private DFA88 dfa88;
	private DFA101 dfa101;
	private DFA100 dfa100;
	private DFA106 dfa106;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa25 = new DFA25( this );
		dfa38 = new DFA38( this );
		dfa53 = new DFA53( this );
		dfa64 = new DFA64( this );
		dfa71 = new DFA71( this );
		dfa75 = new DFA75( this );
		dfa88 = new DFA88( this );
		dfa101 = new DFA101( this );
		dfa100 = new DFA100( this );
		dfa106 = new DFA106( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x29\x1\xFFFF\x1\x29\x6\xFFFF\x2\x4F\x1\x29\x1\xFFFF\x3\x29\x1\x30"+
			"\x2\x29\x1\x4F\x3\x50\x2\x4F\x1\x29\x3\x50\x1\x29\x1\x56\x5\x29\x1\x56"+
			"\x1\x29\x4\x50\x1\x4F\xA\x50\x2\x29\x1\x56\x2\x29\x1\x56\x2\x29\xA\x50"+
			"\x2\x29\x2\x50";
		private const string DFA4_maxS =
			"\x1\x98\x1\x7C\x1\xFFFF\x1\x98\x6\xFFFF\x2\x73\x1\x29\x1\xFFFF\x1\x29"+
			"\x1\x36\x1\x7C\x1\x30\x1\x36\x1\x98\x1\x73\x2\x56\x1\x61\x2\x73\x1\x98"+
			"\x2\x56\x1\x61\x1\x36\x1\x73\x2\x29\x3\x36\x1\x73\x1\x29\x2\x56\x2\x61"+
			"\x1\x73\x2\x56\x1\x61\x2\x56\x1\x61\x2\x56\x2\x61\x1\x29\x1\x36\x1\x73"+
			"\x1\x29\x1\x36\x1\x73\x2\x29\x1\x61\x2\x56\x2\x61\x2\x56\x3\x61\x2\x29"+
			"\x2\x61";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x48\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x8\x3\xFFFF\x1\x9\x6\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x6\x4"+
				"\xFFFF\x1\x2",
				"\x1\xA\x52\xFFFF\x1\xB",
				"",
				"\x1\x2\x23\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x25\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x7\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x52\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x7\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x23\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x25\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x3\x6\xFFFF\x1\x1A\x41\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x10\xFFFF\x1\x2\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x7\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x7\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x7\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x7\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x7\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x7\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "203:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x4\xFFFF";
		private const string DFA25_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA25_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA25_maxS =
			"\x1\x30\x1\x98\x2\xFFFF";
		private const string DFA25_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA25_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x41\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "247:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\x4\xFFFF";
		private const string DFA38_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA38_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA38_maxS =
			"\x1\x30\x1\x98\x2\xFFFF";
		private const string DFA38_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA38_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x41\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "259:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\xF\xFFFF";
		private const string DFA53_eofS =
			"\xF\xFFFF";
		private const string DFA53_minS =
			"\x1\x29\x1\xFFFF\x1\x29\x1\xFFFF\x3\x29\x1\x4D\x3\x29\x2\x4D\x1\x29\x1"+
			"\x4D";
		private const string DFA53_maxS =
			"\x1\x98\x1\xFFFF\x1\x98\x1\xFFFF\x1\x29\x1\x91\x1\x98\x1\x72\x1\x29\x1"+
			"\x91\x1\x98\x2\x72\x1\x29\x1\x72";
		private const string DFA53_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA53_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x2\x52\xFFFF\x1\x1\x14\xFFFF\x1\x1\x6\xFFFF\x1\x3",
				"",
				"\x1\x1\x23\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x25\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x41\xFFFF\x1\x1\x10\xFFFF\x1\x1\x14\xFFFF\x1\x1",
				"\x1\x1\x23\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x25\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x52\xFFFF\x1\x1\x14\xFFFF\x1\x1",
				"\x1\x1\x23\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x20\xFFFF\x1\x1"+
				"\x25\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "288:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA64 : DFA
	{
		private const string DFA64_eotS =
			"\x9\xFFFF";
		private const string DFA64_eofS =
			"\x9\xFFFF";
		private const string DFA64_minS =
			"\x1\x29\x1\x30\x4\xFFFF\x1\x29\x1\xFFFF\x1\x30";
		private const string DFA64_maxS =
			"\x1\x93\x1\x96\x4\xFFFF\x1\x29\x1\xFFFF\x1\x96";
		private const string DFA64_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA64_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA64_transitionS =
			{
				"\x1\x1\x25\xFFFF\x1\x5\x21\xFFFF\x1\x5\x19\xFFFF\x1\x2\x3\xFFFF\x1\x4"+
				"\x3\xFFFF\x1\x3",
				"\x1\x5\x1A\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x1\x5\xC\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x1A\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x1\x5\xC\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA64_eot = DFA.UnpackEncodedString(DFA64_eotS);
		private static readonly short[] DFA64_eof = DFA.UnpackEncodedString(DFA64_eofS);
		private static readonly char[] DFA64_min = DFA.UnpackEncodedStringToUnsignedChars(DFA64_minS);
		private static readonly char[] DFA64_max = DFA.UnpackEncodedStringToUnsignedChars(DFA64_maxS);
		private static readonly short[] DFA64_accept = DFA.UnpackEncodedString(DFA64_acceptS);
		private static readonly short[] DFA64_special = DFA.UnpackEncodedString(DFA64_specialS);
		private static readonly short[][] DFA64_transition;

		static DFA64()
		{
			int numStates = DFA64_transitionS.Length;
			DFA64_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA64_transition[i] = DFA.UnpackEncodedString(DFA64_transitionS[i]);
			}
		}

		public DFA64( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 64;
			this.eot = DFA64_eot;
			this.eof = DFA64_eof;
			this.min = DFA64_min;
			this.max = DFA64_max;
			this.accept = DFA64_accept;
			this.special = DFA64_special;
			this.transition = DFA64_transition;
		}

		public override string Description { get { return "318:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\x4\xFFFF";
		private const string DFA71_eofS =
			"\x4\xFFFF";
		private const string DFA71_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA71_maxS =
			"\x1\x7F\x1\x94\x2\xFFFF";
		private const string DFA71_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA71_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x1\x4E\xFFFF\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x3\x6\xFFFF\x1\x1\x1E\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "345:35: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA75 : DFA
	{
		private const string DFA75_eotS =
			"\x4\xFFFF";
		private const string DFA75_eofS =
			"\x4\xFFFF";
		private const string DFA75_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA75_maxS =
			"\x1\x7F\x1\x94\x2\xFFFF";
		private const string DFA75_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA75_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA75_transitionS =
			{
				"\x1\x1\x4E\xFFFF\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x3\x6\xFFFF\x1\x1\x1E\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA75_eot = DFA.UnpackEncodedString(DFA75_eotS);
		private static readonly short[] DFA75_eof = DFA.UnpackEncodedString(DFA75_eofS);
		private static readonly char[] DFA75_min = DFA.UnpackEncodedStringToUnsignedChars(DFA75_minS);
		private static readonly char[] DFA75_max = DFA.UnpackEncodedStringToUnsignedChars(DFA75_maxS);
		private static readonly short[] DFA75_accept = DFA.UnpackEncodedString(DFA75_acceptS);
		private static readonly short[] DFA75_special = DFA.UnpackEncodedString(DFA75_specialS);
		private static readonly short[][] DFA75_transition;

		static DFA75()
		{
			int numStates = DFA75_transitionS.Length;
			DFA75_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA75_transition[i] = DFA.UnpackEncodedString(DFA75_transitionS[i]);
			}
		}

		public DFA75( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 75;
			this.eot = DFA75_eot;
			this.eof = DFA75_eof;
			this.min = DFA75_min;
			this.max = DFA75_max;
			this.accept = DFA75_accept;
			this.special = DFA75_special;
			this.transition = DFA75_transition;
		}

		public override string Description { get { return "348:39: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA88 : DFA
	{
		private const string DFA88_eotS =
			"\x6\xFFFF";
		private const string DFA88_eofS =
			"\x6\xFFFF";
		private const string DFA88_minS =
			"\x1\x29\x1\x30\x1\xFFFF\x1\x29\x1\xFFFF\x1\x30";
		private const string DFA88_maxS =
			"\x1\x98\x1\x97\x1\xFFFF\x1\x29\x1\xFFFF\x1\x97";
		private const string DFA88_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA88_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA88_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"\x1\x2\x18\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x2\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\xA\xFFFF\x3\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x18\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x2\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF"+
				"\x1\x2\xA\xFFFF\x3\x2"
			};

		private static readonly short[] DFA88_eot = DFA.UnpackEncodedString(DFA88_eotS);
		private static readonly short[] DFA88_eof = DFA.UnpackEncodedString(DFA88_eofS);
		private static readonly char[] DFA88_min = DFA.UnpackEncodedStringToUnsignedChars(DFA88_minS);
		private static readonly char[] DFA88_max = DFA.UnpackEncodedStringToUnsignedChars(DFA88_maxS);
		private static readonly short[] DFA88_accept = DFA.UnpackEncodedString(DFA88_acceptS);
		private static readonly short[] DFA88_special = DFA.UnpackEncodedString(DFA88_specialS);
		private static readonly short[][] DFA88_transition;

		static DFA88()
		{
			int numStates = DFA88_transitionS.Length;
			DFA88_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA88_transition[i] = DFA.UnpackEncodedString(DFA88_transitionS[i]);
			}
		}

		public DFA88( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 88;
			this.eot = DFA88_eot;
			this.eof = DFA88_eof;
			this.min = DFA88_min;
			this.max = DFA88_max;
			this.accept = DFA88_accept;
			this.special = DFA88_special;
			this.transition = DFA88_transition;
		}

		public override string Description { get { return "374:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA101 : DFA
	{
		private const string DFA101_eotS =
			"\x7\xFFFF";
		private const string DFA101_eofS =
			"\x7\xFFFF";
		private const string DFA101_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA101_maxS =
			"\x5\x98\x2\xFFFF";
		private const string DFA101_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA101_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA101_transitionS =
			{
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x11"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x11"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x11"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x11"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x11"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA101_eot = DFA.UnpackEncodedString(DFA101_eotS);
		private static readonly short[] DFA101_eof = DFA.UnpackEncodedString(DFA101_eofS);
		private static readonly char[] DFA101_min = DFA.UnpackEncodedStringToUnsignedChars(DFA101_minS);
		private static readonly char[] DFA101_max = DFA.UnpackEncodedStringToUnsignedChars(DFA101_maxS);
		private static readonly short[] DFA101_accept = DFA.UnpackEncodedString(DFA101_acceptS);
		private static readonly short[] DFA101_special = DFA.UnpackEncodedString(DFA101_specialS);
		private static readonly short[][] DFA101_transition;

		static DFA101()
		{
			int numStates = DFA101_transitionS.Length;
			DFA101_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA101_transition[i] = DFA.UnpackEncodedString(DFA101_transitionS[i]);
			}
		}

		public DFA101( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 101;
			this.eot = DFA101_eot;
			this.eof = DFA101_eof;
			this.min = DFA101_min;
			this.max = DFA101_max;
			this.accept = DFA101_accept;
			this.special = DFA101_special;
			this.transition = DFA101_transition;
		}

		public override string Description { get { return "411:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA100 : DFA
	{
		private const string DFA100_eotS =
			"\x7\xFFFF";
		private const string DFA100_eofS =
			"\x7\xFFFF";
		private const string DFA100_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA100_maxS =
			"\x1\x73\x4\x98\x2\xFFFF";
		private const string DFA100_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA100_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA100_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x3\x5\xFFFF\x1\x2\x25\xFFFF\x1\x1\x1C\xFFFF\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x11"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x11"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x11"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x11"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA100_eot = DFA.UnpackEncodedString(DFA100_eotS);
		private static readonly short[] DFA100_eof = DFA.UnpackEncodedString(DFA100_eofS);
		private static readonly char[] DFA100_min = DFA.UnpackEncodedStringToUnsignedChars(DFA100_minS);
		private static readonly char[] DFA100_max = DFA.UnpackEncodedStringToUnsignedChars(DFA100_maxS);
		private static readonly short[] DFA100_accept = DFA.UnpackEncodedString(DFA100_acceptS);
		private static readonly short[] DFA100_special = DFA.UnpackEncodedString(DFA100_specialS);
		private static readonly short[][] DFA100_transition;

		static DFA100()
		{
			int numStates = DFA100_transitionS.Length;
			DFA100_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA100_transition[i] = DFA.UnpackEncodedString(DFA100_transitionS[i]);
			}
		}

		public DFA100( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 100;
			this.eot = DFA100_eot;
			this.eof = DFA100_eof;
			this.min = DFA100_min;
			this.max = DFA100_max;
			this.accept = DFA100_accept;
			this.special = DFA100_special;
			this.transition = DFA100_transition;
		}

		public override string Description { get { return "()* loopback of 411:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA106 : DFA
	{
		private const string DFA106_eotS =
			"\xB\xFFFF";
		private const string DFA106_eofS =
			"\xB\xFFFF";
		private const string DFA106_minS =
			"\x2\x29\x1\xFFFF\x1\x49\x1\xFFFF\x2\x29\x2\x49\x1\x29\x1\x49";
		private const string DFA106_maxS =
			"\x2\x98\x1\xFFFF\x1\x97\x1\xFFFF\x1\x29\x1\x98\x2\x97\x1\x29\x1\x97";
		private const string DFA106_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA106_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA106_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2\x17\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"\x1\x3\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xE\xFFFF\x2\x2\x16\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2"
			};

		private static readonly short[] DFA106_eot = DFA.UnpackEncodedString(DFA106_eotS);
		private static readonly short[] DFA106_eof = DFA.UnpackEncodedString(DFA106_eofS);
		private static readonly char[] DFA106_min = DFA.UnpackEncodedStringToUnsignedChars(DFA106_minS);
		private static readonly char[] DFA106_max = DFA.UnpackEncodedStringToUnsignedChars(DFA106_maxS);
		private static readonly short[] DFA106_accept = DFA.UnpackEncodedString(DFA106_acceptS);
		private static readonly short[] DFA106_special = DFA.UnpackEncodedString(DFA106_specialS);
		private static readonly short[][] DFA106_transition;

		static DFA106()
		{
			int numStates = DFA106_transitionS.Length;
			DFA106_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA106_transition[i] = DFA.UnpackEncodedString(DFA106_transitionS[i]);
			}
		}

		public DFA106( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 106;
			this.eot = DFA106_eot;
			this.eof = DFA106_eof;
			this.min = DFA106_min;
			this.max = DFA106_max;
			this.accept = DFA106_accept;
			this.special = DFA106_special;
			this.transition = DFA106_transition;
		}

		public override string Description { get { return "415:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root500 = new BitSet(new ulong[]{0x1020000000000UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _global_block_in_root503 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block525 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block527 = new BitSet(new ulong[]{0x1020000000002UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _func_def_in_node550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item618 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _79_in_attribute_item621 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item623 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _86_in_attribute_item626 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item628 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _80_in_attribute_item632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_attribute_item650 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _79_in_attribute_item653 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item655 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _86_in_attribute_item658 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item660 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _80_in_attribute_item664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_attribute689 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute691 = new BitSet(new ulong[]{0x0UL,0x8000000400000UL});
		public static readonly BitSet _86_in_attribute694 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute696 = new BitSet(new ulong[]{0x0UL,0x8000000400000UL});
		public static readonly BitSet _115_in_attribute700 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute702 = new BitSet(new ulong[]{0x1000000000002UL,0x4000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc721 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc724 = new BitSet(new ulong[]{0x0UL,0x500000000UL});
		public static readonly BitSet _96_in_global_alloc728 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_global_alloc730 = new BitSet(new ulong[]{0x2UL,0x10400008000UL});
		public static readonly BitSet _104_in_global_alloc735 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _98_in_global_alloc739 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_global_alloc742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_global_alloc802 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_global_alloc804 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_global_alloc807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_global_alloc880 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_global_alloc883 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_global_alloc886 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_global_alloc888 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _stmt_using_in_global_using925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_import_def947 = new BitSet(new ulong[]{0x41000000000002UL});
		public static readonly BitSet _STRING_in_import_def949 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def953 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_import_def956 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def958 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _STRING_in_import_def963 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def965 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def992 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_enum_def995 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def997 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_enum_def999 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _ident_in_enum_def1002 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_enum_def1005 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def1007 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _136_in_namespace_def1040 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_namespace_def1042 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1044 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1047 = new BitSet(new ulong[]{0x1020000000100UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1049 = new BitSet(new ulong[]{0x1020000000100UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _global_block_in_namespace_def1052 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1076 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_class_def1079 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1081 = new BitSet(new ulong[]{0x1000000000002UL,0x900008000UL});
		public static readonly BitSet _generic_parameter_in_class_def1084 = new BitSet(new ulong[]{0x1000000000002UL,0x100008000UL});
		public static readonly BitSet _79_in_class_def1089 = new BitSet(new ulong[]{0x20000000000UL,0x400000000UL});
		public static readonly BitSet _func_args_in_class_def1091 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_class_def1093 = new BitSet(new ulong[]{0x1000000000002UL,0x100000000UL});
		public static readonly BitSet _96_in_class_def1098 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1100 = new BitSet(new ulong[]{0x1000000000002UL,0x400000UL});
		public static readonly BitSet _86_in_class_def1103 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1105 = new BitSet(new ulong[]{0x1000000000002UL,0x400000UL});
		public static readonly BitSet _NEWLINE_in_class_def1112 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_class_def1115 = new BitSet(new ulong[]{0x1020000000100UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _NEWLINE_in_class_def1117 = new BitSet(new ulong[]{0x1020000000100UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _global_block_in_class_def1120 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_type_name_op1163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_type_name_op1167 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_type_name_op1169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_type_name_op1173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_type_name1182 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_type_name1185 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_type_name1188 = new BitSet(new ulong[]{0x2UL,0x4000800022000UL});
		public static readonly BitSet _99_in_type_name1191 = new BitSet(new ulong[]{0x20000000000UL,0x1000080000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_type_name1194 = new BitSet(new ulong[]{0x0UL,0x80000400000UL});
		public static readonly BitSet _86_in_type_name1197 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_type_name1199 = new BitSet(new ulong[]{0x0UL,0x80000400000UL});
		public static readonly BitSet _107_in_type_name1205 = new BitSet(new ulong[]{0x2UL,0x4000000022000UL});
		public static readonly BitSet _type_name_op_in_type_name1209 = new BitSet(new ulong[]{0x2UL,0x4000000022000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1249 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_generic_parameter_inside1252 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1254 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _99_in_generic_parameter1276 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1278 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_generic_parameter1280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1295 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_func_args1298 = new BitSet(new ulong[]{0x20000000000UL,0x400000000UL});
		public static readonly BitSet _func_args_item_in_func_args1300 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _ident_list_in_func_args_item1322 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_func_args_item1324 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_func_args_item1326 = new BitSet(new ulong[]{0x2UL,0x10400008000UL});
		public static readonly BitSet _104_in_func_args_item1331 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _98_in_func_args_item1335 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_func_args_item1338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_func_args_item1386 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_func_args_item1388 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_func_args_item1391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_func_args_item1448 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _modify_expr_in_func_args_item1452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1463 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x1020000UL});
		public static readonly BitSet _type_name_in_func_def1466 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_func_def1469 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_func_def1472 = new BitSet(new ulong[]{0x0UL,0x800008000UL});
		public static readonly BitSet _generic_parameter_in_func_def1474 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_func_def1477 = new BitSet(new ulong[]{0x20000000000UL,0x400010000UL});
		public static readonly BitSet _func_args_in_func_def1479 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_func_def1482 = new BitSet(new ulong[]{0x1000000000000UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1485 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_func_def1537 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_func_def1539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1580 = new BitSet(new ulong[]{0x1020000000100UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _NEWLINE_in_stmt_block1582 = new BitSet(new ulong[]{0x1020000000100UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_block1587 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1589 = new BitSet(new ulong[]{0x1020000000100UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _DEDENT_in_stmt_block1594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1653 = new BitSet(new ulong[]{0x2UL,0x0UL,0x150008UL});
		public static readonly BitSet _131_in_stmt_expr1663 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_expr1665 = new BitSet(new ulong[]{0x2UL,0x0UL,0x150008UL});
		public static readonly BitSet _144_in_stmt_expr1694 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_expr1696 = new BitSet(new ulong[]{0x2UL,0x0UL,0x150008UL});
		public static readonly BitSet _148_in_stmt_expr1725 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_expr1727 = new BitSet(new ulong[]{0x2UL,0x0UL,0x150008UL});
		public static readonly BitSet _146_in_stmt_expr1756 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_expr1758 = new BitSet(new ulong[]{0x2UL,0x0UL,0x150008UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item1809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item1814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item1819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item1824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item1829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_stmt_defer1840 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_defer1842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_defer1855 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_defer1857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_stmt_typedef1876 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1878 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_stmt_typedef1880 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_stmt_using_item1905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_using1913 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x100UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1915 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x100UL});
		public static readonly BitSet _139_in_stmt_return1936 = new BitSet(new ulong[]{0x42020000000002UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_return1938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_stmt_if1959 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_if1961 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1964 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1967 = new BitSet(new ulong[]{0x1000000000002UL,0x8000000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1970 = new BitSet(new ulong[]{0x1000000000000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_stmt_if1973 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_if2007 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_if2009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_stmt_if2034 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_if2036 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2039 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2042 = new BitSet(new ulong[]{0x1000000000002UL,0x8000000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2045 = new BitSet(new ulong[]{0x1000000000000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_stmt_if2048 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_if2086 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_if2088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_while2123 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_while2125 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2129 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_while2156 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_while2158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_stmt_while2186 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_while2188 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2192 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_while2219 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_while2221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_stmt_while2249 = new BitSet(new ulong[]{0x43020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_while2251 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2254 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2279 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_for_range2281 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_for_range2285 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL,0x2000UL});
		public static readonly BitSet _141_in_for_range2288 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_for_range2292 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _121_in_for_range2295 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_for_range2299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_for_range2328 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_for_range2332 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _121_in_for_range2335 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_for_range2339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when2397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item2416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item2421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_stmt_for2432 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _for_item_in_stmt_for2436 = new BitSet(new ulong[]{0x1000000000000UL,0x400000UL});
		public static readonly BitSet _86_in_stmt_for2439 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _for_item_in_stmt_for2441 = new BitSet(new ulong[]{0x1000000000000UL,0x400000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2445 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_try2479 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2481 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_stmt_try2483 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2485 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2510 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_ident_list2513 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_ident_list2515 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2537 = new BitSet(new ulong[]{0x0UL,0x500000000UL});
		public static readonly BitSet _96_in_stmt_alloc2541 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_stmt_alloc2543 = new BitSet(new ulong[]{0x2UL,0x10400008000UL});
		public static readonly BitSet _104_in_stmt_alloc2548 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _98_in_stmt_alloc2552 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_alloc2555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_stmt_alloc2603 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_stmt_alloc2605 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_alloc2608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_stmt_alloc2669 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_alloc2673 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_stmt_alloc2676 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_alloc2678 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _lvalue_in_stmt_modify2704 = new BitSet(new ulong[]{0x2UL,0x21414082244800UL,0x400000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify2708 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_modify2711 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_modify2725 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr2741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_list_expr2752 = new BitSet(new ulong[]{0x43060000000100UL,0xE000001DAA100UL,0x1000200UL});
		public static readonly BitSet _86_in_list_expr2756 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _NEWLINE_in_list_expr2760 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _INDENT_in_list_expr2764 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _DEDENT_in_list_expr2768 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _list_expr_in_list_expr2772 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _86_in_list_expr2776 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _NEWLINE_in_list_expr2780 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _INDENT_in_list_expr2784 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _DEDENT_in_list_expr2788 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _list_expr_in_list_expr2792 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _86_in_list_expr2799 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _NEWLINE_in_list_expr2803 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _INDENT_in_list_expr2807 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _DEDENT_in_list_expr2811 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _115_in_list_expr2815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr2829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_lambda_expr2840 = new BitSet(new ulong[]{0x20000000000UL,0x400010000UL});
		public static readonly BitSet _func_args_in_lambda_expr2842 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_lambda_expr2845 = new BitSet(new ulong[]{0x0UL,0x40004000000UL});
		public static readonly BitSet _90_in_lambda_expr2849 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_lambda_expr2851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_lambda_expr2891 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_lambda_expr2893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr2913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr2970 = new BitSet(new ulong[]{0x2UL,0x20414482244800UL,0x400000UL});
		public static readonly BitSet _set_in_modify_expr2974 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _cond_expr_in_modify_expr3019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_modify_expr3028 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _cond_expr_in_modify_expr3031 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item3044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr3056 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_cond_expr3065 = new BitSet(new ulong[]{0x42020000000002UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3071 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _96_in_cond_expr3075 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr3193 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _or_op_in_or_expr3204 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _and_expr_in_or_expr3208 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _bit_or_in_and_expr3250 = new BitSet(new ulong[]{0x2UL,0x80000000001000UL});
		public static readonly BitSet _and_op_in_and_expr3261 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _bit_or_in_and_expr3265 = new BitSet(new ulong[]{0x2UL,0x80000000001000UL});
		public static readonly BitSet _bit_xor_in_bit_or3296 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_bit_or3305 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _bit_xor_in_bit_or3309 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _bit_and_in_bit_xor3339 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _116_in_bit_xor3348 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _bit_and_in_bit_xor3352 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and3382 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_bit_and3391 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _cmp_expr_in_bit_and3395 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _chain_op_in_chain_list3487 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _infix_expr_in_chain_list3489 = new BitSet(new ulong[]{0x2UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3503 = new BitSet(new ulong[]{0x2UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _99_in_cmp_expr3513 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3517 = new BitSet(new ulong[]{0x20000000002UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _ident_in_cmp_expr3523 = new BitSet(new ulong[]{0x20000000000UL,0x80000000000UL});
		public static readonly BitSet _107_in_cmp_expr3526 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_cmp_expr3528 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_cmp_expr3530 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_cmp_expr3533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr3602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr3679 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3683 = new BitSet(new ulong[]{0x2UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _chain_list_in_cmp_expr3687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_infix_expr3778 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr3788 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _shift_expr_in_infix_expr3792 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr3835 = new BitSet(new ulong[]{0x2UL,0x202000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr3844 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _add_expr_in_shift_expr3848 = new BitSet(new ulong[]{0x2UL,0x202000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr3878 = new BitSet(new ulong[]{0x2UL,0x880000UL});
		public static readonly BitSet _83_in_add_expr3888 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _mul_expr_in_add_expr3892 = new BitSet(new ulong[]{0x2UL,0x880000UL});
		public static readonly BitSet _87_in_add_expr3917 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _mul_expr_in_add_expr3921 = new BitSet(new ulong[]{0x2UL,0x880000UL});
		public static readonly BitSet _selector_expr_in_mul_expr3959 = new BitSet(new ulong[]{0x2UL,0x40020400UL});
		public static readonly BitSet _81_in_mul_expr3969 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _selector_expr_in_mul_expr3973 = new BitSet(new ulong[]{0x2UL,0x40020400UL});
		public static readonly BitSet _94_in_mul_expr4003 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _selector_expr_in_mul_expr4007 = new BitSet(new ulong[]{0x2UL,0x40020400UL});
		public static readonly BitSet _74_in_mul_expr4037 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _selector_expr_in_mul_expr4041 = new BitSet(new ulong[]{0x2UL,0x40020400UL});
		public static readonly BitSet _cast_expr_in_selector_expr4084 = new BitSet(new ulong[]{0x2UL,0x28000000UL});
		public static readonly BitSet _91_in_selector_expr4094 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr4098 = new BitSet(new ulong[]{0x2UL,0x28000000UL});
		public static readonly BitSet _93_in_selector_expr4124 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr4129 = new BitSet(new ulong[]{0x2UL,0x28000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr4169 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _120_in_cast_expr4178 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_cast_expr4180 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_cast_expr4182 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_cast_expr4184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr4242 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr4244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_prefix_expr4260 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_prefix_expr4262 = new BitSet(new ulong[]{0x0UL,0x4000000008000UL});
		public static readonly BitSet _79_in_prefix_expr4266 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_prefix_expr4268 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_prefix_expr4271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_prefix_expr4293 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_prefix_expr4295 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_prefix_expr4297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr4313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list4325 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_expr_list4328 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_expr_list4331 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr4347 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _84_in_suffix_expr4357 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _88_in_suffix_expr4383 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _92_in_suffix_expr4406 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4408 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _90_in_suffix_expr4433 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4435 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _79_in_suffix_expr4460 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_suffix_expr4462 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_suffix_expr4465 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _114_in_suffix_expr4489 = new BitSet(new ulong[]{0x42020000000000UL,0xE0000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_suffix_expr4491 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_suffix_expr4494 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _NUMBER_in_atom_expr4540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr4545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr4550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_atom_expr4555 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_atom_expr4557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_atom_expr4570 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_atom_expr4572 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _86_in_atom_expr4577 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_atom_expr4579 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _80_in_atom_expr4583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_atom_expr4608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item4638 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _84_in_lvalue_item4648 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _88_in_lvalue_item4676 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _92_in_lvalue_item4701 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_item4703 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _90_in_lvalue_item4730 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_item4732 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item4759 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_lvalue_item4762 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_lvalue_item4764 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_lvalue_item4767 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _114_in_lvalue_item4796 = new BitSet(new ulong[]{0x42020000000000UL,0xE0000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_lvalue_item4798 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_lvalue_item4801 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _ident_in_lvalue_atom4840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_lvalue_atom4845 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom4847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_lvalue4866 = new BitSet(new ulong[]{0x20000000000UL,0x2000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4868 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_lvalue4871 = new BitSet(new ulong[]{0x20000000000UL,0x2000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4873 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _80_in_lvalue4877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue4891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident4902 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_ident4905 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_ident4907 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _118_in_infix_func4920 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_infix_func4923 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_infix_func4925 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
