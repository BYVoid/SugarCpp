//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-13 15:37:32

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'is'", "'isnt'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int For_Item_Down_To=33;
	public const int For_Item_Each=34;
	public const int For_Item_To=35;
	public const int For_Item_When=36;
	public const int Func_Args=37;
	public const int Func_Def=38;
	public const int Generic_Patameters=39;
	public const int Global_Block=40;
	public const int IDENT=41;
	public const int INDENT=42;
	public const int Ident_List=43;
	public const int Import=44;
	public const int Left_Bracket=45;
	public const int LineComment=46;
	public const int Match_Tuple=47;
	public const int NEWLINE=48;
	public const int NUMBER=49;
	public const int Namespace=50;
	public const int Right_Bracket=51;
	public const int Root=52;
	public const int SP=53;
	public const int STRING=54;
	public const int Stmt_Block=55;
	public const int Stmt_Defer=56;
	public const int Stmt_Finally=57;
	public const int Stmt_For=58;
	public const int Stmt_If=59;
	public const int Stmt_Loop=60;
	public const int Stmt_Return=61;
	public const int Stmt_Try=62;
	public const int Stmt_Typedef=63;
	public const int Stmt_Unless=64;
	public const int Stmt_Until=65;
	public const int Stmt_Using=66;
	public const int Stmt_While=67;
	public const int Type_IDENT=68;
	public const int Type_Ref=69;
	public const int Type_Tuple=70;
	public const int White_Space=71;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:195:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(195, 1);
		try
		{
			// SugarCpp.g:196:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:196:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(196, 4);
			// SugarCpp.g:196:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:196:4: NEWLINE
					{
					DebugLocation(196, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root500);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(196, 13);
			PushFollow(Follow._global_block_in_root503);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(196, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root505);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 196:30: -> ^( Root global_block )
			{
				DebugLocation(196, 33);
				// SugarCpp.g:196:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(196, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(196, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:199:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(199, 1);
		try
		{
			// SugarCpp.g:200:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:200:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(200, 4);
			// SugarCpp.g:200:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==114||(LA3_0>=123 && LA3_0<=124)||LA3_0==128||LA3_0==132||LA3_0==136||LA3_0==143||LA3_0==145||LA3_0==147||LA3_0==152))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:200:5: node ( NEWLINE )+
					{
					DebugLocation(200, 5);
					PushFollow(Follow._node_in_global_block525);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(200, 10);
					// SugarCpp.g:200:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:200:10: NEWLINE
							{
							DebugLocation(200, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block527);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 200:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(200, 24);
				// SugarCpp.g:200:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(200, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(200, 39);
				// SugarCpp.g:200:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(200, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:203:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(203, 1);
		try
		{
			// SugarCpp.g:204:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:204:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(204, 4);
				PushFollow(Follow._func_def_in_node550);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:205:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(205, 4);
				PushFollow(Follow._class_def_in_node555);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:206:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(206, 4);
				PushFollow(Follow._enum_def_in_node560);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:207:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(207, 4);
				PushFollow(Follow._global_alloc_in_node565);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:208:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(208, 4);
				PushFollow(Follow._global_using_in_node570);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:209:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(209, 4);
				PushFollow(Follow._global_typedef_in_node575);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:210:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._import_def_in_node580);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:211:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(211, 4);
				PushFollow(Follow._namespace_def_in_node585);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:214:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args597); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:216:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args602); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:217:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 4);
				PushFollow(Follow._ident_in_attribute_args607);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:220:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(220, 1);
		try
		{
			// SugarCpp.g:221:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==124))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:221:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(221, 4);
				PushFollow(Follow._ident_in_attribute_item618);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(221, 10);
				// SugarCpp.g:221:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==79))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:221:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(221, 11);
					char_literal18=(IToken)Match(input,79,Follow._79_in_attribute_item621);  
					stream_79.Add(char_literal18);

					DebugLocation(221, 15);
					PushFollow(Follow._attribute_args_in_attribute_item623);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(221, 30);
					// SugarCpp.g:221:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==86))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:221:31: ',' attribute_args
							{
							DebugLocation(221, 31);
							char_literal20=(IToken)Match(input,86,Follow._86_in_attribute_item626);  
							stream_86.Add(char_literal20);

							DebugLocation(221, 35);
							PushFollow(Follow._attribute_args_in_attribute_item628);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(221, 52);
					char_literal22=(IToken)Match(input,80,Follow._80_in_attribute_item632);  
					stream_80.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: attribute_args, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 221:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(221, 61);
					// SugarCpp.g:221:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(221, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(221, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(221, 79);
					// SugarCpp.g:221:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(221, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:222:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(222, 4);
				string_literal23=(IToken)Match(input,124,Follow._124_in_attribute_item650);  
				stream_124.Add(string_literal23);

				DebugLocation(222, 12);
				// SugarCpp.g:222:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==79))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:222:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(222, 13);
					char_literal24=(IToken)Match(input,79,Follow._79_in_attribute_item653);  
					stream_79.Add(char_literal24);

					DebugLocation(222, 17);
					PushFollow(Follow._attribute_args_in_attribute_item655);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(222, 32);
					// SugarCpp.g:222:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==86))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:222:33: ',' attribute_args
							{
							DebugLocation(222, 33);
							char_literal26=(IToken)Match(input,86,Follow._86_in_attribute_item658);  
							stream_86.Add(char_literal26);

							DebugLocation(222, 37);
							PushFollow(Follow._attribute_args_in_attribute_item660);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(222, 54);
					char_literal28=(IToken)Match(input,80,Follow._80_in_attribute_item664);  
					stream_80.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 124, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 222:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(222, 63);
					// SugarCpp.g:222:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(222, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(222, 75);
					adaptor.AddChild(root_1, stream_124.NextNode());
					DebugLocation(222, 83);
					// SugarCpp.g:222:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(222, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:225:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:226:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(226, 4);
			// SugarCpp.g:226:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==114))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:226:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(226, 5);
					char_literal29=(IToken)Match(input,114,Follow._114_in_attribute689);  
					stream_114.Add(char_literal29);

					DebugLocation(226, 9);
					PushFollow(Follow._attribute_item_in_attribute691);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(226, 24);
					// SugarCpp.g:226:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==86))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:226:25: ',' attribute_item
							{
							DebugLocation(226, 25);
							char_literal31=(IToken)Match(input,86,Follow._86_in_attribute694);  
							stream_86.Add(char_literal31);

							DebugLocation(226, 29);
							PushFollow(Follow._attribute_item_in_attribute696);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(226, 46);
					char_literal33=(IToken)Match(input,115,Follow._115_in_attribute700);  
					stream_115.Add(char_literal33);

					DebugLocation(226, 50);
					// SugarCpp.g:226:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:226:50: NEWLINE
							{
							DebugLocation(226, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute702);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 226:61: -> ( attribute_item )+
			{
				DebugLocation(226, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(226, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:229:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(229, 1);
		try
		{
			// SugarCpp.g:230:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:230:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(230, 4);
			// SugarCpp.g:230:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==114))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:230:4: attribute
				{
				DebugLocation(230, 4);
				PushFollow(Follow._attribute_in_global_alloc721);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(230, 15);
			PushFollow(Follow._ident_list_in_global_alloc724);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(230, 26);
			// SugarCpp.g:230:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==96))
			{
				alt19 = 1;
			}
			else if ((LA19_0==98))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:230:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(230, 28);
				char_literal37=(IToken)Match(input,96,Follow._96_in_global_alloc728);  
				stream_96.Add(char_literal37);

				DebugLocation(230, 32);
				PushFollow(Follow._type_name_in_global_alloc730);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(230, 42);
				// SugarCpp.g:230:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 98:
				case 104:
					{
					alt17 = 1;
					}
					break;
				case 79:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:230:44: ( '=' | ':=' ) expr
					{
					DebugLocation(230, 44);
					// SugarCpp.g:230:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==104))
					{
						alt15 = 1;
					}
					else if ((LA15_0==98))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:230:45: '='
						{
						DebugLocation(230, 45);
						char_literal39=(IToken)Match(input,104,Follow._104_in_global_alloc735);  
						stream_104.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:230:51: ':='
						{
						DebugLocation(230, 51);
						string_literal40=(IToken)Match(input,98,Follow._98_in_global_alloc739);  
						stream_98.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(230, 57);
					PushFollow(Follow._expr_in_global_alloc742);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: ident_list, attribute, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 230:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(230, 65);
						// SugarCpp.g:230:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(230, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(230, 84);
						// SugarCpp.g:230:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(230, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(230, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(230, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(230, 116);
						// SugarCpp.g:230:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(230, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:231:43: '(' ( expr_list )? ')'
					{
					DebugLocation(231, 43);
					char_literal42=(IToken)Match(input,79,Follow._79_in_global_alloc802);  
					stream_79.Add(char_literal42);

					DebugLocation(231, 47);
					// SugarCpp.g:231:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==72||LA16_0==77||LA16_0==79||LA16_0==81||(LA16_0>=83 && LA16_0<=84)||(LA16_0>=87 && LA16_0<=88)||(LA16_0>=113 && LA16_0<=114)||LA16_0==137||LA16_0==152))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:231:47: expr_list
						{
						DebugLocation(231, 47);
						PushFollow(Follow._expr_list_in_global_alloc804);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(231, 58);
					char_literal44=(IToken)Match(input,80,Follow._80_in_global_alloc807);  
					stream_80.Add(char_literal44);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 231:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(231, 65);
						// SugarCpp.g:231:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(231, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(231, 86);
						// SugarCpp.g:231:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(231, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(231, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(231, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(231, 118);
						// SugarCpp.g:231:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(231, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:232:17: 
					{

					{
					// AST REWRITE
					// elements: attribute, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 232:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(232, 20);
						// SugarCpp.g:232:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(232, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(232, 39);
						// SugarCpp.g:232:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(232, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(232, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(232, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:234:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(234, 10);
				string_literal45=(IToken)Match(input,98,Follow._98_in_global_alloc880);  
				stream_98.Add(string_literal45);

				DebugLocation(234, 15);
				// SugarCpp.g:234:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:234:16: expr ( ',' expr )*
				{
				DebugLocation(234, 16);
				PushFollow(Follow._expr_in_global_alloc883);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(234, 21);
				// SugarCpp.g:234:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==86))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:234:22: ',' expr
						{
						DebugLocation(234, 22);
						char_literal47=(IToken)Match(input,86,Follow._86_in_global_alloc886);  
						stream_86.Add(char_literal47);

						DebugLocation(234, 26);
						PushFollow(Follow._expr_in_global_alloc888);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: 98, ident_list, attribute, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 234:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(234, 37);
					// SugarCpp.g:234:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(234, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_98.NextNode(), root_1);

					DebugLocation(234, 44);
					// SugarCpp.g:234:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(234, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(234, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(234, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(234, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:238:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(238, 1);
		try
		{
			// SugarCpp.g:239:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:239:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(239, 4);
			// SugarCpp.g:239:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==114))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:239:4: attribute
				{
				DebugLocation(239, 4);
				PushFollow(Follow._attribute_in_global_using925);
				attribute49=attribute();
				PopFollow();

				stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(239, 15);
			string_literal50=(IToken)Match(input,147,Follow._147_in_global_using928);  
			stream_147.Add(string_literal50);

			DebugLocation(239, 23);
			// SugarCpp.g:239:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==136))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:239:23: stmt_using_item
					{
					DebugLocation(239, 23);
					PushFollow(Follow._stmt_using_item_in_global_using930);
					stmt_using_item51=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 239:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(239, 43);
				// SugarCpp.g:239:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(239, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(239, 56);
				// SugarCpp.g:239:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(239, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(239, 67);
				// SugarCpp.g:239:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(239, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:242:1: global_typedef : ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(242, 1);
		try
		{
			// SugarCpp.g:243:2: ( ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:243:4: ( attribute )? 'typedef' ident '=' type_name
			{
			DebugLocation(243, 4);
			// SugarCpp.g:243:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==114))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:243:4: attribute
				{
				DebugLocation(243, 4);
				PushFollow(Follow._attribute_in_global_typedef954);
				attribute52=attribute();
				PopFollow();

				stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(243, 15);
			string_literal53=(IToken)Match(input,143,Follow._143_in_global_typedef957);  
			stream_143.Add(string_literal53);

			DebugLocation(243, 25);
			PushFollow(Follow._ident_in_global_typedef959);
			ident54=ident();
			PopFollow();

			stream_ident.Add(ident54.Tree);
			DebugLocation(243, 31);
			char_literal55=(IToken)Match(input,104,Follow._104_in_global_typedef961);  
			stream_104.Add(char_literal55);

			DebugLocation(243, 35);
			PushFollow(Follow._type_name_in_global_typedef963);
			type_name56=type_name();
			PopFollow();

			stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: type_name, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 243:45: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(243, 48);
				// SugarCpp.g:243:48: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(243, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(243, 63);
				// SugarCpp.g:243:63: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(243, 63);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(243, 74);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(243, 84);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:246:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(246, 1);
		try
		{
			// SugarCpp.g:247:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:247:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(247, 4);
			// SugarCpp.g:247:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==114))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:4: attribute
				{
				DebugLocation(247, 4);
				PushFollow(Follow._attribute_in_import_def987);
				attribute57=attribute();
				PopFollow();

				stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(247, 15);
			string_literal58=(IToken)Match(input,132,Follow._132_in_import_def990);  
			stream_132.Add(string_literal58);

			DebugLocation(247, 24);
			// SugarCpp.g:247:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:24: STRING
				{
				DebugLocation(247, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def992);  
				stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(247, 32);
			// SugarCpp.g:247:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(247, 33);
				// SugarCpp.g:247:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:247:33: NEWLINE
						{
						DebugLocation(247, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def996);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(247, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def999);  
				stream_INDENT.Add(INDENT61);

				DebugLocation(247, 49);
				// SugarCpp.g:247:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:247:49: NEWLINE
						{
						DebugLocation(247, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1001);  
						stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(247, 59);
				// SugarCpp.g:247:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:247:60: STRING ( NEWLINE )+
						{
						DebugLocation(247, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1006);  
						stream_STRING.Add(STRING63);

						DebugLocation(247, 67);
						// SugarCpp.g:247:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:247:67: NEWLINE
								{
								DebugLocation(247, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1008);  
								stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(247, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1013);  
				stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 247:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(247, 90);
				// SugarCpp.g:247:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(247, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(247, 99);
				// SugarCpp.g:247:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(247, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(247, 110);
				// SugarCpp.g:247:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(247, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:250:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(250, 1);
		try
		{
			// SugarCpp.g:251:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:251:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(251, 4);
			// SugarCpp.g:251:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==114))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:251:4: attribute
				{
				DebugLocation(251, 4);
				PushFollow(Follow._attribute_in_enum_def1038);
				attribute66=attribute();
				PopFollow();

				stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(251, 15);
			string_literal67=(IToken)Match(input,128,Follow._128_in_enum_def1041);  
			stream_128.Add(string_literal67);

			DebugLocation(251, 22);
			PushFollow(Follow._ident_in_enum_def1043);
			ident68=ident();
			PopFollow();

			stream_ident.Add(ident68.Tree);
			DebugLocation(251, 28);
			char_literal69=(IToken)Match(input,104,Follow._104_in_enum_def1045);  
			stream_104.Add(char_literal69);

			DebugLocation(251, 32);
			// SugarCpp.g:251:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:251:33: ident ( '|' ident )*
				{
				DebugLocation(251, 33);
				PushFollow(Follow._ident_in_enum_def1048);
				ident70=ident();
				PopFollow();

				stream_ident.Add(ident70.Tree);
				DebugLocation(251, 39);
				// SugarCpp.g:251:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==149))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:251:40: '|' ident
						{
						DebugLocation(251, 40);
						char_literal71=(IToken)Match(input,149,Follow._149_in_enum_def1051);  
						stream_149.Add(char_literal71);

						DebugLocation(251, 44);
						PushFollow(Follow._ident_in_enum_def1053);
						ident72=ident();
						PopFollow();

						stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: ident, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 251:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(251, 57);
				// SugarCpp.g:251:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(251, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(251, 64);
				// SugarCpp.g:251:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(251, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(251, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(251, 81);
				// SugarCpp.g:251:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(251, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(251, 94);
				// SugarCpp.g:251:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(251, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:254:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(254, 1);
		try
		{
			// SugarCpp.g:255:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:255:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(255, 4);
			// SugarCpp.g:255:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==114))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:4: attribute
				{
				DebugLocation(255, 4);
				PushFollow(Follow._attribute_in_namespace_def1086);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(255, 15);
			string_literal74=(IToken)Match(input,136,Follow._136_in_namespace_def1089);  
			stream_136.Add(string_literal74);

			DebugLocation(255, 27);
			PushFollow(Follow._ident_in_namespace_def1091);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(255, 33);
			// SugarCpp.g:255:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(255, 34);
				// SugarCpp.g:255:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:255:34: NEWLINE
						{
						DebugLocation(255, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1094);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(255, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1097);  
				stream_INDENT.Add(INDENT77);

				DebugLocation(255, 50);
				// SugarCpp.g:255:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:255:50: NEWLINE
						{
						DebugLocation(255, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1099);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(255, 59);
				PushFollow(Follow._global_block_in_namespace_def1102);
				global_block79=global_block();
				PopFollow();

				stream_global_block.Add(global_block79.Tree);
				DebugLocation(255, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1104);  
				stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: global_block, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 255:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(255, 84);
				// SugarCpp.g:255:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(255, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(255, 96);
				// SugarCpp.g:255:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(255, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(255, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(255, 113);
				// SugarCpp.g:255:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(255, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:258:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(258, 1);
		try
		{
			// SugarCpp.g:259:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:259:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(259, 5);
			// SugarCpp.g:259:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==114))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:5: attribute
				{
				DebugLocation(259, 5);
				PushFollow(Follow._attribute_in_class_def1132);
				attribute81=attribute();
				PopFollow();

				stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(259, 16);
			string_literal82=(IToken)Match(input,123,Follow._123_in_class_def1135);  
			stream_123.Add(string_literal82);

			DebugLocation(259, 24);
			PushFollow(Follow._ident_in_class_def1137);
			ident83=ident();
			PopFollow();

			stream_ident.Add(ident83.Tree);
			DebugLocation(259, 30);
			// SugarCpp.g:259:30: ( generic_parameter )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==99))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:31: generic_parameter
				{
				DebugLocation(259, 31);
				PushFollow(Follow._generic_parameter_in_class_def1140);
				generic_parameter84=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter84.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(259, 51);
			// SugarCpp.g:259:51: ( '(' func_args ')' )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==79))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:52: '(' func_args ')'
				{
				DebugLocation(259, 52);
				char_literal85=(IToken)Match(input,79,Follow._79_in_class_def1145);  
				stream_79.Add(char_literal85);

				DebugLocation(259, 56);
				PushFollow(Follow._func_args_in_class_def1147);
				func_args86=func_args();
				PopFollow();

				stream_func_args.Add(func_args86.Tree);
				DebugLocation(259, 66);
				char_literal87=(IToken)Match(input,80,Follow._80_in_class_def1149);  
				stream_80.Add(char_literal87);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(259, 72);
			// SugarCpp.g:259:72: ( ':' ident ( ',' ident )* )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==96))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:73: ':' ident ( ',' ident )*
				{
				DebugLocation(259, 73);
				char_literal88=(IToken)Match(input,96,Follow._96_in_class_def1154);  
				stream_96.Add(char_literal88);

				DebugLocation(259, 77);
				PushFollow(Follow._ident_in_class_def1156);
				ident89=ident();
				PopFollow();

				stream_ident.Add(ident89.Tree);
				DebugLocation(259, 83);
				// SugarCpp.g:259:83: ( ',' ident )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==86))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:259:84: ',' ident
						{
						DebugLocation(259, 84);
						char_literal90=(IToken)Match(input,86,Follow._86_in_class_def1159);  
						stream_86.Add(char_literal90);

						DebugLocation(259, 88);
						PushFollow(Follow._ident_in_class_def1161);
						ident91=ident();
						PopFollow();

						stream_ident.Add(ident91.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(259, 98);
			// SugarCpp.g:259:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(259, 99);
				// SugarCpp.g:259:99: ( NEWLINE )+
				int cnt42=0;
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==NEWLINE))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:259:99: NEWLINE
						{
						DebugLocation(259, 99);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1168);  
						stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt42 >= 1)
							goto loop42;

						EarlyExitException eee42 = new EarlyExitException( 42, input );
						DebugRecognitionException(eee42);
						throw eee42;
					}
					cnt42++;
				}
				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(259, 108);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1171);  
				stream_INDENT.Add(INDENT93);

				DebugLocation(259, 115);
				// SugarCpp.g:259:115: ( NEWLINE )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==NEWLINE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:259:115: NEWLINE
						{
						DebugLocation(259, 115);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1173);  
						stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(259, 124);
				PushFollow(Follow._global_block_in_class_def1176);
				global_block95=global_block();
				PopFollow();

				stream_global_block.Add(global_block95.Tree);
				DebugLocation(259, 137);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1178);  
				stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: func_args, global_block, attribute, ident, ident, generic_parameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 259:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(259, 149);
				// SugarCpp.g:259:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(259, 157);
				// SugarCpp.g:259:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(259, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(259, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(259, 174);
				// SugarCpp.g:259:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(259, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(259, 193);
				// SugarCpp.g:259:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(259, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(259, 204);
				// SugarCpp.g:259:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(259, 205);
					// SugarCpp.g:259:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(259, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(259, 218);
					// SugarCpp.g:259:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(259, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(259, 228);
				// SugarCpp.g:259:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(259, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:262:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal97 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal100 = default(IToken);

		CommonTree char_literal97_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(262, 34);
		try
		{
			// SugarCpp.g:262:13: ( '*' | '[' ']' | '&' )
			int alt45=3;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case 81:
				{
				alt45 = 1;
				}
				break;
			case 114:
				{
				alt45 = 2;
				}
				break;
			case 77:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(262, 15);
				char_literal97=(IToken)Match(input,81,Follow._81_in_type_name_op1219); 
				char_literal97_tree = (CommonTree)adaptor.Create(char_literal97);
				adaptor.AddChild(root_0, char_literal97_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:262:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(262, 21);
				char_literal98=(IToken)Match(input,114,Follow._114_in_type_name_op1223); 
				char_literal98_tree = (CommonTree)adaptor.Create(char_literal98);
				adaptor.AddChild(root_0, char_literal98_tree);
				DebugLocation(262, 25);
				char_literal99=(IToken)Match(input,115,Follow._115_in_type_name_op1225); 
				char_literal99_tree = (CommonTree)adaptor.Create(char_literal99);
				adaptor.AddChild(root_0, char_literal99_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:262:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(262, 31);
				char_literal100=(IToken)Match(input,77,Follow._77_in_type_name_op1229); 
				char_literal100_tree = (CommonTree)adaptor.Create(char_literal100);
				adaptor.AddChild(root_0, char_literal100_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
		}
		DebugLocation(262, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:263:1: type_name : ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal101 = default(IToken);
		IToken string_literal102 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken char_literal106 = default(IToken);
		IToken char_literal108 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name105 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op109 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal101_tree = default(CommonTree);
		CommonTree string_literal102_tree = default(CommonTree);
		CommonTree char_literal104_tree = default(CommonTree);
		CommonTree char_literal106_tree = default(CommonTree);
		CommonTree char_literal108_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(263, 1);
		try
		{
			// SugarCpp.g:264:2: ( ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:264:4: ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(264, 4);
			// SugarCpp.g:264:4: ( 'const' )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==124))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:4: 'const'
				{
				DebugLocation(264, 4);
				string_literal101=(IToken)Match(input,124,Follow._124_in_type_name1238);  
				stream_124.Add(string_literal101);


				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(264, 13);
			// SugarCpp.g:264:13: ( 'unsigned' )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==145))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:13: 'unsigned'
				{
				DebugLocation(264, 13);
				string_literal102=(IToken)Match(input,145,Follow._145_in_type_name1241);  
				stream_145.Add(string_literal102);


				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(264, 25);
			PushFollow(Follow._ident_in_type_name1244);
			ident103=ident();
			PopFollow();

			stream_ident.Add(ident103.Tree);
			DebugLocation(264, 31);
			// SugarCpp.g:264:31: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==99))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:32: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(264, 32);
				char_literal104=(IToken)Match(input,99,Follow._99_in_type_name1247);  
				stream_99.Add(char_literal104);

				DebugLocation(264, 36);
				// SugarCpp.g:264:36: ( type_name ( ',' type_name )* )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==IDENT||LA49_0==124||LA49_0==145))
				{
					alt49 = 1;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:264:37: type_name ( ',' type_name )*
					{
					DebugLocation(264, 37);
					PushFollow(Follow._type_name_in_type_name1250);
					type_name105=type_name();
					PopFollow();

					stream_type_name.Add(type_name105.Tree);
					DebugLocation(264, 47);
					// SugarCpp.g:264:47: ( ',' type_name )*
					try { DebugEnterSubRule(48);
					while (true)
					{
						int alt48=2;
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==86))
						{
							alt48 = 1;
						}


						} finally { DebugExitDecision(48); }
						switch ( alt48 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:264:48: ',' type_name
							{
							DebugLocation(264, 48);
							char_literal106=(IToken)Match(input,86,Follow._86_in_type_name1253);  
							stream_86.Add(char_literal106);

							DebugLocation(264, 52);
							PushFollow(Follow._type_name_in_type_name1255);
							type_name107=type_name();
							PopFollow();

							stream_type_name.Add(type_name107.Tree);

							}
							break;

						default:
							goto loop48;
						}
					}

					loop48:
						;

					} finally { DebugExitSubRule(48); }


					}
					break;

				}
				} finally { DebugExitSubRule(49); }

				DebugLocation(264, 66);
				char_literal108=(IToken)Match(input,107,Follow._107_in_type_name1261);  
				stream_107.Add(char_literal108);


				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(264, 72);
			// SugarCpp.g:264:72: ( type_name_op )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==114))
				{
					int LA51_2 = input.LA(2);

					if ((LA51_2==115))
					{
						alt51 = 1;
					}


				}
				else if ((LA51_0==77||LA51_0==81))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:264:72: type_name_op
					{
					DebugLocation(264, 72);
					PushFollow(Follow._type_name_op_in_type_name1265);
					type_name_op109=type_name_op();
					PopFollow();

					stream_type_name_op.Add(type_name_op109.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: ident, type_name_op, type_name, 145, 124, 99, 107
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 264:86: -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(264, 89);
				// SugarCpp.g:264:89: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(264, 91);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(264, 102);
				// SugarCpp.g:264:102: ( 'const' )?
				if (stream_124.HasNext)
				{
					DebugLocation(264, 102);
					adaptor.AddChild(root_1, stream_124.NextNode());

				}
				stream_124.Reset();
				DebugLocation(264, 111);
				// SugarCpp.g:264:111: ( 'unsigned' )?
				if (stream_145.HasNext)
				{
					DebugLocation(264, 111);
					adaptor.AddChild(root_1, stream_145.NextNode());

				}
				stream_145.Reset();
				DebugLocation(264, 123);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(264, 129);
				// SugarCpp.g:264:129: ( '<' ( type_name )* '>' )?
				if (stream_type_name.HasNext||stream_99.HasNext||stream_107.HasNext)
				{
					DebugLocation(264, 130);
					adaptor.AddChild(root_1, stream_99.NextNode());
					DebugLocation(264, 134);
					// SugarCpp.g:264:134: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(264, 134);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(264, 145);
					adaptor.AddChild(root_1, stream_107.NextNode());

				}
				stream_type_name.Reset();
				stream_99.Reset();
				stream_107.Reset();
				DebugLocation(264, 152);
				// SugarCpp.g:264:152: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(264, 152);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:267:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 16);
		TraceIn("generic_parameter_inside", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident110 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident112 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(267, 1);
		try
		{
			// SugarCpp.g:268:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:268:4: ident ( ',' ident )*
			{
			DebugLocation(268, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1305);
			ident110=ident();
			PopFollow();

			stream_ident.Add(ident110.Tree);
			DebugLocation(268, 10);
			// SugarCpp.g:268:10: ( ',' ident )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==86))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:268:11: ',' ident
					{
					DebugLocation(268, 11);
					char_literal111=(IToken)Match(input,86,Follow._86_in_generic_parameter_inside1308);  
					stream_86.Add(char_literal111);

					DebugLocation(268, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1310);
					ident112=ident();
					PopFollow();

					stream_ident.Add(ident112.Tree);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 268:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(268, 26);
				// SugarCpp.g:268:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(268, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(268, 47);
				// SugarCpp.g:268:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(268, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 16);
			LeaveRule("generic_parameter_inside", 16);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:271:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 17);
		TraceIn("generic_parameter", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal113 = default(IToken);
		IToken char_literal115 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside114 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal113_tree = default(CommonTree);
		CommonTree char_literal115_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(271, 1);
		try
		{
			// SugarCpp.g:272:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:272:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(272, 4);
			char_literal113=(IToken)Match(input,99,Follow._99_in_generic_parameter1332);  
			stream_99.Add(char_literal113);

			DebugLocation(272, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1334);
			generic_parameter_inside114=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside114.Tree);
			DebugLocation(272, 33);
			char_literal115=(IToken)Match(input,107,Follow._107_in_generic_parameter1336);  
			stream_107.Add(char_literal115);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 272:37: -> generic_parameter_inside
			{
				DebugLocation(272, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 17);
			LeaveRule("generic_parameter", 17);
			LeaveRule_generic_parameter();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:275:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 18);
		TraceIn("func_args", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal117 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item118 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal117_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(275, 1);
		try
		{
			// SugarCpp.g:276:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:276:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(276, 4);
			PushFollow(Follow._func_args_item_in_func_args1351);
			func_args_item116=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item116.Tree);
			DebugLocation(276, 19);
			// SugarCpp.g:276:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==86))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:20: ',' func_args_item
					{
					DebugLocation(276, 20);
					char_literal117=(IToken)Match(input,86,Follow._86_in_func_args1354);  
					stream_86.Add(char_literal117);

					DebugLocation(276, 24);
					PushFollow(Follow._func_args_item_in_func_args1356);
					func_args_item118=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item118.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 276:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(276, 44);
				// SugarCpp.g:276:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(276, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(276, 56);
				// SugarCpp.g:276:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(276, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 18);
			LeaveRule("func_args", 18);
			LeaveRule_func_args();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:279:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 19);
		TraceIn("func_args_item", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal120 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken string_literal123 = default(IToken);
		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken string_literal128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal120_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		CommonTree string_literal123_tree = default(CommonTree);
		CommonTree char_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree string_literal128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(279, 1);
		try
		{
			// SugarCpp.g:280:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==IDENT))
			{
				alt57 = 1;
			}
			else if ((LA57_0==98))
			{
				alt57 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:280:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(280, 4);
				PushFollow(Follow._ident_list_in_func_args_item1378);
				ident_list119=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list119.Tree);
				DebugLocation(280, 15);
				char_literal120=(IToken)Match(input,96,Follow._96_in_func_args_item1380);  
				stream_96.Add(char_literal120);

				DebugLocation(280, 19);
				PushFollow(Follow._type_name_in_func_args_item1382);
				type_name121=type_name();
				PopFollow();

				stream_type_name.Add(type_name121.Tree);
				DebugLocation(280, 29);
				// SugarCpp.g:280:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt56=3;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				switch (input.LA(1))
				{
				case 98:
				case 104:
					{
					alt56 = 1;
					}
					break;
				case 79:
					{
					alt56 = 2;
					}
					break;
				case 80:
				case 86:
					{
					alt56 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:31: ( '=' | ':=' ) expr
					{
					DebugLocation(280, 31);
					// SugarCpp.g:280:31: ( '=' | ':=' )
					int alt54=2;
					try { DebugEnterSubRule(54);
					try { DebugEnterDecision(54, false);
					int LA54_0 = input.LA(1);

					if ((LA54_0==104))
					{
						alt54 = 1;
					}
					else if ((LA54_0==98))
					{
						alt54 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:280:32: '='
						{
						DebugLocation(280, 32);
						char_literal122=(IToken)Match(input,104,Follow._104_in_func_args_item1387);  
						stream_104.Add(char_literal122);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:280:38: ':='
						{
						DebugLocation(280, 38);
						string_literal123=(IToken)Match(input,98,Follow._98_in_func_args_item1391);  
						stream_98.Add(string_literal123);


						}
						break;

					}
					} finally { DebugExitSubRule(54); }

					DebugLocation(280, 44);
					PushFollow(Follow._expr_in_func_args_item1394);
					expr124=expr();
					PopFollow();

					stream_expr.Add(expr124.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 280:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(280, 53);
						// SugarCpp.g:280:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(280, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(280, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(280, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(280, 93);
						// SugarCpp.g:280:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(280, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:281:33: '(' ( expr_list )? ')'
					{
					DebugLocation(281, 33);
					char_literal125=(IToken)Match(input,79,Follow._79_in_func_args_item1442);  
					stream_79.Add(char_literal125);

					DebugLocation(281, 37);
					// SugarCpp.g:281:37: ( expr_list )?
					int alt55=2;
					try { DebugEnterSubRule(55);
					try { DebugEnterDecision(55, false);
					int LA55_0 = input.LA(1);

					if ((LA55_0==IDENT||LA55_0==NUMBER||LA55_0==STRING||LA55_0==72||LA55_0==77||LA55_0==79||LA55_0==81||(LA55_0>=83 && LA55_0<=84)||(LA55_0>=87 && LA55_0<=88)||(LA55_0>=113 && LA55_0<=114)||LA55_0==137||LA55_0==152))
					{
						alt55 = 1;
					}
					} finally { DebugExitDecision(55); }
					switch (alt55)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:281:37: expr_list
						{
						DebugLocation(281, 37);
						PushFollow(Follow._expr_list_in_func_args_item1444);
						expr_list126=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list126.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(55); }

					DebugLocation(281, 48);
					char_literal127=(IToken)Match(input,80,Follow._80_in_func_args_item1447);  
					stream_80.Add(char_literal127);



					{
					// AST REWRITE
					// elements: type_name, ident_list, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 281:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(281, 56);
						// SugarCpp.g:281:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(281, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(281, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(281, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(281, 98);
						// SugarCpp.g:281:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(281, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:282:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 282:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(282, 18);
						// SugarCpp.g:282:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(282, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(282, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(282, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(56); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:284:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(284, 8);
				string_literal128=(IToken)Match(input,98,Follow._98_in_func_args_item1504); 
				string_literal128_tree = (CommonTree)adaptor.Create(string_literal128);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal128_tree, root_0);
				DebugLocation(284, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1508);
				modify_expr129=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr129.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 19);
			LeaveRule("func_args_item", 19);
			LeaveRule_func_args_item();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:287:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 20);
		TraceIn("func_def", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal132 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal137 = default(IToken);
		IToken NEWLINE138 = default(IToken);
		IToken char_literal140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident133 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter134 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal132_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree NEWLINE138_tree = default(CommonTree);
		CommonTree char_literal140_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(287, 4);
		try
		{
			// SugarCpp.g:288:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:288:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(288, 4);
			// SugarCpp.g:288:4: ( attribute )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==114))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:4: attribute
				{
				DebugLocation(288, 4);
				PushFollow(Follow._attribute_in_func_def1519);
				attribute130=attribute();
				PopFollow();

				stream_attribute.Add(attribute130.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(58); }

			DebugLocation(288, 15);
			// SugarCpp.g:288:15: ( type_name )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			try
			{
				alt59 = dfa59.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:15: type_name
				{
				DebugLocation(288, 15);
				PushFollow(Follow._type_name_in_func_def1522);
				type_name131=type_name();
				PopFollow();

				stream_type_name.Add(type_name131.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(288, 26);
			// SugarCpp.g:288:26: ( '~' )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==152))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:26: '~'
				{
				DebugLocation(288, 26);
				char_literal132=(IToken)Match(input,152,Follow._152_in_func_def1525);  
				stream_152.Add(char_literal132);


				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(288, 31);
			PushFollow(Follow._ident_in_func_def1528);
			ident133=ident();
			PopFollow();

			stream_ident.Add(ident133.Tree);
			DebugLocation(288, 37);
			// SugarCpp.g:288:37: ( generic_parameter )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==99))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:37: generic_parameter
				{
				DebugLocation(288, 37);
				PushFollow(Follow._generic_parameter_in_func_def1530);
				generic_parameter134=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter134.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(288, 56);
			char_literal135=(IToken)Match(input,79,Follow._79_in_func_def1533);  
			stream_79.Add(char_literal135);

			DebugLocation(288, 60);
			// SugarCpp.g:288:60: ( func_args )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==IDENT||LA62_0==98))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:60: func_args
				{
				DebugLocation(288, 60);
				PushFollow(Follow._func_args_in_func_def1535);
				func_args136=func_args();
				PopFollow();

				stream_func_args.Add(func_args136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(288, 71);
			char_literal137=(IToken)Match(input,80,Follow._80_in_func_def1538);  
			stream_80.Add(char_literal137);

			DebugLocation(288, 75);
			// SugarCpp.g:288:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==NEWLINE))
			{
				alt64 = 1;
			}
			else if ((LA64_0==104))
			{
				alt64 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(288, 76);
				// SugarCpp.g:288:76: ( NEWLINE )+
				int cnt63=0;
				try { DebugEnterSubRule(63);
				while (true)
				{
					int alt63=2;
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==NEWLINE))
					{
						alt63 = 1;
					}


					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:288:76: NEWLINE
						{
						DebugLocation(288, 76);
						NEWLINE138=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1541);  
						stream_NEWLINE.Add(NEWLINE138);


						}
						break;

					default:
						if (cnt63 >= 1)
							goto loop63;

						EarlyExitException eee63 = new EarlyExitException( 63, input );
						DebugRecognitionException(eee63);
						throw eee63;
					}
					cnt63++;
				}
				loop63:
					;

				} finally { DebugExitSubRule(63); }

				DebugLocation(288, 85);
				PushFollow(Follow._stmt_block_in_func_def1544);
				stmt_block139=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block139.Tree);


				{
				// AST REWRITE
				// elements: func_args, attribute, generic_parameter, 152, type_name, ident, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 288:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(288, 99);
					// SugarCpp.g:288:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(288, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(288, 110);
					// SugarCpp.g:288:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(288, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(288, 121);
					// SugarCpp.g:288:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(288, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(288, 132);
					// SugarCpp.g:288:132: ( '~' )?
					if (stream_152.HasNext)
					{
						DebugLocation(288, 132);
						adaptor.AddChild(root_1, stream_152.NextNode());

					}
					stream_152.Reset();
					DebugLocation(288, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(288, 143);
					// SugarCpp.g:288:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(288, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(288, 162);
					// SugarCpp.g:288:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(288, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(288, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:289:23: '=' expr
				{
				DebugLocation(289, 23);
				char_literal140=(IToken)Match(input,104,Follow._104_in_func_def1593);  
				stream_104.Add(char_literal140);

				DebugLocation(289, 27);
				PushFollow(Follow._expr_in_func_def1595);
				expr141=expr();
				PopFollow();

				stream_expr.Add(expr141.Tree);


				{
				// AST REWRITE
				// elements: attribute, 152, ident, type_name, expr, func_args, generic_parameter
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 289:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(289, 36);
					// SugarCpp.g:289:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(289, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(289, 47);
					// SugarCpp.g:289:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(289, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(289, 58);
					// SugarCpp.g:289:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(289, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(289, 69);
					// SugarCpp.g:289:69: ( '~' )?
					if (stream_152.HasNext)
					{
						DebugLocation(289, 69);
						adaptor.AddChild(root_1, stream_152.NextNode());

					}
					stream_152.Reset();
					DebugLocation(289, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(289, 80);
					// SugarCpp.g:289:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(289, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(289, 99);
					// SugarCpp.g:289:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(289, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(289, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 20);
			LeaveRule("func_def", 20);
			LeaveRule_func_def();
		}
		DebugLocation(290, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:292:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 21);
		TraceIn("stmt_block", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT142 = default(IToken);
		IToken NEWLINE143 = default(IToken);
		IToken NEWLINE145 = default(IToken);
		IToken DEDENT146 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt144 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT142_tree = default(CommonTree);
		CommonTree NEWLINE143_tree = default(CommonTree);
		CommonTree NEWLINE145_tree = default(CommonTree);
		CommonTree DEDENT146_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(292, 1);
		try
		{
			// SugarCpp.g:293:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:293:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(293, 4);
			INDENT142=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1636);  
			stream_INDENT.Add(INDENT142);

			DebugLocation(293, 11);
			// SugarCpp.g:293:11: ( NEWLINE )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==NEWLINE))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:293:11: NEWLINE
					{
					DebugLocation(293, 11);
					NEWLINE143=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1638);  
					stream_NEWLINE.Add(NEWLINE143);


					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(293, 21);
			// SugarCpp.g:293:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==IDENT||LA67_0==79||LA67_0==113||LA67_0==125||(LA67_0>=129 && LA67_0<=131)||LA67_0==135||LA67_0==139||(LA67_0>=142 && LA67_0<=144)||(LA67_0>=146 && LA67_0<=148)))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:293:22: stmt ( NEWLINE )+
					{
					DebugLocation(293, 22);
					PushFollow(Follow._stmt_in_stmt_block1643);
					stmt144=stmt();
					PopFollow();

					stream_stmt.Add(stmt144.Tree);
					DebugLocation(293, 27);
					// SugarCpp.g:293:27: ( NEWLINE )+
					int cnt66=0;
					try { DebugEnterSubRule(66);
					while (true)
					{
						int alt66=2;
						try { DebugEnterDecision(66, false);
						int LA66_0 = input.LA(1);

						if ((LA66_0==NEWLINE))
						{
							alt66 = 1;
						}


						} finally { DebugExitDecision(66); }
						switch (alt66)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:293:27: NEWLINE
							{
							DebugLocation(293, 27);
							NEWLINE145=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1645);  
							stream_NEWLINE.Add(NEWLINE145);


							}
							break;

						default:
							if (cnt66 >= 1)
								goto loop66;

							EarlyExitException eee66 = new EarlyExitException( 66, input );
							DebugRecognitionException(eee66);
							throw eee66;
						}
						cnt66++;
					}
					loop66:
						;

					} finally { DebugExitSubRule(66); }


					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }

			DebugLocation(293, 38);
			DEDENT146=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1650);  
			stream_DEDENT.Add(DEDENT146);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 293:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(293, 48);
				// SugarCpp.g:293:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(293, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(293, 61);
				// SugarCpp.g:293:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(293, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 21);
			LeaveRule("stmt_block", 21);
			LeaveRule_stmt_block();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:296:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 22);
		TraceIn("stmt", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for149 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer152 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(296, 1);
		try
		{
			// SugarCpp.g:297:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_defer )
			int alt68=6;
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 79:
			case 113:
			case 139:
			case 143:
			case 147:
				{
				alt68 = 1;
				}
				break;
			case 131:
			case 144:
				{
				alt68 = 2;
				}
				break;
			case 130:
				{
				alt68 = 3;
				}
				break;
			case 135:
			case 146:
			case 148:
				{
				alt68 = 4;
				}
				break;
			case 142:
				{
				alt68 = 5;
				}
				break;
			case 125:
			case 129:
				{
				alt68 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:297:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(297, 4);
				PushFollow(Follow._stmt_expr_in_stmt1670);
				stmt_expr147=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr147.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:298:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(298, 4);
				PushFollow(Follow._stmt_if_in_stmt1675);
				stmt_if148=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if148.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:299:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(299, 4);
				PushFollow(Follow._stmt_for_in_stmt1680);
				stmt_for149=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for149.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:300:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(300, 4);
				PushFollow(Follow._stmt_while_in_stmt1685);
				stmt_while150=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while150.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:301:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(301, 4);
				PushFollow(Follow._stmt_try_in_stmt1690);
				stmt_try151=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try151.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:302:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(302, 4);
				PushFollow(Follow._stmt_defer_in_stmt1695);
				stmt_defer152=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer152.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 22);
			LeaveRule("stmt", 22);
			LeaveRule_stmt();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:305:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 23);
		TraceIn("stmt_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal153 = default(IToken);
		IToken string_literal155 = default(IToken);
		IToken string_literal157 = default(IToken);
		IToken string_literal159 = default(IToken);
		IToken string_literal161 = default(IToken);
		IToken char_literal163 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item164 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal153_tree = default(CommonTree);
		CommonTree string_literal155_tree = default(CommonTree);
		CommonTree string_literal157_tree = default(CommonTree);
		CommonTree string_literal159_tree = default(CommonTree);
		CommonTree string_literal161_tree = default(CommonTree);
		CommonTree char_literal163_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(305, 1);
		try
		{
			// SugarCpp.g:306:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:306:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(306, 4);
			// SugarCpp.g:306:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:306:5: a= stmt_expr_item
			{
			DebugLocation(306, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1709);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 306:22: -> $a
			{
				DebugLocation(306, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(306, 29);
			// SugarCpp.g:306:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=6;
				try { DebugEnterDecision(70, false);
				switch (input.LA(1))
				{
				case 131:
					{
					alt70 = 1;
					}
					break;
				case 144:
					{
					alt70 = 2;
					}
					break;
				case 148:
					{
					alt70 = 3;
					}
					break;
				case 146:
					{
					alt70 = 4;
					}
					break;
				case 130:
					{
					alt70 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:306:31: 'if' expr
					{
					DebugLocation(306, 31);
					string_literal153=(IToken)Match(input,131,Follow._131_in_stmt_expr1719);  
					stream_131.Add(string_literal153);

					DebugLocation(306, 36);
					PushFollow(Follow._expr_in_stmt_expr1721);
					expr154=expr();
					PopFollow();

					stream_expr.Add(expr154.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 306:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(306, 44);
						// SugarCpp.g:306:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(306, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(306, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(306, 59);
						// SugarCpp.g:306:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(306, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(306, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:307:13: 'unless' expr
					{
					DebugLocation(307, 13);
					string_literal155=(IToken)Match(input,144,Follow._144_in_stmt_expr1750);  
					stream_144.Add(string_literal155);

					DebugLocation(307, 22);
					PushFollow(Follow._expr_in_stmt_expr1752);
					expr156=expr();
					PopFollow();

					stream_expr.Add(expr156.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 307:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(307, 30);
						// SugarCpp.g:307:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(307, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(307, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(307, 49);
						// SugarCpp.g:307:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(307, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(307, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:308:13: 'while' expr
					{
					DebugLocation(308, 13);
					string_literal157=(IToken)Match(input,148,Follow._148_in_stmt_expr1781);  
					stream_148.Add(string_literal157);

					DebugLocation(308, 21);
					PushFollow(Follow._expr_in_stmt_expr1783);
					expr158=expr();
					PopFollow();

					stream_expr.Add(expr158.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 308:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(308, 29);
						// SugarCpp.g:308:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(308, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(308, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(308, 47);
						// SugarCpp.g:308:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(308, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(308, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:309:13: 'until' expr
					{
					DebugLocation(309, 13);
					string_literal159=(IToken)Match(input,146,Follow._146_in_stmt_expr1812);  
					stream_146.Add(string_literal159);

					DebugLocation(309, 21);
					PushFollow(Follow._expr_in_stmt_expr1814);
					expr160=expr();
					PopFollow();

					stream_expr.Add(expr160.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 309:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(309, 29);
						// SugarCpp.g:309:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(309, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(309, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(309, 47);
						// SugarCpp.g:309:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(309, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(309, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:310:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(310, 13);
					string_literal161=(IToken)Match(input,130,Follow._130_in_stmt_expr1843);  
					stream_130.Add(string_literal161);

					DebugLocation(310, 19);
					PushFollow(Follow._for_item_in_stmt_expr1845);
					for_item162=for_item();
					PopFollow();

					stream_for_item.Add(for_item162.Tree);
					DebugLocation(310, 28);
					// SugarCpp.g:310:28: ( ',' for_item )*
					try { DebugEnterSubRule(69);
					while (true)
					{
						int alt69=2;
						try { DebugEnterDecision(69, false);
						int LA69_0 = input.LA(1);

						if ((LA69_0==86))
						{
							alt69 = 1;
						}


						} finally { DebugExitDecision(69); }
						switch ( alt69 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:310:29: ',' for_item
							{
							DebugLocation(310, 29);
							char_literal163=(IToken)Match(input,86,Follow._86_in_stmt_expr1848);  
							stream_86.Add(char_literal163);

							DebugLocation(310, 33);
							PushFollow(Follow._for_item_in_stmt_expr1850);
							for_item164=for_item();
							PopFollow();

							stream_for_item.Add(for_item164.Tree);

							}
							break;

						default:
							goto loop69;
						}
					}

					loop69:
						;

					} finally { DebugExitSubRule(69); }



					{
					// AST REWRITE
					// elements: stmt_expr, for_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 310:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(310, 47);
						// SugarCpp.g:310:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(310, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(310, 58);
						// SugarCpp.g:310:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(310, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(310, 68);
						// SugarCpp.g:310:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(310, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(310, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 23);
			LeaveRule("stmt_expr", 23);
			LeaveRule_stmt_expr();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:314:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 24);
		TraceIn("stmt_expr_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(314, 1);
		try
		{
			// SugarCpp.g:315:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt71=5;
			try { DebugEnterDecision(71, false);
			try
			{
				alt71 = dfa71.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:315:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(315, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item1892);
				stmt_alloc165=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc165.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:316:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(316, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item1897);
				stmt_return166=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return166.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:317:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(317, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item1902);
				stmt_using167=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using167.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:318:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(318, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item1907);
				stmt_typedef168=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef168.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:319:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(319, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item1912);
				stmt_modify169=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify169.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 24);
			LeaveRule("stmt_expr_item", 24);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:322:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 25);
		TraceIn("stmt_defer", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal170 = default(IToken);
		IToken string_literal172 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt173 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal170_tree = default(CommonTree);
		CommonTree string_literal172_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(322, 1);
		try
		{
			// SugarCpp.g:323:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==125))
			{
				alt72 = 1;
			}
			else if ((LA72_0==129))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:4: 'defer' stmt
				{
				DebugLocation(323, 4);
				string_literal170=(IToken)Match(input,125,Follow._125_in_stmt_defer1923);  
				stream_125.Add(string_literal170);

				DebugLocation(323, 12);
				PushFollow(Follow._stmt_in_stmt_defer1925);
				stmt171=stmt();
				PopFollow();

				stream_stmt.Add(stmt171.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 323:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(323, 20);
					// SugarCpp.g:323:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(323, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(323, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:324:4: 'finally' stmt
				{
				DebugLocation(324, 4);
				string_literal172=(IToken)Match(input,129,Follow._129_in_stmt_defer1938);  
				stream_129.Add(string_literal172);

				DebugLocation(324, 14);
				PushFollow(Follow._stmt_in_stmt_defer1940);
				stmt173=stmt();
				PopFollow();

				stream_stmt.Add(stmt173.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 324:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(324, 22);
					// SugarCpp.g:324:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(324, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(324, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 25);
			LeaveRule("stmt_defer", 25);
			LeaveRule_stmt_defer();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:327:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 26);
		TraceIn("stmt_typedef", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal174 = default(IToken);
		IToken char_literal176 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name177 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree char_literal176_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(327, 1);
		try
		{
			// SugarCpp.g:328:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:328:4: 'typedef' ident '=' type_name
			{
			DebugLocation(328, 4);
			string_literal174=(IToken)Match(input,143,Follow._143_in_stmt_typedef1959);  
			stream_143.Add(string_literal174);

			DebugLocation(328, 14);
			PushFollow(Follow._ident_in_stmt_typedef1961);
			ident175=ident();
			PopFollow();

			stream_ident.Add(ident175.Tree);
			DebugLocation(328, 20);
			char_literal176=(IToken)Match(input,104,Follow._104_in_stmt_typedef1963);  
			stream_104.Add(char_literal176);

			DebugLocation(328, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1965);
			type_name177=type_name();
			PopFollow();

			stream_type_name.Add(type_name177.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 328:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(328, 37);
				// SugarCpp.g:328:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(328, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(328, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(328, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 26);
			LeaveRule("stmt_typedef", 26);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:331:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 27);
		TraceIn("stmt_using_item", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal179 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal179_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(331, 36);
		try
		{
			// SugarCpp.g:331:16: ( ident | 'namespace' )
			int alt73=2;
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==IDENT))
			{
				alt73 = 1;
			}
			else if ((LA73_0==136))
			{
				alt73 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:331:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(331, 18);
				PushFollow(Follow._ident_in_stmt_using_item1984);
				ident178=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident178.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:331:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(331, 26);
				string_literal179=(IToken)Match(input,136,Follow._136_in_stmt_using_item1988); 
				string_literal179_tree = (CommonTree)adaptor.Create(string_literal179);
				adaptor.AddChild(root_0, string_literal179_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 27);
			LeaveRule("stmt_using_item", 27);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(331, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:332:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 28);
		TraceIn("stmt_using", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal180 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item181 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal180_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:333:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(333, 4);
			string_literal180=(IToken)Match(input,147,Follow._147_in_stmt_using1996);  
			stream_147.Add(string_literal180);

			DebugLocation(333, 12);
			// SugarCpp.g:333:12: ( stmt_using_item )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==IDENT||LA74_0==136))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:333:12: stmt_using_item
					{
					DebugLocation(333, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1998);
					stmt_using_item181=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item181.Tree);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 333:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(333, 32);
				// SugarCpp.g:333:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(333, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(333, 45);
				// SugarCpp.g:333:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(333, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 28);
			LeaveRule("stmt_using", 28);
			LeaveRule_stmt_using();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:336:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 29);
		TraceIn("stmt_return", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal182 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal182_tree = default(CommonTree);
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(336, 1);
		try
		{
			// SugarCpp.g:337:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:337:4: 'return' ( expr )?
			{
			DebugLocation(337, 4);
			string_literal182=(IToken)Match(input,139,Follow._139_in_stmt_return2019);  
			stream_139.Add(string_literal182);

			DebugLocation(337, 13);
			// SugarCpp.g:337:13: ( expr )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==IDENT||LA75_0==NUMBER||LA75_0==STRING||LA75_0==72||LA75_0==77||LA75_0==79||LA75_0==81||(LA75_0>=83 && LA75_0<=84)||(LA75_0>=87 && LA75_0<=88)||(LA75_0>=113 && LA75_0<=114)||LA75_0==137||LA75_0==152))
			{
				alt75 = 1;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:337:13: expr
				{
				DebugLocation(337, 13);
				PushFollow(Follow._expr_in_stmt_return2021);
				expr183=expr();
				PopFollow();

				stream_expr.Add(expr183.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(75); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 337:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(337, 22);
				// SugarCpp.g:337:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(337, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(337, 36);
				// SugarCpp.g:337:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(337, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 29);
			LeaveRule("stmt_return", 29);
			LeaveRule_stmt_return();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:340:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 30);
		TraceIn("stmt_if", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal184 = default(IToken);
		IToken NEWLINE186 = default(IToken);
		IToken NEWLINE188 = default(IToken);
		IToken string_literal189 = default(IToken);
		IToken string_literal191 = default(IToken);
		IToken string_literal193 = default(IToken);
		IToken NEWLINE195 = default(IToken);
		IToken NEWLINE197 = default(IToken);
		IToken string_literal198 = default(IToken);
		IToken string_literal200 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block187 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt201 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal184_tree = default(CommonTree);
		CommonTree NEWLINE186_tree = default(CommonTree);
		CommonTree NEWLINE188_tree = default(CommonTree);
		CommonTree string_literal189_tree = default(CommonTree);
		CommonTree string_literal191_tree = default(CommonTree);
		CommonTree string_literal193_tree = default(CommonTree);
		CommonTree NEWLINE195_tree = default(CommonTree);
		CommonTree NEWLINE197_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		CommonTree string_literal200_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(340, 1);
		try
		{
			// SugarCpp.g:341:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) )
			int alt84=2;
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==131))
			{
				alt84 = 1;
			}
			else if ((LA84_0==144))
			{
				alt84 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:341:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(341, 4);
				string_literal184=(IToken)Match(input,131,Follow._131_in_stmt_if2042);  
				stream_131.Add(string_literal184);

				DebugLocation(341, 9);
				PushFollow(Follow._expr_in_stmt_if2044);
				expr185=expr();
				PopFollow();

				stream_expr.Add(expr185.Tree);
				DebugLocation(341, 14);
				// SugarCpp.g:341:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==NEWLINE))
				{
					alt79 = 1;
				}
				else if ((LA79_0==140))
				{
					alt79 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:341:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )?
					{
					DebugLocation(341, 15);
					// SugarCpp.g:341:15: ( NEWLINE )+
					int cnt76=0;
					try { DebugEnterSubRule(76);
					while (true)
					{
						int alt76=2;
						try { DebugEnterDecision(76, false);
						int LA76_0 = input.LA(1);

						if ((LA76_0==NEWLINE))
						{
							alt76 = 1;
						}


						} finally { DebugExitDecision(76); }
						switch (alt76)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:341:15: NEWLINE
							{
							DebugLocation(341, 15);
							NEWLINE186=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2047);  
							stream_NEWLINE.Add(NEWLINE186);


							}
							break;

						default:
							if (cnt76 >= 1)
								goto loop76;

							EarlyExitException eee76 = new EarlyExitException( 76, input );
							DebugRecognitionException(eee76);
							throw eee76;
						}
						cnt76++;
					}
					loop76:
						;

					} finally { DebugExitSubRule(76); }

					DebugLocation(341, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2050);
					stmt_block187=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block187.Tree);
					DebugLocation(341, 35);
					// SugarCpp.g:341:35: ( ( NEWLINE )* 'else' stmt_block )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, false);
					try
					{
						alt78 = dfa78.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:341:36: ( NEWLINE )* 'else' stmt_block
						{
						DebugLocation(341, 36);
						// SugarCpp.g:341:36: ( NEWLINE )*
						try { DebugEnterSubRule(77);
						while (true)
						{
							int alt77=2;
							try { DebugEnterDecision(77, false);
							int LA77_0 = input.LA(1);

							if ((LA77_0==NEWLINE))
							{
								alt77 = 1;
							}


							} finally { DebugExitDecision(77); }
							switch ( alt77 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:341:36: NEWLINE
								{
								DebugLocation(341, 36);
								NEWLINE188=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2053);  
								stream_NEWLINE.Add(NEWLINE188);


								}
								break;

							default:
								goto loop77;
							}
						}

						loop77:
							;

						} finally { DebugExitSubRule(77); }

						DebugLocation(341, 45);
						string_literal189=(IToken)Match(input,127,Follow._127_in_stmt_if2056);  
						stream_127.Add(string_literal189);

						DebugLocation(341, 52);
						PushFollow(Follow._stmt_block_in_stmt_if2058);
						stmt_block190=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block190.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(78); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 341:65: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(341, 68);
						// SugarCpp.g:341:68: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(341, 70);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(341, 78);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(341, 83);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(341, 94);
						// SugarCpp.g:341:94: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(341, 94);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:342:16: 'then' stmt
					{
					DebugLocation(342, 16);
					string_literal191=(IToken)Match(input,140,Follow._140_in_stmt_if2090);  
					stream_140.Add(string_literal191);

					DebugLocation(342, 23);
					PushFollow(Follow._stmt_in_stmt_if2092);
					stmt192=stmt();
					PopFollow();

					stream_stmt.Add(stmt192.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 342:28: -> ^( Stmt_If expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(342, 31);
						// SugarCpp.g:342:31: ^( Stmt_If expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(342, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(342, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(342, 46);
						// SugarCpp.g:342:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(342, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(342, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(79); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:344:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(344, 4);
				string_literal193=(IToken)Match(input,144,Follow._144_in_stmt_if2117);  
				stream_144.Add(string_literal193);

				DebugLocation(344, 13);
				PushFollow(Follow._expr_in_stmt_if2119);
				expr194=expr();
				PopFollow();

				stream_expr.Add(expr194.Tree);
				DebugLocation(344, 18);
				// SugarCpp.g:344:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==NEWLINE))
				{
					alt83 = 1;
				}
				else if ((LA83_0==140))
				{
					alt83 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:344:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )?
					{
					DebugLocation(344, 19);
					// SugarCpp.g:344:19: ( NEWLINE )+
					int cnt80=0;
					try { DebugEnterSubRule(80);
					while (true)
					{
						int alt80=2;
						try { DebugEnterDecision(80, false);
						int LA80_0 = input.LA(1);

						if ((LA80_0==NEWLINE))
						{
							alt80 = 1;
						}


						} finally { DebugExitDecision(80); }
						switch (alt80)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:344:19: NEWLINE
							{
							DebugLocation(344, 19);
							NEWLINE195=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2122);  
							stream_NEWLINE.Add(NEWLINE195);


							}
							break;

						default:
							if (cnt80 >= 1)
								goto loop80;

							EarlyExitException eee80 = new EarlyExitException( 80, input );
							DebugRecognitionException(eee80);
							throw eee80;
						}
						cnt80++;
					}
					loop80:
						;

					} finally { DebugExitSubRule(80); }

					DebugLocation(344, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2125);
					stmt_block196=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block196.Tree);
					DebugLocation(344, 39);
					// SugarCpp.g:344:39: ( ( NEWLINE )* 'else' stmt_block )?
					int alt82=2;
					try { DebugEnterSubRule(82);
					try { DebugEnterDecision(82, false);
					try
					{
						alt82 = dfa82.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(82); }
					switch (alt82)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:344:40: ( NEWLINE )* 'else' stmt_block
						{
						DebugLocation(344, 40);
						// SugarCpp.g:344:40: ( NEWLINE )*
						try { DebugEnterSubRule(81);
						while (true)
						{
							int alt81=2;
							try { DebugEnterDecision(81, false);
							int LA81_0 = input.LA(1);

							if ((LA81_0==NEWLINE))
							{
								alt81 = 1;
							}


							} finally { DebugExitDecision(81); }
							switch ( alt81 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:344:40: NEWLINE
								{
								DebugLocation(344, 40);
								NEWLINE197=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2128);  
								stream_NEWLINE.Add(NEWLINE197);


								}
								break;

							default:
								goto loop81;
							}
						}

						loop81:
							;

						} finally { DebugExitSubRule(81); }

						DebugLocation(344, 49);
						string_literal198=(IToken)Match(input,127,Follow._127_in_stmt_if2131);  
						stream_127.Add(string_literal198);

						DebugLocation(344, 56);
						PushFollow(Follow._stmt_block_in_stmt_if2133);
						stmt_block199=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block199.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(82); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 344:69: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(344, 72);
						// SugarCpp.g:344:72: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(344, 74);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(344, 86);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(344, 91);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(344, 102);
						// SugarCpp.g:344:102: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(344, 102);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:345:20: 'then' stmt
					{
					DebugLocation(345, 20);
					string_literal200=(IToken)Match(input,140,Follow._140_in_stmt_if2169);  
					stream_140.Add(string_literal200);

					DebugLocation(345, 27);
					PushFollow(Follow._stmt_in_stmt_if2171);
					stmt201=stmt();
					PopFollow();

					stream_stmt.Add(stmt201.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 345:32: -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(345, 35);
						// SugarCpp.g:345:35: ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(345, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(345, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(345, 54);
						// SugarCpp.g:345:54: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(345, 56);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(345, 67);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(83); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 30);
			LeaveRule("stmt_if", 30);
			LeaveRule_stmt_if();
		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:349:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 31);
		TraceIn("stmt_while", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal202 = default(IToken);
		IToken NEWLINE204 = default(IToken);
		IToken string_literal206 = default(IToken);
		IToken string_literal208 = default(IToken);
		IToken NEWLINE210 = default(IToken);
		IToken string_literal212 = default(IToken);
		IToken string_literal214 = default(IToken);
		IToken NEWLINE216 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal202_tree = default(CommonTree);
		CommonTree NEWLINE204_tree = default(CommonTree);
		CommonTree string_literal206_tree = default(CommonTree);
		CommonTree string_literal208_tree = default(CommonTree);
		CommonTree NEWLINE210_tree = default(CommonTree);
		CommonTree string_literal212_tree = default(CommonTree);
		CommonTree string_literal214_tree = default(CommonTree);
		CommonTree NEWLINE216_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(349, 1);
		try
		{
			// SugarCpp.g:350:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt91=3;
			try { DebugEnterDecision(91, false);
			switch (input.LA(1))
			{
			case 148:
				{
				alt91 = 1;
				}
				break;
			case 146:
				{
				alt91 = 2;
				}
				break;
			case 135:
				{
				alt91 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:350:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(350, 4);
				string_literal202=(IToken)Match(input,148,Follow._148_in_stmt_while2206);  
				stream_148.Add(string_literal202);

				DebugLocation(350, 12);
				PushFollow(Follow._expr_in_stmt_while2208);
				expr203=expr();
				PopFollow();

				stream_expr.Add(expr203.Tree);
				DebugLocation(350, 17);
				// SugarCpp.g:350:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==NEWLINE))
				{
					alt86 = 1;
				}
				else if ((LA86_0==140))
				{
					alt86 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:350:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(350, 19);
					// SugarCpp.g:350:19: ( NEWLINE )+
					int cnt85=0;
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==NEWLINE))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch (alt85)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:350:19: NEWLINE
							{
							DebugLocation(350, 19);
							NEWLINE204=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2212);  
							stream_NEWLINE.Add(NEWLINE204);


							}
							break;

						default:
							if (cnt85 >= 1)
								goto loop85;

							EarlyExitException eee85 = new EarlyExitException( 85, input );
							DebugRecognitionException(eee85);
							throw eee85;
						}
						cnt85++;
					}
					loop85:
						;

					} finally { DebugExitSubRule(85); }

					DebugLocation(350, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2215);
					stmt_block205=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block205.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 350:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(350, 42);
						// SugarCpp.g:350:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(350, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(350, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(350, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:351:13: 'then' stmt
					{
					DebugLocation(351, 13);
					string_literal206=(IToken)Match(input,140,Follow._140_in_stmt_while2239);  
					stream_140.Add(string_literal206);

					DebugLocation(351, 20);
					PushFollow(Follow._stmt_in_stmt_while2241);
					stmt207=stmt();
					PopFollow();

					stream_stmt.Add(stmt207.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 351:25: -> ^( Stmt_While expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(351, 28);
						// SugarCpp.g:351:28: ^( Stmt_While expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(351, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(351, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(351, 46);
						// SugarCpp.g:351:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(351, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(351, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(86); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:353:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(353, 4);
				string_literal208=(IToken)Match(input,146,Follow._146_in_stmt_while2269);  
				stream_146.Add(string_literal208);

				DebugLocation(353, 12);
				PushFollow(Follow._expr_in_stmt_while2271);
				expr209=expr();
				PopFollow();

				stream_expr.Add(expr209.Tree);
				DebugLocation(353, 17);
				// SugarCpp.g:353:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==NEWLINE))
				{
					alt88 = 1;
				}
				else if ((LA88_0==140))
				{
					alt88 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:353:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(353, 19);
					// SugarCpp.g:353:19: ( NEWLINE )+
					int cnt87=0;
					try { DebugEnterSubRule(87);
					while (true)
					{
						int alt87=2;
						try { DebugEnterDecision(87, false);
						int LA87_0 = input.LA(1);

						if ((LA87_0==NEWLINE))
						{
							alt87 = 1;
						}


						} finally { DebugExitDecision(87); }
						switch (alt87)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:353:19: NEWLINE
							{
							DebugLocation(353, 19);
							NEWLINE210=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2275);  
							stream_NEWLINE.Add(NEWLINE210);


							}
							break;

						default:
							if (cnt87 >= 1)
								goto loop87;

							EarlyExitException eee87 = new EarlyExitException( 87, input );
							DebugRecognitionException(eee87);
							throw eee87;
						}
						cnt87++;
					}
					loop87:
						;

					} finally { DebugExitSubRule(87); }

					DebugLocation(353, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2278);
					stmt_block211=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block211.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 353:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(353, 42);
						// SugarCpp.g:353:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(353, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(353, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(353, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:354:13: 'then' stmt
					{
					DebugLocation(354, 13);
					string_literal212=(IToken)Match(input,140,Follow._140_in_stmt_while2302);  
					stream_140.Add(string_literal212);

					DebugLocation(354, 20);
					PushFollow(Follow._stmt_in_stmt_while2304);
					stmt213=stmt();
					PopFollow();

					stream_stmt.Add(stmt213.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 354:25: -> ^( Stmt_Until expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(354, 28);
						// SugarCpp.g:354:28: ^( Stmt_Until expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(354, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(354, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(354, 46);
						// SugarCpp.g:354:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(354, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(354, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(88); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:356:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(356, 4);
				string_literal214=(IToken)Match(input,135,Follow._135_in_stmt_while2332);  
				stream_135.Add(string_literal214);

				DebugLocation(356, 11);
				// SugarCpp.g:356:11: ( expr )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==IDENT||LA89_0==NUMBER||LA89_0==STRING||LA89_0==72||LA89_0==77||LA89_0==79||LA89_0==81||(LA89_0>=83 && LA89_0<=84)||(LA89_0>=87 && LA89_0<=88)||(LA89_0>=113 && LA89_0<=114)||LA89_0==137||LA89_0==152))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:356:11: expr
					{
					DebugLocation(356, 11);
					PushFollow(Follow._expr_in_stmt_while2334);
					expr215=expr();
					PopFollow();

					stream_expr.Add(expr215.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(356, 17);
				// SugarCpp.g:356:17: ( NEWLINE )+
				int cnt90=0;
				try { DebugEnterSubRule(90);
				while (true)
				{
					int alt90=2;
					try { DebugEnterDecision(90, false);
					int LA90_0 = input.LA(1);

					if ((LA90_0==NEWLINE))
					{
						alt90 = 1;
					}


					} finally { DebugExitDecision(90); }
					switch (alt90)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:356:17: NEWLINE
						{
						DebugLocation(356, 17);
						NEWLINE216=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2337);  
						stream_NEWLINE.Add(NEWLINE216);


						}
						break;

					default:
						if (cnt90 >= 1)
							goto loop90;

						EarlyExitException eee90 = new EarlyExitException( 90, input );
						DebugRecognitionException(eee90);
						throw eee90;
					}
					cnt90++;
				}
				loop90:
					;

				} finally { DebugExitSubRule(90); }

				DebugLocation(356, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2340);
				stmt_block217=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block217.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 356:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(356, 40);
					// SugarCpp.g:356:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(356, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(356, 52);
					// SugarCpp.g:356:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(356, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(356, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 31);
			LeaveRule("stmt_while", 31);
			LeaveRule_stmt_while();
		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:359:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 32);
		TraceIn("for_range", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal219 = default(IToken);
		IToken string_literal220 = default(IToken);
		IToken string_literal221 = default(IToken);
		IToken string_literal222 = default(IToken);
		IToken string_literal223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident218 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal219_tree = default(CommonTree);
		CommonTree string_literal220_tree = default(CommonTree);
		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree string_literal223_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(359, 1);
		try
		{
			// SugarCpp.g:360:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:360:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(360, 4);
			PushFollow(Follow._ident_in_for_range2362);
			ident218=ident();
			PopFollow();

			stream_ident.Add(ident218.Tree);
			DebugLocation(360, 10);
			string_literal219=(IToken)Match(input,100,Follow._100_in_for_range2364);  
			stream_100.Add(string_literal219);

			DebugLocation(360, 16);
			PushFollow(Follow._expr_in_for_range2368);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(360, 22);
			// SugarCpp.g:360:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt94=3;
			try { DebugEnterSubRule(94);
			try { DebugEnterDecision(94, false);
			switch (input.LA(1))
			{
			case 141:
				{
				alt94 = 1;
				}
				break;
			case 126:
				{
				alt94 = 2;
				}
				break;
			case NEWLINE:
			case 86:
			case 130:
			case 131:
			case 144:
			case 146:
			case 148:
				{
				alt94 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(360, 23);
				string_literal220=(IToken)Match(input,141,Follow._141_in_for_range2371);  
				stream_141.Add(string_literal220);

				DebugLocation(360, 29);
				PushFollow(Follow._expr_in_for_range2375);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(360, 35);
				// SugarCpp.g:360:35: ( 'by' c= expr )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==121))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:360:36: 'by' c= expr
					{
					DebugLocation(360, 36);
					string_literal221=(IToken)Match(input,121,Follow._121_in_for_range2378);  
					stream_121.Add(string_literal221);

					DebugLocation(360, 42);
					PushFollow(Follow._expr_in_for_range2382);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(92); }



				{
				// AST REWRITE
				// elements: b, ident, c, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 360:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(360, 53);
					// SugarCpp.g:360:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(360, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(360, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(360, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(360, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(360, 80);
					// SugarCpp.g:360:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(360, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:361:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(361, 8);
				string_literal222=(IToken)Match(input,126,Follow._126_in_for_range2411);  
				stream_126.Add(string_literal222);

				DebugLocation(361, 18);
				PushFollow(Follow._expr_in_for_range2415);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(361, 24);
				// SugarCpp.g:361:24: ( 'by' c= expr )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==121))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:361:25: 'by' c= expr
					{
					DebugLocation(361, 25);
					string_literal223=(IToken)Match(input,121,Follow._121_in_for_range2418);  
					stream_121.Add(string_literal223);

					DebugLocation(361, 31);
					PushFollow(Follow._expr_in_for_range2422);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(93); }



				{
				// AST REWRITE
				// elements: a, ident, c, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 361:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(361, 42);
					// SugarCpp.g:361:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(361, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(361, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(361, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(361, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(361, 74);
					// SugarCpp.g:361:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(361, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:362:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 362:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(362, 12);
					// SugarCpp.g:362:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(362, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(362, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(362, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 32);
			LeaveRule("for_range", 32);
			LeaveRule_for_range();
		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:366:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 33);
		TraceIn("for_when", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr224 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(366, 1);
		try
		{
			// SugarCpp.g:367:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:367:4: expr
			{
			DebugLocation(367, 4);
			PushFollow(Follow._expr_in_for_when2480);
			expr224=expr();
			PopFollow();

			stream_expr.Add(expr224.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 367:9: -> ^( For_Item_When expr )
			{
				DebugLocation(367, 12);
				// SugarCpp.g:367:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(367, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(367, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 33);
			LeaveRule("for_when", 33);
			LeaveRule_for_when();
		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:370:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 34);
		TraceIn("for_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when226 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(370, 1);
		try
		{
			// SugarCpp.g:371:2: ( for_range | for_when )
			int alt95=2;
			try { DebugEnterDecision(95, false);
			try
			{
				alt95 = dfa95.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:371:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(371, 4);
				PushFollow(Follow._for_range_in_for_item2499);
				for_range225=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range225.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:372:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(372, 4);
				PushFollow(Follow._for_when_in_for_item2504);
				for_when226=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when226.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 34);
			LeaveRule("for_item", 34);
			LeaveRule_for_item();
		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:375:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 35);
		TraceIn("stmt_for", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal227 = default(IToken);
		IToken char_literal229 = default(IToken);
		IToken NEWLINE231 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal227_tree = default(CommonTree);
		CommonTree char_literal229_tree = default(CommonTree);
		CommonTree NEWLINE231_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(375, 1);
		try
		{
			// SugarCpp.g:376:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:376:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(376, 4);
			string_literal227=(IToken)Match(input,130,Follow._130_in_stmt_for2515);  
			stream_130.Add(string_literal227);

			DebugLocation(376, 10);
			// SugarCpp.g:376:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:376:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(376, 12);
			PushFollow(Follow._for_item_in_stmt_for2519);
			for_item228=for_item();
			PopFollow();

			stream_for_item.Add(for_item228.Tree);
			DebugLocation(376, 21);
			// SugarCpp.g:376:21: ( ',' for_item )*
			try { DebugEnterSubRule(96);
			while (true)
			{
				int alt96=2;
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==86))
				{
					alt96 = 1;
				}


				} finally { DebugExitDecision(96); }
				switch ( alt96 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:376:22: ',' for_item
					{
					DebugLocation(376, 22);
					char_literal229=(IToken)Match(input,86,Follow._86_in_stmt_for2522);  
					stream_86.Add(char_literal229);

					DebugLocation(376, 26);
					PushFollow(Follow._for_item_in_stmt_for2524);
					for_item230=for_item();
					PopFollow();

					stream_for_item.Add(for_item230.Tree);

					}
					break;

				default:
					goto loop96;
				}
			}

			loop96:
				;

			} finally { DebugExitSubRule(96); }

			DebugLocation(376, 37);
			// SugarCpp.g:376:37: ( NEWLINE )+
			int cnt97=0;
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==NEWLINE))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:376:37: NEWLINE
					{
					DebugLocation(376, 37);
					NEWLINE231=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2528);  
					stream_NEWLINE.Add(NEWLINE231);


					}
					break;

				default:
					if (cnt97 >= 1)
						goto loop97;

					EarlyExitException eee97 = new EarlyExitException( 97, input );
					DebugRecognitionException(eee97);
					throw eee97;
				}
				cnt97++;
			}
			loop97:
				;

			} finally { DebugExitSubRule(97); }

			DebugLocation(376, 46);
			PushFollow(Follow._stmt_block_in_stmt_for2531);
			stmt_block232=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block232.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 376:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(376, 60);
				// SugarCpp.g:376:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(376, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(376, 71);
				// SugarCpp.g:376:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(376, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(376, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 35);
			LeaveRule("stmt_for", 35);
			LeaveRule_stmt_for();
		}
		DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:381:1: stmt_try : 'try' stmt_block 'catch' stmt_alloc stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 36);
		TraceIn("stmt_try", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal233 = default(IToken);
		IToken string_literal235 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block237 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree string_literal235_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(381, 1);
		try
		{
			// SugarCpp.g:382:2: ( 'try' stmt_block 'catch' stmt_alloc stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:382:4: 'try' stmt_block 'catch' stmt_alloc stmt_block
			{
			DebugLocation(382, 4);
			string_literal233=(IToken)Match(input,142,Follow._142_in_stmt_try2562);  
			stream_142.Add(string_literal233);

			DebugLocation(382, 10);
			PushFollow(Follow._stmt_block_in_stmt_try2564);
			stmt_block234=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block234.Tree);
			DebugLocation(382, 21);
			string_literal235=(IToken)Match(input,122,Follow._122_in_stmt_try2566);  
			stream_122.Add(string_literal235);

			DebugLocation(382, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try2568);
			stmt_alloc236=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc236.Tree);
			DebugLocation(382, 40);
			PushFollow(Follow._stmt_block_in_stmt_try2570);
			stmt_block237=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block237.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 382:51: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(382, 54);
				// SugarCpp.g:382:54: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(382, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(382, 65);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(382, 76);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(382, 87);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 36);
			LeaveRule("stmt_try", 36);
			LeaveRule_stmt_try();
		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:385:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 37);
		TraceIn("ident_list", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal239 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal239_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(385, 1);
		try
		{
			// SugarCpp.g:386:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:386:4: ident ( ',' ident )*
			{
			DebugLocation(386, 4);
			PushFollow(Follow._ident_in_ident_list2593);
			ident238=ident();
			PopFollow();

			stream_ident.Add(ident238.Tree);
			DebugLocation(386, 10);
			// SugarCpp.g:386:10: ( ',' ident )*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==86))
				{
					alt98 = 1;
				}


				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:386:11: ',' ident
					{
					DebugLocation(386, 11);
					char_literal239=(IToken)Match(input,86,Follow._86_in_ident_list2596);  
					stream_86.Add(char_literal239);

					DebugLocation(386, 15);
					PushFollow(Follow._ident_in_ident_list2598);
					ident240=ident();
					PopFollow();

					stream_ident.Add(ident240.Tree);

					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 386:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(386, 26);
				// SugarCpp.g:386:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(386, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(386, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(386, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 37);
			LeaveRule("ident_list", 37);
			LeaveRule_ident_list();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:389:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 38);
		TraceIn("stmt_alloc", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal242 = default(IToken);
		IToken char_literal244 = default(IToken);
		IToken string_literal245 = default(IToken);
		IToken char_literal247 = default(IToken);
		IToken char_literal249 = default(IToken);
		IToken string_literal250 = default(IToken);
		IToken char_literal252 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list241 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name243 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr246 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr253 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal242_tree = default(CommonTree);
		CommonTree char_literal244_tree = default(CommonTree);
		CommonTree string_literal245_tree = default(CommonTree);
		CommonTree char_literal247_tree = default(CommonTree);
		CommonTree char_literal249_tree = default(CommonTree);
		CommonTree string_literal250_tree = default(CommonTree);
		CommonTree char_literal252_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(389, 1);
		try
		{
			// SugarCpp.g:390:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:390:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			{
			DebugLocation(390, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2620);
			ident_list241=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list241.Tree);
			DebugLocation(390, 15);
			// SugarCpp.g:390:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			int alt103=2;
			try { DebugEnterSubRule(103);
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==96))
			{
				alt103 = 1;
			}
			else if ((LA103_0==98))
			{
				alt103 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:390:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(390, 17);
				char_literal242=(IToken)Match(input,96,Follow._96_in_stmt_alloc2624);  
				stream_96.Add(char_literal242);

				DebugLocation(390, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2626);
				type_name243=type_name();
				PopFollow();

				stream_type_name.Add(type_name243.Tree);
				DebugLocation(390, 31);
				// SugarCpp.g:390:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt101=3;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				switch (input.LA(1))
				{
				case 98:
				case 104:
					{
					alt101 = 1;
					}
					break;
				case 79:
					{
					alt101 = 2;
					}
					break;
				case INDENT:
				case NEWLINE:
				case 130:
				case 131:
				case 144:
				case 146:
				case 148:
					{
					alt101 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:390:33: ( '=' | ':=' ) expr
					{
					DebugLocation(390, 33);
					// SugarCpp.g:390:33: ( '=' | ':=' )
					int alt99=2;
					try { DebugEnterSubRule(99);
					try { DebugEnterDecision(99, false);
					int LA99_0 = input.LA(1);

					if ((LA99_0==104))
					{
						alt99 = 1;
					}
					else if ((LA99_0==98))
					{
						alt99 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(99); }
					switch (alt99)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:390:34: '='
						{
						DebugLocation(390, 34);
						char_literal244=(IToken)Match(input,104,Follow._104_in_stmt_alloc2631);  
						stream_104.Add(char_literal244);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:390:40: ':='
						{
						DebugLocation(390, 40);
						string_literal245=(IToken)Match(input,98,Follow._98_in_stmt_alloc2635);  
						stream_98.Add(string_literal245);


						}
						break;

					}
					} finally { DebugExitSubRule(99); }

					DebugLocation(390, 46);
					PushFollow(Follow._expr_in_stmt_alloc2638);
					expr246=expr();
					PopFollow();

					stream_expr.Add(expr246.Tree);


					{
					// AST REWRITE
					// elements: expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 390:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(390, 55);
						// SugarCpp.g:390:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(390, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(390, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(390, 95);
						// SugarCpp.g:390:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(390, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:391:33: '(' ( expr_list )? ')'
					{
					DebugLocation(391, 33);
					char_literal247=(IToken)Match(input,79,Follow._79_in_stmt_alloc2686);  
					stream_79.Add(char_literal247);

					DebugLocation(391, 37);
					// SugarCpp.g:391:37: ( expr_list )?
					int alt100=2;
					try { DebugEnterSubRule(100);
					try { DebugEnterDecision(100, false);
					int LA100_0 = input.LA(1);

					if ((LA100_0==IDENT||LA100_0==NUMBER||LA100_0==STRING||LA100_0==72||LA100_0==77||LA100_0==79||LA100_0==81||(LA100_0>=83 && LA100_0<=84)||(LA100_0>=87 && LA100_0<=88)||(LA100_0>=113 && LA100_0<=114)||LA100_0==137||LA100_0==152))
					{
						alt100 = 1;
					}
					} finally { DebugExitDecision(100); }
					switch (alt100)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:391:37: expr_list
						{
						DebugLocation(391, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc2688);
						expr_list248=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list248.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(100); }

					DebugLocation(391, 48);
					char_literal249=(IToken)Match(input,80,Follow._80_in_stmt_alloc2691);  
					stream_80.Add(char_literal249);



					{
					// AST REWRITE
					// elements: ident_list, expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 391:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(391, 56);
						// SugarCpp.g:391:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(391, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(391, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(391, 98);
						// SugarCpp.g:391:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(391, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:392:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 392:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(392, 18);
						// SugarCpp.g:392:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(392, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(392, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(101); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:394:8: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(394, 8);
				string_literal250=(IToken)Match(input,98,Follow._98_in_stmt_alloc2752);  
				stream_98.Add(string_literal250);

				DebugLocation(394, 14);
				// SugarCpp.g:394:14: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:394:15: expr ( ',' expr )*
				{
				DebugLocation(394, 15);
				PushFollow(Follow._expr_in_stmt_alloc2756);
				expr251=expr();
				PopFollow();

				stream_expr.Add(expr251.Tree);
				DebugLocation(394, 20);
				// SugarCpp.g:394:20: ( ',' expr )*
				try { DebugEnterSubRule(102);
				while (true)
				{
					int alt102=2;
					try { DebugEnterDecision(102, false);
					int LA102_0 = input.LA(1);

					if ((LA102_0==86))
					{
						alt102 = 1;
					}


					} finally { DebugExitDecision(102); }
					switch ( alt102 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:394:21: ',' expr
						{
						DebugLocation(394, 21);
						char_literal252=(IToken)Match(input,86,Follow._86_in_stmt_alloc2759);  
						stream_86.Add(char_literal252);

						DebugLocation(394, 25);
						PushFollow(Follow._expr_in_stmt_alloc2761);
						expr253=expr();
						PopFollow();

						stream_expr.Add(expr253.Tree);

						}
						break;

					default:
						goto loop102;
					}
				}

				loop102:
					;

				} finally { DebugExitSubRule(102); }


				}



				{
				// AST REWRITE
				// elements: ident_list, expr, 98
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 394:33: -> ^( ':=' ident_list ( expr )* )
				{
					DebugLocation(394, 36);
					// SugarCpp.g:394:36: ^( ':=' ident_list ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(394, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_98.NextNode(), root_1);

					DebugLocation(394, 43);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(394, 54);
					// SugarCpp.g:394:54: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(394, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(103); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 38);
			LeaveRule("stmt_alloc", 38);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(395, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:397:1: stmt_modify : lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 39);
		TraceIn("stmt_modify", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal257 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr256 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr258 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal257_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(397, 1);
		try
		{
			// SugarCpp.g:398:2: ( lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:398:4: lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(398, 4);
			PushFollow(Follow._lvalue_in_stmt_modify2787);
			lvalue254=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue254.Tree);
			DebugLocation(398, 11);
			// SugarCpp.g:398:11: ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			int alt104=3;
			try { DebugEnterSubRule(104);
			try { DebugEnterDecision(104, false);
			int LA104_0 = input.LA(1);

			if ((LA104_0==75||LA104_0==78||LA104_0==82||LA104_0==85||LA104_0==89||LA104_0==95||LA104_0==102||LA104_0==104||LA104_0==110||LA104_0==117||LA104_0==150))
			{
				alt104 = 1;
			}
			else if ((LA104_0==112))
			{
				alt104 = 2;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:398:13: modify_expr_op ^ expr
				{
				DebugLocation(398, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify2791);
				modify_expr_op255=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op255.Tree, root_0);
				DebugLocation(398, 29);
				PushFollow(Follow._expr_in_stmt_modify2794);
				expr256=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr256.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:399:13: '?=' ^ modify_expr
				{
				DebugLocation(399, 17);
				string_literal257=(IToken)Match(input,112,Follow._112_in_stmt_modify2808); 
				string_literal257_tree = (CommonTree)adaptor.Create(string_literal257);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal257_tree, root_0);
				DebugLocation(399, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify2811);
				modify_expr258=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr258.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 39);
			LeaveRule("stmt_modify", 39);
			LeaveRule_stmt_modify();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:402:1: expr : list_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 40);
		TraceIn("expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr259 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(402, 1);
		try
		{
			// SugarCpp.g:403:2: ( list_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:403:4: list_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(403, 4);
			PushFollow(Follow._list_expr_in_expr2824);
			list_expr259=list_expr();
			PopFollow();

			adaptor.AddChild(root_0, list_expr259.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 40);
			LeaveRule("expr", 40);
			LeaveRule_expr();
		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:406:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 41);
		TraceIn("list_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal260 = default(IToken);
		IToken char_literal261 = default(IToken);
		IToken NEWLINE262 = default(IToken);
		IToken INDENT263 = default(IToken);
		IToken DEDENT264 = default(IToken);
		IToken char_literal266 = default(IToken);
		IToken NEWLINE267 = default(IToken);
		IToken INDENT268 = default(IToken);
		IToken DEDENT269 = default(IToken);
		IToken char_literal271 = default(IToken);
		IToken NEWLINE272 = default(IToken);
		IToken INDENT273 = default(IToken);
		IToken DEDENT274 = default(IToken);
		IToken char_literal275 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr276 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal260_tree = default(CommonTree);
		CommonTree char_literal261_tree = default(CommonTree);
		CommonTree NEWLINE262_tree = default(CommonTree);
		CommonTree INDENT263_tree = default(CommonTree);
		CommonTree DEDENT264_tree = default(CommonTree);
		CommonTree char_literal266_tree = default(CommonTree);
		CommonTree NEWLINE267_tree = default(CommonTree);
		CommonTree INDENT268_tree = default(CommonTree);
		CommonTree DEDENT269_tree = default(CommonTree);
		CommonTree char_literal271_tree = default(CommonTree);
		CommonTree NEWLINE272_tree = default(CommonTree);
		CommonTree INDENT273_tree = default(CommonTree);
		CommonTree DEDENT274_tree = default(CommonTree);
		CommonTree char_literal275_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(406, 1);
		try
		{
			// SugarCpp.g:407:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt110=2;
			try { DebugEnterDecision(110, false);
			int LA110_0 = input.LA(1);

			if ((LA110_0==114))
			{
				alt110 = 1;
			}
			else if ((LA110_0==IDENT||LA110_0==NUMBER||LA110_0==STRING||LA110_0==72||LA110_0==77||LA110_0==79||LA110_0==81||(LA110_0>=83 && LA110_0<=84)||(LA110_0>=87 && LA110_0<=88)||LA110_0==113||LA110_0==137||LA110_0==152))
			{
				alt110 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:407:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(407, 4);
				char_literal260=(IToken)Match(input,114,Follow._114_in_list_expr2835);  
				stream_114.Add(char_literal260);

				DebugLocation(407, 8);
				// SugarCpp.g:407:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, false);
				try
				{
					alt108 = dfa108.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:407:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(407, 9);
					// SugarCpp.g:407:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(105);
					while (true)
					{
						int alt105=5;
						try { DebugEnterDecision(105, false);
						switch (input.LA(1))
						{
						case 86:
							{
							alt105 = 1;
							}
							break;
						case NEWLINE:
							{
							alt105 = 2;
							}
							break;
						case INDENT:
							{
							alt105 = 3;
							}
							break;
						case DEDENT:
							{
							alt105 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(105); }
						switch ( alt105 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:407:10: ','
							{
							DebugLocation(407, 10);
							char_literal261=(IToken)Match(input,86,Follow._86_in_list_expr2839);  
							stream_86.Add(char_literal261);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:407:16: NEWLINE
							{
							DebugLocation(407, 16);
							NEWLINE262=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr2843);  
							stream_NEWLINE.Add(NEWLINE262);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:407:26: INDENT
							{
							DebugLocation(407, 26);
							INDENT263=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr2847);  
							stream_INDENT.Add(INDENT263);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:407:35: DEDENT
							{
							DebugLocation(407, 35);
							DEDENT264=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr2851);  
							stream_DEDENT.Add(DEDENT264);


							}
							break;

						default:
							goto loop105;
						}
					}

					loop105:
						;

					} finally { DebugExitSubRule(105); }

					DebugLocation(407, 44);
					PushFollow(Follow._list_expr_in_list_expr2855);
					list_expr265=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr265.Tree);
					DebugLocation(407, 54);
					// SugarCpp.g:407:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(107);
					while (true)
					{
						int alt107=2;
						try { DebugEnterDecision(107, false);
						try
						{
							alt107 = dfa107.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(107); }
						switch ( alt107 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:407:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(407, 55);
							// SugarCpp.g:407:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt106=0;
							try { DebugEnterSubRule(106);
							while (true)
							{
								int alt106=5;
								try { DebugEnterDecision(106, false);
								switch (input.LA(1))
								{
								case 86:
									{
									alt106 = 1;
									}
									break;
								case NEWLINE:
									{
									alt106 = 2;
									}
									break;
								case INDENT:
									{
									alt106 = 3;
									}
									break;
								case DEDENT:
									{
									alt106 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(106); }
								switch (alt106)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:407:56: ','
									{
									DebugLocation(407, 56);
									char_literal266=(IToken)Match(input,86,Follow._86_in_list_expr2859);  
									stream_86.Add(char_literal266);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:407:62: NEWLINE
									{
									DebugLocation(407, 62);
									NEWLINE267=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr2863);  
									stream_NEWLINE.Add(NEWLINE267);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:407:72: INDENT
									{
									DebugLocation(407, 72);
									INDENT268=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr2867);  
									stream_INDENT.Add(INDENT268);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:407:81: DEDENT
									{
									DebugLocation(407, 81);
									DEDENT269=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr2871);  
									stream_DEDENT.Add(DEDENT269);


									}
									break;

								default:
									if (cnt106 >= 1)
										goto loop106;

									EarlyExitException eee106 = new EarlyExitException( 106, input );
									DebugRecognitionException(eee106);
									throw eee106;
								}
								cnt106++;
							}
							loop106:
								;

							} finally { DebugExitSubRule(106); }

							DebugLocation(407, 90);
							PushFollow(Follow._list_expr_in_list_expr2875);
							list_expr270=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr270.Tree);

							}
							break;

						default:
							goto loop107;
						}
					}

					loop107:
						;

					} finally { DebugExitSubRule(107); }


					}
					break;

				}
				} finally { DebugExitSubRule(108); }

				DebugLocation(407, 104);
				// SugarCpp.g:407:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(109);
				while (true)
				{
					int alt109=5;
					try { DebugEnterDecision(109, false);
					switch (input.LA(1))
					{
					case 86:
						{
						alt109 = 1;
						}
						break;
					case NEWLINE:
						{
						alt109 = 2;
						}
						break;
					case INDENT:
						{
						alt109 = 3;
						}
						break;
					case DEDENT:
						{
						alt109 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(109); }
					switch ( alt109 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:407:105: ','
						{
						DebugLocation(407, 105);
						char_literal271=(IToken)Match(input,86,Follow._86_in_list_expr2882);  
						stream_86.Add(char_literal271);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:407:111: NEWLINE
						{
						DebugLocation(407, 111);
						NEWLINE272=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr2886);  
						stream_NEWLINE.Add(NEWLINE272);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:407:121: INDENT
						{
						DebugLocation(407, 121);
						INDENT273=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr2890);  
						stream_INDENT.Add(INDENT273);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:407:130: DEDENT
						{
						DebugLocation(407, 130);
						DEDENT274=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr2894);  
						stream_DEDENT.Add(DEDENT274);


						}
						break;

					default:
						goto loop109;
					}
				}

				loop109:
					;

				} finally { DebugExitSubRule(109); }

				DebugLocation(407, 139);
				char_literal275=(IToken)Match(input,115,Follow._115_in_list_expr2898);  
				stream_115.Add(char_literal275);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 407:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(407, 146);
					// SugarCpp.g:407:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(407, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(407, 158);
					// SugarCpp.g:407:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(407, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:408:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(408, 4);
				PushFollow(Follow._lambda_expr_in_list_expr2912);
				lambda_expr276=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr276.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 41);
			LeaveRule("list_expr", 41);
			LeaveRule_list_expr();
		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:411:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 42);
		TraceIn("lambda_expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal277 = default(IToken);
		IToken char_literal279 = default(IToken);
		IToken string_literal280 = default(IToken);
		IToken string_literal282 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args278 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr284 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal277_tree = default(CommonTree);
		CommonTree char_literal279_tree = default(CommonTree);
		CommonTree string_literal280_tree = default(CommonTree);
		CommonTree string_literal282_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(411, 1);
		try
		{
			// SugarCpp.g:412:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt113=2;
			try { DebugEnterDecision(113, false);
			try
			{
				alt113 = dfa113.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:412:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(412, 4);
				char_literal277=(IToken)Match(input,79,Follow._79_in_lambda_expr2923);  
				stream_79.Add(char_literal277);

				DebugLocation(412, 8);
				// SugarCpp.g:412:8: ( func_args )?
				int alt111=2;
				try { DebugEnterSubRule(111);
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==IDENT||LA111_0==98))
				{
					alt111 = 1;
				}
				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:412:8: func_args
					{
					DebugLocation(412, 8);
					PushFollow(Follow._func_args_in_lambda_expr2925);
					func_args278=func_args();
					PopFollow();

					stream_func_args.Add(func_args278.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(111); }

				DebugLocation(412, 19);
				char_literal279=(IToken)Match(input,80,Follow._80_in_lambda_expr2928);  
				stream_80.Add(char_literal279);

				DebugLocation(412, 23);
				// SugarCpp.g:412:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==90))
				{
					alt112 = 1;
				}
				else if ((LA112_0==106))
				{
					alt112 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:412:25: '->' expr
					{
					DebugLocation(412, 25);
					string_literal280=(IToken)Match(input,90,Follow._90_in_lambda_expr2932);  
					stream_90.Add(string_literal280);

					DebugLocation(412, 30);
					PushFollow(Follow._expr_in_lambda_expr2934);
					expr281=expr();
					PopFollow();

					stream_expr.Add(expr281.Tree);


					{
					// AST REWRITE
					// elements: 90, func_args, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 412:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(412, 39);
						// SugarCpp.g:412:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(412, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(412, 53);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(412, 58);
						// SugarCpp.g:412:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(412, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(412, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:413:25: '=>' expr
					{
					DebugLocation(413, 25);
					string_literal282=(IToken)Match(input,106,Follow._106_in_lambda_expr2974);  
					stream_106.Add(string_literal282);

					DebugLocation(413, 30);
					PushFollow(Follow._expr_in_lambda_expr2976);
					expr283=expr();
					PopFollow();

					stream_expr.Add(expr283.Tree);


					{
					// AST REWRITE
					// elements: expr, func_args, 106
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 413:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(413, 39);
						// SugarCpp.g:413:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(413, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(413, 53);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(413, 58);
						// SugarCpp.g:413:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(413, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(413, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(112); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:414:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(414, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr2996);
				modify_expr284=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr284.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 42);
			LeaveRule("lambda_expr", 42);
			LeaveRule_lambda_expr();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:417:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 43);
		TraceIn("modify_expr_op", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set285 = default(IToken);

		CommonTree set285_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(417, 91);
		try
		{
			// SugarCpp.g:417:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(417, 15);

			set285=(IToken)input.LT(1);
			if (input.LA(1)==75||input.LA(1)==78||input.LA(1)==82||input.LA(1)==85||input.LA(1)==89||input.LA(1)==95||input.LA(1)==102||input.LA(1)==104||input.LA(1)==110||input.LA(1)==117||input.LA(1)==150)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set285));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 43);
			LeaveRule("modify_expr_op", 43);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(417, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:418:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 44);
		TraceIn("modify_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set287 = default(IToken);
		IToken char_literal289 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr286 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr290 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set287_tree = default(CommonTree);
		CommonTree char_literal289_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(418, 1);
		try
		{
			// SugarCpp.g:419:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:419:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(419, 4);
			PushFollow(Follow._cond_expr_in_modify_expr3053);
			cond_expr286=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr286.Tree);
			DebugLocation(419, 14);
			// SugarCpp.g:419:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt115=3;
			try { DebugEnterSubRule(115);
			try { DebugEnterDecision(115, false);
			int LA115_0 = input.LA(1);

			if ((LA115_0==75||LA115_0==78||LA115_0==82||LA115_0==85||LA115_0==89||LA115_0==95||LA115_0==98||LA115_0==102||LA115_0==110||LA115_0==117||LA115_0==150))
			{
				alt115 = 1;
			}
			else if ((LA115_0==104))
			{
				alt115 = 2;
			}
			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:419:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(419, 94);

				set287=(IToken)input.LT(1);
				set287=(IToken)input.LT(1);
				if (input.LA(1)==75||input.LA(1)==78||input.LA(1)==82||input.LA(1)==85||input.LA(1)==89||input.LA(1)==95||input.LA(1)==98||input.LA(1)==102||input.LA(1)==110||input.LA(1)==117||input.LA(1)==150)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set287), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(419, 96);
				PushFollow(Follow._cond_expr_in_modify_expr3102);
				cond_expr288=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr288.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:420:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(420, 7);
				// SugarCpp.g:420:7: ( '=' ^ cond_expr )+
				int cnt114=0;
				try { DebugEnterSubRule(114);
				while (true)
				{
					int alt114=2;
					try { DebugEnterDecision(114, false);
					int LA114_0 = input.LA(1);

					if ((LA114_0==104))
					{
						alt114 = 1;
					}


					} finally { DebugExitDecision(114); }
					switch (alt114)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:420:8: '=' ^ cond_expr
						{
						DebugLocation(420, 11);
						char_literal289=(IToken)Match(input,104,Follow._104_in_modify_expr3111); 
						char_literal289_tree = (CommonTree)adaptor.Create(char_literal289);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal289_tree, root_0);
						DebugLocation(420, 13);
						PushFollow(Follow._cond_expr_in_modify_expr3114);
						cond_expr290=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr290.Tree);

						}
						break;

					default:
						if (cnt114 >= 1)
							goto loop114;

						EarlyExitException eee114 = new EarlyExitException( 114, input );
						DebugRecognitionException(eee114);
						throw eee114;
					}
					cnt114++;
				}
				loop114:
					;

				} finally { DebugExitSubRule(114); }


				}
				break;

			}
			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 44);
			LeaveRule("modify_expr", 44);
			LeaveRule_modify_expr();
		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:423:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 45);
		TraceIn("cond_expr_item", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr291 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(423, 24);
		try
		{
			// SugarCpp.g:423:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:423:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(423, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item3127);
			or_expr291=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr291.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 45);
			LeaveRule("cond_expr_item", 45);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(423, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:424:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 46);
		TraceIn("cond_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal292 = default(IToken);
		IToken char_literal293 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal292_tree = default(CommonTree);
		CommonTree char_literal293_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(424, 1);
		try
		{
			// SugarCpp.g:425:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:425:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(425, 4);
			// SugarCpp.g:425:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:425:5: a= or_expr
			{
			DebugLocation(425, 6);
			PushFollow(Follow._or_expr_in_cond_expr3139);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 425:15: -> $a
			{
				DebugLocation(425, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(425, 22);
			// SugarCpp.g:425:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt118=2;
			try { DebugEnterSubRule(118);
			try { DebugEnterDecision(118, false);
			int LA118_0 = input.LA(1);

			if ((LA118_0==111))
			{
				alt118 = 1;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:425:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(425, 23);
				char_literal292=(IToken)Match(input,111,Follow._111_in_cond_expr3148);  
				stream_111.Add(char_literal292);

				DebugLocation(425, 27);
				// SugarCpp.g:425:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==IDENT||LA117_0==NUMBER||LA117_0==STRING||LA117_0==72||LA117_0==77||LA117_0==79||LA117_0==81||(LA117_0>=83 && LA117_0<=84)||(LA117_0>=87 && LA117_0<=88)||LA117_0==113||LA117_0==137||LA117_0==152))
				{
					alt117 = 1;
				}
				else if ((LA117_0==DEDENT||LA117_0==INDENT||LA117_0==NEWLINE||LA117_0==75||LA117_0==78||LA117_0==80||LA117_0==82||(LA117_0>=85 && LA117_0<=86)||LA117_0==89||LA117_0==95||LA117_0==98||LA117_0==102||LA117_0==104||LA117_0==110||LA117_0==115||LA117_0==117||LA117_0==121||LA117_0==126||(LA117_0>=130 && LA117_0<=131)||(LA117_0>=140 && LA117_0<=141)||LA117_0==144||LA117_0==146||LA117_0==148||LA117_0==150))
				{
					alt117 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:425:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(425, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr3154);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(425, 46);
					// SugarCpp.g:425:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt116=2;
					try { DebugEnterSubRule(116);
					try { DebugEnterDecision(116, false);
					int LA116_0 = input.LA(1);

					if ((LA116_0==96))
					{
						alt116 = 1;
					}
					else if ((LA116_0==DEDENT||LA116_0==INDENT||LA116_0==NEWLINE||LA116_0==75||LA116_0==78||LA116_0==80||LA116_0==82||(LA116_0>=85 && LA116_0<=86)||LA116_0==89||LA116_0==95||LA116_0==98||LA116_0==102||LA116_0==104||LA116_0==110||LA116_0==115||LA116_0==117||LA116_0==121||LA116_0==126||(LA116_0>=130 && LA116_0<=131)||(LA116_0>=140 && LA116_0<=141)||LA116_0==144||LA116_0==146||LA116_0==148||LA116_0==150))
					{
						alt116 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 116, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(116); }
					switch (alt116)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:425:48: ':' b= cond_expr_item
						{
						DebugLocation(425, 48);
						char_literal293=(IToken)Match(input,96,Follow._96_in_cond_expr3158);  
						stream_96.Add(char_literal293);

						DebugLocation(425, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr3162);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, cond_expr, a
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 425:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(425, 72);
							// SugarCpp.g:425:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(425, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(425, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(425, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(425, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:426:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 426:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(426, 20);
							// SugarCpp.g:426:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(426, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(426, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(426, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(116); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:428:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 428:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(428, 14);
						// SugarCpp.g:428:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(428, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(428, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(117); }


				}
				break;

			}
			} finally { DebugExitSubRule(118); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 46);
			LeaveRule("cond_expr", 46);
			LeaveRule_cond_expr();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:432:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 47);
		TraceIn("or_op", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set294 = default(IToken);

		CommonTree set294_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(432, 19);
		try
		{
			// SugarCpp.g:432:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(432, 6);

			set294=(IToken)input.LT(1);
			if (input.LA(1)==138||input.LA(1)==151)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set294));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 47);
			LeaveRule("or_op", 47);
			LeaveRule_or_op();
		}
		DebugLocation(432, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:433:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 48);
		TraceIn("or_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(433, 1);
		try
		{
			// SugarCpp.g:434:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:434:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(434, 4);
			// SugarCpp.g:434:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:434:5: a= and_expr
			{
			DebugLocation(434, 6);
			PushFollow(Follow._and_expr_in_or_expr3276);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 434:16: -> $a
			{
				DebugLocation(434, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(434, 23);
			// SugarCpp.g:434:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==138||LA119_0==151))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:24: op= or_op b= and_expr
					{
					DebugLocation(434, 26);
					PushFollow(Follow._or_op_in_or_expr3287);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(434, 34);
					PushFollow(Follow._and_expr_in_or_expr3291);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 434:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(434, 47);
						// SugarCpp.g:434:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(434, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(434, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(434, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(434, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 48);
			LeaveRule("or_expr", 48);
			LeaveRule_or_expr();
		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:437:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 49);
		TraceIn("and_op", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set295 = default(IToken);

		CommonTree set295_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(437, 21);
		try
		{
			// SugarCpp.g:437:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(437, 7);

			set295=(IToken)input.LT(1);
			if (input.LA(1)==76||input.LA(1)==119)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set295));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 49);
			LeaveRule("and_op", 49);
			LeaveRule_and_op();
		}
		DebugLocation(437, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:438:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 50);
		TraceIn("and_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(438, 1);
		try
		{
			// SugarCpp.g:439:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:439:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(439, 4);
			// SugarCpp.g:439:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:439:5: a= bit_or
			{
			DebugLocation(439, 6);
			PushFollow(Follow._bit_or_in_and_expr3333);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 439:14: -> $a
			{
				DebugLocation(439, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(439, 21);
			// SugarCpp.g:439:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(120);
			while (true)
			{
				int alt120=2;
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==76||LA120_0==119))
				{
					alt120 = 1;
				}


				} finally { DebugExitDecision(120); }
				switch ( alt120 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:439:22: op= and_op b= bit_or
					{
					DebugLocation(439, 24);
					PushFollow(Follow._and_op_in_and_expr3344);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(439, 33);
					PushFollow(Follow._bit_or_in_and_expr3348);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 439:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(439, 44);
						// SugarCpp.g:439:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(439, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(439, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(439, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(439, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop120;
				}
			}

			loop120:
				;

			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 50);
			LeaveRule("and_expr", 50);
			LeaveRule_and_expr();
		}
		DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:442:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 51);
		TraceIn("bit_or", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal296 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal296_tree = default(CommonTree);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(442, 1);
		try
		{
			// SugarCpp.g:443:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:443:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(443, 4);
			// SugarCpp.g:443:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:443:5: a= bit_xor
			{
			DebugLocation(443, 6);
			PushFollow(Follow._bit_xor_in_bit_or3379);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 443:15: -> $a
			{
				DebugLocation(443, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(443, 22);
			// SugarCpp.g:443:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				int LA121_0 = input.LA(1);

				if ((LA121_0==149))
				{
					alt121 = 1;
				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:443:23: '|' b= bit_xor
					{
					DebugLocation(443, 23);
					char_literal296=(IToken)Match(input,149,Follow._149_in_bit_or3388);  
					stream_149.Add(char_literal296);

					DebugLocation(443, 28);
					PushFollow(Follow._bit_xor_in_bit_or3392);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 149, bit_or, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 443:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(443, 40);
						// SugarCpp.g:443:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(443, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(443, 51);
						adaptor.AddChild(root_1, stream_149.NextNode());
						DebugLocation(443, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(443, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 51);
			LeaveRule("bit_or", 51);
			LeaveRule_bit_or();
		}
		DebugLocation(444, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:446:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 52);
		TraceIn("bit_xor", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal297 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal297_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(446, 1);
		try
		{
			// SugarCpp.g:447:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:447:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(447, 4);
			// SugarCpp.g:447:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:447:5: a= bit_and
			{
			DebugLocation(447, 6);
			PushFollow(Follow._bit_and_in_bit_xor3422);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 447:15: -> $a
			{
				DebugLocation(447, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(447, 22);
			// SugarCpp.g:447:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(122);
			while (true)
			{
				int alt122=2;
				try { DebugEnterDecision(122, false);
				int LA122_0 = input.LA(1);

				if ((LA122_0==116))
				{
					alt122 = 1;
				}


				} finally { DebugExitDecision(122); }
				switch ( alt122 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:447:23: '^' b= bit_and
					{
					DebugLocation(447, 23);
					char_literal297=(IToken)Match(input,116,Follow._116_in_bit_xor3431);  
					stream_116.Add(char_literal297);

					DebugLocation(447, 28);
					PushFollow(Follow._bit_and_in_bit_xor3435);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, b, 116
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 447:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(447, 40);
						// SugarCpp.g:447:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(447, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(447, 51);
						adaptor.AddChild(root_1, stream_116.NextNode());
						DebugLocation(447, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(447, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop122;
				}
			}

			loop122:
				;

			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 52);
			LeaveRule("bit_xor", 52);
			LeaveRule_bit_xor();
		}
		DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:450:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 53);
		TraceIn("bit_and", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal298 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal298_tree = default(CommonTree);
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(450, 1);
		try
		{
			// SugarCpp.g:451:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:451:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(451, 4);
			// SugarCpp.g:451:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:451:5: a= cmp_expr
			{
			DebugLocation(451, 6);
			PushFollow(Follow._cmp_expr_in_bit_and3465);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 451:16: -> $a
			{
				DebugLocation(451, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(451, 23);
			// SugarCpp.g:451:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==77))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:451:24: '&' b= cmp_expr
					{
					DebugLocation(451, 24);
					char_literal298=(IToken)Match(input,77,Follow._77_in_bit_and3474);  
					stream_77.Add(char_literal298);

					DebugLocation(451, 29);
					PushFollow(Follow._cmp_expr_in_bit_and3478);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 77, bit_and
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 451:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(451, 42);
						// SugarCpp.g:451:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(451, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(451, 53);
						adaptor.AddChild(root_1, stream_77.NextNode());
						DebugLocation(451, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(451, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 53);
			LeaveRule("bit_and", 53);
			LeaveRule_bit_and();
		}
		DebugLocation(452, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:454:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 54);
		TraceIn("chain_op", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set299 = default(IToken);

		CommonTree set299_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(454, 64);
		try
		{
			// SugarCpp.g:454:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(454, 9);

			set299=(IToken)input.LT(1);
			if (input.LA(1)==73||input.LA(1)==99||input.LA(1)==103||input.LA(1)==105||(input.LA(1)>=107 && input.LA(1)<=108)||(input.LA(1)>=133 && input.LA(1)<=134))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set299));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 54);
			LeaveRule("chain_op", 54);
			LeaveRule_chain_op();
		}
		DebugLocation(454, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:455:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 55);
		TraceIn("no_less_op", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set300 = default(IToken);

		CommonTree set300_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(455, 60);
		try
		{
			// SugarCpp.g:455:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(455, 11);

			set300=(IToken)input.LT(1);
			if (input.LA(1)==73||input.LA(1)==103||input.LA(1)==105||(input.LA(1)>=107 && input.LA(1)<=108)||(input.LA(1)>=133 && input.LA(1)<=134))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set300));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 55);
			LeaveRule("no_less_op", 55);
			LeaveRule_no_less_op();
		}
		DebugLocation(455, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:456:1: chain_list : ( chain_op infix_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 56);
		TraceIn("chain_list", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_expr302 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(456, 35);
		try
		{
			// SugarCpp.g:456:11: ( ( chain_op infix_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:456:13: ( chain_op infix_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(456, 13);
			// SugarCpp.g:456:13: ( chain_op infix_expr )+
			int cnt124=0;
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==73||LA124_0==99||LA124_0==103||LA124_0==105||(LA124_0>=107 && LA124_0<=108)||(LA124_0>=133 && LA124_0<=134)))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:456:14: chain_op infix_expr
					{
					DebugLocation(456, 14);
					PushFollow(Follow._chain_op_in_chain_list3570);
					chain_op301=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op301.Tree);
					DebugLocation(456, 23);
					PushFollow(Follow._infix_expr_in_chain_list3572);
					infix_expr302=infix_expr();
					PopFollow();

					adaptor.AddChild(root_0, infix_expr302.Tree);

					}
					break;

				default:
					if (cnt124 >= 1)
						goto loop124;

					EarlyExitException eee124 = new EarlyExitException( 124, input );
					DebugRecognitionException(eee124);
					throw eee124;
				}
				cnt124++;
			}
			loop124:
				;

			} finally { DebugExitSubRule(124); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 56);
			LeaveRule("chain_list", 56);
			LeaveRule_chain_list();
		}
		DebugLocation(456, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:457:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 57);
		TraceIn("cmp_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal303 = default(IToken);
		IToken char_literal305 = default(IToken);
		IToken char_literal306 = default(IToken);
		IToken char_literal308 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident304 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list310 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal303_tree = default(CommonTree);
		CommonTree char_literal305_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		CommonTree char_literal308_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(457, 1);
		try
		{
			// SugarCpp.g:458:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:458:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(458, 4);
			// SugarCpp.g:458:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:458:5: a= infix_expr
			{
			DebugLocation(458, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr3586);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 458:18: -> $a
			{
				DebugLocation(458, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(458, 25);
			// SugarCpp.g:458:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt129=3;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==99))
			{
				alt129 = 1;
			}
			else if ((LA129_0==73||LA129_0==103||LA129_0==105||(LA129_0>=107 && LA129_0<=108)||(LA129_0>=133 && LA129_0<=134)))
			{
				alt129 = 2;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:458:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(458, 27);
				char_literal303=(IToken)Match(input,99,Follow._99_in_cmp_expr3596);  
				stream_99.Add(char_literal303);

				DebugLocation(458, 32);
				PushFollow(Follow._infix_expr_in_cmp_expr3600);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(458, 44);
				// SugarCpp.g:458:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt127=3;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt127 = 1;
					}
					break;
				case 107:
					{
					int LA127_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt127 = 1;
					}
					else if ((true))
					{
						alt127 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 127, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 73:
				case 99:
				case 103:
				case 105:
				case 108:
				case 133:
				case 134:
					{
					alt127 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 75:
				case 76:
				case 77:
				case 78:
				case 80:
				case 82:
				case 85:
				case 86:
				case 89:
				case 95:
				case 96:
				case 98:
				case 102:
				case 104:
				case 110:
				case 111:
				case 115:
				case 116:
				case 117:
				case 119:
				case 121:
				case 126:
				case 130:
				case 131:
				case 138:
				case 140:
				case 141:
				case 144:
				case 146:
				case 148:
				case 149:
				case 150:
				case 151:
					{
					alt127 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 127, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:458:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(458, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(458, 76);
					// SugarCpp.g:458:76: ( ident )*
					try { DebugEnterSubRule(125);
					while (true)
					{
						int alt125=2;
						try { DebugEnterDecision(125, false);
						int LA125_0 = input.LA(1);

						if ((LA125_0==IDENT))
						{
							alt125 = 1;
						}


						} finally { DebugExitDecision(125); }
						switch ( alt125 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:458:76: ident
							{
							DebugLocation(458, 76);
							PushFollow(Follow._ident_in_cmp_expr3606);
							ident304=ident();
							PopFollow();

							stream_ident.Add(ident304.Tree);

							}
							break;

						default:
							goto loop125;
						}
					}

					loop125:
						;

					} finally { DebugExitSubRule(125); }

					DebugLocation(458, 83);
					char_literal305=(IToken)Match(input,107,Follow._107_in_cmp_expr3609);  
					stream_107.Add(char_literal305);

					DebugLocation(458, 87);
					char_literal306=(IToken)Match(input,79,Follow._79_in_cmp_expr3611);  
					stream_79.Add(char_literal306);

					DebugLocation(458, 91);
					// SugarCpp.g:458:91: ( expr_list )?
					int alt126=2;
					try { DebugEnterSubRule(126);
					try { DebugEnterDecision(126, false);
					int LA126_0 = input.LA(1);

					if ((LA126_0==IDENT||LA126_0==NUMBER||LA126_0==STRING||LA126_0==72||LA126_0==77||LA126_0==79||LA126_0==81||(LA126_0>=83 && LA126_0<=84)||(LA126_0>=87 && LA126_0<=88)||(LA126_0>=113 && LA126_0<=114)||LA126_0==137||LA126_0==152))
					{
						alt126 = 1;
					}
					} finally { DebugExitDecision(126); }
					switch (alt126)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:458:91: expr_list
						{
						DebugLocation(458, 91);
						PushFollow(Follow._expr_list_in_cmp_expr3613);
						expr_list307=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list307.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(126); }

					DebugLocation(458, 102);
					char_literal308=(IToken)Match(input,80,Follow._80_in_cmp_expr3616);  
					stream_80.Add(char_literal308);



					{
					// AST REWRITE
					// elements: expr_list, cmp_expr, b, ident
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 458:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(458, 109);
						// SugarCpp.g:458:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(458, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(458, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(458, 131);
						// SugarCpp.g:458:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(458, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(458, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(458, 155);
						// SugarCpp.g:458:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(458, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(458, 163);
						// SugarCpp.g:458:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(458, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:459:46: chain_list
					{
					DebugLocation(459, 46);
					PushFollow(Follow._chain_list_in_cmp_expr3685);
					chain_list309=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list309.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr, chain_list, 99
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 459:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(459, 60);
						// SugarCpp.g:459:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(459, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(459, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(459, 84);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(459, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(459, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:460:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, 99, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 460:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(460, 19);
						// SugarCpp.g:460:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(460, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(460, 30);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(460, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(460, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(127); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:461:27: op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(461, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr3762);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(461, 42);
				PushFollow(Follow._infix_expr_in_cmp_expr3766);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(461, 54);
				// SugarCpp.g:461:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==73||LA128_0==99||LA128_0==103||LA128_0==105||(LA128_0>=107 && LA128_0<=108)||(LA128_0>=133 && LA128_0<=134)))
				{
					alt128 = 1;
				}
				else if ((LA128_0==DEDENT||LA128_0==INDENT||LA128_0==NEWLINE||(LA128_0>=75 && LA128_0<=78)||LA128_0==80||LA128_0==82||(LA128_0>=85 && LA128_0<=86)||LA128_0==89||(LA128_0>=95 && LA128_0<=96)||LA128_0==98||LA128_0==102||LA128_0==104||(LA128_0>=110 && LA128_0<=111)||(LA128_0>=115 && LA128_0<=117)||LA128_0==119||LA128_0==121||LA128_0==126||(LA128_0>=130 && LA128_0<=131)||LA128_0==138||(LA128_0>=140 && LA128_0<=141)||LA128_0==144||LA128_0==146||(LA128_0>=148 && LA128_0<=151)))
				{
					alt128 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:461:56: chain_list
					{
					DebugLocation(461, 56);
					PushFollow(Follow._chain_list_in_cmp_expr3770);
					chain_list310=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list310.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, b, op, chain_list
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 461:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(461, 70);
						// SugarCpp.g:461:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(461, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(461, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(461, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(461, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(461, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:462:17: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 462:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(462, 20);
						// SugarCpp.g:462:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(462, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(462, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(462, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(462, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(128); }


				}
				break;

			}
			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 57);
			LeaveRule("cmp_expr", 57);
			LeaveRule_cmp_expr();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:467:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 58);
		TraceIn("infix_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func311 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(467, 1);
		try
		{
			// SugarCpp.g:468:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:468:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(468, 4);
			// SugarCpp.g:468:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:468:5: a= shift_expr
			{
			DebugLocation(468, 6);
			PushFollow(Follow._shift_expr_in_infix_expr3861);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 468:18: -> $a
			{
				DebugLocation(468, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(468, 25);
			// SugarCpp.g:468:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==118))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:468:27: infix_func b= shift_expr
					{
					DebugLocation(468, 27);
					PushFollow(Follow._infix_func_in_infix_expr3871);
					infix_func311=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func311.Tree);
					DebugLocation(468, 39);
					PushFollow(Follow._shift_expr_in_infix_expr3875);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_expr, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 468:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(468, 55);
						// SugarCpp.g:468:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(468, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(468, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(468, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(468, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 58);
			LeaveRule("infix_expr", 58);
			LeaveRule_infix_expr();
		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:471:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 59);
		TraceIn("shift_expr_op", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set312 = default(IToken);

		CommonTree set312_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(471, 27);
		try
		{
			// SugarCpp.g:471:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(471, 14);

			set312=(IToken)input.LT(1);
			if (input.LA(1)==101||input.LA(1)==109)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set312));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 59);
			LeaveRule("shift_expr_op", 59);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(471, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:472:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 60);
		TraceIn("shift_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op313 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(472, 1);
		try
		{
			// SugarCpp.g:473:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:473:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(473, 4);
			// SugarCpp.g:473:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:473:5: a= add_expr
			{
			DebugLocation(473, 6);
			PushFollow(Follow._add_expr_in_shift_expr3918);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 473:16: -> $a
			{
				DebugLocation(473, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(473, 23);
			// SugarCpp.g:473:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==101||LA131_0==109))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch ( alt131 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:473:24: shift_expr_op b= add_expr
					{
					DebugLocation(473, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr3927);
					shift_expr_op313=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op313.Tree);
					DebugLocation(473, 39);
					PushFollow(Follow._add_expr_in_shift_expr3931);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr_op, b, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 473:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(473, 52);
						// SugarCpp.g:473:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(473, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(473, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(473, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(473, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop131;
				}
			}

			loop131:
				;

			} finally { DebugExitSubRule(131); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 60);
			LeaveRule("shift_expr", 60);
			LeaveRule_shift_expr();
		}
		DebugLocation(474, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:476:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 61);
		TraceIn("add_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal314 = default(IToken);
		IToken char_literal315 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal314_tree = default(CommonTree);
		CommonTree char_literal315_tree = default(CommonTree);
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(476, 1);
		try
		{
			// SugarCpp.g:477:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:477:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(477, 4);
			// SugarCpp.g:477:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:477:5: a= mul_expr
			{
			DebugLocation(477, 6);
			PushFollow(Follow._mul_expr_in_add_expr3961);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 477:16: -> $a
			{
				DebugLocation(477, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(477, 23);
			// SugarCpp.g:477:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=3;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==83))
				{
					alt132 = 1;
				}
				else if ((LA132_0==87))
				{
					alt132 = 2;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:477:25: '+' b= mul_expr
					{
					DebugLocation(477, 25);
					char_literal314=(IToken)Match(input,83,Follow._83_in_add_expr3971);  
					stream_83.Add(char_literal314);

					DebugLocation(477, 30);
					PushFollow(Follow._mul_expr_in_add_expr3975);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 83, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 477:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(477, 43);
						// SugarCpp.g:477:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(477, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(477, 54);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(477, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(477, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:478:10: '-' b= mul_expr
					{
					DebugLocation(478, 10);
					char_literal315=(IToken)Match(input,87,Follow._87_in_add_expr4000);  
					stream_87.Add(char_literal315);

					DebugLocation(478, 15);
					PushFollow(Follow._mul_expr_in_add_expr4004);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, 87, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 478:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(478, 28);
						// SugarCpp.g:478:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(478, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(478, 39);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(478, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(478, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 61);
			LeaveRule("add_expr", 61);
			LeaveRule_add_expr();
		}
		DebugLocation(480, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:482:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 62);
		TraceIn("mul_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal316 = default(IToken);
		IToken char_literal317 = default(IToken);
		IToken char_literal318 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal316_tree = default(CommonTree);
		CommonTree char_literal317_tree = default(CommonTree);
		CommonTree char_literal318_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(482, 1);
		try
		{
			// SugarCpp.g:483:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:483:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(483, 4);
			// SugarCpp.g:483:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:483:5: a= selector_expr
			{
			DebugLocation(483, 6);
			PushFollow(Follow._selector_expr_in_mul_expr4042);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 483:21: -> $a
			{
				DebugLocation(483, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(483, 28);
			// SugarCpp.g:483:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=4;
				try { DebugEnterDecision(133, false);
				switch (input.LA(1))
				{
				case 81:
					{
					alt133 = 1;
					}
					break;
				case 94:
					{
					alt133 = 2;
					}
					break;
				case 74:
					{
					alt133 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(133); }
				switch ( alt133 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:483:30: '*' b= selector_expr
					{
					DebugLocation(483, 30);
					char_literal316=(IToken)Match(input,81,Follow._81_in_mul_expr4052);  
					stream_81.Add(char_literal316);

					DebugLocation(483, 35);
					PushFollow(Follow._selector_expr_in_mul_expr4056);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 81
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 483:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(483, 53);
						// SugarCpp.g:483:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(483, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(483, 64);
						adaptor.AddChild(root_1, stream_81.NextNode());
						DebugLocation(483, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(483, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:484:15: '/' b= selector_expr
					{
					DebugLocation(484, 15);
					char_literal317=(IToken)Match(input,94,Follow._94_in_mul_expr4086);  
					stream_94.Add(char_literal317);

					DebugLocation(484, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4090);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 94
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 484:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(484, 38);
						// SugarCpp.g:484:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(484, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(484, 49);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(484, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(484, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:485:15: '%' b= selector_expr
					{
					DebugLocation(485, 15);
					char_literal318=(IToken)Match(input,74,Follow._74_in_mul_expr4120);  
					stream_74.Add(char_literal318);

					DebugLocation(485, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4124);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 74, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 485:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(485, 38);
						// SugarCpp.g:485:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(485, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(485, 49);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(485, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(485, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop133;
				}
			}

			loop133:
				;

			} finally { DebugExitSubRule(133); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 62);
			LeaveRule("mul_expr", 62);
			LeaveRule_mul_expr();
		}
		DebugLocation(487, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:489:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 63);
		TraceIn("selector_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal319 = default(IToken);
		IToken string_literal320 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal319_tree = default(CommonTree);
		CommonTree string_literal320_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(489, 1);
		try
		{
			// SugarCpp.g:490:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:490:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(490, 4);
			// SugarCpp.g:490:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:490:5: a= cast_expr
			{
			DebugLocation(490, 6);
			PushFollow(Follow._cast_expr_in_selector_expr4167);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 490:17: -> $a
			{
				DebugLocation(490, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(490, 24);
			// SugarCpp.g:490:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=3;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==91))
				{
					alt134 = 1;
				}
				else if ((LA134_0==93))
				{
					alt134 = 2;
				}


				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:490:26: '->*' b= ident
					{
					DebugLocation(490, 26);
					string_literal319=(IToken)Match(input,91,Follow._91_in_selector_expr4177);  
					stream_91.Add(string_literal319);

					DebugLocation(490, 33);
					PushFollow(Follow._ident_in_selector_expr4181);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 91, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 490:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(490, 43);
						// SugarCpp.g:490:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(490, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(490, 57);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(490, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(490, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:491:11: '.*' b= ident
					{
					DebugLocation(491, 11);
					string_literal320=(IToken)Match(input,93,Follow._93_in_selector_expr4207);  
					stream_93.Add(string_literal320);

					DebugLocation(491, 18);
					PushFollow(Follow._ident_in_selector_expr4212);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 93, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 491:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(491, 28);
						// SugarCpp.g:491:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(491, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(491, 42);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(491, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(491, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 63);
			LeaveRule("selector_expr", 63);
			LeaveRule_selector_expr();
		}
		DebugLocation(493, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:495:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 64);
		TraceIn("cast_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal321 = default(IToken);
		IToken char_literal322 = default(IToken);
		IToken char_literal324 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name323 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal321_tree = default(CommonTree);
		CommonTree char_literal322_tree = default(CommonTree);
		CommonTree char_literal324_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(495, 1);
		try
		{
			// SugarCpp.g:496:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:496:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(496, 4);
			// SugarCpp.g:496:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:496:5: a= prefix_expr
			{
			DebugLocation(496, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr4252);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 496:19: -> $a
			{
				DebugLocation(496, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(496, 26);
			// SugarCpp.g:496:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt135=2;
			try { DebugEnterSubRule(135);
			try { DebugEnterDecision(135, false);
			int LA135_0 = input.LA(1);

			if ((LA135_0==120))
			{
				alt135 = 1;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:496:27: 'as' '(' type_name ')'
				{
				DebugLocation(496, 27);
				string_literal321=(IToken)Match(input,120,Follow._120_in_cast_expr4261);  
				stream_120.Add(string_literal321);

				DebugLocation(496, 32);
				char_literal322=(IToken)Match(input,79,Follow._79_in_cast_expr4263);  
				stream_79.Add(char_literal322);

				DebugLocation(496, 36);
				PushFollow(Follow._type_name_in_cast_expr4265);
				type_name323=type_name();
				PopFollow();

				stream_type_name.Add(type_name323.Tree);
				DebugLocation(496, 46);
				char_literal324=(IToken)Match(input,80,Follow._80_in_cast_expr4267);  
				stream_80.Add(char_literal324);



				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 496:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(496, 53);
					// SugarCpp.g:496:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(496, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(496, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(496, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(135); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 64);
			LeaveRule("cast_expr", 64);
			LeaveRule_cast_expr();
		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:499:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 65);
		TraceIn("prefix_expr_op", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set325 = default(IToken);

		CommonTree set325_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(499, 63);
		try
		{
			// SugarCpp.g:499:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(499, 15);

			set325=(IToken)input.LT(1);
			if (input.LA(1)==72||input.LA(1)==77||input.LA(1)==81||(input.LA(1)>=83 && input.LA(1)<=84)||(input.LA(1)>=87 && input.LA(1)<=88)||input.LA(1)==152)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set325));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 65);
			LeaveRule("prefix_expr_op", 65);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(499, 63);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:500:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 66);
		TraceIn("prefix_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal328 = default(IToken);
		IToken char_literal330 = default(IToken);
		IToken char_literal332 = default(IToken);
		IToken char_literal333 = default(IToken);
		IToken char_literal335 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op326 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name329 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list331 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list334 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr336 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal328_tree = default(CommonTree);
		CommonTree char_literal330_tree = default(CommonTree);
		CommonTree char_literal332_tree = default(CommonTree);
		CommonTree char_literal333_tree = default(CommonTree);
		CommonTree char_literal335_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(500, 1);
		try
		{
			// SugarCpp.g:501:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt138=3;
			try { DebugEnterDecision(138, false);
			switch (input.LA(1))
			{
			case 72:
			case 77:
			case 81:
			case 83:
			case 84:
			case 87:
			case 88:
			case 152:
				{
				alt138 = 1;
				}
				break;
			case 137:
				{
				alt138 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 79:
			case 113:
				{
				alt138 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 138, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:501:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(501, 4);
				// SugarCpp.g:501:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:501:5: prefix_expr_op prefix_expr
				{
				DebugLocation(501, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr4325);
				prefix_expr_op326=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op326.Tree);
				DebugLocation(501, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr4327);
				prefix_expr327=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr327.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 501:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(501, 36);
					// SugarCpp.g:501:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(501, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(501, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(501, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:502:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(502, 4);
				string_literal328=(IToken)Match(input,137,Follow._137_in_prefix_expr4343);  
				stream_137.Add(string_literal328);

				DebugLocation(502, 10);
				PushFollow(Follow._type_name_in_prefix_expr4345);
				type_name329=type_name();
				PopFollow();

				stream_type_name.Add(type_name329.Tree);
				DebugLocation(502, 20);
				// SugarCpp.g:502:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt137=2;
				try { DebugEnterSubRule(137);
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==79))
				{
					alt137 = 1;
				}
				else if ((LA137_0==114))
				{
					alt137 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:502:22: '(' ( expr_list )? ')'
					{
					DebugLocation(502, 22);
					char_literal330=(IToken)Match(input,79,Follow._79_in_prefix_expr4349);  
					stream_79.Add(char_literal330);

					DebugLocation(502, 26);
					// SugarCpp.g:502:26: ( expr_list )?
					int alt136=2;
					try { DebugEnterSubRule(136);
					try { DebugEnterDecision(136, false);
					int LA136_0 = input.LA(1);

					if ((LA136_0==IDENT||LA136_0==NUMBER||LA136_0==STRING||LA136_0==72||LA136_0==77||LA136_0==79||LA136_0==81||(LA136_0>=83 && LA136_0<=84)||(LA136_0>=87 && LA136_0<=88)||(LA136_0>=113 && LA136_0<=114)||LA136_0==137||LA136_0==152))
					{
						alt136 = 1;
					}
					} finally { DebugExitDecision(136); }
					switch (alt136)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:502:26: expr_list
						{
						DebugLocation(502, 26);
						PushFollow(Follow._expr_list_in_prefix_expr4351);
						expr_list331=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list331.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(136); }

					DebugLocation(502, 37);
					char_literal332=(IToken)Match(input,80,Follow._80_in_prefix_expr4354);  
					stream_80.Add(char_literal332);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 502:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(502, 44);
						// SugarCpp.g:502:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(502, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(502, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(502, 70);
						// SugarCpp.g:502:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(502, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:503:10: '[' expr_list ']'
					{
					DebugLocation(503, 10);
					char_literal333=(IToken)Match(input,114,Follow._114_in_prefix_expr4376);  
					stream_114.Add(char_literal333);

					DebugLocation(503, 14);
					PushFollow(Follow._expr_list_in_prefix_expr4378);
					expr_list334=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list334.Tree);
					DebugLocation(503, 24);
					char_literal335=(IToken)Match(input,115,Follow._115_in_prefix_expr4380);  
					stream_115.Add(char_literal335);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 503:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(503, 31);
						// SugarCpp.g:503:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(503, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(503, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(503, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(137); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:504:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(504, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr4396);
				suffix_expr336=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr336.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 66);
			LeaveRule("prefix_expr", 66);
			LeaveRule_prefix_expr();
		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:507:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 67);
		TraceIn("expr_list", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal338 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr337 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr339 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal338_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(507, 1);
		try
		{
			// SugarCpp.g:508:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:508:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(508, 4);
			PushFollow(Follow._expr_in_expr_list4408);
			expr337=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr337.Tree);
			DebugLocation(508, 9);
			// SugarCpp.g:508:9: ( ',' ! expr )*
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==86))
				{
					alt139 = 1;
				}


				} finally { DebugExitDecision(139); }
				switch ( alt139 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:508:10: ',' ! expr
					{
					DebugLocation(508, 13);
					char_literal338=(IToken)Match(input,86,Follow._86_in_expr_list4411); 
					DebugLocation(508, 15);
					PushFollow(Follow._expr_in_expr_list4414);
					expr339=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr339.Tree);

					}
					break;

				default:
					goto loop139;
				}
			}

			loop139:
				;

			} finally { DebugExitSubRule(139); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 67);
			LeaveRule("expr_list", 67);
			LeaveRule_expr_list();
		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:511:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 68);
		TraceIn("suffix_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal340 = default(IToken);
		IToken string_literal341 = default(IToken);
		IToken char_literal342 = default(IToken);
		IToken string_literal344 = default(IToken);
		IToken char_literal346 = default(IToken);
		IToken char_literal348 = default(IToken);
		IToken char_literal349 = default(IToken);
		IToken char_literal351 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident343 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident345 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list350 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal340_tree = default(CommonTree);
		CommonTree string_literal341_tree = default(CommonTree);
		CommonTree char_literal342_tree = default(CommonTree);
		CommonTree string_literal344_tree = default(CommonTree);
		CommonTree char_literal346_tree = default(CommonTree);
		CommonTree char_literal348_tree = default(CommonTree);
		CommonTree char_literal349_tree = default(CommonTree);
		CommonTree char_literal351_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(511, 1);
		try
		{
			// SugarCpp.g:512:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:512:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			{
			DebugLocation(512, 4);
			// SugarCpp.g:512:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:512:5: a= atom_expr
			{
			DebugLocation(512, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr4430);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 512:17: -> $a
			{
				DebugLocation(512, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(512, 24);
			// SugarCpp.g:512:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=7;
				try { DebugEnterDecision(142, false);
				switch (input.LA(1))
				{
				case 84:
					{
					alt142 = 1;
					}
					break;
				case 88:
					{
					alt142 = 2;
					}
					break;
				case 92:
					{
					alt142 = 3;
					}
					break;
				case 90:
					{
					alt142 = 4;
					}
					break;
				case 79:
					{
					alt142 = 5;
					}
					break;
				case 114:
					{
					alt142 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(142); }
				switch ( alt142 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:512:26: '++'
					{
					DebugLocation(512, 26);
					string_literal340=(IToken)Match(input,84,Follow._84_in_suffix_expr4440);  
					stream_84.Add(string_literal340);



					{
					// AST REWRITE
					// elements: 84, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 512:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(512, 34);
						// SugarCpp.g:512:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(512, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(512, 48);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(512, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:513:14: '--'
					{
					DebugLocation(513, 14);
					string_literal341=(IToken)Match(input,88,Follow._88_in_suffix_expr4466);  
					stream_88.Add(string_literal341);



					{
					// AST REWRITE
					// elements: 88, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 513:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(513, 22);
						// SugarCpp.g:513:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(513, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(513, 36);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(513, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:514:11: '.' ident
					{
					DebugLocation(514, 11);
					char_literal342=(IToken)Match(input,92,Follow._92_in_suffix_expr4489);  
					stream_92.Add(char_literal342);

					DebugLocation(514, 15);
					PushFollow(Follow._ident_in_suffix_expr4491);
					ident343=ident();
					PopFollow();

					stream_ident.Add(ident343.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, 92, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 514:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(514, 24);
						// SugarCpp.g:514:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(514, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(514, 38);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(514, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(514, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:515:11: '->' ident
					{
					DebugLocation(515, 11);
					string_literal344=(IToken)Match(input,90,Follow._90_in_suffix_expr4516);  
					stream_90.Add(string_literal344);

					DebugLocation(515, 16);
					PushFollow(Follow._ident_in_suffix_expr4518);
					ident345=ident();
					PopFollow();

					stream_ident.Add(ident345.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 90
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 515:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(515, 25);
						// SugarCpp.g:515:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(515, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(515, 39);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(515, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(515, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:516:11: '(' ( expr_list )? ')'
					{
					DebugLocation(516, 11);
					char_literal346=(IToken)Match(input,79,Follow._79_in_suffix_expr4543);  
					stream_79.Add(char_literal346);

					DebugLocation(516, 15);
					// SugarCpp.g:516:15: ( expr_list )?
					int alt140=2;
					try { DebugEnterSubRule(140);
					try { DebugEnterDecision(140, false);
					int LA140_0 = input.LA(1);

					if ((LA140_0==IDENT||LA140_0==NUMBER||LA140_0==STRING||LA140_0==72||LA140_0==77||LA140_0==79||LA140_0==81||(LA140_0>=83 && LA140_0<=84)||(LA140_0>=87 && LA140_0<=88)||(LA140_0>=113 && LA140_0<=114)||LA140_0==137||LA140_0==152))
					{
						alt140 = 1;
					}
					} finally { DebugExitDecision(140); }
					switch (alt140)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:516:15: expr_list
						{
						DebugLocation(516, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4545);
						expr_list347=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list347.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(140); }

					DebugLocation(516, 26);
					char_literal348=(IToken)Match(input,80,Follow._80_in_suffix_expr4548);  
					stream_80.Add(char_literal348);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 516:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(516, 33);
						// SugarCpp.g:516:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(516, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(516, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(516, 58);
						// SugarCpp.g:516:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(516, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:517:11: '[' ( expr_list )? ']'
					{
					DebugLocation(517, 11);
					char_literal349=(IToken)Match(input,114,Follow._114_in_suffix_expr4572);  
					stream_114.Add(char_literal349);

					DebugLocation(517, 15);
					// SugarCpp.g:517:15: ( expr_list )?
					int alt141=2;
					try { DebugEnterSubRule(141);
					try { DebugEnterDecision(141, false);
					int LA141_0 = input.LA(1);

					if ((LA141_0==IDENT||LA141_0==NUMBER||LA141_0==STRING||LA141_0==72||LA141_0==77||LA141_0==79||LA141_0==81||(LA141_0>=83 && LA141_0<=84)||(LA141_0>=87 && LA141_0<=88)||(LA141_0>=113 && LA141_0<=114)||LA141_0==137||LA141_0==152))
					{
						alt141 = 1;
					}
					} finally { DebugExitDecision(141); }
					switch (alt141)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:15: expr_list
						{
						DebugLocation(517, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4574);
						expr_list350=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list350.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(141); }

					DebugLocation(517, 26);
					char_literal351=(IToken)Match(input,115,Follow._115_in_suffix_expr4577);  
					stream_115.Add(char_literal351);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 517:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(517, 33);
						// SugarCpp.g:517:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(517, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(517, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(517, 58);
						// SugarCpp.g:517:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(517, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop142;
				}
			}

			loop142:
				;

			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 68);
			LeaveRule("suffix_expr", 68);
			LeaveRule_suffix_expr();
		}
		DebugLocation(520, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:522:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 69);
		TraceIn("atom_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER352 = default(IToken);
		IToken STRING354 = default(IToken);
		IToken char_literal355 = default(IToken);
		IToken char_literal357 = default(IToken);
		IToken char_literal359 = default(IToken);
		IToken char_literal361 = default(IToken);
		IToken char_literal362 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident353 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident356 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr360 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER352_tree = default(CommonTree);
		CommonTree STRING354_tree = default(CommonTree);
		CommonTree char_literal355_tree = default(CommonTree);
		CommonTree char_literal357_tree = default(CommonTree);
		CommonTree char_literal359_tree = default(CommonTree);
		CommonTree char_literal361_tree = default(CommonTree);
		CommonTree char_literal362_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(522, 1);
		try
		{
			// SugarCpp.g:523:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt145=5;
			try { DebugEnterDecision(145, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt145 = 1;
				}
				break;
			case IDENT:
				{
				alt145 = 2;
				}
				break;
			case STRING:
				{
				alt145 = 3;
				}
				break;
			case 113:
				{
				alt145 = 4;
				}
				break;
			case 79:
				{
				alt145 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 145, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:523:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(523, 4);
				NUMBER352=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr4623); 
				NUMBER352_tree = (CommonTree)adaptor.Create(NUMBER352);
				adaptor.AddChild(root_0, NUMBER352_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:524:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(524, 4);
				PushFollow(Follow._ident_in_atom_expr4628);
				ident353=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident353.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:525:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(525, 4);
				STRING354=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr4633); 
				STRING354_tree = (CommonTree)adaptor.Create(STRING354);
				adaptor.AddChild(root_0, STRING354_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:526:4: '@' ident
				{
				DebugLocation(526, 4);
				char_literal355=(IToken)Match(input,113,Follow._113_in_atom_expr4638);  
				stream_113.Add(char_literal355);

				DebugLocation(526, 8);
				PushFollow(Follow._ident_in_atom_expr4640);
				ident356=ident();
				PopFollow();

				stream_ident.Add(ident356.Tree);


				{
				// AST REWRITE
				// elements: ident, 113
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 526:14: -> ^( '@' ident )
				{
					DebugLocation(526, 17);
					// SugarCpp.g:526:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(526, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(526, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:527:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(527, 4);
				char_literal357=(IToken)Match(input,79,Follow._79_in_atom_expr4653);  
				stream_79.Add(char_literal357);

				DebugLocation(527, 8);
				PushFollow(Follow._expr_in_atom_expr4655);
				expr358=expr();
				PopFollow();

				stream_expr.Add(expr358.Tree);
				DebugLocation(527, 13);
				// SugarCpp.g:527:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, false);
				int LA144_0 = input.LA(1);

				if ((LA144_0==86))
				{
					alt144 = 1;
				}
				else if ((LA144_0==80))
				{
					alt144 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 144, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:527:15: ( ',' expr )+ ')'
					{
					DebugLocation(527, 15);
					// SugarCpp.g:527:15: ( ',' expr )+
					int cnt143=0;
					try { DebugEnterSubRule(143);
					while (true)
					{
						int alt143=2;
						try { DebugEnterDecision(143, false);
						int LA143_0 = input.LA(1);

						if ((LA143_0==86))
						{
							alt143 = 1;
						}


						} finally { DebugExitDecision(143); }
						switch (alt143)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:527:16: ',' expr
							{
							DebugLocation(527, 16);
							char_literal359=(IToken)Match(input,86,Follow._86_in_atom_expr4660);  
							stream_86.Add(char_literal359);

							DebugLocation(527, 20);
							PushFollow(Follow._expr_in_atom_expr4662);
							expr360=expr();
							PopFollow();

							stream_expr.Add(expr360.Tree);

							}
							break;

						default:
							if (cnt143 >= 1)
								goto loop143;

							EarlyExitException eee143 = new EarlyExitException( 143, input );
							DebugRecognitionException(eee143);
							throw eee143;
						}
						cnt143++;
					}
					loop143:
						;

					} finally { DebugExitSubRule(143); }

					DebugLocation(527, 27);
					char_literal361=(IToken)Match(input,80,Follow._80_in_atom_expr4666);  
					stream_80.Add(char_literal361);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 527:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(527, 34);
						// SugarCpp.g:527:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(527, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(527, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(527, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:528:15: ')'
					{
					DebugLocation(528, 15);
					char_literal362=(IToken)Match(input,80,Follow._80_in_atom_expr4691);  
					stream_80.Add(char_literal362);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 528:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(528, 22);
						// SugarCpp.g:528:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(528, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(528, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(144); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 69);
			LeaveRule("atom_expr", 69);
			LeaveRule_atom_expr();
		}
		DebugLocation(530, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:532:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 70);
		TraceIn("lvalue_item", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal363 = default(IToken);
		IToken string_literal364 = default(IToken);
		IToken char_literal365 = default(IToken);
		IToken string_literal367 = default(IToken);
		IToken char_literal370 = default(IToken);
		IToken char_literal372 = default(IToken);
		IToken char_literal373 = default(IToken);
		IToken char_literal375 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident366 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident368 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter369 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list371 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list374 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal363_tree = default(CommonTree);
		CommonTree string_literal364_tree = default(CommonTree);
		CommonTree char_literal365_tree = default(CommonTree);
		CommonTree string_literal367_tree = default(CommonTree);
		CommonTree char_literal370_tree = default(CommonTree);
		CommonTree char_literal372_tree = default(CommonTree);
		CommonTree char_literal373_tree = default(CommonTree);
		CommonTree char_literal375_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(532, 1);
		try
		{
			// SugarCpp.g:533:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:533:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(533, 4);
			// SugarCpp.g:533:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:533:5: a= lvalue_atom
			{
			DebugLocation(533, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item4721);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 533:19: -> $a
			{
				DebugLocation(533, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(533, 26);
			// SugarCpp.g:533:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(149);
			while (true)
			{
				int alt149=7;
				try { DebugEnterDecision(149, false);
				switch (input.LA(1))
				{
				case 84:
					{
					alt149 = 1;
					}
					break;
				case 88:
					{
					alt149 = 2;
					}
					break;
				case 92:
					{
					alt149 = 3;
					}
					break;
				case 90:
					{
					alt149 = 4;
					}
					break;
				case 79:
				case 99:
					{
					alt149 = 5;
					}
					break;
				case 114:
					{
					alt149 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(149); }
				switch ( alt149 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:533:28: '++'
					{
					DebugLocation(533, 28);
					string_literal363=(IToken)Match(input,84,Follow._84_in_lvalue_item4731);  
					stream_84.Add(string_literal363);



					{
					// AST REWRITE
					// elements: lvalue_item, 84
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 533:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(533, 36);
						// SugarCpp.g:533:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(533, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(533, 50);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(533, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:534:16: '--'
					{
					DebugLocation(534, 16);
					string_literal364=(IToken)Match(input,88,Follow._88_in_lvalue_item4759);  
					stream_88.Add(string_literal364);



					{
					// AST REWRITE
					// elements: 88, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 534:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(534, 24);
						// SugarCpp.g:534:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(534, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(534, 38);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(534, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:535:13: '.' ident
					{
					DebugLocation(535, 13);
					char_literal365=(IToken)Match(input,92,Follow._92_in_lvalue_item4784);  
					stream_92.Add(char_literal365);

					DebugLocation(535, 17);
					PushFollow(Follow._ident_in_lvalue_item4786);
					ident366=ident();
					PopFollow();

					stream_ident.Add(ident366.Tree);


					{
					// AST REWRITE
					// elements: ident, 92, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 535:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(535, 26);
						// SugarCpp.g:535:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(535, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(535, 40);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(535, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(535, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:536:13: '->' ident
					{
					DebugLocation(536, 13);
					string_literal367=(IToken)Match(input,90,Follow._90_in_lvalue_item4813);  
					stream_90.Add(string_literal367);

					DebugLocation(536, 18);
					PushFollow(Follow._ident_in_lvalue_item4815);
					ident368=ident();
					PopFollow();

					stream_ident.Add(ident368.Tree);


					{
					// AST REWRITE
					// elements: lvalue_item, 90, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 536:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(536, 27);
						// SugarCpp.g:536:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(536, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(536, 41);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(536, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(536, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:537:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(537, 13);
					// SugarCpp.g:537:13: ( generic_parameter )?
					int alt146=2;
					try { DebugEnterSubRule(146);
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==99))
					{
						alt146 = 1;
					}
					} finally { DebugExitDecision(146); }
					switch (alt146)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:537:13: generic_parameter
						{
						DebugLocation(537, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item4842);
						generic_parameter369=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter369.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(146); }

					DebugLocation(537, 32);
					char_literal370=(IToken)Match(input,79,Follow._79_in_lvalue_item4845);  
					stream_79.Add(char_literal370);

					DebugLocation(537, 36);
					// SugarCpp.g:537:36: ( expr_list )?
					int alt147=2;
					try { DebugEnterSubRule(147);
					try { DebugEnterDecision(147, false);
					int LA147_0 = input.LA(1);

					if ((LA147_0==IDENT||LA147_0==NUMBER||LA147_0==STRING||LA147_0==72||LA147_0==77||LA147_0==79||LA147_0==81||(LA147_0>=83 && LA147_0<=84)||(LA147_0>=87 && LA147_0<=88)||(LA147_0>=113 && LA147_0<=114)||LA147_0==137||LA147_0==152))
					{
						alt147 = 1;
					}
					} finally { DebugExitDecision(147); }
					switch (alt147)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:537:36: expr_list
						{
						DebugLocation(537, 36);
						PushFollow(Follow._expr_list_in_lvalue_item4847);
						expr_list371=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list371.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(147); }

					DebugLocation(537, 47);
					char_literal372=(IToken)Match(input,80,Follow._80_in_lvalue_item4850);  
					stream_80.Add(char_literal372);



					{
					// AST REWRITE
					// elements: lvalue_item, generic_parameter, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 537:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(537, 54);
						// SugarCpp.g:537:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(537, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(537, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(537, 79);
						// SugarCpp.g:537:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(537, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(537, 98);
						// SugarCpp.g:537:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(537, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:538:13: '[' ( expr_list )? ']'
					{
					DebugLocation(538, 13);
					char_literal373=(IToken)Match(input,114,Follow._114_in_lvalue_item4879);  
					stream_114.Add(char_literal373);

					DebugLocation(538, 17);
					// SugarCpp.g:538:17: ( expr_list )?
					int alt148=2;
					try { DebugEnterSubRule(148);
					try { DebugEnterDecision(148, false);
					int LA148_0 = input.LA(1);

					if ((LA148_0==IDENT||LA148_0==NUMBER||LA148_0==STRING||LA148_0==72||LA148_0==77||LA148_0==79||LA148_0==81||(LA148_0>=83 && LA148_0<=84)||(LA148_0>=87 && LA148_0<=88)||(LA148_0>=113 && LA148_0<=114)||LA148_0==137||LA148_0==152))
					{
						alt148 = 1;
					}
					} finally { DebugExitDecision(148); }
					switch (alt148)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:538:17: expr_list
						{
						DebugLocation(538, 17);
						PushFollow(Follow._expr_list_in_lvalue_item4881);
						expr_list374=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list374.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(148); }

					DebugLocation(538, 28);
					char_literal375=(IToken)Match(input,115,Follow._115_in_lvalue_item4884);  
					stream_115.Add(char_literal375);



					{
					// AST REWRITE
					// elements: expr_list, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 538:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(538, 35);
						// SugarCpp.g:538:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(538, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(538, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(538, 60);
						// SugarCpp.g:538:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(538, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop149;
				}
			}

			loop149:
				;

			} finally { DebugExitSubRule(149); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 70);
			LeaveRule("lvalue_item", 70);
			LeaveRule_lvalue_item();
		}
		DebugLocation(540, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:542:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 71);
		TraceIn("lvalue_atom", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal377 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident376 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident378 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal377_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(542, 1);
		try
		{
			// SugarCpp.g:543:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt150=2;
			try { DebugEnterDecision(150, false);
			int LA150_0 = input.LA(1);

			if ((LA150_0==IDENT))
			{
				alt150 = 1;
			}
			else if ((LA150_0==113))
			{
				alt150 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 150, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:543:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(543, 4);
				PushFollow(Follow._ident_in_lvalue_atom4923);
				ident376=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident376.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:544:4: '@' ident
				{
				DebugLocation(544, 4);
				char_literal377=(IToken)Match(input,113,Follow._113_in_lvalue_atom4928);  
				stream_113.Add(char_literal377);

				DebugLocation(544, 8);
				PushFollow(Follow._ident_in_lvalue_atom4930);
				ident378=ident();
				PopFollow();

				stream_ident.Add(ident378.Tree);


				{
				// AST REWRITE
				// elements: 113, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 544:14: -> ^( '@' ident )
				{
					DebugLocation(544, 17);
					// SugarCpp.g:544:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(544, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(544, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 71);
			LeaveRule("lvalue_atom", 71);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(545, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:547:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 72);
		TraceIn("lvalue", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal379 = default(IToken);
		IToken char_literal381 = default(IToken);
		IToken char_literal383 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item380 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item382 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item384 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal379_tree = default(CommonTree);
		CommonTree char_literal381_tree = default(CommonTree);
		CommonTree char_literal383_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(547, 1);
		try
		{
			// SugarCpp.g:548:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt152=2;
			try { DebugEnterDecision(152, false);
			int LA152_0 = input.LA(1);

			if ((LA152_0==79))
			{
				alt152 = 1;
			}
			else if ((LA152_0==IDENT||LA152_0==113))
			{
				alt152 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 152, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:548:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(548, 4);
				char_literal379=(IToken)Match(input,79,Follow._79_in_lvalue4949);  
				stream_79.Add(char_literal379);

				DebugLocation(548, 8);
				PushFollow(Follow._lvalue_item_in_lvalue4951);
				lvalue_item380=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item380.Tree);
				DebugLocation(548, 20);
				// SugarCpp.g:548:20: ( ',' lvalue_item )+
				int cnt151=0;
				try { DebugEnterSubRule(151);
				while (true)
				{
					int alt151=2;
					try { DebugEnterDecision(151, false);
					int LA151_0 = input.LA(1);

					if ((LA151_0==86))
					{
						alt151 = 1;
					}


					} finally { DebugExitDecision(151); }
					switch (alt151)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:548:21: ',' lvalue_item
						{
						DebugLocation(548, 21);
						char_literal381=(IToken)Match(input,86,Follow._86_in_lvalue4954);  
						stream_86.Add(char_literal381);

						DebugLocation(548, 25);
						PushFollow(Follow._lvalue_item_in_lvalue4956);
						lvalue_item382=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item382.Tree);

						}
						break;

					default:
						if (cnt151 >= 1)
							goto loop151;

						EarlyExitException eee151 = new EarlyExitException( 151, input );
						DebugRecognitionException(eee151);
						throw eee151;
					}
					cnt151++;
				}
				loop151:
					;

				} finally { DebugExitSubRule(151); }

				DebugLocation(548, 39);
				char_literal383=(IToken)Match(input,80,Follow._80_in_lvalue4960);  
				stream_80.Add(char_literal383);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 548:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(548, 46);
					// SugarCpp.g:548:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(548, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(548, 60);
					// SugarCpp.g:548:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(548, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:549:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(549, 4);
				PushFollow(Follow._lvalue_item_in_lvalue4974);
				lvalue_item384=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item384.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 72);
			LeaveRule("lvalue", 72);
			LeaveRule_lvalue();
		}
		DebugLocation(550, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:552:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 73);
		TraceIn("ident", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT385 = default(IToken);
		IToken string_literal386 = default(IToken);
		IToken IDENT387 = default(IToken);

		CommonTree IDENT385_tree = default(CommonTree);
		CommonTree string_literal386_tree = default(CommonTree);
		CommonTree IDENT387_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(552, 1);
		try
		{
			// SugarCpp.g:553:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:553:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(553, 4);
			IDENT385=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4985); 
			IDENT385_tree = (CommonTree)adaptor.Create(IDENT385);
			adaptor.AddChild(root_0, IDENT385_tree);
			DebugLocation(553, 10);
			// SugarCpp.g:553:10: ( '::' IDENT )*
			try { DebugEnterSubRule(153);
			while (true)
			{
				int alt153=2;
				try { DebugEnterDecision(153, false);
				int LA153_0 = input.LA(1);

				if ((LA153_0==97))
				{
					alt153 = 1;
				}


				} finally { DebugExitDecision(153); }
				switch ( alt153 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:553:11: '::' IDENT
					{
					DebugLocation(553, 11);
					string_literal386=(IToken)Match(input,97,Follow._97_in_ident4988); 
					string_literal386_tree = (CommonTree)adaptor.Create(string_literal386);
					adaptor.AddChild(root_0, string_literal386_tree);
					DebugLocation(553, 16);
					IDENT387=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4990); 
					IDENT387_tree = (CommonTree)adaptor.Create(IDENT387);
					adaptor.AddChild(root_0, IDENT387_tree);

					}
					break;

				default:
					goto loop153;
				}
			}

			loop153:
				;

			} finally { DebugExitSubRule(153); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 73);
			LeaveRule("ident", 73);
			LeaveRule_ident();
		}
		DebugLocation(554, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:556:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 74);
		TraceIn("infix_func", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal388 = default(IToken);
		IToken char_literal390 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident389 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal388_tree = default(CommonTree);
		CommonTree char_literal390_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(556, 1);
		try
		{
			// SugarCpp.g:557:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:557:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(557, 7);
			char_literal388=(IToken)Match(input,118,Follow._118_in_infix_func5003); 
			DebugLocation(557, 9);
			PushFollow(Follow._ident_in_infix_func5006);
			ident389=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident389.Tree);
			DebugLocation(557, 18);
			char_literal390=(IToken)Match(input,118,Follow._118_in_infix_func5008); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 74);
			LeaveRule("infix_func", 74);
			LeaveRule_infix_func();
		}
		DebugLocation(558, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA44 dfa44;
	private DFA59 dfa59;
	private DFA71 dfa71;
	private DFA78 dfa78;
	private DFA82 dfa82;
	private DFA95 dfa95;
	private DFA108 dfa108;
	private DFA107 dfa107;
	private DFA113 dfa113;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa44 = new DFA44( this );
		dfa59 = new DFA59( this );
		dfa71 = new DFA71( this );
		dfa78 = new DFA78( this );
		dfa82 = new DFA82( this );
		dfa95 = new DFA95( this );
		dfa108 = new DFA108( this );
		dfa107 = new DFA107( this );
		dfa113 = new DFA113( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x29\x1\xFFFF\x1\x29\x6\xFFFF\x2\x4F\x1\x29\x1\xFFFF\x3\x29\x1\x30"+
			"\x2\x29\x1\x4F\x3\x50\x2\x4F\x1\x29\x3\x50\x1\x29\x1\x56\x5\x29\x1\x56"+
			"\x1\x29\x4\x50\x1\x4F\xA\x50\x2\x29\x1\x56\x2\x29\x1\x56\x2\x29\xA\x50"+
			"\x2\x29\x2\x50";
		private const string DFA4_maxS =
			"\x1\x98\x1\x7C\x1\xFFFF\x1\x98\x6\xFFFF\x2\x73\x1\x29\x1\xFFFF\x1\x29"+
			"\x1\x36\x1\x7C\x1\x30\x1\x36\x1\x98\x1\x73\x2\x56\x1\x61\x2\x73\x1\x98"+
			"\x2\x56\x1\x61\x1\x36\x1\x73\x2\x29\x3\x36\x1\x73\x1\x29\x2\x56\x2\x61"+
			"\x1\x73\x2\x56\x1\x61\x2\x56\x1\x61\x2\x56\x2\x61\x1\x29\x1\x36\x1\x73"+
			"\x1\x29\x1\x36\x1\x73\x2\x29\x1\x61\x2\x56\x2\x61\x2\x56\x3\x61\x2\x29"+
			"\x2\x61";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x48\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x8\x3\xFFFF\x1\x9\x6\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x6\x4"+
				"\xFFFF\x1\x2",
				"\x1\xA\x52\xFFFF\x1\xB",
				"",
				"\x1\x2\x23\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x25\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x7\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x52\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x7\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x23\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x25\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x3\x6\xFFFF\x1\x1A\x41\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x8\x3\xFFFF\x1\x9\x6\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x7\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x7\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x7\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x7\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x7\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x7\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "203:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x30\x1\x98\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x41\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "247:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x30\x1\x98\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x41\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "255:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x30\x1\x98\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x41\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "259:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA59 : DFA
	{
		private const string DFA59_eotS =
			"\xF\xFFFF";
		private const string DFA59_eofS =
			"\xF\xFFFF";
		private const string DFA59_minS =
			"\x1\x29\x1\xFFFF\x1\x29\x1\xFFFF\x3\x29\x1\x4D\x3\x29\x2\x4D\x1\x29\x1"+
			"\x4D";
		private const string DFA59_maxS =
			"\x1\x98\x1\xFFFF\x1\x98\x1\xFFFF\x1\x29\x1\x91\x1\x98\x1\x72\x1\x29\x1"+
			"\x91\x1\x98\x2\x72\x1\x29\x1\x72";
		private const string DFA59_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA59_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA59_transitionS =
			{
				"\x1\x2\x52\xFFFF\x1\x1\x14\xFFFF\x1\x1\x6\xFFFF\x1\x3",
				"",
				"\x1\x1\x23\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x25\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x41\xFFFF\x1\x1\x10\xFFFF\x1\x1\x14\xFFFF\x1\x1",
				"\x1\x1\x23\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x25\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x52\xFFFF\x1\x1\x14\xFFFF\x1\x1",
				"\x1\x1\x23\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x20\xFFFF\x1\x1"+
				"\x25\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA59_eot = DFA.UnpackEncodedString(DFA59_eotS);
		private static readonly short[] DFA59_eof = DFA.UnpackEncodedString(DFA59_eofS);
		private static readonly char[] DFA59_min = DFA.UnpackEncodedStringToUnsignedChars(DFA59_minS);
		private static readonly char[] DFA59_max = DFA.UnpackEncodedStringToUnsignedChars(DFA59_maxS);
		private static readonly short[] DFA59_accept = DFA.UnpackEncodedString(DFA59_acceptS);
		private static readonly short[] DFA59_special = DFA.UnpackEncodedString(DFA59_specialS);
		private static readonly short[][] DFA59_transition;

		static DFA59()
		{
			int numStates = DFA59_transitionS.Length;
			DFA59_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA59_transition[i] = DFA.UnpackEncodedString(DFA59_transitionS[i]);
			}
		}

		public DFA59( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}

		public override string Description { get { return "288:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\x9\xFFFF";
		private const string DFA71_eofS =
			"\x9\xFFFF";
		private const string DFA71_minS =
			"\x1\x29\x1\x30\x4\xFFFF\x1\x29\x1\xFFFF\x1\x30";
		private const string DFA71_maxS =
			"\x1\x93\x1\x96\x4\xFFFF\x1\x29\x1\xFFFF\x1\x96";
		private const string DFA71_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA71_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x1\x25\xFFFF\x1\x5\x21\xFFFF\x1\x5\x19\xFFFF\x1\x2\x3\xFFFF\x1\x4"+
				"\x3\xFFFF\x1\x3",
				"\x1\x5\x1A\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\xC\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x1A\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\xC\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "314:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA78 : DFA
	{
		private const string DFA78_eotS =
			"\x4\xFFFF";
		private const string DFA78_eofS =
			"\x4\xFFFF";
		private const string DFA78_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA78_maxS =
			"\x1\x7F\x1\x94\x2\xFFFF";
		private const string DFA78_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA78_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA78_transitionS =
			{
				"\x1\x1\x4E\xFFFF\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x3\x6\xFFFF\x1\x1\x1E\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA78_eot = DFA.UnpackEncodedString(DFA78_eotS);
		private static readonly short[] DFA78_eof = DFA.UnpackEncodedString(DFA78_eofS);
		private static readonly char[] DFA78_min = DFA.UnpackEncodedStringToUnsignedChars(DFA78_minS);
		private static readonly char[] DFA78_max = DFA.UnpackEncodedStringToUnsignedChars(DFA78_maxS);
		private static readonly short[] DFA78_accept = DFA.UnpackEncodedString(DFA78_acceptS);
		private static readonly short[] DFA78_special = DFA.UnpackEncodedString(DFA78_specialS);
		private static readonly short[][] DFA78_transition;

		static DFA78()
		{
			int numStates = DFA78_transitionS.Length;
			DFA78_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA78_transition[i] = DFA.UnpackEncodedString(DFA78_transitionS[i]);
			}
		}

		public DFA78( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 78;
			this.eot = DFA78_eot;
			this.eof = DFA78_eof;
			this.min = DFA78_min;
			this.max = DFA78_max;
			this.accept = DFA78_accept;
			this.special = DFA78_special;
			this.transition = DFA78_transition;
		}

		public override string Description { get { return "341:35: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA82 : DFA
	{
		private const string DFA82_eotS =
			"\x4\xFFFF";
		private const string DFA82_eofS =
			"\x4\xFFFF";
		private const string DFA82_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA82_maxS =
			"\x1\x7F\x1\x94\x2\xFFFF";
		private const string DFA82_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA82_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA82_transitionS =
			{
				"\x1\x1\x4E\xFFFF\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x3\x6\xFFFF\x1\x1\x1E\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA82_eot = DFA.UnpackEncodedString(DFA82_eotS);
		private static readonly short[] DFA82_eof = DFA.UnpackEncodedString(DFA82_eofS);
		private static readonly char[] DFA82_min = DFA.UnpackEncodedStringToUnsignedChars(DFA82_minS);
		private static readonly char[] DFA82_max = DFA.UnpackEncodedStringToUnsignedChars(DFA82_maxS);
		private static readonly short[] DFA82_accept = DFA.UnpackEncodedString(DFA82_acceptS);
		private static readonly short[] DFA82_special = DFA.UnpackEncodedString(DFA82_specialS);
		private static readonly short[][] DFA82_transition;

		static DFA82()
		{
			int numStates = DFA82_transitionS.Length;
			DFA82_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA82_transition[i] = DFA.UnpackEncodedString(DFA82_transitionS[i]);
			}
		}

		public DFA82( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 82;
			this.eot = DFA82_eot;
			this.eof = DFA82_eof;
			this.min = DFA82_min;
			this.max = DFA82_max;
			this.accept = DFA82_accept;
			this.special = DFA82_special;
			this.transition = DFA82_transition;
		}

		public override string Description { get { return "344:39: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA95 : DFA
	{
		private const string DFA95_eotS =
			"\x6\xFFFF";
		private const string DFA95_eofS =
			"\x6\xFFFF";
		private const string DFA95_minS =
			"\x1\x29\x1\x30\x1\xFFFF\x1\x29\x1\xFFFF\x1\x30";
		private const string DFA95_maxS =
			"\x1\x98\x1\x97\x1\xFFFF\x1\x29\x1\xFFFF\x1\x97";
		private const string DFA95_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA95_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA95_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"\x1\x2\x18\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x2\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF\x2\x2\x1\xFFFF"+
				"\x2\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x18\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x2\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF\x2\x2\x1\xFFFF"+
				"\x2\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"
			};

		private static readonly short[] DFA95_eot = DFA.UnpackEncodedString(DFA95_eotS);
		private static readonly short[] DFA95_eof = DFA.UnpackEncodedString(DFA95_eofS);
		private static readonly char[] DFA95_min = DFA.UnpackEncodedStringToUnsignedChars(DFA95_minS);
		private static readonly char[] DFA95_max = DFA.UnpackEncodedStringToUnsignedChars(DFA95_maxS);
		private static readonly short[] DFA95_accept = DFA.UnpackEncodedString(DFA95_acceptS);
		private static readonly short[] DFA95_special = DFA.UnpackEncodedString(DFA95_specialS);
		private static readonly short[][] DFA95_transition;

		static DFA95()
		{
			int numStates = DFA95_transitionS.Length;
			DFA95_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA95_transition[i] = DFA.UnpackEncodedString(DFA95_transitionS[i]);
			}
		}

		public DFA95( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 95;
			this.eot = DFA95_eot;
			this.eof = DFA95_eof;
			this.min = DFA95_min;
			this.max = DFA95_max;
			this.accept = DFA95_accept;
			this.special = DFA95_special;
			this.transition = DFA95_transition;
		}

		public override string Description { get { return "370:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA108 : DFA
	{
		private const string DFA108_eotS =
			"\x7\xFFFF";
		private const string DFA108_eofS =
			"\x7\xFFFF";
		private const string DFA108_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA108_maxS =
			"\x5\x98\x2\xFFFF";
		private const string DFA108_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA108_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA108_transitionS =
			{
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x11"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x11"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x11"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x11"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x11"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\xE\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA108_eot = DFA.UnpackEncodedString(DFA108_eotS);
		private static readonly short[] DFA108_eof = DFA.UnpackEncodedString(DFA108_eofS);
		private static readonly char[] DFA108_min = DFA.UnpackEncodedStringToUnsignedChars(DFA108_minS);
		private static readonly char[] DFA108_max = DFA.UnpackEncodedStringToUnsignedChars(DFA108_maxS);
		private static readonly short[] DFA108_accept = DFA.UnpackEncodedString(DFA108_acceptS);
		private static readonly short[] DFA108_special = DFA.UnpackEncodedString(DFA108_specialS);
		private static readonly short[][] DFA108_transition;

		static DFA108()
		{
			int numStates = DFA108_transitionS.Length;
			DFA108_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA108_transition[i] = DFA.UnpackEncodedString(DFA108_transitionS[i]);
			}
		}

		public DFA108( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 108;
			this.eot = DFA108_eot;
			this.eof = DFA108_eof;
			this.min = DFA108_min;
			this.max = DFA108_max;
			this.accept = DFA108_accept;
			this.special = DFA108_special;
			this.transition = DFA108_transition;
		}

		public override string Description { get { return "407:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA107 : DFA
	{
		private const string DFA107_eotS =
			"\x7\xFFFF";
		private const string DFA107_eofS =
			"\x7\xFFFF";
		private const string DFA107_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA107_maxS =
			"\x1\x73\x4\x98\x2\xFFFF";
		private const string DFA107_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA107_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA107_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x3\x5\xFFFF\x1\x2\x25\xFFFF\x1\x1\x1C\xFFFF\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x11"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x11"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x11"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x11"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\xE\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA107_eot = DFA.UnpackEncodedString(DFA107_eotS);
		private static readonly short[] DFA107_eof = DFA.UnpackEncodedString(DFA107_eofS);
		private static readonly char[] DFA107_min = DFA.UnpackEncodedStringToUnsignedChars(DFA107_minS);
		private static readonly char[] DFA107_max = DFA.UnpackEncodedStringToUnsignedChars(DFA107_maxS);
		private static readonly short[] DFA107_accept = DFA.UnpackEncodedString(DFA107_acceptS);
		private static readonly short[] DFA107_special = DFA.UnpackEncodedString(DFA107_specialS);
		private static readonly short[][] DFA107_transition;

		static DFA107()
		{
			int numStates = DFA107_transitionS.Length;
			DFA107_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA107_transition[i] = DFA.UnpackEncodedString(DFA107_transitionS[i]);
			}
		}

		public DFA107( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 107;
			this.eot = DFA107_eot;
			this.eof = DFA107_eof;
			this.min = DFA107_min;
			this.max = DFA107_max;
			this.accept = DFA107_accept;
			this.special = DFA107_special;
			this.transition = DFA107_transition;
		}

		public override string Description { get { return "()* loopback of 407:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA113 : DFA
	{
		private const string DFA113_eotS =
			"\xB\xFFFF";
		private const string DFA113_eofS =
			"\xB\xFFFF";
		private const string DFA113_minS =
			"\x2\x29\x1\xFFFF\x1\x49\x1\xFFFF\x2\x29\x2\x49\x1\x29\x1\x49";
		private const string DFA113_maxS =
			"\x2\x98\x1\xFFFF\x1\x97\x1\xFFFF\x1\x29\x1\x98\x2\x97\x1\x29\x1\x97";
		private const string DFA113_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA113_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA113_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2\x17\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"\x1\x3\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xE\xFFFF\x2\x2\x16\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xA\xFFFF"+
				"\x3\x2"
			};

		private static readonly short[] DFA113_eot = DFA.UnpackEncodedString(DFA113_eotS);
		private static readonly short[] DFA113_eof = DFA.UnpackEncodedString(DFA113_eofS);
		private static readonly char[] DFA113_min = DFA.UnpackEncodedStringToUnsignedChars(DFA113_minS);
		private static readonly char[] DFA113_max = DFA.UnpackEncodedStringToUnsignedChars(DFA113_maxS);
		private static readonly short[] DFA113_accept = DFA.UnpackEncodedString(DFA113_acceptS);
		private static readonly short[] DFA113_special = DFA.UnpackEncodedString(DFA113_specialS);
		private static readonly short[][] DFA113_transition;

		static DFA113()
		{
			int numStates = DFA113_transitionS.Length;
			DFA113_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA113_transition[i] = DFA.UnpackEncodedString(DFA113_transitionS[i]);
			}
		}

		public DFA113( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 113;
			this.eot = DFA113_eot;
			this.eof = DFA113_eof;
			this.min = DFA113_min;
			this.max = DFA113_max;
			this.accept = DFA113_accept;
			this.special = DFA113_special;
			this.transition = DFA113_transition;
		}

		public override string Description { get { return "411:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root500 = new BitSet(new ulong[]{0x1020000000000UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _global_block_in_root503 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block525 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block527 = new BitSet(new ulong[]{0x1020000000002UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _func_def_in_node550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item618 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _79_in_attribute_item621 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item623 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _86_in_attribute_item626 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item628 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _80_in_attribute_item632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_attribute_item650 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _79_in_attribute_item653 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item655 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _86_in_attribute_item658 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item660 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _80_in_attribute_item664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_attribute689 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute691 = new BitSet(new ulong[]{0x0UL,0x8000000400000UL});
		public static readonly BitSet _86_in_attribute694 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute696 = new BitSet(new ulong[]{0x0UL,0x8000000400000UL});
		public static readonly BitSet _115_in_attribute700 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute702 = new BitSet(new ulong[]{0x1000000000002UL,0x4000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc721 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc724 = new BitSet(new ulong[]{0x0UL,0x500000000UL});
		public static readonly BitSet _96_in_global_alloc728 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_global_alloc730 = new BitSet(new ulong[]{0x2UL,0x10400008000UL});
		public static readonly BitSet _104_in_global_alloc735 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _98_in_global_alloc739 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_global_alloc742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_global_alloc802 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_global_alloc804 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_global_alloc807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_global_alloc880 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_global_alloc883 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_global_alloc886 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_global_alloc888 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _attribute_in_global_using925 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_global_using928 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x100UL});
		public static readonly BitSet _stmt_using_item_in_global_using930 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x100UL});
		public static readonly BitSet _attribute_in_global_typedef954 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_global_typedef957 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_global_typedef959 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_global_typedef961 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_global_typedef963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def987 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_import_def990 = new BitSet(new ulong[]{0x41000000000002UL});
		public static readonly BitSet _STRING_in_import_def992 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def996 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_import_def999 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1001 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _STRING_in_import_def1006 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1008 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1038 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_enum_def1041 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def1043 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_enum_def1045 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _ident_in_enum_def1048 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_enum_def1051 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def1053 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _attribute_in_namespace_def1086 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_namespace_def1089 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_namespace_def1091 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1094 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1097 = new BitSet(new ulong[]{0x1020000000100UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1099 = new BitSet(new ulong[]{0x1020000000100UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _global_block_in_namespace_def1102 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1132 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_class_def1135 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1137 = new BitSet(new ulong[]{0x1000000000002UL,0x900008000UL});
		public static readonly BitSet _generic_parameter_in_class_def1140 = new BitSet(new ulong[]{0x1000000000002UL,0x100008000UL});
		public static readonly BitSet _79_in_class_def1145 = new BitSet(new ulong[]{0x20000000000UL,0x400000000UL});
		public static readonly BitSet _func_args_in_class_def1147 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_class_def1149 = new BitSet(new ulong[]{0x1000000000002UL,0x100000000UL});
		public static readonly BitSet _96_in_class_def1154 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1156 = new BitSet(new ulong[]{0x1000000000002UL,0x400000UL});
		public static readonly BitSet _86_in_class_def1159 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1161 = new BitSet(new ulong[]{0x1000000000002UL,0x400000UL});
		public static readonly BitSet _NEWLINE_in_class_def1168 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_class_def1171 = new BitSet(new ulong[]{0x1020000000100UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _NEWLINE_in_class_def1173 = new BitSet(new ulong[]{0x1020000000100UL,0x1804000000000000UL,0x10A8111UL});
		public static readonly BitSet _global_block_in_class_def1176 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_type_name_op1219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_type_name_op1223 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_type_name_op1225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_type_name_op1229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_type_name1238 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_type_name1241 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_type_name1244 = new BitSet(new ulong[]{0x2UL,0x4000800022000UL});
		public static readonly BitSet _99_in_type_name1247 = new BitSet(new ulong[]{0x20000000000UL,0x1000080000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_type_name1250 = new BitSet(new ulong[]{0x0UL,0x80000400000UL});
		public static readonly BitSet _86_in_type_name1253 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_type_name1255 = new BitSet(new ulong[]{0x0UL,0x80000400000UL});
		public static readonly BitSet _107_in_type_name1261 = new BitSet(new ulong[]{0x2UL,0x4000000022000UL});
		public static readonly BitSet _type_name_op_in_type_name1265 = new BitSet(new ulong[]{0x2UL,0x4000000022000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1305 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_generic_parameter_inside1308 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1310 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _99_in_generic_parameter1332 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1334 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_generic_parameter1336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1351 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_func_args1354 = new BitSet(new ulong[]{0x20000000000UL,0x400000000UL});
		public static readonly BitSet _func_args_item_in_func_args1356 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _ident_list_in_func_args_item1378 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_func_args_item1380 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_func_args_item1382 = new BitSet(new ulong[]{0x2UL,0x10400008000UL});
		public static readonly BitSet _104_in_func_args_item1387 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _98_in_func_args_item1391 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_func_args_item1394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_func_args_item1442 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_func_args_item1444 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_func_args_item1447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_func_args_item1504 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _modify_expr_in_func_args_item1508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1519 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x1020000UL});
		public static readonly BitSet _type_name_in_func_def1522 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_func_def1525 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_func_def1528 = new BitSet(new ulong[]{0x0UL,0x800008000UL});
		public static readonly BitSet _generic_parameter_in_func_def1530 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_func_def1533 = new BitSet(new ulong[]{0x20000000000UL,0x400010000UL});
		public static readonly BitSet _func_args_in_func_def1535 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_func_def1538 = new BitSet(new ulong[]{0x1000000000000UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1541 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_func_def1593 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_func_def1595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1636 = new BitSet(new ulong[]{0x1020000000100UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _NEWLINE_in_stmt_block1638 = new BitSet(new ulong[]{0x1020000000100UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_block1643 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1645 = new BitSet(new ulong[]{0x1020000000100UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _DEDENT_in_stmt_block1650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1709 = new BitSet(new ulong[]{0x2UL,0x0UL,0x15000CUL});
		public static readonly BitSet _131_in_stmt_expr1719 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_expr1721 = new BitSet(new ulong[]{0x2UL,0x0UL,0x15000CUL});
		public static readonly BitSet _144_in_stmt_expr1750 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_expr1752 = new BitSet(new ulong[]{0x2UL,0x0UL,0x15000CUL});
		public static readonly BitSet _148_in_stmt_expr1781 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_expr1783 = new BitSet(new ulong[]{0x2UL,0x0UL,0x15000CUL});
		public static readonly BitSet _146_in_stmt_expr1812 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_expr1814 = new BitSet(new ulong[]{0x2UL,0x0UL,0x15000CUL});
		public static readonly BitSet _130_in_stmt_expr1843 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _for_item_in_stmt_expr1845 = new BitSet(new ulong[]{0x2UL,0x400000UL,0x15000CUL});
		public static readonly BitSet _86_in_stmt_expr1848 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _for_item_in_stmt_expr1850 = new BitSet(new ulong[]{0x2UL,0x400000UL,0x15000CUL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item1892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item1897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item1902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item1907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item1912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_stmt_defer1923 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_defer1925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_defer1938 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_defer1940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_stmt_typedef1959 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1961 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_stmt_typedef1963 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_stmt_using_item1988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_using1996 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x100UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1998 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x100UL});
		public static readonly BitSet _139_in_stmt_return2019 = new BitSet(new ulong[]{0x42020000000002UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_return2021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_stmt_if2042 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_if2044 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2047 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2050 = new BitSet(new ulong[]{0x1000000000002UL,0x8000000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2053 = new BitSet(new ulong[]{0x1000000000000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_stmt_if2056 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_if2090 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_if2092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_stmt_if2117 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_if2119 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2122 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2125 = new BitSet(new ulong[]{0x1000000000002UL,0x8000000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2128 = new BitSet(new ulong[]{0x1000000000000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_stmt_if2131 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_if2169 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_if2171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_while2206 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_while2208 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2212 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_while2239 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_while2241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_stmt_while2269 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_while2271 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2275 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_while2302 = new BitSet(new ulong[]{0x20000000000UL,0x2002000000008000UL,0x1DC88EUL});
		public static readonly BitSet _stmt_in_stmt_while2304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_stmt_while2332 = new BitSet(new ulong[]{0x43020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_while2334 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2337 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2362 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_for_range2364 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_for_range2368 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL,0x2000UL});
		public static readonly BitSet _141_in_for_range2371 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_for_range2375 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _121_in_for_range2378 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_for_range2382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_for_range2411 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_for_range2415 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _121_in_for_range2418 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_for_range2422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when2480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item2499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item2504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_stmt_for2515 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _for_item_in_stmt_for2519 = new BitSet(new ulong[]{0x1000000000000UL,0x400000UL});
		public static readonly BitSet _86_in_stmt_for2522 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _for_item_in_stmt_for2524 = new BitSet(new ulong[]{0x1000000000000UL,0x400000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2528 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_try2562 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2564 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_stmt_try2566 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2568 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2593 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_ident_list2596 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_ident_list2598 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2620 = new BitSet(new ulong[]{0x0UL,0x500000000UL});
		public static readonly BitSet _96_in_stmt_alloc2624 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_stmt_alloc2626 = new BitSet(new ulong[]{0x2UL,0x10400008000UL});
		public static readonly BitSet _104_in_stmt_alloc2631 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _98_in_stmt_alloc2635 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_alloc2638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_stmt_alloc2686 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_stmt_alloc2688 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_alloc2691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_stmt_alloc2752 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_alloc2756 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_stmt_alloc2759 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_alloc2761 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _lvalue_in_stmt_modify2787 = new BitSet(new ulong[]{0x2UL,0x21414082244800UL,0x400000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify2791 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_stmt_modify2794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_modify2808 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr2824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_list_expr2835 = new BitSet(new ulong[]{0x43060000000100UL,0xE000001DAA100UL,0x1000200UL});
		public static readonly BitSet _86_in_list_expr2839 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _NEWLINE_in_list_expr2843 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _INDENT_in_list_expr2847 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _DEDENT_in_list_expr2851 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _list_expr_in_list_expr2855 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _86_in_list_expr2859 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _NEWLINE_in_list_expr2863 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _INDENT_in_list_expr2867 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _DEDENT_in_list_expr2871 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA100UL,0x1000200UL});
		public static readonly BitSet _list_expr_in_list_expr2875 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _86_in_list_expr2882 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _NEWLINE_in_list_expr2886 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _INDENT_in_list_expr2890 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _DEDENT_in_list_expr2894 = new BitSet(new ulong[]{0x1040000000100UL,0x8000000400000UL});
		public static readonly BitSet _115_in_list_expr2898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr2912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_lambda_expr2923 = new BitSet(new ulong[]{0x20000000000UL,0x400010000UL});
		public static readonly BitSet _func_args_in_lambda_expr2925 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_lambda_expr2928 = new BitSet(new ulong[]{0x0UL,0x40004000000UL});
		public static readonly BitSet _90_in_lambda_expr2932 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_lambda_expr2934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_lambda_expr2974 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_lambda_expr2976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr2996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr3053 = new BitSet(new ulong[]{0x2UL,0x20414482244800UL,0x400000UL});
		public static readonly BitSet _set_in_modify_expr3057 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _cond_expr_in_modify_expr3102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_modify_expr3111 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _cond_expr_in_modify_expr3114 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item3127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr3139 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_cond_expr3148 = new BitSet(new ulong[]{0x42020000000002UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3154 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _96_in_cond_expr3158 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr3276 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _or_op_in_or_expr3287 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _and_expr_in_or_expr3291 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800400UL});
		public static readonly BitSet _bit_or_in_and_expr3333 = new BitSet(new ulong[]{0x2UL,0x80000000001000UL});
		public static readonly BitSet _and_op_in_and_expr3344 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _bit_or_in_and_expr3348 = new BitSet(new ulong[]{0x2UL,0x80000000001000UL});
		public static readonly BitSet _bit_xor_in_bit_or3379 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_bit_or3388 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _bit_xor_in_bit_or3392 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000UL});
		public static readonly BitSet _bit_and_in_bit_xor3422 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _116_in_bit_xor3431 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _bit_and_in_bit_xor3435 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and3465 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_bit_and3474 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _cmp_expr_in_bit_and3478 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _chain_op_in_chain_list3570 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _infix_expr_in_chain_list3572 = new BitSet(new ulong[]{0x2UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3586 = new BitSet(new ulong[]{0x2UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _99_in_cmp_expr3596 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3600 = new BitSet(new ulong[]{0x20000000002UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _ident_in_cmp_expr3606 = new BitSet(new ulong[]{0x20000000000UL,0x80000000000UL});
		public static readonly BitSet _107_in_cmp_expr3609 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_cmp_expr3611 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_cmp_expr3613 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_cmp_expr3616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr3685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr3762 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3766 = new BitSet(new ulong[]{0x2UL,0x1A8800000200UL,0x60UL});
		public static readonly BitSet _chain_list_in_cmp_expr3770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_infix_expr3861 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr3871 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _shift_expr_in_infix_expr3875 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr3918 = new BitSet(new ulong[]{0x2UL,0x202000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr3927 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _add_expr_in_shift_expr3931 = new BitSet(new ulong[]{0x2UL,0x202000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr3961 = new BitSet(new ulong[]{0x2UL,0x880000UL});
		public static readonly BitSet _83_in_add_expr3971 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _mul_expr_in_add_expr3975 = new BitSet(new ulong[]{0x2UL,0x880000UL});
		public static readonly BitSet _87_in_add_expr4000 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _mul_expr_in_add_expr4004 = new BitSet(new ulong[]{0x2UL,0x880000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4042 = new BitSet(new ulong[]{0x2UL,0x40020400UL});
		public static readonly BitSet _81_in_mul_expr4052 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _selector_expr_in_mul_expr4056 = new BitSet(new ulong[]{0x2UL,0x40020400UL});
		public static readonly BitSet _94_in_mul_expr4086 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _selector_expr_in_mul_expr4090 = new BitSet(new ulong[]{0x2UL,0x40020400UL});
		public static readonly BitSet _74_in_mul_expr4120 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _selector_expr_in_mul_expr4124 = new BitSet(new ulong[]{0x2UL,0x40020400UL});
		public static readonly BitSet _cast_expr_in_selector_expr4167 = new BitSet(new ulong[]{0x2UL,0x28000000UL});
		public static readonly BitSet _91_in_selector_expr4177 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr4181 = new BitSet(new ulong[]{0x2UL,0x28000000UL});
		public static readonly BitSet _93_in_selector_expr4207 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr4212 = new BitSet(new ulong[]{0x2UL,0x28000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr4252 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _120_in_cast_expr4261 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_cast_expr4263 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_cast_expr4265 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_cast_expr4267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr4325 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA100UL,0x1000200UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr4327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_prefix_expr4343 = new BitSet(new ulong[]{0x20000000000UL,0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _type_name_in_prefix_expr4345 = new BitSet(new ulong[]{0x0UL,0x4000000008000UL});
		public static readonly BitSet _79_in_prefix_expr4349 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_prefix_expr4351 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_prefix_expr4354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_prefix_expr4376 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_prefix_expr4378 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_prefix_expr4380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr4396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list4408 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_expr_list4411 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_expr_list4414 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr4430 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _84_in_suffix_expr4440 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _88_in_suffix_expr4466 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _92_in_suffix_expr4489 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4491 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _90_in_suffix_expr4516 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4518 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _79_in_suffix_expr4543 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_suffix_expr4545 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_suffix_expr4548 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _114_in_suffix_expr4572 = new BitSet(new ulong[]{0x42020000000000UL,0xE0000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_suffix_expr4574 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_suffix_expr4577 = new BitSet(new ulong[]{0x2UL,0x4000015108000UL});
		public static readonly BitSet _NUMBER_in_atom_expr4623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr4628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr4633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_atom_expr4638 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_atom_expr4640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_atom_expr4653 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_atom_expr4655 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _86_in_atom_expr4660 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_in_atom_expr4662 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _80_in_atom_expr4666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_atom_expr4691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item4721 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _84_in_lvalue_item4731 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _88_in_lvalue_item4759 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _92_in_lvalue_item4784 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_item4786 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _90_in_lvalue_item4813 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_item4815 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item4842 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_lvalue_item4845 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_lvalue_item4847 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_lvalue_item4850 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _114_in_lvalue_item4879 = new BitSet(new ulong[]{0x42020000000000UL,0xE0000019AA100UL,0x1000200UL});
		public static readonly BitSet _expr_list_in_lvalue_item4881 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_lvalue_item4884 = new BitSet(new ulong[]{0x2UL,0x4000815108000UL});
		public static readonly BitSet _ident_in_lvalue_atom4923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_lvalue_atom4928 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom4930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_lvalue4949 = new BitSet(new ulong[]{0x20000000000UL,0x2000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4951 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_lvalue4954 = new BitSet(new ulong[]{0x20000000000UL,0x2000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4956 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _80_in_lvalue4960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue4974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident4985 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_ident4988 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_ident4990 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _118_in_infix_func5003 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_infix_func5006 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_infix_func5008 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
