//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-06 11:00:37

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "'\\\\'", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'defer'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'let'", "'loop'", "'namespace'", "'new'", "'return'", "'select'", "'try'", "'typedef'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc_Bracket=12;
	public const int Expr_Alloc_Equal=13;
	public const int Expr_Bin=14;
	public const int Expr_Bracket=15;
	public const int Expr_Call=16;
	public const int Expr_Call_With=17;
	public const int Expr_Cond=18;
	public const int Expr_Dict=19;
	public const int Expr_Infix=20;
	public const int Expr_Lambda=21;
	public const int Expr_New_Array=22;
	public const int Expr_New_Type=23;
	public const int Expr_Prefix=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int Generic_Patameters=29;
	public const int Global_Block=30;
	public const int IDENT=31;
	public const int INDENT=32;
	public const int Ident_List=33;
	public const int Import=34;
	public const int Left_Bracket=35;
	public const int LineComment=36;
	public const int Linq_From=37;
	public const int Linq_Let=38;
	public const int Linq_Prefix=39;
	public const int Linq_Where=40;
	public const int Match_Tuple=41;
	public const int NEWLINE=42;
	public const int NUMBER=43;
	public const int Namespace=44;
	public const int Right_Bracket=45;
	public const int Root=46;
	public const int SP=47;
	public const int STRING=48;
	public const int Stmt_Block=49;
	public const int Stmt_Defer=50;
	public const int Stmt_For=51;
	public const int Stmt_ForEach=52;
	public const int Stmt_If=53;
	public const int Stmt_Linq=54;
	public const int Stmt_Loop=55;
	public const int Stmt_Return=56;
	public const int Stmt_Try=57;
	public const int Stmt_Typedef=58;
	public const int Stmt_Using=59;
	public const int Stmt_While=60;
	public const int Type_IDENT=61;
	public const int Type_Ref=62;
	public const int Type_Tuple=63;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[242+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:166:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int root_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(166, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// SugarCpp.g:167:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:167:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(167, 4);
			// SugarCpp.g:167:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:167:4: NEWLINE
					{
					DebugLocation(167, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root467); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(167, 13);
			PushFollow(Follow._global_block_in_root470);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(167, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root472); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 167:30: -> ^( Root global_block )
			{
				DebugLocation(167, 33);
				// SugarCpp.g:167:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(167, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(167, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
			if (state.backtracking > 0) { Memoize(input, 1, root_StartIndex); }

		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:170:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(170, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// SugarCpp.g:171:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:171:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(171, 4);
			// SugarCpp.g:171:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==103||LA3_0==110||LA3_0==113||LA3_0==117||LA3_0==121||(LA3_0>=126 && LA3_0<=127)||LA3_0==133))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:171:5: node ( NEWLINE )+
					{
					DebugLocation(171, 5);
					PushFollow(Follow._node_in_global_block492);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(171, 10);
					// SugarCpp.g:171:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:171:10: NEWLINE
							{
							DebugLocation(171, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block494); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 171:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(171, 24);
				// SugarCpp.g:171:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(171, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(171, 39);
				// SugarCpp.g:171:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(171, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
			if (state.backtracking > 0) { Memoize(input, 2, global_block_StartIndex); }

		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:174:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(174, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// SugarCpp.g:175:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:175:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(175, 4);
				PushFollow(Follow._func_def_in_node517);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:176:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				PushFollow(Follow._class_def_in_node522);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:177:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 4);
				PushFollow(Follow._enum_def_in_node527);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:178:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(178, 4);
				PushFollow(Follow._global_alloc_in_node532);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:179:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(179, 4);
				PushFollow(Follow._global_using_in_node537);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:180:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 4);
				PushFollow(Follow._global_typedef_in_node542);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:181:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._import_def_in_node547);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:182:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 4);
				PushFollow(Follow._namespace_def_in_node552);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
			if (state.backtracking > 0) { Memoize(input, 3, node_StartIndex); }

		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:185:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(185, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// SugarCpp.g:186:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:186:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args564); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:187:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args569); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:188:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				PushFollow(Follow._ident_in_attribute_args574);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
			if (state.backtracking > 0) { Memoize(input, 4, attribute_args_StartIndex); }

		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:191:1: attribute_item : ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(191, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// SugarCpp.g:192:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:192:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
			{
			DebugLocation(192, 4);
			PushFollow(Follow._ident_in_attribute_item585);
			ident17=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
			DebugLocation(192, 10);
			// SugarCpp.g:192:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==71))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:192:11: '(' attribute_args ( ',' attribute_args )* ')'
				{
				DebugLocation(192, 11);
				char_literal18=(IToken)Match(input,71,Follow._71_in_attribute_item588); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_71.Add(char_literal18);

				DebugLocation(192, 15);
				PushFollow(Follow._attribute_args_in_attribute_item590);
				attribute_args19=attribute_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
				DebugLocation(192, 30);
				// SugarCpp.g:192:30: ( ',' attribute_args )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==78))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:192:31: ',' attribute_args
						{
						DebugLocation(192, 31);
						char_literal20=(IToken)Match(input,78,Follow._78_in_attribute_item593); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_78.Add(char_literal20);

						DebugLocation(192, 35);
						PushFollow(Follow._attribute_args_in_attribute_item595);
						attribute_args21=attribute_args();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(192, 52);
				char_literal22=(IToken)Match(input,72,Follow._72_in_attribute_item599); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_72.Add(char_literal22);


				}
				break;

			}
			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: attribute_args, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 192:58: -> ^( Attribute ident ( attribute_args )* )
			{
				DebugLocation(192, 61);
				// SugarCpp.g:192:61: ^( Attribute ident ( attribute_args )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(192, 63);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

				DebugLocation(192, 73);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(192, 79);
				// SugarCpp.g:192:79: ( attribute_args )*
				while ( stream_attribute_args.HasNext )
				{
					DebugLocation(192, 79);
					adaptor.AddChild(root_1, stream_attribute_args.NextTree());

				}
				stream_attribute_args.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
			if (state.backtracking > 0) { Memoize(input, 5, attribute_item_StartIndex); }

		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:195:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal23 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken char_literal27 = default(IToken);
		IToken NEWLINE28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree char_literal27_tree = default(CommonTree);
		CommonTree NEWLINE28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(195, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// SugarCpp.g:196:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:196:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(196, 4);
			// SugarCpp.g:196:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==103))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:196:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(196, 5);
					char_literal23=(IToken)Match(input,103,Follow._103_in_attribute624); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(char_literal23);

					DebugLocation(196, 9);
					PushFollow(Follow._attribute_item_in_attribute626);
					attribute_item24=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item24.Tree);
					DebugLocation(196, 24);
					// SugarCpp.g:196:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==78))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:196:25: ',' attribute_item
							{
							DebugLocation(196, 25);
							char_literal25=(IToken)Match(input,78,Follow._78_in_attribute629); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_78.Add(char_literal25);

							DebugLocation(196, 29);
							PushFollow(Follow._attribute_item_in_attribute631);
							attribute_item26=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item26.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(196, 46);
					char_literal27=(IToken)Match(input,105,Follow._105_in_attribute635); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal27);

					DebugLocation(196, 50);
					// SugarCpp.g:196:50: ( NEWLINE )+
					int cnt9=0;
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0==NEWLINE))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:196:50: NEWLINE
							{
							DebugLocation(196, 50);
							NEWLINE28=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute637); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE28);


							}
							break;

						default:
							if (cnt9 >= 1)
								goto loop9;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee9 = new EarlyExitException( 9, input );
							DebugRecognitionException(eee9);
							throw eee9;
						}
						cnt9++;
					}
					loop9:
						;

					} finally { DebugExitSubRule(9); }


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 196:61: -> ( attribute_item )+
			{
				DebugLocation(196, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(196, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
			if (state.backtracking > 0) { Memoize(input, 6, attribute_StartIndex); }

		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:199:1: global_alloc : ( ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )? | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) );
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_alloc_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken string_literal41 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute29 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name32 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident40 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr42 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree string_literal34_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree string_literal41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(199, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// SugarCpp.g:200:2: ( ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )? | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			try
			{
				alt15 = dfa15.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:200:4: ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )?
				{
				DebugLocation(200, 4);
				// SugarCpp.g:200:4: ( attribute )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==103))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:200:4: attribute
					{
					DebugLocation(200, 4);
					PushFollow(Follow._attribute_in_global_alloc656);
					attribute29=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute.Add(attribute29.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(200, 15);
				PushFollow(Follow._ident_list_in_global_alloc659);
				ident_list30=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list30.Tree);
				DebugLocation(200, 26);
				char_literal31=(IToken)Match(input,88,Follow._88_in_global_alloc661); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal31);

				DebugLocation(200, 30);
				PushFollow(Follow._type_name_in_global_alloc663);
				type_name32=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name32.Tree);
				DebugLocation(200, 40);
				// SugarCpp.g:200:40: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )?
				int alt13=4;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case 90:
				case 96:
					{
					alt13 = 1;
					}
					break;
				case 71:
					{
					alt13 = 2;
					}
					break;
				case NEWLINE:
					{
					int LA13_3 = input.LA(2);

					if ((EvaluatePredicate(synpred22_SugarCpp_fragment)))
					{
						alt13 = 3;
					}
					}
					break;
				case EOF:
					{
					int LA13_4 = input.LA(2);

					if ((EvaluatePredicate(synpred22_SugarCpp_fragment)))
					{
						alt13 = 3;
					}
					}
					break;
				}

				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:200:42: ( '=' | ':=' ) expr
					{
					DebugLocation(200, 42);
					// SugarCpp.g:200:42: ( '=' | ':=' )
					int alt12=2;
					try { DebugEnterSubRule(12);
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0==96))
					{
						alt12 = 1;
					}
					else if ((LA12_0==90))
					{
						alt12 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:200:43: '='
						{
						DebugLocation(200, 43);
						char_literal33=(IToken)Match(input,96,Follow._96_in_global_alloc668); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_96.Add(char_literal33);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:200:49: ':='
						{
						DebugLocation(200, 49);
						string_literal34=(IToken)Match(input,90,Follow._90_in_global_alloc672); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_90.Add(string_literal34);


						}
						break;

					}
					} finally { DebugExitSubRule(12); }

					DebugLocation(200, 55);
					PushFollow(Follow._expr_in_global_alloc675);
					expr35=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr35.Tree);


					{
					// AST REWRITE
					// elements: attribute, expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 200:60: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(200, 63);
						// SugarCpp.g:200:63: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(200, 65);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(200, 82);
						// SugarCpp.g:200:82: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(200, 82);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(200, 93);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(200, 103);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(200, 114);
						// SugarCpp.g:200:114: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(200, 114);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:201:42: '(' expr ')'
					{
					DebugLocation(201, 42);
					char_literal36=(IToken)Match(input,71,Follow._71_in_global_alloc734); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(char_literal36);

					DebugLocation(201, 46);
					PushFollow(Follow._expr_in_global_alloc736);
					expr37=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr37.Tree);
					DebugLocation(201, 51);
					char_literal38=(IToken)Match(input,72,Follow._72_in_global_alloc738); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(char_literal38);



					{
					// AST REWRITE
					// elements: attribute, type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 201:55: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(201, 58);
						// SugarCpp.g:201:58: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(201, 60);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(201, 79);
						// SugarCpp.g:201:79: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(201, 79);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(201, 90);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(201, 100);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(201, 111);
						// SugarCpp.g:201:111: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(201, 111);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:202:16: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 202:16: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(202, 19);
						// SugarCpp.g:202:19: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(202, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(202, 38);
						// SugarCpp.g:202:38: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(202, 38);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(202, 49);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(202, 59);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:203:4: ( attribute )? ident ':=' modify_expr
				{
				DebugLocation(203, 4);
				// SugarCpp.g:203:4: ( attribute )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==103))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:203:4: attribute
					{
					DebugLocation(203, 4);
					PushFollow(Follow._attribute_in_global_alloc789);
					attribute39=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute.Add(attribute39.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(203, 15);
				PushFollow(Follow._ident_in_global_alloc792);
				ident40=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident40.Tree);
				DebugLocation(203, 21);
				string_literal41=(IToken)Match(input,90,Follow._90_in_global_alloc794); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(string_literal41);

				DebugLocation(203, 26);
				PushFollow(Follow._modify_expr_in_global_alloc796);
				modify_expr42=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(modify_expr42.Tree);


				{
				// AST REWRITE
				// elements: attribute, ident, 90, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 203:38: -> ^( ':=' ( attribute )? ident modify_expr )
				{
					DebugLocation(203, 41);
					// SugarCpp.g:203:41: ^( ':=' ( attribute )? ident modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(203, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_90.NextNode(), root_1);

					DebugLocation(203, 48);
					// SugarCpp.g:203:48: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(203, 48);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(203, 59);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(203, 65);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
			if (state.backtracking > 0) { Memoize(input, 7, global_alloc_StartIndex); }

		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:206:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_using_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using43 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(206, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// SugarCpp.g:207:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:207:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(207, 4);
			PushFollow(Follow._stmt_using_in_global_using820);
			stmt_using43=stmt_using();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using43.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
			if (state.backtracking > 0) { Memoize(input, 8, global_using_StartIndex); }

		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:210:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_typedef_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef44 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(210, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// SugarCpp.g:211:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:211:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(211, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef831);
			stmt_typedef44=stmt_typedef();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef44.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
			if (state.backtracking > 0) { Memoize(input, 9, global_typedef_StartIndex); }

		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:214:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int import_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal45 = default(IToken);
		IToken STRING46 = default(IToken);
		IToken NEWLINE47 = default(IToken);
		IToken INDENT48 = default(IToken);
		IToken NEWLINE49 = default(IToken);
		IToken STRING50 = default(IToken);
		IToken NEWLINE51 = default(IToken);
		IToken DEDENT52 = default(IToken);

		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree STRING46_tree = default(CommonTree);
		CommonTree NEWLINE47_tree = default(CommonTree);
		CommonTree INDENT48_tree = default(CommonTree);
		CommonTree NEWLINE49_tree = default(CommonTree);
		CommonTree STRING50_tree = default(CommonTree);
		CommonTree NEWLINE51_tree = default(CommonTree);
		CommonTree DEDENT52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(214, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// SugarCpp.g:215:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:215:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(215, 4);
			string_literal45=(IToken)Match(input,117,Follow._117_in_import_def842); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_117.Add(string_literal45);

			DebugLocation(215, 13);
			// SugarCpp.g:215:13: ( STRING )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==STRING))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:13: STRING
				{
				DebugLocation(215, 13);
				STRING46=(IToken)Match(input,STRING,Follow._STRING_in_import_def844); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING46);


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(215, 21);
			// SugarCpp.g:215:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			try
			{
				alt21 = dfa21.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(215, 22);
				// SugarCpp.g:215:22: ( NEWLINE )+
				int cnt17=0;
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==NEWLINE))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:215:22: NEWLINE
						{
						DebugLocation(215, 22);
						NEWLINE47=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def848); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE47);


						}
						break;

					default:
						if (cnt17 >= 1)
							goto loop17;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee17 = new EarlyExitException( 17, input );
						DebugRecognitionException(eee17);
						throw eee17;
					}
					cnt17++;
				}
				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(215, 31);
				INDENT48=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def851); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT48);

				DebugLocation(215, 38);
				// SugarCpp.g:215:38: ( NEWLINE )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==NEWLINE))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:215:38: NEWLINE
						{
						DebugLocation(215, 38);
						NEWLINE49=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def853); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE49);


						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(215, 48);
				// SugarCpp.g:215:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if ((LA20_0==STRING))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:215:49: STRING ( NEWLINE )+
						{
						DebugLocation(215, 49);
						STRING50=(IToken)Match(input,STRING,Follow._STRING_in_import_def858); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING50);

						DebugLocation(215, 56);
						// SugarCpp.g:215:56: ( NEWLINE )+
						int cnt19=0;
						try { DebugEnterSubRule(19);
						while (true)
						{
							int alt19=2;
							try { DebugEnterDecision(19, false);
							int LA19_0 = input.LA(1);

							if ((LA19_0==NEWLINE))
							{
								alt19 = 1;
							}


							} finally { DebugExitDecision(19); }
							switch (alt19)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:215:56: NEWLINE
								{
								DebugLocation(215, 56);
								NEWLINE51=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def860); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE51);


								}
								break;

							default:
								if (cnt19 >= 1)
									goto loop19;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee19 = new EarlyExitException( 19, input );
								DebugRecognitionException(eee19);
								throw eee19;
							}
							cnt19++;
						}
						loop19:
							;

						} finally { DebugExitSubRule(19); }


						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }

				DebugLocation(215, 67);
				DEDENT52=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def865); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT52);


				}
				break;

			}
			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 215:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(215, 79);
				// SugarCpp.g:215:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(215, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(215, 88);
				// SugarCpp.g:215:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(215, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
			if (state.backtracking > 0) { Memoize(input, 10, import_def_StartIndex); }

		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:218:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enum_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken char_literal58 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident55 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident59 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(218, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// SugarCpp.g:219:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(219, 4);
			// SugarCpp.g:219:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==103))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:219:4: attribute
				{
				DebugLocation(219, 4);
				PushFollow(Follow._attribute_in_enum_def887);
				attribute53=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute53.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(219, 15);
			string_literal54=(IToken)Match(input,113,Follow._113_in_enum_def890); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_113.Add(string_literal54);

			DebugLocation(219, 22);
			PushFollow(Follow._ident_in_enum_def892);
			ident55=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident55.Tree);
			DebugLocation(219, 28);
			char_literal56=(IToken)Match(input,96,Follow._96_in_enum_def894); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_96.Add(char_literal56);

			DebugLocation(219, 32);
			// SugarCpp.g:219:32: ( ident ( '|' ident )* )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==IDENT))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:219:33: ident ( '|' ident )*
				{
				DebugLocation(219, 33);
				PushFollow(Follow._ident_in_enum_def897);
				ident57=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident57.Tree);
				DebugLocation(219, 39);
				// SugarCpp.g:219:39: ( '|' ident )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==130))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:219:40: '|' ident
						{
						DebugLocation(219, 40);
						char_literal58=(IToken)Match(input,130,Follow._130_in_enum_def900); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_130.Add(char_literal58);

						DebugLocation(219, 44);
						PushFollow(Follow._ident_in_enum_def902);
						ident59=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident59.Tree);

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }


				}
				break;

			}
			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: ident, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 219:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(219, 57);
				// SugarCpp.g:219:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(219, 64);
				// SugarCpp.g:219:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(219, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(219, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(219, 81);
				// SugarCpp.g:219:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(219, 94);
				// SugarCpp.g:219:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(219, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
			if (state.backtracking > 0) { Memoize(input, 11, enum_def_StartIndex); }

		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:222:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int namespace_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal60 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken INDENT63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT66 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree INDENT63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(222, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// SugarCpp.g:223:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:223:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(223, 4);
			string_literal60=(IToken)Match(input,121,Follow._121_in_namespace_def935); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(string_literal60);

			DebugLocation(223, 16);
			PushFollow(Follow._ident_in_namespace_def937);
			ident61=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident61.Tree);
			DebugLocation(223, 22);
			// SugarCpp.g:223:22: ( NEWLINE )+
			int cnt25=0;
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==NEWLINE))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:223:22: NEWLINE
					{
					DebugLocation(223, 22);
					NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def939); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE62);


					}
					break;

				default:
					if (cnt25 >= 1)
						goto loop25;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee25 = new EarlyExitException( 25, input );
					DebugRecognitionException(eee25);
					throw eee25;
				}
				cnt25++;
			}
			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(223, 31);
			INDENT63=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def942); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT63);

			DebugLocation(223, 38);
			// SugarCpp.g:223:38: ( NEWLINE )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==NEWLINE))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:223:38: NEWLINE
					{
					DebugLocation(223, 38);
					NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def944); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE64);


					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(223, 47);
			PushFollow(Follow._global_block_in_namespace_def947);
			global_block65=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block65.Tree);
			DebugLocation(223, 60);
			DEDENT66=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def949); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT66);



			{
			// AST REWRITE
			// elements: global_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 223:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(223, 70);
				// SugarCpp.g:223:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(223, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(223, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(223, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
			if (state.backtracking > 0) { Memoize(input, 12, namespace_def_StartIndex); }

		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:226:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal68 = default(IToken);
		IToken char_literal71 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken char_literal74 = default(IToken);
		IToken char_literal76 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken INDENT79 = default(IToken);
		IToken NEWLINE80 = default(IToken);
		IToken DEDENT82 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident77 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block81 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal68_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		CommonTree char_literal73_tree = default(CommonTree);
		CommonTree char_literal74_tree = default(CommonTree);
		CommonTree char_literal76_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree INDENT79_tree = default(CommonTree);
		CommonTree NEWLINE80_tree = default(CommonTree);
		CommonTree DEDENT82_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(226, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// SugarCpp.g:227:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:227:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(227, 5);
			// SugarCpp.g:227:5: ( attribute )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==103))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:5: attribute
				{
				DebugLocation(227, 5);
				PushFollow(Follow._attribute_in_class_def971);
				attribute67=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute67.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(227, 16);
			string_literal68=(IToken)Match(input,110,Follow._110_in_class_def974); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_110.Add(string_literal68);

			DebugLocation(227, 24);
			PushFollow(Follow._ident_in_class_def976);
			ident69=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident69.Tree);
			DebugLocation(227, 30);
			// SugarCpp.g:227:30: ( generic_parameter )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==92))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:31: generic_parameter
				{
				DebugLocation(227, 31);
				PushFollow(Follow._generic_parameter_in_class_def979);
				generic_parameter70=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter70.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(227, 51);
			// SugarCpp.g:227:51: ( '(' func_args ')' )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==71))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:52: '(' func_args ')'
				{
				DebugLocation(227, 52);
				char_literal71=(IToken)Match(input,71,Follow._71_in_class_def984); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_71.Add(char_literal71);

				DebugLocation(227, 56);
				PushFollow(Follow._func_args_in_class_def986);
				func_args72=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args72.Tree);
				DebugLocation(227, 66);
				char_literal73=(IToken)Match(input,72,Follow._72_in_class_def988); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_72.Add(char_literal73);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(227, 72);
			// SugarCpp.g:227:72: ( ':' ident ( ',' ident )* )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==88))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:73: ':' ident ( ',' ident )*
				{
				DebugLocation(227, 73);
				char_literal74=(IToken)Match(input,88,Follow._88_in_class_def993); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal74);

				DebugLocation(227, 77);
				PushFollow(Follow._ident_in_class_def995);
				ident75=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident75.Tree);
				DebugLocation(227, 83);
				// SugarCpp.g:227:83: ( ',' ident )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if ((LA30_0==78))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:227:84: ',' ident
						{
						DebugLocation(227, 84);
						char_literal76=(IToken)Match(input,78,Follow._78_in_class_def998); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_78.Add(char_literal76);

						DebugLocation(227, 88);
						PushFollow(Follow._ident_in_class_def1000);
						ident77=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident77.Tree);

						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }


				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(227, 98);
			// SugarCpp.g:227:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			try
			{
				alt34 = dfa34.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(227, 99);
				// SugarCpp.g:227:99: ( NEWLINE )+
				int cnt32=0;
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if ((LA32_0==NEWLINE))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:227:99: NEWLINE
						{
						DebugLocation(227, 99);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1007); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						if (cnt32 >= 1)
							goto loop32;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee32 = new EarlyExitException( 32, input );
						DebugRecognitionException(eee32);
						throw eee32;
					}
					cnt32++;
				}
				loop32:
					;

				} finally { DebugExitSubRule(32); }

				DebugLocation(227, 108);
				INDENT79=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1010); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT79);

				DebugLocation(227, 115);
				// SugarCpp.g:227:115: ( NEWLINE )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==NEWLINE))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:227:115: NEWLINE
						{
						DebugLocation(227, 115);
						NEWLINE80=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1012); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE80);


						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(227, 124);
				PushFollow(Follow._global_block_in_class_def1015);
				global_block81=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block81.Tree);
				DebugLocation(227, 137);
				DEDENT82=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1017); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT82);


				}
				break;

			}
			} finally { DebugExitSubRule(34); }



			{
			// AST REWRITE
			// elements: ident, attribute, generic_parameter, ident, func_args, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 227:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(227, 149);
				// SugarCpp.g:227:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(227, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(227, 157);
				// SugarCpp.g:227:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(227, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(227, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(227, 174);
				// SugarCpp.g:227:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(227, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(227, 193);
				// SugarCpp.g:227:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(227, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(227, 204);
				// SugarCpp.g:227:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(227, 205);
					// SugarCpp.g:227:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(227, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(227, 218);
					// SugarCpp.g:227:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(227, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(227, 228);
				// SugarCpp.g:227:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(227, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
			if (state.backtracking > 0) { Memoize(input, 13, class_def_StartIndex); }

		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:230:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal83 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal86 = default(IToken);

		CommonTree char_literal83_tree = default(CommonTree);
		CommonTree char_literal84_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal86_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(230, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// SugarCpp.g:230:13: ( '*' | '[' ']' | '&' )
			int alt35=3;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case 73:
				{
				alt35 = 1;
				}
				break;
			case 103:
				{
				alt35 = 2;
				}
				break;
			case 69:
				{
				alt35 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:230:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 15);
				char_literal83=(IToken)Match(input,73,Follow._73_in_type_name_op1058); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal83_tree = (CommonTree)adaptor.Create(char_literal83);
				adaptor.AddChild(root_0, char_literal83_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:230:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 21);
				char_literal84=(IToken)Match(input,103,Follow._103_in_type_name_op1062); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal84_tree = (CommonTree)adaptor.Create(char_literal84);
				adaptor.AddChild(root_0, char_literal84_tree);
				}
				DebugLocation(230, 25);
				char_literal85=(IToken)Match(input,105,Follow._105_in_type_name_op1064); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal85_tree = (CommonTree)adaptor.Create(char_literal85);
				adaptor.AddChild(root_0, char_literal85_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:230:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 31);
				char_literal86=(IToken)Match(input,69,Follow._69_in_type_name_op1068); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal86_tree = (CommonTree)adaptor.Create(char_literal86);
				adaptor.AddChild(root_0, char_literal86_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
			if (state.backtracking > 0) { Memoize(input, 14, type_name_op_StartIndex); }

		}
		DebugLocation(230, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:231:1: type_name : ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal92 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op93 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(231, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// SugarCpp.g:232:2: ( ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:232:4: ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(232, 4);
			PushFollow(Follow._ident_in_type_name1077);
			ident87=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident87.Tree);
			DebugLocation(232, 10);
			// SugarCpp.g:232:10: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==92))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:11: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(232, 11);
				char_literal88=(IToken)Match(input,92,Follow._92_in_type_name1080); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal88);

				DebugLocation(232, 15);
				// SugarCpp.g:232:15: ( type_name ( ',' type_name )* )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==IDENT))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:16: type_name ( ',' type_name )*
					{
					DebugLocation(232, 16);
					PushFollow(Follow._type_name_in_type_name1083);
					type_name89=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name89.Tree);
					DebugLocation(232, 26);
					// SugarCpp.g:232:26: ( ',' type_name )*
					try { DebugEnterSubRule(36);
					while (true)
					{
						int alt36=2;
						try { DebugEnterDecision(36, false);
						int LA36_0 = input.LA(1);

						if ((LA36_0==78))
						{
							alt36 = 1;
						}


						} finally { DebugExitDecision(36); }
						switch ( alt36 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:232:27: ',' type_name
							{
							DebugLocation(232, 27);
							char_literal90=(IToken)Match(input,78,Follow._78_in_type_name1086); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_78.Add(char_literal90);

							DebugLocation(232, 31);
							PushFollow(Follow._type_name_in_type_name1088);
							type_name91=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name91.Tree);

							}
							break;

						default:
							goto loop36;
						}
					}

					loop36:
						;

					} finally { DebugExitSubRule(36); }


					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(232, 45);
				char_literal92=(IToken)Match(input,99,Follow._99_in_type_name1094); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_99.Add(char_literal92);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(232, 51);
			// SugarCpp.g:232:51: ( type_name_op )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==103))
				{
					int LA39_2 = input.LA(2);

					if ((LA39_2==105))
					{
						alt39 = 1;
					}


				}
				else if ((LA39_0==69||LA39_0==73))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:51: type_name_op
					{
					DebugLocation(232, 51);
					PushFollow(Follow._type_name_op_in_type_name1098);
					type_name_op93=type_name_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name_op.Add(type_name_op93.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: ident, type_name, 99, type_name_op, 92
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 232:65: -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(232, 68);
				// SugarCpp.g:232:68: ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(232, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(232, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(232, 87);
				// SugarCpp.g:232:87: ( '<' ( type_name )* '>' )?
				if (stream_type_name.HasNext||stream_99.HasNext||stream_92.HasNext)
				{
					DebugLocation(232, 88);
					adaptor.AddChild(root_1, stream_92.NextNode());
					DebugLocation(232, 92);
					// SugarCpp.g:232:92: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(232, 92);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(232, 103);
					adaptor.AddChild(root_1, stream_99.NextNode());

				}
				stream_type_name.Reset();
				stream_99.Reset();
				stream_92.Reset();
				DebugLocation(232, 110);
				// SugarCpp.g:232:110: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(232, 110);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 15, type_name_StartIndex); }

		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:235:1: generic_parameter : '<' ident ( ',' ident )* '>' -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 16);
		TraceIn("generic_parameter", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int generic_parameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident97 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal94_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(235, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// SugarCpp.g:236:2: ( '<' ident ( ',' ident )* '>' -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:236:4: '<' ident ( ',' ident )* '>'
			{
			DebugLocation(236, 4);
			char_literal94=(IToken)Match(input,92,Follow._92_in_generic_parameter1132); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal94);

			DebugLocation(236, 8);
			PushFollow(Follow._ident_in_generic_parameter1134);
			ident95=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident95.Tree);
			DebugLocation(236, 14);
			// SugarCpp.g:236:14: ( ',' ident )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==78))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:236:15: ',' ident
					{
					DebugLocation(236, 15);
					char_literal96=(IToken)Match(input,78,Follow._78_in_generic_parameter1137); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_78.Add(char_literal96);

					DebugLocation(236, 19);
					PushFollow(Follow._ident_in_generic_parameter1139);
					ident97=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident97.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }

			DebugLocation(236, 27);
			char_literal98=(IToken)Match(input,99,Follow._99_in_generic_parameter1143); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_99.Add(char_literal98);



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 236:31: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(236, 34);
				// SugarCpp.g:236:34: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(236, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(236, 55);
				// SugarCpp.g:236:55: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(236, 55);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 16);
			LeaveRule("generic_parameter", 16);
			LeaveRule_generic_parameter();
			if (state.backtracking > 0) { Memoize(input, 16, generic_parameter_StartIndex); }

		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:239:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 17);
		TraceIn("func_args", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(239, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// SugarCpp.g:240:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:240:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(240, 4);
			PushFollow(Follow._stmt_alloc_in_func_args1163);
			stmt_alloc99=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc99.Tree);
			DebugLocation(240, 15);
			// SugarCpp.g:240:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==78))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:16: ',' stmt_alloc
					{
					DebugLocation(240, 16);
					char_literal100=(IToken)Match(input,78,Follow._78_in_func_args1166); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_78.Add(char_literal100);

					DebugLocation(240, 20);
					PushFollow(Follow._stmt_alloc_in_func_args1168);
					stmt_alloc101=stmt_alloc();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc101.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(240, 36);
				// SugarCpp.g:240:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(240, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(240, 48);
				// SugarCpp.g:240:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(240, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 17);
			LeaveRule("func_args", 17);
			LeaveRule_func_args();
			if (state.backtracking > 0) { Memoize(input, 17, func_args_StartIndex); }

		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:243:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 18);
		TraceIn("func_def", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal104 = default(IToken);
		IToken char_literal107 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken NEWLINE110 = default(IToken);
		IToken char_literal112 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident105 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr113 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal104_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree NEWLINE110_tree = default(CommonTree);
		CommonTree char_literal112_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(243, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// SugarCpp.g:244:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(244, 4);
			// SugarCpp.g:244:4: ( attribute )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==103))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:4: attribute
				{
				DebugLocation(244, 4);
				PushFollow(Follow._attribute_in_func_def1190);
				attribute102=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute102.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(244, 15);
			// SugarCpp.g:244:15: ( type_name )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			try
			{
				alt43 = dfa43.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:15: type_name
				{
				DebugLocation(244, 15);
				PushFollow(Follow._type_name_in_func_def1193);
				type_name103=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name103.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(244, 26);
			// SugarCpp.g:244:26: ( '~' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==133))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:26: '~'
				{
				DebugLocation(244, 26);
				char_literal104=(IToken)Match(input,133,Follow._133_in_func_def1196); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_133.Add(char_literal104);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(244, 31);
			PushFollow(Follow._ident_in_func_def1199);
			ident105=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident105.Tree);
			DebugLocation(244, 37);
			// SugarCpp.g:244:37: ( generic_parameter )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==92))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:37: generic_parameter
				{
				DebugLocation(244, 37);
				PushFollow(Follow._generic_parameter_in_func_def1201);
				generic_parameter106=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter106.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(244, 56);
			char_literal107=(IToken)Match(input,71,Follow._71_in_func_def1204); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_71.Add(char_literal107);

			DebugLocation(244, 60);
			// SugarCpp.g:244:60: ( func_args )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==IDENT))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:60: func_args
				{
				DebugLocation(244, 60);
				PushFollow(Follow._func_args_in_func_def1206);
				func_args108=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args108.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(244, 71);
			char_literal109=(IToken)Match(input,72,Follow._72_in_func_def1209); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_72.Add(char_literal109);

			DebugLocation(244, 75);
			// SugarCpp.g:244:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==NEWLINE))
			{
				alt48 = 1;
			}
			else if ((LA48_0==96))
			{
				alt48 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(244, 76);
				// SugarCpp.g:244:76: ( NEWLINE )+
				int cnt47=0;
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==NEWLINE))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:244:76: NEWLINE
						{
						DebugLocation(244, 76);
						NEWLINE110=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1212); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE110);


						}
						break;

					default:
						if (cnt47 >= 1)
							goto loop47;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee47 = new EarlyExitException( 47, input );
						DebugRecognitionException(eee47);
						throw eee47;
					}
					cnt47++;
				}
				loop47:
					;

				} finally { DebugExitSubRule(47); }

				DebugLocation(244, 85);
				PushFollow(Follow._stmt_block_in_func_def1215);
				stmt_block111=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block111.Tree);


				{
				// AST REWRITE
				// elements: 133, func_args, ident, type_name, attribute, generic_parameter, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 244:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(244, 99);
					// SugarCpp.g:244:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(244, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(244, 110);
					// SugarCpp.g:244:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(244, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(244, 121);
					// SugarCpp.g:244:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(244, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(244, 132);
					// SugarCpp.g:244:132: ( '~' )?
					if (stream_133.HasNext)
					{
						DebugLocation(244, 132);
						adaptor.AddChild(root_1, stream_133.NextNode());

					}
					stream_133.Reset();
					DebugLocation(244, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(244, 143);
					// SugarCpp.g:244:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(244, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(244, 162);
					// SugarCpp.g:244:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(244, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(244, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:245:23: '=' expr
				{
				DebugLocation(245, 23);
				char_literal112=(IToken)Match(input,96,Follow._96_in_func_def1264); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_96.Add(char_literal112);

				DebugLocation(245, 27);
				PushFollow(Follow._expr_in_func_def1266);
				expr113=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr113.Tree);


				{
				// AST REWRITE
				// elements: expr, 133, type_name, attribute, generic_parameter, func_args, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 245:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(245, 36);
					// SugarCpp.g:245:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(245, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(245, 47);
					// SugarCpp.g:245:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(245, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(245, 58);
					// SugarCpp.g:245:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(245, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(245, 69);
					// SugarCpp.g:245:69: ( '~' )?
					if (stream_133.HasNext)
					{
						DebugLocation(245, 69);
						adaptor.AddChild(root_1, stream_133.NextNode());

					}
					stream_133.Reset();
					DebugLocation(245, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(245, 80);
					// SugarCpp.g:245:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(245, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(245, 99);
					// SugarCpp.g:245:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(245, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(245, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 18);
			LeaveRule("func_def", 18);
			LeaveRule_func_def();
			if (state.backtracking > 0) { Memoize(input, 18, func_def_StartIndex); }

		}
		DebugLocation(246, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:248:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 19);
		TraceIn("stmt_block", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INDENT114 = default(IToken);
		IToken NEWLINE115 = default(IToken);
		IToken NEWLINE117 = default(IToken);
		IToken DEDENT118 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt116 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT114_tree = default(CommonTree);
		CommonTree NEWLINE115_tree = default(CommonTree);
		CommonTree NEWLINE117_tree = default(CommonTree);
		CommonTree DEDENT118_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(248, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// SugarCpp.g:249:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:249:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(249, 4);
			INDENT114=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1307); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT114);

			DebugLocation(249, 11);
			// SugarCpp.g:249:11: ( NEWLINE )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==NEWLINE))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:249:11: NEWLINE
					{
					DebugLocation(249, 11);
					NEWLINE115=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1309); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE115);


					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }

			DebugLocation(249, 21);
			// SugarCpp.g:249:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==IDENT||LA51_0==71||LA51_0==111||LA51_0==114||LA51_0==116||(LA51_0>=119 && LA51_0<=120)||(LA51_0>=123 && LA51_0<=129)))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:249:22: stmt ( NEWLINE )+
					{
					DebugLocation(249, 22);
					PushFollow(Follow._stmt_in_stmt_block1314);
					stmt116=stmt();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt.Add(stmt116.Tree);
					DebugLocation(249, 27);
					// SugarCpp.g:249:27: ( NEWLINE )+
					int cnt50=0;
					try { DebugEnterSubRule(50);
					while (true)
					{
						int alt50=2;
						try { DebugEnterDecision(50, false);
						int LA50_0 = input.LA(1);

						if ((LA50_0==NEWLINE))
						{
							alt50 = 1;
						}


						} finally { DebugExitDecision(50); }
						switch (alt50)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:249:27: NEWLINE
							{
							DebugLocation(249, 27);
							NEWLINE117=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1316); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE117);


							}
							break;

						default:
							if (cnt50 >= 1)
								goto loop50;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee50 = new EarlyExitException( 50, input );
							DebugRecognitionException(eee50);
							throw eee50;
						}
						cnt50++;
					}
					loop50:
						;

					} finally { DebugExitSubRule(50); }


					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(249, 38);
			DEDENT118=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1321); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT118);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 249:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(249, 48);
				// SugarCpp.g:249:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(249, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(249, 61);
				// SugarCpp.g:249:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(249, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 19);
			LeaveRule("stmt_block", 19);
			LeaveRule_stmt_block();
			if (state.backtracking > 0) { Memoize(input, 19, stmt_block_StartIndex); }

		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:252:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 20);
		TraceIn("stmt", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_linq124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer125 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(252, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// SugarCpp.g:253:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer )
			int alt52=7;
			try { DebugEnterDecision(52, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 71:
			case 123:
			case 126:
			case 127:
				{
				alt52 = 1;
				}
				break;
			case 116:
				{
				alt52 = 2;
				}
				break;
			case 114:
				{
				alt52 = 3;
				}
				break;
			case 120:
			case 129:
				{
				alt52 = 4;
				}
				break;
			case 125:
				{
				alt52 = 5;
				}
				break;
			case 119:
			case 124:
			case 128:
				{
				alt52 = 6;
				}
				break;
			case 111:
				{
				alt52 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:253:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(253, 4);
				PushFollow(Follow._stmt_expr_in_stmt1341);
				stmt_expr119=stmt_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr119.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:254:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(254, 4);
				PushFollow(Follow._stmt_if_in_stmt1346);
				stmt_if120=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if120.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:255:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(255, 4);
				PushFollow(Follow._stmt_for_in_stmt1351);
				stmt_for121=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for121.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:256:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(256, 4);
				PushFollow(Follow._stmt_while_in_stmt1356);
				stmt_while122=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while122.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:257:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(257, 4);
				PushFollow(Follow._stmt_try_in_stmt1361);
				stmt_try123=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try123.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:258:4: stmt_linq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(258, 4);
				PushFollow(Follow._stmt_linq_in_stmt1366);
				stmt_linq124=stmt_linq();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_linq124.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:259:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(259, 4);
				PushFollow(Follow._stmt_defer_in_stmt1371);
				stmt_defer125=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer125.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 20);
			LeaveRule("stmt", 20);
			LeaveRule_stmt();
			if (state.backtracking > 0) { Memoize(input, 20, stmt_StartIndex); }

		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:262:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 21);
		TraceIn("stmt_expr", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify130 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(262, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// SugarCpp.g:263:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt53=5;
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(263, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr1382);
				stmt_alloc126=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc126.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:264:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(264, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr1387);
				stmt_return127=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return127.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:265:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(265, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr1392);
				stmt_using128=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using128.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:266:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(266, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1397);
				stmt_typedef129=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef129.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:267:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(267, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr1402);
				stmt_modify130=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify130.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 21);
			LeaveRule("stmt_expr", 21);
			LeaveRule_stmt_expr();
			if (state.backtracking > 0) { Memoize(input, 21, stmt_expr_StartIndex); }

		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:270:1: stmt_defer : 'defer' stmt -> ^( Stmt_Defer stmt ) ;
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 22);
		TraceIn("stmt_defer", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_defer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(270, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// SugarCpp.g:271:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) )
			DebugEnterAlt(1);
			// SugarCpp.g:271:4: 'defer' stmt
			{
			DebugLocation(271, 4);
			string_literal131=(IToken)Match(input,111,Follow._111_in_stmt_defer1413); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_111.Add(string_literal131);

			DebugLocation(271, 12);
			PushFollow(Follow._stmt_in_stmt_defer1415);
			stmt132=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt.Add(stmt132.Tree);


			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 271:17: -> ^( Stmt_Defer stmt )
			{
				DebugLocation(271, 20);
				// SugarCpp.g:271:20: ^( Stmt_Defer stmt )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(271, 22);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

				DebugLocation(271, 33);
				adaptor.AddChild(root_1, stream_stmt.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 22);
			LeaveRule("stmt_defer", 22);
			LeaveRule_stmt_defer();
			if (state.backtracking > 0) { Memoize(input, 22, stmt_defer_StartIndex); }

		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:274:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 23);
		TraceIn("stmt_typedef", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_typedef_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal133 = default(IToken);
		IToken char_literal135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident134 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal133_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(274, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// SugarCpp.g:275:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:275:4: 'typedef' ident '=' type_name
			{
			DebugLocation(275, 4);
			string_literal133=(IToken)Match(input,126,Follow._126_in_stmt_typedef1434); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_126.Add(string_literal133);

			DebugLocation(275, 14);
			PushFollow(Follow._ident_in_stmt_typedef1436);
			ident134=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident134.Tree);
			DebugLocation(275, 20);
			char_literal135=(IToken)Match(input,96,Follow._96_in_stmt_typedef1438); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_96.Add(char_literal135);

			DebugLocation(275, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1440);
			type_name136=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name136.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 275:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(275, 37);
				// SugarCpp.g:275:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(275, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(275, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(275, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 23);
			LeaveRule("stmt_typedef", 23);
			LeaveRule_stmt_typedef();
			if (state.backtracking > 0) { Memoize(input, 23, stmt_typedef_StartIndex); }

		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:278:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 24);
		TraceIn("stmt_using_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident137 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal138_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(278, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// SugarCpp.g:278:16: ( ident | 'namespace' )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==IDENT))
			{
				alt54 = 1;
			}
			else if ((LA54_0==121))
			{
				alt54 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:278:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(278, 18);
				PushFollow(Follow._ident_in_stmt_using_item1459);
				ident137=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident137.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:278:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(278, 26);
				string_literal138=(IToken)Match(input,121,Follow._121_in_stmt_using_item1463); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal138_tree = (CommonTree)adaptor.Create(string_literal138);
				adaptor.AddChild(root_0, string_literal138_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 24);
			LeaveRule("stmt_using_item", 24);
			LeaveRule_stmt_using_item();
			if (state.backtracking > 0) { Memoize(input, 24, stmt_using_item_StartIndex); }

		}
		DebugLocation(278, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:279:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 25);
		TraceIn("stmt_using", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal139 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal139_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(279, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// SugarCpp.g:280:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:280:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(280, 4);
			string_literal139=(IToken)Match(input,127,Follow._127_in_stmt_using1471); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_127.Add(string_literal139);

			DebugLocation(280, 12);
			// SugarCpp.g:280:12: ( stmt_using_item )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==IDENT||LA55_0==121))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:12: stmt_using_item
					{
					DebugLocation(280, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1473);
					stmt_using_item140=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item140.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 280:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(280, 32);
				// SugarCpp.g:280:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(280, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(280, 45);
				// SugarCpp.g:280:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(280, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 25);
			LeaveRule("stmt_using", 25);
			LeaveRule_stmt_using();
			if (state.backtracking > 0) { Memoize(input, 25, stmt_using_StartIndex); }

		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:283:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 26);
		TraceIn("stmt_return", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_return_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal141 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(283, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// SugarCpp.g:284:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:284:4: 'return' ( expr )?
			{
			DebugLocation(284, 4);
			string_literal141=(IToken)Match(input,123,Follow._123_in_stmt_return1494); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(string_literal141);

			DebugLocation(284, 13);
			// SugarCpp.g:284:13: ( expr )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==NUMBER||LA56_0==STRING||LA56_0==64||LA56_0==69||LA56_0==71||LA56_0==73||(LA56_0>=75 && LA56_0<=76)||(LA56_0>=79 && LA56_0<=80)||LA56_0==104||LA56_0==122||LA56_0==133))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:284:13: expr
				{
				DebugLocation(284, 13);
				PushFollow(Follow._expr_in_stmt_return1496);
				expr142=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr142.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 284:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(284, 22);
				// SugarCpp.g:284:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(284, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(284, 36);
				// SugarCpp.g:284:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(284, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 26);
			LeaveRule("stmt_return", 26);
			LeaveRule_stmt_return();
			if (state.backtracking > 0) { Memoize(input, 26, stmt_return_StartIndex); }

		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:287:1: stmt_if : 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 27);
		TraceIn("stmt_if", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_if_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal143 = default(IToken);
		IToken char_literal144 = default(IToken);
		IToken char_literal146 = default(IToken);
		IToken string_literal148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal143_tree = default(CommonTree);
		CommonTree char_literal144_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		CommonTree string_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(287, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// SugarCpp.g:288:2: ( 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:288:4: 'if' '(' expr ')' stmt_block ( 'else' stmt_block )?
			{
			DebugLocation(288, 4);
			string_literal143=(IToken)Match(input,116,Follow._116_in_stmt_if1517); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_116.Add(string_literal143);

			DebugLocation(288, 9);
			char_literal144=(IToken)Match(input,71,Follow._71_in_stmt_if1519); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_71.Add(char_literal144);

			DebugLocation(288, 13);
			PushFollow(Follow._expr_in_stmt_if1521);
			expr145=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr145.Tree);
			DebugLocation(288, 18);
			char_literal146=(IToken)Match(input,72,Follow._72_in_stmt_if1523); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_72.Add(char_literal146);

			DebugLocation(288, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1525);
			stmt_block147=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block147.Tree);
			DebugLocation(288, 33);
			// SugarCpp.g:288:33: ( 'else' stmt_block )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==112))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:34: 'else' stmt_block
				{
				DebugLocation(288, 34);
				string_literal148=(IToken)Match(input,112,Follow._112_in_stmt_if1528); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(string_literal148);

				DebugLocation(288, 41);
				PushFollow(Follow._stmt_block_in_stmt_if1530);
				stmt_block149=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block149.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }



			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 288:54: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(288, 57);
				// SugarCpp.g:288:57: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(288, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(288, 67);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(288, 72);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(288, 83);
				// SugarCpp.g:288:83: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(288, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 27);
			LeaveRule("stmt_if", 27);
			LeaveRule_stmt_if();
			if (state.backtracking > 0) { Memoize(input, 27, stmt_if_StartIndex); }

		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:291:1: stmt_while : ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) | 'loop' stmt_block -> ^( Stmt_Loop stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 28);
		TraceIn("stmt_while", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_while_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal150 = default(IToken);
		IToken char_literal151 = default(IToken);
		IToken char_literal153 = default(IToken);
		IToken string_literal155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal150_tree = default(CommonTree);
		CommonTree char_literal151_tree = default(CommonTree);
		CommonTree char_literal153_tree = default(CommonTree);
		CommonTree string_literal155_tree = default(CommonTree);
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(291, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// SugarCpp.g:292:2: ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) | 'loop' stmt_block -> ^( Stmt_Loop stmt_block ) )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==129))
			{
				alt58 = 1;
			}
			else if ((LA58_0==120))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:292:4: 'while' '(' expr ')' stmt_block
				{
				DebugLocation(292, 4);
				string_literal150=(IToken)Match(input,129,Follow._129_in_stmt_while1556); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(string_literal150);

				DebugLocation(292, 12);
				char_literal151=(IToken)Match(input,71,Follow._71_in_stmt_while1558); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_71.Add(char_literal151);

				DebugLocation(292, 16);
				PushFollow(Follow._expr_in_stmt_while1560);
				expr152=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr152.Tree);
				DebugLocation(292, 21);
				char_literal153=(IToken)Match(input,72,Follow._72_in_stmt_while1562); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_72.Add(char_literal153);

				DebugLocation(292, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1564);
				stmt_block154=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block154.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:36: -> ^( Stmt_While expr stmt_block )
				{
					DebugLocation(292, 39);
					// SugarCpp.g:292:39: ^( Stmt_While expr stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

					DebugLocation(292, 52);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(292, 57);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:293:4: 'loop' stmt_block
				{
				DebugLocation(293, 4);
				string_literal155=(IToken)Match(input,120,Follow._120_in_stmt_while1579); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_120.Add(string_literal155);

				DebugLocation(293, 11);
				PushFollow(Follow._stmt_block_in_stmt_while1581);
				stmt_block156=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block156.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 293:22: -> ^( Stmt_Loop stmt_block )
				{
					DebugLocation(293, 25);
					// SugarCpp.g:293:25: ^( Stmt_Loop stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(293, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(293, 37);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 28);
			LeaveRule("stmt_while", 28);
			LeaveRule_stmt_while();
			if (state.backtracking > 0) { Memoize(input, 28, stmt_while_StartIndex); }

		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:296:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 29);
		TraceIn("stmt_for", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_for_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal157 = default(IToken);
		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		IToken char_literal162 = default(IToken);
		IToken string_literal164 = default(IToken);
		IToken char_literal166 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block167 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal157_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree char_literal160_tree = default(CommonTree);
		CommonTree char_literal162_tree = default(CommonTree);
		CommonTree string_literal164_tree = default(CommonTree);
		CommonTree char_literal166_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(296, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// SugarCpp.g:301:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:301:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(301, 4);
			string_literal157=(IToken)Match(input,114,Follow._114_in_stmt_for1605); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(string_literal157);

			DebugLocation(301, 10);
			char_literal158=(IToken)Match(input,71,Follow._71_in_stmt_for1607); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_71.Add(char_literal158);

			DebugLocation(301, 14);
			PushFollow(Follow._expr_in_stmt_for1609);
			expr159=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr159.Tree);
			DebugLocation(301, 19);
			// SugarCpp.g:301:19: ( ';' expr ';' expr | 'in' expr )
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==91))
			{
				alt59 = 1;
			}
			else if ((LA59_0==118))
			{
				alt59 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:301:20: ';' expr ';' expr
				{
				DebugLocation(301, 20);
				char_literal160=(IToken)Match(input,91,Follow._91_in_stmt_for1612); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal160);

				DebugLocation(301, 24);
				PushFollow(Follow._expr_in_stmt_for1614);
				expr161=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr161.Tree);
				DebugLocation(301, 29);
				char_literal162=(IToken)Match(input,91,Follow._91_in_stmt_for1616); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal162);

				DebugLocation(301, 33);
				PushFollow(Follow._expr_in_stmt_for1618);
				expr163=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr163.Tree);
				DebugLocation(301, 38);
				if (state.backtracking == 0)
				{
					type=0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:301:50: 'in' expr
				{
				DebugLocation(301, 50);
				string_literal164=(IToken)Match(input,118,Follow._118_in_stmt_for1624); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_118.Add(string_literal164);

				DebugLocation(301, 55);
				PushFollow(Follow._expr_in_stmt_for1626);
				expr165=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr165.Tree);
				DebugLocation(301, 60);
				if (state.backtracking == 0)
				{
					type=1;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(301, 71);
			char_literal166=(IToken)Match(input,72,Follow._72_in_stmt_for1631); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_72.Add(char_literal166);

			DebugLocation(301, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1633);
			stmt_block167=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block167.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, expr, expr, expr, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 302:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(302, 18);
				// SugarCpp.g:302:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(302, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(302, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(302, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(302, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(302, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 303:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(303, 7);
				// SugarCpp.g:303:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(303, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(303, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(303, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(303, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 29);
			LeaveRule("stmt_for", 29);
			LeaveRule_stmt_for();
			if (state.backtracking > 0) { Memoize(input, 29, stmt_for_StartIndex); }

		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:306:1: stmt_try : 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 30);
		TraceIn("stmt_try", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_try_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal168 = default(IToken);
		IToken string_literal170 = default(IToken);
		IToken char_literal171 = default(IToken);
		IToken char_literal173 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block174 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal168_tree = default(CommonTree);
		CommonTree string_literal170_tree = default(CommonTree);
		CommonTree char_literal171_tree = default(CommonTree);
		CommonTree char_literal173_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(306, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// SugarCpp.g:307:2: ( 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:307:4: 'try' stmt_block 'catch' '(' expr ')' stmt_block
			{
			DebugLocation(307, 4);
			string_literal168=(IToken)Match(input,125,Follow._125_in_stmt_try1678); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_125.Add(string_literal168);

			DebugLocation(307, 10);
			PushFollow(Follow._stmt_block_in_stmt_try1680);
			stmt_block169=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block169.Tree);
			DebugLocation(307, 21);
			string_literal170=(IToken)Match(input,109,Follow._109_in_stmt_try1682); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_109.Add(string_literal170);

			DebugLocation(307, 29);
			char_literal171=(IToken)Match(input,71,Follow._71_in_stmt_try1684); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_71.Add(char_literal171);

			DebugLocation(307, 33);
			PushFollow(Follow._expr_in_stmt_try1686);
			expr172=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr172.Tree);
			DebugLocation(307, 38);
			char_literal173=(IToken)Match(input,72,Follow._72_in_stmt_try1688); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_72.Add(char_literal173);

			DebugLocation(307, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1690);
			stmt_block174=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block174.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 307:53: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(307, 56);
				// SugarCpp.g:307:56: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(307, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(307, 67);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(307, 78);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(307, 83);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 30);
			LeaveRule("stmt_try", 30);
			LeaveRule_stmt_try();
			if (state.backtracking > 0) { Memoize(input, 30, stmt_try_StartIndex); }

		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarCpp.g:310:1: linq_item : ( 'select' ident 'from' expr -> ^( Linq_From ident expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) );
	[GrammarRule("linq_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 31);
		TraceIn("linq_item", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int linq_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal175 = default(IToken);
		IToken string_literal177 = default(IToken);
		IToken string_literal179 = default(IToken);
		IToken char_literal181 = default(IToken);
		IToken string_literal183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr184 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal175_tree = default(CommonTree);
		CommonTree string_literal177_tree = default(CommonTree);
		CommonTree string_literal179_tree = default(CommonTree);
		CommonTree char_literal181_tree = default(CommonTree);
		CommonTree string_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(310, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// SugarCpp.g:311:2: ( 'select' ident 'from' expr -> ^( Linq_From ident expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) )
			int alt60=3;
			try { DebugEnterDecision(60, false);
			switch (input.LA(1))
			{
			case 124:
				{
				alt60 = 1;
				}
				break;
			case 119:
				{
				alt60 = 2;
				}
				break;
			case 128:
				{
				alt60 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:4: 'select' ident 'from' expr
				{
				DebugLocation(311, 4);
				string_literal175=(IToken)Match(input,124,Follow._124_in_linq_item1713); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_124.Add(string_literal175);

				DebugLocation(311, 13);
				PushFollow(Follow._ident_in_linq_item1715);
				ident176=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident176.Tree);
				DebugLocation(311, 19);
				string_literal177=(IToken)Match(input,115,Follow._115_in_linq_item1717); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_115.Add(string_literal177);

				DebugLocation(311, 26);
				PushFollow(Follow._expr_in_linq_item1719);
				expr178=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr178.Tree);


				{
				// AST REWRITE
				// elements: expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:31: -> ^( Linq_From ident expr )
				{
					DebugLocation(311, 34);
					// SugarCpp.g:311:34: ^( Linq_From ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_From, "Linq_From"), root_1);

					DebugLocation(311, 46);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(311, 52);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:4: 'let' ident '=' expr
				{
				DebugLocation(312, 4);
				string_literal179=(IToken)Match(input,119,Follow._119_in_linq_item1734); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_119.Add(string_literal179);

				DebugLocation(312, 10);
				PushFollow(Follow._ident_in_linq_item1736);
				ident180=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident180.Tree);
				DebugLocation(312, 16);
				char_literal181=(IToken)Match(input,96,Follow._96_in_linq_item1738); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_96.Add(char_literal181);

				DebugLocation(312, 20);
				PushFollow(Follow._expr_in_linq_item1740);
				expr182=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr182.Tree);


				{
				// AST REWRITE
				// elements: ident, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:25: -> ^( Linq_Let ident expr )
				{
					DebugLocation(312, 28);
					// SugarCpp.g:312:28: ^( Linq_Let ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(312, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Let, "Linq_Let"), root_1);

					DebugLocation(312, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(312, 45);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:313:4: 'where' expr
				{
				DebugLocation(313, 4);
				string_literal183=(IToken)Match(input,128,Follow._128_in_linq_item1755); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_128.Add(string_literal183);

				DebugLocation(313, 12);
				PushFollow(Follow._expr_in_linq_item1757);
				expr184=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr184.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 313:17: -> ^( Linq_Where expr )
				{
					DebugLocation(313, 20);
					// SugarCpp.g:313:20: ^( Linq_Where expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(313, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Where, "Linq_Where"), root_1);

					DebugLocation(313, 33);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_item", 31);
			LeaveRule("linq_item", 31);
			LeaveRule_linq_item();
			if (state.backtracking > 0) { Memoize(input, 31, linq_item_StartIndex); }

		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return retval;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarCpp.g:316:1: linq_prefix : ( linq_item ( ( NEWLINE )* linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 32);
		TraceIn("linq_prefix", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int linq_prefix_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE186 = default(IToken);
		IToken NEWLINE188 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item187 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE186_tree = default(CommonTree);
		CommonTree NEWLINE188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_linq_item=new RewriteRuleSubtreeStream(adaptor,"rule linq_item");
		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(316, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// SugarCpp.g:317:2: ( ( linq_item ( ( NEWLINE )* linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:317:4: ( linq_item ( ( NEWLINE )* linq_item )* ( NEWLINE )+ )+
			{
			DebugLocation(317, 4);
			// SugarCpp.g:317:4: ( linq_item ( ( NEWLINE )* linq_item )* ( NEWLINE )+ )+
			int cnt64=0;
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==119||LA64_0==124||LA64_0==128))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch (alt64)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:317:5: linq_item ( ( NEWLINE )* linq_item )* ( NEWLINE )+
					{
					DebugLocation(317, 5);
					PushFollow(Follow._linq_item_in_linq_prefix1777);
					linq_item185=linq_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_linq_item.Add(linq_item185.Tree);
					DebugLocation(317, 15);
					// SugarCpp.g:317:15: ( ( NEWLINE )* linq_item )*
					try { DebugEnterSubRule(62);
					while (true)
					{
						int alt62=2;
						try { DebugEnterDecision(62, false);
						int LA62_0 = input.LA(1);

						if ((LA62_0==NEWLINE))
						{
							int LA62_1 = input.LA(2);

							if ((EvaluatePredicate(synpred81_SugarCpp_fragment)))
							{
								alt62 = 1;
							}


						}
						else if ((LA62_0==119||LA62_0==124||LA62_0==128))
						{
							alt62 = 1;
						}


						} finally { DebugExitDecision(62); }
						switch ( alt62 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:317:16: ( NEWLINE )* linq_item
							{
							DebugLocation(317, 16);
							// SugarCpp.g:317:16: ( NEWLINE )*
							try { DebugEnterSubRule(61);
							while (true)
							{
								int alt61=2;
								try { DebugEnterDecision(61, false);
								int LA61_0 = input.LA(1);

								if ((LA61_0==NEWLINE))
								{
									alt61 = 1;
								}


								} finally { DebugExitDecision(61); }
								switch ( alt61 )
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:317:16: NEWLINE
									{
									DebugLocation(317, 16);
									NEWLINE186=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix1780); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE186);


									}
									break;

								default:
									goto loop61;
								}
							}

							loop61:
								;

							} finally { DebugExitSubRule(61); }

							DebugLocation(317, 25);
							PushFollow(Follow._linq_item_in_linq_prefix1783);
							linq_item187=linq_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_linq_item.Add(linq_item187.Tree);

							}
							break;

						default:
							goto loop62;
						}
					}

					loop62:
						;

					} finally { DebugExitSubRule(62); }

					DebugLocation(317, 37);
					// SugarCpp.g:317:37: ( NEWLINE )+
					int cnt63=0;
					try { DebugEnterSubRule(63);
					while (true)
					{
						int alt63=2;
						try { DebugEnterDecision(63, false);
						int LA63_0 = input.LA(1);

						if ((LA63_0==NEWLINE))
						{
							alt63 = 1;
						}


						} finally { DebugExitDecision(63); }
						switch (alt63)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:317:37: NEWLINE
							{
							DebugLocation(317, 37);
							NEWLINE188=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix1787); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE188);


							}
							break;

						default:
							if (cnt63 >= 1)
								goto loop63;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee63 = new EarlyExitException( 63, input );
							DebugRecognitionException(eee63);
							throw eee63;
						}
						cnt63++;
					}
					loop63:
						;

					} finally { DebugExitSubRule(63); }


					}
					break;

				default:
					if (cnt64 >= 1)
						goto loop64;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee64 = new EarlyExitException( 64, input );
					DebugRecognitionException(eee64);
					throw eee64;
				}
				cnt64++;
			}
			loop64:
				;

			} finally { DebugExitSubRule(64); }



			{
			// AST REWRITE
			// elements: linq_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 317:48: -> ^( Linq_Prefix ( linq_item )+ )
			{
				DebugLocation(317, 51);
				// SugarCpp.g:317:51: ^( Linq_Prefix ( linq_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(317, 53);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Prefix, "Linq_Prefix"), root_1);

				DebugLocation(317, 65);
				if (!(stream_linq_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_linq_item.HasNext )
				{
					DebugLocation(317, 65);
					adaptor.AddChild(root_1, stream_linq_item.NextTree());

				}
				stream_linq_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_prefix", 32);
			LeaveRule("linq_prefix", 32);
			LeaveRule_linq_prefix();
			if (state.backtracking > 0) { Memoize(input, 32, linq_prefix_StartIndex); }

		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return retval;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarCpp.g:320:1: stmt_linq : linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 33);
		TraceIn("stmt_linq", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_linq_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> linq_prefix189 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_linq_prefix=new RewriteRuleSubtreeStream(adaptor,"rule linq_prefix");
		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(320, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// SugarCpp.g:321:2: ( linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:321:4: linq_prefix stmt_block
			{
			DebugLocation(321, 4);
			PushFollow(Follow._linq_prefix_in_stmt_linq1810);
			linq_prefix189=linq_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_linq_prefix.Add(linq_prefix189.Tree);
			DebugLocation(321, 16);
			PushFollow(Follow._stmt_block_in_stmt_linq1812);
			stmt_block190=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block190.Tree);


			{
			// AST REWRITE
			// elements: linq_prefix, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 321:27: -> ^( Stmt_Linq linq_prefix stmt_block )
			{
				DebugLocation(321, 30);
				// SugarCpp.g:321:30: ^( Stmt_Linq linq_prefix stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(321, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Linq, "Stmt_Linq"), root_1);

				DebugLocation(321, 42);
				adaptor.AddChild(root_1, stream_linq_prefix.NextTree());
				DebugLocation(321, 54);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_linq", 33);
			LeaveRule("stmt_linq", 33);
			LeaveRule_stmt_linq();
			if (state.backtracking > 0) { Memoize(input, 33, stmt_linq_StartIndex); }

		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return retval;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:324:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 34);
		TraceIn("ident_list", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal192 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident193 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal192_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(324, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// SugarCpp.g:325:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:325:4: ident ( ',' ident )*
			{
			DebugLocation(325, 4);
			PushFollow(Follow._ident_in_ident_list1833);
			ident191=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident191.Tree);
			DebugLocation(325, 10);
			// SugarCpp.g:325:10: ( ',' ident )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==78))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:325:11: ',' ident
					{
					DebugLocation(325, 11);
					char_literal192=(IToken)Match(input,78,Follow._78_in_ident_list1836); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_78.Add(char_literal192);

					DebugLocation(325, 15);
					PushFollow(Follow._ident_in_ident_list1838);
					ident193=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident193.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 325:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(325, 26);
				// SugarCpp.g:325:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(325, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(325, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(325, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 34);
			LeaveRule("ident_list", 34);
			LeaveRule_ident_list();
			if (state.backtracking > 0) { Memoize(input, 34, ident_list_StartIndex); }

		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:328:1: stmt_alloc : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )? | ident ':=' ^ modify_expr );
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 35);
		TraceIn("stmt_alloc", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_alloc_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal195 = default(IToken);
		IToken char_literal197 = default(IToken);
		IToken string_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken char_literal202 = default(IToken);
		IToken string_literal204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr205 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal195_tree = default(CommonTree);
		CommonTree char_literal197_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree char_literal202_tree = default(CommonTree);
		CommonTree string_literal204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(328, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// SugarCpp.g:329:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )? | ident ':=' ^ modify_expr )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			try
			{
				alt68 = dfa68.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )?
				{
				DebugLocation(329, 4);
				PushFollow(Follow._ident_list_in_stmt_alloc1860);
				ident_list194=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list194.Tree);
				DebugLocation(329, 15);
				char_literal195=(IToken)Match(input,88,Follow._88_in_stmt_alloc1862); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal195);

				DebugLocation(329, 19);
				PushFollow(Follow._type_name_in_stmt_alloc1864);
				type_name196=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name196.Tree);
				DebugLocation(329, 29);
				// SugarCpp.g:329:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )?
				int alt67=4;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				switch (input.LA(1))
				{
				case 90:
				case 96:
					{
					alt67 = 1;
					}
					break;
				case 71:
					{
					alt67 = 2;
					}
					break;
				case 78:
					{
					int LA67_3 = input.LA(2);

					if ((EvaluatePredicate(synpred88_SugarCpp_fragment)))
					{
						alt67 = 3;
					}
					}
					break;
				case 72:
					{
					int LA67_4 = input.LA(2);

					if ((EvaluatePredicate(synpred88_SugarCpp_fragment)))
					{
						alt67 = 3;
					}
					}
					break;
				case EOF:
					{
					int LA67_5 = input.LA(2);

					if ((EvaluatePredicate(synpred88_SugarCpp_fragment)))
					{
						alt67 = 3;
					}
					}
					break;
				case NEWLINE:
					{
					int LA67_6 = input.LA(2);

					if ((EvaluatePredicate(synpred88_SugarCpp_fragment)))
					{
						alt67 = 3;
					}
					}
					break;
				}

				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:31: ( '=' | ':=' ) expr
					{
					DebugLocation(329, 31);
					// SugarCpp.g:329:31: ( '=' | ':=' )
					int alt66=2;
					try { DebugEnterSubRule(66);
					try { DebugEnterDecision(66, false);
					int LA66_0 = input.LA(1);

					if ((LA66_0==96))
					{
						alt66 = 1;
					}
					else if ((LA66_0==90))
					{
						alt66 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(66); }
					switch (alt66)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:329:32: '='
						{
						DebugLocation(329, 32);
						char_literal197=(IToken)Match(input,96,Follow._96_in_stmt_alloc1869); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_96.Add(char_literal197);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:329:38: ':='
						{
						DebugLocation(329, 38);
						string_literal198=(IToken)Match(input,90,Follow._90_in_stmt_alloc1873); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_90.Add(string_literal198);


						}
						break;

					}
					} finally { DebugExitSubRule(66); }

					DebugLocation(329, 44);
					PushFollow(Follow._expr_in_stmt_alloc1876);
					expr199=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr199.Tree);


					{
					// AST REWRITE
					// elements: type_name, ident_list, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 329:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(329, 53);
						// SugarCpp.g:329:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(329, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(329, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(329, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(329, 93);
						// SugarCpp.g:329:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(329, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:330:31: '(' expr ')'
					{
					DebugLocation(330, 31);
					char_literal200=(IToken)Match(input,71,Follow._71_in_stmt_alloc1922); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(char_literal200);

					DebugLocation(330, 35);
					PushFollow(Follow._expr_in_stmt_alloc1924);
					expr201=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr201.Tree);
					DebugLocation(330, 40);
					char_literal202=(IToken)Match(input,72,Follow._72_in_stmt_alloc1926); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(char_literal202);



					{
					// AST REWRITE
					// elements: type_name, ident_list, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 330:45: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? )
					{
						DebugLocation(330, 48);
						// SugarCpp.g:330:48: ^( Expr_Alloc_Bracket type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(330, 69);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(330, 79);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(330, 90);
						// SugarCpp.g:330:90: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(330, 90);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:331:13: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 331:13: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(331, 16);
						// SugarCpp.g:331:16: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(331, 18);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(331, 35);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(331, 45);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(67); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:332:4: ident ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(332, 4);
				PushFollow(Follow._ident_in_stmt_alloc1969);
				ident203=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident203.Tree);
				DebugLocation(332, 14);
				string_literal204=(IToken)Match(input,90,Follow._90_in_stmt_alloc1971); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal204_tree = (CommonTree)adaptor.Create(string_literal204);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal204_tree, root_0);
				}
				DebugLocation(332, 16);
				PushFollow(Follow._modify_expr_in_stmt_alloc1974);
				modify_expr205=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr205.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 35);
			LeaveRule("stmt_alloc", 35);
			LeaveRule_stmt_alloc();
			if (state.backtracking > 0) { Memoize(input, 35, stmt_alloc_StartIndex); }

		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:335:1: stmt_modify : lvalue ( modify_expr_op ^ cond_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 36);
		TraceIn("stmt_modify", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_modify_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue206 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr208 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(335, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// SugarCpp.g:336:2: ( lvalue ( modify_expr_op ^ cond_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:336:4: lvalue ( modify_expr_op ^ cond_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(336, 4);
			PushFollow(Follow._lvalue_in_stmt_modify1985);
			lvalue206=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue206.Tree);
			DebugLocation(336, 11);
			// SugarCpp.g:336:11: ( modify_expr_op ^ cond_expr )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==67||LA69_0==70||LA69_0==74||LA69_0==77||LA69_0==81||LA69_0==87||LA69_0==94||LA69_0==96||LA69_0==102||LA69_0==107||LA69_0==131))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:336:12: modify_expr_op ^ cond_expr
				{
				DebugLocation(336, 26);
				PushFollow(Follow._modify_expr_op_in_stmt_modify1988);
				modify_expr_op207=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op207.Tree, root_0);
				DebugLocation(336, 28);
				PushFollow(Follow._cond_expr_in_stmt_modify1991);
				cond_expr208=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr208.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 36);
			LeaveRule("stmt_modify", 36);
			LeaveRule_stmt_modify();
			if (state.backtracking > 0) { Memoize(input, 36, stmt_modify_StartIndex); }

		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:339:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 37);
		TraceIn("expr", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr209 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(339, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// SugarCpp.g:340:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:340:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(340, 4);
			PushFollow(Follow._lambda_expr_in_expr2004);
			lambda_expr209=lambda_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr209.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 37);
			LeaveRule("expr", 37);
			LeaveRule_expr();
			if (state.backtracking > 0) { Memoize(input, 37, expr_StartIndex); }

		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:343:1: lambda_expr : ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 38);
		TraceIn("lambda_expr", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lambda_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal210 = default(IToken);
		IToken char_literal211 = default(IToken);
		IToken char_literal213 = default(IToken);
		IToken string_literal214 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr216 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal210_tree = default(CommonTree);
		CommonTree char_literal211_tree = default(CommonTree);
		CommonTree char_literal213_tree = default(CommonTree);
		CommonTree string_literal214_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(343, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// SugarCpp.g:344:2: ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr )
			int alt71=2;
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==104))
			{
				alt71 = 1;
			}
			else if ((LA71_0==IDENT||LA71_0==NUMBER||LA71_0==STRING||LA71_0==64||LA71_0==69||LA71_0==71||LA71_0==73||(LA71_0>=75 && LA71_0<=76)||(LA71_0>=79 && LA71_0<=80)||LA71_0==122||LA71_0==133))
			{
				alt71 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:344:4: '\\\\' '(' ( func_args )? ')' '=>' lambda_expr
				{
				DebugLocation(344, 4);
				char_literal210=(IToken)Match(input,104,Follow._104_in_lambda_expr2015); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_104.Add(char_literal210);

				DebugLocation(344, 9);
				char_literal211=(IToken)Match(input,71,Follow._71_in_lambda_expr2017); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_71.Add(char_literal211);

				DebugLocation(344, 13);
				// SugarCpp.g:344:13: ( func_args )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==IDENT))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:344:13: func_args
					{
					DebugLocation(344, 13);
					PushFollow(Follow._func_args_in_lambda_expr2019);
					func_args212=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args212.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(344, 24);
				char_literal213=(IToken)Match(input,72,Follow._72_in_lambda_expr2022); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_72.Add(char_literal213);

				DebugLocation(344, 28);
				string_literal214=(IToken)Match(input,98,Follow._98_in_lambda_expr2024); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_98.Add(string_literal214);

				DebugLocation(344, 33);
				PushFollow(Follow._lambda_expr_in_lambda_expr2026);
				lambda_expr215=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lambda_expr.Add(lambda_expr215.Tree);


				{
				// AST REWRITE
				// elements: func_args, lambda_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 344:45: -> ^( Expr_Lambda ( func_args )? lambda_expr )
				{
					DebugLocation(344, 48);
					// SugarCpp.g:344:48: ^( Expr_Lambda ( func_args )? lambda_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(344, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(344, 62);
					// SugarCpp.g:344:62: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(344, 62);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(344, 73);
					adaptor.AddChild(root_1, stream_lambda_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:345:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(345, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr2042);
				modify_expr216=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr216.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 38);
			LeaveRule("lambda_expr", 38);
			LeaveRule_lambda_expr();
			if (state.backtracking > 0) { Memoize(input, 38, lambda_expr_StartIndex); }

		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:348:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 39);
		TraceIn("modify_expr_op", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set217 = default(IToken);

		CommonTree set217_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(348, 92);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// SugarCpp.g:348:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(348, 15);

			set217=(IToken)input.LT(1);
			if (input.LA(1)==67||input.LA(1)==70||input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==87||input.LA(1)==94||input.LA(1)==96||input.LA(1)==102||input.LA(1)==107||input.LA(1)==131)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set217));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 39);
			LeaveRule("modify_expr_op", 39);
			LeaveRule_modify_expr_op();
			if (state.backtracking > 0) { Memoize(input, 39, modify_expr_op_StartIndex); }

		}
		DebugLocation(348, 92);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:349:1: modify_expr : cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 40);
		TraceIn("modify_expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set219 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set219_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(349, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// SugarCpp.g:350:2: ( cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:350:4: cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(350, 4);
			PushFollow(Follow._cond_expr_in_modify_expr2100);
			cond_expr218=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr218.Tree);
			DebugLocation(350, 14);
			// SugarCpp.g:350:14: ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==67||LA72_0==70||LA72_0==74||LA72_0==77||LA72_0==81||LA72_0==87||LA72_0==90||LA72_0==94||LA72_0==96||LA72_0==102||LA72_0==107||LA72_0==131))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:350:15: ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr
				{
				DebugLocation(350, 99);

				set219=(IToken)input.LT(1);
				set219=(IToken)input.LT(1);
				if (input.LA(1)==67||input.LA(1)==70||input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==96||input.LA(1)==102||input.LA(1)==107||input.LA(1)==131)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set219), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(350, 101);
				PushFollow(Follow._modify_expr_in_modify_expr2152);
				modify_expr220=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr220.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 40);
			LeaveRule("modify_expr", 40);
			LeaveRule_modify_expr();
			if (state.backtracking > 0) { Memoize(input, 40, modify_expr_StartIndex); }

		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:353:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 41);
		TraceIn("cond_expr_item", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr221 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(353, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// SugarCpp.g:353:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:353:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(353, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item2163);
			cond_expr221=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr221.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 41);
			LeaveRule("cond_expr_item", 41);
			LeaveRule_cond_expr_item();
			if (state.backtracking > 0) { Memoize(input, 41, cond_expr_item_StartIndex); }

		}
		DebugLocation(353, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:354:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 42);
		TraceIn("cond_expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal222 = default(IToken);
		IToken string_literal223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree string_literal223_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(354, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// SugarCpp.g:355:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:355:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(355, 4);
			// SugarCpp.g:355:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:355:5: a= or_expr
			{
			DebugLocation(355, 6);
			PushFollow(Follow._or_expr_in_cond_expr2175);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 355:15: -> $a
			{
				DebugLocation(355, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(355, 22);
			// SugarCpp.g:355:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==116))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:355:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(355, 23);
				string_literal222=(IToken)Match(input,116,Follow._116_in_cond_expr2184); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_116.Add(string_literal222);

				DebugLocation(355, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr2188);
				a=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
				DebugLocation(355, 45);
				string_literal223=(IToken)Match(input,112,Follow._112_in_cond_expr2190); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(string_literal223);

				DebugLocation(355, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr2194);
				b=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cond_expr, a
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 355:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(355, 72);
					// SugarCpp.g:355:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(355, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(355, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(355, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(355, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 42);
			LeaveRule("cond_expr", 42);
			LeaveRule_cond_expr();
			if (state.backtracking > 0) { Memoize(input, 42, cond_expr_StartIndex); }

		}
		DebugLocation(356, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:358:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 43);
		TraceIn("or_expr", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int or_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal224 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal224_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(358, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// SugarCpp.g:359:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:359:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(359, 4);
			// SugarCpp.g:359:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:359:5: a= and_expr
			{
			DebugLocation(359, 6);
			PushFollow(Follow._and_expr_in_or_expr2225);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 359:16: -> $a
			{
				DebugLocation(359, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(359, 23);
			// SugarCpp.g:359:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==132))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:359:24: '||' b= and_expr
					{
					DebugLocation(359, 24);
					string_literal224=(IToken)Match(input,132,Follow._132_in_or_expr2234); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(string_literal224);

					DebugLocation(359, 30);
					PushFollow(Follow._and_expr_in_or_expr2238);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, 132
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 359:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(359, 43);
						// SugarCpp.g:359:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(359, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(359, 54);
						adaptor.AddChild(root_1, stream_132.NextNode());
						DebugLocation(359, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(359, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 43);
			LeaveRule("or_expr", 43);
			LeaveRule_or_expr();
			if (state.backtracking > 0) { Memoize(input, 43, or_expr_StartIndex); }

		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:362:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 44);
		TraceIn("and_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int and_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal225 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal225_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(362, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// SugarCpp.g:363:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:363:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(363, 4);
			// SugarCpp.g:363:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:363:5: a= bit_or
			{
			DebugLocation(363, 6);
			PushFollow(Follow._bit_or_in_and_expr2268);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 363:14: -> $a
			{
				DebugLocation(363, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(363, 21);
			// SugarCpp.g:363:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==68))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:363:22: '&&' b= bit_or
					{
					DebugLocation(363, 22);
					string_literal225=(IToken)Match(input,68,Follow._68_in_and_expr2277); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(string_literal225);

					DebugLocation(363, 28);
					PushFollow(Follow._bit_or_in_and_expr2281);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, and_expr, 68
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 363:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(363, 39);
						// SugarCpp.g:363:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(363, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(363, 50);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(363, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(363, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 44);
			LeaveRule("and_expr", 44);
			LeaveRule_and_expr();
			if (state.backtracking > 0) { Memoize(input, 44, and_expr_StartIndex); }

		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:366:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 45);
		TraceIn("bit_or", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_or_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal226 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(366, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// SugarCpp.g:367:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:367:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(367, 4);
			// SugarCpp.g:367:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:367:5: a= bit_xor
			{
			DebugLocation(367, 6);
			PushFollow(Follow._bit_xor_in_bit_or2311);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 367:15: -> $a
			{
				DebugLocation(367, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(367, 22);
			// SugarCpp.g:367:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==130))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:367:23: '|' b= bit_xor
					{
					DebugLocation(367, 23);
					char_literal226=(IToken)Match(input,130,Follow._130_in_bit_or2320); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_130.Add(char_literal226);

					DebugLocation(367, 28);
					PushFollow(Follow._bit_xor_in_bit_or2324);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_or, 130
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 367:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(367, 40);
						// SugarCpp.g:367:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(367, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(367, 51);
						adaptor.AddChild(root_1, stream_130.NextNode());
						DebugLocation(367, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(367, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 45);
			LeaveRule("bit_or", 45);
			LeaveRule_bit_or();
			if (state.backtracking > 0) { Memoize(input, 45, bit_or_StartIndex); }

		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:370:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 46);
		TraceIn("bit_xor", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_xor_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal227 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal227_tree = default(CommonTree);
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(370, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// SugarCpp.g:371:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:371:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(371, 4);
			// SugarCpp.g:371:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:371:5: a= bit_and
			{
			DebugLocation(371, 6);
			PushFollow(Follow._bit_and_in_bit_xor2354);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 371:15: -> $a
			{
				DebugLocation(371, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(371, 22);
			// SugarCpp.g:371:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==106))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:371:23: '^' b= bit_and
					{
					DebugLocation(371, 23);
					char_literal227=(IToken)Match(input,106,Follow._106_in_bit_xor2363); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(char_literal227);

					DebugLocation(371, 28);
					PushFollow(Follow._bit_and_in_bit_xor2367);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, 106, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 371:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(371, 40);
						// SugarCpp.g:371:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(371, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(371, 51);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(371, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(371, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 46);
			LeaveRule("bit_xor", 46);
			LeaveRule_bit_xor();
			if (state.backtracking > 0) { Memoize(input, 46, bit_xor_StartIndex); }

		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:374:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 47);
		TraceIn("bit_and", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_and_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal228_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(374, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// SugarCpp.g:375:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:375:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(375, 4);
			// SugarCpp.g:375:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:375:5: a= cmp_equ_expr
			{
			DebugLocation(375, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and2397);
			a=cmp_equ_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 375:20: -> $a
			{
				DebugLocation(375, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(375, 27);
			// SugarCpp.g:375:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==69))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:375:28: '&' b= cmp_equ_expr
					{
					DebugLocation(375, 28);
					char_literal228=(IToken)Match(input,69,Follow._69_in_bit_and2406); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_69.Add(char_literal228);

					DebugLocation(375, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and2410);
					b=cmp_equ_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 69, bit_and
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 375:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(375, 50);
						// SugarCpp.g:375:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(375, 61);
						adaptor.AddChild(root_1, stream_69.NextNode());
						DebugLocation(375, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(375, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 47);
			LeaveRule("bit_and", 47);
			LeaveRule_bit_and();
			if (state.backtracking > 0) { Memoize(input, 47, bit_and_StartIndex); }

		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:378:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 48);
		TraceIn("cmp_equ_expr_op", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set229 = default(IToken);

		CommonTree set229_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(378, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// SugarCpp.g:378:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(378, 16);

			set229=(IToken)input.LT(1);
			if (input.LA(1)==65||input.LA(1)==97)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set229));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 48);
			LeaveRule("cmp_equ_expr_op", 48);
			LeaveRule_cmp_equ_expr_op();
			if (state.backtracking > 0) { Memoize(input, 48, cmp_equ_expr_op_StartIndex); }

		}
		DebugLocation(378, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:379:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 49);
		TraceIn("cmp_equ_expr", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op230 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(379, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// SugarCpp.g:380:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:380:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			{
			DebugLocation(380, 4);
			// SugarCpp.g:380:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:380:5: a= cmp_expr
			{
			DebugLocation(380, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr2451);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 380:16: -> $a
			{
				DebugLocation(380, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(380, 23);
			// SugarCpp.g:380:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==65||LA79_0==97))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:380:24: cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(380, 24);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr2460);
				cmp_equ_expr_op230=cmp_equ_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_equ_expr_op.Add(cmp_equ_expr_op230.Tree);
				DebugLocation(380, 41);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr2464);
				b=cmp_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_equ_expr_op, cmp_equ_expr
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 380:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
				{
					DebugLocation(380, 54);
					// SugarCpp.g:380:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(380, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(380, 65);
					adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
					DebugLocation(380, 82);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(380, 96);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 49);
			LeaveRule("cmp_equ_expr", 49);
			LeaveRule_cmp_equ_expr();
			if (state.backtracking > 0) { Memoize(input, 49, cmp_equ_expr_StartIndex); }

		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr_op();
	partial void LeaveRule_cmp_expr_op();

	// $ANTLR start "cmp_expr_op"
	// SugarCpp.g:383:1: cmp_expr_op : ( '<' | '<=' | '>' | '>=' );
	[GrammarRule("cmp_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op()
	{
		EnterRule_cmp_expr_op();
		EnterRule("cmp_expr_op", 50);
		TraceIn("cmp_expr_op", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set231 = default(IToken);

		CommonTree set231_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_expr_op");
		DebugLocation(383, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// SugarCpp.g:383:12: ( '<' | '<=' | '>' | '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(383, 12);

			set231=(IToken)input.LT(1);
			if (input.LA(1)==92||input.LA(1)==95||(input.LA(1)>=99 && input.LA(1)<=100))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set231));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr_op", 50);
			LeaveRule("cmp_expr_op", 50);
			LeaveRule_cmp_expr_op();
			if (state.backtracking > 0) { Memoize(input, 50, cmp_expr_op_StartIndex); }

		}
		DebugLocation(383, 37);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_expr_op"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:384:1: cmp_expr : (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 51);
		TraceIn("cmp_expr", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(384, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// SugarCpp.g:385:2: ( (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:385:4: (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			{
			DebugLocation(385, 4);
			// SugarCpp.g:385:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:385:5: a= shift_expr
			{
			DebugLocation(385, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr2514);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 385:18: -> $a
			{
				DebugLocation(385, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(385, 25);
			// SugarCpp.g:385:25: ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==92||LA80_0==95||(LA80_0>=99 && LA80_0<=100)))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:385:26: cmp_expr_op b= shift_expr
				{
				DebugLocation(385, 26);
				PushFollow(Follow._cmp_expr_op_in_cmp_expr2523);
				cmp_expr_op232=cmp_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr_op.Add(cmp_expr_op232.Tree);
				DebugLocation(385, 39);
				PushFollow(Follow._shift_expr_in_cmp_expr2527);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_expr, b, cmp_expr_op
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 385:51: -> ^( Expr_Bin cmp_expr_op $cmp_expr $b)
				{
					DebugLocation(385, 54);
					// SugarCpp.g:385:54: ^( Expr_Bin cmp_expr_op $cmp_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(385, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(385, 65);
					adaptor.AddChild(root_1, stream_cmp_expr_op.NextTree());
					DebugLocation(385, 78);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(385, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 51);
			LeaveRule("cmp_expr", 51);
			LeaveRule_cmp_expr();
			if (state.backtracking > 0) { Memoize(input, 51, cmp_expr_StartIndex); }

		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:388:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 52);
		TraceIn("shift_expr_op", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set233 = default(IToken);

		CommonTree set233_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(388, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// SugarCpp.g:388:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(388, 14);

			set233=(IToken)input.LT(1);
			if (input.LA(1)==93||input.LA(1)==101)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set233));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 52);
			LeaveRule("shift_expr_op", 52);
			LeaveRule_shift_expr_op();
			if (state.backtracking > 0) { Memoize(input, 52, shift_expr_op_StartIndex); }

		}
		DebugLocation(388, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:389:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 53);
		TraceIn("shift_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(389, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// SugarCpp.g:390:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:390:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(390, 4);
			// SugarCpp.g:390:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:390:5: a= add_expr
			{
			DebugLocation(390, 6);
			PushFollow(Follow._add_expr_in_shift_expr2568);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 390:16: -> $a
			{
				DebugLocation(390, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(390, 23);
			// SugarCpp.g:390:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==93||LA81_0==101))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:390:24: shift_expr_op b= add_expr
					{
					DebugLocation(390, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr2577);
					shift_expr_op234=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op234.Tree);
					DebugLocation(390, 39);
					PushFollow(Follow._add_expr_in_shift_expr2581);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, b, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 390:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(390, 52);
						// SugarCpp.g:390:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(390, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(390, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(390, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 53);
			LeaveRule("shift_expr", 53);
			LeaveRule_shift_expr();
			if (state.backtracking > 0) { Memoize(input, 53, shift_expr_StartIndex); }

		}
		DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:393:1: add_expr : (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 54);
		TraceIn("add_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int add_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal235 = default(IToken);
		IToken char_literal236 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal235_tree = default(CommonTree);
		CommonTree char_literal236_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(393, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// SugarCpp.g:394:2: ( (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:394:4: (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(394, 4);
			// SugarCpp.g:394:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:394:5: a= infix_expr
			{
			DebugLocation(394, 6);
			PushFollow(Follow._infix_expr_in_add_expr2611);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 394:18: -> $a
			{
				DebugLocation(394, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(394, 25);
			// SugarCpp.g:394:25: ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=3;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==75))
				{
					alt82 = 1;
				}
				else if ((LA82_0==79))
				{
					alt82 = 2;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:394:27: '+' b= infix_expr
					{
					DebugLocation(394, 27);
					char_literal235=(IToken)Match(input,75,Follow._75_in_add_expr2621); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_75.Add(char_literal235);

					DebugLocation(394, 32);
					PushFollow(Follow._infix_expr_in_add_expr2625);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 75, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:44: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(394, 47);
						// SugarCpp.g:394:47: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(394, 58);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(394, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(394, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:395:12: '-' b= infix_expr
					{
					DebugLocation(395, 12);
					char_literal236=(IToken)Match(input,79,Follow._79_in_add_expr2652); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_79.Add(char_literal236);

					DebugLocation(395, 17);
					PushFollow(Follow._infix_expr_in_add_expr2656);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 79, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:29: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(395, 32);
						// SugarCpp.g:395:32: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(395, 43);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(395, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(395, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 54);
			LeaveRule("add_expr", 54);
			LeaveRule_add_expr();
			if (state.backtracking > 0) { Memoize(input, 54, add_expr_StartIndex); }

		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:399:1: infix_expr : (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 55);
		TraceIn("infix_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func237 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(399, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// SugarCpp.g:400:2: ( (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:400:4: (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(400, 4);
			// SugarCpp.g:400:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:400:5: a= mul_expr
			{
			DebugLocation(400, 6);
			PushFollow(Follow._mul_expr_in_infix_expr2696);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 400:16: -> $a
			{
				DebugLocation(400, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(400, 23);
			// SugarCpp.g:400:23: ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==108))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:400:25: infix_func b= mul_expr
					{
					DebugLocation(400, 25);
					PushFollow(Follow._infix_func_in_infix_expr2706);
					infix_func237=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func237.Tree);
					DebugLocation(400, 37);
					PushFollow(Follow._mul_expr_in_infix_expr2710);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_expr, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 400:48: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(400, 51);
						// SugarCpp.g:400:51: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(400, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(400, 64);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(400, 76);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(400, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 55);
			LeaveRule("infix_expr", 55);
			LeaveRule_infix_expr();
			if (state.backtracking > 0) { Memoize(input, 55, infix_expr_StartIndex); }

		}
		DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:403:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 56);
		TraceIn("mul_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int mul_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal238 = default(IToken);
		IToken char_literal239 = default(IToken);
		IToken char_literal240 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal238_tree = default(CommonTree);
		CommonTree char_literal239_tree = default(CommonTree);
		CommonTree char_literal240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(403, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// SugarCpp.g:404:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:404:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(404, 4);
			// SugarCpp.g:404:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:404:5: a= selector_expr
			{
			DebugLocation(404, 6);
			PushFollow(Follow._selector_expr_in_mul_expr2742);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 404:21: -> $a
			{
				DebugLocation(404, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(404, 28);
			// SugarCpp.g:404:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=4;
				try { DebugEnterDecision(84, false);
				switch (input.LA(1))
				{
				case 73:
					{
					alt84 = 1;
					}
					break;
				case 86:
					{
					alt84 = 2;
					}
					break;
				case 66:
					{
					alt84 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:404:30: '*' b= selector_expr
					{
					DebugLocation(404, 30);
					char_literal238=(IToken)Match(input,73,Follow._73_in_mul_expr2752); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_73.Add(char_literal238);

					DebugLocation(404, 35);
					PushFollow(Follow._selector_expr_in_mul_expr2756);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 73
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 404:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(404, 53);
						// SugarCpp.g:404:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(404, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(404, 64);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(404, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(404, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:405:15: '/' b= selector_expr
					{
					DebugLocation(405, 15);
					char_literal239=(IToken)Match(input,86,Follow._86_in_mul_expr2786); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_86.Add(char_literal239);

					DebugLocation(405, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2790);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 86
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 405:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(405, 38);
						// SugarCpp.g:405:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(405, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(405, 49);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(405, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(405, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:406:15: '%' b= selector_expr
					{
					DebugLocation(406, 15);
					char_literal240=(IToken)Match(input,66,Follow._66_in_mul_expr2820); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_66.Add(char_literal240);

					DebugLocation(406, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2824);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 66, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 406:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(406, 38);
						// SugarCpp.g:406:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(406, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(406, 49);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(406, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(406, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 56);
			LeaveRule("mul_expr", 56);
			LeaveRule_mul_expr();
			if (state.backtracking > 0) { Memoize(input, 56, mul_expr_StartIndex); }

		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:410:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 57);
		TraceIn("selector_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int selector_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal241 = default(IToken);
		IToken string_literal242 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree string_literal242_tree = default(CommonTree);
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(410, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// SugarCpp.g:411:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:411:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(411, 4);
			// SugarCpp.g:411:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:411:5: a= prefix_expr
			{
			DebugLocation(411, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr2867);
			a=prefix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 411:19: -> $a
			{
				DebugLocation(411, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(411, 26);
			// SugarCpp.g:411:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=3;
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==83))
				{
					alt85 = 1;
				}
				else if ((LA85_0==85))
				{
					alt85 = 2;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:411:28: '->*' b= ident
					{
					DebugLocation(411, 28);
					string_literal241=(IToken)Match(input,83,Follow._83_in_selector_expr2877); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_83.Add(string_literal241);

					DebugLocation(411, 35);
					PushFollow(Follow._ident_in_selector_expr2881);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 83, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 411:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(411, 45);
						// SugarCpp.g:411:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(411, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(411, 59);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(411, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(411, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:412:13: '.*' b= ident
					{
					DebugLocation(412, 13);
					string_literal242=(IToken)Match(input,85,Follow._85_in_selector_expr2909); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_85.Add(string_literal242);

					DebugLocation(412, 20);
					PushFollow(Follow._ident_in_selector_expr2914);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 85, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 412:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(412, 30);
						// SugarCpp.g:412:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(412, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(412, 44);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(412, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(412, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 57);
			LeaveRule("selector_expr", 57);
			LeaveRule_selector_expr();
			if (state.backtracking > 0) { Memoize(input, 57, selector_expr_StartIndex); }

		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:416:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 58);
		TraceIn("prefix_expr_op", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set243 = default(IToken);

		CommonTree set243_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(416, 64);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// SugarCpp.g:416:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(416, 15);

			set243=(IToken)input.LT(1);
			if (input.LA(1)==64||input.LA(1)==69||input.LA(1)==73||(input.LA(1)>=75 && input.LA(1)<=76)||(input.LA(1)>=79 && input.LA(1)<=80)||input.LA(1)==133)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set243));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 58);
			LeaveRule("prefix_expr_op", 58);
			LeaveRule_prefix_expr_op();
			if (state.backtracking > 0) { Memoize(input, 58, prefix_expr_op_StartIndex); }

		}
		DebugLocation(416, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:417:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 59);
		TraceIn("prefix_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal246 = default(IToken);
		IToken char_literal248 = default(IToken);
		IToken char_literal250 = default(IToken);
		IToken char_literal251 = default(IToken);
		IToken char_literal253 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name247 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr254 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree char_literal248_tree = default(CommonTree);
		CommonTree char_literal250_tree = default(CommonTree);
		CommonTree char_literal251_tree = default(CommonTree);
		CommonTree char_literal253_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(417, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// SugarCpp.g:418:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt88=3;
			try { DebugEnterDecision(88, false);
			switch (input.LA(1))
			{
			case 64:
			case 69:
			case 73:
			case 75:
			case 76:
			case 79:
			case 80:
			case 133:
				{
				alt88 = 1;
				}
				break;
			case 122:
				{
				alt88 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 71:
				{
				alt88 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:418:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(418, 4);
				// SugarCpp.g:418:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:418:5: prefix_expr_op prefix_expr
				{
				DebugLocation(418, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr2989);
				prefix_expr_op244=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op244.Tree);
				DebugLocation(418, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr2991);
				prefix_expr245=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr245.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 418:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(418, 36);
					// SugarCpp.g:418:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(418, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(418, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(418, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:419:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(419, 4);
				string_literal246=(IToken)Match(input,122,Follow._122_in_prefix_expr3007); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_122.Add(string_literal246);

				DebugLocation(419, 10);
				PushFollow(Follow._type_name_in_prefix_expr3009);
				type_name247=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name247.Tree);
				DebugLocation(419, 20);
				// SugarCpp.g:419:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==71))
				{
					alt87 = 1;
				}
				else if ((LA87_0==103))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:419:22: '(' ( expr_list )? ')'
					{
					DebugLocation(419, 22);
					char_literal248=(IToken)Match(input,71,Follow._71_in_prefix_expr3013); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(char_literal248);

					DebugLocation(419, 26);
					// SugarCpp.g:419:26: ( expr_list )?
					int alt86=2;
					try { DebugEnterSubRule(86);
					try { DebugEnterDecision(86, false);
					int LA86_0 = input.LA(1);

					if ((LA86_0==IDENT||LA86_0==NUMBER||LA86_0==STRING||LA86_0==64||LA86_0==69||LA86_0==71||LA86_0==73||(LA86_0>=75 && LA86_0<=76)||(LA86_0>=79 && LA86_0<=80)||LA86_0==104||LA86_0==122||LA86_0==133))
					{
						alt86 = 1;
					}
					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:419:26: expr_list
						{
						DebugLocation(419, 26);
						PushFollow(Follow._expr_list_in_prefix_expr3015);
						expr_list249=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list249.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(86); }

					DebugLocation(419, 37);
					char_literal250=(IToken)Match(input,72,Follow._72_in_prefix_expr3018); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(char_literal250);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 419:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(419, 44);
						// SugarCpp.g:419:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(419, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(419, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(419, 70);
						// SugarCpp.g:419:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(419, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:420:10: '[' expr_list ']'
					{
					DebugLocation(420, 10);
					char_literal251=(IToken)Match(input,103,Follow._103_in_prefix_expr3040); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(char_literal251);

					DebugLocation(420, 14);
					PushFollow(Follow._expr_list_in_prefix_expr3042);
					expr_list252=expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr_list.Add(expr_list252.Tree);
					DebugLocation(420, 24);
					char_literal253=(IToken)Match(input,105,Follow._105_in_prefix_expr3044); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal253);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 420:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(420, 31);
						// SugarCpp.g:420:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(420, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(420, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(420, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:421:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(421, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr3060);
				suffix_expr254=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr254.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 59);
			LeaveRule("prefix_expr", 59);
			LeaveRule_prefix_expr();
			if (state.backtracking > 0) { Memoize(input, 59, prefix_expr_StartIndex); }

		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:424:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 60);
		TraceIn("expr_list", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal256 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr257 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal256_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(424, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// SugarCpp.g:425:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:425:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(425, 4);
			PushFollow(Follow._expr_in_expr_list3072);
			expr255=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr255.Tree);
			DebugLocation(425, 9);
			// SugarCpp.g:425:9: ( ',' ! expr )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==78))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:425:10: ',' ! expr
					{
					DebugLocation(425, 13);
					char_literal256=(IToken)Match(input,78,Follow._78_in_expr_list3075); if (state.failed) return retval;
					DebugLocation(425, 15);
					PushFollow(Follow._expr_in_expr_list3078);
					expr257=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr257.Tree);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 60);
			LeaveRule("expr_list", 60);
			LeaveRule_expr_list();
			if (state.backtracking > 0) { Memoize(input, 60, expr_list_StartIndex); }

		}
		DebugLocation(426, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:428:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 61);
		TraceIn("suffix_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int suffix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal258 = default(IToken);
		IToken string_literal259 = default(IToken);
		IToken char_literal260 = default(IToken);
		IToken string_literal262 = default(IToken);
		IToken char_literal265 = default(IToken);
		IToken char_literal267 = default(IToken);
		IToken char_literal268 = default(IToken);
		IToken char_literal270 = default(IToken);
		IToken char_literal271 = default(IToken);
		IToken char_literal273 = default(IToken);
		IToken char_literal275 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident263 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list274 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal258_tree = default(CommonTree);
		CommonTree string_literal259_tree = default(CommonTree);
		CommonTree char_literal260_tree = default(CommonTree);
		CommonTree string_literal262_tree = default(CommonTree);
		CommonTree char_literal265_tree = default(CommonTree);
		CommonTree char_literal267_tree = default(CommonTree);
		CommonTree char_literal268_tree = default(CommonTree);
		CommonTree char_literal270_tree = default(CommonTree);
		CommonTree char_literal271_tree = default(CommonTree);
		CommonTree char_literal273_tree = default(CommonTree);
		CommonTree char_literal275_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(428, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// SugarCpp.g:429:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:429:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			{
			DebugLocation(429, 4);
			// SugarCpp.g:429:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:429:5: a= atom_expr
			{
			DebugLocation(429, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr3094);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 429:17: -> $a
			{
				DebugLocation(429, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(429, 24);
			// SugarCpp.g:429:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=8;
				try { DebugEnterDecision(94, false);
				switch (input.LA(1))
				{
				case 92:
					{
					int LA94_10 = input.LA(2);

					if ((EvaluatePredicate(synpred155_SugarCpp_fragment)))
					{
						alt94 = 5;
					}


					}
					break;
				case 76:
					{
					alt94 = 1;
					}
					break;
				case 80:
					{
					alt94 = 2;
					}
					break;
				case 84:
					{
					alt94 = 3;
					}
					break;
				case 82:
					{
					alt94 = 4;
					}
					break;
				case 71:
					{
					alt94 = 5;
					}
					break;
				case 103:
					{
					alt94 = 6;
					}
					break;
				case 88:
					{
					alt94 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:429:26: '++'
					{
					DebugLocation(429, 26);
					string_literal258=(IToken)Match(input,76,Follow._76_in_suffix_expr3104); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_76.Add(string_literal258);



					{
					// AST REWRITE
					// elements: 76, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 429:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(429, 34);
						// SugarCpp.g:429:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(429, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(429, 48);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(429, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:430:14: '--'
					{
					DebugLocation(430, 14);
					string_literal259=(IToken)Match(input,80,Follow._80_in_suffix_expr3130); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_80.Add(string_literal259);



					{
					// AST REWRITE
					// elements: suffix_expr, 80
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 430:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(430, 22);
						// SugarCpp.g:430:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(430, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(430, 36);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(430, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:431:11: '.' ident
					{
					DebugLocation(431, 11);
					char_literal260=(IToken)Match(input,84,Follow._84_in_suffix_expr3153); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_84.Add(char_literal260);

					DebugLocation(431, 15);
					PushFollow(Follow._ident_in_suffix_expr3155);
					ident261=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident261.Tree);


					{
					// AST REWRITE
					// elements: 84, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 431:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(431, 24);
						// SugarCpp.g:431:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(431, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(431, 38);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(431, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(431, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:432:11: '->' ident
					{
					DebugLocation(432, 11);
					string_literal262=(IToken)Match(input,82,Follow._82_in_suffix_expr3180); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_82.Add(string_literal262);

					DebugLocation(432, 16);
					PushFollow(Follow._ident_in_suffix_expr3182);
					ident263=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident263.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 82
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 432:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(432, 25);
						// SugarCpp.g:432:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(432, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(432, 39);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(432, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(432, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:433:11: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(433, 11);
					// SugarCpp.g:433:11: ( generic_parameter )?
					int alt90=2;
					try { DebugEnterSubRule(90);
					try { DebugEnterDecision(90, false);
					int LA90_0 = input.LA(1);

					if ((LA90_0==92))
					{
						alt90 = 1;
					}
					} finally { DebugExitDecision(90); }
					switch (alt90)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:433:11: generic_parameter
						{
						DebugLocation(433, 11);
						PushFollow(Follow._generic_parameter_in_suffix_expr3207);
						generic_parameter264=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter264.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(90); }

					DebugLocation(433, 30);
					char_literal265=(IToken)Match(input,71,Follow._71_in_suffix_expr3210); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(char_literal265);

					DebugLocation(433, 34);
					// SugarCpp.g:433:34: ( expr_list )?
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, false);
					int LA91_0 = input.LA(1);

					if ((LA91_0==IDENT||LA91_0==NUMBER||LA91_0==STRING||LA91_0==64||LA91_0==69||LA91_0==71||LA91_0==73||(LA91_0>=75 && LA91_0<=76)||(LA91_0>=79 && LA91_0<=80)||LA91_0==104||LA91_0==122||LA91_0==133))
					{
						alt91 = 1;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:433:34: expr_list
						{
						DebugLocation(433, 34);
						PushFollow(Follow._expr_list_in_suffix_expr3212);
						expr_list266=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list266.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(91); }

					DebugLocation(433, 45);
					char_literal267=(IToken)Match(input,72,Follow._72_in_suffix_expr3215); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(char_literal267);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 433:49: -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(433, 52);
						// SugarCpp.g:433:52: ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(433, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(433, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(433, 77);
						// SugarCpp.g:433:77: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(433, 77);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(433, 96);
						// SugarCpp.g:433:96: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(433, 96);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:434:11: '[' ( expr_list )? ']'
					{
					DebugLocation(434, 11);
					char_literal268=(IToken)Match(input,103,Follow._103_in_suffix_expr3242); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(char_literal268);

					DebugLocation(434, 15);
					// SugarCpp.g:434:15: ( expr_list )?
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, false);
					int LA92_0 = input.LA(1);

					if ((LA92_0==IDENT||LA92_0==NUMBER||LA92_0==STRING||LA92_0==64||LA92_0==69||LA92_0==71||LA92_0==73||(LA92_0>=75 && LA92_0<=76)||(LA92_0>=79 && LA92_0<=80)||LA92_0==104||LA92_0==122||LA92_0==133))
					{
						alt92 = 1;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:434:15: expr_list
						{
						DebugLocation(434, 15);
						PushFollow(Follow._expr_list_in_suffix_expr3244);
						expr_list269=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list269.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(92); }

					DebugLocation(434, 26);
					char_literal270=(IToken)Match(input,105,Follow._105_in_suffix_expr3247); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal270);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 434:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(434, 33);
						// SugarCpp.g:434:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(434, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(434, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(434, 58);
						// SugarCpp.g:434:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(434, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:435:11: ':' ident '(' ( expr_list )? ')'
					{
					DebugLocation(435, 11);
					char_literal271=(IToken)Match(input,88,Follow._88_in_suffix_expr3271); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal271);

					DebugLocation(435, 15);
					PushFollow(Follow._ident_in_suffix_expr3273);
					ident272=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident272.Tree);
					DebugLocation(435, 21);
					char_literal273=(IToken)Match(input,71,Follow._71_in_suffix_expr3275); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(char_literal273);

					DebugLocation(435, 25);
					// SugarCpp.g:435:25: ( expr_list )?
					int alt93=2;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, false);
					int LA93_0 = input.LA(1);

					if ((LA93_0==IDENT||LA93_0==NUMBER||LA93_0==STRING||LA93_0==64||LA93_0==69||LA93_0==71||LA93_0==73||(LA93_0>=75 && LA93_0<=76)||(LA93_0>=79 && LA93_0<=80)||LA93_0==104||LA93_0==122||LA93_0==133))
					{
						alt93 = 1;
					}
					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:435:25: expr_list
						{
						DebugLocation(435, 25);
						PushFollow(Follow._expr_list_in_suffix_expr3277);
						expr_list274=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list274.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(93); }

					DebugLocation(435, 36);
					char_literal275=(IToken)Match(input,72,Follow._72_in_suffix_expr3280); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(char_literal275);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 435:40: -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
					{
						DebugLocation(435, 43);
						// SugarCpp.g:435:43: ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(435, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(435, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(435, 73);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(435, 79);
						// SugarCpp.g:435:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(435, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 61);
			LeaveRule("suffix_expr", 61);
			LeaveRule_suffix_expr();
			if (state.backtracking > 0) { Memoize(input, 61, suffix_expr_StartIndex); }

		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:439:1: atom_expr : ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 62);
		TraceIn("atom_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atom_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER276 = default(IToken);
		IToken STRING278 = default(IToken);
		IToken char_literal279 = default(IToken);
		IToken char_literal281 = default(IToken);
		IToken char_literal283 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr280 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr282 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER276_tree = default(CommonTree);
		CommonTree STRING278_tree = default(CommonTree);
		CommonTree char_literal279_tree = default(CommonTree);
		CommonTree char_literal281_tree = default(CommonTree);
		CommonTree char_literal283_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			bool more_than_one = false;

		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(439, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// SugarCpp.g:444:2: ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) )
			int alt96=4;
			try { DebugEnterDecision(96, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt96 = 1;
				}
				break;
			case IDENT:
				{
				alt96 = 2;
				}
				break;
			case STRING:
				{
				alt96 = 3;
				}
				break;
			case 71:
				{
				alt96 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:444:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(444, 4);
				NUMBER276=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr3324); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER276_tree = (CommonTree)adaptor.Create(NUMBER276);
				adaptor.AddChild(root_0, NUMBER276_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:445:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(445, 4);
				PushFollow(Follow._ident_in_atom_expr3329);
				ident277=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident277.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:446:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(446, 4);
				STRING278=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr3334); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING278_tree = (CommonTree)adaptor.Create(STRING278);
				adaptor.AddChild(root_0, STRING278_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:447:4: '(' expr ( ',' expr )* ')'
				{
				DebugLocation(447, 4);
				char_literal279=(IToken)Match(input,71,Follow._71_in_atom_expr3339); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_71.Add(char_literal279);

				DebugLocation(447, 8);
				PushFollow(Follow._expr_in_atom_expr3341);
				expr280=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr280.Tree);
				DebugLocation(447, 13);
				// SugarCpp.g:447:13: ( ',' expr )*
				try { DebugEnterSubRule(95);
				while (true)
				{
					int alt95=2;
					try { DebugEnterDecision(95, false);
					int LA95_0 = input.LA(1);

					if ((LA95_0==78))
					{
						alt95 = 1;
					}


					} finally { DebugExitDecision(95); }
					switch ( alt95 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:447:14: ',' expr
						{
						DebugLocation(447, 14);
						char_literal281=(IToken)Match(input,78,Follow._78_in_atom_expr3344); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_78.Add(char_literal281);

						DebugLocation(447, 18);
						PushFollow(Follow._expr_in_atom_expr3346);
						expr282=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr282.Tree);
						DebugLocation(447, 23);
						if (state.backtracking == 0)
						{
							 more_than_one = true; 
						}

						}
						break;

					default:
						goto loop95;
					}
				}

				loop95:
					;

				} finally { DebugExitSubRule(95); }

				DebugLocation(447, 52);
				char_literal283=(IToken)Match(input,72,Follow._72_in_atom_expr3353); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_72.Add(char_literal283);



				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 448:3: -> { more_than_one }? ^( Expr_Tuple ( expr )+ )
				if ( more_than_one )
				{
					DebugLocation(448, 25);
					// SugarCpp.g:448:25: ^( Expr_Tuple ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(448, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

					DebugLocation(448, 38);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(448, 38);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 449:3: -> ^( Expr_Bracket expr )
				{
					DebugLocation(449, 6);
					// SugarCpp.g:449:6: ^( Expr_Bracket expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(449, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

					DebugLocation(449, 21);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 62);
			LeaveRule("atom_expr", 62);
			LeaveRule_atom_expr();
			if (state.backtracking > 0) { Memoize(input, 62, atom_expr_StartIndex); }

		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:452:1: lvalue : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* ;
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 63);
		TraceIn("lvalue", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal284 = default(IToken);
		IToken string_literal285 = default(IToken);
		IToken char_literal286 = default(IToken);
		IToken string_literal288 = default(IToken);
		IToken char_literal291 = default(IToken);
		IToken char_literal293 = default(IToken);
		IToken char_literal294 = default(IToken);
		IToken char_literal296 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident289 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter290 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list292 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list295 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal284_tree = default(CommonTree);
		CommonTree string_literal285_tree = default(CommonTree);
		CommonTree char_literal286_tree = default(CommonTree);
		CommonTree string_literal288_tree = default(CommonTree);
		CommonTree char_literal291_tree = default(CommonTree);
		CommonTree char_literal293_tree = default(CommonTree);
		CommonTree char_literal294_tree = default(CommonTree);
		CommonTree char_literal296_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(452, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// SugarCpp.g:453:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:453:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			{
			DebugLocation(453, 4);
			// SugarCpp.g:453:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:453:5: a= lvalue_atom
			{
			DebugLocation(453, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue3390);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 453:19: -> $a
			{
				DebugLocation(453, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(453, 26);
			// SugarCpp.g:453:26: ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=7;
				try { DebugEnterDecision(100, false);
				switch (input.LA(1))
				{
				case 76:
					{
					alt100 = 1;
					}
					break;
				case 80:
					{
					alt100 = 2;
					}
					break;
				case 84:
					{
					alt100 = 3;
					}
					break;
				case 82:
					{
					alt100 = 4;
					}
					break;
				case 71:
				case 92:
					{
					alt100 = 5;
					}
					break;
				case 103:
					{
					alt100 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:453:28: '++'
					{
					DebugLocation(453, 28);
					string_literal284=(IToken)Match(input,76,Follow._76_in_lvalue3400); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_76.Add(string_literal284);



					{
					// AST REWRITE
					// elements: lvalue, 76
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 453:33: -> ^( Expr_Suffix '++' $lvalue)
					{
						DebugLocation(453, 36);
						// SugarCpp.g:453:36: ^( Expr_Suffix '++' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(453, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(453, 50);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(453, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:454:16: '--'
					{
					DebugLocation(454, 16);
					string_literal285=(IToken)Match(input,80,Follow._80_in_lvalue3428); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_80.Add(string_literal285);



					{
					// AST REWRITE
					// elements: 80, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 454:21: -> ^( Expr_Suffix '--' $lvalue)
					{
						DebugLocation(454, 24);
						// SugarCpp.g:454:24: ^( Expr_Suffix '--' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(454, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(454, 38);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(454, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:455:13: '.' ident
					{
					DebugLocation(455, 13);
					char_literal286=(IToken)Match(input,84,Follow._84_in_lvalue3453); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_84.Add(char_literal286);

					DebugLocation(455, 17);
					PushFollow(Follow._ident_in_lvalue3455);
					ident287=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident287.Tree);


					{
					// AST REWRITE
					// elements: lvalue, ident, 84
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 455:23: -> ^( Expr_Access '.' $lvalue ident )
					{
						DebugLocation(455, 26);
						// SugarCpp.g:455:26: ^( Expr_Access '.' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(455, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(455, 40);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(455, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(455, 52);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:456:13: '->' ident
					{
					DebugLocation(456, 13);
					string_literal288=(IToken)Match(input,82,Follow._82_in_lvalue3482); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_82.Add(string_literal288);

					DebugLocation(456, 18);
					PushFollow(Follow._ident_in_lvalue3484);
					ident289=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident289.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue, 82
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 456:24: -> ^( Expr_Access '->' $lvalue ident )
					{
						DebugLocation(456, 27);
						// SugarCpp.g:456:27: ^( Expr_Access '->' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(456, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(456, 41);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(456, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(456, 54);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:457:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(457, 13);
					// SugarCpp.g:457:13: ( generic_parameter )?
					int alt97=2;
					try { DebugEnterSubRule(97);
					try { DebugEnterDecision(97, false);
					int LA97_0 = input.LA(1);

					if ((LA97_0==92))
					{
						alt97 = 1;
					}
					} finally { DebugExitDecision(97); }
					switch (alt97)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:457:13: generic_parameter
						{
						DebugLocation(457, 13);
						PushFollow(Follow._generic_parameter_in_lvalue3511);
						generic_parameter290=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter290.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(97); }

					DebugLocation(457, 32);
					char_literal291=(IToken)Match(input,71,Follow._71_in_lvalue3514); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(char_literal291);

					DebugLocation(457, 36);
					// SugarCpp.g:457:36: ( expr_list )?
					int alt98=2;
					try { DebugEnterSubRule(98);
					try { DebugEnterDecision(98, false);
					int LA98_0 = input.LA(1);

					if ((LA98_0==IDENT||LA98_0==NUMBER||LA98_0==STRING||LA98_0==64||LA98_0==69||LA98_0==71||LA98_0==73||(LA98_0>=75 && LA98_0<=76)||(LA98_0>=79 && LA98_0<=80)||LA98_0==104||LA98_0==122||LA98_0==133))
					{
						alt98 = 1;
					}
					} finally { DebugExitDecision(98); }
					switch (alt98)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:457:36: expr_list
						{
						DebugLocation(457, 36);
						PushFollow(Follow._expr_list_in_lvalue3516);
						expr_list292=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list292.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(98); }

					DebugLocation(457, 47);
					char_literal293=(IToken)Match(input,72,Follow._72_in_lvalue3519); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(char_literal293);



					{
					// AST REWRITE
					// elements: lvalue, expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 457:51: -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(457, 54);
						// SugarCpp.g:457:54: ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(457, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(457, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(457, 74);
						// SugarCpp.g:457:74: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(457, 74);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(457, 93);
						// SugarCpp.g:457:93: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(457, 93);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:458:13: '[' ( expr_list )? ']'
					{
					DebugLocation(458, 13);
					char_literal294=(IToken)Match(input,103,Follow._103_in_lvalue3548); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(char_literal294);

					DebugLocation(458, 17);
					// SugarCpp.g:458:17: ( expr_list )?
					int alt99=2;
					try { DebugEnterSubRule(99);
					try { DebugEnterDecision(99, false);
					int LA99_0 = input.LA(1);

					if ((LA99_0==IDENT||LA99_0==NUMBER||LA99_0==STRING||LA99_0==64||LA99_0==69||LA99_0==71||LA99_0==73||(LA99_0>=75 && LA99_0<=76)||(LA99_0>=79 && LA99_0<=80)||LA99_0==104||LA99_0==122||LA99_0==133))
					{
						alt99 = 1;
					}
					} finally { DebugExitDecision(99); }
					switch (alt99)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:458:17: expr_list
						{
						DebugLocation(458, 17);
						PushFollow(Follow._expr_list_in_lvalue3550);
						expr_list295=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list295.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(99); }

					DebugLocation(458, 28);
					char_literal296=(IToken)Match(input,105,Follow._105_in_lvalue3553); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal296);



					{
					// AST REWRITE
					// elements: lvalue, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 458:32: -> ^( Expr_Dict $lvalue ( expr_list )? )
					{
						DebugLocation(458, 35);
						// SugarCpp.g:458:35: ^( Expr_Dict $lvalue ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(458, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(458, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(458, 55);
						// SugarCpp.g:458:55: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(458, 55);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 63);
			LeaveRule("lvalue", 63);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 63, lvalue_StartIndex); }

		}
		DebugLocation(460, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:462:1: lvalue_atom : ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 64);
		TraceIn("lvalue_atom", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_atom_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal297 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken char_literal301 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident302 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal297_tree = default(CommonTree);
		CommonTree char_literal299_tree = default(CommonTree);
		CommonTree char_literal301_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(462, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// SugarCpp.g:463:2: ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident )
			int alt103=2;
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==71))
			{
				alt103 = 1;
			}
			else if ((LA103_0==IDENT))
			{
				alt103 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:463:4: '(' ( lvalue ( ',' lvalue )* )? ')'
				{
				DebugLocation(463, 4);
				char_literal297=(IToken)Match(input,71,Follow._71_in_lvalue_atom3592); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_71.Add(char_literal297);

				DebugLocation(463, 8);
				// SugarCpp.g:463:8: ( lvalue ( ',' lvalue )* )?
				int alt102=2;
				try { DebugEnterSubRule(102);
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==IDENT||LA102_0==71))
				{
					alt102 = 1;
				}
				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:463:9: lvalue ( ',' lvalue )*
					{
					DebugLocation(463, 9);
					PushFollow(Follow._lvalue_in_lvalue_atom3595);
					lvalue298=lvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lvalue.Add(lvalue298.Tree);
					DebugLocation(463, 16);
					// SugarCpp.g:463:16: ( ',' lvalue )*
					try { DebugEnterSubRule(101);
					while (true)
					{
						int alt101=2;
						try { DebugEnterDecision(101, false);
						int LA101_0 = input.LA(1);

						if ((LA101_0==78))
						{
							alt101 = 1;
						}


						} finally { DebugExitDecision(101); }
						switch ( alt101 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:463:17: ',' lvalue
							{
							DebugLocation(463, 17);
							char_literal299=(IToken)Match(input,78,Follow._78_in_lvalue_atom3598); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_78.Add(char_literal299);

							DebugLocation(463, 21);
							PushFollow(Follow._lvalue_in_lvalue_atom3600);
							lvalue300=lvalue();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_lvalue.Add(lvalue300.Tree);

							}
							break;

						default:
							goto loop101;
						}
					}

					loop101:
						;

					} finally { DebugExitSubRule(101); }


					}
					break;

				}
				} finally { DebugExitSubRule(102); }

				DebugLocation(463, 32);
				char_literal301=(IToken)Match(input,72,Follow._72_in_lvalue_atom3606); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_72.Add(char_literal301);



				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 463:36: -> ^( Match_Tuple ( lvalue )* )
				{
					DebugLocation(463, 39);
					// SugarCpp.g:463:39: ^( Match_Tuple ( lvalue )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(463, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(463, 53);
					// SugarCpp.g:463:53: ( lvalue )*
					while ( stream_lvalue.HasNext )
					{
						DebugLocation(463, 53);
						adaptor.AddChild(root_1, stream_lvalue.NextTree());

					}
					stream_lvalue.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:464:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(464, 4);
				PushFollow(Follow._ident_in_lvalue_atom3620);
				ident302=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident302.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 64);
			LeaveRule("lvalue_atom", 64);
			LeaveRule_lvalue_atom();
			if (state.backtracking > 0) { Memoize(input, 64, lvalue_atom_StartIndex); }

		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:467:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 65);
		TraceIn("ident", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT303 = default(IToken);
		IToken string_literal304 = default(IToken);
		IToken IDENT305 = default(IToken);

		CommonTree IDENT303_tree = default(CommonTree);
		CommonTree string_literal304_tree = default(CommonTree);
		CommonTree IDENT305_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(467, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// SugarCpp.g:468:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:468:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(468, 4);
			IDENT303=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3631); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT303_tree = (CommonTree)adaptor.Create(IDENT303);
			adaptor.AddChild(root_0, IDENT303_tree);
			}
			DebugLocation(468, 10);
			// SugarCpp.g:468:10: ( '::' IDENT )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==89))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:468:11: '::' IDENT
					{
					DebugLocation(468, 11);
					string_literal304=(IToken)Match(input,89,Follow._89_in_ident3634); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal304_tree = (CommonTree)adaptor.Create(string_literal304);
					adaptor.AddChild(root_0, string_literal304_tree);
					}
					DebugLocation(468, 16);
					IDENT305=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3636); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT305_tree = (CommonTree)adaptor.Create(IDENT305);
					adaptor.AddChild(root_0, IDENT305_tree);
					}

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 65);
			LeaveRule("ident", 65);
			LeaveRule_ident();
			if (state.backtracking > 0) { Memoize(input, 65, ident_StartIndex); }

		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:471:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 66);
		TraceIn("infix_func", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_func_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal306 = default(IToken);
		IToken char_literal308 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident307 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal306_tree = default(CommonTree);
		CommonTree char_literal308_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(471, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// SugarCpp.g:472:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:472:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(472, 7);
			char_literal306=(IToken)Match(input,108,Follow._108_in_infix_func3649); if (state.failed) return retval;
			DebugLocation(472, 9);
			PushFollow(Follow._ident_in_infix_func3652);
			ident307=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident307.Tree);
			DebugLocation(472, 18);
			char_literal308=(IToken)Match(input,108,Follow._108_in_infix_func3654); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 66);
			LeaveRule("infix_func", 66);
			LeaveRule_infix_func();
			if (state.backtracking > 0) { Memoize(input, 66, infix_func_StartIndex); }

		}
		DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred22_SugarCpp_fragment();
	partial void LeaveRule_synpred22_SugarCpp_fragment();

	// $ANTLR start synpred22_SugarCpp
	public void synpred22_SugarCpp_fragment()
	{
		EnterRule_synpred22_SugarCpp_fragment();
		EnterRule("synpred22_SugarCpp_fragment", 88);
		TraceIn("synpred22_SugarCpp_fragment", 88);
		try
		{
			// SugarCpp.g:202:16: ()
			DebugEnterAlt(1);
			// SugarCpp.g:202:16: 
			{
			}

		}
		finally
		{
			TraceOut("synpred22_SugarCpp_fragment", 88);
			LeaveRule("synpred22_SugarCpp_fragment", 88);
			LeaveRule_synpred22_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred22_SugarCpp

	partial void EnterRule_synpred81_SugarCpp_fragment();
	partial void LeaveRule_synpred81_SugarCpp_fragment();

	// $ANTLR start synpred81_SugarCpp
	public void synpred81_SugarCpp_fragment()
	{
		EnterRule_synpred81_SugarCpp_fragment();
		EnterRule("synpred81_SugarCpp_fragment", 147);
		TraceIn("synpred81_SugarCpp_fragment", 147);
		try
		{
			// SugarCpp.g:317:16: ( ( NEWLINE )* linq_item )
			DebugEnterAlt(1);
			// SugarCpp.g:317:16: ( NEWLINE )* linq_item
			{
			DebugLocation(317, 16);
			// SugarCpp.g:317:16: ( NEWLINE )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==NEWLINE))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:317:16: NEWLINE
					{
					DebugLocation(317, 16);
					Match(input,NEWLINE,Follow._NEWLINE_in_synpred81_SugarCpp1780); if (state.failed) return;

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }

			DebugLocation(317, 25);
			PushFollow(Follow._linq_item_in_synpred81_SugarCpp1783);
			linq_item();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred81_SugarCpp_fragment", 147);
			LeaveRule("synpred81_SugarCpp_fragment", 147);
			LeaveRule_synpred81_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred81_SugarCpp

	partial void EnterRule_synpred88_SugarCpp_fragment();
	partial void LeaveRule_synpred88_SugarCpp_fragment();

	// $ANTLR start synpred88_SugarCpp
	public void synpred88_SugarCpp_fragment()
	{
		EnterRule_synpred88_SugarCpp_fragment();
		EnterRule("synpred88_SugarCpp_fragment", 154);
		TraceIn("synpred88_SugarCpp_fragment", 154);
		try
		{
			// SugarCpp.g:331:13: ()
			DebugEnterAlt(1);
			// SugarCpp.g:331:13: 
			{
			}

		}
		finally
		{
			TraceOut("synpred88_SugarCpp_fragment", 154);
			LeaveRule("synpred88_SugarCpp_fragment", 154);
			LeaveRule_synpred88_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred88_SugarCpp

	partial void EnterRule_synpred155_SugarCpp_fragment();
	partial void LeaveRule_synpred155_SugarCpp_fragment();

	// $ANTLR start synpred155_SugarCpp
	public void synpred155_SugarCpp_fragment()
	{
		EnterRule_synpred155_SugarCpp_fragment();
		EnterRule("synpred155_SugarCpp_fragment", 221);
		TraceIn("synpred155_SugarCpp_fragment", 221);
		try
		{
			// SugarCpp.g:433:11: ( ( generic_parameter )? '(' ( expr_list )? ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:433:11: ( generic_parameter )? '(' ( expr_list )? ')'
			{
			DebugLocation(433, 11);
			// SugarCpp.g:433:11: ( generic_parameter )?
			int alt134=2;
			try { DebugEnterSubRule(134);
			try { DebugEnterDecision(134, false);
			int LA134_0 = input.LA(1);

			if ((LA134_0==92))
			{
				alt134 = 1;
			}
			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:433:11: generic_parameter
				{
				DebugLocation(433, 11);
				PushFollow(Follow._generic_parameter_in_synpred155_SugarCpp3207);
				generic_parameter();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(134); }

			DebugLocation(433, 30);
			Match(input,71,Follow._71_in_synpred155_SugarCpp3210); if (state.failed) return;
			DebugLocation(433, 34);
			// SugarCpp.g:433:34: ( expr_list )?
			int alt135=2;
			try { DebugEnterSubRule(135);
			try { DebugEnterDecision(135, false);
			int LA135_0 = input.LA(1);

			if ((LA135_0==IDENT||LA135_0==NUMBER||LA135_0==STRING||LA135_0==64||LA135_0==69||LA135_0==71||LA135_0==73||(LA135_0>=75 && LA135_0<=76)||(LA135_0>=79 && LA135_0<=80)||LA135_0==104||LA135_0==122||LA135_0==133))
			{
				alt135 = 1;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:433:34: expr_list
				{
				DebugLocation(433, 34);
				PushFollow(Follow._expr_list_in_synpred155_SugarCpp3212);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(135); }

			DebugLocation(433, 45);
			Match(input,72,Follow._72_in_synpred155_SugarCpp3215); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred155_SugarCpp_fragment", 221);
			LeaveRule("synpred155_SugarCpp_fragment", 221);
			LeaveRule_synpred155_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred155_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA15 dfa15;
	private DFA21 dfa21;
	private DFA34 dfa34;
	private DFA43 dfa43;
	private DFA53 dfa53;
	private DFA68 dfa68;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa15 = new DFA15( this );
		dfa21 = new DFA21( this );
		dfa34 = new DFA34( this );
		dfa43 = new DFA43( this );
		dfa53 = new DFA53( this );
		dfa68 = new DFA68( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x30\xFFFF";
		private const string DFA4_eofS =
			"\x30\xFFFF";
		private const string DFA4_minS =
			"\x3\x1F\x7\xFFFF\x1\x47\x1\x1F\x1\xFFFF\x3\x1F\x1\x2A\x1\x1F\x1\x47\x3"+
			"\x48\x1\x47\x2\x1F\x1\x4E\x3\x1F\x4\x48\x1\x47\x3\x48\x2\x1F\x1\x4E\x1"+
			"\x1F\x5\x48\x1\x1F\x1\x48";
		private const string DFA4_maxS =
			"\x1\x85\x1\x1F\x1\x85\x7\xFFFF\x1\x69\x1\x1F\x1\xFFFF\x1\x1F\x1\x30\x1"+
			"\x1F\x1\x2A\x1\x85\x1\x69\x2\x4E\x1\x59\x1\x69\x1\x85\x1\x30\x1\x69\x2"+
			"\x1F\x1\x30\x2\x4E\x2\x59\x1\x69\x2\x4E\x1\x59\x1\x1F\x1\x30\x1\x69\x1"+
			"\x1F\x1\x59\x2\x4E\x2\x59\x1\x1F\x1\x59";
		private const string DFA4_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x2\xFFFF\x1\x4\x23"+
			"\xFFFF";
		private const string DFA4_specialS =
			"\x30\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x2\x47\xFFFF\x1\x1\x6\xFFFF\x1\x4\x2\xFFFF\x1\x5\x3\xFFFF\x1\x8"+
				"\x3\xFFFF\x1\x9\x4\xFFFF\x1\x7\x1\x6\x5\xFFFF\x1\x3",
				"\x1\xA",
				"\x1\x3\x25\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\xC"+
				"\x9\xFFFF\x1\xC\x1\xB\x1\xC\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x1D\xFFFF"+
				"\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xE\x6\xFFFF\x1\xF\xA\xFFFF\x1\xD\xF\xFFFF\x1\x10",
				"\x1\x11",
				"",
				"\x1\x12",
				"\x1\x15\xB\xFFFF\x1\x13\x4\xFFFF\x1\x14",
				"\x1\x16",
				"\x1\x17",
				"\x1\x3\x25\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\xC"+
				"\x9\xFFFF\x1\xC\x1\xB\x1\xC\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x1D\xFFFF"+
				"\x1\x3",
				"\x1\xE\x6\xFFFF\x1\xF\xA\xFFFF\x1\xD\xF\xFFFF\x1\x10",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x1A",
				"\x1\x1C\x6\xFFFF\x1\xF\xA\xFFFF\x1\x1B\xF\xFFFF\x1\x10",
				"\x1\x2\xA\xFFFF\x1\x17\x3C\xFFFF\x1\x1\x6\xFFFF\x1\x4\x2\xFFFF\x1\x5"+
				"\x13\xFFFF\x1\x3",
				"\x1\x1F\xB\xFFFF\x1\x1D\x4\xFFFF\x1\x1E",
				"\x1\xF\x1A\xFFFF\x1\x10",
				"\x1\x20",
				"\x1\x21",
				"\x1\x24\xB\xFFFF\x1\x22\x4\xFFFF\x1\x23",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x25",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x1A",
				"\x1\x1C\x6\xFFFF\x1\xF\xA\xFFFF\x1\x1B\xF\xFFFF\x1\x10",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x28",
				"\x1\x29",
				"\x1\x2C\xB\xFFFF\x1\x2A\x4\xFFFF\x1\x2B",
				"\x1\xF\x1A\xFFFF\x1\x10",
				"\x1\x2D",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x25",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x2E",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x28",
				"\x1\x2F",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x2E"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "174:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA15 : DFA
	{
		private const string DFA15_eotS =
			"\x2A\xFFFF";
		private const string DFA15_eofS =
			"\x2A\xFFFF";
		private const string DFA15_minS =
			"\x2\x1F\x1\x4E\x1\x47\x1\x1F\x2\xFFFF\x3\x1F\x1\x2A\x1\x4E\x1\x47\x3"+
			"\x48\x1\x47\x2\x1F\x1\x4E\x3\x1F\x4\x48\x1\x47\x3\x48\x2\x1F\x1\x4E\x1"+
			"\x1F\x5\x48\x1\x1F\x1\x48";
		private const string DFA15_maxS =
			"\x1\x67\x1\x1F\x1\x5A\x1\x69\x1\x1F\x2\xFFFF\x1\x1F\x1\x30\x1\x1F\x1"+
			"\x2A\x1\x5A\x1\x69\x2\x4E\x1\x59\x1\x69\x1\x67\x1\x30\x1\x69\x2\x1F\x1"+
			"\x30\x2\x4E\x2\x59\x1\x69\x2\x4E\x1\x59\x1\x1F\x1\x30\x1\x69\x1\x1F\x1"+
			"\x59\x2\x4E\x2\x59\x1\x1F\x1\x59";
		private const string DFA15_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2\x23\xFFFF";
		private const string DFA15_specialS =
			"\x2A\xFFFF}>";
		private static readonly string[] DFA15_transitionS =
			{
				"\x1\x2\x47\xFFFF\x1\x1",
				"\x1\x3",
				"\x1\x5\x9\xFFFF\x1\x5\x1\x4\x1\x6",
				"\x1\x8\x6\xFFFF\x1\x9\xA\xFFFF\x1\x7\xF\xFFFF\x1\xA",
				"\x1\xB",
				"",
				"",
				"\x1\xC",
				"\x1\xF\xB\xFFFF\x1\xD\x4\xFFFF\x1\xE",
				"\x1\x10",
				"\x1\x11",
				"\x1\x5\x9\xFFFF\x1\x5\x1\x4\x1\x6",
				"\x1\x8\x6\xFFFF\x1\x9\xA\xFFFF\x1\x7\xF\xFFFF\x1\xA",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x14",
				"\x1\x16\x6\xFFFF\x1\x9\xA\xFFFF\x1\x15\xF\xFFFF\x1\xA",
				"\x1\x2\xA\xFFFF\x1\x11\x3C\xFFFF\x1\x1",
				"\x1\x19\xB\xFFFF\x1\x17\x4\xFFFF\x1\x18",
				"\x1\x9\x1A\xFFFF\x1\xA",
				"\x1\x1A",
				"\x1\x1B",
				"\x1\x1E\xB\xFFFF\x1\x1C\x4\xFFFF\x1\x1D",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x1F",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x14",
				"\x1\x16\x6\xFFFF\x1\x9\xA\xFFFF\x1\x15\xF\xFFFF\x1\xA",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x22",
				"\x1\x23",
				"\x1\x26\xB\xFFFF\x1\x24\x4\xFFFF\x1\x25",
				"\x1\x9\x1A\xFFFF\x1\xA",
				"\x1\x27",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x1F",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x28",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x22",
				"\x1\x29",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x28"
			};

		private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
		private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
		private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
		private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
		private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
		private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
		private static readonly short[][] DFA15_transition;

		static DFA15()
		{
			int numStates = DFA15_transitionS.Length;
			DFA15_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
			}
		}

		public DFA15( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 15;
			this.eot = DFA15_eot;
			this.eof = DFA15_eof;
			this.min = DFA15_min;
			this.max = DFA15_max;
			this.accept = DFA15_accept;
			this.special = DFA15_special;
			this.transition = DFA15_transition;
		}

		public override string Description { get { return "199:1: global_alloc : ( ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )? | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA21 : DFA
	{
		private const string DFA21_eotS =
			"\x4\xFFFF";
		private const string DFA21_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA21_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA21_maxS =
			"\x1\x2A\x1\x85\x2\xFFFF";
		private const string DFA21_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA21_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA21_transitionS =
			{
				"\x1\x1",
				"\x1\x2\x16\xFFFF\x1\x2\x1\x3\x9\xFFFF\x1\x1\x3C\xFFFF\x1\x2\x6\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x2\x2\x5"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA21_eot = DFA.UnpackEncodedString(DFA21_eotS);
		private static readonly short[] DFA21_eof = DFA.UnpackEncodedString(DFA21_eofS);
		private static readonly char[] DFA21_min = DFA.UnpackEncodedStringToUnsignedChars(DFA21_minS);
		private static readonly char[] DFA21_max = DFA.UnpackEncodedStringToUnsignedChars(DFA21_maxS);
		private static readonly short[] DFA21_accept = DFA.UnpackEncodedString(DFA21_acceptS);
		private static readonly short[] DFA21_special = DFA.UnpackEncodedString(DFA21_specialS);
		private static readonly short[][] DFA21_transition;

		static DFA21()
		{
			int numStates = DFA21_transitionS.Length;
			DFA21_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA21_transition[i] = DFA.UnpackEncodedString(DFA21_transitionS[i]);
			}
		}

		public DFA21( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 21;
			this.eot = DFA21_eot;
			this.eof = DFA21_eof;
			this.min = DFA21_min;
			this.max = DFA21_max;
			this.accept = DFA21_accept;
			this.special = DFA21_special;
			this.transition = DFA21_transition;
		}

		public override string Description { get { return "215:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\x4\xFFFF";
		private const string DFA34_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA34_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA34_maxS =
			"\x1\x2A\x1\x85\x2\xFFFF";
		private const string DFA34_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA34_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x1",
				"\x1\x2\x16\xFFFF\x1\x2\x1\x3\x9\xFFFF\x1\x1\x3C\xFFFF\x1\x2\x6\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x2\x2\x5"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "227:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA43 : DFA
	{
		private const string DFA43_eotS =
			"\xF\xFFFF";
		private const string DFA43_eofS =
			"\xF\xFFFF";
		private const string DFA43_minS =
			"\x2\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x1\x1F\x1\x45\x3\x1F\x2\x45\x1\x1F\x1"+
			"\x45";
		private const string DFA43_maxS =
			"\x2\x85\x1\xFFFF\x1\x1F\x1\x63\x1\xFFFF\x1\x85\x1\x67\x2\x1F\x1\x85\x2"+
			"\x67\x1\x1F\x1\x67";
		private const string DFA43_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x1\x9\xFFFF";
		private const string DFA43_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA43_transitionS =
			{
				"\x1\x1\x65\xFFFF\x1\x2",
				"\x1\x5\x25\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\xF\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x4\xA\xFFFF\x1\x5\x1D\xFFFF\x1\x5",
				"",
				"\x1\x6",
				"\x1\x7\x43\xFFFF\x1\x5",
				"",
				"\x1\x5\x25\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\xF\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x4\xA\xFFFF\x1\x5\x1D\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\xB",
				"\x1\xC",
				"\x1\x5\x25\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\x1D\xFFFF\x1\x5"+
				"\x1D\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\xE",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5"
			};

		private static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
		private static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
		private static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
		private static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
		private static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
		private static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
		private static readonly short[][] DFA43_transition;

		static DFA43()
		{
			int numStates = DFA43_transitionS.Length;
			DFA43_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA43_transition[i] = DFA.UnpackEncodedString(DFA43_transitionS[i]);
			}
		}

		public DFA43( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}

		public override string Description { get { return "244:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\x9\xFFFF";
		private const string DFA53_eofS =
			"\x1\xFFFF\x1\x5\x6\xFFFF\x1\x5";
		private const string DFA53_minS =
			"\x1\x1F\x1\x2A\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x2A";
		private const string DFA53_maxS =
			"\x1\x7F\x1\x83\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x83";
		private const string DFA53_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA53_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x5\x33\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\x3",
				"\x1\x5\x18\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x2\x5\x3\xFFFF"+
				"\x1\x5\x17\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x18\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x2\x5\x3\xFFFF"+
				"\x1\x5\x17\xFFFF\x1\x5"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "262:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA68 : DFA
	{
		private const string DFA68_eotS =
			"\x6\xFFFF";
		private const string DFA68_eofS =
			"\x6\xFFFF";
		private const string DFA68_minS =
			"\x1\x1F\x1\x4E\x1\x1F\x2\xFFFF\x1\x4E";
		private const string DFA68_maxS =
			"\x1\x1F\x1\x5A\x1\x1F\x2\xFFFF\x1\x5A";
		private const string DFA68_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA68_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA68_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x9\xFFFF\x1\x3\x1\x2\x1\x4",
				"\x1\x5",
				"",
				"",
				"\x1\x3\x9\xFFFF\x1\x3\x1\x2\x1\x4"
			};

		private static readonly short[] DFA68_eot = DFA.UnpackEncodedString(DFA68_eotS);
		private static readonly short[] DFA68_eof = DFA.UnpackEncodedString(DFA68_eofS);
		private static readonly char[] DFA68_min = DFA.UnpackEncodedStringToUnsignedChars(DFA68_minS);
		private static readonly char[] DFA68_max = DFA.UnpackEncodedStringToUnsignedChars(DFA68_maxS);
		private static readonly short[] DFA68_accept = DFA.UnpackEncodedString(DFA68_acceptS);
		private static readonly short[] DFA68_special = DFA.UnpackEncodedString(DFA68_specialS);
		private static readonly short[][] DFA68_transition;

		static DFA68()
		{
			int numStates = DFA68_transitionS.Length;
			DFA68_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA68_transition[i] = DFA.UnpackEncodedString(DFA68_transitionS[i]);
			}
		}

		public DFA68( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 68;
			this.eot = DFA68_eot;
			this.eof = DFA68_eof;
			this.min = DFA68_min;
			this.max = DFA68_max;
			this.accept = DFA68_accept;
			this.special = DFA68_special;
			this.transition = DFA68_transition;
		}

		public override string Description { get { return "328:1: stmt_alloc : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )? | ident ':=' ^ modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root467 = new BitSet(new ulong[]{0x40080000000UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _global_block_in_root470 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block492 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block494 = new BitSet(new ulong[]{0x40080000002UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _func_def_in_node517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args574 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item585 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _71_in_attribute_item588 = new BitSet(new ulong[]{0x1080080000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item590 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_attribute_item593 = new BitSet(new ulong[]{0x1080080000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item595 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_attribute_item599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_attribute624 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _attribute_item_in_attribute626 = new BitSet(new ulong[]{0x0UL,0x20000004000UL});
		public static readonly BitSet _78_in_attribute629 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _attribute_item_in_attribute631 = new BitSet(new ulong[]{0x0UL,0x20000004000UL});
		public static readonly BitSet _105_in_attribute635 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute637 = new BitSet(new ulong[]{0x40000000002UL,0x8000000000UL});
		public static readonly BitSet _attribute_in_global_alloc656 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_list_in_global_alloc659 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_global_alloc661 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_global_alloc663 = new BitSet(new ulong[]{0x2UL,0x104000080UL});
		public static readonly BitSet _96_in_global_alloc668 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _90_in_global_alloc672 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_global_alloc675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_global_alloc734 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_global_alloc736 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_global_alloc738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_global_alloc789 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_global_alloc792 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_global_alloc794 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _modify_expr_in_global_alloc796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_import_def842 = new BitSet(new ulong[]{0x1040000000002UL});
		public static readonly BitSet _STRING_in_import_def844 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def848 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_import_def851 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def853 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _STRING_in_import_def858 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def860 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _DEDENT_in_import_def865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def887 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_enum_def890 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def892 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_enum_def894 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _ident_in_enum_def897 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_enum_def900 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def902 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _121_in_namespace_def935 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_namespace_def937 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def939 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_namespace_def942 = new BitSet(new ulong[]{0x40080000100UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_namespace_def944 = new BitSet(new ulong[]{0x40080000100UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _global_block_in_namespace_def947 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def971 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_class_def974 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def976 = new BitSet(new ulong[]{0x40000000002UL,0x11000080UL});
		public static readonly BitSet _generic_parameter_in_class_def979 = new BitSet(new ulong[]{0x40000000002UL,0x1000080UL});
		public static readonly BitSet _71_in_class_def984 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _func_args_in_class_def986 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_class_def988 = new BitSet(new ulong[]{0x40000000002UL,0x1000000UL});
		public static readonly BitSet _88_in_class_def993 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def995 = new BitSet(new ulong[]{0x40000000002UL,0x4000UL});
		public static readonly BitSet _78_in_class_def998 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def1000 = new BitSet(new ulong[]{0x40000000002UL,0x4000UL});
		public static readonly BitSet _NEWLINE_in_class_def1007 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_class_def1010 = new BitSet(new ulong[]{0x40080000100UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_class_def1012 = new BitSet(new ulong[]{0x40080000100UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _global_block_in_class_def1015 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_type_name_op1058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_type_name_op1062 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_type_name_op1064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_type_name_op1068 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_type_name1077 = new BitSet(new ulong[]{0x2UL,0x8010000220UL});
		public static readonly BitSet _92_in_type_name1080 = new BitSet(new ulong[]{0x80000000UL,0x800000000UL});
		public static readonly BitSet _type_name_in_type_name1083 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _78_in_type_name1086 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_type_name1088 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _99_in_type_name1094 = new BitSet(new ulong[]{0x2UL,0x8000000220UL});
		public static readonly BitSet _type_name_op_in_type_name1098 = new BitSet(new ulong[]{0x2UL,0x8000000220UL});
		public static readonly BitSet _92_in_generic_parameter1132 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_generic_parameter1134 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _78_in_generic_parameter1137 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_generic_parameter1139 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _99_in_generic_parameter1143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_func_args1163 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_func_args1166 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args1168 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _attribute_in_func_def1190 = new BitSet(new ulong[]{0x80000000UL,0x0UL,0x20UL});
		public static readonly BitSet _type_name_in_func_def1193 = new BitSet(new ulong[]{0x80000000UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_func_def1196 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_func_def1199 = new BitSet(new ulong[]{0x0UL,0x10000080UL});
		public static readonly BitSet _generic_parameter_in_func_def1201 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_func_def1204 = new BitSet(new ulong[]{0x80000000UL,0x100UL});
		public static readonly BitSet _func_args_in_func_def1206 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_func_def1209 = new BitSet(new ulong[]{0x40000000000UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1212 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _stmt_block_in_func_def1215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_func_def1264 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_func_def1266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1307 = new BitSet(new ulong[]{0x40080000100UL,0xF994800000000080UL,0x3UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1309 = new BitSet(new ulong[]{0x40080000100UL,0xF994800000000080UL,0x3UL});
		public static readonly BitSet _stmt_in_stmt_block1314 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1316 = new BitSet(new ulong[]{0x40080000100UL,0xF994800000000080UL,0x3UL});
		public static readonly BitSet _DEDENT_in_stmt_block1321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr1382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr1387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr1402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_stmt_defer1413 = new BitSet(new ulong[]{0x80000000UL,0xF994800000000080UL,0x3UL});
		public static readonly BitSet _stmt_in_stmt_defer1415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_stmt_typedef1434 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1436 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_stmt_typedef1438 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_stmt_using_item1463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_stmt_using1471 = new BitSet(new ulong[]{0x80000002UL,0x200000000000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1473 = new BitSet(new ulong[]{0x80000002UL,0x200000000000000UL});
		public static readonly BitSet _123_in_stmt_return1494 = new BitSet(new ulong[]{0x1080080000002UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_return1496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_if1517 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stmt_if1519 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_if1521 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_if1523 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1525 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_stmt_if1528 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_while1556 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stmt_while1558 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_while1560 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_while1562 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_stmt_while1579 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_stmt_for1605 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stmt_for1607 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_for1609 = new BitSet(new ulong[]{0x0UL,0x40000008000000UL});
		public static readonly BitSet _91_in_stmt_for1612 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_for1614 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_stmt_for1616 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_for1618 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _118_in_stmt_for1624 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_for1626 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_for1631 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_stmt_try1678 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1680 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_stmt_try1682 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stmt_try1684 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_try1686 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_try1688 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_linq_item1713 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_linq_item1715 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_linq_item1717 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_linq_item1719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_linq_item1734 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_linq_item1736 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_linq_item1738 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_linq_item1740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_linq_item1755 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_linq_item1757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _linq_item_in_linq_prefix1777 = new BitSet(new ulong[]{0x40000000000UL,0x1080000000000000UL,0x1UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix1780 = new BitSet(new ulong[]{0x40000000000UL,0x1080000000000000UL,0x1UL});
		public static readonly BitSet _linq_item_in_linq_prefix1783 = new BitSet(new ulong[]{0x40000000000UL,0x1080000000000000UL,0x1UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix1787 = new BitSet(new ulong[]{0x40000000002UL,0x1080000000000000UL,0x1UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq1810 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq1812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list1833 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_ident_list1836 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_ident_list1838 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc1860 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_stmt_alloc1862 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_stmt_alloc1864 = new BitSet(new ulong[]{0x2UL,0x104000080UL});
		public static readonly BitSet _96_in_stmt_alloc1869 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _90_in_stmt_alloc1873 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_alloc1876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_stmt_alloc1922 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_alloc1924 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_alloc1926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_alloc1969 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_stmt_alloc1971 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc1974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify1985 = new BitSet(new ulong[]{0x2UL,0x84140822448UL,0x8UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify1988 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _cond_expr_in_stmt_modify1991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_lambda_expr2015 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_lambda_expr2017 = new BitSet(new ulong[]{0x80000000UL,0x100UL});
		public static readonly BitSet _func_args_in_lambda_expr2019 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_lambda_expr2022 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_lambda_expr2024 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _lambda_expr_in_lambda_expr2026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr2042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr2100 = new BitSet(new ulong[]{0x2UL,0x84144822448UL,0x8UL});
		public static readonly BitSet _set_in_modify_expr2103 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _modify_expr_in_modify_expr2152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item2163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr2175 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _116_in_cond_expr2184 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2188 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_cond_expr2190 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr2225 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_or_expr2234 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _and_expr_in_or_expr2238 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _bit_or_in_and_expr2268 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _68_in_and_expr2277 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _bit_or_in_and_expr2281 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _bit_xor_in_bit_or2311 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_bit_or2320 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _bit_xor_in_bit_or2324 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _bit_and_in_bit_xor2354 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _106_in_bit_xor2363 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _bit_and_in_bit_xor2367 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2397 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_bit_and2406 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2410 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2451 = new BitSet(new ulong[]{0x2UL,0x200000002UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr2460 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_cmp_expr2514 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _cmp_expr_op_in_cmp_expr2523 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _shift_expr_in_cmp_expr2527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr2568 = new BitSet(new ulong[]{0x2UL,0x2020000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr2577 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _add_expr_in_shift_expr2581 = new BitSet(new ulong[]{0x2UL,0x2020000000UL});
		public static readonly BitSet _infix_expr_in_add_expr2611 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _75_in_add_expr2621 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _infix_expr_in_add_expr2625 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _79_in_add_expr2652 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _infix_expr_in_add_expr2656 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _mul_expr_in_infix_expr2696 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr2706 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _mul_expr_in_infix_expr2710 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _selector_expr_in_mul_expr2742 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _73_in_mul_expr2752 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _selector_expr_in_mul_expr2756 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _86_in_mul_expr2786 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _selector_expr_in_mul_expr2790 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _66_in_mul_expr2820 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _selector_expr_in_mul_expr2824 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _prefix_expr_in_selector_expr2867 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _83_in_selector_expr2877 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_selector_expr2881 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _85_in_selector_expr2909 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_selector_expr2914 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr2989 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr2991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_prefix_expr3007 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_prefix_expr3009 = new BitSet(new ulong[]{0x0UL,0x8000000080UL});
		public static readonly BitSet _71_in_prefix_expr3013 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019BA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_prefix_expr3015 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_prefix_expr3018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_prefix_expr3040 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_prefix_expr3042 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_prefix_expr3044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr3060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list3072 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_expr_list3075 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_expr_list3078 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr3094 = new BitSet(new ulong[]{0x2UL,0x8011151080UL});
		public static readonly BitSet _76_in_suffix_expr3104 = new BitSet(new ulong[]{0x2UL,0x8011151080UL});
		public static readonly BitSet _80_in_suffix_expr3130 = new BitSet(new ulong[]{0x2UL,0x8011151080UL});
		public static readonly BitSet _84_in_suffix_expr3153 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr3155 = new BitSet(new ulong[]{0x2UL,0x8011151080UL});
		public static readonly BitSet _82_in_suffix_expr3180 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr3182 = new BitSet(new ulong[]{0x2UL,0x8011151080UL});
		public static readonly BitSet _generic_parameter_in_suffix_expr3207 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_suffix_expr3210 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019BA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_suffix_expr3212 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_suffix_expr3215 = new BitSet(new ulong[]{0x2UL,0x8011151080UL});
		public static readonly BitSet _103_in_suffix_expr3242 = new BitSet(new ulong[]{0x1080080000000UL,0x400030000019AA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_suffix_expr3244 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_suffix_expr3247 = new BitSet(new ulong[]{0x2UL,0x8011151080UL});
		public static readonly BitSet _88_in_suffix_expr3271 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr3273 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_suffix_expr3275 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019BA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_suffix_expr3277 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_suffix_expr3280 = new BitSet(new ulong[]{0x2UL,0x8011151080UL});
		public static readonly BitSet _NUMBER_in_atom_expr3324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr3329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr3334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_atom_expr3339 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_atom_expr3341 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_atom_expr3344 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_atom_expr3346 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_atom_expr3353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue3390 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _76_in_lvalue3400 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _80_in_lvalue3428 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _84_in_lvalue3453 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_lvalue3455 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _82_in_lvalue3482 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_lvalue3484 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _generic_parameter_in_lvalue3511 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_lvalue3514 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019BA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_lvalue3516 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_lvalue3519 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _103_in_lvalue3548 = new BitSet(new ulong[]{0x1080080000000UL,0x400030000019AA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_lvalue3550 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_lvalue3553 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _71_in_lvalue_atom3592 = new BitSet(new ulong[]{0x80000000UL,0x180UL});
		public static readonly BitSet _lvalue_in_lvalue_atom3595 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_lvalue_atom3598 = new BitSet(new ulong[]{0x80000000UL,0x80UL});
		public static readonly BitSet _lvalue_in_lvalue_atom3600 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_lvalue_atom3606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_lvalue_atom3620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident3631 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_ident3634 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident3636 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _108_in_infix_func3649 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_infix_func3652 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_infix_func3654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_synpred81_SugarCpp1780 = new BitSet(new ulong[]{0x40000000000UL,0x1080000000000000UL,0x1UL});
		public static readonly BitSet _linq_item_in_synpred81_SugarCpp1783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_parameter_in_synpred155_SugarCpp3207 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_synpred155_SugarCpp3210 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019BA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_synpred155_SugarCpp3212 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_synpred155_SugarCpp3215 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
