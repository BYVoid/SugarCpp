//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-04-29 15:51:23

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "INT", "Ident_List", "Import", "Infix_Func", "Left_Bracket", "Match_Tuple", "NEWLINE", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_If", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Struct", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "']'", "'^'", "'^='", "'else'", "'enum'", "'if'", "'import'", "'namespace'", "'new'", "'return'", "'struct'", "'typedef'", "'using'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Enum=7;
	public const int Expr_Access=8;
	public const int Expr_Alloc=9;
	public const int Expr_Bin=10;
	public const int Expr_Block=11;
	public const int Expr_Call=12;
	public const int Expr_Call_With=13;
	public const int Expr_Cond=14;
	public const int Expr_Dict=15;
	public const int Expr_Infix=16;
	public const int Expr_Lambda=17;
	public const int Expr_New_Array=18;
	public const int Expr_New_Type=19;
	public const int Expr_Prefix=20;
	public const int Expr_Return=21;
	public const int Expr_Suffix=22;
	public const int Expr_Tuple=23;
	public const int Func_Args=24;
	public const int Func_Def=25;
	public const int IDENT=26;
	public const int INDENT=27;
	public const int INT=28;
	public const int Ident_List=29;
	public const int Import=30;
	public const int Infix_Func=31;
	public const int Left_Bracket=32;
	public const int Match_Tuple=33;
	public const int NEWLINE=34;
	public const int Namespace=35;
	public const int Right_Bracket=36;
	public const int Root=37;
	public const int SP=38;
	public const int STRING=39;
	public const int Stmt_Block=40;
	public const int Stmt_If=41;
	public const int Stmt_Typedef=42;
	public const int Stmt_Using=43;
	public const int Stmt_While=44;
	public const int Struct=45;
	public const int Type_IDENT=46;
	public const int Type_Ref=47;
	public const int Type_Tuple=48;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:138:8: public root : overall_block ( NEWLINE )* EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE2 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE2_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(138, 1);
		try
		{
			// SugarCpp.g:139:2: ( overall_block ( NEWLINE )* EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:139:4: overall_block ( NEWLINE )* EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(139, 4);
			PushFollow(Follow._overall_block_in_root362);
			overall_block1=overall_block();
			PopFollow();

			adaptor.AddChild(root_0, overall_block1.Tree);
			DebugLocation(139, 19);
			// SugarCpp.g:139:19: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:139:19: NEWLINE
					{
					DebugLocation(139, 19);
					NEWLINE2=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root365); 
					NEWLINE2_tree = (CommonTree)adaptor.Create(NEWLINE2);
					adaptor.AddChild(root_0, NEWLINE2_tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(139, 28);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root368); 
			EOF3_tree = (CommonTree)adaptor.Create(EOF3);
			adaptor.AddChild(root_0, EOF3_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_overall_block();
	partial void LeaveRule_overall_block();

	// $ANTLR start "overall_block"
	// SugarCpp.g:142:1: overall_block : ( ( NEWLINE )* node )+ ;
	[GrammarRule("overall_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> overall_block()
	{
		EnterRule_overall_block();
		EnterRule("overall_block", 2);
		TraceIn("overall_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE4 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE4_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "overall_block");
		DebugLocation(142, 1);
		try
		{
			// SugarCpp.g:143:2: ( ( ( NEWLINE )* node )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:143:4: ( ( NEWLINE )* node )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(143, 4);
			// SugarCpp.g:143:4: ( ( NEWLINE )* node )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:143:5: ( NEWLINE )* node
					{
					DebugLocation(143, 5);
					// SugarCpp.g:143:5: ( NEWLINE )*
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch ( alt2 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:143:5: NEWLINE
							{
							DebugLocation(143, 5);
							NEWLINE4=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_overall_block380); 
							NEWLINE4_tree = (CommonTree)adaptor.Create(NEWLINE4);
							adaptor.AddChild(root_0, NEWLINE4_tree);

							}
							break;

						default:
							goto loop2;
						}
					}

					loop2:
						;

					} finally { DebugExitSubRule(2); }

					DebugLocation(143, 14);
					PushFollow(Follow._node_in_overall_block383);
					node5=node();
					PopFollow();

					adaptor.AddChild(root_0, node5.Tree);

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overall_block", 2);
			LeaveRule("overall_block", 2);
			LeaveRule_overall_block();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "overall_block"); }
		return retval;

	}
	// $ANTLR end "overall_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:146:1: node : ( func_def | import_def | enum_def | struct_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> struct_def9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(146, 1);
		try
		{
			// SugarCpp.g:147:2: ( func_def | import_def | enum_def | struct_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				int LA4_1 = input.LA(2);

				if ((LA4_1==IDENT||LA4_1==54||LA4_1==58||LA4_1==76))
				{
					alt4 = 1;
				}
				else if ((LA4_1==63||LA4_1==73))
				{
					alt4 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 94:
				{
				alt4 = 2;
				}
				break;
			case 92:
				{
				alt4 = 3;
				}
				break;
			case 98:
				{
				alt4 = 4;
				}
				break;
			case 95:
				{
				alt4 = 5;
				}
				break;
			case 100:
				{
				alt4 = 7;
				}
				break;
			case 99:
				{
				alt4 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:147:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(147, 4);
				PushFollow(Follow._func_def_in_node396);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:148:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(148, 4);
				PushFollow(Follow._import_def_in_node401);
				import_def7=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:149:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(149, 4);
				PushFollow(Follow._enum_def_in_node406);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:150:4: struct_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(150, 4);
				PushFollow(Follow._struct_def_in_node411);
				struct_def9=struct_def();
				PopFollow();

				adaptor.AddChild(root_0, struct_def9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:151:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(151, 4);
				PushFollow(Follow._namespace_def_in_node416);
				namespace_def10=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:152:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(152, 4);
				PushFollow(Follow._stmt_alloc_in_node421);
				stmt_alloc11=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:153:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(153, 4);
				PushFollow(Follow._stmt_using_in_node426);
				stmt_using12=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:154:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(154, 4);
				PushFollow(Follow._stmt_typedef_in_node431);
				stmt_typedef13=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:157:1: import_def : 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 4);
		TraceIn("import_def", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal14 = default(IToken);
		IToken STRING15 = default(IToken);
		IToken INDENT16 = default(IToken);
		IToken NEWLINE17 = default(IToken);
		IToken STRING18 = default(IToken);
		IToken NEWLINE19 = default(IToken);
		IToken DEDENT20 = default(IToken);

		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		CommonTree INDENT16_tree = default(CommonTree);
		CommonTree NEWLINE17_tree = default(CommonTree);
		CommonTree STRING18_tree = default(CommonTree);
		CommonTree NEWLINE19_tree = default(CommonTree);
		CommonTree DEDENT20_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(157, 1);
		try
		{
			// SugarCpp.g:158:2: ( 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:158:4: 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			{
			DebugLocation(158, 4);
			string_literal14=(IToken)Match(input,94,Follow._94_in_import_def442);  
			stream_94.Add(string_literal14);

			DebugLocation(158, 13);
			// SugarCpp.g:158:13: ( STRING )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==STRING))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:158:13: STRING
				{
				DebugLocation(158, 13);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_import_def444);  
				stream_STRING.Add(STRING15);


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(158, 21);
			// SugarCpp.g:158:21: ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==INDENT))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:158:22: INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT
				{
				DebugLocation(158, 22);
				INDENT16=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def448);  
				stream_INDENT.Add(INDENT16);

				DebugLocation(158, 29);
				// SugarCpp.g:158:29: ( ( NEWLINE )+ STRING )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					try
					{
						alt7 = dfa7.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:158:30: ( NEWLINE )+ STRING
						{
						DebugLocation(158, 30);
						// SugarCpp.g:158:30: ( NEWLINE )+
						int cnt6=0;
						try { DebugEnterSubRule(6);
						while (true)
						{
							int alt6=2;
							try { DebugEnterDecision(6, false);
							int LA6_0 = input.LA(1);

							if ((LA6_0==NEWLINE))
							{
								alt6 = 1;
							}


							} finally { DebugExitDecision(6); }
							switch (alt6)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:158:30: NEWLINE
								{
								DebugLocation(158, 30);
								NEWLINE17=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def451);  
								stream_NEWLINE.Add(NEWLINE17);


								}
								break;

							default:
								if (cnt6 >= 1)
									goto loop6;

								EarlyExitException eee6 = new EarlyExitException( 6, input );
								DebugRecognitionException(eee6);
								throw eee6;
							}
							cnt6++;
						}
						loop6:
							;

						} finally { DebugExitSubRule(6); }

						DebugLocation(158, 39);
						STRING18=(IToken)Match(input,STRING,Follow._STRING_in_import_def454);  
						stream_STRING.Add(STRING18);


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(158, 48);
				// SugarCpp.g:158:48: ( NEWLINE )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0==NEWLINE))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:158:48: NEWLINE
						{
						DebugLocation(158, 48);
						NEWLINE19=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def458);  
						stream_NEWLINE.Add(NEWLINE19);


						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(158, 57);
				DEDENT20=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def461);  
				stream_DEDENT.Add(DEDENT20);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 158:66: -> ^( Import ( STRING )* )
			{
				DebugLocation(158, 69);
				// SugarCpp.g:158:69: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(158, 71);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(158, 78);
				// SugarCpp.g:158:78: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(158, 78);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 4);
			LeaveRule("import_def", 4);
			LeaveRule_import_def();
		}
		DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:161:1: enum_def : 'enum' IDENT '=' IDENT ( '|' IDENT )* -> ^( Enum ( IDENT )+ ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 5);
		TraceIn("enum_def", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal21 = default(IToken);
		IToken IDENT22 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken IDENT24 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken IDENT26 = default(IToken);

		CommonTree string_literal21_tree = default(CommonTree);
		CommonTree IDENT22_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree IDENT24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree IDENT26_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(161, 1);
		try
		{
			// SugarCpp.g:162:2: ( 'enum' IDENT '=' IDENT ( '|' IDENT )* -> ^( Enum ( IDENT )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:162:4: 'enum' IDENT '=' IDENT ( '|' IDENT )*
			{
			DebugLocation(162, 4);
			string_literal21=(IToken)Match(input,92,Follow._92_in_enum_def483);  
			stream_92.Add(string_literal21);

			DebugLocation(162, 11);
			IDENT22=(IToken)Match(input,IDENT,Follow._IDENT_in_enum_def485);  
			stream_IDENT.Add(IDENT22);

			DebugLocation(162, 17);
			char_literal23=(IToken)Match(input,80,Follow._80_in_enum_def487);  
			stream_80.Add(char_literal23);

			DebugLocation(162, 21);
			IDENT24=(IToken)Match(input,IDENT,Follow._IDENT_in_enum_def489);  
			stream_IDENT.Add(IDENT24);

			DebugLocation(162, 27);
			// SugarCpp.g:162:27: ( '|' IDENT )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==101))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:162:28: '|' IDENT
					{
					DebugLocation(162, 28);
					char_literal25=(IToken)Match(input,101,Follow._101_in_enum_def492);  
					stream_101.Add(char_literal25);

					DebugLocation(162, 32);
					IDENT26=(IToken)Match(input,IDENT,Follow._IDENT_in_enum_def494);  
					stream_IDENT.Add(IDENT26);


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 162:40: -> ^( Enum ( IDENT )+ )
			{
				DebugLocation(162, 43);
				// SugarCpp.g:162:43: ^( Enum ( IDENT )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(162, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(162, 50);
				if (!(stream_IDENT.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_IDENT.HasNext )
				{
					DebugLocation(162, 50);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

				}
				stream_IDENT.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 5);
			LeaveRule("enum_def", 5);
			LeaveRule_enum_def();
		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:165:1: namespace_def : 'namespace' IDENT INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace IDENT overall_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 6);
		TraceIn("namespace_def", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal27 = default(IToken);
		IToken IDENT28 = default(IToken);
		IToken INDENT29 = default(IToken);
		IToken NEWLINE31 = default(IToken);
		IToken DEDENT32 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal27_tree = default(CommonTree);
		CommonTree IDENT28_tree = default(CommonTree);
		CommonTree INDENT29_tree = default(CommonTree);
		CommonTree NEWLINE31_tree = default(CommonTree);
		CommonTree DEDENT32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_overall_block=new RewriteRuleSubtreeStream(adaptor,"rule overall_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(165, 1);
		try
		{
			// SugarCpp.g:166:2: ( 'namespace' IDENT INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace IDENT overall_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:166:4: 'namespace' IDENT INDENT overall_block ( NEWLINE )* DEDENT
			{
			DebugLocation(166, 4);
			string_literal27=(IToken)Match(input,95,Follow._95_in_namespace_def516);  
			stream_95.Add(string_literal27);

			DebugLocation(166, 16);
			IDENT28=(IToken)Match(input,IDENT,Follow._IDENT_in_namespace_def518);  
			stream_IDENT.Add(IDENT28);

			DebugLocation(166, 22);
			INDENT29=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def520);  
			stream_INDENT.Add(INDENT29);

			DebugLocation(166, 29);
			PushFollow(Follow._overall_block_in_namespace_def522);
			overall_block30=overall_block();
			PopFollow();

			stream_overall_block.Add(overall_block30.Tree);
			DebugLocation(166, 43);
			// SugarCpp.g:166:43: ( NEWLINE )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:166:43: NEWLINE
					{
					DebugLocation(166, 43);
					NEWLINE31=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def524);  
					stream_NEWLINE.Add(NEWLINE31);


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(166, 52);
			DEDENT32=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def527);  
			stream_DEDENT.Add(DEDENT32);



			{
			// AST REWRITE
			// elements: overall_block, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 166:59: -> ^( Namespace IDENT overall_block )
			{
				DebugLocation(166, 62);
				// SugarCpp.g:166:62: ^( Namespace IDENT overall_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(166, 64);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(166, 74);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(166, 80);
				adaptor.AddChild(root_1, stream_overall_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 6);
			LeaveRule("namespace_def", 6);
			LeaveRule_namespace_def();
		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_struct_def();
	partial void LeaveRule_struct_def();

	// $ANTLR start "struct_def"
	// SugarCpp.g:169:1: struct_def : 'struct' IDENT INDENT overall_block ( NEWLINE )* DEDENT -> ^( Struct IDENT overall_block ) ;
	[GrammarRule("struct_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> struct_def()
	{
		EnterRule_struct_def();
		EnterRule("struct_def", 7);
		TraceIn("struct_def", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal33 = default(IToken);
		IToken IDENT34 = default(IToken);
		IToken INDENT35 = default(IToken);
		IToken NEWLINE37 = default(IToken);
		IToken DEDENT38 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block36 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal33_tree = default(CommonTree);
		CommonTree IDENT34_tree = default(CommonTree);
		CommonTree INDENT35_tree = default(CommonTree);
		CommonTree NEWLINE37_tree = default(CommonTree);
		CommonTree DEDENT38_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_overall_block=new RewriteRuleSubtreeStream(adaptor,"rule overall_block");
		try { DebugEnterRule(GrammarFileName, "struct_def");
		DebugLocation(169, 1);
		try
		{
			// SugarCpp.g:170:2: ( 'struct' IDENT INDENT overall_block ( NEWLINE )* DEDENT -> ^( Struct IDENT overall_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:170:4: 'struct' IDENT INDENT overall_block ( NEWLINE )* DEDENT
			{
			DebugLocation(170, 4);
			string_literal33=(IToken)Match(input,98,Follow._98_in_struct_def548);  
			stream_98.Add(string_literal33);

			DebugLocation(170, 13);
			IDENT34=(IToken)Match(input,IDENT,Follow._IDENT_in_struct_def550);  
			stream_IDENT.Add(IDENT34);

			DebugLocation(170, 19);
			INDENT35=(IToken)Match(input,INDENT,Follow._INDENT_in_struct_def552);  
			stream_INDENT.Add(INDENT35);

			DebugLocation(170, 26);
			PushFollow(Follow._overall_block_in_struct_def554);
			overall_block36=overall_block();
			PopFollow();

			stream_overall_block.Add(overall_block36.Tree);
			DebugLocation(170, 40);
			// SugarCpp.g:170:40: ( NEWLINE )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==NEWLINE))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:170:40: NEWLINE
					{
					DebugLocation(170, 40);
					NEWLINE37=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_struct_def556);  
					stream_NEWLINE.Add(NEWLINE37);


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(170, 49);
			DEDENT38=(IToken)Match(input,DEDENT,Follow._DEDENT_in_struct_def559);  
			stream_DEDENT.Add(DEDENT38);



			{
			// AST REWRITE
			// elements: overall_block, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 170:56: -> ^( Struct IDENT overall_block )
			{
				DebugLocation(170, 59);
				// SugarCpp.g:170:59: ^( Struct IDENT overall_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(170, 61);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Struct, "Struct"), root_1);

				DebugLocation(170, 68);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(170, 74);
				adaptor.AddChild(root_1, stream_overall_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_def", 7);
			LeaveRule("struct_def", 7);
			LeaveRule_struct_def();
		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_def"); }
		return retval;

	}
	// $ANTLR end "struct_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:173:1: type_name : IDENT ( '<' ( type_name ( ',' type_name )* )? '>' )? ( '*' )* ( '&' )? -> ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( '*' )* ( '&' )? ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 8);
		TraceIn("type_name", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT39 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken char_literal45 = default(IToken);
		IToken char_literal46 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name43 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT39_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(173, 1);
		try
		{
			// SugarCpp.g:174:2: ( IDENT ( '<' ( type_name ( ',' type_name )* )? '>' )? ( '*' )* ( '&' )? -> ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( '*' )* ( '&' )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:174:4: IDENT ( '<' ( type_name ( ',' type_name )* )? '>' )? ( '*' )* ( '&' )?
			{
			DebugLocation(174, 4);
			IDENT39=(IToken)Match(input,IDENT,Follow._IDENT_in_type_name580);  
			stream_IDENT.Add(IDENT39);

			DebugLocation(174, 10);
			// SugarCpp.g:174:10: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==76))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:174:11: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(174, 11);
				char_literal40=(IToken)Match(input,76,Follow._76_in_type_name583);  
				stream_76.Add(char_literal40);

				DebugLocation(174, 15);
				// SugarCpp.g:174:15: ( type_name ( ',' type_name )* )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==IDENT))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:174:16: type_name ( ',' type_name )*
					{
					DebugLocation(174, 16);
					PushFollow(Follow._type_name_in_type_name586);
					type_name41=type_name();
					PopFollow();

					stream_type_name.Add(type_name41.Tree);
					DebugLocation(174, 26);
					// SugarCpp.g:174:26: ( ',' type_name )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if ((LA13_0==63))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:174:27: ',' type_name
							{
							DebugLocation(174, 27);
							char_literal42=(IToken)Match(input,63,Follow._63_in_type_name589);  
							stream_63.Add(char_literal42);

							DebugLocation(174, 31);
							PushFollow(Follow._type_name_in_type_name591);
							type_name43=type_name();
							PopFollow();

							stream_type_name.Add(type_name43.Tree);

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }


					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(174, 45);
				char_literal44=(IToken)Match(input,83,Follow._83_in_type_name597);  
				stream_83.Add(char_literal44);


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(174, 51);
			// SugarCpp.g:174:51: ( '*' )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==58))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:174:51: '*'
					{
					DebugLocation(174, 51);
					char_literal45=(IToken)Match(input,58,Follow._58_in_type_name601);  
					stream_58.Add(char_literal45);


					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(174, 56);
			// SugarCpp.g:174:56: ( '&' )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==54))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:174:56: '&'
				{
				DebugLocation(174, 56);
				char_literal46=(IToken)Match(input,54,Follow._54_in_type_name604);  
				stream_54.Add(char_literal46);


				}
				break;

			}
			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: 76, 58, 83, 54, type_name, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 174:61: -> ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( '*' )* ( '&' )? )
			{
				DebugLocation(174, 64);
				// SugarCpp.g:174:64: ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( '*' )* ( '&' )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(174, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(174, 77);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(174, 83);
				// SugarCpp.g:174:83: ( '<' ( type_name )* '>' )?
				if (stream_76.HasNext||stream_83.HasNext||stream_type_name.HasNext)
				{
					DebugLocation(174, 84);
					adaptor.AddChild(root_1, stream_76.NextNode());
					DebugLocation(174, 88);
					// SugarCpp.g:174:88: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(174, 88);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(174, 99);
					adaptor.AddChild(root_1, stream_83.NextNode());

				}
				stream_76.Reset();
				stream_83.Reset();
				stream_type_name.Reset();
				DebugLocation(174, 106);
				// SugarCpp.g:174:106: ( '*' )*
				while ( stream_58.HasNext )
				{
					DebugLocation(174, 106);
					adaptor.AddChild(root_1, stream_58.NextNode());

				}
				stream_58.Reset();
				DebugLocation(174, 111);
				// SugarCpp.g:174:111: ( '&' )?
				if (stream_54.HasNext)
				{
					DebugLocation(174, 111);
					adaptor.AddChild(root_1, stream_54.NextNode());

				}
				stream_54.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 8);
			LeaveRule("type_name", 8);
			LeaveRule_type_name();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:177:1: generic_parameter : IDENT ( ',' ! IDENT )* ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 9);
		TraceIn("generic_parameter", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT47 = default(IToken);
		IToken char_literal48 = default(IToken);
		IToken IDENT49 = default(IToken);

		CommonTree IDENT47_tree = default(CommonTree);
		CommonTree char_literal48_tree = default(CommonTree);
		CommonTree IDENT49_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(177, 1);
		try
		{
			// SugarCpp.g:178:2: ( IDENT ( ',' ! IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:178:4: IDENT ( ',' ! IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(178, 4);
			IDENT47=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter641); 
			IDENT47_tree = (CommonTree)adaptor.Create(IDENT47);
			adaptor.AddChild(root_0, IDENT47_tree);
			DebugLocation(178, 10);
			// SugarCpp.g:178:10: ( ',' ! IDENT )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==63))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:178:11: ',' ! IDENT
					{
					DebugLocation(178, 14);
					char_literal48=(IToken)Match(input,63,Follow._63_in_generic_parameter644); 
					DebugLocation(178, 16);
					IDENT49=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter647); 
					IDENT49_tree = (CommonTree)adaptor.Create(IDENT49);
					adaptor.AddChild(root_0, IDENT49_tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 9);
			LeaveRule("generic_parameter", 9);
			LeaveRule_generic_parameter();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:181:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 10);
		TraceIn("func_args", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal51 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal51_tree = default(CommonTree);
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(181, 1);
		try
		{
			// SugarCpp.g:182:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:182:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(182, 4);
			PushFollow(Follow._stmt_alloc_in_func_args660);
			stmt_alloc50=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc50.Tree);
			DebugLocation(182, 15);
			// SugarCpp.g:182:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==63))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:182:16: ',' stmt_alloc
					{
					DebugLocation(182, 16);
					char_literal51=(IToken)Match(input,63,Follow._63_in_func_args663);  
					stream_63.Add(char_literal51);

					DebugLocation(182, 20);
					PushFollow(Follow._stmt_alloc_in_func_args665);
					stmt_alloc52=stmt_alloc();
					PopFollow();

					stream_stmt_alloc.Add(stmt_alloc52.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 182:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(182, 36);
				// SugarCpp.g:182:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(182, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(182, 48);
				// SugarCpp.g:182:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(182, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 10);
			LeaveRule("func_args", 10);
			LeaveRule_func_args();
		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:185:1: func_def : type_name IDENT ( '<' generic_parameter '>' )? '(' ( func_args )? ')' stmt_block ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 11);
		TraceIn("func_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT54 = default(IToken);
		IToken char_literal55 = default(IToken);
		IToken char_literal57 = default(IToken);
		IToken char_literal58 = default(IToken);
		IToken char_literal60 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT54_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree char_literal57_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		CommonTree char_literal60_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(185, 4);
		try
		{
			// SugarCpp.g:186:2: ( type_name IDENT ( '<' generic_parameter '>' )? '(' ( func_args )? ')' stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:186:4: type_name IDENT ( '<' generic_parameter '>' )? '(' ( func_args )? ')' stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(186, 4);
			PushFollow(Follow._type_name_in_func_def687);
			type_name53=type_name();
			PopFollow();

			adaptor.AddChild(root_0, type_name53.Tree);
			DebugLocation(186, 14);
			IDENT54=(IToken)Match(input,IDENT,Follow._IDENT_in_func_def689); 
			IDENT54_tree = (CommonTree)adaptor.Create(IDENT54);
			adaptor.AddChild(root_0, IDENT54_tree);
			DebugLocation(186, 20);
			// SugarCpp.g:186:20: ( '<' generic_parameter '>' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==76))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:186:21: '<' generic_parameter '>'
				{
				DebugLocation(186, 21);
				char_literal55=(IToken)Match(input,76,Follow._76_in_func_def692); 
				char_literal55_tree = (CommonTree)adaptor.Create(char_literal55);
				adaptor.AddChild(root_0, char_literal55_tree);
				DebugLocation(186, 25);
				PushFollow(Follow._generic_parameter_in_func_def694);
				generic_parameter56=generic_parameter();
				PopFollow();

				adaptor.AddChild(root_0, generic_parameter56.Tree);
				DebugLocation(186, 43);
				char_literal57=(IToken)Match(input,83,Follow._83_in_func_def696); 
				char_literal57_tree = (CommonTree)adaptor.Create(char_literal57);
				adaptor.AddChild(root_0, char_literal57_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(186, 49);
			char_literal58=(IToken)Match(input,56,Follow._56_in_func_def700); 
			char_literal58_tree = (CommonTree)adaptor.Create(char_literal58);
			adaptor.AddChild(root_0, char_literal58_tree);
			DebugLocation(186, 53);
			// SugarCpp.g:186:53: ( func_args )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==IDENT))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:186:53: func_args
				{
				DebugLocation(186, 53);
				PushFollow(Follow._func_args_in_func_def702);
				func_args59=func_args();
				PopFollow();

				adaptor.AddChild(root_0, func_args59.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(186, 64);
			char_literal60=(IToken)Match(input,57,Follow._57_in_func_def705); 
			char_literal60_tree = (CommonTree)adaptor.Create(char_literal60);
			adaptor.AddChild(root_0, char_literal60_tree);
			DebugLocation(186, 68);
			PushFollow(Follow._stmt_block_in_func_def707);
			stmt_block61=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block61.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 11);
			LeaveRule("func_def", 11);
			LeaveRule_func_def();
		}
		DebugLocation(187, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:189:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 12);
		TraceIn("stmt_block", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT62 = default(IToken);
		IToken NEWLINE63 = default(IToken);
		IToken NEWLINE65 = default(IToken);
		IToken DEDENT66 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt64 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT62_tree = default(CommonTree);
		CommonTree NEWLINE63_tree = default(CommonTree);
		CommonTree NEWLINE65_tree = default(CommonTree);
		CommonTree DEDENT66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(189, 1);
		try
		{
			// SugarCpp.g:190:2: ( INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:190:4: INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(190, 4);
			INDENT62=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block721);  
			stream_INDENT.Add(INDENT62);

			DebugLocation(190, 11);
			// SugarCpp.g:190:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				try
				{
					alt23 = dfa23.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:190:12: ( NEWLINE )+ stmt
					{
					DebugLocation(190, 12);
					// SugarCpp.g:190:12: ( NEWLINE )+
					int cnt22=0;
					try { DebugEnterSubRule(22);
					while (true)
					{
						int alt22=2;
						try { DebugEnterDecision(22, false);
						int LA22_0 = input.LA(1);

						if ((LA22_0==NEWLINE))
						{
							alt22 = 1;
						}


						} finally { DebugExitDecision(22); }
						switch (alt22)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:190:12: NEWLINE
							{
							DebugLocation(190, 12);
							NEWLINE63=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block724);  
							stream_NEWLINE.Add(NEWLINE63);


							}
							break;

						default:
							if (cnt22 >= 1)
								goto loop22;

							EarlyExitException eee22 = new EarlyExitException( 22, input );
							DebugRecognitionException(eee22);
							throw eee22;
						}
						cnt22++;
					}
					loop22:
						;

					} finally { DebugExitSubRule(22); }

					DebugLocation(190, 21);
					PushFollow(Follow._stmt_in_stmt_block727);
					stmt64=stmt();
					PopFollow();

					stream_stmt.Add(stmt64.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }

			DebugLocation(190, 28);
			// SugarCpp.g:190:28: ( NEWLINE )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==NEWLINE))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:190:28: NEWLINE
					{
					DebugLocation(190, 28);
					NEWLINE65=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block731);  
					stream_NEWLINE.Add(NEWLINE65);


					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(190, 37);
			DEDENT66=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block734);  
			stream_DEDENT.Add(DEDENT66);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 190:44: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(190, 47);
				// SugarCpp.g:190:47: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(190, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(190, 60);
				// SugarCpp.g:190:60: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(190, 60);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 12);
			LeaveRule("stmt_block", 12);
			LeaveRule_stmt_block();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:193:1: stmt : stmt_expr ;
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 13);
		TraceIn("stmt", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr67 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(193, 1);
		try
		{
			// SugarCpp.g:194:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:194:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(194, 4);
			PushFollow(Follow._stmt_expr_in_stmt754);
			stmt_expr67=stmt_expr();
			PopFollow();

			adaptor.AddChild(root_0, stmt_expr67.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 13);
			LeaveRule("stmt", 13);
			LeaveRule_stmt();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:197:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | expr );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 14);
		TraceIn("stmt_expr", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(197, 1);
		try
		{
			// SugarCpp.g:198:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | expr )
			int alt25=5;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				switch (input.LA(2))
				{
				case 63:
					{
					alt25 = 1;
					}
					break;
				case 73:
					{
					int LA25_7 = input.LA(3);

					if ((LA25_7==IDENT))
					{
						int LA25_8 = input.LA(4);

						if ((LA25_8==56))
						{
							alt25 = 5;
						}
						else if ((LA25_8==DEDENT||LA25_8==NEWLINE||LA25_8==54||LA25_8==58||LA25_8==76||LA25_8==80))
						{
							alt25 = 1;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 25, 8, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 25, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case DEDENT:
				case Infix_Func:
				case NEWLINE:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 58:
				case 59:
				case 60:
				case 61:
				case 62:
				case 64:
				case 65:
				case 66:
				case 67:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 74:
				case 75:
				case 76:
				case 77:
				case 78:
				case 79:
				case 80:
				case 81:
				case 83:
				case 84:
				case 85:
				case 86:
				case 87:
				case 89:
				case 90:
				case 93:
				case 101:
				case 102:
				case 103:
					{
					alt25 = 5;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 25, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 97:
				{
				alt25 = 2;
				}
				break;
			case 100:
				{
				alt25 = 3;
				}
				break;
			case 99:
				{
				alt25 = 4;
				}
				break;
			case INT:
			case STRING:
			case 49:
			case 54:
			case 56:
			case 58:
			case 60:
			case 61:
			case 64:
			case 65:
			case 96:
			case 104:
				{
				alt25 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:198:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(198, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr765);
				stmt_alloc68=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc68.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:199:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(199, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr770);
				stmt_return69=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return69.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:200:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(200, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr775);
				stmt_using70=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using70.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:201:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(201, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr780);
				stmt_typedef71=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef71.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:202:4: expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(202, 4);
				PushFollow(Follow._expr_in_stmt_expr785);
				expr72=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr72.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 14);
			LeaveRule("stmt_expr", 14);
			LeaveRule_stmt_expr();
		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:205:1: stmt_typedef : 'typedef' IDENT '=' type_name -> ^( Stmt_Typedef type_name IDENT ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 15);
		TraceIn("stmt_typedef", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal73 = default(IToken);
		IToken IDENT74 = default(IToken);
		IToken char_literal75 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name76 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal73_tree = default(CommonTree);
		CommonTree IDENT74_tree = default(CommonTree);
		CommonTree char_literal75_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(205, 1);
		try
		{
			// SugarCpp.g:206:2: ( 'typedef' IDENT '=' type_name -> ^( Stmt_Typedef type_name IDENT ) )
			DebugEnterAlt(1);
			// SugarCpp.g:206:4: 'typedef' IDENT '=' type_name
			{
			DebugLocation(206, 4);
			string_literal73=(IToken)Match(input,99,Follow._99_in_stmt_typedef796);  
			stream_99.Add(string_literal73);

			DebugLocation(206, 14);
			IDENT74=(IToken)Match(input,IDENT,Follow._IDENT_in_stmt_typedef798);  
			stream_IDENT.Add(IDENT74);

			DebugLocation(206, 20);
			char_literal75=(IToken)Match(input,80,Follow._80_in_stmt_typedef800);  
			stream_80.Add(char_literal75);

			DebugLocation(206, 24);
			PushFollow(Follow._type_name_in_stmt_typedef802);
			type_name76=type_name();
			PopFollow();

			stream_type_name.Add(type_name76.Tree);


			{
			// AST REWRITE
			// elements: type_name, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 206:34: -> ^( Stmt_Typedef type_name IDENT )
			{
				DebugLocation(206, 37);
				// SugarCpp.g:206:37: ^( Stmt_Typedef type_name IDENT )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(206, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(206, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(206, 62);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 15);
			LeaveRule("stmt_typedef", 15);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:209:1: stmt_using_item : ( IDENT | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 16);
		TraceIn("stmt_using_item", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set77 = default(IToken);

		CommonTree set77_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(209, 36);
		try
		{
			// SugarCpp.g:209:16: ( IDENT | 'namespace' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(209, 16);

			set77=(IToken)input.LT(1);
			if (input.LA(1)==IDENT||input.LA(1)==95)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set77));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 16);
			LeaveRule("stmt_using_item", 16);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(209, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:210:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 17);
		TraceIn("stmt_using", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal78 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(210, 1);
		try
		{
			// SugarCpp.g:211:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:211:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(211, 4);
			string_literal78=(IToken)Match(input,100,Follow._100_in_stmt_using833);  
			stream_100.Add(string_literal78);

			DebugLocation(211, 12);
			// SugarCpp.g:211:12: ( stmt_using_item )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				try
				{
					alt26 = dfa26.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:211:12: stmt_using_item
					{
					DebugLocation(211, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using835);
					stmt_using_item79=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item79.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 211:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(211, 32);
				// SugarCpp.g:211:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(211, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(211, 45);
				// SugarCpp.g:211:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(211, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 17);
			LeaveRule("stmt_using", 17);
			LeaveRule_stmt_using();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:214:1: stmt_return : 'return' ( expr )? -> ^( Expr_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 18);
		TraceIn("stmt_return", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr81 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:215:4: 'return' ( expr )?
			{
			DebugLocation(215, 4);
			string_literal80=(IToken)Match(input,97,Follow._97_in_stmt_return856);  
			stream_97.Add(string_literal80);

			DebugLocation(215, 13);
			// SugarCpp.g:215:13: ( expr )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==IDENT||LA27_0==INT||LA27_0==STRING||LA27_0==49||LA27_0==54||LA27_0==56||LA27_0==58||(LA27_0>=60 && LA27_0<=61)||(LA27_0>=64 && LA27_0<=65)||LA27_0==96||LA27_0==104))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:13: expr
				{
				DebugLocation(215, 13);
				PushFollow(Follow._expr_in_stmt_return858);
				expr81=expr();
				PopFollow();

				stream_expr.Add(expr81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 215:19: -> ^( Expr_Return ( expr )? )
			{
				DebugLocation(215, 22);
				// SugarCpp.g:215:22: ^( Expr_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(215, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Return, "Expr_Return"), root_1);

				DebugLocation(215, 36);
				// SugarCpp.g:215:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(215, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 18);
			LeaveRule("stmt_return", 18);
			LeaveRule_stmt_return();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:218:1: ident_list : IDENT ( ',' IDENT )* -> ^( Ident_List ( IDENT )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 19);
		TraceIn("ident_list", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT82 = default(IToken);
		IToken char_literal83 = default(IToken);
		IToken IDENT84 = default(IToken);

		CommonTree IDENT82_tree = default(CommonTree);
		CommonTree char_literal83_tree = default(CommonTree);
		CommonTree IDENT84_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(218, 1);
		try
		{
			// SugarCpp.g:219:2: ( IDENT ( ',' IDENT )* -> ^( Ident_List ( IDENT )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: IDENT ( ',' IDENT )*
			{
			DebugLocation(219, 4);
			IDENT82=(IToken)Match(input,IDENT,Follow._IDENT_in_ident_list879);  
			stream_IDENT.Add(IDENT82);

			DebugLocation(219, 10);
			// SugarCpp.g:219:10: ( ',' IDENT )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==63))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:219:11: ',' IDENT
					{
					DebugLocation(219, 11);
					char_literal83=(IToken)Match(input,63,Follow._63_in_ident_list882);  
					stream_63.Add(char_literal83);

					DebugLocation(219, 15);
					IDENT84=(IToken)Match(input,IDENT,Follow._IDENT_in_ident_list884);  
					stream_IDENT.Add(IDENT84);


					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 219:23: -> ^( Ident_List ( IDENT )+ )
			{
				DebugLocation(219, 26);
				// SugarCpp.g:219:26: ^( Ident_List ( IDENT )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(219, 39);
				if (!(stream_IDENT.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_IDENT.HasNext )
				{
					DebugLocation(219, 39);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

				}
				stream_IDENT.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 19);
			LeaveRule("ident_list", 19);
			LeaveRule_ident_list();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:222:1: stmt_alloc : ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 20);
		TraceIn("stmt_alloc", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal86 = default(IToken);
		IToken char_literal88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr89 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal86_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:223:4: ident_list ':' type_name ( '=' expr )?
			{
			DebugLocation(223, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc906);
			ident_list85=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list85.Tree);
			DebugLocation(223, 15);
			char_literal86=(IToken)Match(input,73,Follow._73_in_stmt_alloc908);  
			stream_73.Add(char_literal86);

			DebugLocation(223, 19);
			PushFollow(Follow._type_name_in_stmt_alloc910);
			type_name87=type_name();
			PopFollow();

			stream_type_name.Add(type_name87.Tree);
			DebugLocation(223, 29);
			// SugarCpp.g:223:29: ( '=' expr )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==80))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:30: '=' expr
				{
				DebugLocation(223, 30);
				char_literal88=(IToken)Match(input,80,Follow._80_in_stmt_alloc913);  
				stream_80.Add(char_literal88);

				DebugLocation(223, 34);
				PushFollow(Follow._expr_in_stmt_alloc915);
				expr89=expr();
				PopFollow();

				stream_expr.Add(expr89.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: expr, ident_list, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 223:41: -> ^( Expr_Alloc type_name ident_list ( expr )? )
			{
				DebugLocation(223, 44);
				// SugarCpp.g:223:44: ^( Expr_Alloc type_name ident_list ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(223, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

				DebugLocation(223, 57);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(223, 67);
				adaptor.AddChild(root_1, stream_ident_list.NextTree());
				DebugLocation(223, 78);
				// SugarCpp.g:223:78: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(223, 78);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 20);
			LeaveRule("stmt_alloc", 20);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:226:1: stmt_modify : (a= lvalue b= modify_expr_op ^)+ cond_expr ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 21);
		TraceIn("stmt_modify", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr90 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(226, 1);
		try
		{
			// SugarCpp.g:227:2: ( (a= lvalue b= modify_expr_op ^)+ cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:227:4: (a= lvalue b= modify_expr_op ^)+ cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(227, 4);
			// SugarCpp.g:227:4: (a= lvalue b= modify_expr_op ^)+
			int cnt30=0;
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				try
				{
					alt30 = dfa30.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:227:5: a= lvalue b= modify_expr_op ^
					{
					DebugLocation(227, 6);
					PushFollow(Follow._lvalue_in_stmt_modify944);
					a=lvalue();
					PopFollow();

					adaptor.AddChild(root_0, a.Tree);
					DebugLocation(227, 15);
					PushFollow(Follow._modify_expr_op_in_stmt_modify948);
					b=modify_expr_op();
					PopFollow();

					root_0 = (CommonTree)adaptor.BecomeRoot(b.Tree, root_0);

					}
					break;

				default:
					if (cnt30 >= 1)
						goto loop30;

					EarlyExitException eee30 = new EarlyExitException( 30, input );
					DebugRecognitionException(eee30);
					throw eee30;
				}
				cnt30++;
			}
			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(227, 34);
			PushFollow(Follow._cond_expr_in_stmt_modify953);
			cond_expr90=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr90.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 21);
			LeaveRule("stmt_modify", 21);
			LeaveRule_stmt_modify();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:230:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 22);
		TraceIn("expr", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr91 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:231:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(231, 4);
			PushFollow(Follow._lambda_expr_in_expr964);
			lambda_expr91=lambda_expr();
			PopFollow();

			adaptor.AddChild(root_0, lambda_expr91.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 22);
			LeaveRule("expr", 22);
			LeaveRule_expr();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:234:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 23);
		TraceIn("lambda_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal92 = default(IToken);
		IToken char_literal94 = default(IToken);
		IToken string_literal95 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args93 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr97 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal92_tree = default(CommonTree);
		CommonTree char_literal94_tree = default(CommonTree);
		CommonTree string_literal95_tree = default(CommonTree);
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(234, 1);
		try
		{
			// SugarCpp.g:235:2: ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			try
			{
				alt31 = dfa31.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:4: '(' func_args ')' '=>' modify_expr
				{
				DebugLocation(235, 4);
				char_literal92=(IToken)Match(input,56,Follow._56_in_lambda_expr975);  
				stream_56.Add(char_literal92);

				DebugLocation(235, 8);
				PushFollow(Follow._func_args_in_lambda_expr977);
				func_args93=func_args();
				PopFollow();

				stream_func_args.Add(func_args93.Tree);
				DebugLocation(235, 18);
				char_literal94=(IToken)Match(input,57,Follow._57_in_lambda_expr979);  
				stream_57.Add(char_literal94);

				DebugLocation(235, 22);
				string_literal95=(IToken)Match(input,82,Follow._82_in_lambda_expr981);  
				stream_82.Add(string_literal95);

				DebugLocation(235, 27);
				PushFollow(Follow._modify_expr_in_lambda_expr983);
				modify_expr96=modify_expr();
				PopFollow();

				stream_modify_expr.Add(modify_expr96.Tree);


				{
				// AST REWRITE
				// elements: modify_expr, func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 235:39: -> ^( Expr_Lambda func_args modify_expr )
				{
					DebugLocation(235, 42);
					// SugarCpp.g:235:42: ^( Expr_Lambda func_args modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(235, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(235, 56);
					adaptor.AddChild(root_1, stream_func_args.NextTree());
					DebugLocation(235, 66);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:236:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(236, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr998);
				modify_expr97=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr97.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 23);
			LeaveRule("lambda_expr", 23);
			LeaveRule_lambda_expr();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:239:1: modify_expr_op : ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 24);
		TraceIn("modify_expr_op", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set98 = default(IToken);

		CommonTree set98_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(239, 99);
		try
		{
			// SugarCpp.g:239:15: ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(239, 15);

			set98=(IToken)input.LT(1);
			if (input.LA(1)==52||input.LA(1)==55||input.LA(1)==59||input.LA(1)==62||input.LA(1)==66||input.LA(1)==72||input.LA(1)==75||input.LA(1)==78||input.LA(1)==80||input.LA(1)==86||input.LA(1)==90||input.LA(1)==102)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set98));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 24);
			LeaveRule("modify_expr_op", 24);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(239, 99);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:240:1: modify_expr : (a= lvalue b= modify_expr_op ^)* cond_expr ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 25);
		TraceIn("modify_expr", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr99 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(240, 1);
		try
		{
			// SugarCpp.g:241:2: ( (a= lvalue b= modify_expr_op ^)* cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: (a= lvalue b= modify_expr_op ^)* cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(241, 4);
			// SugarCpp.g:241:4: (a= lvalue b= modify_expr_op ^)*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				try
				{
					alt32 = dfa32.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:5: a= lvalue b= modify_expr_op ^
					{
					DebugLocation(241, 6);
					PushFollow(Follow._lvalue_in_modify_expr1063);
					a=lvalue();
					PopFollow();

					adaptor.AddChild(root_0, a.Tree);
					DebugLocation(241, 15);
					PushFollow(Follow._modify_expr_op_in_modify_expr1067);
					b=modify_expr_op();
					PopFollow();

					root_0 = (CommonTree)adaptor.BecomeRoot(b.Tree, root_0);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }

			DebugLocation(241, 34);
			PushFollow(Follow._cond_expr_in_modify_expr1072);
			cond_expr99=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr99.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 25);
			LeaveRule("modify_expr", 25);
			LeaveRule_modify_expr();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:244:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 26);
		TraceIn("cond_expr_item", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr100 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(244, 26);
		try
		{
			// SugarCpp.g:244:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:244:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(244, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item1081);
			cond_expr100=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr100.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 26);
			LeaveRule("cond_expr_item", 26);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(244, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:245:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 27);
		TraceIn("cond_expr", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal101 = default(IToken);
		IToken string_literal102 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal101_tree = default(CommonTree);
		CommonTree string_literal102_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(245, 1);
		try
		{
			// SugarCpp.g:246:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:246:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(246, 4);
			// SugarCpp.g:246:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:246:5: a= or_expr
			{
			DebugLocation(246, 6);
			PushFollow(Follow._or_expr_in_cond_expr1093);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 246:15: -> $a
			{
				DebugLocation(246, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(246, 22);
			// SugarCpp.g:246:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==93))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:246:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(246, 23);
				string_literal101=(IToken)Match(input,93,Follow._93_in_cond_expr1102);  
				stream_93.Add(string_literal101);

				DebugLocation(246, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr1106);
				a=cond_expr_item();
				PopFollow();

				stream_cond_expr_item.Add(a.Tree);
				DebugLocation(246, 45);
				string_literal102=(IToken)Match(input,91,Follow._91_in_cond_expr1108);  
				stream_91.Add(string_literal102);

				DebugLocation(246, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr1112);
				b=cond_expr_item();
				PopFollow();

				stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, a, cond_expr
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 246:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(246, 72);
					// SugarCpp.g:246:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(246, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(246, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(246, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(246, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 27);
			LeaveRule("cond_expr", 27);
			LeaveRule_cond_expr();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:249:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 28);
		TraceIn("or_expr", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(249, 1);
		try
		{
			// SugarCpp.g:250:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:250:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(250, 4);
			// SugarCpp.g:250:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:250:5: a= and_expr
			{
			DebugLocation(250, 6);
			PushFollow(Follow._and_expr_in_or_expr1143);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 250:16: -> $a
			{
				DebugLocation(250, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(250, 23);
			// SugarCpp.g:250:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==103))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:250:24: '||' b= and_expr
					{
					DebugLocation(250, 24);
					string_literal103=(IToken)Match(input,103,Follow._103_in_or_expr1152);  
					stream_103.Add(string_literal103);

					DebugLocation(250, 30);
					PushFollow(Follow._and_expr_in_or_expr1156);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 103, b, or_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 250:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(250, 43);
						// SugarCpp.g:250:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(250, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(250, 54);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(250, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(250, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 28);
			LeaveRule("or_expr", 28);
			LeaveRule_or_expr();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:253:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 29);
		TraceIn("and_expr", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal104 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal104_tree = default(CommonTree);
		RewriteRuleITokenStream stream_53=new RewriteRuleITokenStream(adaptor,"token 53");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(253, 1);
		try
		{
			// SugarCpp.g:254:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:254:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(254, 4);
			// SugarCpp.g:254:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:254:5: a= bit_or
			{
			DebugLocation(254, 6);
			PushFollow(Follow._bit_or_in_and_expr1186);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 254:14: -> $a
			{
				DebugLocation(254, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(254, 21);
			// SugarCpp.g:254:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==53))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:254:22: '&&' b= bit_or
					{
					DebugLocation(254, 22);
					string_literal104=(IToken)Match(input,53,Follow._53_in_and_expr1195);  
					stream_53.Add(string_literal104);

					DebugLocation(254, 28);
					PushFollow(Follow._bit_or_in_and_expr1199);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, 53, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 254:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(254, 39);
						// SugarCpp.g:254:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(254, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(254, 50);
						adaptor.AddChild(root_1, stream_53.NextNode());
						DebugLocation(254, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(254, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 29);
			LeaveRule("and_expr", 29);
			LeaveRule_and_expr();
		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:257:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 30);
		TraceIn("bit_or", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(257, 1);
		try
		{
			// SugarCpp.g:258:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:258:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(258, 4);
			// SugarCpp.g:258:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:258:5: a= bit_xor
			{
			DebugLocation(258, 6);
			PushFollow(Follow._bit_xor_in_bit_or1229);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 258:15: -> $a
			{
				DebugLocation(258, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(258, 22);
			// SugarCpp.g:258:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==101))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:258:23: '|' b= bit_xor
					{
					DebugLocation(258, 23);
					char_literal105=(IToken)Match(input,101,Follow._101_in_bit_or1238);  
					stream_101.Add(char_literal105);

					DebugLocation(258, 28);
					PushFollow(Follow._bit_xor_in_bit_or1242);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_or, 101, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 258:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(258, 40);
						// SugarCpp.g:258:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(258, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(258, 51);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(258, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(258, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 30);
			LeaveRule("bit_or", 30);
			LeaveRule_bit_or();
		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:261:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 31);
		TraceIn("bit_xor", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal106 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal106_tree = default(CommonTree);
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(261, 1);
		try
		{
			// SugarCpp.g:262:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:262:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(262, 4);
			// SugarCpp.g:262:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:262:5: a= bit_and
			{
			DebugLocation(262, 6);
			PushFollow(Follow._bit_and_in_bit_xor1272);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 262:15: -> $a
			{
				DebugLocation(262, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(262, 22);
			// SugarCpp.g:262:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==89))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:262:23: '^' b= bit_and
					{
					DebugLocation(262, 23);
					char_literal106=(IToken)Match(input,89,Follow._89_in_bit_xor1281);  
					stream_89.Add(char_literal106);

					DebugLocation(262, 28);
					PushFollow(Follow._bit_and_in_bit_xor1285);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, b, 89
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 262:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(262, 40);
						// SugarCpp.g:262:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(262, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(262, 51);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(262, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(262, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 31);
			LeaveRule("bit_xor", 31);
			LeaveRule_bit_xor();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:265:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 32);
		TraceIn("bit_and", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(265, 1);
		try
		{
			// SugarCpp.g:266:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:266:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(266, 4);
			// SugarCpp.g:266:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:266:5: a= cmp_equ_expr
			{
			DebugLocation(266, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and1315);
			a=cmp_equ_expr();
			PopFollow();

			stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 266:20: -> $a
			{
				DebugLocation(266, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(266, 27);
			// SugarCpp.g:266:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==54))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:266:28: '&' b= cmp_equ_expr
					{
					DebugLocation(266, 28);
					char_literal107=(IToken)Match(input,54,Follow._54_in_bit_and1324);  
					stream_54.Add(char_literal107);

					DebugLocation(266, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and1328);
					b=cmp_equ_expr();
					PopFollow();

					stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, b, 54
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 266:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(266, 50);
						// SugarCpp.g:266:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(266, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(266, 61);
						adaptor.AddChild(root_1, stream_54.NextNode());
						DebugLocation(266, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(266, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 32);
			LeaveRule("bit_and", 32);
			LeaveRule_bit_and();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:269:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 33);
		TraceIn("cmp_equ_expr_op", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set108 = default(IToken);

		CommonTree set108_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(269, 29);
		try
		{
			// SugarCpp.g:269:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(269, 16);

			set108=(IToken)input.LT(1);
			if (input.LA(1)==50||input.LA(1)==81)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set108));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 33);
			LeaveRule("cmp_equ_expr_op", 33);
			LeaveRule_cmp_equ_expr_op();
		}
		DebugLocation(269, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:270:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )* ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 34);
		TraceIn("cmp_equ_expr", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op109 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(270, 1);
		try
		{
			// SugarCpp.g:271:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:271:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )*
			{
			DebugLocation(271, 4);
			// SugarCpp.g:271:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:271:5: a= cmp_expr
			{
			DebugLocation(271, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr1369);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 271:16: -> $a
			{
				DebugLocation(271, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(271, 23);
			// SugarCpp.g:271:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==50||LA39_0==81))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:271:24: cmp_equ_expr_op b= cmp_expr
					{
					DebugLocation(271, 24);
					PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr1378);
					cmp_equ_expr_op109=cmp_equ_expr_op();
					PopFollow();

					stream_cmp_equ_expr_op.Add(cmp_equ_expr_op109.Tree);
					DebugLocation(271, 41);
					PushFollow(Follow._cmp_expr_in_cmp_equ_expr1382);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: cmp_equ_expr, b, cmp_equ_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 271:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
						DebugLocation(271, 54);
						// SugarCpp.g:271:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(271, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(271, 65);
						adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
						DebugLocation(271, 82);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(271, 96);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 34);
			LeaveRule("cmp_equ_expr", 34);
			LeaveRule_cmp_equ_expr();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr_op();
	partial void LeaveRule_cmp_expr_op();

	// $ANTLR start "cmp_expr_op"
	// SugarCpp.g:274:1: cmp_expr_op : ( '<' | '<=' | '>' | '>=' );
	[GrammarRule("cmp_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op()
	{
		EnterRule_cmp_expr_op();
		EnterRule("cmp_expr_op", 35);
		TraceIn("cmp_expr_op", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set110 = default(IToken);

		CommonTree set110_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_expr_op");
		DebugLocation(274, 37);
		try
		{
			// SugarCpp.g:274:12: ( '<' | '<=' | '>' | '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(274, 12);

			set110=(IToken)input.LT(1);
			if (input.LA(1)==76||input.LA(1)==79||(input.LA(1)>=83 && input.LA(1)<=84))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set110));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr_op", 35);
			LeaveRule("cmp_expr_op", 35);
			LeaveRule_cmp_expr_op();
		}
		DebugLocation(274, 37);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_expr_op"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:275:1: cmp_expr : (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )* ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 36);
		TraceIn("cmp_expr", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op111 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(275, 1);
		try
		{
			// SugarCpp.g:276:2: ( (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:276:4: (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )*
			{
			DebugLocation(276, 4);
			// SugarCpp.g:276:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:276:5: a= shift_expr
			{
			DebugLocation(276, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr1432);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 276:18: -> $a
			{
				DebugLocation(276, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(276, 25);
			// SugarCpp.g:276:25: ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==76||LA40_0==79||(LA40_0>=83 && LA40_0<=84)))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:26: cmp_expr_op b= shift_expr
					{
					DebugLocation(276, 26);
					PushFollow(Follow._cmp_expr_op_in_cmp_expr1441);
					cmp_expr_op111=cmp_expr_op();
					PopFollow();

					stream_cmp_expr_op.Add(cmp_expr_op111.Tree);
					DebugLocation(276, 39);
					PushFollow(Follow._shift_expr_in_cmp_expr1445);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr_op, b, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 276:51: -> ^( Expr_Bin cmp_expr_op $cmp_expr $b)
					{
						DebugLocation(276, 54);
						// SugarCpp.g:276:54: ^( Expr_Bin cmp_expr_op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(276, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(276, 65);
						adaptor.AddChild(root_1, stream_cmp_expr_op.NextTree());
						DebugLocation(276, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(276, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 36);
			LeaveRule("cmp_expr", 36);
			LeaveRule_cmp_expr();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:279:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 37);
		TraceIn("shift_expr_op", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set112 = default(IToken);

		CommonTree set112_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(279, 27);
		try
		{
			// SugarCpp.g:279:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(279, 14);

			set112=(IToken)input.LT(1);
			if (input.LA(1)==77||input.LA(1)==85)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set112));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 37);
			LeaveRule("shift_expr_op", 37);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(279, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:280:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 38);
		TraceIn("shift_expr", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op113 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(280, 1);
		try
		{
			// SugarCpp.g:281:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:281:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(281, 4);
			// SugarCpp.g:281:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:281:5: a= add_expr
			{
			DebugLocation(281, 6);
			PushFollow(Follow._add_expr_in_shift_expr1486);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 281:16: -> $a
			{
				DebugLocation(281, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(281, 23);
			// SugarCpp.g:281:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==77||LA41_0==85))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:281:24: shift_expr_op b= add_expr
					{
					DebugLocation(281, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr1495);
					shift_expr_op113=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op113.Tree);
					DebugLocation(281, 39);
					PushFollow(Follow._add_expr_in_shift_expr1499);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, b, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 281:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(281, 52);
						// SugarCpp.g:281:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(281, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(281, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(281, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(281, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 38);
			LeaveRule("shift_expr", 38);
			LeaveRule_shift_expr();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:284:1: add_expr : (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 39);
		TraceIn("add_expr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal114 = default(IToken);
		IToken char_literal115 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree char_literal115_tree = default(CommonTree);
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(284, 1);
		try
		{
			// SugarCpp.g:285:2: ( (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:285:4: (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(285, 4);
			// SugarCpp.g:285:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:285:5: a= infix_expr
			{
			DebugLocation(285, 6);
			PushFollow(Follow._infix_expr_in_add_expr1529);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 285:18: -> $a
			{
				DebugLocation(285, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(285, 25);
			// SugarCpp.g:285:25: ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=3;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==60))
				{
					alt42 = 1;
				}
				else if ((LA42_0==64))
				{
					alt42 = 2;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:285:27: '+' b= infix_expr
					{
					DebugLocation(285, 27);
					char_literal114=(IToken)Match(input,60,Follow._60_in_add_expr1539);  
					stream_60.Add(char_literal114);

					DebugLocation(285, 32);
					PushFollow(Follow._infix_expr_in_add_expr1543);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 60
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 285:44: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(285, 47);
						// SugarCpp.g:285:47: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(285, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(285, 58);
						adaptor.AddChild(root_1, stream_60.NextNode());
						DebugLocation(285, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(285, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:286:12: '-' b= infix_expr
					{
					DebugLocation(286, 12);
					char_literal115=(IToken)Match(input,64,Follow._64_in_add_expr1570);  
					stream_64.Add(char_literal115);

					DebugLocation(286, 17);
					PushFollow(Follow._infix_expr_in_add_expr1574);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 64, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 286:29: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(286, 32);
						// SugarCpp.g:286:32: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(286, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(286, 43);
						adaptor.AddChild(root_1, stream_64.NextNode());
						DebugLocation(286, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(286, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 39);
			LeaveRule("add_expr", 39);
			LeaveRule_add_expr();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:290:1: infix_expr : (a= mul_expr -> $a) ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 40);
		TraceIn("infix_expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken Infix_Func116 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree Infix_Func116_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Infix_Func=new RewriteRuleITokenStream(adaptor,"token Infix_Func");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(290, 1);
		try
		{
			// SugarCpp.g:291:2: ( (a= mul_expr -> $a) ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:291:4: (a= mul_expr -> $a) ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )*
			{
			DebugLocation(291, 4);
			// SugarCpp.g:291:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:291:5: a= mul_expr
			{
			DebugLocation(291, 6);
			PushFollow(Follow._mul_expr_in_infix_expr1614);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 291:16: -> $a
			{
				DebugLocation(291, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(291, 23);
			// SugarCpp.g:291:23: ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==Infix_Func))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:25: Infix_Func b= mul_expr
					{
					DebugLocation(291, 25);
					Infix_Func116=(IToken)Match(input,Infix_Func,Follow._Infix_Func_in_infix_expr1624);  
					stream_Infix_Func.Add(Infix_Func116);

					DebugLocation(291, 37);
					PushFollow(Follow._mul_expr_in_infix_expr1628);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, b, Infix_Func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 291:48: -> ^( Expr_Infix Infix_Func $infix_expr $b)
					{
						DebugLocation(291, 51);
						// SugarCpp.g:291:51: ^( Expr_Infix Infix_Func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(291, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(291, 64);
						adaptor.AddChild(root_1, stream_Infix_Func.NextNode());
						DebugLocation(291, 76);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(291, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 40);
			LeaveRule("infix_expr", 40);
			LeaveRule_infix_expr();
		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:294:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 41);
		TraceIn("mul_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal117 = default(IToken);
		IToken char_literal118 = default(IToken);
		IToken char_literal119 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(294, 1);
		try
		{
			// SugarCpp.g:295:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:295:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(295, 4);
			// SugarCpp.g:295:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:295:5: a= selector_expr
			{
			DebugLocation(295, 6);
			PushFollow(Follow._selector_expr_in_mul_expr1660);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 295:21: -> $a
			{
				DebugLocation(295, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(295, 28);
			// SugarCpp.g:295:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=4;
				try { DebugEnterDecision(44, false);
				switch (input.LA(1))
				{
				case 58:
					{
					alt44 = 1;
					}
					break;
				case 71:
					{
					alt44 = 2;
					}
					break;
				case 51:
					{
					alt44 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:295:30: '*' b= selector_expr
					{
					DebugLocation(295, 30);
					char_literal117=(IToken)Match(input,58,Follow._58_in_mul_expr1670);  
					stream_58.Add(char_literal117);

					DebugLocation(295, 35);
					PushFollow(Follow._selector_expr_in_mul_expr1674);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 58, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 295:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(295, 53);
						// SugarCpp.g:295:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(295, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(295, 64);
						adaptor.AddChild(root_1, stream_58.NextNode());
						DebugLocation(295, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(295, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:296:15: '/' b= selector_expr
					{
					DebugLocation(296, 15);
					char_literal118=(IToken)Match(input,71,Follow._71_in_mul_expr1704);  
					stream_71.Add(char_literal118);

					DebugLocation(296, 20);
					PushFollow(Follow._selector_expr_in_mul_expr1708);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 71
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 296:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(296, 38);
						// SugarCpp.g:296:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(296, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(296, 49);
						adaptor.AddChild(root_1, stream_71.NextNode());
						DebugLocation(296, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(296, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:297:15: '%' b= selector_expr
					{
					DebugLocation(297, 15);
					char_literal119=(IToken)Match(input,51,Follow._51_in_mul_expr1738);  
					stream_51.Add(char_literal119);

					DebugLocation(297, 20);
					PushFollow(Follow._selector_expr_in_mul_expr1742);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 51
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 297:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(297, 38);
						// SugarCpp.g:297:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(297, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(297, 49);
						adaptor.AddChild(root_1, stream_51.NextNode());
						DebugLocation(297, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(297, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 41);
			LeaveRule("mul_expr", 41);
			LeaveRule_mul_expr();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:301:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 42);
		TraceIn("selector_expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken b = default(IToken);
		IToken string_literal120 = default(IToken);
		IToken string_literal121 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree b_tree = default(CommonTree);
		CommonTree string_literal120_tree = default(CommonTree);
		CommonTree string_literal121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(301, 1);
		try
		{
			// SugarCpp.g:302:2: ( (a= prefix_expr -> $a) ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:302:4: (a= prefix_expr -> $a) ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(302, 4);
			// SugarCpp.g:302:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:302:5: a= prefix_expr
			{
			DebugLocation(302, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr1785);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 302:19: -> $a
			{
				DebugLocation(302, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(302, 26);
			// SugarCpp.g:302:26: ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=3;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==68))
				{
					alt45 = 1;
				}
				else if ((LA45_0==70))
				{
					alt45 = 2;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:302:28: '->*' b= IDENT
					{
					DebugLocation(302, 28);
					string_literal120=(IToken)Match(input,68,Follow._68_in_selector_expr1795);  
					stream_68.Add(string_literal120);

					DebugLocation(302, 35);
					b=(IToken)Match(input,IDENT,Follow._IDENT_in_selector_expr1799);  
					stream_IDENT.Add(b);



					{
					// AST REWRITE
					// elements: selector_expr, b, 68
					// token labels: b
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_b=new RewriteRuleITokenStream(adaptor,"token b",b);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 302:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(302, 45);
						// SugarCpp.g:302:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(302, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(302, 59);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(302, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(302, 81);
						adaptor.AddChild(root_1, stream_b.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:303:13: '.*' b= IDENT
					{
					DebugLocation(303, 13);
					string_literal121=(IToken)Match(input,70,Follow._70_in_selector_expr1827);  
					stream_70.Add(string_literal121);

					DebugLocation(303, 20);
					b=(IToken)Match(input,IDENT,Follow._IDENT_in_selector_expr1832);  
					stream_IDENT.Add(b);



					{
					// AST REWRITE
					// elements: b, selector_expr, 70
					// token labels: b
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_b=new RewriteRuleITokenStream(adaptor,"token b",b);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 303:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(303, 30);
						// SugarCpp.g:303:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(303, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(303, 44);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(303, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(303, 66);
						adaptor.AddChild(root_1, stream_b.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 42);
			LeaveRule("selector_expr", 42);
			LeaveRule_selector_expr();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:307:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 43);
		TraceIn("prefix_expr_op", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set122 = default(IToken);

		CommonTree set122_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(307, 64);
		try
		{
			// SugarCpp.g:307:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(307, 15);

			set122=(IToken)input.LT(1);
			if (input.LA(1)==49||input.LA(1)==54||input.LA(1)==58||(input.LA(1)>=60 && input.LA(1)<=61)||(input.LA(1)>=64 && input.LA(1)<=65)||input.LA(1)==104)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set122));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 43);
			LeaveRule("prefix_expr_op", 43);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(307, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:308:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_name ( expr_list )? ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 44);
		TraceIn("prefix_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(308, 1);
		try
		{
			// SugarCpp.g:309:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_name ( expr_list )? ) ) | suffix_expr )
			int alt49=3;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case 49:
			case 54:
			case 58:
			case 60:
			case 61:
			case 64:
			case 65:
			case 104:
				{
				alt49 = 1;
				}
				break;
			case 96:
				{
				alt49 = 2;
				}
				break;
			case IDENT:
			case INT:
			case STRING:
			case 56:
				{
				alt49 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:309:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(309, 4);
				// SugarCpp.g:309:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:309:5: prefix_expr_op prefix_expr
				{
				DebugLocation(309, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr1907);
				prefix_expr_op123=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op123.Tree);
				DebugLocation(309, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr1909);
				prefix_expr124=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr124.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 309:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(309, 36);
					// SugarCpp.g:309:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(309, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(309, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(309, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:310:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_name ( expr_list )? ) )
				{
				DebugLocation(310, 4);
				string_literal125=(IToken)Match(input,96,Follow._96_in_prefix_expr1925);  
				stream_96.Add(string_literal125);

				DebugLocation(310, 10);
				PushFollow(Follow._type_name_in_prefix_expr1927);
				type_name126=type_name();
				PopFollow();

				stream_type_name.Add(type_name126.Tree);
				DebugLocation(310, 20);
				// SugarCpp.g:310:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_name ( expr_list )? ) )
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==56))
				{
					alt48 = 1;
				}
				else if ((LA48_0==87))
				{
					alt48 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:310:22: '(' ( expr_list )? ')'
					{
					DebugLocation(310, 22);
					char_literal127=(IToken)Match(input,56,Follow._56_in_prefix_expr1931);  
					stream_56.Add(char_literal127);

					DebugLocation(310, 26);
					// SugarCpp.g:310:26: ( expr_list )?
					int alt46=2;
					try { DebugEnterSubRule(46);
					try { DebugEnterDecision(46, false);
					int LA46_0 = input.LA(1);

					if ((LA46_0==IDENT||LA46_0==INT||LA46_0==STRING||LA46_0==49||LA46_0==54||LA46_0==56||LA46_0==58||(LA46_0>=60 && LA46_0<=61)||(LA46_0>=64 && LA46_0<=65)||LA46_0==96||LA46_0==104))
					{
						alt46 = 1;
					}
					} finally { DebugExitDecision(46); }
					switch (alt46)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:310:26: expr_list
						{
						DebugLocation(310, 26);
						PushFollow(Follow._expr_list_in_prefix_expr1933);
						expr_list128=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list128.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(46); }

					DebugLocation(310, 37);
					char_literal129=(IToken)Match(input,57,Follow._57_in_prefix_expr1936);  
					stream_57.Add(char_literal129);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 310:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(310, 44);
						// SugarCpp.g:310:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(310, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(310, 61);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(310, 71);
						// SugarCpp.g:310:71: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(310, 71);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:311:22: '[' ( expr_list )? ']'
					{
					DebugLocation(311, 22);
					char_literal130=(IToken)Match(input,87,Follow._87_in_prefix_expr1971);  
					stream_87.Add(char_literal130);

					DebugLocation(311, 26);
					// SugarCpp.g:311:26: ( expr_list )?
					int alt47=2;
					try { DebugEnterSubRule(47);
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==IDENT||LA47_0==INT||LA47_0==STRING||LA47_0==49||LA47_0==54||LA47_0==56||LA47_0==58||(LA47_0>=60 && LA47_0<=61)||(LA47_0>=64 && LA47_0<=65)||LA47_0==96||LA47_0==104))
					{
						alt47 = 1;
					}
					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:311:26: expr_list
						{
						DebugLocation(311, 26);
						PushFollow(Follow._expr_list_in_prefix_expr1973);
						expr_list131=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list131.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(47); }

					DebugLocation(311, 37);
					char_literal132=(IToken)Match(input,88,Follow._88_in_prefix_expr1976);  
					stream_88.Add(char_literal132);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 311:41: -> ^( Expr_New_Array type_name ( expr_list )? )
					{
						DebugLocation(311, 44);
						// SugarCpp.g:311:44: ^( Expr_New_Array type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(311, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(311, 61);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(311, 71);
						// SugarCpp.g:311:71: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(311, 71);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:313:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(313, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr2001);
				suffix_expr133=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr133.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 44);
			LeaveRule("prefix_expr", 44);
			LeaveRule_prefix_expr();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:316:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 45);
		TraceIn("expr_list", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr134 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal135_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(316, 1);
		try
		{
			// SugarCpp.g:317:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:317:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(317, 4);
			PushFollow(Follow._expr_in_expr_list2013);
			expr134=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr134.Tree);
			DebugLocation(317, 9);
			// SugarCpp.g:317:9: ( ',' ! expr )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==63))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:317:10: ',' ! expr
					{
					DebugLocation(317, 13);
					char_literal135=(IToken)Match(input,63,Follow._63_in_expr_list2016); 
					DebugLocation(317, 15);
					PushFollow(Follow._expr_in_expr_list2019);
					expr136=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr136.Tree);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 45);
			LeaveRule("expr_list", 45);
			LeaveRule_expr_list();
		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:320:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $suffix_expr expr ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 46);
		TraceIn("suffix_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal137 = default(IToken);
		IToken string_literal138 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken IDENT140 = default(IToken);
		IToken string_literal141 = default(IToken);
		IToken IDENT142 = default(IToken);
		IToken string_literal143 = default(IToken);
		IToken IDENT144 = default(IToken);
		IToken char_literal145 = default(IToken);
		IToken char_literal147 = default(IToken);
		IToken char_literal148 = default(IToken);
		IToken char_literal150 = default(IToken);
		IToken char_literal151 = default(IToken);
		IToken IDENT152 = default(IToken);
		IToken char_literal153 = default(IToken);
		IToken char_literal155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr149 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal137_tree = default(CommonTree);
		CommonTree string_literal138_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree IDENT140_tree = default(CommonTree);
		CommonTree string_literal141_tree = default(CommonTree);
		CommonTree IDENT142_tree = default(CommonTree);
		CommonTree string_literal143_tree = default(CommonTree);
		CommonTree IDENT144_tree = default(CommonTree);
		CommonTree char_literal145_tree = default(CommonTree);
		CommonTree char_literal147_tree = default(CommonTree);
		CommonTree char_literal148_tree = default(CommonTree);
		CommonTree char_literal150_tree = default(CommonTree);
		CommonTree char_literal151_tree = default(CommonTree);
		CommonTree IDENT152_tree = default(CommonTree);
		CommonTree char_literal153_tree = default(CommonTree);
		CommonTree char_literal155_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(320, 1);
		try
		{
			// SugarCpp.g:321:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $suffix_expr expr ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:321:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $suffix_expr expr ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )*
			{
			DebugLocation(321, 4);
			// SugarCpp.g:321:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:321:5: a= atom_expr
			{
			DebugLocation(321, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr2035);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 321:17: -> $a
			{
				DebugLocation(321, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(321, 24);
			// SugarCpp.g:321:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $suffix_expr expr ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=9;
				try { DebugEnterDecision(53, false);
				switch (input.LA(1))
				{
				case 61:
					{
					alt53 = 1;
					}
					break;
				case 65:
					{
					alt53 = 2;
					}
					break;
				case 69:
					{
					alt53 = 3;
					}
					break;
				case 67:
					{
					alt53 = 4;
					}
					break;
				case 74:
					{
					alt53 = 5;
					}
					break;
				case 56:
					{
					alt53 = 6;
					}
					break;
				case 87:
					{
					alt53 = 7;
					}
					break;
				case 73:
					{
					alt53 = 8;
					}
					break;
				}

				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:321:26: '++'
					{
					DebugLocation(321, 26);
					string_literal137=(IToken)Match(input,61,Follow._61_in_suffix_expr2045);  
					stream_61.Add(string_literal137);



					{
					// AST REWRITE
					// elements: suffix_expr, 61
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 321:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(321, 34);
						// SugarCpp.g:321:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(321, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(321, 48);
						adaptor.AddChild(root_1, stream_61.NextNode());
						DebugLocation(321, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:322:14: '--'
					{
					DebugLocation(322, 14);
					string_literal138=(IToken)Match(input,65,Follow._65_in_suffix_expr2071);  
					stream_65.Add(string_literal138);



					{
					// AST REWRITE
					// elements: 65, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 322:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(322, 22);
						// SugarCpp.g:322:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(322, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(322, 36);
						adaptor.AddChild(root_1, stream_65.NextNode());
						DebugLocation(322, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:323:11: '.' IDENT
					{
					DebugLocation(323, 11);
					char_literal139=(IToken)Match(input,69,Follow._69_in_suffix_expr2094);  
					stream_69.Add(char_literal139);

					DebugLocation(323, 15);
					IDENT140=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2096);  
					stream_IDENT.Add(IDENT140);



					{
					// AST REWRITE
					// elements: suffix_expr, IDENT, 69
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 323:21: -> ^( Expr_Access '.' $suffix_expr IDENT )
					{
						DebugLocation(323, 24);
						// SugarCpp.g:323:24: ^( Expr_Access '.' $suffix_expr IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(323, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(323, 38);
						adaptor.AddChild(root_1, stream_69.NextNode());
						DebugLocation(323, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(323, 55);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:324:11: '->' IDENT
					{
					DebugLocation(324, 11);
					string_literal141=(IToken)Match(input,67,Follow._67_in_suffix_expr2121);  
					stream_67.Add(string_literal141);

					DebugLocation(324, 16);
					IDENT142=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2123);  
					stream_IDENT.Add(IDENT142);



					{
					// AST REWRITE
					// elements: 67, IDENT, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 324:22: -> ^( Expr_Access '->' $suffix_expr IDENT )
					{
						DebugLocation(324, 25);
						// SugarCpp.g:324:25: ^( Expr_Access '->' $suffix_expr IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(324, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(324, 39);
						adaptor.AddChild(root_1, stream_67.NextNode());
						DebugLocation(324, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(324, 57);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:325:11: '::' IDENT
					{
					DebugLocation(325, 11);
					string_literal143=(IToken)Match(input,74,Follow._74_in_suffix_expr2148);  
					stream_74.Add(string_literal143);

					DebugLocation(325, 16);
					IDENT144=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2150);  
					stream_IDENT.Add(IDENT144);



					{
					// AST REWRITE
					// elements: IDENT, 74, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 325:22: -> ^( Expr_Access '::' $suffix_expr IDENT )
					{
						DebugLocation(325, 25);
						// SugarCpp.g:325:25: ^( Expr_Access '::' $suffix_expr IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(325, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(325, 39);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(325, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(325, 57);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:326:11: '(' ( expr_list )? ')'
					{
					DebugLocation(326, 11);
					char_literal145=(IToken)Match(input,56,Follow._56_in_suffix_expr2175);  
					stream_56.Add(char_literal145);

					DebugLocation(326, 15);
					// SugarCpp.g:326:15: ( expr_list )?
					int alt51=2;
					try { DebugEnterSubRule(51);
					try { DebugEnterDecision(51, false);
					int LA51_0 = input.LA(1);

					if ((LA51_0==IDENT||LA51_0==INT||LA51_0==STRING||LA51_0==49||LA51_0==54||LA51_0==56||LA51_0==58||(LA51_0>=60 && LA51_0<=61)||(LA51_0>=64 && LA51_0<=65)||LA51_0==96||LA51_0==104))
					{
						alt51 = 1;
					}
					} finally { DebugExitDecision(51); }
					switch (alt51)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:326:15: expr_list
						{
						DebugLocation(326, 15);
						PushFollow(Follow._expr_list_in_suffix_expr2177);
						expr_list146=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list146.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(51); }

					DebugLocation(326, 26);
					char_literal147=(IToken)Match(input,57,Follow._57_in_suffix_expr2180);  
					stream_57.Add(char_literal147);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 326:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(326, 33);
						// SugarCpp.g:326:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(326, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(326, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(326, 58);
						// SugarCpp.g:326:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(326, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:327:11: '[' expr ']'
					{
					DebugLocation(327, 11);
					char_literal148=(IToken)Match(input,87,Follow._87_in_suffix_expr2204);  
					stream_87.Add(char_literal148);

					DebugLocation(327, 15);
					PushFollow(Follow._expr_in_suffix_expr2206);
					expr149=expr();
					PopFollow();

					stream_expr.Add(expr149.Tree);
					DebugLocation(327, 20);
					char_literal150=(IToken)Match(input,88,Follow._88_in_suffix_expr2208);  
					stream_88.Add(char_literal150);



					{
					// AST REWRITE
					// elements: suffix_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 327:24: -> ^( Expr_Dict $suffix_expr expr )
					{
						DebugLocation(327, 27);
						// SugarCpp.g:327:27: ^( Expr_Dict $suffix_expr expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(327, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(327, 40);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(327, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// SugarCpp.g:328:11: ':' IDENT '(' ( expr_list )? ')'
					{
					DebugLocation(328, 11);
					char_literal151=(IToken)Match(input,73,Follow._73_in_suffix_expr2231);  
					stream_73.Add(char_literal151);

					DebugLocation(328, 15);
					IDENT152=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2233);  
					stream_IDENT.Add(IDENT152);

					DebugLocation(328, 21);
					char_literal153=(IToken)Match(input,56,Follow._56_in_suffix_expr2235);  
					stream_56.Add(char_literal153);

					DebugLocation(328, 25);
					// SugarCpp.g:328:25: ( expr_list )?
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, false);
					int LA52_0 = input.LA(1);

					if ((LA52_0==IDENT||LA52_0==INT||LA52_0==STRING||LA52_0==49||LA52_0==54||LA52_0==56||LA52_0==58||(LA52_0>=60 && LA52_0<=61)||(LA52_0>=64 && LA52_0<=65)||LA52_0==96||LA52_0==104))
					{
						alt52 = 1;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:328:25: expr_list
						{
						DebugLocation(328, 25);
						PushFollow(Follow._expr_list_in_suffix_expr2237);
						expr_list154=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list154.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(52); }

					DebugLocation(328, 36);
					char_literal155=(IToken)Match(input,57,Follow._57_in_suffix_expr2240);  
					stream_57.Add(char_literal155);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list, IDENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 328:40: -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? )
					{
						DebugLocation(328, 43);
						// SugarCpp.g:328:43: ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(328, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(328, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(328, 73);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(328, 79);
						// SugarCpp.g:328:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(328, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 46);
			LeaveRule("suffix_expr", 46);
			LeaveRule_suffix_expr();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:332:1: atom_expr : ( INT | IDENT | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> expr );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 47);
		TraceIn("atom_expr", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INT156 = default(IToken);
		IToken IDENT157 = default(IToken);
		IToken STRING158 = default(IToken);
		IToken char_literal159 = default(IToken);
		IToken char_literal161 = default(IToken);
		IToken char_literal163 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr162 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INT156_tree = default(CommonTree);
		CommonTree IDENT157_tree = default(CommonTree);
		CommonTree STRING158_tree = default(CommonTree);
		CommonTree char_literal159_tree = default(CommonTree);
		CommonTree char_literal161_tree = default(CommonTree);
		CommonTree char_literal163_tree = default(CommonTree);
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( INT | IDENT | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> expr )
			int alt55=4;
			try { DebugEnterDecision(55, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt55 = 1;
				}
				break;
			case IDENT:
				{
				alt55 = 2;
				}
				break;
			case STRING:
				{
				alt55 = 3;
				}
				break;
			case 56:
				{
				alt55 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:333:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(333, 4);
				INT156=(IToken)Match(input,INT,Follow._INT_in_atom_expr2279); 
				INT156_tree = (CommonTree)adaptor.Create(INT156);
				adaptor.AddChild(root_0, INT156_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:334:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(334, 4);
				IDENT157=(IToken)Match(input,IDENT,Follow._IDENT_in_atom_expr2284); 
				IDENT157_tree = (CommonTree)adaptor.Create(IDENT157);
				adaptor.AddChild(root_0, IDENT157_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:335:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(335, 4);
				STRING158=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr2289); 
				STRING158_tree = (CommonTree)adaptor.Create(STRING158);
				adaptor.AddChild(root_0, STRING158_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:336:4: '(' expr ( ',' expr )* ')'
				{
				DebugLocation(336, 4);
				 bool more_than_one = false; 
				DebugLocation(337, 3);
				char_literal159=(IToken)Match(input,56,Follow._56_in_atom_expr2298);  
				stream_56.Add(char_literal159);

				DebugLocation(337, 7);
				PushFollow(Follow._expr_in_atom_expr2300);
				expr160=expr();
				PopFollow();

				stream_expr.Add(expr160.Tree);
				DebugLocation(337, 12);
				// SugarCpp.g:337:12: ( ',' expr )*
				try { DebugEnterSubRule(54);
				while (true)
				{
					int alt54=2;
					try { DebugEnterDecision(54, false);
					int LA54_0 = input.LA(1);

					if ((LA54_0==63))
					{
						alt54 = 1;
					}


					} finally { DebugExitDecision(54); }
					switch ( alt54 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:337:13: ',' expr
						{
						DebugLocation(337, 13);
						char_literal161=(IToken)Match(input,63,Follow._63_in_atom_expr2303);  
						stream_63.Add(char_literal161);

						DebugLocation(337, 17);
						PushFollow(Follow._expr_in_atom_expr2305);
						expr162=expr();
						PopFollow();

						stream_expr.Add(expr162.Tree);
						DebugLocation(337, 22);
						 more_than_one = true; 

						}
						break;

					default:
						goto loop54;
					}
				}

				loop54:
					;

				} finally { DebugExitSubRule(54); }

				DebugLocation(337, 51);
				char_literal163=(IToken)Match(input,57,Follow._57_in_atom_expr2312);  
				stream_57.Add(char_literal163);



				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 338:3: -> { more_than_one }? ^( Expr_Tuple ( expr )+ )
				if ( more_than_one )
				{
					DebugLocation(338, 25);
					// SugarCpp.g:338:25: ^( Expr_Tuple ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(338, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

					DebugLocation(338, 38);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(338, 38);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 339:3: -> expr
				{
					DebugLocation(339, 6);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 47);
			LeaveRule("atom_expr", 47);
			LeaveRule_atom_expr();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:342:1: lvalue : ( IDENT | '(' ( IDENT ( ',' IDENT )* )? ')' -> ^( Match_Tuple ( IDENT )* ) );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 48);
		TraceIn("lvalue", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT164 = default(IToken);
		IToken char_literal165 = default(IToken);
		IToken IDENT166 = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken IDENT168 = default(IToken);
		IToken char_literal169 = default(IToken);

		CommonTree IDENT164_tree = default(CommonTree);
		CommonTree char_literal165_tree = default(CommonTree);
		CommonTree IDENT166_tree = default(CommonTree);
		CommonTree char_literal167_tree = default(CommonTree);
		CommonTree IDENT168_tree = default(CommonTree);
		CommonTree char_literal169_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(342, 1);
		try
		{
			// SugarCpp.g:343:2: ( IDENT | '(' ( IDENT ( ',' IDENT )* )? ')' -> ^( Match_Tuple ( IDENT )* ) )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==IDENT))
			{
				alt58 = 1;
			}
			else if ((LA58_0==56))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:343:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(343, 4);
				IDENT164=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue2342); 
				IDENT164_tree = (CommonTree)adaptor.Create(IDENT164);
				adaptor.AddChild(root_0, IDENT164_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:344:4: '(' ( IDENT ( ',' IDENT )* )? ')'
				{
				DebugLocation(344, 4);
				char_literal165=(IToken)Match(input,56,Follow._56_in_lvalue2347);  
				stream_56.Add(char_literal165);

				DebugLocation(344, 8);
				// SugarCpp.g:344:8: ( IDENT ( ',' IDENT )* )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==IDENT))
				{
					alt57 = 1;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:344:9: IDENT ( ',' IDENT )*
					{
					DebugLocation(344, 9);
					IDENT166=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue2350);  
					stream_IDENT.Add(IDENT166);

					DebugLocation(344, 15);
					// SugarCpp.g:344:15: ( ',' IDENT )*
					try { DebugEnterSubRule(56);
					while (true)
					{
						int alt56=2;
						try { DebugEnterDecision(56, false);
						int LA56_0 = input.LA(1);

						if ((LA56_0==63))
						{
							alt56 = 1;
						}


						} finally { DebugExitDecision(56); }
						switch ( alt56 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:344:16: ',' IDENT
							{
							DebugLocation(344, 16);
							char_literal167=(IToken)Match(input,63,Follow._63_in_lvalue2353);  
							stream_63.Add(char_literal167);

							DebugLocation(344, 20);
							IDENT168=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue2355);  
							stream_IDENT.Add(IDENT168);


							}
							break;

						default:
							goto loop56;
						}
					}

					loop56:
						;

					} finally { DebugExitSubRule(56); }


					}
					break;

				}
				} finally { DebugExitSubRule(57); }

				DebugLocation(344, 30);
				char_literal169=(IToken)Match(input,57,Follow._57_in_lvalue2361);  
				stream_57.Add(char_literal169);



				{
				// AST REWRITE
				// elements: IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 344:34: -> ^( Match_Tuple ( IDENT )* )
				{
					DebugLocation(344, 37);
					// SugarCpp.g:344:37: ^( Match_Tuple ( IDENT )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(344, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(344, 51);
					// SugarCpp.g:344:51: ( IDENT )*
					while ( stream_IDENT.HasNext )
					{
						DebugLocation(344, 51);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 48);
			LeaveRule("lvalue", 48);
			LeaveRule_lvalue();
		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"
	#endregion Rules


	#region DFA
	private DFA3 dfa3;
	private DFA7 dfa7;
	private DFA23 dfa23;
	private DFA26 dfa26;
	private DFA30 dfa30;
	private DFA31 dfa31;
	private DFA32 dfa32;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa7 = new DFA7( this );
		dfa23 = new DFA23( this );
		dfa26 = new DFA26( this );
		dfa30 = new DFA30( this );
		dfa31 = new DFA31( this );
		dfa32 = new DFA32( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA3_maxS =
			"\x2\x64\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x3\x7\xFFFF\x1\x1\x39\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x2\xFFFF\x3\x3",
				"\x1\x2\x14\xFFFF\x1\x3\x7\xFFFF\x1\x1\x39\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x2\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()+ loopback of 143:4: ( ( NEWLINE )* node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x4\xFFFF";
		private const string DFA7_eofS =
			"\x4\xFFFF";
		private const string DFA7_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA7_maxS =
			"\x1\x22\x1\x27\x2\xFFFF";
		private const string DFA7_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA7_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1",
				"\x1\x2\x1C\xFFFF\x1\x1\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "()* loopback of 158:29: ( ( NEWLINE )+ STRING )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA23 : DFA
	{
		private const string DFA23_eotS =
			"\x4\xFFFF";
		private const string DFA23_eofS =
			"\x4\xFFFF";
		private const string DFA23_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA23_maxS =
			"\x1\x22\x1\x68\x2\xFFFF";
		private const string DFA23_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA23_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA23_transitionS =
			{
				"\x1\x2\x1C\xFFFF\x1\x1",
				"\x1\x2\x14\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x1\x4\xFFFF\x1\x3"+
				"\x9\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x2\x3\x2\xFFFF\x2\x3\x1E\xFFFF\x2\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA23_eot = DFA.UnpackEncodedString(DFA23_eotS);
		private static readonly short[] DFA23_eof = DFA.UnpackEncodedString(DFA23_eofS);
		private static readonly char[] DFA23_min = DFA.UnpackEncodedStringToUnsignedChars(DFA23_minS);
		private static readonly char[] DFA23_max = DFA.UnpackEncodedStringToUnsignedChars(DFA23_maxS);
		private static readonly short[] DFA23_accept = DFA.UnpackEncodedString(DFA23_acceptS);
		private static readonly short[] DFA23_special = DFA.UnpackEncodedString(DFA23_specialS);
		private static readonly short[][] DFA23_transition;

		static DFA23()
		{
			int numStates = DFA23_transitionS.Length;
			DFA23_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA23_transition[i] = DFA.UnpackEncodedString(DFA23_transitionS[i]);
			}
		}

		public DFA23( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 23;
			this.eot = DFA23_eot;
			this.eof = DFA23_eof;
			this.min = DFA23_min;
			this.max = DFA23_max;
			this.accept = DFA23_accept;
			this.special = DFA23_special;
			this.transition = DFA23_transition;
		}

		public override string Description { get { return "()* loopback of 190:11: ( ( NEWLINE )+ stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA26 : DFA
	{
		private const string DFA26_eotS =
			"\xC\xFFFF";
		private const string DFA26_eofS =
			"\x1\x1\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x5\xFFFF";
		private const string DFA26_minS =
			"\x1\x5\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x1\x1A\x1\x36\x2\x1A\x1\x36";
		private const string DFA26_maxS =
			"\x1\x64\x1\xFFFF\x3\x64\x1\xFFFF\x1\x64\x2\x53\x1\x1A\x1\x3A\x1\x53";
		private const string DFA26_acceptS =
			"\x1\xFFFF\x1\x2\x3\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA26_specialS =
			"\xC\xFFFF}>";
		private static readonly string[] DFA26_transitionS =
			{
				"\x1\x1\x14\xFFFF\x1\x2\x7\xFFFF\x1\x1\x39\xFFFF\x1\x1\x1\xFFFF\x1\x1"+
				"\x1\x3\x2\xFFFF\x3\x1",
				"",
				"\x1\x5\x14\xFFFF\x1\x4\x7\xFFFF\x1\x5\x13\xFFFF\x1\x1\x3\xFFFF\x1\x1"+
				"\x4\xFFFF\x1\x1\x9\xFFFF\x1\x1\x2\xFFFF\x1\x1\xF\xFFFF\x1\x5\x1\xFFFF"+
				"\x2\x5\x2\xFFFF\x3\x5",
				"\x1\x5\x14\xFFFF\x1\x6\x7\xFFFF\x1\x5\x39\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x2\xFFFF\x3\x5",
				"\x1\x5\x14\xFFFF\x1\x5\x7\xFFFF\x1\x5\x13\xFFFF\x1\x5\x1\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x5\x4\xFFFF\x1\x5\x9\xFFFF\x1\x5\x2\xFFFF\x1\x7\xF\xFFFF"+
				"\x1\x5\x1\xFFFF\x2\x5\x2\xFFFF\x3\x5",
				"",
				"\x1\x5\x14\xFFFF\x1\x5\x1\x1\x6\xFFFF\x1\x5\x13\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x5\x4\xFFFF\x1\x5\x9\xFFFF\x1\x5\x2\xFFFF\x1\x5\xF\xFFFF\x1\x5\x1"+
				"\xFFFF\x2\x5\x2\xFFFF\x3\x5",
				"\x1\x8\x38\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xC\xFFFF\x1\x5\x6\xFFFF\x1\xA",
				"\x1\xB",
				"\x1\x5\x1B\xFFFF\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xC\xFFFF\x1\x5\x6\xFFFF\x1\xA"
			};

		private static readonly short[] DFA26_eot = DFA.UnpackEncodedString(DFA26_eotS);
		private static readonly short[] DFA26_eof = DFA.UnpackEncodedString(DFA26_eofS);
		private static readonly char[] DFA26_min = DFA.UnpackEncodedStringToUnsignedChars(DFA26_minS);
		private static readonly char[] DFA26_max = DFA.UnpackEncodedStringToUnsignedChars(DFA26_maxS);
		private static readonly short[] DFA26_accept = DFA.UnpackEncodedString(DFA26_acceptS);
		private static readonly short[] DFA26_special = DFA.UnpackEncodedString(DFA26_specialS);
		private static readonly short[][] DFA26_transition;

		static DFA26()
		{
			int numStates = DFA26_transitionS.Length;
			DFA26_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA26_transition[i] = DFA.UnpackEncodedString(DFA26_transitionS[i]);
			}
		}

		public DFA26( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}

		public override string Description { get { return "()* loopback of 211:12: ( stmt_using_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA30 : DFA
	{
		private const string DFA30_eotS =
			"\x9\xFFFF";
		private const string DFA30_eofS =
			"\x2\xFFFF\x1\x1\x4\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA30_minS =
			"\x1\x1A\x1\xFFFF\x1\x1F\x1\x1A\x1\xFFFF\x1\x1F\x1\x1A\x2\x1F";
		private const string DFA30_maxS =
			"\x1\x68\x1\xFFFF\x1\x67\x1\x68\x1\xFFFF\x1\x67\x1\x68\x2\x67";
		private const string DFA30_acceptS =
			"\x1\xFFFF\x1\x2\x2\xFFFF\x1\x1\x4\xFFFF";
		private const string DFA30_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA30_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x1\xA\xFFFF\x1\x1\x9\xFFFF\x1\x1\x4\xFFFF\x1\x1\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1E\xFFFF"+
				"\x1\x1\x7\xFFFF\x1\x1",
				"",
				"\x1\x1\x12\xFFFF\x2\x1\x1\x4\x2\x1\x1\x4\x1\x1\x1\xFFFF\x1\x1\x1\x4"+
				"\x2\x1\x1\x4\x1\xFFFF\x2\x1\x1\x4\x5\x1\x1\x4\x2\x1\x1\x4\x2\x1\x1\x4"+
				"\x1\x1\x1\x4\x1\x1\x1\xFFFF\x3\x1\x1\x4\x1\x1\x1\xFFFF\x1\x1\x1\x4\x2"+
				"\xFFFF\x1\x1\x7\xFFFF\x1\x1\x1\x4\x1\x1",
				"\x1\x5\x1\xFFFF\x1\x1\xA\xFFFF\x1\x1\x9\xFFFF\x1\x1\x4\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x1\x1\x4\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1E\xFFFF"+
				"\x1\x1\x7\xFFFF\x1\x1",
				"",
				"\x1\x1\x12\xFFFF\x7\x1\x1\x7\x5\x1\x1\x6\x12\x1\x1\xFFFF\x5\x1\x1\xFFFF"+
				"\x2\x1\x2\xFFFF\x1\x1\x7\xFFFF\x3\x1",
				"\x1\x8\x1\xFFFF\x1\x1\xA\xFFFF\x1\x1\x9\xFFFF\x1\x1\x4\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1E\xFFFF"+
				"\x1\x1\x7\xFFFF\x1\x1",
				"\x1\x1\x12\xFFFF\x2\x1\x1\x4\x2\x1\x1\x4\x1\x1\x1\xFFFF\x1\x1\x1\x4"+
				"\x2\x1\x1\x4\x1\xFFFF\x2\x1\x1\x4\x5\x1\x1\x4\x2\x1\x1\x4\x2\x1\x1\x4"+
				"\x1\x1\x1\x4\x1\x1\x1\xFFFF\x3\x1\x1\x4\x1\x1\x1\xFFFF\x1\x1\x1\x4\x2"+
				"\xFFFF\x1\x1\x7\xFFFF\x1\x1\x1\x4\x1\x1",
				"\x1\x1\x12\xFFFF\x7\x1\x1\x7\x5\x1\x1\x6\x12\x1\x1\xFFFF\x5\x1\x1\xFFFF"+
				"\x2\x1\x2\xFFFF\x1\x1\x7\xFFFF\x3\x1"
			};

		private static readonly short[] DFA30_eot = DFA.UnpackEncodedString(DFA30_eotS);
		private static readonly short[] DFA30_eof = DFA.UnpackEncodedString(DFA30_eofS);
		private static readonly char[] DFA30_min = DFA.UnpackEncodedStringToUnsignedChars(DFA30_minS);
		private static readonly char[] DFA30_max = DFA.UnpackEncodedStringToUnsignedChars(DFA30_maxS);
		private static readonly short[] DFA30_accept = DFA.UnpackEncodedString(DFA30_acceptS);
		private static readonly short[] DFA30_special = DFA.UnpackEncodedString(DFA30_specialS);
		private static readonly short[][] DFA30_transition;

		static DFA30()
		{
			int numStates = DFA30_transitionS.Length;
			DFA30_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA30_transition[i] = DFA.UnpackEncodedString(DFA30_transitionS[i]);
			}
		}

		public DFA30( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}

		public override string Description { get { return "()+ loopback of 227:4: (a= lvalue b= modify_expr_op ^)+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA31 : DFA
	{
		private const string DFA31_eotS =
			"\xB\xFFFF";
		private const string DFA31_eofS =
			"\xB\xFFFF";
		private const string DFA31_minS =
			"\x2\x1A\x1\xFFFF\x1\x1F\x2\x1A\x1\x1F\x1\x36\x1\x1A\x1\xFFFF\x1\x36";
		private const string DFA31_maxS =
			"\x2\x68\x1\xFFFF\x1\x67\x1\x68\x1\x1A\x1\x67\x1\x50\x1\x1A\x1\xFFFF\x1"+
			"\x50";
		private const string DFA31_acceptS =
			"\x2\xFFFF\x1\x2\x6\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA31_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA31_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\xA\xFFFF\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1E\xFFFF"+
				"\x1\x2\x7\xFFFF\x1\x2",
				"\x1\x3\x1\xFFFF\x1\x2\xA\xFFFF\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x3\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1E\xFFFF\x1\x2\x7\xFFFF"+
				"\x1\x2",
				"",
				"\x1\x2\x12\xFFFF\xD\x2\x1\x4\x9\x2\x1\x5\x8\x2\x1\xFFFF\x5\x2\x1\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2\x7\xFFFF\x3\x2",
				"\x1\x6\x1\xFFFF\x1\x2\xA\xFFFF\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1E\xFFFF"+
				"\x1\x2\x7\xFFFF\x1\x2",
				"\x1\x7",
				"\x1\x2\x12\xFFFF\xD\x2\x1\x4\x9\x2\x1\x8\x8\x2\x1\xFFFF\x5\x2\x1\xFFFF"+
				"\x2\x2\x2\xFFFF\x1\x2\x7\xFFFF\x3\x2",
				"\x1\x9\x1\xFFFF\x1\x2\x2\x9\x4\xFFFF\x1\x9\xC\xFFFF\x1\x9\x3\xFFFF"+
				"\x1\x9",
				"\x1\xA",
				"",
				"\x1\x9\x1\xFFFF\x1\x2\x2\x9\x4\xFFFF\x1\x9\xC\xFFFF\x1\x9\x3\xFFFF"+
				"\x1\x9"
			};

		private static readonly short[] DFA31_eot = DFA.UnpackEncodedString(DFA31_eotS);
		private static readonly short[] DFA31_eof = DFA.UnpackEncodedString(DFA31_eofS);
		private static readonly char[] DFA31_min = DFA.UnpackEncodedStringToUnsignedChars(DFA31_minS);
		private static readonly char[] DFA31_max = DFA.UnpackEncodedStringToUnsignedChars(DFA31_maxS);
		private static readonly short[] DFA31_accept = DFA.UnpackEncodedString(DFA31_acceptS);
		private static readonly short[] DFA31_special = DFA.UnpackEncodedString(DFA31_specialS);
		private static readonly short[][] DFA31_transition;

		static DFA31()
		{
			int numStates = DFA31_transitionS.Length;
			DFA31_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA31_transition[i] = DFA.UnpackEncodedString(DFA31_transitionS[i]);
			}
		}

		public DFA31( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 31;
			this.eot = DFA31_eot;
			this.eof = DFA31_eof;
			this.min = DFA31_min;
			this.max = DFA31_max;
			this.accept = DFA31_accept;
			this.special = DFA31_special;
			this.transition = DFA31_transition;
		}

		public override string Description { get { return "234:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA32 : DFA
	{
		private const string DFA32_eotS =
			"\x9\xFFFF";
		private const string DFA32_eofS =
			"\x2\xFFFF\x1\x1\x4\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA32_minS =
			"\x1\x1A\x1\xFFFF\x1\x5\x1\x1A\x1\xFFFF\x1\x1F\x1\x1A\x1\x5\x1\x1F";
		private const string DFA32_maxS =
			"\x1\x68\x1\xFFFF\x1\x67\x1\x68\x1\xFFFF\x1\x67\x1\x68\x2\x67";
		private const string DFA32_acceptS =
			"\x1\xFFFF\x1\x2\x2\xFFFF\x1\x1\x4\xFFFF";
		private const string DFA32_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA32_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x1\xA\xFFFF\x1\x1\x9\xFFFF\x1\x1\x4\xFFFF\x1\x1\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1E\xFFFF"+
				"\x1\x1\x7\xFFFF\x1\x1",
				"",
				"\x1\x1\x14\xFFFF\x1\x1\x4\xFFFF\x1\x1\x2\xFFFF\x1\x1\xF\xFFFF\x2\x1"+
				"\x1\x4\x2\x1\x1\x4\x3\x1\x1\x4\x2\x1\x1\x4\x3\x1\x1\x4\x5\x1\x1\x4\x2"+
				"\x1\x1\x4\x2\x1\x1\x4\x1\x1\x1\x4\x1\x1\x1\xFFFF\x3\x1\x1\x4\x3\x1\x1"+
				"\x4\x1\xFFFF\x4\x1\x2\xFFFF\x4\x1\x1\x4\x1\x1",
				"\x1\x5\x1\xFFFF\x1\x1\xA\xFFFF\x1\x1\x9\xFFFF\x1\x1\x4\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x1\x1\x4\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1E\xFFFF"+
				"\x1\x1\x7\xFFFF\x1\x1",
				"",
				"\x1\x1\x12\xFFFF\x7\x1\x1\x7\x5\x1\x1\x6\x12\x1\x1\xFFFF\x5\x1\x1\xFFFF"+
				"\x2\x1\x2\xFFFF\x1\x1\x7\xFFFF\x3\x1",
				"\x1\x8\x1\xFFFF\x1\x1\xA\xFFFF\x1\x1\x9\xFFFF\x1\x1\x4\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1E\xFFFF"+
				"\x1\x1\x7\xFFFF\x1\x1",
				"\x1\x1\x14\xFFFF\x1\x1\x4\xFFFF\x1\x1\x2\xFFFF\x1\x1\xF\xFFFF\x2\x1"+
				"\x1\x4\x2\x1\x1\x4\x3\x1\x1\x4\x2\x1\x1\x4\x3\x1\x1\x4\x5\x1\x1\x4\x2"+
				"\x1\x1\x4\x2\x1\x1\x4\x1\x1\x1\x4\x1\x1\x1\xFFFF\x3\x1\x1\x4\x3\x1\x1"+
				"\x4\x1\xFFFF\x4\x1\x2\xFFFF\x4\x1\x1\x4\x1\x1",
				"\x1\x1\x12\xFFFF\x7\x1\x1\x7\x5\x1\x1\x6\x12\x1\x1\xFFFF\x5\x1\x1\xFFFF"+
				"\x2\x1\x2\xFFFF\x1\x1\x7\xFFFF\x3\x1"
			};

		private static readonly short[] DFA32_eot = DFA.UnpackEncodedString(DFA32_eotS);
		private static readonly short[] DFA32_eof = DFA.UnpackEncodedString(DFA32_eofS);
		private static readonly char[] DFA32_min = DFA.UnpackEncodedStringToUnsignedChars(DFA32_minS);
		private static readonly char[] DFA32_max = DFA.UnpackEncodedStringToUnsignedChars(DFA32_maxS);
		private static readonly short[] DFA32_accept = DFA.UnpackEncodedString(DFA32_acceptS);
		private static readonly short[] DFA32_special = DFA.UnpackEncodedString(DFA32_specialS);
		private static readonly short[][] DFA32_transition;

		static DFA32()
		{
			int numStates = DFA32_transitionS.Length;
			DFA32_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA32_transition[i] = DFA.UnpackEncodedString(DFA32_transitionS[i]);
			}
		}

		public DFA32( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}

		public override string Description { get { return "()* loopback of 241:4: (a= lvalue b= modify_expr_op ^)*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _overall_block_in_root362 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _NEWLINE_in_root365 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _EOF_in_root368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_overall_block380 = new BitSet(new ulong[]{0x404000000UL,0x1CD0000000UL});
		public static readonly BitSet _node_in_overall_block383 = new BitSet(new ulong[]{0x404000002UL,0x1CD0000000UL});
		public static readonly BitSet _func_def_in_node396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_def_in_node411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_node421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_node426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_node431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_import_def442 = new BitSet(new ulong[]{0x8008000002UL});
		public static readonly BitSet _STRING_in_import_def444 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _INDENT_in_import_def448 = new BitSet(new ulong[]{0x400000020UL});
		public static readonly BitSet _NEWLINE_in_import_def451 = new BitSet(new ulong[]{0x8400000000UL});
		public static readonly BitSet _STRING_in_import_def454 = new BitSet(new ulong[]{0x400000020UL});
		public static readonly BitSet _NEWLINE_in_import_def458 = new BitSet(new ulong[]{0x400000020UL});
		public static readonly BitSet _DEDENT_in_import_def461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_enum_def483 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_enum_def485 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_enum_def487 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_enum_def489 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_enum_def492 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_enum_def494 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _95_in_namespace_def516 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_namespace_def518 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _INDENT_in_namespace_def520 = new BitSet(new ulong[]{0x404000000UL,0x1CD0000000UL});
		public static readonly BitSet _overall_block_in_namespace_def522 = new BitSet(new ulong[]{0x400000020UL});
		public static readonly BitSet _NEWLINE_in_namespace_def524 = new BitSet(new ulong[]{0x400000020UL});
		public static readonly BitSet _DEDENT_in_namespace_def527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_struct_def548 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_struct_def550 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _INDENT_in_struct_def552 = new BitSet(new ulong[]{0x404000000UL,0x1CD0000000UL});
		public static readonly BitSet _overall_block_in_struct_def554 = new BitSet(new ulong[]{0x400000020UL});
		public static readonly BitSet _NEWLINE_in_struct_def556 = new BitSet(new ulong[]{0x400000020UL});
		public static readonly BitSet _DEDENT_in_struct_def559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_type_name580 = new BitSet(new ulong[]{0x440000000000002UL,0x1000UL});
		public static readonly BitSet _76_in_type_name583 = new BitSet(new ulong[]{0x4000000UL,0x80000UL});
		public static readonly BitSet _type_name_in_type_name586 = new BitSet(new ulong[]{0x8000000000000000UL,0x80000UL});
		public static readonly BitSet _63_in_type_name589 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _type_name_in_type_name591 = new BitSet(new ulong[]{0x8000000000000000UL,0x80000UL});
		public static readonly BitSet _83_in_type_name597 = new BitSet(new ulong[]{0x440000000000002UL});
		public static readonly BitSet _58_in_type_name601 = new BitSet(new ulong[]{0x440000000000002UL});
		public static readonly BitSet _54_in_type_name604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_generic_parameter641 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _63_in_generic_parameter644 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_generic_parameter647 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _stmt_alloc_in_func_args660 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _63_in_func_args663 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args665 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _type_name_in_func_def687 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_func_def689 = new BitSet(new ulong[]{0x100000000000000UL,0x1000UL});
		public static readonly BitSet _76_in_func_def692 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _generic_parameter_in_func_def694 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_func_def696 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_func_def700 = new BitSet(new ulong[]{0x200000004000000UL});
		public static readonly BitSet _func_args_in_func_def702 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_func_def705 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _stmt_block_in_func_def707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block721 = new BitSet(new ulong[]{0x400000020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block724 = new BitSet(new ulong[]{0x3542008414000000UL,0x11B00000003UL});
		public static readonly BitSet _stmt_in_stmt_block727 = new BitSet(new ulong[]{0x400000020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block731 = new BitSet(new ulong[]{0x400000020UL});
		public static readonly BitSet _DEDENT_in_stmt_block734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt_expr785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_stmt_typedef796 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_stmt_typedef798 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_typedef800 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _type_name_in_stmt_typedef802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_stmt_using833 = new BitSet(new ulong[]{0x4000002UL,0x80000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using835 = new BitSet(new ulong[]{0x4000002UL,0x80000000UL});
		public static readonly BitSet _97_in_stmt_return856 = new BitSet(new ulong[]{0x3542008014000002UL,0x10100000003UL});
		public static readonly BitSet _expr_in_stmt_return858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident_list879 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _63_in_ident_list882 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_ident_list884 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _ident_list_in_stmt_alloc906 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _73_in_stmt_alloc908 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _type_name_in_stmt_alloc910 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_alloc913 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _expr_in_stmt_alloc915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify944 = new BitSet(new ulong[]{0x4890000000000000UL,0x4004414904UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify948 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _cond_expr_in_stmt_modify953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_lambda_expr975 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _func_args_in_lambda_expr977 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_lambda_expr979 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_lambda_expr981 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _modify_expr_in_lambda_expr983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_modify_expr1063 = new BitSet(new ulong[]{0x4890000000000000UL,0x4004414904UL});
		public static readonly BitSet _modify_expr_op_in_modify_expr1067 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _cond_expr_in_modify_expr1072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item1081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr1093 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_cond_expr1102 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1106 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_cond_expr1108 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr1143 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_or_expr1152 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _and_expr_in_or_expr1156 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _bit_or_in_and_expr1186 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _53_in_and_expr1195 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _bit_or_in_and_expr1199 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _bit_xor_in_bit_or1229 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_bit_or1238 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _bit_xor_in_bit_or1242 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor1272 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_bit_xor1281 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _bit_and_in_bit_xor1285 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1315 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _54_in_bit_and1324 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1328 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1369 = new BitSet(new ulong[]{0x4000000000002UL,0x20000UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr1378 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1382 = new BitSet(new ulong[]{0x4000000000002UL,0x20000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1432 = new BitSet(new ulong[]{0x2UL,0x189000UL});
		public static readonly BitSet _cmp_expr_op_in_cmp_expr1441 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1445 = new BitSet(new ulong[]{0x2UL,0x189000UL});
		public static readonly BitSet _add_expr_in_shift_expr1486 = new BitSet(new ulong[]{0x2UL,0x202000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr1495 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _add_expr_in_shift_expr1499 = new BitSet(new ulong[]{0x2UL,0x202000UL});
		public static readonly BitSet _infix_expr_in_add_expr1529 = new BitSet(new ulong[]{0x1000000000000002UL,0x1UL});
		public static readonly BitSet _60_in_add_expr1539 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _infix_expr_in_add_expr1543 = new BitSet(new ulong[]{0x1000000000000002UL,0x1UL});
		public static readonly BitSet _64_in_add_expr1570 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _infix_expr_in_add_expr1574 = new BitSet(new ulong[]{0x1000000000000002UL,0x1UL});
		public static readonly BitSet _mul_expr_in_infix_expr1614 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _Infix_Func_in_infix_expr1624 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _mul_expr_in_infix_expr1628 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _selector_expr_in_mul_expr1660 = new BitSet(new ulong[]{0x408000000000002UL,0x80UL});
		public static readonly BitSet _58_in_mul_expr1670 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _selector_expr_in_mul_expr1674 = new BitSet(new ulong[]{0x408000000000002UL,0x80UL});
		public static readonly BitSet _71_in_mul_expr1704 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _selector_expr_in_mul_expr1708 = new BitSet(new ulong[]{0x408000000000002UL,0x80UL});
		public static readonly BitSet _51_in_mul_expr1738 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _selector_expr_in_mul_expr1742 = new BitSet(new ulong[]{0x408000000000002UL,0x80UL});
		public static readonly BitSet _prefix_expr_in_selector_expr1785 = new BitSet(new ulong[]{0x2UL,0x50UL});
		public static readonly BitSet _68_in_selector_expr1795 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_selector_expr1799 = new BitSet(new ulong[]{0x2UL,0x50UL});
		public static readonly BitSet _70_in_selector_expr1827 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_selector_expr1832 = new BitSet(new ulong[]{0x2UL,0x50UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr1907 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr1909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_prefix_expr1925 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _type_name_in_prefix_expr1927 = new BitSet(new ulong[]{0x100000000000000UL,0x800000UL});
		public static readonly BitSet _56_in_prefix_expr1931 = new BitSet(new ulong[]{0x3742008014000000UL,0x10100000003UL});
		public static readonly BitSet _expr_list_in_prefix_expr1933 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_prefix_expr1936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_prefix_expr1971 = new BitSet(new ulong[]{0x3542008014000000UL,0x10101000003UL});
		public static readonly BitSet _expr_list_in_prefix_expr1973 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_prefix_expr1976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr2001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list2013 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _63_in_expr_list2016 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _expr_in_expr_list2019 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _atom_expr_in_suffix_expr2035 = new BitSet(new ulong[]{0x2100000000000002UL,0x80062AUL});
		public static readonly BitSet _61_in_suffix_expr2045 = new BitSet(new ulong[]{0x2100000000000002UL,0x80062AUL});
		public static readonly BitSet _65_in_suffix_expr2071 = new BitSet(new ulong[]{0x2100000000000002UL,0x80062AUL});
		public static readonly BitSet _69_in_suffix_expr2094 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2096 = new BitSet(new ulong[]{0x2100000000000002UL,0x80062AUL});
		public static readonly BitSet _67_in_suffix_expr2121 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2123 = new BitSet(new ulong[]{0x2100000000000002UL,0x80062AUL});
		public static readonly BitSet _74_in_suffix_expr2148 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2150 = new BitSet(new ulong[]{0x2100000000000002UL,0x80062AUL});
		public static readonly BitSet _56_in_suffix_expr2175 = new BitSet(new ulong[]{0x3742008014000000UL,0x10100000003UL});
		public static readonly BitSet _expr_list_in_suffix_expr2177 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_suffix_expr2180 = new BitSet(new ulong[]{0x2100000000000002UL,0x80062AUL});
		public static readonly BitSet _87_in_suffix_expr2204 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _expr_in_suffix_expr2206 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_suffix_expr2208 = new BitSet(new ulong[]{0x2100000000000002UL,0x80062AUL});
		public static readonly BitSet _73_in_suffix_expr2231 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2233 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_suffix_expr2235 = new BitSet(new ulong[]{0x3742008014000000UL,0x10100000003UL});
		public static readonly BitSet _expr_list_in_suffix_expr2237 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_suffix_expr2240 = new BitSet(new ulong[]{0x2100000000000002UL,0x80062AUL});
		public static readonly BitSet _INT_in_atom_expr2279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_atom_expr2284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr2289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_atom_expr2298 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _expr_in_atom_expr2300 = new BitSet(new ulong[]{0x8200000000000000UL});
		public static readonly BitSet _63_in_atom_expr2303 = new BitSet(new ulong[]{0x3542008014000000UL,0x10100000003UL});
		public static readonly BitSet _expr_in_atom_expr2305 = new BitSet(new ulong[]{0x8200000000000000UL});
		public static readonly BitSet _57_in_atom_expr2312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_lvalue2342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_lvalue2347 = new BitSet(new ulong[]{0x200000004000000UL});
		public static readonly BitSet _IDENT_in_lvalue2350 = new BitSet(new ulong[]{0x8200000000000000UL});
		public static readonly BitSet _63_in_lvalue2353 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_lvalue2355 = new BitSet(new ulong[]{0x8200000000000000UL});
		public static readonly BitSet _57_in_lvalue2361 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
