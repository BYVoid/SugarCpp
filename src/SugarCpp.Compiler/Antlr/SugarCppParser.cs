//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-11 12:33:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_ForEach", "Stmt_For_Down_To", "Stmt_For_To", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'do'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'from'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'then'", "'to'", "'try'", "'typedef'", "'unsigned'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Cond=20;
	public const int Expr_Cond_Not_Null=21;
	public const int Expr_Dict=22;
	public const int Expr_Infix=23;
	public const int Expr_Lambda=24;
	public const int Expr_New_Array=25;
	public const int Expr_New_Type=26;
	public const int Expr_Not_Null=27;
	public const int Expr_Prefix=28;
	public const int Expr_Suffix=29;
	public const int Expr_Tuple=30;
	public const int Func_Args=31;
	public const int Func_Def=32;
	public const int Generic_Patameters=33;
	public const int Global_Block=34;
	public const int IDENT=35;
	public const int INDENT=36;
	public const int Ident_List=37;
	public const int Import=38;
	public const int Left_Bracket=39;
	public const int LineComment=40;
	public const int Linq_From=41;
	public const int Linq_Let=42;
	public const int Linq_Prefix=43;
	public const int Linq_Where=44;
	public const int Match_Tuple=45;
	public const int NEWLINE=46;
	public const int NUMBER=47;
	public const int Namespace=48;
	public const int Right_Bracket=49;
	public const int Root=50;
	public const int SP=51;
	public const int STRING=52;
	public const int Stmt_Block=53;
	public const int Stmt_Defer=54;
	public const int Stmt_Finally=55;
	public const int Stmt_For=56;
	public const int Stmt_ForEach=57;
	public const int Stmt_For_Down_To=58;
	public const int Stmt_For_To=59;
	public const int Stmt_If=60;
	public const int Stmt_Linq=61;
	public const int Stmt_Loop=62;
	public const int Stmt_Return=63;
	public const int Stmt_Try=64;
	public const int Stmt_Typedef=65;
	public const int Stmt_Using=66;
	public const int Stmt_While=67;
	public const int Type_IDENT=68;
	public const int Type_Ref=69;
	public const int Type_Tuple=70;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:172:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(172, 1);
		try
		{
			// SugarCpp.g:173:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:173:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(173, 4);
			// SugarCpp.g:173:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:173:4: NEWLINE
					{
					DebugLocation(173, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root490);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(173, 13);
			PushFollow(Follow._global_block_in_root493);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(173, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root495);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 173:30: -> ^( Root global_block )
			{
				DebugLocation(173, 33);
				// SugarCpp.g:173:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(173, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(173, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:176:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(176, 1);
		try
		{
			// SugarCpp.g:177:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:177:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(177, 4);
			// SugarCpp.g:177:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==114||(LA3_0>=123 && LA3_0<=124)||LA3_0==129||LA3_0==134||LA3_0==140||(LA3_0>=147 && LA3_0<=149)||LA3_0==155))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:177:5: node ( NEWLINE )+
					{
					DebugLocation(177, 5);
					PushFollow(Follow._node_in_global_block515);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(177, 10);
					// SugarCpp.g:177:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:177:10: NEWLINE
							{
							DebugLocation(177, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block517);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 177:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(177, 24);
				// SugarCpp.g:177:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(177, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(177, 39);
				// SugarCpp.g:177:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(177, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:180:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(180, 1);
		try
		{
			// SugarCpp.g:181:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:181:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._func_def_in_node540);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:182:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 4);
				PushFollow(Follow._class_def_in_node545);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:183:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(183, 4);
				PushFollow(Follow._enum_def_in_node550);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:184:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				PushFollow(Follow._global_alloc_in_node555);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:185:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 4);
				PushFollow(Follow._global_using_in_node560);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:186:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				PushFollow(Follow._global_typedef_in_node565);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:187:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				PushFollow(Follow._import_def_in_node570);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:188:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				PushFollow(Follow._namespace_def_in_node575);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:191:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(191, 1);
		try
		{
			// SugarCpp.g:192:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:192:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args587); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:193:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args592); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:194:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(194, 4);
				PushFollow(Follow._ident_in_attribute_args597);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:197:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(197, 1);
		try
		{
			// SugarCpp.g:198:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==124))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:198:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(198, 4);
				PushFollow(Follow._ident_in_attribute_item608);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(198, 10);
				// SugarCpp.g:198:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==78))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:198:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(198, 11);
					char_literal18=(IToken)Match(input,78,Follow._78_in_attribute_item611);  
					stream_78.Add(char_literal18);

					DebugLocation(198, 15);
					PushFollow(Follow._attribute_args_in_attribute_item613);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(198, 30);
					// SugarCpp.g:198:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==85))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:198:31: ',' attribute_args
							{
							DebugLocation(198, 31);
							char_literal20=(IToken)Match(input,85,Follow._85_in_attribute_item616);  
							stream_85.Add(char_literal20);

							DebugLocation(198, 35);
							PushFollow(Follow._attribute_args_in_attribute_item618);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(198, 52);
					char_literal22=(IToken)Match(input,79,Follow._79_in_attribute_item622);  
					stream_79.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: attribute_args, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 198:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(198, 61);
					// SugarCpp.g:198:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(198, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(198, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(198, 79);
					// SugarCpp.g:198:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(198, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:199:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(199, 4);
				string_literal23=(IToken)Match(input,124,Follow._124_in_attribute_item640);  
				stream_124.Add(string_literal23);

				DebugLocation(199, 12);
				// SugarCpp.g:199:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==78))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:199:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(199, 13);
					char_literal24=(IToken)Match(input,78,Follow._78_in_attribute_item643);  
					stream_78.Add(char_literal24);

					DebugLocation(199, 17);
					PushFollow(Follow._attribute_args_in_attribute_item645);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(199, 32);
					// SugarCpp.g:199:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==85))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:199:33: ',' attribute_args
							{
							DebugLocation(199, 33);
							char_literal26=(IToken)Match(input,85,Follow._85_in_attribute_item648);  
							stream_85.Add(char_literal26);

							DebugLocation(199, 37);
							PushFollow(Follow._attribute_args_in_attribute_item650);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(199, 54);
					char_literal28=(IToken)Match(input,79,Follow._79_in_attribute_item654);  
					stream_79.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 124, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 199:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(199, 63);
					// SugarCpp.g:199:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(199, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(199, 75);
					adaptor.AddChild(root_1, stream_124.NextNode());
					DebugLocation(199, 83);
					// SugarCpp.g:199:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(199, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:202:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(202, 1);
		try
		{
			// SugarCpp.g:203:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:203:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(203, 4);
			// SugarCpp.g:203:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==114))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:203:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(203, 5);
					char_literal29=(IToken)Match(input,114,Follow._114_in_attribute679);  
					stream_114.Add(char_literal29);

					DebugLocation(203, 9);
					PushFollow(Follow._attribute_item_in_attribute681);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(203, 24);
					// SugarCpp.g:203:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==85))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:203:25: ',' attribute_item
							{
							DebugLocation(203, 25);
							char_literal31=(IToken)Match(input,85,Follow._85_in_attribute684);  
							stream_85.Add(char_literal31);

							DebugLocation(203, 29);
							PushFollow(Follow._attribute_item_in_attribute686);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(203, 46);
					char_literal33=(IToken)Match(input,115,Follow._115_in_attribute690);  
					stream_115.Add(char_literal33);

					DebugLocation(203, 50);
					// SugarCpp.g:203:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:203:50: NEWLINE
							{
							DebugLocation(203, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute692);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 203:61: -> ( attribute_item )+
			{
				DebugLocation(203, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(203, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:206:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(206, 1);
		try
		{
			// SugarCpp.g:207:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:207:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) )
			{
			DebugLocation(207, 4);
			// SugarCpp.g:207:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==114))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:207:4: attribute
				{
				DebugLocation(207, 4);
				PushFollow(Follow._attribute_in_global_alloc711);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(207, 15);
			PushFollow(Follow._ident_list_in_global_alloc714);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(207, 26);
			// SugarCpp.g:207:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==95))
			{
				alt19 = 1;
			}
			else if ((LA19_0==97))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:207:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(207, 28);
				char_literal37=(IToken)Match(input,95,Follow._95_in_global_alloc718);  
				stream_95.Add(char_literal37);

				DebugLocation(207, 32);
				PushFollow(Follow._type_name_in_global_alloc720);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(207, 42);
				// SugarCpp.g:207:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 97:
				case 104:
					{
					alt17 = 1;
					}
					break;
				case 78:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:207:44: ( '=' | ':=' ) expr
					{
					DebugLocation(207, 44);
					// SugarCpp.g:207:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==104))
					{
						alt15 = 1;
					}
					else if ((LA15_0==97))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:207:45: '='
						{
						DebugLocation(207, 45);
						char_literal39=(IToken)Match(input,104,Follow._104_in_global_alloc725);  
						stream_104.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:207:51: ':='
						{
						DebugLocation(207, 51);
						string_literal40=(IToken)Match(input,97,Follow._97_in_global_alloc729);  
						stream_97.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(207, 57);
					PushFollow(Follow._expr_in_global_alloc732);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: ident_list, attribute, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 207:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(207, 65);
						// SugarCpp.g:207:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(207, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(207, 84);
						// SugarCpp.g:207:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(207, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(207, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(207, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(207, 116);
						// SugarCpp.g:207:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(207, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:208:43: '(' ( expr_list )? ')'
					{
					DebugLocation(208, 43);
					char_literal42=(IToken)Match(input,78,Follow._78_in_global_alloc792);  
					stream_78.Add(char_literal42);

					DebugLocation(208, 47);
					// SugarCpp.g:208:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==71||LA16_0==76||LA16_0==78||LA16_0==80||(LA16_0>=82 && LA16_0<=83)||(LA16_0>=86 && LA16_0<=87)||LA16_0==113||LA16_0==141||LA16_0==155))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:208:47: expr_list
						{
						DebugLocation(208, 47);
						PushFollow(Follow._expr_list_in_global_alloc794);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(208, 58);
					char_literal44=(IToken)Match(input,79,Follow._79_in_global_alloc797);  
					stream_79.Add(char_literal44);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 208:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(208, 65);
						// SugarCpp.g:208:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(208, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(208, 86);
						// SugarCpp.g:208:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(208, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(208, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(208, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(208, 118);
						// SugarCpp.g:208:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(208, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:209:17: 
					{

					{
					// AST REWRITE
					// elements: attribute, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 209:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(209, 20);
						// SugarCpp.g:209:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(209, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(209, 39);
						// SugarCpp.g:209:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(209, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(209, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(209, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:211:10: ':=' ( modify_expr ( ',' modify_expr )* )
				{
				DebugLocation(211, 10);
				string_literal45=(IToken)Match(input,97,Follow._97_in_global_alloc870);  
				stream_97.Add(string_literal45);

				DebugLocation(211, 15);
				// SugarCpp.g:211:15: ( modify_expr ( ',' modify_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:211:16: modify_expr ( ',' modify_expr )*
				{
				DebugLocation(211, 16);
				PushFollow(Follow._modify_expr_in_global_alloc873);
				modify_expr46=modify_expr();
				PopFollow();

				stream_modify_expr.Add(modify_expr46.Tree);
				DebugLocation(211, 28);
				// SugarCpp.g:211:28: ( ',' modify_expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==85))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:211:29: ',' modify_expr
						{
						DebugLocation(211, 29);
						char_literal47=(IToken)Match(input,85,Follow._85_in_global_alloc876);  
						stream_85.Add(char_literal47);

						DebugLocation(211, 33);
						PushFollow(Follow._modify_expr_in_global_alloc878);
						modify_expr48=modify_expr();
						PopFollow();

						stream_modify_expr.Add(modify_expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: 97, ident_list, attribute, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 211:48: -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ )
				{
					DebugLocation(211, 51);
					// SugarCpp.g:211:51: ^( ':=' ( attribute )? ident_list ( modify_expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(211, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_97.NextNode(), root_1);

					DebugLocation(211, 58);
					// SugarCpp.g:211:58: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(211, 58);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(211, 69);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(211, 80);
					if (!(stream_modify_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_modify_expr.HasNext )
					{
						DebugLocation(211, 80);
						adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					}
					stream_modify_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:215:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(215, 1);
		try
		{
			// SugarCpp.g:216:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:216:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(216, 4);
			PushFollow(Follow._stmt_using_in_global_using915);
			stmt_using49=stmt_using();
			PopFollow();

			adaptor.AddChild(root_0, stmt_using49.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:219:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(219, 1);
		try
		{
			// SugarCpp.g:220:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:220:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(220, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef926);
			stmt_typedef50=stmt_typedef();
			PopFollow();

			adaptor.AddChild(root_0, stmt_typedef50.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:223:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken STRING52 = default(IToken);
		IToken NEWLINE53 = default(IToken);
		IToken INDENT54 = default(IToken);
		IToken NEWLINE55 = default(IToken);
		IToken STRING56 = default(IToken);
		IToken NEWLINE57 = default(IToken);
		IToken DEDENT58 = default(IToken);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree STRING52_tree = default(CommonTree);
		CommonTree NEWLINE53_tree = default(CommonTree);
		CommonTree INDENT54_tree = default(CommonTree);
		CommonTree NEWLINE55_tree = default(CommonTree);
		CommonTree STRING56_tree = default(CommonTree);
		CommonTree NEWLINE57_tree = default(CommonTree);
		CommonTree DEDENT58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(223, 1);
		try
		{
			// SugarCpp.g:224:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:224:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(224, 4);
			string_literal51=(IToken)Match(input,134,Follow._134_in_import_def937);  
			stream_134.Add(string_literal51);

			DebugLocation(224, 13);
			// SugarCpp.g:224:13: ( STRING )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==STRING))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:224:13: STRING
				{
				DebugLocation(224, 13);
				STRING52=(IToken)Match(input,STRING,Follow._STRING_in_import_def939);  
				stream_STRING.Add(STRING52);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(224, 21);
			// SugarCpp.g:224:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			try
			{
				alt25 = dfa25.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:224:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(224, 22);
				// SugarCpp.g:224:22: ( NEWLINE )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==NEWLINE))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:224:22: NEWLINE
						{
						DebugLocation(224, 22);
						NEWLINE53=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def943);  
						stream_NEWLINE.Add(NEWLINE53);


						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(224, 31);
				INDENT54=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def946);  
				stream_INDENT.Add(INDENT54);

				DebugLocation(224, 38);
				// SugarCpp.g:224:38: ( NEWLINE )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==NEWLINE))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:224:38: NEWLINE
						{
						DebugLocation(224, 38);
						NEWLINE55=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def948);  
						stream_NEWLINE.Add(NEWLINE55);


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(224, 48);
				// SugarCpp.g:224:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==STRING))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:224:49: STRING ( NEWLINE )+
						{
						DebugLocation(224, 49);
						STRING56=(IToken)Match(input,STRING,Follow._STRING_in_import_def953);  
						stream_STRING.Add(STRING56);

						DebugLocation(224, 56);
						// SugarCpp.g:224:56: ( NEWLINE )+
						int cnt23=0;
						try { DebugEnterSubRule(23);
						while (true)
						{
							int alt23=2;
							try { DebugEnterDecision(23, false);
							int LA23_0 = input.LA(1);

							if ((LA23_0==NEWLINE))
							{
								alt23 = 1;
							}


							} finally { DebugExitDecision(23); }
							switch (alt23)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:224:56: NEWLINE
								{
								DebugLocation(224, 56);
								NEWLINE57=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def955);  
								stream_NEWLINE.Add(NEWLINE57);


								}
								break;

							default:
								if (cnt23 >= 1)
									goto loop23;

								EarlyExitException eee23 = new EarlyExitException( 23, input );
								DebugRecognitionException(eee23);
								throw eee23;
							}
							cnt23++;
						}
						loop23:
							;

						} finally { DebugExitSubRule(23); }


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(224, 67);
				DEDENT58=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def960);  
				stream_DEDENT.Add(DEDENT58);


				}
				break;

			}
			} finally { DebugExitSubRule(25); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 224:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(224, 79);
				// SugarCpp.g:224:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(224, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(224, 88);
				// SugarCpp.g:224:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(224, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:227:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(227, 1);
		try
		{
			// SugarCpp.g:228:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:228:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(228, 4);
			// SugarCpp.g:228:4: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==114))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:228:4: attribute
				{
				DebugLocation(228, 4);
				PushFollow(Follow._attribute_in_enum_def982);
				attribute59=attribute();
				PopFollow();

				stream_attribute.Add(attribute59.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(228, 15);
			string_literal60=(IToken)Match(input,129,Follow._129_in_enum_def985);  
			stream_129.Add(string_literal60);

			DebugLocation(228, 22);
			PushFollow(Follow._ident_in_enum_def987);
			ident61=ident();
			PopFollow();

			stream_ident.Add(ident61.Tree);
			DebugLocation(228, 28);
			char_literal62=(IToken)Match(input,104,Follow._104_in_enum_def989);  
			stream_104.Add(char_literal62);

			DebugLocation(228, 32);
			// SugarCpp.g:228:32: ( ident ( '|' ident )* )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==IDENT))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:228:33: ident ( '|' ident )*
				{
				DebugLocation(228, 33);
				PushFollow(Follow._ident_in_enum_def992);
				ident63=ident();
				PopFollow();

				stream_ident.Add(ident63.Tree);
				DebugLocation(228, 39);
				// SugarCpp.g:228:39: ( '|' ident )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==152))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:228:40: '|' ident
						{
						DebugLocation(228, 40);
						char_literal64=(IToken)Match(input,152,Follow._152_in_enum_def995);  
						stream_152.Add(char_literal64);

						DebugLocation(228, 44);
						PushFollow(Follow._ident_in_enum_def997);
						ident65=ident();
						PopFollow();

						stream_ident.Add(ident65.Tree);

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: ident, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 228:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(228, 57);
				// SugarCpp.g:228:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(228, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(228, 64);
				// SugarCpp.g:228:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(228, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(228, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(228, 81);
				// SugarCpp.g:228:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(228, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(228, 94);
				// SugarCpp.g:228:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(228, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:231:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken INDENT69 = default(IToken);
		IToken NEWLINE70 = default(IToken);
		IToken DEDENT72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block71 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree INDENT69_tree = default(CommonTree);
		CommonTree NEWLINE70_tree = default(CommonTree);
		CommonTree DEDENT72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:232:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(232, 4);
			string_literal66=(IToken)Match(input,140,Follow._140_in_namespace_def1030);  
			stream_140.Add(string_literal66);

			DebugLocation(232, 16);
			PushFollow(Follow._ident_in_namespace_def1032);
			ident67=ident();
			PopFollow();

			stream_ident.Add(ident67.Tree);
			DebugLocation(232, 22);
			// SugarCpp.g:232:22: ( NEWLINE )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:22: NEWLINE
					{
					DebugLocation(232, 22);
					NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1034);  
					stream_NEWLINE.Add(NEWLINE68);


					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(232, 31);
			INDENT69=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1037);  
			stream_INDENT.Add(INDENT69);

			DebugLocation(232, 38);
			// SugarCpp.g:232:38: ( NEWLINE )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==NEWLINE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:38: NEWLINE
					{
					DebugLocation(232, 38);
					NEWLINE70=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1039);  
					stream_NEWLINE.Add(NEWLINE70);


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(232, 47);
			PushFollow(Follow._global_block_in_namespace_def1042);
			global_block71=global_block();
			PopFollow();

			stream_global_block.Add(global_block71.Tree);
			DebugLocation(232, 60);
			DEDENT72=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1044);  
			stream_DEDENT.Add(DEDENT72);



			{
			// AST REWRITE
			// elements: global_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 232:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(232, 70);
				// SugarCpp.g:232:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(232, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(232, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(232, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:235:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken NEWLINE84 = default(IToken);
		IToken INDENT85 = default(IToken);
		IToken NEWLINE86 = default(IToken);
		IToken DEDENT88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		CommonTree char_literal79_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree NEWLINE84_tree = default(CommonTree);
		CommonTree INDENT85_tree = default(CommonTree);
		CommonTree NEWLINE86_tree = default(CommonTree);
		CommonTree DEDENT88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(235, 1);
		try
		{
			// SugarCpp.g:236:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:236:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(236, 5);
			// SugarCpp.g:236:5: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==114))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:236:5: attribute
				{
				DebugLocation(236, 5);
				PushFollow(Follow._attribute_in_class_def1066);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(236, 16);
			string_literal74=(IToken)Match(input,123,Follow._123_in_class_def1069);  
			stream_123.Add(string_literal74);

			DebugLocation(236, 24);
			PushFollow(Follow._ident_in_class_def1071);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(236, 30);
			// SugarCpp.g:236:30: ( generic_parameter )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==99))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:236:31: generic_parameter
				{
				DebugLocation(236, 31);
				PushFollow(Follow._generic_parameter_in_class_def1074);
				generic_parameter76=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(236, 51);
			// SugarCpp.g:236:51: ( '(' func_args ')' )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==78))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:236:52: '(' func_args ')'
				{
				DebugLocation(236, 52);
				char_literal77=(IToken)Match(input,78,Follow._78_in_class_def1079);  
				stream_78.Add(char_literal77);

				DebugLocation(236, 56);
				PushFollow(Follow._func_args_in_class_def1081);
				func_args78=func_args();
				PopFollow();

				stream_func_args.Add(func_args78.Tree);
				DebugLocation(236, 66);
				char_literal79=(IToken)Match(input,79,Follow._79_in_class_def1083);  
				stream_79.Add(char_literal79);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(236, 72);
			// SugarCpp.g:236:72: ( ':' ident ( ',' ident )* )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==95))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:236:73: ':' ident ( ',' ident )*
				{
				DebugLocation(236, 73);
				char_literal80=(IToken)Match(input,95,Follow._95_in_class_def1088);  
				stream_95.Add(char_literal80);

				DebugLocation(236, 77);
				PushFollow(Follow._ident_in_class_def1090);
				ident81=ident();
				PopFollow();

				stream_ident.Add(ident81.Tree);
				DebugLocation(236, 83);
				// SugarCpp.g:236:83: ( ',' ident )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==85))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:236:84: ',' ident
						{
						DebugLocation(236, 84);
						char_literal82=(IToken)Match(input,85,Follow._85_in_class_def1093);  
						stream_85.Add(char_literal82);

						DebugLocation(236, 88);
						PushFollow(Follow._ident_in_class_def1095);
						ident83=ident();
						PopFollow();

						stream_ident.Add(ident83.Tree);

						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(236, 98);
			// SugarCpp.g:236:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			try
			{
				alt38 = dfa38.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:236:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(236, 99);
				// SugarCpp.g:236:99: ( NEWLINE )+
				int cnt36=0;
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==NEWLINE))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:236:99: NEWLINE
						{
						DebugLocation(236, 99);
						NEWLINE84=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1102);  
						stream_NEWLINE.Add(NEWLINE84);


						}
						break;

					default:
						if (cnt36 >= 1)
							goto loop36;

						EarlyExitException eee36 = new EarlyExitException( 36, input );
						DebugRecognitionException(eee36);
						throw eee36;
					}
					cnt36++;
				}
				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(236, 108);
				INDENT85=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1105);  
				stream_INDENT.Add(INDENT85);

				DebugLocation(236, 115);
				// SugarCpp.g:236:115: ( NEWLINE )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==NEWLINE))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:236:115: NEWLINE
						{
						DebugLocation(236, 115);
						NEWLINE86=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1107);  
						stream_NEWLINE.Add(NEWLINE86);


						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(236, 124);
				PushFollow(Follow._global_block_in_class_def1110);
				global_block87=global_block();
				PopFollow();

				stream_global_block.Add(global_block87.Tree);
				DebugLocation(236, 137);
				DEDENT88=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1112);  
				stream_DEDENT.Add(DEDENT88);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: func_args, generic_parameter, attribute, ident, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 236:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(236, 149);
				// SugarCpp.g:236:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(236, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(236, 157);
				// SugarCpp.g:236:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(236, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(236, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(236, 174);
				// SugarCpp.g:236:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(236, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(236, 193);
				// SugarCpp.g:236:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(236, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(236, 204);
				// SugarCpp.g:236:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(236, 205);
					// SugarCpp.g:236:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(236, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(236, 218);
					// SugarCpp.g:236:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(236, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(236, 228);
				// SugarCpp.g:236:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(236, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:239:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);

		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(239, 34);
		try
		{
			// SugarCpp.g:239:13: ( '*' | '[' ']' | '&' )
			int alt39=3;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case 80:
				{
				alt39 = 1;
				}
				break;
			case 114:
				{
				alt39 = 2;
				}
				break;
			case 76:
				{
				alt39 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:239:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(239, 15);
				char_literal89=(IToken)Match(input,80,Follow._80_in_type_name_op1153); 
				char_literal89_tree = (CommonTree)adaptor.Create(char_literal89);
				adaptor.AddChild(root_0, char_literal89_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:239:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(239, 21);
				char_literal90=(IToken)Match(input,114,Follow._114_in_type_name_op1157); 
				char_literal90_tree = (CommonTree)adaptor.Create(char_literal90);
				adaptor.AddChild(root_0, char_literal90_tree);
				DebugLocation(239, 25);
				char_literal91=(IToken)Match(input,115,Follow._115_in_type_name_op1159); 
				char_literal91_tree = (CommonTree)adaptor.Create(char_literal91);
				adaptor.AddChild(root_0, char_literal91_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:239:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(239, 31);
				char_literal92=(IToken)Match(input,76,Follow._76_in_type_name_op1163); 
				char_literal92_tree = (CommonTree)adaptor.Create(char_literal92);
				adaptor.AddChild(root_0, char_literal92_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
		}
		DebugLocation(239, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:240:1: type_name : ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal93 = default(IToken);
		IToken string_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(240, 1);
		try
		{
			// SugarCpp.g:241:2: ( ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(241, 4);
			// SugarCpp.g:241:4: ( 'const' )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==124))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:4: 'const'
				{
				DebugLocation(241, 4);
				string_literal93=(IToken)Match(input,124,Follow._124_in_type_name1172);  
				stream_124.Add(string_literal93);


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(241, 13);
			// SugarCpp.g:241:13: ( 'unsigned' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==148))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:13: 'unsigned'
				{
				DebugLocation(241, 13);
				string_literal94=(IToken)Match(input,148,Follow._148_in_type_name1175);  
				stream_148.Add(string_literal94);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(241, 25);
			PushFollow(Follow._ident_in_type_name1178);
			ident95=ident();
			PopFollow();

			stream_ident.Add(ident95.Tree);
			DebugLocation(241, 31);
			// SugarCpp.g:241:31: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==99))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:32: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(241, 32);
				char_literal96=(IToken)Match(input,99,Follow._99_in_type_name1181);  
				stream_99.Add(char_literal96);

				DebugLocation(241, 36);
				// SugarCpp.g:241:36: ( type_name ( ',' type_name )* )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==IDENT||LA43_0==124||LA43_0==148))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:37: type_name ( ',' type_name )*
					{
					DebugLocation(241, 37);
					PushFollow(Follow._type_name_in_type_name1184);
					type_name97=type_name();
					PopFollow();

					stream_type_name.Add(type_name97.Tree);
					DebugLocation(241, 47);
					// SugarCpp.g:241:47: ( ',' type_name )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==85))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:241:48: ',' type_name
							{
							DebugLocation(241, 48);
							char_literal98=(IToken)Match(input,85,Follow._85_in_type_name1187);  
							stream_85.Add(char_literal98);

							DebugLocation(241, 52);
							PushFollow(Follow._type_name_in_type_name1189);
							type_name99=type_name();
							PopFollow();

							stream_type_name.Add(type_name99.Tree);

							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(241, 66);
				char_literal100=(IToken)Match(input,107,Follow._107_in_type_name1195);  
				stream_107.Add(char_literal100);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(241, 72);
			// SugarCpp.g:241:72: ( type_name_op )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==114))
				{
					int LA45_2 = input.LA(2);

					if ((LA45_2==115))
					{
						alt45 = 1;
					}


				}
				else if ((LA45_0==76||LA45_0==80))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:72: type_name_op
					{
					DebugLocation(241, 72);
					PushFollow(Follow._type_name_op_in_type_name1199);
					type_name_op101=type_name_op();
					PopFollow();

					stream_type_name_op.Add(type_name_op101.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: 148, 107, 124, ident, 99, type_name_op, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 241:86: -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(241, 89);
				// SugarCpp.g:241:89: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(241, 91);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(241, 102);
				// SugarCpp.g:241:102: ( 'const' )?
				if (stream_124.HasNext)
				{
					DebugLocation(241, 102);
					adaptor.AddChild(root_1, stream_124.NextNode());

				}
				stream_124.Reset();
				DebugLocation(241, 111);
				// SugarCpp.g:241:111: ( 'unsigned' )?
				if (stream_148.HasNext)
				{
					DebugLocation(241, 111);
					adaptor.AddChild(root_1, stream_148.NextNode());

				}
				stream_148.Reset();
				DebugLocation(241, 123);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(241, 129);
				// SugarCpp.g:241:129: ( '<' ( type_name )* '>' )?
				if (stream_107.HasNext||stream_99.HasNext||stream_type_name.HasNext)
				{
					DebugLocation(241, 130);
					adaptor.AddChild(root_1, stream_99.NextNode());
					DebugLocation(241, 134);
					// SugarCpp.g:241:134: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(241, 134);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(241, 145);
					adaptor.AddChild(root_1, stream_107.NextNode());

				}
				stream_107.Reset();
				stream_99.Reset();
				stream_type_name.Reset();
				DebugLocation(241, 152);
				// SugarCpp.g:241:152: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(241, 152);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:244:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 16);
		TraceIn("generic_parameter_inside", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(244, 1);
		try
		{
			// SugarCpp.g:245:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:245:4: ident ( ',' ident )*
			{
			DebugLocation(245, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1239);
			ident102=ident();
			PopFollow();

			stream_ident.Add(ident102.Tree);
			DebugLocation(245, 10);
			// SugarCpp.g:245:10: ( ',' ident )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==85))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:245:11: ',' ident
					{
					DebugLocation(245, 11);
					char_literal103=(IToken)Match(input,85,Follow._85_in_generic_parameter_inside1242);  
					stream_85.Add(char_literal103);

					DebugLocation(245, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1244);
					ident104=ident();
					PopFollow();

					stream_ident.Add(ident104.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 245:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(245, 26);
				// SugarCpp.g:245:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(245, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(245, 47);
				// SugarCpp.g:245:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(245, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 16);
			LeaveRule("generic_parameter_inside", 16);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:248:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 17);
		TraceIn("generic_parameter", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(248, 1);
		try
		{
			// SugarCpp.g:249:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:249:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(249, 4);
			char_literal105=(IToken)Match(input,99,Follow._99_in_generic_parameter1266);  
			stream_99.Add(char_literal105);

			DebugLocation(249, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1268);
			generic_parameter_inside106=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside106.Tree);
			DebugLocation(249, 33);
			char_literal107=(IToken)Match(input,107,Follow._107_in_generic_parameter1270);  
			stream_107.Add(char_literal107);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 249:37: -> generic_parameter_inside
			{
				DebugLocation(249, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 17);
			LeaveRule("generic_parameter", 17);
			LeaveRule_generic_parameter();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:252:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 18);
		TraceIn("func_args", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(252, 1);
		try
		{
			// SugarCpp.g:253:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:253:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(253, 4);
			PushFollow(Follow._func_args_item_in_func_args1285);
			func_args_item108=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item108.Tree);
			DebugLocation(253, 19);
			// SugarCpp.g:253:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==85))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:253:20: ',' func_args_item
					{
					DebugLocation(253, 20);
					char_literal109=(IToken)Match(input,85,Follow._85_in_func_args1288);  
					stream_85.Add(char_literal109);

					DebugLocation(253, 24);
					PushFollow(Follow._func_args_item_in_func_args1290);
					func_args_item110=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item110.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 253:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(253, 44);
				// SugarCpp.g:253:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(253, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(253, 56);
				// SugarCpp.g:253:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(253, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 18);
			LeaveRule("func_args", 18);
			LeaveRule_func_args();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:256:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 19);
		TraceIn("func_args_item", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken string_literal115 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken string_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree string_literal115_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree string_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(256, 1);
		try
		{
			// SugarCpp.g:257:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt51=2;
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==IDENT))
			{
				alt51 = 1;
			}
			else if ((LA51_0==97))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(257, 4);
				PushFollow(Follow._ident_list_in_func_args_item1312);
				ident_list111=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list111.Tree);
				DebugLocation(257, 15);
				char_literal112=(IToken)Match(input,95,Follow._95_in_func_args_item1314);  
				stream_95.Add(char_literal112);

				DebugLocation(257, 19);
				PushFollow(Follow._type_name_in_func_args_item1316);
				type_name113=type_name();
				PopFollow();

				stream_type_name.Add(type_name113.Tree);
				DebugLocation(257, 29);
				// SugarCpp.g:257:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt50=3;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				switch (input.LA(1))
				{
				case 97:
				case 104:
					{
					alt50 = 1;
					}
					break;
				case 78:
					{
					alt50 = 2;
					}
					break;
				case 79:
				case 85:
					{
					alt50 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:257:31: ( '=' | ':=' ) expr
					{
					DebugLocation(257, 31);
					// SugarCpp.g:257:31: ( '=' | ':=' )
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==104))
					{
						alt48 = 1;
					}
					else if ((LA48_0==97))
					{
						alt48 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:257:32: '='
						{
						DebugLocation(257, 32);
						char_literal114=(IToken)Match(input,104,Follow._104_in_func_args_item1321);  
						stream_104.Add(char_literal114);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:257:38: ':='
						{
						DebugLocation(257, 38);
						string_literal115=(IToken)Match(input,97,Follow._97_in_func_args_item1325);  
						stream_97.Add(string_literal115);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(257, 44);
					PushFollow(Follow._expr_in_func_args_item1328);
					expr116=expr();
					PopFollow();

					stream_expr.Add(expr116.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 257:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(257, 53);
						// SugarCpp.g:257:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(257, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(257, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(257, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(257, 93);
						// SugarCpp.g:257:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(257, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:258:33: '(' ( expr_list )? ')'
					{
					DebugLocation(258, 33);
					char_literal117=(IToken)Match(input,78,Follow._78_in_func_args_item1376);  
					stream_78.Add(char_literal117);

					DebugLocation(258, 37);
					// SugarCpp.g:258:37: ( expr_list )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, false);
					int LA49_0 = input.LA(1);

					if ((LA49_0==IDENT||LA49_0==NUMBER||LA49_0==STRING||LA49_0==71||LA49_0==76||LA49_0==78||LA49_0==80||(LA49_0>=82 && LA49_0<=83)||(LA49_0>=86 && LA49_0<=87)||LA49_0==113||LA49_0==141||LA49_0==155))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:37: expr_list
						{
						DebugLocation(258, 37);
						PushFollow(Follow._expr_list_in_func_args_item1378);
						expr_list118=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list118.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(258, 48);
					char_literal119=(IToken)Match(input,79,Follow._79_in_func_args_item1381);  
					stream_79.Add(char_literal119);



					{
					// AST REWRITE
					// elements: expr_list, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 258:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(258, 56);
						// SugarCpp.g:258:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(258, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(258, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(258, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(258, 98);
						// SugarCpp.g:258:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(258, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:259:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 259:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(259, 18);
						// SugarCpp.g:259:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(259, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(259, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(259, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:261:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(261, 8);
				string_literal120=(IToken)Match(input,97,Follow._97_in_func_args_item1438); 
				string_literal120_tree = (CommonTree)adaptor.Create(string_literal120);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal120_tree, root_0);
				DebugLocation(261, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1442);
				modify_expr121=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr121.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 19);
			LeaveRule("func_args_item", 19);
			LeaveRule_func_args_item();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:264:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 20);
		TraceIn("func_def", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken NEWLINE130 = default(IToken);
		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree NEWLINE130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(264, 4);
		try
		{
			// SugarCpp.g:265:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(265, 4);
			// SugarCpp.g:265:4: ( attribute )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==114))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:4: attribute
				{
				DebugLocation(265, 4);
				PushFollow(Follow._attribute_in_func_def1453);
				attribute122=attribute();
				PopFollow();

				stream_attribute.Add(attribute122.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(265, 15);
			// SugarCpp.g:265:15: ( type_name )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:15: type_name
				{
				DebugLocation(265, 15);
				PushFollow(Follow._type_name_in_func_def1456);
				type_name123=type_name();
				PopFollow();

				stream_type_name.Add(type_name123.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(265, 26);
			// SugarCpp.g:265:26: ( '~' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==155))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:26: '~'
				{
				DebugLocation(265, 26);
				char_literal124=(IToken)Match(input,155,Follow._155_in_func_def1459);  
				stream_155.Add(char_literal124);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(265, 31);
			PushFollow(Follow._ident_in_func_def1462);
			ident125=ident();
			PopFollow();

			stream_ident.Add(ident125.Tree);
			DebugLocation(265, 37);
			// SugarCpp.g:265:37: ( generic_parameter )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==99))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:37: generic_parameter
				{
				DebugLocation(265, 37);
				PushFollow(Follow._generic_parameter_in_func_def1464);
				generic_parameter126=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(265, 56);
			char_literal127=(IToken)Match(input,78,Follow._78_in_func_def1467);  
			stream_78.Add(char_literal127);

			DebugLocation(265, 60);
			// SugarCpp.g:265:60: ( func_args )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==97))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:60: func_args
				{
				DebugLocation(265, 60);
				PushFollow(Follow._func_args_in_func_def1469);
				func_args128=func_args();
				PopFollow();

				stream_func_args.Add(func_args128.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(265, 71);
			char_literal129=(IToken)Match(input,79,Follow._79_in_func_def1472);  
			stream_79.Add(char_literal129);

			DebugLocation(265, 75);
			// SugarCpp.g:265:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==NEWLINE))
			{
				alt58 = 1;
			}
			else if ((LA58_0==104))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(265, 76);
				// SugarCpp.g:265:76: ( NEWLINE )+
				int cnt57=0;
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==NEWLINE))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:265:76: NEWLINE
						{
						DebugLocation(265, 76);
						NEWLINE130=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1475);  
						stream_NEWLINE.Add(NEWLINE130);


						}
						break;

					default:
						if (cnt57 >= 1)
							goto loop57;

						EarlyExitException eee57 = new EarlyExitException( 57, input );
						DebugRecognitionException(eee57);
						throw eee57;
					}
					cnt57++;
				}
				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(265, 85);
				PushFollow(Follow._stmt_block_in_func_def1478);
				stmt_block131=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block131.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, attribute, func_args, ident, type_name, 155, generic_parameter
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 265:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(265, 99);
					// SugarCpp.g:265:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(265, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(265, 110);
					// SugarCpp.g:265:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(265, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(265, 121);
					// SugarCpp.g:265:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(265, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(265, 132);
					// SugarCpp.g:265:132: ( '~' )?
					if (stream_155.HasNext)
					{
						DebugLocation(265, 132);
						adaptor.AddChild(root_1, stream_155.NextNode());

					}
					stream_155.Reset();
					DebugLocation(265, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(265, 143);
					// SugarCpp.g:265:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(265, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(265, 162);
					// SugarCpp.g:265:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(265, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(265, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:266:23: '=' expr
				{
				DebugLocation(266, 23);
				char_literal132=(IToken)Match(input,104,Follow._104_in_func_def1527);  
				stream_104.Add(char_literal132);

				DebugLocation(266, 27);
				PushFollow(Follow._expr_in_func_def1529);
				expr133=expr();
				PopFollow();

				stream_expr.Add(expr133.Tree);


				{
				// AST REWRITE
				// elements: ident, generic_parameter, expr, func_args, type_name, attribute, 155
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 266:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(266, 36);
					// SugarCpp.g:266:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(266, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(266, 47);
					// SugarCpp.g:266:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(266, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(266, 58);
					// SugarCpp.g:266:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(266, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(266, 69);
					// SugarCpp.g:266:69: ( '~' )?
					if (stream_155.HasNext)
					{
						DebugLocation(266, 69);
						adaptor.AddChild(root_1, stream_155.NextNode());

					}
					stream_155.Reset();
					DebugLocation(266, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(266, 80);
					// SugarCpp.g:266:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(266, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(266, 99);
					// SugarCpp.g:266:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(266, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(266, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 20);
			LeaveRule("func_def", 20);
			LeaveRule_func_def();
		}
		DebugLocation(267, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:269:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 21);
		TraceIn("stmt_block", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT134 = default(IToken);
		IToken NEWLINE135 = default(IToken);
		IToken NEWLINE137 = default(IToken);
		IToken DEDENT138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT134_tree = default(CommonTree);
		CommonTree NEWLINE135_tree = default(CommonTree);
		CommonTree NEWLINE137_tree = default(CommonTree);
		CommonTree DEDENT138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(269, 1);
		try
		{
			// SugarCpp.g:270:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:270:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(270, 4);
			INDENT134=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1570);  
			stream_INDENT.Add(INDENT134);

			DebugLocation(270, 11);
			// SugarCpp.g:270:11: ( NEWLINE )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==NEWLINE))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:270:11: NEWLINE
					{
					DebugLocation(270, 11);
					NEWLINE135=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1572);  
					stream_NEWLINE.Add(NEWLINE135);


					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(270, 21);
			// SugarCpp.g:270:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==78||LA61_0==113||LA61_0==125||(LA61_0>=130 && LA61_0<=133)||(LA61_0>=138 && LA61_0<=139)||LA61_0==143||(LA61_0>=146 && LA61_0<=147)||(LA61_0>=149 && LA61_0<=151)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:270:22: stmt ( NEWLINE )+
					{
					DebugLocation(270, 22);
					PushFollow(Follow._stmt_in_stmt_block1577);
					stmt136=stmt();
					PopFollow();

					stream_stmt.Add(stmt136.Tree);
					DebugLocation(270, 27);
					// SugarCpp.g:270:27: ( NEWLINE )+
					int cnt60=0;
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==NEWLINE))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:270:27: NEWLINE
							{
							DebugLocation(270, 27);
							NEWLINE137=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1579);  
							stream_NEWLINE.Add(NEWLINE137);


							}
							break;

						default:
							if (cnt60 >= 1)
								goto loop60;

							EarlyExitException eee60 = new EarlyExitException( 60, input );
							DebugRecognitionException(eee60);
							throw eee60;
						}
						cnt60++;
					}
					loop60:
						;

					} finally { DebugExitSubRule(60); }


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(270, 38);
			DEDENT138=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1584);  
			stream_DEDENT.Add(DEDENT138);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 270:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(270, 48);
				// SugarCpp.g:270:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(270, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(270, 61);
				// SugarCpp.g:270:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(270, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 21);
			LeaveRule("stmt_block", 21);
			LeaveRule_stmt_block();
		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:273:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 22);
		TraceIn("stmt", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_linq144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(273, 1);
		try
		{
			// SugarCpp.g:274:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer )
			int alt62=7;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 78:
			case 113:
			case 143:
			case 147:
			case 149:
				{
				alt62 = 1;
				}
				break;
			case 133:
				{
				alt62 = 2;
				}
				break;
			case 131:
				{
				alt62 = 3;
				}
				break;
			case 139:
			case 151:
				{
				alt62 = 4;
				}
				break;
			case 146:
				{
				alt62 = 5;
				}
				break;
			case 132:
			case 138:
			case 150:
				{
				alt62 = 6;
				}
				break;
			case 125:
			case 130:
				{
				alt62 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:274:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(274, 4);
				PushFollow(Follow._stmt_expr_in_stmt1604);
				stmt_expr139=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr139.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:275:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(275, 4);
				PushFollow(Follow._stmt_if_in_stmt1609);
				stmt_if140=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if140.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:276:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(276, 4);
				PushFollow(Follow._stmt_for_in_stmt1614);
				stmt_for141=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for141.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:277:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(277, 4);
				PushFollow(Follow._stmt_while_in_stmt1619);
				stmt_while142=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while142.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:278:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(278, 4);
				PushFollow(Follow._stmt_try_in_stmt1624);
				stmt_try143=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try143.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:279:4: stmt_linq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(279, 4);
				PushFollow(Follow._stmt_linq_in_stmt1629);
				stmt_linq144=stmt_linq();
				PopFollow();

				adaptor.AddChild(root_0, stmt_linq144.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:280:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(280, 4);
				PushFollow(Follow._stmt_defer_in_stmt1634);
				stmt_defer145=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer145.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 22);
			LeaveRule("stmt", 22);
			LeaveRule_stmt();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:283:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )? ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 23);
		TraceIn("stmt_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal146 = default(IToken);
		IToken string_literal148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal146_tree = default(CommonTree);
		CommonTree string_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(283, 1);
		try
		{
			// SugarCpp.g:284:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:284:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )?
			{
			DebugLocation(284, 4);
			// SugarCpp.g:284:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:284:5: a= stmt_expr_item
			{
			DebugLocation(284, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1648);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 284:22: -> $a
			{
				DebugLocation(284, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(284, 29);
			// SugarCpp.g:284:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )?
			int alt63=3;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==133))
			{
				alt63 = 1;
			}
			else if ((LA63_0==151))
			{
				alt63 = 2;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:284:31: 'if' expr
				{
				DebugLocation(284, 31);
				string_literal146=(IToken)Match(input,133,Follow._133_in_stmt_expr1658);  
				stream_133.Add(string_literal146);

				DebugLocation(284, 36);
				PushFollow(Follow._expr_in_stmt_expr1660);
				expr147=expr();
				PopFollow();

				stream_expr.Add(expr147.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 284:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
				{
					DebugLocation(284, 44);
					// SugarCpp.g:284:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(284, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

					DebugLocation(284, 54);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(284, 59);
					// SugarCpp.g:284:59: ^( Stmt_Block $stmt_expr)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(284, 61);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(284, 73);
					adaptor.AddChild(root_2, stream_retval.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:285:13: 'while' expr
				{
				DebugLocation(285, 13);
				string_literal148=(IToken)Match(input,151,Follow._151_in_stmt_expr1689);  
				stream_151.Add(string_literal148);

				DebugLocation(285, 21);
				PushFollow(Follow._expr_in_stmt_expr1691);
				expr149=expr();
				PopFollow();

				stream_expr.Add(expr149.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 285:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
				{
					DebugLocation(285, 29);
					// SugarCpp.g:285:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(285, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

					DebugLocation(285, 42);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(285, 47);
					// SugarCpp.g:285:47: ^( Stmt_Block $stmt_expr)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(285, 49);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(285, 61);
					adaptor.AddChild(root_2, stream_retval.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 23);
			LeaveRule("stmt_expr", 23);
			LeaveRule_stmt_expr();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:289:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 24);
		TraceIn("stmt_expr_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(289, 1);
		try
		{
			// SugarCpp.g:290:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt64=5;
			try { DebugEnterDecision(64, false);
			try
			{
				alt64 = dfa64.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:290:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(290, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item1730);
				stmt_alloc150=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc150.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:291:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(291, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item1735);
				stmt_return151=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return151.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:292:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(292, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item1740);
				stmt_using152=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using152.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:293:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(293, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item1745);
				stmt_typedef153=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef153.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:294:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(294, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item1750);
				stmt_modify154=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify154.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 24);
			LeaveRule("stmt_expr_item", 24);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:297:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 25);
		TraceIn("stmt_defer", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal155 = default(IToken);
		IToken string_literal157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt158 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal155_tree = default(CommonTree);
		CommonTree string_literal157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(297, 1);
		try
		{
			// SugarCpp.g:298:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt65=2;
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==125))
			{
				alt65 = 1;
			}
			else if ((LA65_0==130))
			{
				alt65 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:298:4: 'defer' stmt
				{
				DebugLocation(298, 4);
				string_literal155=(IToken)Match(input,125,Follow._125_in_stmt_defer1761);  
				stream_125.Add(string_literal155);

				DebugLocation(298, 12);
				PushFollow(Follow._stmt_in_stmt_defer1763);
				stmt156=stmt();
				PopFollow();

				stream_stmt.Add(stmt156.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 298:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(298, 20);
					// SugarCpp.g:298:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(298, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:299:4: 'finally' stmt
				{
				DebugLocation(299, 4);
				string_literal157=(IToken)Match(input,130,Follow._130_in_stmt_defer1776);  
				stream_130.Add(string_literal157);

				DebugLocation(299, 14);
				PushFollow(Follow._stmt_in_stmt_defer1778);
				stmt158=stmt();
				PopFollow();

				stream_stmt.Add(stmt158.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 299:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(299, 22);
					// SugarCpp.g:299:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(299, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(299, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 25);
			LeaveRule("stmt_defer", 25);
			LeaveRule_stmt_defer();
		}
		DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:302:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 26);
		TraceIn("stmt_typedef", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal159 = default(IToken);
		IToken char_literal161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name162 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal159_tree = default(CommonTree);
		CommonTree char_literal161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(302, 1);
		try
		{
			// SugarCpp.g:303:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:303:4: 'typedef' ident '=' type_name
			{
			DebugLocation(303, 4);
			string_literal159=(IToken)Match(input,147,Follow._147_in_stmt_typedef1797);  
			stream_147.Add(string_literal159);

			DebugLocation(303, 14);
			PushFollow(Follow._ident_in_stmt_typedef1799);
			ident160=ident();
			PopFollow();

			stream_ident.Add(ident160.Tree);
			DebugLocation(303, 20);
			char_literal161=(IToken)Match(input,104,Follow._104_in_stmt_typedef1801);  
			stream_104.Add(char_literal161);

			DebugLocation(303, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1803);
			type_name162=type_name();
			PopFollow();

			stream_type_name.Add(type_name162.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 303:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(303, 37);
				// SugarCpp.g:303:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(303, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(303, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(303, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 26);
			LeaveRule("stmt_typedef", 26);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:306:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 27);
		TraceIn("stmt_using_item", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal164 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal164_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(306, 36);
		try
		{
			// SugarCpp.g:306:16: ( ident | 'namespace' )
			int alt66=2;
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==IDENT))
			{
				alt66 = 1;
			}
			else if ((LA66_0==140))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:306:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(306, 18);
				PushFollow(Follow._ident_in_stmt_using_item1822);
				ident163=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident163.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:306:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(306, 26);
				string_literal164=(IToken)Match(input,140,Follow._140_in_stmt_using_item1826); 
				string_literal164_tree = (CommonTree)adaptor.Create(string_literal164);
				adaptor.AddChild(root_0, string_literal164_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 27);
			LeaveRule("stmt_using_item", 27);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(306, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:307:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 28);
		TraceIn("stmt_using", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal165 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item166 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal165_tree = default(CommonTree);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(307, 1);
		try
		{
			// SugarCpp.g:308:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:308:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(308, 4);
			string_literal165=(IToken)Match(input,149,Follow._149_in_stmt_using1834);  
			stream_149.Add(string_literal165);

			DebugLocation(308, 12);
			// SugarCpp.g:308:12: ( stmt_using_item )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==IDENT||LA67_0==140))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:308:12: stmt_using_item
					{
					DebugLocation(308, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1836);
					stmt_using_item166=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item166.Tree);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 308:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(308, 32);
				// SugarCpp.g:308:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(308, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(308, 45);
				// SugarCpp.g:308:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(308, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 28);
			LeaveRule("stmt_using", 28);
			LeaveRule_stmt_using();
		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:311:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 29);
		TraceIn("stmt_return", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal167 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr168 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal167_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(311, 1);
		try
		{
			// SugarCpp.g:312:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:312:4: 'return' ( expr )?
			{
			DebugLocation(312, 4);
			string_literal167=(IToken)Match(input,143,Follow._143_in_stmt_return1857);  
			stream_143.Add(string_literal167);

			DebugLocation(312, 13);
			// SugarCpp.g:312:13: ( expr )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==IDENT||LA68_0==NUMBER||LA68_0==STRING||LA68_0==71||LA68_0==76||LA68_0==78||LA68_0==80||(LA68_0>=82 && LA68_0<=83)||(LA68_0>=86 && LA68_0<=87)||LA68_0==113||LA68_0==141||LA68_0==155))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:312:13: expr
				{
				DebugLocation(312, 13);
				PushFollow(Follow._expr_in_stmt_return1859);
				expr168=expr();
				PopFollow();

				stream_expr.Add(expr168.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 312:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(312, 22);
				// SugarCpp.g:312:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(312, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(312, 36);
				// SugarCpp.g:312:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(312, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 29);
			LeaveRule("stmt_return", 29);
			LeaveRule_stmt_return();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:315:1: stmt_if : 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 30);
		TraceIn("stmt_if", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal169 = default(IToken);
		IToken NEWLINE171 = default(IToken);
		IToken NEWLINE173 = default(IToken);
		IToken string_literal174 = default(IToken);
		IToken string_literal176 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt177 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal169_tree = default(CommonTree);
		CommonTree NEWLINE171_tree = default(CommonTree);
		CommonTree NEWLINE173_tree = default(CommonTree);
		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree string_literal176_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(315, 1);
		try
		{
			// SugarCpp.g:316:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:316:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
			{
			DebugLocation(316, 4);
			string_literal169=(IToken)Match(input,133,Follow._133_in_stmt_if1880);  
			stream_133.Add(string_literal169);

			DebugLocation(316, 9);
			PushFollow(Follow._expr_in_stmt_if1882);
			expr170=expr();
			PopFollow();

			stream_expr.Add(expr170.Tree);
			DebugLocation(316, 14);
			// SugarCpp.g:316:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==NEWLINE))
			{
				alt72 = 1;
			}
			else if ((LA72_0==144))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:316:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )?
				{
				DebugLocation(316, 15);
				// SugarCpp.g:316:15: ( NEWLINE )+
				int cnt69=0;
				try { DebugEnterSubRule(69);
				while (true)
				{
					int alt69=2;
					try { DebugEnterDecision(69, false);
					int LA69_0 = input.LA(1);

					if ((LA69_0==NEWLINE))
					{
						alt69 = 1;
					}


					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:316:15: NEWLINE
						{
						DebugLocation(316, 15);
						NEWLINE171=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1885);  
						stream_NEWLINE.Add(NEWLINE171);


						}
						break;

					default:
						if (cnt69 >= 1)
							goto loop69;

						EarlyExitException eee69 = new EarlyExitException( 69, input );
						DebugRecognitionException(eee69);
						throw eee69;
					}
					cnt69++;
				}
				loop69:
					;

				} finally { DebugExitSubRule(69); }

				DebugLocation(316, 24);
				PushFollow(Follow._stmt_block_in_stmt_if1888);
				stmt_block172=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block172.Tree);
				DebugLocation(316, 35);
				// SugarCpp.g:316:35: ( ( NEWLINE )* 'else' stmt_block )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				try
				{
					alt71 = dfa71.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:316:36: ( NEWLINE )* 'else' stmt_block
					{
					DebugLocation(316, 36);
					// SugarCpp.g:316:36: ( NEWLINE )*
					try { DebugEnterSubRule(70);
					while (true)
					{
						int alt70=2;
						try { DebugEnterDecision(70, false);
						int LA70_0 = input.LA(1);

						if ((LA70_0==NEWLINE))
						{
							alt70 = 1;
						}


						} finally { DebugExitDecision(70); }
						switch ( alt70 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:316:36: NEWLINE
							{
							DebugLocation(316, 36);
							NEWLINE173=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1891);  
							stream_NEWLINE.Add(NEWLINE173);


							}
							break;

						default:
							goto loop70;
						}
					}

					loop70:
						;

					} finally { DebugExitSubRule(70); }

					DebugLocation(316, 45);
					string_literal174=(IToken)Match(input,128,Follow._128_in_stmt_if1894);  
					stream_128.Add(string_literal174);

					DebugLocation(316, 52);
					PushFollow(Follow._stmt_block_in_stmt_if1896);
					stmt_block175=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block175.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(71); }



				{
				// AST REWRITE
				// elements: stmt_block, stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 316:65: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
					DebugLocation(316, 68);
					// SugarCpp.g:316:68: ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(316, 70);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

					DebugLocation(316, 78);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(316, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());
					DebugLocation(316, 94);
					// SugarCpp.g:316:94: ( stmt_block )?
					if (stream_stmt_block.HasNext)
					{
						DebugLocation(316, 94);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					}
					stream_stmt_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:317:16: 'then' stmt
				{
				DebugLocation(317, 16);
				string_literal176=(IToken)Match(input,144,Follow._144_in_stmt_if1928);  
				stream_144.Add(string_literal176);

				DebugLocation(317, 23);
				PushFollow(Follow._stmt_in_stmt_if1930);
				stmt177=stmt();
				PopFollow();

				stream_stmt.Add(stmt177.Tree);


				{
				// AST REWRITE
				// elements: stmt, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 317:28: -> ^( Stmt_If expr ^( Stmt_Block stmt ) )
				{
					DebugLocation(317, 31);
					// SugarCpp.g:317:31: ^( Stmt_If expr ^( Stmt_Block stmt ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(317, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

					DebugLocation(317, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(317, 46);
					// SugarCpp.g:317:46: ^( Stmt_Block stmt )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(317, 48);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(317, 59);
					adaptor.AddChild(root_2, stream_stmt.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 30);
			LeaveRule("stmt_if", 30);
			LeaveRule_stmt_if();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:321:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'loop' ( NEWLINE )+ stmt_block -> ^( Stmt_Loop stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 31);
		TraceIn("stmt_while", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal178 = default(IToken);
		IToken NEWLINE180 = default(IToken);
		IToken string_literal182 = default(IToken);
		IToken string_literal184 = default(IToken);
		IToken NEWLINE185 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block186 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal178_tree = default(CommonTree);
		CommonTree NEWLINE180_tree = default(CommonTree);
		CommonTree string_literal182_tree = default(CommonTree);
		CommonTree string_literal184_tree = default(CommonTree);
		CommonTree NEWLINE185_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(321, 1);
		try
		{
			// SugarCpp.g:322:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'loop' ( NEWLINE )+ stmt_block -> ^( Stmt_Loop stmt_block ) )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==151))
			{
				alt76 = 1;
			}
			else if ((LA76_0==139))
			{
				alt76 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:322:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(322, 4);
				string_literal178=(IToken)Match(input,151,Follow._151_in_stmt_while1961);  
				stream_151.Add(string_literal178);

				DebugLocation(322, 12);
				PushFollow(Follow._expr_in_stmt_while1963);
				expr179=expr();
				PopFollow();

				stream_expr.Add(expr179.Tree);
				DebugLocation(322, 17);
				// SugarCpp.g:322:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==NEWLINE))
				{
					alt74 = 1;
				}
				else if ((LA74_0==126))
				{
					alt74 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:322:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(322, 19);
					// SugarCpp.g:322:19: ( NEWLINE )+
					int cnt73=0;
					try { DebugEnterSubRule(73);
					while (true)
					{
						int alt73=2;
						try { DebugEnterDecision(73, false);
						int LA73_0 = input.LA(1);

						if ((LA73_0==NEWLINE))
						{
							alt73 = 1;
						}


						} finally { DebugExitDecision(73); }
						switch (alt73)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:322:19: NEWLINE
							{
							DebugLocation(322, 19);
							NEWLINE180=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while1967);  
							stream_NEWLINE.Add(NEWLINE180);


							}
							break;

						default:
							if (cnt73 >= 1)
								goto loop73;

							EarlyExitException eee73 = new EarlyExitException( 73, input );
							DebugRecognitionException(eee73);
							throw eee73;
						}
						cnt73++;
					}
					loop73:
						;

					} finally { DebugExitSubRule(73); }

					DebugLocation(322, 28);
					PushFollow(Follow._stmt_block_in_stmt_while1970);
					stmt_block181=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block181.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 322:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(322, 42);
						// SugarCpp.g:322:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(322, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(322, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(322, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:323:13: 'do' stmt
					{
					DebugLocation(323, 13);
					string_literal182=(IToken)Match(input,126,Follow._126_in_stmt_while1994);  
					stream_126.Add(string_literal182);

					DebugLocation(323, 18);
					PushFollow(Follow._stmt_in_stmt_while1996);
					stmt183=stmt();
					PopFollow();

					stream_stmt.Add(stmt183.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 323:23: -> ^( Stmt_While expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(323, 26);
						// SugarCpp.g:323:26: ^( Stmt_While expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(323, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(323, 39);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(323, 44);
						// SugarCpp.g:323:44: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(323, 46);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(323, 57);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(74); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:325:4: 'loop' ( NEWLINE )+ stmt_block
				{
				DebugLocation(325, 4);
				string_literal184=(IToken)Match(input,139,Follow._139_in_stmt_while2024);  
				stream_139.Add(string_literal184);

				DebugLocation(325, 11);
				// SugarCpp.g:325:11: ( NEWLINE )+
				int cnt75=0;
				try { DebugEnterSubRule(75);
				while (true)
				{
					int alt75=2;
					try { DebugEnterDecision(75, false);
					int LA75_0 = input.LA(1);

					if ((LA75_0==NEWLINE))
					{
						alt75 = 1;
					}


					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:325:11: NEWLINE
						{
						DebugLocation(325, 11);
						NEWLINE185=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2026);  
						stream_NEWLINE.Add(NEWLINE185);


						}
						break;

					default:
						if (cnt75 >= 1)
							goto loop75;

						EarlyExitException eee75 = new EarlyExitException( 75, input );
						DebugRecognitionException(eee75);
						throw eee75;
					}
					cnt75++;
				}
				loop75:
					;

				} finally { DebugExitSubRule(75); }

				DebugLocation(325, 20);
				PushFollow(Follow._stmt_block_in_stmt_while2029);
				stmt_block186=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block186.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 325:31: -> ^( Stmt_Loop stmt_block )
				{
					DebugLocation(325, 34);
					// SugarCpp.g:325:34: ^( Stmt_Loop stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(325, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(325, 46);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 31);
			LeaveRule("stmt_while", 31);
			LeaveRule_stmt_while();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:328:1: stmt_for : 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 32);
		TraceIn("stmt_for", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal187 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken string_literal190 = default(IToken);
		IToken string_literal192 = default(IToken);
		IToken string_literal194 = default(IToken);
		IToken NEWLINE196 = default(IToken);
		IToken string_literal198 = default(IToken);
		IToken string_literal200 = default(IToken);
		IToken NEWLINE202 = default(IToken);
		IToken NEWLINE204 = default(IToken);
		IToken char_literal206 = default(IToken);
		IToken char_literal208 = default(IToken);
		IToken char_literal210 = default(IToken);
		IToken char_literal212 = default(IToken);
		IToken NEWLINE213 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident189 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr193 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block214 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal187_tree = default(CommonTree);
		CommonTree char_literal188_tree = default(CommonTree);
		CommonTree string_literal190_tree = default(CommonTree);
		CommonTree string_literal192_tree = default(CommonTree);
		CommonTree string_literal194_tree = default(CommonTree);
		CommonTree NEWLINE196_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		CommonTree string_literal200_tree = default(CommonTree);
		CommonTree NEWLINE202_tree = default(CommonTree);
		CommonTree NEWLINE204_tree = default(CommonTree);
		CommonTree char_literal206_tree = default(CommonTree);
		CommonTree char_literal208_tree = default(CommonTree);
		CommonTree char_literal210_tree = default(CommonTree);
		CommonTree char_literal212_tree = default(CommonTree);
		CommonTree NEWLINE213_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr stmt_block ) )
			{
			DebugLocation(329, 4);
			string_literal187=(IToken)Match(input,131,Follow._131_in_stmt_for2048);  
			stream_131.Add(string_literal187);

			DebugLocation(329, 10);
			// SugarCpp.g:329:10: ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr stmt_block ) )
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==IDENT||LA85_0==76))
			{
				alt85 = 1;
			}
			else if ((LA85_0==78))
			{
				alt85 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 85, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:12: ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) )
				{
				DebugLocation(329, 12);
				// SugarCpp.g:329:12: ( '&' )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==76))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:12: '&'
					{
					DebugLocation(329, 12);
					char_literal188=(IToken)Match(input,76,Follow._76_in_stmt_for2052);  
					stream_76.Add(char_literal188);


					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(329, 17);
				PushFollow(Follow._ident_in_stmt_for2055);
				ident189=ident();
				PopFollow();

				stream_ident.Add(ident189.Tree);
				DebugLocation(329, 23);
				string_literal190=(IToken)Match(input,100,Follow._100_in_stmt_for2057);  
				stream_100.Add(string_literal190);

				DebugLocation(329, 28);
				PushFollow(Follow._expr_in_stmt_for2059);
				expr191=expr();
				PopFollow();

				stream_expr.Add(expr191.Tree);
				DebugLocation(329, 33);
				// SugarCpp.g:329:33: ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) )
				int alt83=3;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				switch (input.LA(1))
				{
				case 145:
					{
					alt83 = 1;
					}
					break;
				case 127:
					{
					alt83 = 2;
					}
					break;
				case NEWLINE:
					{
					alt83 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:35: 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block
					{
					DebugLocation(329, 35);
					string_literal192=(IToken)Match(input,145,Follow._145_in_stmt_for2063);  
					stream_145.Add(string_literal192);

					DebugLocation(329, 40);
					PushFollow(Follow._expr_in_stmt_for2065);
					expr193=expr();
					PopFollow();

					stream_expr.Add(expr193.Tree);
					DebugLocation(329, 45);
					// SugarCpp.g:329:45: ( 'by' expr )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, false);
					int LA78_0 = input.LA(1);

					if ((LA78_0==121))
					{
						alt78 = 1;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:329:46: 'by' expr
						{
						DebugLocation(329, 46);
						string_literal194=(IToken)Match(input,121,Follow._121_in_stmt_for2068);  
						stream_121.Add(string_literal194);

						DebugLocation(329, 51);
						PushFollow(Follow._expr_in_stmt_for2070);
						expr195=expr();
						PopFollow();

						stream_expr.Add(expr195.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(78); }

					DebugLocation(329, 58);
					// SugarCpp.g:329:58: ( NEWLINE )+
					int cnt79=0;
					try { DebugEnterSubRule(79);
					while (true)
					{
						int alt79=2;
						try { DebugEnterDecision(79, false);
						int LA79_0 = input.LA(1);

						if ((LA79_0==NEWLINE))
						{
							alt79 = 1;
						}


						} finally { DebugExitDecision(79); }
						switch (alt79)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:329:58: NEWLINE
							{
							DebugLocation(329, 58);
							NEWLINE196=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2074);  
							stream_NEWLINE.Add(NEWLINE196);


							}
							break;

						default:
							if (cnt79 >= 1)
								goto loop79;

							EarlyExitException eee79 = new EarlyExitException( 79, input );
							DebugRecognitionException(eee79);
							throw eee79;
						}
						cnt79++;
					}
					loop79:
						;

					} finally { DebugExitSubRule(79); }

					DebugLocation(329, 67);
					PushFollow(Follow._stmt_block_in_stmt_for2077);
					stmt_block197=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block197.Tree);


					{
					// AST REWRITE
					// elements: expr, expr, ident, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 329:78: -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block )
					{
						DebugLocation(329, 81);
						// SugarCpp.g:329:81: ^( Stmt_For_To ident expr expr ( expr )? stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(329, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For_To, "Stmt_For_To"), root_1);

						DebugLocation(329, 95);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(329, 101);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(329, 106);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(329, 111);
						// SugarCpp.g:329:111: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(329, 111);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();
						DebugLocation(329, 117);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:330:35: 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block
					{
					DebugLocation(330, 35);
					string_literal198=(IToken)Match(input,127,Follow._127_in_stmt_for2130);  
					stream_127.Add(string_literal198);

					DebugLocation(330, 44);
					PushFollow(Follow._expr_in_stmt_for2132);
					expr199=expr();
					PopFollow();

					stream_expr.Add(expr199.Tree);
					DebugLocation(330, 49);
					// SugarCpp.g:330:49: ( 'by' expr )?
					int alt80=2;
					try { DebugEnterSubRule(80);
					try { DebugEnterDecision(80, false);
					int LA80_0 = input.LA(1);

					if ((LA80_0==121))
					{
						alt80 = 1;
					}
					} finally { DebugExitDecision(80); }
					switch (alt80)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:330:50: 'by' expr
						{
						DebugLocation(330, 50);
						string_literal200=(IToken)Match(input,121,Follow._121_in_stmt_for2135);  
						stream_121.Add(string_literal200);

						DebugLocation(330, 55);
						PushFollow(Follow._expr_in_stmt_for2137);
						expr201=expr();
						PopFollow();

						stream_expr.Add(expr201.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(80); }

					DebugLocation(330, 62);
					// SugarCpp.g:330:62: ( NEWLINE )+
					int cnt81=0;
					try { DebugEnterSubRule(81);
					while (true)
					{
						int alt81=2;
						try { DebugEnterDecision(81, false);
						int LA81_0 = input.LA(1);

						if ((LA81_0==NEWLINE))
						{
							alt81 = 1;
						}


						} finally { DebugExitDecision(81); }
						switch (alt81)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:330:62: NEWLINE
							{
							DebugLocation(330, 62);
							NEWLINE202=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2141);  
							stream_NEWLINE.Add(NEWLINE202);


							}
							break;

						default:
							if (cnt81 >= 1)
								goto loop81;

							EarlyExitException eee81 = new EarlyExitException( 81, input );
							DebugRecognitionException(eee81);
							throw eee81;
						}
						cnt81++;
					}
					loop81:
						;

					} finally { DebugExitSubRule(81); }

					DebugLocation(330, 71);
					PushFollow(Follow._stmt_block_in_stmt_for2144);
					stmt_block203=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block203.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr, ident, expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 330:82: -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block )
					{
						DebugLocation(330, 85);
						// SugarCpp.g:330:85: ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 87);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For_Down_To, "Stmt_For_Down_To"), root_1);

						DebugLocation(330, 104);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(330, 110);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(330, 115);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(330, 120);
						// SugarCpp.g:330:120: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(330, 120);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();
						DebugLocation(330, 126);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:331:35: ( NEWLINE )+ stmt_block
					{
					DebugLocation(331, 35);
					// SugarCpp.g:331:35: ( NEWLINE )+
					int cnt82=0;
					try { DebugEnterSubRule(82);
					while (true)
					{
						int alt82=2;
						try { DebugEnterDecision(82, false);
						int LA82_0 = input.LA(1);

						if ((LA82_0==NEWLINE))
						{
							alt82 = 1;
						}


						} finally { DebugExitDecision(82); }
						switch (alt82)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:331:35: NEWLINE
							{
							DebugLocation(331, 35);
							NEWLINE204=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2197);  
							stream_NEWLINE.Add(NEWLINE204);


							}
							break;

						default:
							if (cnt82 >= 1)
								goto loop82;

							EarlyExitException eee82 = new EarlyExitException( 82, input );
							DebugRecognitionException(eee82);
							throw eee82;
						}
						cnt82++;
					}
					loop82:
						;

					} finally { DebugExitSubRule(82); }

					DebugLocation(331, 44);
					PushFollow(Follow._stmt_block_in_stmt_for2200);
					stmt_block205=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block205.Tree);


					{
					// AST REWRITE
					// elements: 76, expr, stmt_block, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 331:55: -> ^( Stmt_ForEach '&' ident expr stmt_block )
					{
						DebugLocation(331, 58);
						// SugarCpp.g:331:58: ^( Stmt_ForEach '&' ident expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(331, 60);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

						DebugLocation(331, 73);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(331, 77);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(331, 83);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(331, 88);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(83); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:333:6: '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block
				{
				DebugLocation(333, 6);
				char_literal206=(IToken)Match(input,78,Follow._78_in_stmt_for2237);  
				stream_78.Add(char_literal206);

				DebugLocation(333, 10);
				PushFollow(Follow._expr_in_stmt_for2239);
				expr207=expr();
				PopFollow();

				stream_expr.Add(expr207.Tree);
				DebugLocation(333, 15);
				char_literal208=(IToken)Match(input,98,Follow._98_in_stmt_for2241);  
				stream_98.Add(char_literal208);

				DebugLocation(333, 19);
				PushFollow(Follow._expr_in_stmt_for2243);
				expr209=expr();
				PopFollow();

				stream_expr.Add(expr209.Tree);
				DebugLocation(333, 24);
				char_literal210=(IToken)Match(input,98,Follow._98_in_stmt_for2245);  
				stream_98.Add(char_literal210);

				DebugLocation(333, 28);
				PushFollow(Follow._expr_in_stmt_for2247);
				expr211=expr();
				PopFollow();

				stream_expr.Add(expr211.Tree);
				DebugLocation(333, 33);
				char_literal212=(IToken)Match(input,79,Follow._79_in_stmt_for2249);  
				stream_79.Add(char_literal212);

				DebugLocation(333, 37);
				// SugarCpp.g:333:37: ( NEWLINE )+
				int cnt84=0;
				try { DebugEnterSubRule(84);
				while (true)
				{
					int alt84=2;
					try { DebugEnterDecision(84, false);
					int LA84_0 = input.LA(1);

					if ((LA84_0==NEWLINE))
					{
						alt84 = 1;
					}


					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:333:37: NEWLINE
						{
						DebugLocation(333, 37);
						NEWLINE213=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2251);  
						stream_NEWLINE.Add(NEWLINE213);


						}
						break;

					default:
						if (cnt84 >= 1)
							goto loop84;

						EarlyExitException eee84 = new EarlyExitException( 84, input );
						DebugRecognitionException(eee84);
						throw eee84;
					}
					cnt84++;
				}
				loop84:
					;

				} finally { DebugExitSubRule(84); }

				DebugLocation(333, 46);
				PushFollow(Follow._stmt_block_in_stmt_for2254);
				stmt_block214=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block214.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr, expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 333:57: -> ^( Stmt_For expr expr expr stmt_block )
				{
					DebugLocation(333, 60);
					// SugarCpp.g:333:60: ^( Stmt_For expr expr expr stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(333, 62);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

					DebugLocation(333, 71);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(333, 76);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(333, 81);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(333, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(85); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 32);
			LeaveRule("stmt_for", 32);
			LeaveRule_stmt_for();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:337:1: stmt_try : 'try' stmt_block 'catch' stmt_alloc stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 33);
		TraceIn("stmt_try", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal215 = default(IToken);
		IToken string_literal217 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block219 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal215_tree = default(CommonTree);
		CommonTree string_literal217_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(337, 1);
		try
		{
			// SugarCpp.g:338:2: ( 'try' stmt_block 'catch' stmt_alloc stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:338:4: 'try' stmt_block 'catch' stmt_alloc stmt_block
			{
			DebugLocation(338, 4);
			string_literal215=(IToken)Match(input,146,Follow._146_in_stmt_try2284);  
			stream_146.Add(string_literal215);

			DebugLocation(338, 10);
			PushFollow(Follow._stmt_block_in_stmt_try2286);
			stmt_block216=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block216.Tree);
			DebugLocation(338, 21);
			string_literal217=(IToken)Match(input,122,Follow._122_in_stmt_try2288);  
			stream_122.Add(string_literal217);

			DebugLocation(338, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try2290);
			stmt_alloc218=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc218.Tree);
			DebugLocation(338, 40);
			PushFollow(Follow._stmt_block_in_stmt_try2292);
			stmt_block219=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block219.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_alloc, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 338:51: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(338, 54);
				// SugarCpp.g:338:54: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(338, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(338, 65);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(338, 76);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(338, 87);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 33);
			LeaveRule("stmt_try", 33);
			LeaveRule_stmt_try();
		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarCpp.g:341:1: linq_item : ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) );
	[GrammarRule("linq_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 34);
		TraceIn("linq_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal220 = default(IToken);
		IToken string_literal222 = default(IToken);
		IToken string_literal224 = default(IToken);
		IToken char_literal226 = default(IToken);
		IToken string_literal228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr229 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal220_tree = default(CommonTree);
		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree string_literal224_tree = default(CommonTree);
		CommonTree char_literal226_tree = default(CommonTree);
		CommonTree string_literal228_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(341, 1);
		try
		{
			// SugarCpp.g:342:2: ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) )
			int alt86=3;
			try { DebugEnterDecision(86, false);
			switch (input.LA(1))
			{
			case 132:
				{
				alt86 = 1;
				}
				break;
			case 138:
				{
				alt86 = 2;
				}
				break;
			case 150:
				{
				alt86 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:342:4: 'from' expr 'in' expr
				{
				DebugLocation(342, 4);
				string_literal220=(IToken)Match(input,132,Follow._132_in_linq_item2315);  
				stream_132.Add(string_literal220);

				DebugLocation(342, 11);
				PushFollow(Follow._expr_in_linq_item2317);
				expr221=expr();
				PopFollow();

				stream_expr.Add(expr221.Tree);
				DebugLocation(342, 16);
				string_literal222=(IToken)Match(input,135,Follow._135_in_linq_item2319);  
				stream_135.Add(string_literal222);

				DebugLocation(342, 21);
				PushFollow(Follow._expr_in_linq_item2321);
				expr223=expr();
				PopFollow();

				stream_expr.Add(expr223.Tree);


				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 342:26: -> ^( Linq_From expr expr )
				{
					DebugLocation(342, 29);
					// SugarCpp.g:342:29: ^( Linq_From expr expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(342, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_From, "Linq_From"), root_1);

					DebugLocation(342, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(342, 46);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:343:4: 'let' ident '=' expr
				{
				DebugLocation(343, 4);
				string_literal224=(IToken)Match(input,138,Follow._138_in_linq_item2336);  
				stream_138.Add(string_literal224);

				DebugLocation(343, 10);
				PushFollow(Follow._ident_in_linq_item2338);
				ident225=ident();
				PopFollow();

				stream_ident.Add(ident225.Tree);
				DebugLocation(343, 16);
				char_literal226=(IToken)Match(input,104,Follow._104_in_linq_item2340);  
				stream_104.Add(char_literal226);

				DebugLocation(343, 20);
				PushFollow(Follow._expr_in_linq_item2342);
				expr227=expr();
				PopFollow();

				stream_expr.Add(expr227.Tree);


				{
				// AST REWRITE
				// elements: expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 343:25: -> ^( Linq_Let ident expr )
				{
					DebugLocation(343, 28);
					// SugarCpp.g:343:28: ^( Linq_Let ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(343, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Let, "Linq_Let"), root_1);

					DebugLocation(343, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(343, 45);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:344:4: 'where' expr
				{
				DebugLocation(344, 4);
				string_literal228=(IToken)Match(input,150,Follow._150_in_linq_item2357);  
				stream_150.Add(string_literal228);

				DebugLocation(344, 12);
				PushFollow(Follow._expr_in_linq_item2359);
				expr229=expr();
				PopFollow();

				stream_expr.Add(expr229.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 344:17: -> ^( Linq_Where expr )
				{
					DebugLocation(344, 20);
					// SugarCpp.g:344:20: ^( Linq_Where expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(344, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Where, "Linq_Where"), root_1);

					DebugLocation(344, 33);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_item", 34);
			LeaveRule("linq_item", 34);
			LeaveRule_linq_item();
		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return retval;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarCpp.g:347:1: linq_prefix : ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 35);
		TraceIn("linq_prefix", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE232 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item231 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE232_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_linq_item=new RewriteRuleSubtreeStream(adaptor,"rule linq_item");
		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(347, 1);
		try
		{
			// SugarCpp.g:348:2: ( ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:348:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			{
			DebugLocation(348, 4);
			// SugarCpp.g:348:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			int cnt89=0;
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==132||LA89_0==138||LA89_0==150))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:348:5: linq_item ( linq_item )* ( NEWLINE )+
					{
					DebugLocation(348, 5);
					PushFollow(Follow._linq_item_in_linq_prefix2379);
					linq_item230=linq_item();
					PopFollow();

					stream_linq_item.Add(linq_item230.Tree);
					DebugLocation(348, 15);
					// SugarCpp.g:348:15: ( linq_item )*
					try { DebugEnterSubRule(87);
					while (true)
					{
						int alt87=2;
						try { DebugEnterDecision(87, false);
						int LA87_0 = input.LA(1);

						if ((LA87_0==132||LA87_0==138||LA87_0==150))
						{
							alt87 = 1;
						}


						} finally { DebugExitDecision(87); }
						switch ( alt87 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:348:15: linq_item
							{
							DebugLocation(348, 15);
							PushFollow(Follow._linq_item_in_linq_prefix2381);
							linq_item231=linq_item();
							PopFollow();

							stream_linq_item.Add(linq_item231.Tree);

							}
							break;

						default:
							goto loop87;
						}
					}

					loop87:
						;

					} finally { DebugExitSubRule(87); }

					DebugLocation(348, 26);
					// SugarCpp.g:348:26: ( NEWLINE )+
					int cnt88=0;
					try { DebugEnterSubRule(88);
					while (true)
					{
						int alt88=2;
						try { DebugEnterDecision(88, false);
						int LA88_0 = input.LA(1);

						if ((LA88_0==NEWLINE))
						{
							alt88 = 1;
						}


						} finally { DebugExitDecision(88); }
						switch (alt88)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:348:26: NEWLINE
							{
							DebugLocation(348, 26);
							NEWLINE232=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix2384);  
							stream_NEWLINE.Add(NEWLINE232);


							}
							break;

						default:
							if (cnt88 >= 1)
								goto loop88;

							EarlyExitException eee88 = new EarlyExitException( 88, input );
							DebugRecognitionException(eee88);
							throw eee88;
						}
						cnt88++;
					}
					loop88:
						;

					} finally { DebugExitSubRule(88); }


					}
					break;

				default:
					if (cnt89 >= 1)
						goto loop89;

					EarlyExitException eee89 = new EarlyExitException( 89, input );
					DebugRecognitionException(eee89);
					throw eee89;
				}
				cnt89++;
			}
			loop89:
				;

			} finally { DebugExitSubRule(89); }



			{
			// AST REWRITE
			// elements: linq_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 348:37: -> ^( Linq_Prefix ( linq_item )+ )
			{
				DebugLocation(348, 40);
				// SugarCpp.g:348:40: ^( Linq_Prefix ( linq_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(348, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Prefix, "Linq_Prefix"), root_1);

				DebugLocation(348, 54);
				if (!(stream_linq_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_linq_item.HasNext )
				{
					DebugLocation(348, 54);
					adaptor.AddChild(root_1, stream_linq_item.NextTree());

				}
				stream_linq_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_prefix", 35);
			LeaveRule("linq_prefix", 35);
			LeaveRule_linq_prefix();
		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return retval;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarCpp.g:351:1: stmt_linq : linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 36);
		TraceIn("stmt_linq", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> linq_prefix233 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_linq_prefix=new RewriteRuleSubtreeStream(adaptor,"rule linq_prefix");
		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(351, 1);
		try
		{
			// SugarCpp.g:352:2: ( linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:352:4: linq_prefix stmt_block
			{
			DebugLocation(352, 4);
			PushFollow(Follow._linq_prefix_in_stmt_linq2407);
			linq_prefix233=linq_prefix();
			PopFollow();

			stream_linq_prefix.Add(linq_prefix233.Tree);
			DebugLocation(352, 16);
			PushFollow(Follow._stmt_block_in_stmt_linq2409);
			stmt_block234=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block234.Tree);


			{
			// AST REWRITE
			// elements: linq_prefix, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 352:27: -> ^( Stmt_Linq linq_prefix stmt_block )
			{
				DebugLocation(352, 30);
				// SugarCpp.g:352:30: ^( Stmt_Linq linq_prefix stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(352, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Linq, "Stmt_Linq"), root_1);

				DebugLocation(352, 42);
				adaptor.AddChild(root_1, stream_linq_prefix.NextTree());
				DebugLocation(352, 54);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_linq", 36);
			LeaveRule("stmt_linq", 36);
			LeaveRule_stmt_linq();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return retval;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:355:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 37);
		TraceIn("ident_list", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal236 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident235 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident237 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal236_tree = default(CommonTree);
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(355, 1);
		try
		{
			// SugarCpp.g:356:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:356:4: ident ( ',' ident )*
			{
			DebugLocation(356, 4);
			PushFollow(Follow._ident_in_ident_list2430);
			ident235=ident();
			PopFollow();

			stream_ident.Add(ident235.Tree);
			DebugLocation(356, 10);
			// SugarCpp.g:356:10: ( ',' ident )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==85))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:356:11: ',' ident
					{
					DebugLocation(356, 11);
					char_literal236=(IToken)Match(input,85,Follow._85_in_ident_list2433);  
					stream_85.Add(char_literal236);

					DebugLocation(356, 15);
					PushFollow(Follow._ident_in_ident_list2435);
					ident237=ident();
					PopFollow();

					stream_ident.Add(ident237.Tree);

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 356:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(356, 26);
				// SugarCpp.g:356:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(356, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(356, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(356, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 37);
			LeaveRule("ident_list", 37);
			LeaveRule_ident_list();
		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:359:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 38);
		TraceIn("stmt_alloc", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal239 = default(IToken);
		IToken char_literal241 = default(IToken);
		IToken string_literal242 = default(IToken);
		IToken char_literal244 = default(IToken);
		IToken char_literal246 = default(IToken);
		IToken string_literal247 = default(IToken);
		IToken char_literal249 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name240 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr243 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr250 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal239_tree = default(CommonTree);
		CommonTree char_literal241_tree = default(CommonTree);
		CommonTree string_literal242_tree = default(CommonTree);
		CommonTree char_literal244_tree = default(CommonTree);
		CommonTree char_literal246_tree = default(CommonTree);
		CommonTree string_literal247_tree = default(CommonTree);
		CommonTree char_literal249_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(359, 1);
		try
		{
			// SugarCpp.g:360:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:360:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) )
			{
			DebugLocation(360, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2457);
			ident_list238=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list238.Tree);
			DebugLocation(360, 15);
			// SugarCpp.g:360:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) )
			int alt95=2;
			try { DebugEnterSubRule(95);
			try { DebugEnterDecision(95, false);
			int LA95_0 = input.LA(1);

			if ((LA95_0==95))
			{
				alt95 = 1;
			}
			else if ((LA95_0==97))
			{
				alt95 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(360, 17);
				char_literal239=(IToken)Match(input,95,Follow._95_in_stmt_alloc2461);  
				stream_95.Add(char_literal239);

				DebugLocation(360, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2463);
				type_name240=type_name();
				PopFollow();

				stream_type_name.Add(type_name240.Tree);
				DebugLocation(360, 31);
				// SugarCpp.g:360:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt93=3;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				switch (input.LA(1))
				{
				case 97:
				case 104:
					{
					alt93 = 1;
					}
					break;
				case 78:
					{
					alt93 = 2;
					}
					break;
				case INDENT:
				case NEWLINE:
				case 133:
				case 151:
					{
					alt93 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 93, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:360:33: ( '=' | ':=' ) expr
					{
					DebugLocation(360, 33);
					// SugarCpp.g:360:33: ( '=' | ':=' )
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, false);
					int LA91_0 = input.LA(1);

					if ((LA91_0==104))
					{
						alt91 = 1;
					}
					else if ((LA91_0==97))
					{
						alt91 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:360:34: '='
						{
						DebugLocation(360, 34);
						char_literal241=(IToken)Match(input,104,Follow._104_in_stmt_alloc2468);  
						stream_104.Add(char_literal241);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:360:40: ':='
						{
						DebugLocation(360, 40);
						string_literal242=(IToken)Match(input,97,Follow._97_in_stmt_alloc2472);  
						stream_97.Add(string_literal242);


						}
						break;

					}
					} finally { DebugExitSubRule(91); }

					DebugLocation(360, 46);
					PushFollow(Follow._expr_in_stmt_alloc2475);
					expr243=expr();
					PopFollow();

					stream_expr.Add(expr243.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 360:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(360, 55);
						// SugarCpp.g:360:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(360, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(360, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(360, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(360, 95);
						// SugarCpp.g:360:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(360, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:361:33: '(' ( expr_list )? ')'
					{
					DebugLocation(361, 33);
					char_literal244=(IToken)Match(input,78,Follow._78_in_stmt_alloc2523);  
					stream_78.Add(char_literal244);

					DebugLocation(361, 37);
					// SugarCpp.g:361:37: ( expr_list )?
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, false);
					int LA92_0 = input.LA(1);

					if ((LA92_0==IDENT||LA92_0==NUMBER||LA92_0==STRING||LA92_0==71||LA92_0==76||LA92_0==78||LA92_0==80||(LA92_0>=82 && LA92_0<=83)||(LA92_0>=86 && LA92_0<=87)||LA92_0==113||LA92_0==141||LA92_0==155))
					{
						alt92 = 1;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:361:37: expr_list
						{
						DebugLocation(361, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc2525);
						expr_list245=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list245.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(92); }

					DebugLocation(361, 48);
					char_literal246=(IToken)Match(input,79,Follow._79_in_stmt_alloc2528);  
					stream_79.Add(char_literal246);



					{
					// AST REWRITE
					// elements: expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 361:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(361, 56);
						// SugarCpp.g:361:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(361, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(361, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(361, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(361, 98);
						// SugarCpp.g:361:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(361, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:362:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 362:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(362, 18);
						// SugarCpp.g:362:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(362, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(362, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(362, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(93); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:364:8: ':=' ( expr ( ',' modify_expr )* )
				{
				DebugLocation(364, 8);
				string_literal247=(IToken)Match(input,97,Follow._97_in_stmt_alloc2589);  
				stream_97.Add(string_literal247);

				DebugLocation(364, 14);
				// SugarCpp.g:364:14: ( expr ( ',' modify_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:364:15: expr ( ',' modify_expr )*
				{
				DebugLocation(364, 15);
				PushFollow(Follow._expr_in_stmt_alloc2593);
				expr248=expr();
				PopFollow();

				stream_expr.Add(expr248.Tree);
				DebugLocation(364, 20);
				// SugarCpp.g:364:20: ( ',' modify_expr )*
				try { DebugEnterSubRule(94);
				while (true)
				{
					int alt94=2;
					try { DebugEnterDecision(94, false);
					int LA94_0 = input.LA(1);

					if ((LA94_0==85))
					{
						alt94 = 1;
					}


					} finally { DebugExitDecision(94); }
					switch ( alt94 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:364:21: ',' modify_expr
						{
						DebugLocation(364, 21);
						char_literal249=(IToken)Match(input,85,Follow._85_in_stmt_alloc2596);  
						stream_85.Add(char_literal249);

						DebugLocation(364, 25);
						PushFollow(Follow._modify_expr_in_stmt_alloc2598);
						modify_expr250=modify_expr();
						PopFollow();

						stream_modify_expr.Add(modify_expr250.Tree);

						}
						break;

					default:
						goto loop94;
					}
				}

				loop94:
					;

				} finally { DebugExitSubRule(94); }


				}



				{
				// AST REWRITE
				// elements: 97, expr, ident_list, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 364:40: -> ^( ':=' ident_list expr ( modify_expr )* )
				{
					DebugLocation(364, 43);
					// SugarCpp.g:364:43: ^( ':=' ident_list expr ( modify_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(364, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_97.NextNode(), root_1);

					DebugLocation(364, 50);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(364, 61);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(364, 66);
					// SugarCpp.g:364:66: ( modify_expr )*
					while ( stream_modify_expr.HasNext )
					{
						DebugLocation(364, 66);
						adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					}
					stream_modify_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(95); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 38);
			LeaveRule("stmt_alloc", 38);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:367:1: stmt_modify : lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 39);
		TraceIn("stmt_modify", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal254 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr253 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr255 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal254_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(367, 1);
		try
		{
			// SugarCpp.g:368:2: ( lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:368:4: lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(368, 4);
			PushFollow(Follow._lvalue_in_stmt_modify2626);
			lvalue251=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue251.Tree);
			DebugLocation(368, 11);
			// SugarCpp.g:368:11: ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )?
			int alt96=3;
			try { DebugEnterSubRule(96);
			try { DebugEnterDecision(96, false);
			int LA96_0 = input.LA(1);

			if ((LA96_0==74||LA96_0==77||LA96_0==81||LA96_0==84||LA96_0==88||LA96_0==94||LA96_0==102||LA96_0==104||LA96_0==110||LA96_0==117||LA96_0==153))
			{
				alt96 = 1;
			}
			else if ((LA96_0==112))
			{
				alt96 = 2;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:368:13: modify_expr_op ^ modify_expr
				{
				DebugLocation(368, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify2630);
				modify_expr_op252=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op252.Tree, root_0);
				DebugLocation(368, 29);
				PushFollow(Follow._modify_expr_in_stmt_modify2633);
				modify_expr253=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr253.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:369:13: '?=' ^ modify_expr
				{
				DebugLocation(369, 17);
				string_literal254=(IToken)Match(input,112,Follow._112_in_stmt_modify2647); 
				string_literal254_tree = (CommonTree)adaptor.Create(string_literal254);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal254_tree, root_0);
				DebugLocation(369, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify2650);
				modify_expr255=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr255.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(96); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 39);
			LeaveRule("stmt_modify", 39);
			LeaveRule_stmt_modify();
		}
		DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:372:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 40);
		TraceIn("expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr256 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(372, 1);
		try
		{
			// SugarCpp.g:373:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:373:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(373, 4);
			PushFollow(Follow._lambda_expr_in_expr2663);
			lambda_expr256=lambda_expr();
			PopFollow();

			adaptor.AddChild(root_0, lambda_expr256.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 40);
			LeaveRule("expr", 40);
			LeaveRule_expr();
		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:376:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 41);
		TraceIn("lambda_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal257 = default(IToken);
		IToken char_literal259 = default(IToken);
		IToken string_literal260 = default(IToken);
		IToken string_literal262 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args258 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr263 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr264 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal257_tree = default(CommonTree);
		CommonTree char_literal259_tree = default(CommonTree);
		CommonTree string_literal260_tree = default(CommonTree);
		CommonTree string_literal262_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(376, 1);
		try
		{
			// SugarCpp.g:377:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt99=2;
			try { DebugEnterDecision(99, false);
			try
			{
				alt99 = dfa99.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:377:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(377, 4);
				char_literal257=(IToken)Match(input,78,Follow._78_in_lambda_expr2674);  
				stream_78.Add(char_literal257);

				DebugLocation(377, 8);
				// SugarCpp.g:377:8: ( func_args )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==IDENT||LA97_0==97))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:377:8: func_args
					{
					DebugLocation(377, 8);
					PushFollow(Follow._func_args_in_lambda_expr2676);
					func_args258=func_args();
					PopFollow();

					stream_func_args.Add(func_args258.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(377, 19);
				char_literal259=(IToken)Match(input,79,Follow._79_in_lambda_expr2679);  
				stream_79.Add(char_literal259);

				DebugLocation(377, 23);
				// SugarCpp.g:377:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==89))
				{
					alt98 = 1;
				}
				else if ((LA98_0==106))
				{
					alt98 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:377:25: '->' expr
					{
					DebugLocation(377, 25);
					string_literal260=(IToken)Match(input,89,Follow._89_in_lambda_expr2683);  
					stream_89.Add(string_literal260);

					DebugLocation(377, 30);
					PushFollow(Follow._expr_in_lambda_expr2685);
					expr261=expr();
					PopFollow();

					stream_expr.Add(expr261.Tree);


					{
					// AST REWRITE
					// elements: 89, expr, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 377:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(377, 39);
						// SugarCpp.g:377:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(377, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(377, 53);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(377, 58);
						// SugarCpp.g:377:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(377, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(377, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:378:25: '=>' expr
					{
					DebugLocation(378, 25);
					string_literal262=(IToken)Match(input,106,Follow._106_in_lambda_expr2725);  
					stream_106.Add(string_literal262);

					DebugLocation(378, 30);
					PushFollow(Follow._expr_in_lambda_expr2727);
					expr263=expr();
					PopFollow();

					stream_expr.Add(expr263.Tree);


					{
					// AST REWRITE
					// elements: func_args, expr, 106
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 378:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(378, 39);
						// SugarCpp.g:378:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(378, 53);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(378, 58);
						// SugarCpp.g:378:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(378, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(378, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(98); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:379:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(379, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr2747);
				modify_expr264=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr264.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 41);
			LeaveRule("lambda_expr", 41);
			LeaveRule_lambda_expr();
		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:382:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 42);
		TraceIn("modify_expr_op", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set265 = default(IToken);

		CommonTree set265_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(382, 91);
		try
		{
			// SugarCpp.g:382:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(382, 15);

			set265=(IToken)input.LT(1);
			if (input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==84||input.LA(1)==88||input.LA(1)==94||input.LA(1)==102||input.LA(1)==104||input.LA(1)==110||input.LA(1)==117||input.LA(1)==153)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set265));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 42);
			LeaveRule("modify_expr_op", 42);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(382, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:383:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 43);
		TraceIn("modify_expr", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set267 = default(IToken);
		IToken char_literal269 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr270 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set267_tree = default(CommonTree);
		CommonTree char_literal269_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(383, 1);
		try
		{
			// SugarCpp.g:384:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:384:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(384, 4);
			PushFollow(Follow._cond_expr_in_modify_expr2804);
			cond_expr266=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr266.Tree);
			DebugLocation(384, 14);
			// SugarCpp.g:384:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt101=3;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, false);
			int LA101_0 = input.LA(1);

			if ((LA101_0==74||LA101_0==77||LA101_0==81||LA101_0==84||LA101_0==88||LA101_0==94||LA101_0==97||LA101_0==102||LA101_0==110||LA101_0==117||LA101_0==153))
			{
				alt101 = 1;
			}
			else if ((LA101_0==104))
			{
				alt101 = 2;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:384:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(384, 94);

				set267=(IToken)input.LT(1);
				set267=(IToken)input.LT(1);
				if (input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==84||input.LA(1)==88||input.LA(1)==94||input.LA(1)==97||input.LA(1)==102||input.LA(1)==110||input.LA(1)==117||input.LA(1)==153)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set267), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(384, 96);
				PushFollow(Follow._cond_expr_in_modify_expr2853);
				cond_expr268=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr268.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:385:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(385, 7);
				// SugarCpp.g:385:7: ( '=' ^ cond_expr )+
				int cnt100=0;
				try { DebugEnterSubRule(100);
				while (true)
				{
					int alt100=2;
					try { DebugEnterDecision(100, false);
					int LA100_0 = input.LA(1);

					if ((LA100_0==104))
					{
						alt100 = 1;
					}


					} finally { DebugExitDecision(100); }
					switch (alt100)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:385:8: '=' ^ cond_expr
						{
						DebugLocation(385, 11);
						char_literal269=(IToken)Match(input,104,Follow._104_in_modify_expr2862); 
						char_literal269_tree = (CommonTree)adaptor.Create(char_literal269);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal269_tree, root_0);
						DebugLocation(385, 13);
						PushFollow(Follow._cond_expr_in_modify_expr2865);
						cond_expr270=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr270.Tree);

						}
						break;

					default:
						if (cnt100 >= 1)
							goto loop100;

						EarlyExitException eee100 = new EarlyExitException( 100, input );
						DebugRecognitionException(eee100);
						throw eee100;
					}
					cnt100++;
				}
				loop100:
					;

				} finally { DebugExitSubRule(100); }


				}
				break;

			}
			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 43);
			LeaveRule("modify_expr", 43);
			LeaveRule_modify_expr();
		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:388:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 44);
		TraceIn("cond_expr_item", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr271 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(388, 24);
		try
		{
			// SugarCpp.g:388:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:388:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(388, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item2878);
			or_expr271=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr271.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 44);
			LeaveRule("cond_expr_item", 44);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(388, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:389:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 45);
		TraceIn("cond_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal272 = default(IToken);
		IToken char_literal273 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal272_tree = default(CommonTree);
		CommonTree char_literal273_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(389, 1);
		try
		{
			// SugarCpp.g:390:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:390:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(390, 4);
			// SugarCpp.g:390:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:390:5: a= or_expr
			{
			DebugLocation(390, 6);
			PushFollow(Follow._or_expr_in_cond_expr2890);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 390:15: -> $a
			{
				DebugLocation(390, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(390, 22);
			// SugarCpp.g:390:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt104=2;
			try { DebugEnterSubRule(104);
			try { DebugEnterDecision(104, false);
			int LA104_0 = input.LA(1);

			if ((LA104_0==111))
			{
				alt104 = 1;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:390:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(390, 23);
				char_literal272=(IToken)Match(input,111,Follow._111_in_cond_expr2899);  
				stream_111.Add(char_literal272);

				DebugLocation(390, 27);
				// SugarCpp.g:390:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==IDENT||LA103_0==NUMBER||LA103_0==STRING||LA103_0==71||LA103_0==76||LA103_0==78||LA103_0==80||(LA103_0>=82 && LA103_0<=83)||(LA103_0>=86 && LA103_0<=87)||LA103_0==113||LA103_0==141||LA103_0==155))
				{
					alt103 = 1;
				}
				else if ((LA103_0==INDENT||LA103_0==NEWLINE||LA103_0==74||LA103_0==77||LA103_0==79||LA103_0==81||(LA103_0>=84 && LA103_0<=85)||LA103_0==88||LA103_0==94||(LA103_0>=97 && LA103_0<=98)||LA103_0==102||LA103_0==104||LA103_0==110||LA103_0==115||LA103_0==117||LA103_0==121||(LA103_0>=126 && LA103_0<=127)||(LA103_0>=132 && LA103_0<=133)||LA103_0==135||LA103_0==138||(LA103_0>=144 && LA103_0<=145)||(LA103_0>=150 && LA103_0<=151)||LA103_0==153))
				{
					alt103 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:390:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(390, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr2905);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(390, 46);
					// SugarCpp.g:390:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt102=2;
					try { DebugEnterSubRule(102);
					try { DebugEnterDecision(102, false);
					int LA102_0 = input.LA(1);

					if ((LA102_0==95))
					{
						alt102 = 1;
					}
					else if ((LA102_0==INDENT||LA102_0==NEWLINE||LA102_0==74||LA102_0==77||LA102_0==79||LA102_0==81||(LA102_0>=84 && LA102_0<=85)||LA102_0==88||LA102_0==94||(LA102_0>=97 && LA102_0<=98)||LA102_0==102||LA102_0==104||LA102_0==110||LA102_0==115||LA102_0==117||LA102_0==121||(LA102_0>=126 && LA102_0<=127)||(LA102_0>=132 && LA102_0<=133)||LA102_0==135||LA102_0==138||(LA102_0>=144 && LA102_0<=145)||(LA102_0>=150 && LA102_0<=151)||LA102_0==153))
					{
						alt102 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(102); }
					switch (alt102)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:390:48: ':' b= cond_expr_item
						{
						DebugLocation(390, 48);
						char_literal273=(IToken)Match(input,95,Follow._95_in_cond_expr2909);  
						stream_95.Add(char_literal273);

						DebugLocation(390, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr2913);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: cond_expr, a, b
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 390:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(390, 72);
							// SugarCpp.g:390:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(390, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(390, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(390, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(390, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:391:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 391:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(391, 20);
							// SugarCpp.g:391:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(391, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(391, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(391, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(102); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:393:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 393:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(393, 14);
						// SugarCpp.g:393:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(393, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(103); }


				}
				break;

			}
			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 45);
			LeaveRule("cond_expr", 45);
			LeaveRule_cond_expr();
		}
		DebugLocation(395, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:397:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 46);
		TraceIn("or_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal274 = default(IToken);
		IToken string_literal275 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal274_tree = default(CommonTree);
		CommonTree string_literal275_tree = default(CommonTree);
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(397, 1);
		try
		{
			// SugarCpp.g:398:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:398:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )*
			{
			DebugLocation(398, 4);
			// SugarCpp.g:398:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:398:5: a= and_expr
			{
			DebugLocation(398, 6);
			PushFollow(Follow._and_expr_in_or_expr3016);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 398:16: -> $a
			{
				DebugLocation(398, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(398, 23);
			// SugarCpp.g:398:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=3;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==154))
				{
					alt105 = 1;
				}
				else if ((LA105_0==142))
				{
					alt105 = 2;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:398:25: '||' b= and_expr
					{
					DebugLocation(398, 25);
					string_literal274=(IToken)Match(input,154,Follow._154_in_or_expr3026);  
					stream_154.Add(string_literal274);

					DebugLocation(398, 31);
					PushFollow(Follow._and_expr_in_or_expr3030);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 154, or_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 398:41: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(398, 44);
						// SugarCpp.g:398:44: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(398, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(398, 55);
						adaptor.AddChild(root_1, stream_154.NextNode());
						DebugLocation(398, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(398, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:399:25: 'or' b= and_expr
					{
					DebugLocation(399, 25);
					string_literal275=(IToken)Match(input,142,Follow._142_in_or_expr3070);  
					stream_142.Add(string_literal275);

					DebugLocation(399, 31);
					PushFollow(Follow._and_expr_in_or_expr3074);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 142, or_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 399:41: -> ^( 'or' $or_expr $b)
					{
						DebugLocation(399, 44);
						// SugarCpp.g:399:44: ^( 'or' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(399, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_142.NextNode(), root_1);

						DebugLocation(399, 52);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(399, 61);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 46);
			LeaveRule("or_expr", 46);
			LeaveRule_or_expr();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:402:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 47);
		TraceIn("and_expr", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal276 = default(IToken);
		IToken string_literal277 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal276_tree = default(CommonTree);
		CommonTree string_literal277_tree = default(CommonTree);
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(402, 1);
		try
		{
			// SugarCpp.g:403:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:403:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )*
			{
			DebugLocation(403, 4);
			// SugarCpp.g:403:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:403:5: a= bit_or
			{
			DebugLocation(403, 6);
			PushFollow(Follow._bit_or_in_and_expr3102);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 403:14: -> $a
			{
				DebugLocation(403, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(403, 21);
			// SugarCpp.g:403:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=3;
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==75))
				{
					alt106 = 1;
				}
				else if ((LA106_0==119))
				{
					alt106 = 2;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:403:23: '&&' b= bit_or
					{
					DebugLocation(403, 23);
					string_literal276=(IToken)Match(input,75,Follow._75_in_and_expr3112);  
					stream_75.Add(string_literal276);

					DebugLocation(403, 29);
					PushFollow(Follow._bit_or_in_and_expr3116);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, b, 75
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 403:37: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(403, 40);
						// SugarCpp.g:403:40: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(403, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(403, 51);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(403, 57);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(403, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:404:11: 'and' b= bit_or
					{
					DebugLocation(404, 11);
					string_literal277=(IToken)Match(input,119,Follow._119_in_and_expr3142);  
					stream_119.Add(string_literal277);

					DebugLocation(404, 18);
					PushFollow(Follow._bit_or_in_and_expr3146);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, and_expr, 119
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 404:26: -> ^( 'and' $and_expr $b)
					{
						DebugLocation(404, 29);
						// SugarCpp.g:404:29: ^( 'and' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(404, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_119.NextNode(), root_1);

						DebugLocation(404, 38);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(404, 48);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 47);
			LeaveRule("and_expr", 47);
			LeaveRule_and_expr();
		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:407:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 48);
		TraceIn("bit_or", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal278 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal278_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(407, 1);
		try
		{
			// SugarCpp.g:408:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:408:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(408, 4);
			// SugarCpp.g:408:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:408:5: a= bit_xor
			{
			DebugLocation(408, 6);
			PushFollow(Follow._bit_xor_in_bit_or3174);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 408:15: -> $a
			{
				DebugLocation(408, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(408, 22);
			// SugarCpp.g:408:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==152))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:408:23: '|' b= bit_xor
					{
					DebugLocation(408, 23);
					char_literal278=(IToken)Match(input,152,Follow._152_in_bit_or3183);  
					stream_152.Add(char_literal278);

					DebugLocation(408, 28);
					PushFollow(Follow._bit_xor_in_bit_or3187);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 152, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 408:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(408, 40);
						// SugarCpp.g:408:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(408, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(408, 51);
						adaptor.AddChild(root_1, stream_152.NextNode());
						DebugLocation(408, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(408, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 48);
			LeaveRule("bit_or", 48);
			LeaveRule_bit_or();
		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:411:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 49);
		TraceIn("bit_xor", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal279 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal279_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(411, 1);
		try
		{
			// SugarCpp.g:412:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:412:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(412, 4);
			// SugarCpp.g:412:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:412:5: a= bit_and
			{
			DebugLocation(412, 6);
			PushFollow(Follow._bit_and_in_bit_xor3217);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 412:15: -> $a
			{
				DebugLocation(412, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(412, 22);
			// SugarCpp.g:412:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, false);
				int LA108_0 = input.LA(1);

				if ((LA108_0==116))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch ( alt108 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:412:23: '^' b= bit_and
					{
					DebugLocation(412, 23);
					char_literal279=(IToken)Match(input,116,Follow._116_in_bit_xor3226);  
					stream_116.Add(char_literal279);

					DebugLocation(412, 28);
					PushFollow(Follow._bit_and_in_bit_xor3230);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 116, b, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 412:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(412, 40);
						// SugarCpp.g:412:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(412, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(412, 51);
						adaptor.AddChild(root_1, stream_116.NextNode());
						DebugLocation(412, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(412, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop108;
				}
			}

			loop108:
				;

			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 49);
			LeaveRule("bit_xor", 49);
			LeaveRule_bit_xor();
		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:415:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 50);
		TraceIn("bit_and", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal280 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal280_tree = default(CommonTree);
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(415, 1);
		try
		{
			// SugarCpp.g:416:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:416:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(416, 4);
			// SugarCpp.g:416:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:416:5: a= cmp_equ_expr
			{
			DebugLocation(416, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and3260);
			a=cmp_equ_expr();
			PopFollow();

			stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 416:20: -> $a
			{
				DebugLocation(416, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(416, 27);
			// SugarCpp.g:416:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==76))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:416:28: '&' b= cmp_equ_expr
					{
					DebugLocation(416, 28);
					char_literal280=(IToken)Match(input,76,Follow._76_in_bit_and3269);  
					stream_76.Add(char_literal280);

					DebugLocation(416, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and3273);
					b=cmp_equ_expr();
					PopFollow();

					stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 76, b, bit_and
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 416:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(416, 50);
						// SugarCpp.g:416:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(416, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(416, 61);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(416, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(416, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 50);
			LeaveRule("bit_and", 50);
			LeaveRule_bit_and();
		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:419:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 51);
		TraceIn("cmp_equ_expr_op", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set281 = default(IToken);

		CommonTree set281_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(419, 29);
		try
		{
			// SugarCpp.g:419:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(419, 16);

			set281=(IToken)input.LT(1);
			if (input.LA(1)==72||input.LA(1)==105)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set281));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 51);
			LeaveRule("cmp_equ_expr_op", 51);
			LeaveRule_cmp_equ_expr_op();
		}
		DebugLocation(419, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:420:1: cmp_equ_expr : (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 52);
		TraceIn("cmp_equ_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal282 = default(IToken);
		IToken string_literal283 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal282_tree = default(CommonTree);
		CommonTree string_literal283_tree = default(CommonTree);
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(420, 1);
		try
		{
			// SugarCpp.g:421:2: ( (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:421:4: (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )?
			{
			DebugLocation(421, 4);
			// SugarCpp.g:421:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:421:5: a= cmp_expr
			{
			DebugLocation(421, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr3314);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 421:16: -> $a
			{
				DebugLocation(421, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(421, 23);
			// SugarCpp.g:421:23: (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )?
			int alt110=4;
			try { DebugEnterSubRule(110);
			try { DebugEnterDecision(110, false);
			switch (input.LA(1))
			{
			case 72:
			case 105:
				{
				alt110 = 1;
				}
				break;
			case 136:
				{
				alt110 = 2;
				}
				break;
			case 137:
				{
				alt110 = 3;
				}
				break;
			}

			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:421:25: op= cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(421, 27);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr3326);
				op=cmp_equ_expr_op();
				PopFollow();

				stream_cmp_equ_expr_op.Add(op.Tree);
				DebugLocation(421, 45);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr3330);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_equ_expr, op
				// token labels: 
				// rule labels: retval, op, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 421:55: -> ^( Expr_Bin $op $cmp_equ_expr $b)
				{
					DebugLocation(421, 58);
					// SugarCpp.g:421:58: ^( Expr_Bin $op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(421, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(421, 70);
					adaptor.AddChild(root_1, stream_op.NextTree());
					DebugLocation(421, 74);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(421, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:422:25: 'is' b= cmp_expr
				{
				DebugLocation(422, 25);
				string_literal282=(IToken)Match(input,136,Follow._136_in_cmp_equ_expr3371);  
				stream_136.Add(string_literal282);

				DebugLocation(422, 31);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr3375);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_equ_expr, 136, b
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 422:41: -> ^( 'is' $cmp_equ_expr $b)
				{
					DebugLocation(422, 44);
					// SugarCpp.g:422:44: ^( 'is' $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(422, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_136.NextNode(), root_1);

					DebugLocation(422, 52);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(422, 66);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:423:25: 'isnt' b= cmp_expr
				{
				DebugLocation(423, 25);
				string_literal283=(IToken)Match(input,137,Follow._137_in_cmp_equ_expr3414);  
				stream_137.Add(string_literal283);

				DebugLocation(423, 33);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr3418);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_equ_expr, b, 137
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 423:43: -> ^( 'isnt' $cmp_equ_expr $b)
				{
					DebugLocation(423, 46);
					// SugarCpp.g:423:46: ^( 'isnt' $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(423, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_137.NextNode(), root_1);

					DebugLocation(423, 56);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(423, 70);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(110); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 52);
			LeaveRule("cmp_equ_expr", 52);
			LeaveRule_cmp_equ_expr();
		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:427:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 53);
		TraceIn("cmp_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal284 = default(IToken);
		IToken char_literal286 = default(IToken);
		IToken char_literal287 = default(IToken);
		IToken char_literal289 = default(IToken);
		IToken string_literal290 = default(IToken);
		IToken char_literal291 = default(IToken);
		IToken string_literal292 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list288 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal284_tree = default(CommonTree);
		CommonTree char_literal286_tree = default(CommonTree);
		CommonTree char_literal287_tree = default(CommonTree);
		CommonTree char_literal289_tree = default(CommonTree);
		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree char_literal291_tree = default(CommonTree);
		CommonTree string_literal292_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(427, 1);
		try
		{
			// SugarCpp.g:428:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:428:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			{
			DebugLocation(428, 4);
			// SugarCpp.g:428:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:428:5: a= infix_expr
			{
			DebugLocation(428, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr3456);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 428:18: -> $a
			{
				DebugLocation(428, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(428, 25);
			// SugarCpp.g:428:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=5;
				try { DebugEnterDecision(114, false);
				switch (input.LA(1))
				{
				case 99:
					{
					alt114 = 1;
					}
					break;
				case 103:
					{
					alt114 = 2;
					}
					break;
				case 107:
					{
					alt114 = 3;
					}
					break;
				case 108:
					{
					alt114 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:428:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					{
					DebugLocation(428, 27);
					char_literal284=(IToken)Match(input,99,Follow._99_in_cmp_expr3466);  
					stream_99.Add(char_literal284);

					DebugLocation(428, 32);
					PushFollow(Follow._infix_expr_in_cmp_expr3470);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);
					DebugLocation(428, 44);
					// SugarCpp.g:428:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					int alt113=2;
					try { DebugEnterSubRule(113);
					try { DebugEnterDecision(113, false);
					switch (input.LA(1))
					{
					case IDENT:
						{
						alt113 = 1;
						}
						break;
					case 107:
						{
						int LA113_2 = input.LA(2);

						if (((b.Tree.Token.Type == IDENT)))
						{
							alt113 = 1;
						}
						else if ((true))
						{
							alt113 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 113, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case INDENT:
					case NEWLINE:
					case 72:
					case 74:
					case 75:
					case 76:
					case 77:
					case 79:
					case 81:
					case 84:
					case 85:
					case 88:
					case 94:
					case 95:
					case 97:
					case 98:
					case 99:
					case 102:
					case 103:
					case 104:
					case 105:
					case 108:
					case 110:
					case 111:
					case 115:
					case 116:
					case 117:
					case 119:
					case 121:
					case 126:
					case 127:
					case 132:
					case 133:
					case 135:
					case 136:
					case 137:
					case 138:
					case 142:
					case 144:
					case 145:
					case 150:
					case 151:
					case 152:
					case 153:
					case 154:
						{
						alt113 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 113, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(113); }
					switch (alt113)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:428:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
						{
						DebugLocation(428, 46);
						if (!((b.Tree.Token.Type == IDENT)))
						{
							throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
						}
						DebugLocation(428, 76);
						// SugarCpp.g:428:76: ( ident )*
						try { DebugEnterSubRule(111);
						while (true)
						{
							int alt111=2;
							try { DebugEnterDecision(111, false);
							int LA111_0 = input.LA(1);

							if ((LA111_0==IDENT))
							{
								alt111 = 1;
							}


							} finally { DebugExitDecision(111); }
							switch ( alt111 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:428:76: ident
								{
								DebugLocation(428, 76);
								PushFollow(Follow._ident_in_cmp_expr3476);
								ident285=ident();
								PopFollow();

								stream_ident.Add(ident285.Tree);

								}
								break;

							default:
								goto loop111;
							}
						}

						loop111:
							;

						} finally { DebugExitSubRule(111); }

						DebugLocation(428, 83);
						char_literal286=(IToken)Match(input,107,Follow._107_in_cmp_expr3479);  
						stream_107.Add(char_literal286);

						DebugLocation(428, 87);
						char_literal287=(IToken)Match(input,78,Follow._78_in_cmp_expr3481);  
						stream_78.Add(char_literal287);

						DebugLocation(428, 91);
						// SugarCpp.g:428:91: ( expr_list )?
						int alt112=2;
						try { DebugEnterSubRule(112);
						try { DebugEnterDecision(112, false);
						int LA112_0 = input.LA(1);

						if ((LA112_0==IDENT||LA112_0==NUMBER||LA112_0==STRING||LA112_0==71||LA112_0==76||LA112_0==78||LA112_0==80||(LA112_0>=82 && LA112_0<=83)||(LA112_0>=86 && LA112_0<=87)||LA112_0==113||LA112_0==141||LA112_0==155))
						{
							alt112 = 1;
						}
						} finally { DebugExitDecision(112); }
						switch (alt112)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:428:91: expr_list
							{
							DebugLocation(428, 91);
							PushFollow(Follow._expr_list_in_cmp_expr3483);
							expr_list288=expr_list();
							PopFollow();

							stream_expr_list.Add(expr_list288.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(112); }

						DebugLocation(428, 102);
						char_literal289=(IToken)Match(input,79,Follow._79_in_cmp_expr3486);  
						stream_79.Add(char_literal289);



						{
						// AST REWRITE
						// elements: ident, cmp_expr, b, expr_list
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 428:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
							DebugLocation(428, 109);
							// SugarCpp.g:428:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(428, 111);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(428, 122);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(428, 131);
							// SugarCpp.g:428:131: ^( Generic_Patameters $b ( ident )* )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(428, 133);
							root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

							DebugLocation(428, 153);
							adaptor.AddChild(root_2, stream_b.NextTree());
							DebugLocation(428, 155);
							// SugarCpp.g:428:155: ( ident )*
							while ( stream_ident.HasNext )
							{
								DebugLocation(428, 155);
								adaptor.AddChild(root_2, stream_ident.NextTree());

							}
							stream_ident.Reset();

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(428, 163);
							// SugarCpp.g:428:163: ( expr_list )?
							if (stream_expr_list.HasNext)
							{
								DebugLocation(428, 163);
								adaptor.AddChild(root_1, stream_expr_list.NextTree());

							}
							stream_expr_list.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:429:46: 
						{

						{
						// AST REWRITE
						// elements: b, cmp_expr, 99
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 429:46: -> ^( Expr_Bin '<' $cmp_expr $b)
						{
							DebugLocation(429, 49);
							// SugarCpp.g:429:49: ^( Expr_Bin '<' $cmp_expr $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(429, 51);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

							DebugLocation(429, 60);
							adaptor.AddChild(root_1, stream_99.NextNode());
							DebugLocation(429, 65);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(429, 75);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(113); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:430:27: '<=' b= infix_expr
					{
					DebugLocation(430, 27);
					string_literal290=(IToken)Match(input,103,Follow._103_in_cmp_expr3596);  
					stream_103.Add(string_literal290);

					DebugLocation(430, 33);
					PushFollow(Follow._infix_expr_in_cmp_expr3600);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 103, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 430:45: -> ^( Expr_Bin '<=' $cmp_expr $b)
					{
						DebugLocation(430, 48);
						// SugarCpp.g:430:48: ^( Expr_Bin '<=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(430, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(430, 59);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(430, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(430, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:431:12: '>' b= infix_expr
					{
					DebugLocation(431, 12);
					char_literal291=(IToken)Match(input,107,Follow._107_in_cmp_expr3627);  
					stream_107.Add(char_literal291);

					DebugLocation(431, 17);
					PushFollow(Follow._infix_expr_in_cmp_expr3631);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 107, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 431:29: -> ^( Expr_Bin '>' $cmp_expr $b)
					{
						DebugLocation(431, 32);
						// SugarCpp.g:431:32: ^( Expr_Bin '>' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(431, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(431, 43);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(431, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(431, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:432:12: '>=' b= infix_expr
					{
					DebugLocation(432, 12);
					string_literal292=(IToken)Match(input,108,Follow._108_in_cmp_expr3658);  
					stream_108.Add(string_literal292);

					DebugLocation(432, 18);
					PushFollow(Follow._infix_expr_in_cmp_expr3662);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, b, 108
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 432:30: -> ^( Expr_Bin '>=' $cmp_expr $b)
					{
						DebugLocation(432, 33);
						// SugarCpp.g:432:33: ^( Expr_Bin '>=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(432, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(432, 44);
						adaptor.AddChild(root_1, stream_108.NextNode());
						DebugLocation(432, 50);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(432, 60);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 53);
			LeaveRule("cmp_expr", 53);
			LeaveRule_cmp_expr();
		}
		DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:435:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 54);
		TraceIn("infix_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func293 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(435, 1);
		try
		{
			// SugarCpp.g:436:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:436:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(436, 4);
			// SugarCpp.g:436:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:436:5: a= shift_expr
			{
			DebugLocation(436, 6);
			PushFollow(Follow._shift_expr_in_infix_expr3692);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 436:18: -> $a
			{
				DebugLocation(436, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(436, 25);
			// SugarCpp.g:436:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==118))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:436:27: infix_func b= shift_expr
					{
					DebugLocation(436, 27);
					PushFollow(Follow._infix_func_in_infix_expr3702);
					infix_func293=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func293.Tree);
					DebugLocation(436, 39);
					PushFollow(Follow._shift_expr_in_infix_expr3706);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, b, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 436:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(436, 55);
						// SugarCpp.g:436:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(436, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(436, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(436, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(436, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 54);
			LeaveRule("infix_expr", 54);
			LeaveRule_infix_expr();
		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:439:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 55);
		TraceIn("shift_expr_op", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set294 = default(IToken);

		CommonTree set294_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(439, 27);
		try
		{
			// SugarCpp.g:439:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(439, 14);

			set294=(IToken)input.LT(1);
			if (input.LA(1)==101||input.LA(1)==109)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set294));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 55);
			LeaveRule("shift_expr_op", 55);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(439, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:440:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 56);
		TraceIn("shift_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op295 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(440, 1);
		try
		{
			// SugarCpp.g:441:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:441:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(441, 4);
			// SugarCpp.g:441:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:441:5: a= add_expr
			{
			DebugLocation(441, 6);
			PushFollow(Follow._add_expr_in_shift_expr3749);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 441:16: -> $a
			{
				DebugLocation(441, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(441, 23);
			// SugarCpp.g:441:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==101||LA116_0==109))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:441:24: shift_expr_op b= add_expr
					{
					DebugLocation(441, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr3758);
					shift_expr_op295=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op295.Tree);
					DebugLocation(441, 39);
					PushFollow(Follow._add_expr_in_shift_expr3762);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(441, 52);
						// SugarCpp.g:441:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(441, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(441, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(441, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 56);
			LeaveRule("shift_expr", 56);
			LeaveRule_shift_expr();
		}
		DebugLocation(442, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:444:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 57);
		TraceIn("add_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal296 = default(IToken);
		IToken char_literal297 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal296_tree = default(CommonTree);
		CommonTree char_literal297_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(444, 1);
		try
		{
			// SugarCpp.g:445:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:445:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(445, 4);
			// SugarCpp.g:445:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:445:5: a= mul_expr
			{
			DebugLocation(445, 6);
			PushFollow(Follow._mul_expr_in_add_expr3792);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 445:16: -> $a
			{
				DebugLocation(445, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(445, 23);
			// SugarCpp.g:445:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=3;
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==82))
				{
					alt117 = 1;
				}
				else if ((LA117_0==86))
				{
					alt117 = 2;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:445:25: '+' b= mul_expr
					{
					DebugLocation(445, 25);
					char_literal296=(IToken)Match(input,82,Follow._82_in_add_expr3802);  
					stream_82.Add(char_literal296);

					DebugLocation(445, 30);
					PushFollow(Follow._mul_expr_in_add_expr3806);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 82
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 445:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(445, 43);
						// SugarCpp.g:445:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(445, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(445, 54);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(445, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(445, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:446:10: '-' b= mul_expr
					{
					DebugLocation(446, 10);
					char_literal297=(IToken)Match(input,86,Follow._86_in_add_expr3831);  
					stream_86.Add(char_literal297);

					DebugLocation(446, 15);
					PushFollow(Follow._mul_expr_in_add_expr3835);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 86, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 446:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(446, 28);
						// SugarCpp.g:446:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(446, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(446, 39);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(446, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(446, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 57);
			LeaveRule("add_expr", 57);
			LeaveRule_add_expr();
		}
		DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:450:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 58);
		TraceIn("mul_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal298 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken char_literal300 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal298_tree = default(CommonTree);
		CommonTree char_literal299_tree = default(CommonTree);
		CommonTree char_literal300_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(450, 1);
		try
		{
			// SugarCpp.g:451:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:451:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(451, 4);
			// SugarCpp.g:451:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:451:5: a= selector_expr
			{
			DebugLocation(451, 6);
			PushFollow(Follow._selector_expr_in_mul_expr3873);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 451:21: -> $a
			{
				DebugLocation(451, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(451, 28);
			// SugarCpp.g:451:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=4;
				try { DebugEnterDecision(118, false);
				switch (input.LA(1))
				{
				case 80:
					{
					alt118 = 1;
					}
					break;
				case 93:
					{
					alt118 = 2;
					}
					break;
				case 73:
					{
					alt118 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:451:30: '*' b= selector_expr
					{
					DebugLocation(451, 30);
					char_literal298=(IToken)Match(input,80,Follow._80_in_mul_expr3883);  
					stream_80.Add(char_literal298);

					DebugLocation(451, 35);
					PushFollow(Follow._selector_expr_in_mul_expr3887);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 80
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 451:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(451, 53);
						// SugarCpp.g:451:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(451, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(451, 64);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(451, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(451, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:452:15: '/' b= selector_expr
					{
					DebugLocation(452, 15);
					char_literal299=(IToken)Match(input,93,Follow._93_in_mul_expr3917);  
					stream_93.Add(char_literal299);

					DebugLocation(452, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3921);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 93, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 452:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(452, 38);
						// SugarCpp.g:452:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(452, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(452, 49);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(452, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(452, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:453:15: '%' b= selector_expr
					{
					DebugLocation(453, 15);
					char_literal300=(IToken)Match(input,73,Follow._73_in_mul_expr3951);  
					stream_73.Add(char_literal300);

					DebugLocation(453, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3955);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 73
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 453:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(453, 38);
						// SugarCpp.g:453:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(453, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(453, 49);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(453, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(453, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 58);
			LeaveRule("mul_expr", 58);
			LeaveRule_mul_expr();
		}
		DebugLocation(455, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:457:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 59);
		TraceIn("selector_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal301 = default(IToken);
		IToken string_literal302 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal301_tree = default(CommonTree);
		CommonTree string_literal302_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(457, 1);
		try
		{
			// SugarCpp.g:458:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:458:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(458, 4);
			// SugarCpp.g:458:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:458:5: a= cast_expr
			{
			DebugLocation(458, 6);
			PushFollow(Follow._cast_expr_in_selector_expr3998);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 458:17: -> $a
			{
				DebugLocation(458, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(458, 24);
			// SugarCpp.g:458:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=3;
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==90))
				{
					alt119 = 1;
				}
				else if ((LA119_0==92))
				{
					alt119 = 2;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:458:26: '->*' b= ident
					{
					DebugLocation(458, 26);
					string_literal301=(IToken)Match(input,90,Follow._90_in_selector_expr4008);  
					stream_90.Add(string_literal301);

					DebugLocation(458, 33);
					PushFollow(Follow._ident_in_selector_expr4012);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 90, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 458:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(458, 43);
						// SugarCpp.g:458:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(458, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(458, 57);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(458, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(458, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:459:11: '.*' b= ident
					{
					DebugLocation(459, 11);
					string_literal302=(IToken)Match(input,92,Follow._92_in_selector_expr4038);  
					stream_92.Add(string_literal302);

					DebugLocation(459, 18);
					PushFollow(Follow._ident_in_selector_expr4043);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, b, 92
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 459:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(459, 28);
						// SugarCpp.g:459:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(459, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(459, 42);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(459, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(459, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 59);
			LeaveRule("selector_expr", 59);
			LeaveRule_selector_expr();
		}
		DebugLocation(461, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:463:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 60);
		TraceIn("cast_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal303 = default(IToken);
		IToken char_literal304 = default(IToken);
		IToken char_literal306 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name305 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal303_tree = default(CommonTree);
		CommonTree char_literal304_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(463, 1);
		try
		{
			// SugarCpp.g:464:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:464:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(464, 4);
			// SugarCpp.g:464:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:464:5: a= prefix_expr
			{
			DebugLocation(464, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr4083);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 464:19: -> $a
			{
				DebugLocation(464, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(464, 26);
			// SugarCpp.g:464:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			int LA120_0 = input.LA(1);

			if ((LA120_0==120))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:464:27: 'as' '(' type_name ')'
				{
				DebugLocation(464, 27);
				string_literal303=(IToken)Match(input,120,Follow._120_in_cast_expr4092);  
				stream_120.Add(string_literal303);

				DebugLocation(464, 32);
				char_literal304=(IToken)Match(input,78,Follow._78_in_cast_expr4094);  
				stream_78.Add(char_literal304);

				DebugLocation(464, 36);
				PushFollow(Follow._type_name_in_cast_expr4096);
				type_name305=type_name();
				PopFollow();

				stream_type_name.Add(type_name305.Tree);
				DebugLocation(464, 46);
				char_literal306=(IToken)Match(input,79,Follow._79_in_cast_expr4098);  
				stream_79.Add(char_literal306);



				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 464:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(464, 53);
					// SugarCpp.g:464:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(464, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(464, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(464, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 60);
			LeaveRule("cast_expr", 60);
			LeaveRule_cast_expr();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:467:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 61);
		TraceIn("prefix_expr_op", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set307 = default(IToken);

		CommonTree set307_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(467, 63);
		try
		{
			// SugarCpp.g:467:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(467, 15);

			set307=(IToken)input.LT(1);
			if (input.LA(1)==71||input.LA(1)==76||input.LA(1)==80||(input.LA(1)>=82 && input.LA(1)<=83)||(input.LA(1)>=86 && input.LA(1)<=87)||input.LA(1)==155)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set307));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 61);
			LeaveRule("prefix_expr_op", 61);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(467, 63);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:468:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 62);
		TraceIn("prefix_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal310 = default(IToken);
		IToken char_literal312 = default(IToken);
		IToken char_literal314 = default(IToken);
		IToken char_literal315 = default(IToken);
		IToken char_literal317 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op308 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list316 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr318 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal310_tree = default(CommonTree);
		CommonTree char_literal312_tree = default(CommonTree);
		CommonTree char_literal314_tree = default(CommonTree);
		CommonTree char_literal315_tree = default(CommonTree);
		CommonTree char_literal317_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(468, 1);
		try
		{
			// SugarCpp.g:469:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt123=3;
			try { DebugEnterDecision(123, false);
			switch (input.LA(1))
			{
			case 71:
			case 76:
			case 80:
			case 82:
			case 83:
			case 86:
			case 87:
			case 155:
				{
				alt123 = 1;
				}
				break;
			case 141:
				{
				alt123 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 78:
			case 113:
				{
				alt123 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 123, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:469:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(469, 4);
				// SugarCpp.g:469:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:469:5: prefix_expr_op prefix_expr
				{
				DebugLocation(469, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr4156);
				prefix_expr_op308=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op308.Tree);
				DebugLocation(469, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr4158);
				prefix_expr309=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr309.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 469:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(469, 36);
					// SugarCpp.g:469:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(469, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(469, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(469, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:470:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(470, 4);
				string_literal310=(IToken)Match(input,141,Follow._141_in_prefix_expr4174);  
				stream_141.Add(string_literal310);

				DebugLocation(470, 10);
				PushFollow(Follow._type_name_in_prefix_expr4176);
				type_name311=type_name();
				PopFollow();

				stream_type_name.Add(type_name311.Tree);
				DebugLocation(470, 20);
				// SugarCpp.g:470:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, false);
				int LA122_0 = input.LA(1);

				if ((LA122_0==78))
				{
					alt122 = 1;
				}
				else if ((LA122_0==114))
				{
					alt122 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:470:22: '(' ( expr_list )? ')'
					{
					DebugLocation(470, 22);
					char_literal312=(IToken)Match(input,78,Follow._78_in_prefix_expr4180);  
					stream_78.Add(char_literal312);

					DebugLocation(470, 26);
					// SugarCpp.g:470:26: ( expr_list )?
					int alt121=2;
					try { DebugEnterSubRule(121);
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==IDENT||LA121_0==NUMBER||LA121_0==STRING||LA121_0==71||LA121_0==76||LA121_0==78||LA121_0==80||(LA121_0>=82 && LA121_0<=83)||(LA121_0>=86 && LA121_0<=87)||LA121_0==113||LA121_0==141||LA121_0==155))
					{
						alt121 = 1;
					}
					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:470:26: expr_list
						{
						DebugLocation(470, 26);
						PushFollow(Follow._expr_list_in_prefix_expr4182);
						expr_list313=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list313.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(121); }

					DebugLocation(470, 37);
					char_literal314=(IToken)Match(input,79,Follow._79_in_prefix_expr4185);  
					stream_79.Add(char_literal314);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 470:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(470, 44);
						// SugarCpp.g:470:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(470, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(470, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(470, 70);
						// SugarCpp.g:470:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(470, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:471:10: '[' expr_list ']'
					{
					DebugLocation(471, 10);
					char_literal315=(IToken)Match(input,114,Follow._114_in_prefix_expr4207);  
					stream_114.Add(char_literal315);

					DebugLocation(471, 14);
					PushFollow(Follow._expr_list_in_prefix_expr4209);
					expr_list316=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list316.Tree);
					DebugLocation(471, 24);
					char_literal317=(IToken)Match(input,115,Follow._115_in_prefix_expr4211);  
					stream_115.Add(char_literal317);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 471:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(471, 31);
						// SugarCpp.g:471:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(471, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(471, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(471, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(122); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:472:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(472, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr4227);
				suffix_expr318=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr318.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 62);
			LeaveRule("prefix_expr", 62);
			LeaveRule_prefix_expr();
		}
		DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:475:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 63);
		TraceIn("expr_list", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal320 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr319 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr321 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal320_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(475, 1);
		try
		{
			// SugarCpp.g:476:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:476:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(476, 4);
			PushFollow(Follow._expr_in_expr_list4239);
			expr319=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr319.Tree);
			DebugLocation(476, 9);
			// SugarCpp.g:476:9: ( ',' ! expr )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==85))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:476:10: ',' ! expr
					{
					DebugLocation(476, 13);
					char_literal320=(IToken)Match(input,85,Follow._85_in_expr_list4242); 
					DebugLocation(476, 15);
					PushFollow(Follow._expr_in_expr_list4245);
					expr321=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr321.Tree);

					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 63);
			LeaveRule("expr_list", 63);
			LeaveRule_expr_list();
		}
		DebugLocation(477, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:479:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 64);
		TraceIn("suffix_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal322 = default(IToken);
		IToken string_literal323 = default(IToken);
		IToken char_literal324 = default(IToken);
		IToken string_literal326 = default(IToken);
		IToken char_literal328 = default(IToken);
		IToken char_literal330 = default(IToken);
		IToken char_literal331 = default(IToken);
		IToken char_literal333 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident325 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list329 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list332 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal322_tree = default(CommonTree);
		CommonTree string_literal323_tree = default(CommonTree);
		CommonTree char_literal324_tree = default(CommonTree);
		CommonTree string_literal326_tree = default(CommonTree);
		CommonTree char_literal328_tree = default(CommonTree);
		CommonTree char_literal330_tree = default(CommonTree);
		CommonTree char_literal331_tree = default(CommonTree);
		CommonTree char_literal333_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(479, 1);
		try
		{
			// SugarCpp.g:480:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:480:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			{
			DebugLocation(480, 4);
			// SugarCpp.g:480:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:480:5: a= atom_expr
			{
			DebugLocation(480, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr4261);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 480:17: -> $a
			{
				DebugLocation(480, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(480, 24);
			// SugarCpp.g:480:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=7;
				try { DebugEnterDecision(127, false);
				switch (input.LA(1))
				{
				case 83:
					{
					alt127 = 1;
					}
					break;
				case 87:
					{
					alt127 = 2;
					}
					break;
				case 91:
					{
					alt127 = 3;
					}
					break;
				case 89:
					{
					alt127 = 4;
					}
					break;
				case 78:
					{
					alt127 = 5;
					}
					break;
				case 114:
					{
					alt127 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:480:26: '++'
					{
					DebugLocation(480, 26);
					string_literal322=(IToken)Match(input,83,Follow._83_in_suffix_expr4271);  
					stream_83.Add(string_literal322);



					{
					// AST REWRITE
					// elements: suffix_expr, 83
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 480:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(480, 34);
						// SugarCpp.g:480:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(480, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(480, 48);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(480, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:481:14: '--'
					{
					DebugLocation(481, 14);
					string_literal323=(IToken)Match(input,87,Follow._87_in_suffix_expr4297);  
					stream_87.Add(string_literal323);



					{
					// AST REWRITE
					// elements: 87, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 481:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(481, 22);
						// SugarCpp.g:481:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(481, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(481, 36);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(481, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:482:11: '.' ident
					{
					DebugLocation(482, 11);
					char_literal324=(IToken)Match(input,91,Follow._91_in_suffix_expr4320);  
					stream_91.Add(char_literal324);

					DebugLocation(482, 15);
					PushFollow(Follow._ident_in_suffix_expr4322);
					ident325=ident();
					PopFollow();

					stream_ident.Add(ident325.Tree);


					{
					// AST REWRITE
					// elements: 91, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 482:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(482, 24);
						// SugarCpp.g:482:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(482, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(482, 38);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(482, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(482, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:483:11: '->' ident
					{
					DebugLocation(483, 11);
					string_literal326=(IToken)Match(input,89,Follow._89_in_suffix_expr4347);  
					stream_89.Add(string_literal326);

					DebugLocation(483, 16);
					PushFollow(Follow._ident_in_suffix_expr4349);
					ident327=ident();
					PopFollow();

					stream_ident.Add(ident327.Tree);


					{
					// AST REWRITE
					// elements: ident, 89, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 483:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(483, 25);
						// SugarCpp.g:483:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(483, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(483, 39);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(483, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(483, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:484:11: '(' ( expr_list )? ')'
					{
					DebugLocation(484, 11);
					char_literal328=(IToken)Match(input,78,Follow._78_in_suffix_expr4374);  
					stream_78.Add(char_literal328);

					DebugLocation(484, 15);
					// SugarCpp.g:484:15: ( expr_list )?
					int alt125=2;
					try { DebugEnterSubRule(125);
					try { DebugEnterDecision(125, false);
					int LA125_0 = input.LA(1);

					if ((LA125_0==IDENT||LA125_0==NUMBER||LA125_0==STRING||LA125_0==71||LA125_0==76||LA125_0==78||LA125_0==80||(LA125_0>=82 && LA125_0<=83)||(LA125_0>=86 && LA125_0<=87)||LA125_0==113||LA125_0==141||LA125_0==155))
					{
						alt125 = 1;
					}
					} finally { DebugExitDecision(125); }
					switch (alt125)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:484:15: expr_list
						{
						DebugLocation(484, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4376);
						expr_list329=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list329.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(125); }

					DebugLocation(484, 26);
					char_literal330=(IToken)Match(input,79,Follow._79_in_suffix_expr4379);  
					stream_79.Add(char_literal330);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 484:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(484, 33);
						// SugarCpp.g:484:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(484, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(484, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(484, 58);
						// SugarCpp.g:484:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(484, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:485:11: '[' ( expr_list )? ']'
					{
					DebugLocation(485, 11);
					char_literal331=(IToken)Match(input,114,Follow._114_in_suffix_expr4403);  
					stream_114.Add(char_literal331);

					DebugLocation(485, 15);
					// SugarCpp.g:485:15: ( expr_list )?
					int alt126=2;
					try { DebugEnterSubRule(126);
					try { DebugEnterDecision(126, false);
					int LA126_0 = input.LA(1);

					if ((LA126_0==IDENT||LA126_0==NUMBER||LA126_0==STRING||LA126_0==71||LA126_0==76||LA126_0==78||LA126_0==80||(LA126_0>=82 && LA126_0<=83)||(LA126_0>=86 && LA126_0<=87)||LA126_0==113||LA126_0==141||LA126_0==155))
					{
						alt126 = 1;
					}
					} finally { DebugExitDecision(126); }
					switch (alt126)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:485:15: expr_list
						{
						DebugLocation(485, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4405);
						expr_list332=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list332.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(126); }

					DebugLocation(485, 26);
					char_literal333=(IToken)Match(input,115,Follow._115_in_suffix_expr4408);  
					stream_115.Add(char_literal333);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 485:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(485, 33);
						// SugarCpp.g:485:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(485, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(485, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(485, 58);
						// SugarCpp.g:485:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(485, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 64);
			LeaveRule("suffix_expr", 64);
			LeaveRule_suffix_expr();
		}
		DebugLocation(488, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:490:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 65);
		TraceIn("atom_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER334 = default(IToken);
		IToken STRING336 = default(IToken);
		IToken char_literal337 = default(IToken);
		IToken char_literal339 = default(IToken);
		IToken char_literal341 = default(IToken);
		IToken char_literal343 = default(IToken);
		IToken char_literal344 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr340 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr342 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER334_tree = default(CommonTree);
		CommonTree STRING336_tree = default(CommonTree);
		CommonTree char_literal337_tree = default(CommonTree);
		CommonTree char_literal339_tree = default(CommonTree);
		CommonTree char_literal341_tree = default(CommonTree);
		CommonTree char_literal343_tree = default(CommonTree);
		CommonTree char_literal344_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(490, 1);
		try
		{
			// SugarCpp.g:491:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt130=5;
			try { DebugEnterDecision(130, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt130 = 1;
				}
				break;
			case IDENT:
				{
				alt130 = 2;
				}
				break;
			case STRING:
				{
				alt130 = 3;
				}
				break;
			case 113:
				{
				alt130 = 4;
				}
				break;
			case 78:
				{
				alt130 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 130, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:491:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(491, 4);
				NUMBER334=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr4454); 
				NUMBER334_tree = (CommonTree)adaptor.Create(NUMBER334);
				adaptor.AddChild(root_0, NUMBER334_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:492:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(492, 4);
				PushFollow(Follow._ident_in_atom_expr4459);
				ident335=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident335.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:493:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(493, 4);
				STRING336=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr4464); 
				STRING336_tree = (CommonTree)adaptor.Create(STRING336);
				adaptor.AddChild(root_0, STRING336_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:494:4: '@' ident
				{
				DebugLocation(494, 4);
				char_literal337=(IToken)Match(input,113,Follow._113_in_atom_expr4469);  
				stream_113.Add(char_literal337);

				DebugLocation(494, 8);
				PushFollow(Follow._ident_in_atom_expr4471);
				ident338=ident();
				PopFollow();

				stream_ident.Add(ident338.Tree);


				{
				// AST REWRITE
				// elements: ident, 113
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 494:14: -> ^( '@' ident )
				{
					DebugLocation(494, 17);
					// SugarCpp.g:494:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(494, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(494, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:495:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(495, 4);
				char_literal339=(IToken)Match(input,78,Follow._78_in_atom_expr4484);  
				stream_78.Add(char_literal339);

				DebugLocation(495, 8);
				PushFollow(Follow._expr_in_atom_expr4486);
				expr340=expr();
				PopFollow();

				stream_expr.Add(expr340.Tree);
				DebugLocation(495, 13);
				// SugarCpp.g:495:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==85))
				{
					alt129 = 1;
				}
				else if ((LA129_0==79))
				{
					alt129 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 129, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:495:15: ( ',' expr )+ ')'
					{
					DebugLocation(495, 15);
					// SugarCpp.g:495:15: ( ',' expr )+
					int cnt128=0;
					try { DebugEnterSubRule(128);
					while (true)
					{
						int alt128=2;
						try { DebugEnterDecision(128, false);
						int LA128_0 = input.LA(1);

						if ((LA128_0==85))
						{
							alt128 = 1;
						}


						} finally { DebugExitDecision(128); }
						switch (alt128)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:495:16: ',' expr
							{
							DebugLocation(495, 16);
							char_literal341=(IToken)Match(input,85,Follow._85_in_atom_expr4491);  
							stream_85.Add(char_literal341);

							DebugLocation(495, 20);
							PushFollow(Follow._expr_in_atom_expr4493);
							expr342=expr();
							PopFollow();

							stream_expr.Add(expr342.Tree);

							}
							break;

						default:
							if (cnt128 >= 1)
								goto loop128;

							EarlyExitException eee128 = new EarlyExitException( 128, input );
							DebugRecognitionException(eee128);
							throw eee128;
						}
						cnt128++;
					}
					loop128:
						;

					} finally { DebugExitSubRule(128); }

					DebugLocation(495, 27);
					char_literal343=(IToken)Match(input,79,Follow._79_in_atom_expr4497);  
					stream_79.Add(char_literal343);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 495:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(495, 34);
						// SugarCpp.g:495:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(495, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(495, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(495, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:496:15: ')'
					{
					DebugLocation(496, 15);
					char_literal344=(IToken)Match(input,79,Follow._79_in_atom_expr4522);  
					stream_79.Add(char_literal344);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 496:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(496, 22);
						// SugarCpp.g:496:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(496, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(496, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(129); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 65);
			LeaveRule("atom_expr", 65);
			LeaveRule_atom_expr();
		}
		DebugLocation(498, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:500:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 66);
		TraceIn("lvalue_item", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal345 = default(IToken);
		IToken string_literal346 = default(IToken);
		IToken char_literal347 = default(IToken);
		IToken string_literal349 = default(IToken);
		IToken char_literal352 = default(IToken);
		IToken char_literal354 = default(IToken);
		IToken char_literal355 = default(IToken);
		IToken char_literal357 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident348 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident350 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter351 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list353 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list356 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal345_tree = default(CommonTree);
		CommonTree string_literal346_tree = default(CommonTree);
		CommonTree char_literal347_tree = default(CommonTree);
		CommonTree string_literal349_tree = default(CommonTree);
		CommonTree char_literal352_tree = default(CommonTree);
		CommonTree char_literal354_tree = default(CommonTree);
		CommonTree char_literal355_tree = default(CommonTree);
		CommonTree char_literal357_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(500, 1);
		try
		{
			// SugarCpp.g:501:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:501:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(501, 4);
			// SugarCpp.g:501:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:501:5: a= lvalue_atom
			{
			DebugLocation(501, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item4552);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 501:19: -> $a
			{
				DebugLocation(501, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(501, 26);
			// SugarCpp.g:501:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=7;
				try { DebugEnterDecision(134, false);
				switch (input.LA(1))
				{
				case 83:
					{
					alt134 = 1;
					}
					break;
				case 87:
					{
					alt134 = 2;
					}
					break;
				case 91:
					{
					alt134 = 3;
					}
					break;
				case 89:
					{
					alt134 = 4;
					}
					break;
				case 78:
				case 99:
					{
					alt134 = 5;
					}
					break;
				case 114:
					{
					alt134 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:501:28: '++'
					{
					DebugLocation(501, 28);
					string_literal345=(IToken)Match(input,83,Follow._83_in_lvalue_item4562);  
					stream_83.Add(string_literal345);



					{
					// AST REWRITE
					// elements: lvalue_item, 83
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 501:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(501, 36);
						// SugarCpp.g:501:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(501, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(501, 50);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(501, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:502:16: '--'
					{
					DebugLocation(502, 16);
					string_literal346=(IToken)Match(input,87,Follow._87_in_lvalue_item4590);  
					stream_87.Add(string_literal346);



					{
					// AST REWRITE
					// elements: 87, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 502:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(502, 24);
						// SugarCpp.g:502:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(502, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(502, 38);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(502, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:503:13: '.' ident
					{
					DebugLocation(503, 13);
					char_literal347=(IToken)Match(input,91,Follow._91_in_lvalue_item4615);  
					stream_91.Add(char_literal347);

					DebugLocation(503, 17);
					PushFollow(Follow._ident_in_lvalue_item4617);
					ident348=ident();
					PopFollow();

					stream_ident.Add(ident348.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_item, 91
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 503:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(503, 26);
						// SugarCpp.g:503:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(503, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(503, 40);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(503, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(503, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:504:13: '->' ident
					{
					DebugLocation(504, 13);
					string_literal349=(IToken)Match(input,89,Follow._89_in_lvalue_item4644);  
					stream_89.Add(string_literal349);

					DebugLocation(504, 18);
					PushFollow(Follow._ident_in_lvalue_item4646);
					ident350=ident();
					PopFollow();

					stream_ident.Add(ident350.Tree);


					{
					// AST REWRITE
					// elements: 89, ident, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 504:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(504, 27);
						// SugarCpp.g:504:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(504, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(504, 41);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(504, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(504, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:505:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(505, 13);
					// SugarCpp.g:505:13: ( generic_parameter )?
					int alt131=2;
					try { DebugEnterSubRule(131);
					try { DebugEnterDecision(131, false);
					int LA131_0 = input.LA(1);

					if ((LA131_0==99))
					{
						alt131 = 1;
					}
					} finally { DebugExitDecision(131); }
					switch (alt131)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:505:13: generic_parameter
						{
						DebugLocation(505, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item4673);
						generic_parameter351=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter351.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(131); }

					DebugLocation(505, 32);
					char_literal352=(IToken)Match(input,78,Follow._78_in_lvalue_item4676);  
					stream_78.Add(char_literal352);

					DebugLocation(505, 36);
					// SugarCpp.g:505:36: ( expr_list )?
					int alt132=2;
					try { DebugEnterSubRule(132);
					try { DebugEnterDecision(132, false);
					int LA132_0 = input.LA(1);

					if ((LA132_0==IDENT||LA132_0==NUMBER||LA132_0==STRING||LA132_0==71||LA132_0==76||LA132_0==78||LA132_0==80||(LA132_0>=82 && LA132_0<=83)||(LA132_0>=86 && LA132_0<=87)||LA132_0==113||LA132_0==141||LA132_0==155))
					{
						alt132 = 1;
					}
					} finally { DebugExitDecision(132); }
					switch (alt132)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:505:36: expr_list
						{
						DebugLocation(505, 36);
						PushFollow(Follow._expr_list_in_lvalue_item4678);
						expr_list353=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list353.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(132); }

					DebugLocation(505, 47);
					char_literal354=(IToken)Match(input,79,Follow._79_in_lvalue_item4681);  
					stream_79.Add(char_literal354);



					{
					// AST REWRITE
					// elements: expr_list, generic_parameter, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 505:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(505, 54);
						// SugarCpp.g:505:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(505, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(505, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(505, 79);
						// SugarCpp.g:505:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(505, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(505, 98);
						// SugarCpp.g:505:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(505, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:506:13: '[' ( expr_list )? ']'
					{
					DebugLocation(506, 13);
					char_literal355=(IToken)Match(input,114,Follow._114_in_lvalue_item4710);  
					stream_114.Add(char_literal355);

					DebugLocation(506, 17);
					// SugarCpp.g:506:17: ( expr_list )?
					int alt133=2;
					try { DebugEnterSubRule(133);
					try { DebugEnterDecision(133, false);
					int LA133_0 = input.LA(1);

					if ((LA133_0==IDENT||LA133_0==NUMBER||LA133_0==STRING||LA133_0==71||LA133_0==76||LA133_0==78||LA133_0==80||(LA133_0>=82 && LA133_0<=83)||(LA133_0>=86 && LA133_0<=87)||LA133_0==113||LA133_0==141||LA133_0==155))
					{
						alt133 = 1;
					}
					} finally { DebugExitDecision(133); }
					switch (alt133)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:506:17: expr_list
						{
						DebugLocation(506, 17);
						PushFollow(Follow._expr_list_in_lvalue_item4712);
						expr_list356=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list356.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(133); }

					DebugLocation(506, 28);
					char_literal357=(IToken)Match(input,115,Follow._115_in_lvalue_item4715);  
					stream_115.Add(char_literal357);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 506:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(506, 35);
						// SugarCpp.g:506:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(506, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(506, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(506, 60);
						// SugarCpp.g:506:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(506, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 66);
			LeaveRule("lvalue_item", 66);
			LeaveRule_lvalue_item();
		}
		DebugLocation(508, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:510:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 67);
		TraceIn("lvalue_atom", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal359 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident360 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal359_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(510, 1);
		try
		{
			// SugarCpp.g:511:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt135=2;
			try { DebugEnterDecision(135, false);
			int LA135_0 = input.LA(1);

			if ((LA135_0==IDENT))
			{
				alt135 = 1;
			}
			else if ((LA135_0==113))
			{
				alt135 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 135, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:511:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(511, 4);
				PushFollow(Follow._ident_in_lvalue_atom4754);
				ident358=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident358.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:512:4: '@' ident
				{
				DebugLocation(512, 4);
				char_literal359=(IToken)Match(input,113,Follow._113_in_lvalue_atom4759);  
				stream_113.Add(char_literal359);

				DebugLocation(512, 8);
				PushFollow(Follow._ident_in_lvalue_atom4761);
				ident360=ident();
				PopFollow();

				stream_ident.Add(ident360.Tree);


				{
				// AST REWRITE
				// elements: ident, 113
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 512:14: -> ^( '@' ident )
				{
					DebugLocation(512, 17);
					// SugarCpp.g:512:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(512, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(512, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 67);
			LeaveRule("lvalue_atom", 67);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:515:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 68);
		TraceIn("lvalue", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal361 = default(IToken);
		IToken char_literal363 = default(IToken);
		IToken char_literal365 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item362 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item364 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item366 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal361_tree = default(CommonTree);
		CommonTree char_literal363_tree = default(CommonTree);
		CommonTree char_literal365_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(515, 1);
		try
		{
			// SugarCpp.g:516:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt137=2;
			try { DebugEnterDecision(137, false);
			int LA137_0 = input.LA(1);

			if ((LA137_0==78))
			{
				alt137 = 1;
			}
			else if ((LA137_0==IDENT||LA137_0==113))
			{
				alt137 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 137, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:516:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(516, 4);
				char_literal361=(IToken)Match(input,78,Follow._78_in_lvalue4780);  
				stream_78.Add(char_literal361);

				DebugLocation(516, 8);
				PushFollow(Follow._lvalue_item_in_lvalue4782);
				lvalue_item362=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item362.Tree);
				DebugLocation(516, 20);
				// SugarCpp.g:516:20: ( ',' lvalue_item )+
				int cnt136=0;
				try { DebugEnterSubRule(136);
				while (true)
				{
					int alt136=2;
					try { DebugEnterDecision(136, false);
					int LA136_0 = input.LA(1);

					if ((LA136_0==85))
					{
						alt136 = 1;
					}


					} finally { DebugExitDecision(136); }
					switch (alt136)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:516:21: ',' lvalue_item
						{
						DebugLocation(516, 21);
						char_literal363=(IToken)Match(input,85,Follow._85_in_lvalue4785);  
						stream_85.Add(char_literal363);

						DebugLocation(516, 25);
						PushFollow(Follow._lvalue_item_in_lvalue4787);
						lvalue_item364=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item364.Tree);

						}
						break;

					default:
						if (cnt136 >= 1)
							goto loop136;

						EarlyExitException eee136 = new EarlyExitException( 136, input );
						DebugRecognitionException(eee136);
						throw eee136;
					}
					cnt136++;
				}
				loop136:
					;

				} finally { DebugExitSubRule(136); }

				DebugLocation(516, 39);
				char_literal365=(IToken)Match(input,79,Follow._79_in_lvalue4791);  
				stream_79.Add(char_literal365);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 516:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(516, 46);
					// SugarCpp.g:516:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(516, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(516, 60);
					// SugarCpp.g:516:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(516, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:517:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(517, 4);
				PushFollow(Follow._lvalue_item_in_lvalue4805);
				lvalue_item366=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item366.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 68);
			LeaveRule("lvalue", 68);
			LeaveRule_lvalue();
		}
		DebugLocation(518, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:520:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 69);
		TraceIn("ident", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT367 = default(IToken);
		IToken string_literal368 = default(IToken);
		IToken IDENT369 = default(IToken);

		CommonTree IDENT367_tree = default(CommonTree);
		CommonTree string_literal368_tree = default(CommonTree);
		CommonTree IDENT369_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(520, 1);
		try
		{
			// SugarCpp.g:521:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:521:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(521, 4);
			IDENT367=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4816); 
			IDENT367_tree = (CommonTree)adaptor.Create(IDENT367);
			adaptor.AddChild(root_0, IDENT367_tree);
			DebugLocation(521, 10);
			// SugarCpp.g:521:10: ( '::' IDENT )*
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				int LA138_0 = input.LA(1);

				if ((LA138_0==96))
				{
					alt138 = 1;
				}


				} finally { DebugExitDecision(138); }
				switch ( alt138 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:521:11: '::' IDENT
					{
					DebugLocation(521, 11);
					string_literal368=(IToken)Match(input,96,Follow._96_in_ident4819); 
					string_literal368_tree = (CommonTree)adaptor.Create(string_literal368);
					adaptor.AddChild(root_0, string_literal368_tree);
					DebugLocation(521, 16);
					IDENT369=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4821); 
					IDENT369_tree = (CommonTree)adaptor.Create(IDENT369);
					adaptor.AddChild(root_0, IDENT369_tree);

					}
					break;

				default:
					goto loop138;
				}
			}

			loop138:
				;

			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 69);
			LeaveRule("ident", 69);
			LeaveRule_ident();
		}
		DebugLocation(522, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:524:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 70);
		TraceIn("infix_func", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal370 = default(IToken);
		IToken char_literal372 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident371 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal370_tree = default(CommonTree);
		CommonTree char_literal372_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(524, 1);
		try
		{
			// SugarCpp.g:525:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:525:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(525, 7);
			char_literal370=(IToken)Match(input,118,Follow._118_in_infix_func4834); 
			DebugLocation(525, 9);
			PushFollow(Follow._ident_in_infix_func4837);
			ident371=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident371.Tree);
			DebugLocation(525, 18);
			char_literal372=(IToken)Match(input,118,Follow._118_in_infix_func4839); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 70);
			LeaveRule("infix_func", 70);
			LeaveRule_infix_func();
		}
		DebugLocation(526, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA25 dfa25;
	private DFA38 dfa38;
	private DFA53 dfa53;
	private DFA64 dfa64;
	private DFA71 dfa71;
	private DFA99 dfa99;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa25 = new DFA25( this );
		dfa38 = new DFA38( this );
		dfa53 = new DFA53( this );
		dfa64 = new DFA64( this );
		dfa71 = new DFA71( this );
		dfa99 = new DFA99( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x23\x1\xFFFF\x1\x23\x6\xFFFF\x2\x4E\x1\x23\x1\xFFFF\x3\x23\x1\x2E"+
			"\x2\x23\x1\x4E\x3\x4F\x2\x4E\x1\x23\x3\x4F\x1\x23\x1\x55\x5\x23\x1\x55"+
			"\x1\x23\x4\x4F\x1\x4E\xA\x4F\x2\x23\x1\x55\x2\x23\x1\x55\x2\x23\xA\x4F"+
			"\x2\x23\x2\x4F";
		private const string DFA4_maxS =
			"\x1\x9B\x1\x7C\x1\xFFFF\x1\x9B\x6\xFFFF\x2\x73\x1\x23\x1\xFFFF\x1\x23"+
			"\x1\x34\x1\x7C\x1\x2E\x1\x34\x1\x9B\x1\x73\x2\x55\x1\x60\x2\x73\x1\x9B"+
			"\x2\x55\x1\x60\x1\x34\x1\x73\x2\x23\x3\x34\x1\x73\x1\x23\x2\x55\x2\x60"+
			"\x1\x73\x2\x55\x1\x60\x2\x55\x1\x60\x2\x55\x2\x60\x1\x23\x1\x34\x1\x73"+
			"\x1\x23\x1\x34\x1\x73\x2\x23\x1\x60\x2\x55\x2\x60\x2\x55\x3\x60\x2\x23"+
			"\x2\x60";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x4E\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x4\xFFFF\x1\x5\x4\xFFFF"+
				"\x1\x8\x5\xFFFF\x1\x9\x6\xFFFF\x1\x7\x1\x2\x1\x6\x5\xFFFF\x1\x2",
				"\x1\xA\x58\xFFFF\x1\xB",
				"",
				"\x1\x2\x28\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x28\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\xB\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x58\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\xB\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x28\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x28\xFFFF"+
				"\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\xA\xFFFF\x1\x1A\x43\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x4\xFFFF"+
				"\x1\x5\x12\xFFFF\x1\x2\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\xB\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\xB\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\xB\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\xB\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\xB\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\xB\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "180:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x4\xFFFF";
		private const string DFA25_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA25_minS =
			"\x1\x2E\x1\x8\x2\xFFFF";
		private const string DFA25_maxS =
			"\x1\x2E\x1\x9B\x2\xFFFF";
		private const string DFA25_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA25_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x1A\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x43\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x5\xFFFF\x1\x3\x6\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "224:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\x4\xFFFF";
		private const string DFA38_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA38_minS =
			"\x1\x2E\x1\x8\x2\xFFFF";
		private const string DFA38_maxS =
			"\x1\x2E\x1\x9B\x2\xFFFF";
		private const string DFA38_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA38_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x1A\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x43\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x5\xFFFF\x1\x3\x6\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "236:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\xF\xFFFF";
		private const string DFA53_eofS =
			"\xF\xFFFF";
		private const string DFA53_minS =
			"\x1\x23\x1\xFFFF\x1\x23\x1\xFFFF\x3\x23\x1\x4C\x3\x23\x2\x4C\x1\x23\x1"+
			"\x4C";
		private const string DFA53_maxS =
			"\x1\x9B\x1\xFFFF\x1\x9B\x1\xFFFF\x1\x23\x1\x94\x1\x9B\x1\x72\x1\x23\x1"+
			"\x94\x1\x9B\x2\x72\x1\x23\x1\x72";
		private const string DFA53_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA53_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x2\x58\xFFFF\x1\x1\x17\xFFFF\x1\x1\x6\xFFFF\x1\x3",
				"",
				"\x1\x1\x28\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x28\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x47\xFFFF\x1\x1\x10\xFFFF\x1\x1\x17\xFFFF\x1\x1",
				"\x1\x1\x28\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x28\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x58\xFFFF\x1\x1\x17\xFFFF\x1\x1",
				"\x1\x1\x28\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x21\xFFFF\x1\x1"+
				"\x28\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "265:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA64 : DFA
	{
		private const string DFA64_eotS =
			"\x9\xFFFF";
		private const string DFA64_eofS =
			"\x9\xFFFF";
		private const string DFA64_minS =
			"\x1\x23\x1\x2E\x4\xFFFF\x1\x23\x1\xFFFF\x1\x2E";
		private const string DFA64_maxS =
			"\x1\x95\x1\x99\x4\xFFFF\x1\x23\x1\xFFFF\x1\x99";
		private const string DFA64_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA64_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA64_transitionS =
			{
				"\x1\x1\x2A\xFFFF\x1\x5\x22\xFFFF\x1\x5\x1D\xFFFF\x1\x2\x3\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x3",
				"\x1\x5\x1B\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xF\xFFFF\x1\x5\x11\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x1B\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xF\xFFFF\x1\x5\x11\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA64_eot = DFA.UnpackEncodedString(DFA64_eotS);
		private static readonly short[] DFA64_eof = DFA.UnpackEncodedString(DFA64_eofS);
		private static readonly char[] DFA64_min = DFA.UnpackEncodedStringToUnsignedChars(DFA64_minS);
		private static readonly char[] DFA64_max = DFA.UnpackEncodedStringToUnsignedChars(DFA64_maxS);
		private static readonly short[] DFA64_accept = DFA.UnpackEncodedString(DFA64_acceptS);
		private static readonly short[] DFA64_special = DFA.UnpackEncodedString(DFA64_specialS);
		private static readonly short[][] DFA64_transition;

		static DFA64()
		{
			int numStates = DFA64_transitionS.Length;
			DFA64_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA64_transition[i] = DFA.UnpackEncodedString(DFA64_transitionS[i]);
			}
		}

		public DFA64( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 64;
			this.eot = DFA64_eot;
			this.eof = DFA64_eof;
			this.min = DFA64_min;
			this.max = DFA64_max;
			this.accept = DFA64_accept;
			this.special = DFA64_special;
			this.transition = DFA64_transition;
		}

		public override string Description { get { return "289:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\x4\xFFFF";
		private const string DFA71_eofS =
			"\x4\xFFFF";
		private const string DFA71_minS =
			"\x1\x2E\x1\x8\x2\xFFFF";
		private const string DFA71_maxS =
			"\x1\x80\x1\x97\x2\xFFFF";
		private const string DFA71_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA71_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x1\x51\xFFFF\x1\x2",
				"\x1\x3\x1A\xFFFF\x1\x3\xA\xFFFF\x1\x1\x1F\xFFFF\x1\x3\x22\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\xFFFF\x4\x3\x4\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x2\x3\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "316:35: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA99 : DFA
	{
		private const string DFA99_eotS =
			"\xB\xFFFF";
		private const string DFA99_eofS =
			"\xB\xFFFF";
		private const string DFA99_minS =
			"\x2\x23\x1\xFFFF\x1\x48\x1\xFFFF\x2\x23\x2\x48\x1\x23\x1\x48";
		private const string DFA99_maxS =
			"\x2\x9B\x1\xFFFF\x1\x9A\x1\xFFFF\x1\x23\x1\x9B\x2\x9A\x1\x23\x1\x9A";
		private const string DFA99_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA99_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA99_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x12\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x1B\xFFFF\x1\x2\xD\xFFFF\x1\x2",
				"\x1\x3\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x12\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x1\x2\x1B\xFFFF\x1\x2\xD\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xF\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x9\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x12\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x1B\xFFFF\x1\x2\xD\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xF\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x9\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xF\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x9\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xF\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x9\xFFFF\x3\x2"
			};

		private static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
		private static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
		private static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
		private static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
		private static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
		private static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
		private static readonly short[][] DFA99_transition;

		static DFA99()
		{
			int numStates = DFA99_transitionS.Length;
			DFA99_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA99_transition[i] = DFA.UnpackEncodedString(DFA99_transitionS[i]);
			}
		}

		public DFA99( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 99;
			this.eot = DFA99_eot;
			this.eof = DFA99_eof;
			this.min = DFA99_min;
			this.max = DFA99_max;
			this.accept = DFA99_accept;
			this.special = DFA99_special;
			this.transition = DFA99_transition;
		}

		public override string Description { get { return "376:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root490 = new BitSet(new ulong[]{0x400800000000UL,0x1804000000000000UL,0x8381042UL});
		public static readonly BitSet _global_block_in_root493 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block515 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block517 = new BitSet(new ulong[]{0x400800000002UL,0x1804000000000000UL,0x8381042UL});
		public static readonly BitSet _func_def_in_node540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item608 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_attribute_item611 = new BitSet(new ulong[]{0x10800800000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item613 = new BitSet(new ulong[]{0x0UL,0x208000UL});
		public static readonly BitSet _85_in_attribute_item616 = new BitSet(new ulong[]{0x10800800000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item618 = new BitSet(new ulong[]{0x0UL,0x208000UL});
		public static readonly BitSet _79_in_attribute_item622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_attribute_item640 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_attribute_item643 = new BitSet(new ulong[]{0x10800800000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item645 = new BitSet(new ulong[]{0x0UL,0x208000UL});
		public static readonly BitSet _85_in_attribute_item648 = new BitSet(new ulong[]{0x10800800000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item650 = new BitSet(new ulong[]{0x0UL,0x208000UL});
		public static readonly BitSet _79_in_attribute_item654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_attribute679 = new BitSet(new ulong[]{0x800000000UL,0x1000000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute681 = new BitSet(new ulong[]{0x0UL,0x8000000200000UL});
		public static readonly BitSet _85_in_attribute684 = new BitSet(new ulong[]{0x800000000UL,0x1000000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute686 = new BitSet(new ulong[]{0x0UL,0x8000000200000UL});
		public static readonly BitSet _115_in_attribute690 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute692 = new BitSet(new ulong[]{0x400000000002UL,0x4000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc711 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_list_in_global_alloc714 = new BitSet(new ulong[]{0x0UL,0x280000000UL});
		public static readonly BitSet _95_in_global_alloc718 = new BitSet(new ulong[]{0x800000000UL,0x1000000000000000UL,0x100000UL});
		public static readonly BitSet _type_name_in_global_alloc720 = new BitSet(new ulong[]{0x2UL,0x10200004000UL});
		public static readonly BitSet _104_in_global_alloc725 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _97_in_global_alloc729 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_global_alloc732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_global_alloc792 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CDD080UL,0x8002000UL});
		public static readonly BitSet _expr_list_in_global_alloc794 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_global_alloc797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_global_alloc870 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _modify_expr_in_global_alloc873 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_global_alloc876 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _modify_expr_in_global_alloc878 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _stmt_using_in_global_using915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_import_def937 = new BitSet(new ulong[]{0x10400000000002UL});
		public static readonly BitSet _STRING_in_import_def939 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def943 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _INDENT_in_import_def946 = new BitSet(new ulong[]{0x10400000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def948 = new BitSet(new ulong[]{0x10400000000100UL});
		public static readonly BitSet _STRING_in_import_def953 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def955 = new BitSet(new ulong[]{0x10400000000100UL});
		public static readonly BitSet _DEDENT_in_import_def960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def982 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_enum_def985 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_enum_def987 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_enum_def989 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _ident_in_enum_def992 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_enum_def995 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_enum_def997 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000000UL});
		public static readonly BitSet _140_in_namespace_def1030 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_namespace_def1032 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1034 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1037 = new BitSet(new ulong[]{0x400800000100UL,0x1804000000000000UL,0x8381042UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1039 = new BitSet(new ulong[]{0x400800000100UL,0x1804000000000000UL,0x8381042UL});
		public static readonly BitSet _global_block_in_namespace_def1042 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1066 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_class_def1069 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_class_def1071 = new BitSet(new ulong[]{0x400000000002UL,0x880004000UL});
		public static readonly BitSet _generic_parameter_in_class_def1074 = new BitSet(new ulong[]{0x400000000002UL,0x80004000UL});
		public static readonly BitSet _78_in_class_def1079 = new BitSet(new ulong[]{0x800000000UL,0x200000000UL});
		public static readonly BitSet _func_args_in_class_def1081 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_class_def1083 = new BitSet(new ulong[]{0x400000000002UL,0x80000000UL});
		public static readonly BitSet _95_in_class_def1088 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_class_def1090 = new BitSet(new ulong[]{0x400000000002UL,0x200000UL});
		public static readonly BitSet _85_in_class_def1093 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_class_def1095 = new BitSet(new ulong[]{0x400000000002UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_class_def1102 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _INDENT_in_class_def1105 = new BitSet(new ulong[]{0x400800000100UL,0x1804000000000000UL,0x8381042UL});
		public static readonly BitSet _NEWLINE_in_class_def1107 = new BitSet(new ulong[]{0x400800000100UL,0x1804000000000000UL,0x8381042UL});
		public static readonly BitSet _global_block_in_class_def1110 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_type_name_op1153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_type_name_op1157 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_type_name_op1159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_type_name_op1163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_type_name1172 = new BitSet(new ulong[]{0x800000000UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_type_name1175 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_type_name1178 = new BitSet(new ulong[]{0x2UL,0x4000800011000UL});
		public static readonly BitSet _99_in_type_name1181 = new BitSet(new ulong[]{0x800000000UL,0x1000080000000000UL,0x100000UL});
		public static readonly BitSet _type_name_in_type_name1184 = new BitSet(new ulong[]{0x0UL,0x80000200000UL});
		public static readonly BitSet _85_in_type_name1187 = new BitSet(new ulong[]{0x800000000UL,0x1000000000000000UL,0x100000UL});
		public static readonly BitSet _type_name_in_type_name1189 = new BitSet(new ulong[]{0x0UL,0x80000200000UL});
		public static readonly BitSet _107_in_type_name1195 = new BitSet(new ulong[]{0x2UL,0x4000000011000UL});
		public static readonly BitSet _type_name_op_in_type_name1199 = new BitSet(new ulong[]{0x2UL,0x4000000011000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1239 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_generic_parameter_inside1242 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1244 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _99_in_generic_parameter1266 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1268 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_generic_parameter1270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1285 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_func_args1288 = new BitSet(new ulong[]{0x800000000UL,0x200000000UL});
		public static readonly BitSet _func_args_item_in_func_args1290 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _ident_list_in_func_args_item1312 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_func_args_item1314 = new BitSet(new ulong[]{0x800000000UL,0x1000000000000000UL,0x100000UL});
		public static readonly BitSet _type_name_in_func_args_item1316 = new BitSet(new ulong[]{0x2UL,0x10200004000UL});
		public static readonly BitSet _104_in_func_args_item1321 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _97_in_func_args_item1325 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_func_args_item1328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_func_args_item1376 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CDD080UL,0x8002000UL});
		public static readonly BitSet _expr_list_in_func_args_item1378 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_func_args_item1381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_func_args_item1438 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1453 = new BitSet(new ulong[]{0x800000000UL,0x1000000000000000UL,0x8100000UL});
		public static readonly BitSet _type_name_in_func_def1456 = new BitSet(new ulong[]{0x800000000UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_func_def1459 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_func_def1462 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _generic_parameter_in_func_def1464 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_func_def1467 = new BitSet(new ulong[]{0x800000000UL,0x200008000UL});
		public static readonly BitSet _func_args_in_func_def1469 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_func_def1472 = new BitSet(new ulong[]{0x400000000000UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1475 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_func_def1527 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_func_def1529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1570 = new BitSet(new ulong[]{0x400800000100UL,0x2002000000004000UL,0xEC8C3CUL});
		public static readonly BitSet _NEWLINE_in_stmt_block1572 = new BitSet(new ulong[]{0x400800000100UL,0x2002000000004000UL,0xEC8C3CUL});
		public static readonly BitSet _stmt_in_stmt_block1577 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1579 = new BitSet(new ulong[]{0x400800000100UL,0x2002000000004000UL,0xEC8C3CUL});
		public static readonly BitSet _DEDENT_in_stmt_block1584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1648 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800020UL});
		public static readonly BitSet _133_in_stmt_expr1658 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_expr1660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_stmt_expr1689 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_expr1691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item1730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item1735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item1740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item1745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item1750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_stmt_defer1761 = new BitSet(new ulong[]{0x800000000UL,0x2002000000004000UL,0xEC8C3CUL});
		public static readonly BitSet _stmt_in_stmt_defer1763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_stmt_defer1776 = new BitSet(new ulong[]{0x800000000UL,0x2002000000004000UL,0xEC8C3CUL});
		public static readonly BitSet _stmt_in_stmt_defer1778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_typedef1797 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1799 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_stmt_typedef1801 = new BitSet(new ulong[]{0x800000000UL,0x1000000000000000UL,0x100000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_using_item1826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_using1834 = new BitSet(new ulong[]{0x800000002UL,0x0UL,0x1000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1836 = new BitSet(new ulong[]{0x800000002UL,0x0UL,0x1000UL});
		public static readonly BitSet _143_in_stmt_return1857 = new BitSet(new ulong[]{0x10800800000002UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_return1859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_stmt_if1880 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_if1882 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1885 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1888 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x1UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1891 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_stmt_if1894 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_stmt_if1928 = new BitSet(new ulong[]{0x800000000UL,0x2002000000004000UL,0xEC8C3CUL});
		public static readonly BitSet _stmt_in_stmt_if1930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_stmt_while1961 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_while1963 = new BitSet(new ulong[]{0x400000000000UL,0x4000000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while1967 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_stmt_while1994 = new BitSet(new ulong[]{0x800000000UL,0x2002000000004000UL,0xEC8C3CUL});
		public static readonly BitSet _stmt_in_stmt_while1996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_stmt_while2024 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2026 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2029 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_stmt_for2048 = new BitSet(new ulong[]{0x800000000UL,0x5000UL});
		public static readonly BitSet _76_in_stmt_for2052 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_stmt_for2055 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_stmt_for2057 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_for2059 = new BitSet(new ulong[]{0x400000000000UL,0x8000000000000000UL,0x20000UL});
		public static readonly BitSet _145_in_stmt_for2063 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_for2065 = new BitSet(new ulong[]{0x400000000000UL,0x200000000000000UL});
		public static readonly BitSet _121_in_stmt_for2068 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_for2070 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2074 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_stmt_for2130 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_for2132 = new BitSet(new ulong[]{0x400000000000UL,0x200000000000000UL});
		public static readonly BitSet _121_in_stmt_for2135 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_for2137 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2141 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2197 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_stmt_for2237 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_for2239 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_for2241 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_for2243 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_for2245 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_for2247 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_stmt_for2249 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2251 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_stmt_try2284 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2286 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_stmt_try2288 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2290 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_linq_item2315 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_linq_item2317 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_linq_item2319 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_linq_item2321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_linq_item2336 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_linq_item2338 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_linq_item2340 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_linq_item2342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_linq_item2357 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_linq_item2359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _linq_item_in_linq_prefix2379 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x400410UL});
		public static readonly BitSet _linq_item_in_linq_prefix2381 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x400410UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix2384 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x400410UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq2407 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq2409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2430 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_ident_list2433 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_ident_list2435 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2457 = new BitSet(new ulong[]{0x0UL,0x280000000UL});
		public static readonly BitSet _95_in_stmt_alloc2461 = new BitSet(new ulong[]{0x800000000UL,0x1000000000000000UL,0x100000UL});
		public static readonly BitSet _type_name_in_stmt_alloc2463 = new BitSet(new ulong[]{0x2UL,0x10200004000UL});
		public static readonly BitSet _104_in_stmt_alloc2468 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _97_in_stmt_alloc2472 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_alloc2475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_stmt_alloc2523 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CDD080UL,0x8002000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc2525 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_stmt_alloc2528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_stmt_alloc2589 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_stmt_alloc2593 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_stmt_alloc2596 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc2598 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _lvalue_in_stmt_modify2626 = new BitSet(new ulong[]{0x2UL,0x21414041122400UL,0x2000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify2630 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_modify2647 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_lambda_expr2674 = new BitSet(new ulong[]{0x800000000UL,0x200008000UL});
		public static readonly BitSet _func_args_in_lambda_expr2676 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_lambda_expr2679 = new BitSet(new ulong[]{0x0UL,0x40002000000UL});
		public static readonly BitSet _89_in_lambda_expr2683 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_lambda_expr2685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_lambda_expr2725 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_lambda_expr2727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr2747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr2804 = new BitSet(new ulong[]{0x2UL,0x20414241122400UL,0x2000000UL});
		public static readonly BitSet _set_in_modify_expr2808 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _cond_expr_in_modify_expr2853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_modify_expr2862 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _cond_expr_in_modify_expr2865 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item2878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr2890 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_cond_expr2899 = new BitSet(new ulong[]{0x10800800000002UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2905 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_cond_expr2909 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr3016 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4004000UL});
		public static readonly BitSet _154_in_or_expr3026 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _and_expr_in_or_expr3030 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4004000UL});
		public static readonly BitSet _142_in_or_expr3070 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _and_expr_in_or_expr3074 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4004000UL});
		public static readonly BitSet _bit_or_in_and_expr3102 = new BitSet(new ulong[]{0x2UL,0x80000000000800UL});
		public static readonly BitSet _75_in_and_expr3112 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _bit_or_in_and_expr3116 = new BitSet(new ulong[]{0x2UL,0x80000000000800UL});
		public static readonly BitSet _119_in_and_expr3142 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _bit_or_in_and_expr3146 = new BitSet(new ulong[]{0x2UL,0x80000000000800UL});
		public static readonly BitSet _bit_xor_in_bit_or3174 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_bit_or3183 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _bit_xor_in_bit_or3187 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000000UL});
		public static readonly BitSet _bit_and_in_bit_xor3217 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _116_in_bit_xor3226 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _bit_and_in_bit_xor3230 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and3260 = new BitSet(new ulong[]{0x2UL,0x1000UL});
		public static readonly BitSet _76_in_bit_and3269 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and3273 = new BitSet(new ulong[]{0x2UL,0x1000UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3314 = new BitSet(new ulong[]{0x2UL,0x20000000100UL,0x300UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr3326 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_cmp_equ_expr3371 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_cmp_equ_expr3414 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3456 = new BitSet(new ulong[]{0x2UL,0x188800000000UL});
		public static readonly BitSet _99_in_cmp_expr3466 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3470 = new BitSet(new ulong[]{0x800000002UL,0x188800000000UL});
		public static readonly BitSet _ident_in_cmp_expr3476 = new BitSet(new ulong[]{0x800000000UL,0x80000000000UL});
		public static readonly BitSet _107_in_cmp_expr3479 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_cmp_expr3481 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CDD080UL,0x8002000UL});
		public static readonly BitSet _expr_list_in_cmp_expr3483 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_cmp_expr3486 = new BitSet(new ulong[]{0x2UL,0x188800000000UL});
		public static readonly BitSet _103_in_cmp_expr3596 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3600 = new BitSet(new ulong[]{0x2UL,0x188800000000UL});
		public static readonly BitSet _107_in_cmp_expr3627 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3631 = new BitSet(new ulong[]{0x2UL,0x188800000000UL});
		public static readonly BitSet _108_in_cmp_expr3658 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3662 = new BitSet(new ulong[]{0x2UL,0x188800000000UL});
		public static readonly BitSet _shift_expr_in_infix_expr3692 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr3702 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _shift_expr_in_infix_expr3706 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr3749 = new BitSet(new ulong[]{0x2UL,0x202000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr3758 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _add_expr_in_shift_expr3762 = new BitSet(new ulong[]{0x2UL,0x202000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr3792 = new BitSet(new ulong[]{0x2UL,0x440000UL});
		public static readonly BitSet _82_in_add_expr3802 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _mul_expr_in_add_expr3806 = new BitSet(new ulong[]{0x2UL,0x440000UL});
		public static readonly BitSet _86_in_add_expr3831 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _mul_expr_in_add_expr3835 = new BitSet(new ulong[]{0x2UL,0x440000UL});
		public static readonly BitSet _selector_expr_in_mul_expr3873 = new BitSet(new ulong[]{0x2UL,0x20010200UL});
		public static readonly BitSet _80_in_mul_expr3883 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _selector_expr_in_mul_expr3887 = new BitSet(new ulong[]{0x2UL,0x20010200UL});
		public static readonly BitSet _93_in_mul_expr3917 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _selector_expr_in_mul_expr3921 = new BitSet(new ulong[]{0x2UL,0x20010200UL});
		public static readonly BitSet _73_in_mul_expr3951 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _selector_expr_in_mul_expr3955 = new BitSet(new ulong[]{0x2UL,0x20010200UL});
		public static readonly BitSet _cast_expr_in_selector_expr3998 = new BitSet(new ulong[]{0x2UL,0x14000000UL});
		public static readonly BitSet _90_in_selector_expr4008 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_selector_expr4012 = new BitSet(new ulong[]{0x2UL,0x14000000UL});
		public static readonly BitSet _92_in_selector_expr4038 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_selector_expr4043 = new BitSet(new ulong[]{0x2UL,0x14000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr4083 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _120_in_cast_expr4092 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_cast_expr4094 = new BitSet(new ulong[]{0x800000000UL,0x1000000000000000UL,0x100000UL});
		public static readonly BitSet _type_name_in_cast_expr4096 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_cast_expr4098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr4156 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr4158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_prefix_expr4174 = new BitSet(new ulong[]{0x800000000UL,0x1000000000000000UL,0x100000UL});
		public static readonly BitSet _type_name_in_prefix_expr4176 = new BitSet(new ulong[]{0x0UL,0x4000000004000UL});
		public static readonly BitSet _78_in_prefix_expr4180 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CDD080UL,0x8002000UL});
		public static readonly BitSet _expr_list_in_prefix_expr4182 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_prefix_expr4185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_prefix_expr4207 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_list_in_prefix_expr4209 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_prefix_expr4211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr4227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list4239 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_expr_list4242 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_expr_list4245 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr4261 = new BitSet(new ulong[]{0x2UL,0x400000A884000UL});
		public static readonly BitSet _83_in_suffix_expr4271 = new BitSet(new ulong[]{0x2UL,0x400000A884000UL});
		public static readonly BitSet _87_in_suffix_expr4297 = new BitSet(new ulong[]{0x2UL,0x400000A884000UL});
		public static readonly BitSet _91_in_suffix_expr4320 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_suffix_expr4322 = new BitSet(new ulong[]{0x2UL,0x400000A884000UL});
		public static readonly BitSet _89_in_suffix_expr4347 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_suffix_expr4349 = new BitSet(new ulong[]{0x2UL,0x400000A884000UL});
		public static readonly BitSet _78_in_suffix_expr4374 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CDD080UL,0x8002000UL});
		public static readonly BitSet _expr_list_in_suffix_expr4376 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_suffix_expr4379 = new BitSet(new ulong[]{0x2UL,0x400000A884000UL});
		public static readonly BitSet _114_in_suffix_expr4403 = new BitSet(new ulong[]{0x10800800000000UL,0xA000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_list_in_suffix_expr4405 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_suffix_expr4408 = new BitSet(new ulong[]{0x2UL,0x400000A884000UL});
		public static readonly BitSet _NUMBER_in_atom_expr4454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr4459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr4464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_atom_expr4469 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_atom_expr4471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_atom_expr4484 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_atom_expr4486 = new BitSet(new ulong[]{0x0UL,0x208000UL});
		public static readonly BitSet _85_in_atom_expr4491 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_in_atom_expr4493 = new BitSet(new ulong[]{0x0UL,0x208000UL});
		public static readonly BitSet _79_in_atom_expr4497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_atom_expr4522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item4552 = new BitSet(new ulong[]{0x2UL,0x400080A884000UL});
		public static readonly BitSet _83_in_lvalue_item4562 = new BitSet(new ulong[]{0x2UL,0x400080A884000UL});
		public static readonly BitSet _87_in_lvalue_item4590 = new BitSet(new ulong[]{0x2UL,0x400080A884000UL});
		public static readonly BitSet _91_in_lvalue_item4615 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_lvalue_item4617 = new BitSet(new ulong[]{0x2UL,0x400080A884000UL});
		public static readonly BitSet _89_in_lvalue_item4644 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_lvalue_item4646 = new BitSet(new ulong[]{0x2UL,0x400080A884000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item4673 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_lvalue_item4676 = new BitSet(new ulong[]{0x10800800000000UL,0x2000000CDD080UL,0x8002000UL});
		public static readonly BitSet _expr_list_in_lvalue_item4678 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_lvalue_item4681 = new BitSet(new ulong[]{0x2UL,0x400080A884000UL});
		public static readonly BitSet _114_in_lvalue_item4710 = new BitSet(new ulong[]{0x10800800000000UL,0xA000000CD5080UL,0x8002000UL});
		public static readonly BitSet _expr_list_in_lvalue_item4712 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_lvalue_item4715 = new BitSet(new ulong[]{0x2UL,0x400080A884000UL});
		public static readonly BitSet _ident_in_lvalue_atom4754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_lvalue_atom4759 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_lvalue_atom4761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_lvalue4780 = new BitSet(new ulong[]{0x800000000UL,0x2000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4782 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_lvalue4785 = new BitSet(new ulong[]{0x800000000UL,0x2000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4787 = new BitSet(new ulong[]{0x0UL,0x208000UL});
		public static readonly BitSet _79_in_lvalue4791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue4805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident4816 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _96_in_ident4819 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _IDENT_in_ident4821 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _118_in_infix_func4834 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_infix_func4837 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_infix_func4839 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
