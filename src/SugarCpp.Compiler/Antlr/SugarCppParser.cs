//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-04-22 14:35:07

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Cond", "Expr_Dict", "Expr_Dot", "Expr_New", "Expr_Return", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_For", "Stmt_If", "Stmt_While", "'!'", "'!='", "')'", "'*'", "'+'", "'++'", "','", "'-'", "'--'", "'/'", "':'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "']'", "'by'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'new'", "'return'", "'struct'", "'to'", "'while'", "'|'"
	};
	public const int EOF=-1;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Expr_Alloc=7;
	public const int Expr_Bin=8;
	public const int Expr_Block=9;
	public const int Expr_Call=10;
	public const int Expr_Cond=11;
	public const int Expr_Dict=12;
	public const int Expr_Dot=13;
	public const int Expr_New=14;
	public const int Expr_Return=15;
	public const int Func_Def=16;
	public const int IDENT=17;
	public const int INDENT=18;
	public const int INT=19;
	public const int Left_Bracket=20;
	public const int NEWLINE=21;
	public const int Right_Bracket=22;
	public const int Root=23;
	public const int SP=24;
	public const int STRING=25;
	public const int Stmt_For=26;
	public const int Stmt_If=27;
	public const int Stmt_While=28;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:104:8: public root : ( node ( NEWLINE )* )+ EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE2 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE2_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(104, 1);
		try
		{
			// SugarCpp.g:105:2: ( ( node ( NEWLINE )* )+ EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:105:4: ( node ( NEWLINE )* )+ EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(105, 4);
			// SugarCpp.g:105:4: ( node ( NEWLINE )* )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==IDENT||LA2_0==50||LA2_0==53||LA2_0==56))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:105:5: node ( NEWLINE )*
					{
					DebugLocation(105, 5);
					PushFollow(Follow._node_in_root208);
					node1=node();
					PopFollow();

					adaptor.AddChild(root_0, node1.Tree);
					DebugLocation(105, 10);
					// SugarCpp.g:105:10: ( NEWLINE )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_0 = input.LA(1);

						if ((LA1_0==NEWLINE))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:105:10: NEWLINE
							{
							DebugLocation(105, 10);
							NEWLINE2=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root210); 
							NEWLINE2_tree = (CommonTree)adaptor.Create(NEWLINE2);
							adaptor.AddChild(root_0, NEWLINE2_tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(105, 21);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root215); 
			EOF3_tree = (CommonTree)adaptor.Create(EOF3);
			adaptor.AddChild(root_0, EOF3_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:108:1: node : ( imports | func_def | struct | enum );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> imports4 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_def5 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> struct6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum7 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(108, 1);
		try
		{
			// SugarCpp.g:109:2: ( imports | func_def | struct | enum )
			int alt3=4;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case 53:
				{
				alt3 = 1;
				}
				break;
			case IDENT:
				{
				alt3 = 2;
				}
				break;
			case 56:
				{
				alt3 = 3;
				}
				break;
			case 50:
				{
				alt3 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:109:4: imports
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(109, 4);
				PushFollow(Follow._imports_in_node226);
				imports4=imports();
				PopFollow();

				adaptor.AddChild(root_0, imports4.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:110:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(110, 4);
				PushFollow(Follow._func_def_in_node231);
				func_def5=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def5.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:111:4: struct
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(111, 4);
				PushFollow(Follow._struct_in_node236);
				struct6=@struct();
				PopFollow();

				adaptor.AddChild(root_0, struct6.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:112:4: enum
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(112, 4);
				PushFollow(Follow._enum_in_node241);
				enum7=@enum();
				PopFollow();

				adaptor.AddChild(root_0, enum7.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_imports();
	partial void LeaveRule_imports();

	// $ANTLR start "imports"
	// SugarCpp.g:115:1: imports : 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? ;
	[GrammarRule("imports")]
	private AstParserRuleReturnScope<CommonTree, IToken> imports()
	{
		EnterRule_imports();
		EnterRule("imports", 3);
		TraceIn("imports", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal8 = default(IToken);
		IToken STRING9 = default(IToken);
		IToken INDENT10 = default(IToken);
		IToken NEWLINE11 = default(IToken);
		IToken STRING12 = default(IToken);
		IToken NEWLINE13 = default(IToken);
		IToken DEDENT14 = default(IToken);

		CommonTree string_literal8_tree = default(CommonTree);
		CommonTree STRING9_tree = default(CommonTree);
		CommonTree INDENT10_tree = default(CommonTree);
		CommonTree NEWLINE11_tree = default(CommonTree);
		CommonTree STRING12_tree = default(CommonTree);
		CommonTree NEWLINE13_tree = default(CommonTree);
		CommonTree DEDENT14_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(115, 1);
		try
		{
			// SugarCpp.g:116:2: ( 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? )
			DebugEnterAlt(1);
			// SugarCpp.g:116:4: 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(116, 4);
			string_literal8=(IToken)Match(input,53,Follow._53_in_imports252); 
			string_literal8_tree = (CommonTree)adaptor.Create(string_literal8);
			adaptor.AddChild(root_0, string_literal8_tree);
			DebugLocation(116, 13);
			// SugarCpp.g:116:13: ( STRING )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==STRING))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:116:13: STRING
				{
				DebugLocation(116, 13);
				STRING9=(IToken)Match(input,STRING,Follow._STRING_in_imports254); 
				STRING9_tree = (CommonTree)adaptor.Create(STRING9);
				adaptor.AddChild(root_0, STRING9_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(116, 21);
			// SugarCpp.g:116:21: ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==INDENT))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:116:22: INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT
				{
				DebugLocation(116, 22);
				INDENT10=(IToken)Match(input,INDENT,Follow._INDENT_in_imports258); 
				INDENT10_tree = (CommonTree)adaptor.Create(INDENT10);
				adaptor.AddChild(root_0, INDENT10_tree);
				DebugLocation(116, 29);
				// SugarCpp.g:116:29: ( ( NEWLINE )+ STRING )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					try
					{
						alt6 = dfa6.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:116:30: ( NEWLINE )+ STRING
						{
						DebugLocation(116, 30);
						// SugarCpp.g:116:30: ( NEWLINE )+
						int cnt5=0;
						try { DebugEnterSubRule(5);
						while (true)
						{
							int alt5=2;
							try { DebugEnterDecision(5, false);
							int LA5_0 = input.LA(1);

							if ((LA5_0==NEWLINE))
							{
								alt5 = 1;
							}


							} finally { DebugExitDecision(5); }
							switch (alt5)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:116:30: NEWLINE
								{
								DebugLocation(116, 30);
								NEWLINE11=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports261); 
								NEWLINE11_tree = (CommonTree)adaptor.Create(NEWLINE11);
								adaptor.AddChild(root_0, NEWLINE11_tree);

								}
								break;

							default:
								if (cnt5 >= 1)
									goto loop5;

								EarlyExitException eee5 = new EarlyExitException( 5, input );
								DebugRecognitionException(eee5);
								throw eee5;
							}
							cnt5++;
						}
						loop5:
							;

						} finally { DebugExitSubRule(5); }

						DebugLocation(116, 39);
						STRING12=(IToken)Match(input,STRING,Follow._STRING_in_imports264); 
						STRING12_tree = (CommonTree)adaptor.Create(STRING12);
						adaptor.AddChild(root_0, STRING12_tree);

						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(116, 48);
				// SugarCpp.g:116:48: ( NEWLINE )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==NEWLINE))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:116:48: NEWLINE
						{
						DebugLocation(116, 48);
						NEWLINE13=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports268); 
						NEWLINE13_tree = (CommonTree)adaptor.Create(NEWLINE13);
						adaptor.AddChild(root_0, NEWLINE13_tree);

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(116, 57);
				DEDENT14=(IToken)Match(input,DEDENT,Follow._DEDENT_in_imports271); 
				DEDENT14_tree = (CommonTree)adaptor.Create(DEDENT14);
				adaptor.AddChild(root_0, DEDENT14_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("imports", 3);
			LeaveRule("imports", 3);
			LeaveRule_imports();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return retval;

	}
	// $ANTLR end "imports"

	partial void EnterRule_enum();
	partial void LeaveRule_enum();

	// $ANTLR start "enum"
	// SugarCpp.g:119:1: enum : 'enum' IDENT '=' IDENT ( '|' IDENT )* ;
	[GrammarRule("enum")]
	private AstParserRuleReturnScope<CommonTree, IToken> @enum()
	{
		EnterRule_enum();
		EnterRule("enum", 4);
		TraceIn("enum", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal15 = default(IToken);
		IToken IDENT16 = default(IToken);
		IToken char_literal17 = default(IToken);
		IToken IDENT18 = default(IToken);
		IToken char_literal19 = default(IToken);
		IToken IDENT20 = default(IToken);

		CommonTree string_literal15_tree = default(CommonTree);
		CommonTree IDENT16_tree = default(CommonTree);
		CommonTree char_literal17_tree = default(CommonTree);
		CommonTree IDENT18_tree = default(CommonTree);
		CommonTree char_literal19_tree = default(CommonTree);
		CommonTree IDENT20_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enum");
		DebugLocation(119, 1);
		try
		{
			// SugarCpp.g:120:2: ( 'enum' IDENT '=' IDENT ( '|' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:120:4: 'enum' IDENT '=' IDENT ( '|' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(120, 4);
			string_literal15=(IToken)Match(input,50,Follow._50_in_enum285); 
			string_literal15_tree = (CommonTree)adaptor.Create(string_literal15);
			adaptor.AddChild(root_0, string_literal15_tree);
			DebugLocation(120, 11);
			IDENT16=(IToken)Match(input,IDENT,Follow._IDENT_in_enum287); 
			IDENT16_tree = (CommonTree)adaptor.Create(IDENT16);
			adaptor.AddChild(root_0, IDENT16_tree);
			DebugLocation(120, 17);
			char_literal17=(IToken)Match(input,43,Follow._43_in_enum289); 
			char_literal17_tree = (CommonTree)adaptor.Create(char_literal17);
			adaptor.AddChild(root_0, char_literal17_tree);
			DebugLocation(120, 21);
			IDENT18=(IToken)Match(input,IDENT,Follow._IDENT_in_enum291); 
			IDENT18_tree = (CommonTree)adaptor.Create(IDENT18);
			adaptor.AddChild(root_0, IDENT18_tree);
			DebugLocation(120, 27);
			// SugarCpp.g:120:27: ( '|' IDENT )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==59))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:120:28: '|' IDENT
					{
					DebugLocation(120, 28);
					char_literal19=(IToken)Match(input,59,Follow._59_in_enum294); 
					char_literal19_tree = (CommonTree)adaptor.Create(char_literal19);
					adaptor.AddChild(root_0, char_literal19_tree);
					DebugLocation(120, 32);
					IDENT20=(IToken)Match(input,IDENT,Follow._IDENT_in_enum296); 
					IDENT20_tree = (CommonTree)adaptor.Create(IDENT20);
					adaptor.AddChild(root_0, IDENT20_tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum", 4);
			LeaveRule("enum", 4);
			LeaveRule_enum();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "enum"); }
		return retval;

	}
	// $ANTLR end "enum"

	partial void EnterRule_struct();
	partial void LeaveRule_struct();

	// $ANTLR start "struct"
	// SugarCpp.g:123:1: struct : 'struct' IDENT ( INDENT ( ( NEWLINE )+ struct_stmt )+ DEDENT ) ;
	[GrammarRule("struct")]
	private AstParserRuleReturnScope<CommonTree, IToken> @struct()
	{
		EnterRule_struct();
		EnterRule("struct", 5);
		TraceIn("struct", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal21 = default(IToken);
		IToken IDENT22 = default(IToken);
		IToken INDENT23 = default(IToken);
		IToken NEWLINE24 = default(IToken);
		IToken DEDENT26 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> struct_stmt25 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal21_tree = default(CommonTree);
		CommonTree IDENT22_tree = default(CommonTree);
		CommonTree INDENT23_tree = default(CommonTree);
		CommonTree NEWLINE24_tree = default(CommonTree);
		CommonTree DEDENT26_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "struct");
		DebugLocation(123, 1);
		try
		{
			// SugarCpp.g:124:2: ( 'struct' IDENT ( INDENT ( ( NEWLINE )+ struct_stmt )+ DEDENT ) )
			DebugEnterAlt(1);
			// SugarCpp.g:124:4: 'struct' IDENT ( INDENT ( ( NEWLINE )+ struct_stmt )+ DEDENT )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(124, 4);
			string_literal21=(IToken)Match(input,56,Follow._56_in_struct309); 
			string_literal21_tree = (CommonTree)adaptor.Create(string_literal21);
			adaptor.AddChild(root_0, string_literal21_tree);
			DebugLocation(124, 13);
			IDENT22=(IToken)Match(input,IDENT,Follow._IDENT_in_struct311); 
			IDENT22_tree = (CommonTree)adaptor.Create(IDENT22);
			adaptor.AddChild(root_0, IDENT22_tree);
			DebugLocation(124, 19);
			// SugarCpp.g:124:19: ( INDENT ( ( NEWLINE )+ struct_stmt )+ DEDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:124:20: INDENT ( ( NEWLINE )+ struct_stmt )+ DEDENT
			{
			DebugLocation(124, 20);
			INDENT23=(IToken)Match(input,INDENT,Follow._INDENT_in_struct314); 
			INDENT23_tree = (CommonTree)adaptor.Create(INDENT23);
			adaptor.AddChild(root_0, INDENT23_tree);
			DebugLocation(124, 27);
			// SugarCpp.g:124:27: ( ( NEWLINE )+ struct_stmt )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:124:28: ( NEWLINE )+ struct_stmt
					{
					DebugLocation(124, 28);
					// SugarCpp.g:124:28: ( NEWLINE )+
					int cnt10=0;
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==NEWLINE))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch (alt10)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:124:28: NEWLINE
							{
							DebugLocation(124, 28);
							NEWLINE24=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_struct317); 
							NEWLINE24_tree = (CommonTree)adaptor.Create(NEWLINE24);
							adaptor.AddChild(root_0, NEWLINE24_tree);

							}
							break;

						default:
							if (cnt10 >= 1)
								goto loop10;

							EarlyExitException eee10 = new EarlyExitException( 10, input );
							DebugRecognitionException(eee10);
							throw eee10;
						}
						cnt10++;
					}
					loop10:
						;

					} finally { DebugExitSubRule(10); }

					DebugLocation(124, 37);
					PushFollow(Follow._struct_stmt_in_struct320);
					struct_stmt25=struct_stmt();
					PopFollow();

					adaptor.AddChild(root_0, struct_stmt25.Tree);

					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(124, 51);
			DEDENT26=(IToken)Match(input,DEDENT,Follow._DEDENT_in_struct324); 
			DEDENT26_tree = (CommonTree)adaptor.Create(DEDENT26);
			adaptor.AddChild(root_0, DEDENT26_tree);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct", 5);
			LeaveRule("struct", 5);
			LeaveRule_struct();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "struct"); }
		return retval;

	}
	// $ANTLR end "struct"

	partial void EnterRule_struct_stmt();
	partial void LeaveRule_struct_stmt();

	// $ANTLR start "struct_stmt"
	// SugarCpp.g:127:1: struct_stmt : ( func_def | type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) );
	[GrammarRule("struct_stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> struct_stmt()
	{
		EnterRule_struct_stmt();
		EnterRule("struct_stmt", 6);
		TraceIn("struct_stmt", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT29 = default(IToken);
		IToken char_literal30 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_def27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name28 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr31 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT29_tree = default(CommonTree);
		CommonTree char_literal30_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "struct_stmt");
		DebugLocation(127, 1);
		try
		{
			// SugarCpp.g:128:2: ( func_def | type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			try
			{
				alt13 = dfa13.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:128:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(128, 4);
				PushFollow(Follow._func_def_in_struct_stmt336);
				func_def27=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def27.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:129:4: type_name IDENT ( '=' expr )?
				{
				DebugLocation(129, 4);
				PushFollow(Follow._type_name_in_struct_stmt341);
				type_name28=type_name();
				PopFollow();

				stream_type_name.Add(type_name28.Tree);
				DebugLocation(129, 14);
				IDENT29=(IToken)Match(input,IDENT,Follow._IDENT_in_struct_stmt343);  
				stream_IDENT.Add(IDENT29);

				DebugLocation(129, 20);
				// SugarCpp.g:129:20: ( '=' expr )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==43))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:129:21: '=' expr
					{
					DebugLocation(129, 21);
					char_literal30=(IToken)Match(input,43,Follow._43_in_struct_stmt346);  
					stream_43.Add(char_literal30);

					DebugLocation(129, 25);
					PushFollow(Follow._expr_in_struct_stmt348);
					expr31=expr();
					PopFollow();

					stream_expr.Add(expr31.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }



				{
				// AST REWRITE
				// elements: type_name, expr, IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 129:32: -> ^( Expr_Alloc type_name IDENT ( expr )? )
				{
					DebugLocation(129, 35);
					// SugarCpp.g:129:35: ^( Expr_Alloc type_name IDENT ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(129, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(129, 48);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(129, 58);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(129, 64);
					// SugarCpp.g:129:64: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(129, 64);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_stmt", 6);
			LeaveRule("struct_stmt", 6);
			LeaveRule_struct_stmt();
		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_stmt"); }
		return retval;

	}
	// $ANTLR end "struct_stmt"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:132:1: type_name : IDENT ( '[' ']' )* ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 7);
		TraceIn("type_name", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT32 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken char_literal34 = default(IToken);

		CommonTree IDENT32_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(132, 1);
		try
		{
			// SugarCpp.g:133:2: ( IDENT ( '[' ']' )* )
			DebugEnterAlt(1);
			// SugarCpp.g:133:4: IDENT ( '[' ']' )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(133, 4);
			IDENT32=(IToken)Match(input,IDENT,Follow._IDENT_in_type_name374); 
			IDENT32_tree = (CommonTree)adaptor.Create(IDENT32);
			adaptor.AddChild(root_0, IDENT32_tree);
			DebugLocation(133, 10);
			// SugarCpp.g:133:10: ( '[' ']' )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==Expr_Dict))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:133:11: '[' ']'
					{
					DebugLocation(133, 11);
					char_literal33=(IToken)Match(input,Expr_Dict,Follow._Expr_Dict_in_type_name377); 
					char_literal33_tree = (CommonTree)adaptor.Create(char_literal33);
					adaptor.AddChild(root_0, char_literal33_tree);
					DebugLocation(133, 15);
					char_literal34=(IToken)Match(input,47,Follow._47_in_type_name379); 
					char_literal34_tree = (CommonTree)adaptor.Create(char_literal34);
					adaptor.AddChild(root_0, char_literal34_tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 7);
			LeaveRule("type_name", 7);
			LeaveRule_type_name();
		}
		DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:136:1: generic_parameter : IDENT ( ',' ! IDENT )* ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 8);
		TraceIn("generic_parameter", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken IDENT37 = default(IToken);

		CommonTree IDENT35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree IDENT37_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(136, 1);
		try
		{
			// SugarCpp.g:137:2: ( IDENT ( ',' ! IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:137:4: IDENT ( ',' ! IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(137, 4);
			IDENT35=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter392); 
			IDENT35_tree = (CommonTree)adaptor.Create(IDENT35);
			adaptor.AddChild(root_0, IDENT35_tree);
			DebugLocation(137, 10);
			// SugarCpp.g:137:10: ( ',' ! IDENT )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==35))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:137:11: ',' ! IDENT
					{
					DebugLocation(137, 14);
					char_literal36=(IToken)Match(input,35,Follow._35_in_generic_parameter395); 
					DebugLocation(137, 16);
					IDENT37=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter398); 
					IDENT37_tree = (CommonTree)adaptor.Create(IDENT37);
					adaptor.AddChild(root_0, IDENT37_tree);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 8);
			LeaveRule("generic_parameter", 8);
			LeaveRule_generic_parameter();
		}
		DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:140:1: func_args : stmt_alloc ( ',' stmt_alloc IDENT )* ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 9);
		TraceIn("func_args", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal39 = default(IToken);
		IToken IDENT41 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc40 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree IDENT41_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(140, 1);
		try
		{
			// SugarCpp.g:141:2: ( stmt_alloc ( ',' stmt_alloc IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:141:4: stmt_alloc ( ',' stmt_alloc IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(141, 4);
			PushFollow(Follow._stmt_alloc_in_func_args411);
			stmt_alloc38=stmt_alloc();
			PopFollow();

			adaptor.AddChild(root_0, stmt_alloc38.Tree);
			DebugLocation(141, 15);
			// SugarCpp.g:141:15: ( ',' stmt_alloc IDENT )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==35))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:141:16: ',' stmt_alloc IDENT
					{
					DebugLocation(141, 16);
					char_literal39=(IToken)Match(input,35,Follow._35_in_func_args414); 
					char_literal39_tree = (CommonTree)adaptor.Create(char_literal39);
					adaptor.AddChild(root_0, char_literal39_tree);
					DebugLocation(141, 20);
					PushFollow(Follow._stmt_alloc_in_func_args416);
					stmt_alloc40=stmt_alloc();
					PopFollow();

					adaptor.AddChild(root_0, stmt_alloc40.Tree);
					DebugLocation(141, 31);
					IDENT41=(IToken)Match(input,IDENT,Follow._IDENT_in_func_args418); 
					IDENT41_tree = (CommonTree)adaptor.Create(IDENT41);
					adaptor.AddChild(root_0, IDENT41_tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 9);
			LeaveRule("func_args", 9);
			LeaveRule_func_args();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:144:1: func_def : type_name IDENT ( '[' generic_parameter ']' )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 10);
		TraceIn("func_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT43 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken char_literal46 = default(IToken);
		IToken char_literal47 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken char_literal51 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter45 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT43_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(144, 4);
		try
		{
			// SugarCpp.g:145:2: ( type_name IDENT ( '[' generic_parameter ']' )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:145:4: type_name IDENT ( '[' generic_parameter ']' )? '(' ( func_args )? ')' ( stmt_block | '=' expr )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(145, 4);
			PushFollow(Follow._type_name_in_func_def431);
			type_name42=type_name();
			PopFollow();

			adaptor.AddChild(root_0, type_name42.Tree);
			DebugLocation(145, 14);
			IDENT43=(IToken)Match(input,IDENT,Follow._IDENT_in_func_def433); 
			IDENT43_tree = (CommonTree)adaptor.Create(IDENT43);
			adaptor.AddChild(root_0, IDENT43_tree);
			DebugLocation(145, 20);
			// SugarCpp.g:145:20: ( '[' generic_parameter ']' )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==Expr_Dict))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:145:21: '[' generic_parameter ']'
				{
				DebugLocation(145, 21);
				char_literal44=(IToken)Match(input,Expr_Dict,Follow._Expr_Dict_in_func_def436); 
				char_literal44_tree = (CommonTree)adaptor.Create(char_literal44);
				adaptor.AddChild(root_0, char_literal44_tree);
				DebugLocation(145, 25);
				PushFollow(Follow._generic_parameter_in_func_def438);
				generic_parameter45=generic_parameter();
				PopFollow();

				adaptor.AddChild(root_0, generic_parameter45.Tree);
				DebugLocation(145, 43);
				char_literal46=(IToken)Match(input,47,Follow._47_in_func_def440); 
				char_literal46_tree = (CommonTree)adaptor.Create(char_literal46);
				adaptor.AddChild(root_0, char_literal46_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(145, 49);
			char_literal47=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_func_def444); 
			char_literal47_tree = (CommonTree)adaptor.Create(char_literal47);
			adaptor.AddChild(root_0, char_literal47_tree);
			DebugLocation(145, 53);
			// SugarCpp.g:145:53: ( func_args )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==IDENT))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:145:53: func_args
				{
				DebugLocation(145, 53);
				PushFollow(Follow._func_args_in_func_def446);
				func_args48=func_args();
				PopFollow();

				adaptor.AddChild(root_0, func_args48.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(145, 64);
			char_literal49=(IToken)Match(input,31,Follow._31_in_func_def449); 
			char_literal49_tree = (CommonTree)adaptor.Create(char_literal49);
			adaptor.AddChild(root_0, char_literal49_tree);
			DebugLocation(145, 68);
			// SugarCpp.g:145:68: ( stmt_block | '=' expr )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==INDENT))
			{
				alt19 = 1;
			}
			else if ((LA19_0==43))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:145:70: stmt_block
				{
				DebugLocation(145, 70);
				PushFollow(Follow._stmt_block_in_func_def453);
				stmt_block50=stmt_block();
				PopFollow();

				adaptor.AddChild(root_0, stmt_block50.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:145:83: '=' expr
				{
				DebugLocation(145, 83);
				char_literal51=(IToken)Match(input,43,Follow._43_in_func_def457); 
				char_literal51_tree = (CommonTree)adaptor.Create(char_literal51);
				adaptor.AddChild(root_0, char_literal51_tree);
				DebugLocation(145, 87);
				PushFollow(Follow._expr_in_func_def459);
				expr52=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 10);
			LeaveRule("func_def", 10);
			LeaveRule_func_def();
		}
		DebugLocation(146, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:148:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 11);
		TraceIn("stmt_block", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT53 = default(IToken);
		IToken NEWLINE54 = default(IToken);
		IToken NEWLINE56 = default(IToken);
		IToken DEDENT57 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt55 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT53_tree = default(CommonTree);
		CommonTree NEWLINE54_tree = default(CommonTree);
		CommonTree NEWLINE56_tree = default(CommonTree);
		CommonTree DEDENT57_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(148, 1);
		try
		{
			// SugarCpp.g:149:2: ( INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:149:4: INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(149, 4);
			INDENT53=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block475); 
			INDENT53_tree = (CommonTree)adaptor.Create(INDENT53);
			adaptor.AddChild(root_0, INDENT53_tree);
			DebugLocation(149, 11);
			// SugarCpp.g:149:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				try
				{
					alt21 = dfa21.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:149:12: ( NEWLINE )+ stmt
					{
					DebugLocation(149, 12);
					// SugarCpp.g:149:12: ( NEWLINE )+
					int cnt20=0;
					try { DebugEnterSubRule(20);
					while (true)
					{
						int alt20=2;
						try { DebugEnterDecision(20, false);
						int LA20_0 = input.LA(1);

						if ((LA20_0==NEWLINE))
						{
							alt20 = 1;
						}


						} finally { DebugExitDecision(20); }
						switch (alt20)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:149:12: NEWLINE
							{
							DebugLocation(149, 12);
							NEWLINE54=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block478); 
							NEWLINE54_tree = (CommonTree)adaptor.Create(NEWLINE54);
							adaptor.AddChild(root_0, NEWLINE54_tree);

							}
							break;

						default:
							if (cnt20 >= 1)
								goto loop20;

							EarlyExitException eee20 = new EarlyExitException( 20, input );
							DebugRecognitionException(eee20);
							throw eee20;
						}
						cnt20++;
					}
					loop20:
						;

					} finally { DebugExitSubRule(20); }

					DebugLocation(149, 21);
					PushFollow(Follow._stmt_in_stmt_block481);
					stmt55=stmt();
					PopFollow();

					adaptor.AddChild(root_0, stmt55.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }

			DebugLocation(149, 28);
			// SugarCpp.g:149:28: ( NEWLINE )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==NEWLINE))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:149:28: NEWLINE
					{
					DebugLocation(149, 28);
					NEWLINE56=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block485); 
					NEWLINE56_tree = (CommonTree)adaptor.Create(NEWLINE56);
					adaptor.AddChild(root_0, NEWLINE56_tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }

			DebugLocation(149, 37);
			DEDENT57=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block488); 
			DEDENT57_tree = (CommonTree)adaptor.Create(DEDENT57);
			adaptor.AddChild(root_0, DEDENT57_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 11);
			LeaveRule("stmt_block", 11);
			LeaveRule_stmt_block();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:152:1: stmt : ( stmt_if | stmt_while | stmt_for | expr );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 12);
		TraceIn("stmt", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if58 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(152, 1);
		try
		{
			// SugarCpp.g:153:2: ( stmt_if | stmt_while | stmt_for | expr )
			int alt23=4;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case 52:
				{
				alt23 = 1;
				}
				break;
			case 58:
				{
				alt23 = 2;
				}
				break;
			case 51:
				{
				alt23 = 3;
				}
				break;
			case Expr_Call:
			case IDENT:
			case INDENT:
			case INT:
			case STRING:
			case 29:
			case 34:
			case 36:
			case 37:
			case 54:
			case 55:
				{
				alt23 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:153:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(153, 4);
				PushFollow(Follow._stmt_if_in_stmt499);
				stmt_if58=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if58.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:154:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(154, 4);
				PushFollow(Follow._stmt_while_in_stmt504);
				stmt_while59=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while59.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:155:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(155, 4);
				PushFollow(Follow._stmt_for_in_stmt509);
				stmt_for60=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for60.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:156:4: expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(156, 4);
				PushFollow(Follow._expr_in_stmt514);
				expr61=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr61.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 12);
			LeaveRule("stmt", 12);
			LeaveRule_stmt();
		}
		DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:159:1: stmt_alloc : type_name IDENT ( '=' atom_expr )? -> ^( Expr_Alloc type_name IDENT ( atom_expr )? ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 13);
		TraceIn("stmt_alloc", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT63 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> atom_expr65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT63_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(159, 1);
		try
		{
			// SugarCpp.g:160:2: ( type_name IDENT ( '=' atom_expr )? -> ^( Expr_Alloc type_name IDENT ( atom_expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:160:4: type_name IDENT ( '=' atom_expr )?
			{
			DebugLocation(160, 4);
			PushFollow(Follow._type_name_in_stmt_alloc525);
			type_name62=type_name();
			PopFollow();

			stream_type_name.Add(type_name62.Tree);
			DebugLocation(160, 14);
			IDENT63=(IToken)Match(input,IDENT,Follow._IDENT_in_stmt_alloc527);  
			stream_IDENT.Add(IDENT63);

			DebugLocation(160, 20);
			// SugarCpp.g:160:20: ( '=' atom_expr )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==43))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:160:21: '=' atom_expr
				{
				DebugLocation(160, 21);
				char_literal64=(IToken)Match(input,43,Follow._43_in_stmt_alloc530);  
				stream_43.Add(char_literal64);

				DebugLocation(160, 25);
				PushFollow(Follow._atom_expr_in_stmt_alloc532);
				atom_expr65=atom_expr();
				PopFollow();

				stream_atom_expr.Add(atom_expr65.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: IDENT, atom_expr, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 160:37: -> ^( Expr_Alloc type_name IDENT ( atom_expr )? )
			{
				DebugLocation(160, 40);
				// SugarCpp.g:160:40: ^( Expr_Alloc type_name IDENT ( atom_expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(160, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

				DebugLocation(160, 53);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(160, 63);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(160, 69);
				// SugarCpp.g:160:69: ( atom_expr )?
				if (stream_atom_expr.HasNext)
				{
					DebugLocation(160, 69);
					adaptor.AddChild(root_1, stream_atom_expr.NextTree());

				}
				stream_atom_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 13);
			LeaveRule("stmt_alloc", 13);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:163:1: stmt_if : 'if' '(' expr ')' stmt_block ( ( NEWLINE )* 'else' stmt_block )? ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 14);
		TraceIn("stmt_if", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		IToken char_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken NEWLINE71 = default(IToken);
		IToken string_literal72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		CommonTree char_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree NEWLINE71_tree = default(CommonTree);
		CommonTree string_literal72_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(163, 1);
		try
		{
			// SugarCpp.g:164:2: ( 'if' '(' expr ')' stmt_block ( ( NEWLINE )* 'else' stmt_block )? )
			DebugEnterAlt(1);
			// SugarCpp.g:164:4: 'if' '(' expr ')' stmt_block ( ( NEWLINE )* 'else' stmt_block )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(164, 4);
			string_literal66=(IToken)Match(input,52,Follow._52_in_stmt_if558); 
			string_literal66_tree = (CommonTree)adaptor.Create(string_literal66);
			adaptor.AddChild(root_0, string_literal66_tree);
			DebugLocation(164, 9);
			char_literal67=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_stmt_if560); 
			char_literal67_tree = (CommonTree)adaptor.Create(char_literal67);
			adaptor.AddChild(root_0, char_literal67_tree);
			DebugLocation(164, 13);
			PushFollow(Follow._expr_in_stmt_if562);
			expr68=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr68.Tree);
			DebugLocation(164, 18);
			char_literal69=(IToken)Match(input,31,Follow._31_in_stmt_if564); 
			char_literal69_tree = (CommonTree)adaptor.Create(char_literal69);
			adaptor.AddChild(root_0, char_literal69_tree);
			DebugLocation(164, 22);
			PushFollow(Follow._stmt_block_in_stmt_if566);
			stmt_block70=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block70.Tree);
			DebugLocation(164, 33);
			// SugarCpp.g:164:33: ( ( NEWLINE )* 'else' stmt_block )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			try
			{
				alt26 = dfa26.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:164:34: ( NEWLINE )* 'else' stmt_block
				{
				DebugLocation(164, 34);
				// SugarCpp.g:164:34: ( NEWLINE )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:164:34: NEWLINE
						{
						DebugLocation(164, 34);
						NEWLINE71=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if569); 
						NEWLINE71_tree = (CommonTree)adaptor.Create(NEWLINE71);
						adaptor.AddChild(root_0, NEWLINE71_tree);

						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(164, 43);
				string_literal72=(IToken)Match(input,49,Follow._49_in_stmt_if572); 
				string_literal72_tree = (CommonTree)adaptor.Create(string_literal72);
				adaptor.AddChild(root_0, string_literal72_tree);
				DebugLocation(164, 50);
				PushFollow(Follow._stmt_block_in_stmt_if574);
				stmt_block73=stmt_block();
				PopFollow();

				adaptor.AddChild(root_0, stmt_block73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 14);
			LeaveRule("stmt_if", 14);
			LeaveRule_stmt_if();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:167:1: stmt_while : 'while' '(' expr ')' stmt_block ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 15);
		TraceIn("stmt_while", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken char_literal75 = default(IToken);
		IToken char_literal77 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block78 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree char_literal75_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(167, 1);
		try
		{
			// SugarCpp.g:168:2: ( 'while' '(' expr ')' stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:168:4: 'while' '(' expr ')' stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(168, 4);
			string_literal74=(IToken)Match(input,58,Follow._58_in_stmt_while588); 
			string_literal74_tree = (CommonTree)adaptor.Create(string_literal74);
			adaptor.AddChild(root_0, string_literal74_tree);
			DebugLocation(168, 12);
			char_literal75=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_stmt_while590); 
			char_literal75_tree = (CommonTree)adaptor.Create(char_literal75);
			adaptor.AddChild(root_0, char_literal75_tree);
			DebugLocation(168, 16);
			PushFollow(Follow._expr_in_stmt_while592);
			expr76=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr76.Tree);
			DebugLocation(168, 21);
			char_literal77=(IToken)Match(input,31,Follow._31_in_stmt_while594); 
			char_literal77_tree = (CommonTree)adaptor.Create(char_literal77);
			adaptor.AddChild(root_0, char_literal77_tree);
			DebugLocation(168, 25);
			PushFollow(Follow._stmt_block_in_stmt_while596);
			stmt_block78=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block78.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 15);
			LeaveRule("stmt_while", 15);
			LeaveRule_stmt_while();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:171:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'to' expr ( 'by' expr )? ) ')' stmt_block ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 16);
		TraceIn("stmt_for", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken string_literal86 = default(IToken);
		IToken string_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block91 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal79_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree char_literal84_tree = default(CommonTree);
		CommonTree string_literal86_tree = default(CommonTree);
		CommonTree string_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(171, 1);
		try
		{
			// SugarCpp.g:172:2: ( 'for' '(' expr ( ';' expr ';' expr | 'to' expr ( 'by' expr )? ) ')' stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:172:4: 'for' '(' expr ( ';' expr ';' expr | 'to' expr ( 'by' expr )? ) ')' stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(172, 4);
			string_literal79=(IToken)Match(input,51,Follow._51_in_stmt_for607); 
			string_literal79_tree = (CommonTree)adaptor.Create(string_literal79);
			adaptor.AddChild(root_0, string_literal79_tree);
			DebugLocation(172, 10);
			char_literal80=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_stmt_for609); 
			char_literal80_tree = (CommonTree)adaptor.Create(char_literal80);
			adaptor.AddChild(root_0, char_literal80_tree);
			DebugLocation(172, 14);
			PushFollow(Follow._expr_in_stmt_for611);
			expr81=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr81.Tree);
			DebugLocation(172, 19);
			// SugarCpp.g:172:19: ( ';' expr ';' expr | 'to' expr ( 'by' expr )? )
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==40))
			{
				alt28 = 1;
			}
			else if ((LA28_0==57))
			{
				alt28 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:172:20: ';' expr ';' expr
				{
				DebugLocation(172, 20);
				char_literal82=(IToken)Match(input,40,Follow._40_in_stmt_for614); 
				char_literal82_tree = (CommonTree)adaptor.Create(char_literal82);
				adaptor.AddChild(root_0, char_literal82_tree);
				DebugLocation(172, 24);
				PushFollow(Follow._expr_in_stmt_for616);
				expr83=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr83.Tree);
				DebugLocation(172, 29);
				char_literal84=(IToken)Match(input,40,Follow._40_in_stmt_for618); 
				char_literal84_tree = (CommonTree)adaptor.Create(char_literal84);
				adaptor.AddChild(root_0, char_literal84_tree);
				DebugLocation(172, 33);
				PushFollow(Follow._expr_in_stmt_for620);
				expr85=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr85.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:172:40: 'to' expr ( 'by' expr )?
				{
				DebugLocation(172, 40);
				string_literal86=(IToken)Match(input,57,Follow._57_in_stmt_for624); 
				string_literal86_tree = (CommonTree)adaptor.Create(string_literal86);
				adaptor.AddChild(root_0, string_literal86_tree);
				DebugLocation(172, 45);
				PushFollow(Follow._expr_in_stmt_for626);
				expr87=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr87.Tree);
				DebugLocation(172, 50);
				// SugarCpp.g:172:50: ( 'by' expr )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==48))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:172:51: 'by' expr
					{
					DebugLocation(172, 51);
					string_literal88=(IToken)Match(input,48,Follow._48_in_stmt_for629); 
					string_literal88_tree = (CommonTree)adaptor.Create(string_literal88);
					adaptor.AddChild(root_0, string_literal88_tree);
					DebugLocation(172, 56);
					PushFollow(Follow._expr_in_stmt_for631);
					expr89=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr89.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(172, 64);
			char_literal90=(IToken)Match(input,31,Follow._31_in_stmt_for636); 
			char_literal90_tree = (CommonTree)adaptor.Create(char_literal90);
			adaptor.AddChild(root_0, char_literal90_tree);
			DebugLocation(172, 68);
			PushFollow(Follow._stmt_block_in_stmt_for638);
			stmt_block91=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block91.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 16);
			LeaveRule("stmt_for", 16);
			LeaveRule_stmt_for();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:175:1: expr : return_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 17);
		TraceIn("expr", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> return_expr92 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(175, 1);
		try
		{
			// SugarCpp.g:176:2: ( return_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:176:4: return_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(176, 4);
			PushFollow(Follow._return_expr_in_expr649);
			return_expr92=return_expr();
			PopFollow();

			adaptor.AddChild(root_0, return_expr92.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 17);
			LeaveRule("expr", 17);
			LeaveRule_expr();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_return_expr();
	partial void LeaveRule_return_expr();

	// $ANTLR start "return_expr"
	// SugarCpp.g:179:1: return_expr : ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) | alloc_expr );
	[GrammarRule("return_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> return_expr()
	{
		EnterRule_return_expr();
		EnterRule("return_expr", 18);
		TraceIn("return_expr", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal93 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> alloc_expr95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal93_tree = default(CommonTree);
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "return_expr");
		DebugLocation(179, 1);
		try
		{
			// SugarCpp.g:180:2: ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) | alloc_expr )
			int alt30=2;
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==55))
			{
				alt30 = 1;
			}
			else if ((LA30_0==Expr_Call||(LA30_0>=IDENT && LA30_0<=INT)||LA30_0==STRING||LA30_0==29||LA30_0==34||(LA30_0>=36 && LA30_0<=37)||LA30_0==54))
			{
				alt30 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:180:4: 'return' ( expr )?
				{
				DebugLocation(180, 4);
				string_literal93=(IToken)Match(input,55,Follow._55_in_return_expr660);  
				stream_55.Add(string_literal93);

				DebugLocation(180, 13);
				// SugarCpp.g:180:13: ( expr )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				try
				{
					alt29 = dfa29.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:180:13: expr
					{
					DebugLocation(180, 13);
					PushFollow(Follow._expr_in_return_expr662);
					expr94=expr();
					PopFollow();

					stream_expr.Add(expr94.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 180:19: -> ^( Expr_Return ( expr )? )
				{
					DebugLocation(180, 22);
					// SugarCpp.g:180:22: ^( Expr_Return ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(180, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Return, "Expr_Return"), root_1);

					DebugLocation(180, 36);
					// SugarCpp.g:180:36: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(180, 36);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:181:4: alloc_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._alloc_expr_in_return_expr677);
				alloc_expr95=alloc_expr();
				PopFollow();

				adaptor.AddChild(root_0, alloc_expr95.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("return_expr", 18);
			LeaveRule("return_expr", 18);
			LeaveRule_return_expr();
		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "return_expr"); }
		return retval;

	}
	// $ANTLR end "return_expr"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarCpp.g:184:1: alloc_expr : ( type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) | assign_expr );
	[GrammarRule("alloc_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 19);
		TraceIn("alloc_expr", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT97 = default(IToken);
		IToken char_literal98 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assign_expr100 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT97_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(184, 1);
		try
		{
			// SugarCpp.g:185:2: ( type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) | assign_expr )
			int alt32=2;
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				switch (input.LA(2))
				{
				case Expr_Dict:
					{
					int LA32_3 = input.LA(3);

					if ((LA32_3==47))
					{
						alt32 = 1;
					}
					else if ((LA32_3==Expr_Call||(LA32_3>=IDENT && LA32_3<=INT)||LA32_3==STRING||LA32_3==29||LA32_3==34||(LA32_3>=36 && LA32_3<=37)||(LA32_3>=54 && LA32_3<=55)))
					{
						alt32 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 32, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					switch (input.LA(3))
					{
					case EOF:
					case DEDENT:
					case NEWLINE:
					case 31:
					case 35:
					case 40:
					case 43:
					case 47:
					case 48:
					case 50:
					case 53:
					case 56:
					case 57:
						{
						alt32 = 1;
						}
						break;
					case IDENT:
						{
						switch (input.LA(4))
						{
						case Expr_Dict:
							{
							int LA32_7 = input.LA(5);

							if ((LA32_7==47))
							{
								alt32 = 1;
							}
							else if ((LA32_7==IDENT))
							{
								alt32 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 32, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case IDENT:
							{
							alt32 = 1;
							}
							break;
						case Expr_Call:
							{
							alt32 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 32, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case Expr_Dict:
						{
						alt32 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 32, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case DEDENT:
				case Expr_Call:
				case Expr_Cond:
				case Expr_Dot:
				case NEWLINE:
				case 30:
				case 31:
				case 32:
				case 33:
				case 35:
				case 36:
				case 38:
				case 40:
				case 41:
				case 42:
				case 43:
				case 44:
				case 45:
				case 46:
				case 47:
				case 48:
				case 50:
				case 53:
				case 56:
				case 57:
					{
					alt32 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 32, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA32_0==Expr_Call||(LA32_0>=INDENT && LA32_0<=INT)||LA32_0==STRING||LA32_0==29||LA32_0==34||(LA32_0>=36 && LA32_0<=37)||LA32_0==54))
			{
				alt32 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:185:4: type_name IDENT ( '=' expr )?
				{
				DebugLocation(185, 4);
				PushFollow(Follow._type_name_in_alloc_expr688);
				type_name96=type_name();
				PopFollow();

				stream_type_name.Add(type_name96.Tree);
				DebugLocation(185, 14);
				IDENT97=(IToken)Match(input,IDENT,Follow._IDENT_in_alloc_expr690);  
				stream_IDENT.Add(IDENT97);

				DebugLocation(185, 20);
				// SugarCpp.g:185:20: ( '=' expr )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==43))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:185:21: '=' expr
					{
					DebugLocation(185, 21);
					char_literal98=(IToken)Match(input,43,Follow._43_in_alloc_expr693);  
					stream_43.Add(char_literal98);

					DebugLocation(185, 25);
					PushFollow(Follow._expr_in_alloc_expr695);
					expr99=expr();
					PopFollow();

					stream_expr.Add(expr99.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }



				{
				// AST REWRITE
				// elements: IDENT, expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 185:32: -> ^( Expr_Alloc type_name IDENT ( expr )? )
				{
					DebugLocation(185, 35);
					// SugarCpp.g:185:35: ^( Expr_Alloc type_name IDENT ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(185, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(185, 48);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(185, 58);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(185, 64);
					// SugarCpp.g:185:64: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(185, 64);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:186:4: assign_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				PushFollow(Follow._assign_expr_in_alloc_expr715);
				assign_expr100=assign_expr();
				PopFollow();

				adaptor.AddChild(root_0, assign_expr100.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("alloc_expr", 19);
			LeaveRule("alloc_expr", 19);
			LeaveRule_alloc_expr();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return retval;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_assign_expr();
	partial void LeaveRule_assign_expr();

	// $ANTLR start "assign_expr"
	// SugarCpp.g:189:1: assign_expr : cond_expr ( '=' ^ cond_expr )* ;
	[GrammarRule("assign_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> assign_expr()
	{
		EnterRule_assign_expr();
		EnterRule("assign_expr", 20);
		TraceIn("assign_expr", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal102 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr103 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal102_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assign_expr");
		DebugLocation(189, 1);
		try
		{
			// SugarCpp.g:190:2: ( cond_expr ( '=' ^ cond_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:190:4: cond_expr ( '=' ^ cond_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(190, 4);
			PushFollow(Follow._cond_expr_in_assign_expr726);
			cond_expr101=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr101.Tree);
			DebugLocation(190, 14);
			// SugarCpp.g:190:14: ( '=' ^ cond_expr )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==43))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:190:15: '=' ^ cond_expr
					{
					DebugLocation(190, 18);
					char_literal102=(IToken)Match(input,43,Follow._43_in_assign_expr729); 
					char_literal102_tree = (CommonTree)adaptor.Create(char_literal102);
					root_0 = (CommonTree)adaptor.BecomeRoot(char_literal102_tree, root_0);
					DebugLocation(190, 20);
					PushFollow(Follow._cond_expr_in_assign_expr732);
					cond_expr103=cond_expr();
					PopFollow();

					adaptor.AddChild(root_0, cond_expr103.Tree);

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assign_expr", 20);
			LeaveRule("assign_expr", 20);
			LeaveRule_assign_expr();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "assign_expr"); }
		return retval;

	}
	// $ANTLR end "assign_expr"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:194:1: cond_expr : logic_expr ( Expr_Cond ^ logic_expr ':' ! logic_expr )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 21);
		TraceIn("cond_expr", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken Expr_Cond105 = default(IToken);
		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> logic_expr104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> logic_expr106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> logic_expr108 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree Expr_Cond105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(194, 1);
		try
		{
			// SugarCpp.g:195:2: ( logic_expr ( Expr_Cond ^ logic_expr ':' ! logic_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:195:4: logic_expr ( Expr_Cond ^ logic_expr ':' ! logic_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(195, 4);
			PushFollow(Follow._logic_expr_in_cond_expr752);
			logic_expr104=logic_expr();
			PopFollow();

			adaptor.AddChild(root_0, logic_expr104.Tree);
			DebugLocation(195, 15);
			// SugarCpp.g:195:15: ( Expr_Cond ^ logic_expr ':' ! logic_expr )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==Expr_Cond))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:195:16: Expr_Cond ^ logic_expr ':' ! logic_expr
				{
				DebugLocation(195, 25);
				Expr_Cond105=(IToken)Match(input,Expr_Cond,Follow._Expr_Cond_in_cond_expr755); 
				Expr_Cond105_tree = (CommonTree)adaptor.Create(Expr_Cond105);
				root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Cond105_tree, root_0);
				DebugLocation(195, 27);
				PushFollow(Follow._logic_expr_in_cond_expr758);
				logic_expr106=logic_expr();
				PopFollow();

				adaptor.AddChild(root_0, logic_expr106.Tree);
				DebugLocation(195, 41);
				char_literal107=(IToken)Match(input,39,Follow._39_in_cond_expr760); 
				DebugLocation(195, 43);
				PushFollow(Follow._logic_expr_in_cond_expr763);
				logic_expr108=logic_expr();
				PopFollow();

				adaptor.AddChild(root_0, logic_expr108.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 21);
			LeaveRule("cond_expr", 21);
			LeaveRule_cond_expr();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_logic_expr();
	partial void LeaveRule_logic_expr();

	// $ANTLR start "logic_expr"
	// SugarCpp.g:198:1: logic_expr : add_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ add_expr )* ;
	[GrammarRule("logic_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> logic_expr()
	{
		EnterRule_logic_expr();
		EnterRule("logic_expr", 22);
		TraceIn("logic_expr", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set110 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> add_expr109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> add_expr111 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set110_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logic_expr");
		DebugLocation(198, 1);
		try
		{
			// SugarCpp.g:199:2: ( add_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ add_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:199:4: add_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ add_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(199, 4);
			PushFollow(Follow._add_expr_in_logic_expr776);
			add_expr109=add_expr();
			PopFollow();

			adaptor.AddChild(root_0, add_expr109.Tree);
			DebugLocation(199, 13);
			// SugarCpp.g:199:13: ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ add_expr )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==30||(LA35_0>=41 && LA35_0<=42)||(LA35_0>=44 && LA35_0<=46)))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:199:14: ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ add_expr
					{
					DebugLocation(199, 53);

					set110=(IToken)input.LT(1);
					set110=(IToken)input.LT(1);
					if (input.LA(1)==30||(input.LA(1)>=41 && input.LA(1)<=42)||(input.LA(1)>=44 && input.LA(1)<=46))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set110), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(199, 55);
					PushFollow(Follow._add_expr_in_logic_expr804);
					add_expr111=add_expr();
					PopFollow();

					adaptor.AddChild(root_0, add_expr111.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logic_expr", 22);
			LeaveRule("logic_expr", 22);
			LeaveRule_logic_expr();
		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_expr"); }
		return retval;

	}
	// $ANTLR end "logic_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:202:1: add_expr : mul_expr ( ( '+' | '-' ) ^ mul_expr )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 23);
		TraceIn("add_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set113 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> mul_expr112 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> mul_expr114 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set113_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(202, 1);
		try
		{
			// SugarCpp.g:203:2: ( mul_expr ( ( '+' | '-' ) ^ mul_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:203:4: mul_expr ( ( '+' | '-' ) ^ mul_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(203, 4);
			PushFollow(Follow._mul_expr_in_add_expr817);
			mul_expr112=mul_expr();
			PopFollow();

			adaptor.AddChild(root_0, mul_expr112.Tree);
			DebugLocation(203, 13);
			// SugarCpp.g:203:13: ( ( '+' | '-' ) ^ mul_expr )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==33||LA36_0==36))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:203:14: ( '+' | '-' ) ^ mul_expr
					{
					DebugLocation(203, 25);

					set113=(IToken)input.LT(1);
					set113=(IToken)input.LT(1);
					if (input.LA(1)==33||input.LA(1)==36)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set113), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(203, 27);
					PushFollow(Follow._mul_expr_in_add_expr829);
					mul_expr114=mul_expr();
					PopFollow();

					adaptor.AddChild(root_0, mul_expr114.Tree);

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 23);
			LeaveRule("add_expr", 23);
			LeaveRule_add_expr();
		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:206:1: mul_expr : new_expr ( ( '*' | '/' ) ^ new_expr )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 24);
		TraceIn("mul_expr", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set116 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> new_expr115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> new_expr117 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set116_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(206, 1);
		try
		{
			// SugarCpp.g:207:2: ( new_expr ( ( '*' | '/' ) ^ new_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:207:4: new_expr ( ( '*' | '/' ) ^ new_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(207, 4);
			PushFollow(Follow._new_expr_in_mul_expr842);
			new_expr115=new_expr();
			PopFollow();

			adaptor.AddChild(root_0, new_expr115.Tree);
			DebugLocation(207, 13);
			// SugarCpp.g:207:13: ( ( '*' | '/' ) ^ new_expr )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==32||LA37_0==38))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:207:14: ( '*' | '/' ) ^ new_expr
					{
					DebugLocation(207, 25);

					set116=(IToken)input.LT(1);
					set116=(IToken)input.LT(1);
					if (input.LA(1)==32||input.LA(1)==38)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set116), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(207, 27);
					PushFollow(Follow._new_expr_in_mul_expr854);
					new_expr117=new_expr();
					PopFollow();

					adaptor.AddChild(root_0, new_expr117.Tree);

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 24);
			LeaveRule("mul_expr", 24);
			LeaveRule_mul_expr();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarCpp.g:210:1: new_expr : ( 'new' IDENT ( '[' expr ']' )+ -> ^( Expr_New IDENT ( expr )+ ) | prefix_expr );
	[GrammarRule("new_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 25);
		TraceIn("new_expr", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal118 = default(IToken);
		IToken IDENT119 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken char_literal122 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr123 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal118_tree = default(CommonTree);
		CommonTree IDENT119_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_47=new RewriteRuleITokenStream(adaptor,"token 47");
		RewriteRuleITokenStream stream_Expr_Dict=new RewriteRuleITokenStream(adaptor,"token Expr_Dict");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(210, 1);
		try
		{
			// SugarCpp.g:211:2: ( 'new' IDENT ( '[' expr ']' )+ -> ^( Expr_New IDENT ( expr )+ ) | prefix_expr )
			int alt39=2;
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==54))
			{
				alt39 = 1;
			}
			else if ((LA39_0==Expr_Call||(LA39_0>=IDENT && LA39_0<=INT)||LA39_0==STRING||LA39_0==29||LA39_0==34||(LA39_0>=36 && LA39_0<=37)))
			{
				alt39 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:211:4: 'new' IDENT ( '[' expr ']' )+
				{
				DebugLocation(211, 4);
				string_literal118=(IToken)Match(input,54,Follow._54_in_new_expr867);  
				stream_54.Add(string_literal118);

				DebugLocation(211, 10);
				IDENT119=(IToken)Match(input,IDENT,Follow._IDENT_in_new_expr869);  
				stream_IDENT.Add(IDENT119);

				DebugLocation(211, 16);
				// SugarCpp.g:211:16: ( '[' expr ']' )+
				int cnt38=0;
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					int LA38_0 = input.LA(1);

					if ((LA38_0==Expr_Dict))
					{
						alt38 = 1;
					}


					} finally { DebugExitDecision(38); }
					switch (alt38)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:211:17: '[' expr ']'
						{
						DebugLocation(211, 17);
						char_literal120=(IToken)Match(input,Expr_Dict,Follow._Expr_Dict_in_new_expr872);  
						stream_Expr_Dict.Add(char_literal120);

						DebugLocation(211, 21);
						PushFollow(Follow._expr_in_new_expr874);
						expr121=expr();
						PopFollow();

						stream_expr.Add(expr121.Tree);
						DebugLocation(211, 26);
						char_literal122=(IToken)Match(input,47,Follow._47_in_new_expr876);  
						stream_47.Add(char_literal122);


						}
						break;

					default:
						if (cnt38 >= 1)
							goto loop38;

						EarlyExitException eee38 = new EarlyExitException( 38, input );
						DebugRecognitionException(eee38);
						throw eee38;
					}
					cnt38++;
				}
				loop38:
					;

				} finally { DebugExitSubRule(38); }



				{
				// AST REWRITE
				// elements: expr, IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 211:32: -> ^( Expr_New IDENT ( expr )+ )
				{
					DebugLocation(211, 35);
					// SugarCpp.g:211:35: ^( Expr_New IDENT ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(211, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New, "Expr_New"), root_1);

					DebugLocation(211, 46);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(211, 52);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(211, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:212:4: prefix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(212, 4);
				PushFollow(Follow._prefix_expr_in_new_expr894);
				prefix_expr123=prefix_expr();
				PopFollow();

				adaptor.AddChild(root_0, prefix_expr123.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("new_expr", 25);
			LeaveRule("new_expr", 25);
			LeaveRule_new_expr();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return retval;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:215:1: prefix_expr : ( ( '!' | '++' | '--' | '-' ) ^)* call_expr ;
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 26);
		TraceIn("prefix_expr", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set124 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> call_expr125 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set124_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(215, 1);
		try
		{
			// SugarCpp.g:216:2: ( ( ( '!' | '++' | '--' | '-' ) ^)* call_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:216:4: ( ( '!' | '++' | '--' | '-' ) ^)* call_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(216, 4);
			// SugarCpp.g:216:4: ( ( '!' | '++' | '--' | '-' ) ^)*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==29||LA40_0==34||(LA40_0>=36 && LA40_0<=37)))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:216:5: ( '!' | '++' | '--' | '-' ) ^
					{
					DebugLocation(216, 30);

					set124=(IToken)input.LT(1);
					set124=(IToken)input.LT(1);
					if (input.LA(1)==29||input.LA(1)==34||(input.LA(1)>=36 && input.LA(1)<=37))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set124), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }

			DebugLocation(216, 34);
			PushFollow(Follow._call_expr_in_prefix_expr925);
			call_expr125=call_expr();
			PopFollow();

			adaptor.AddChild(root_0, call_expr125.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 26);
			LeaveRule("prefix_expr", 26);
			LeaveRule_prefix_expr();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_args_list();
	partial void LeaveRule_args_list();

	// $ANTLR start "args_list"
	// SugarCpp.g:222:1: args_list : ( expr )? ( ',' expr )* -> ( expr )* ;
	[GrammarRule("args_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> args_list()
	{
		EnterRule_args_list();
		EnterRule("args_list", 27);
		TraceIn("args_list", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal127 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr128 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal127_tree = default(CommonTree);
		RewriteRuleITokenStream stream_35=new RewriteRuleITokenStream(adaptor,"token 35");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "args_list");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( ( expr )? ( ',' expr )* -> ( expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:223:4: ( expr )? ( ',' expr )*
			{
			DebugLocation(223, 4);
			// SugarCpp.g:223:4: ( expr )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==Expr_Call||(LA41_0>=IDENT && LA41_0<=INT)||LA41_0==STRING||LA41_0==29||LA41_0==34||(LA41_0>=36 && LA41_0<=37)||(LA41_0>=54 && LA41_0<=55)))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:4: expr
				{
				DebugLocation(223, 4);
				PushFollow(Follow._expr_in_args_list952);
				expr126=expr();
				PopFollow();

				stream_expr.Add(expr126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(223, 10);
			// SugarCpp.g:223:10: ( ',' expr )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==35))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:223:11: ',' expr
					{
					DebugLocation(223, 11);
					char_literal127=(IToken)Match(input,35,Follow._35_in_args_list956);  
					stream_35.Add(char_literal127);

					DebugLocation(223, 15);
					PushFollow(Follow._expr_in_args_list958);
					expr128=expr();
					PopFollow();

					stream_expr.Add(expr128.Tree);

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 223:22: -> ( expr )*
			{
				DebugLocation(223, 25);
				// SugarCpp.g:223:25: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(223, 25);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}
				stream_expr.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args_list", 27);
			LeaveRule("args_list", 27);
			LeaveRule_args_list();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "args_list"); }
		return retval;

	}
	// $ANTLR end "args_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarCpp.g:226:1: call_expr : dot_expr ( Expr_Call ^ args_list ')' !| Expr_Dict ^ expr ']' !)* ;
	[GrammarRule("call_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 28);
		TraceIn("call_expr", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken Expr_Call130 = default(IToken);
		IToken char_literal132 = default(IToken);
		IToken Expr_Dict133 = default(IToken);
		IToken char_literal135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> dot_expr129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> args_list131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree Expr_Call130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		CommonTree Expr_Dict133_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(226, 1);
		try
		{
			// SugarCpp.g:227:2: ( dot_expr ( Expr_Call ^ args_list ')' !| Expr_Dict ^ expr ']' !)* )
			DebugEnterAlt(1);
			// SugarCpp.g:227:4: dot_expr ( Expr_Call ^ args_list ')' !| Expr_Dict ^ expr ']' !)*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(227, 4);
			PushFollow(Follow._dot_expr_in_call_expr976);
			dot_expr129=dot_expr();
			PopFollow();

			adaptor.AddChild(root_0, dot_expr129.Tree);
			DebugLocation(227, 13);
			// SugarCpp.g:227:13: ( Expr_Call ^ args_list ')' !| Expr_Dict ^ expr ']' !)*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=3;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==Expr_Call))
				{
					alt43 = 1;
				}
				else if ((LA43_0==Expr_Dict))
				{
					alt43 = 2;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:227:14: Expr_Call ^ args_list ')' !
					{
					DebugLocation(227, 23);
					Expr_Call130=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_call_expr979); 
					Expr_Call130_tree = (CommonTree)adaptor.Create(Expr_Call130);
					root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Call130_tree, root_0);
					DebugLocation(227, 25);
					PushFollow(Follow._args_list_in_call_expr982);
					args_list131=args_list();
					PopFollow();

					adaptor.AddChild(root_0, args_list131.Tree);
					DebugLocation(227, 38);
					char_literal132=(IToken)Match(input,31,Follow._31_in_call_expr984); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:228:8: Expr_Dict ^ expr ']' !
					{
					DebugLocation(228, 17);
					Expr_Dict133=(IToken)Match(input,Expr_Dict,Follow._Expr_Dict_in_call_expr994); 
					Expr_Dict133_tree = (CommonTree)adaptor.Create(Expr_Dict133);
					root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Dict133_tree, root_0);
					DebugLocation(228, 19);
					PushFollow(Follow._expr_in_call_expr997);
					expr134=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr134.Tree);
					DebugLocation(228, 27);
					char_literal135=(IToken)Match(input,47,Follow._47_in_call_expr999); 

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("call_expr", 28);
			LeaveRule("call_expr", 28);
			LeaveRule_call_expr();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return retval;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dot_expr();
	partial void LeaveRule_dot_expr();

	// $ANTLR start "dot_expr"
	// SugarCpp.g:235:1: dot_expr : atom_expr ( Expr_Dot ^ IDENT )* ;
	[GrammarRule("dot_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> dot_expr()
	{
		EnterRule_dot_expr();
		EnterRule("dot_expr", 29);
		TraceIn("dot_expr", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken Expr_Dot137 = default(IToken);
		IToken IDENT138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> atom_expr136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree Expr_Dot137_tree = default(CommonTree);
		CommonTree IDENT138_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dot_expr");
		DebugLocation(235, 1);
		try
		{
			// SugarCpp.g:236:2: ( atom_expr ( Expr_Dot ^ IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:236:4: atom_expr ( Expr_Dot ^ IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(236, 4);
			PushFollow(Follow._atom_expr_in_dot_expr1024);
			atom_expr136=atom_expr();
			PopFollow();

			adaptor.AddChild(root_0, atom_expr136.Tree);
			DebugLocation(236, 14);
			// SugarCpp.g:236:14: ( Expr_Dot ^ IDENT )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==Expr_Dot))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:236:15: Expr_Dot ^ IDENT
					{
					DebugLocation(236, 23);
					Expr_Dot137=(IToken)Match(input,Expr_Dot,Follow._Expr_Dot_in_dot_expr1027); 
					Expr_Dot137_tree = (CommonTree)adaptor.Create(Expr_Dot137);
					root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Dot137_tree, root_0);
					DebugLocation(236, 25);
					IDENT138=(IToken)Match(input,IDENT,Follow._IDENT_in_dot_expr1030); 
					IDENT138_tree = (CommonTree)adaptor.Create(IDENT138);
					adaptor.AddChild(root_0, IDENT138_tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dot_expr", 29);
			LeaveRule("dot_expr", 29);
			LeaveRule_dot_expr();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "dot_expr"); }
		return retval;

	}
	// $ANTLR end "dot_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:239:1: atom_expr : ( INT | IDENT | STRING | '(' ! expr ')' !| block_expr );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 30);
		TraceIn("atom_expr", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INT139 = default(IToken);
		IToken IDENT140 = default(IToken);
		IToken STRING141 = default(IToken);
		IToken char_literal142 = default(IToken);
		IToken char_literal144 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block_expr145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INT139_tree = default(CommonTree);
		CommonTree IDENT140_tree = default(CommonTree);
		CommonTree STRING141_tree = default(CommonTree);
		CommonTree char_literal142_tree = default(CommonTree);
		CommonTree char_literal144_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(239, 1);
		try
		{
			// SugarCpp.g:240:2: ( INT | IDENT | STRING | '(' ! expr ')' !| block_expr )
			int alt45=5;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt45 = 1;
				}
				break;
			case IDENT:
				{
				alt45 = 2;
				}
				break;
			case STRING:
				{
				alt45 = 3;
				}
				break;
			case Expr_Call:
				{
				alt45 = 4;
				}
				break;
			case INDENT:
				{
				alt45 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:240:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(240, 4);
				INT139=(IToken)Match(input,INT,Follow._INT_in_atom_expr1043); 
				INT139_tree = (CommonTree)adaptor.Create(INT139);
				adaptor.AddChild(root_0, INT139_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:241:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(241, 4);
				IDENT140=(IToken)Match(input,IDENT,Follow._IDENT_in_atom_expr1048); 
				IDENT140_tree = (CommonTree)adaptor.Create(IDENT140);
				adaptor.AddChild(root_0, IDENT140_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:242:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(242, 4);
				STRING141=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr1053); 
				STRING141_tree = (CommonTree)adaptor.Create(STRING141);
				adaptor.AddChild(root_0, STRING141_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:243:4: '(' ! expr ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(243, 7);
				char_literal142=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_atom_expr1058); 
				DebugLocation(243, 9);
				PushFollow(Follow._expr_in_atom_expr1061);
				expr143=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr143.Tree);
				DebugLocation(243, 17);
				char_literal144=(IToken)Match(input,31,Follow._31_in_atom_expr1063); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:244:4: block_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(244, 4);
				PushFollow(Follow._block_expr_in_atom_expr1069);
				block_expr145=block_expr();
				PopFollow();

				adaptor.AddChild(root_0, block_expr145.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 30);
			LeaveRule("atom_expr", 30);
			LeaveRule_atom_expr();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_block_expr();
	partial void LeaveRule_block_expr();

	// $ANTLR start "block_expr"
	// SugarCpp.g:247:1: block_expr : INDENT ( ( NEWLINE )+ stmt )* DEDENT ;
	[GrammarRule("block_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> block_expr()
	{
		EnterRule_block_expr();
		EnterRule("block_expr", 31);
		TraceIn("block_expr", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT146 = default(IToken);
		IToken NEWLINE147 = default(IToken);
		IToken DEDENT149 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt148 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT146_tree = default(CommonTree);
		CommonTree NEWLINE147_tree = default(CommonTree);
		CommonTree DEDENT149_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "block_expr");
		DebugLocation(247, 1);
		try
		{
			// SugarCpp.g:248:2: ( INDENT ( ( NEWLINE )+ stmt )* DEDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: INDENT ( ( NEWLINE )+ stmt )* DEDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(248, 4);
			INDENT146=(IToken)Match(input,INDENT,Follow._INDENT_in_block_expr1080); 
			INDENT146_tree = (CommonTree)adaptor.Create(INDENT146);
			adaptor.AddChild(root_0, INDENT146_tree);
			DebugLocation(248, 11);
			// SugarCpp.g:248:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==NEWLINE))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:248:12: ( NEWLINE )+ stmt
					{
					DebugLocation(248, 12);
					// SugarCpp.g:248:12: ( NEWLINE )+
					int cnt46=0;
					try { DebugEnterSubRule(46);
					while (true)
					{
						int alt46=2;
						try { DebugEnterDecision(46, false);
						int LA46_0 = input.LA(1);

						if ((LA46_0==NEWLINE))
						{
							alt46 = 1;
						}


						} finally { DebugExitDecision(46); }
						switch (alt46)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:248:12: NEWLINE
							{
							DebugLocation(248, 12);
							NEWLINE147=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_block_expr1083); 
							NEWLINE147_tree = (CommonTree)adaptor.Create(NEWLINE147);
							adaptor.AddChild(root_0, NEWLINE147_tree);

							}
							break;

						default:
							if (cnt46 >= 1)
								goto loop46;

							EarlyExitException eee46 = new EarlyExitException( 46, input );
							DebugRecognitionException(eee46);
							throw eee46;
						}
						cnt46++;
					}
					loop46:
						;

					} finally { DebugExitSubRule(46); }

					DebugLocation(248, 21);
					PushFollow(Follow._stmt_in_block_expr1086);
					stmt148=stmt();
					PopFollow();

					adaptor.AddChild(root_0, stmt148.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }

			DebugLocation(248, 28);
			DEDENT149=(IToken)Match(input,DEDENT,Follow._DEDENT_in_block_expr1090); 
			DEDENT149_tree = (CommonTree)adaptor.Create(DEDENT149);
			adaptor.AddChild(root_0, DEDENT149_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block_expr", 31);
			LeaveRule("block_expr", 31);
			LeaveRule_block_expr();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "block_expr"); }
		return retval;

	}
	// $ANTLR end "block_expr"
	#endregion Rules


	#region DFA
	private DFA6 dfa6;
	private DFA13 dfa13;
	private DFA21 dfa21;
	private DFA26 dfa26;
	private DFA29 dfa29;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa6 = new DFA6( this );
		dfa13 = new DFA13( this );
		dfa21 = new DFA21( this );
		dfa26 = new DFA26( this );
		dfa29 = new DFA29( this );
	}

	private class DFA6 : DFA
	{
		private const string DFA6_eotS =
			"\x4\xFFFF";
		private const string DFA6_eofS =
			"\x4\xFFFF";
		private const string DFA6_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA6_maxS =
			"\x1\x15\x1\x19\x2\xFFFF";
		private const string DFA6_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA6_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA6_transitionS =
			{
				"\x1\x2\xF\xFFFF\x1\x1",
				"\x1\x2\xF\xFFFF\x1\x1\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA6_eot = DFA.UnpackEncodedString(DFA6_eotS);
		private static readonly short[] DFA6_eof = DFA.UnpackEncodedString(DFA6_eofS);
		private static readonly char[] DFA6_min = DFA.UnpackEncodedStringToUnsignedChars(DFA6_minS);
		private static readonly char[] DFA6_max = DFA.UnpackEncodedStringToUnsignedChars(DFA6_maxS);
		private static readonly short[] DFA6_accept = DFA.UnpackEncodedString(DFA6_acceptS);
		private static readonly short[] DFA6_special = DFA.UnpackEncodedString(DFA6_specialS);
		private static readonly short[][] DFA6_transition;

		static DFA6()
		{
			int numStates = DFA6_transitionS.Length;
			DFA6_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA6_transition[i] = DFA.UnpackEncodedString(DFA6_transitionS[i]);
			}
		}

		public DFA6( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 6;
			this.eot = DFA6_eot;
			this.eof = DFA6_eof;
			this.min = DFA6_min;
			this.max = DFA6_max;
			this.accept = DFA6_accept;
			this.special = DFA6_special;
			this.transition = DFA6_transition;
		}

		public override string Description { get { return "()+ loopback of 116:29: ( ( NEWLINE )+ STRING )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x7\xFFFF";
		private const string DFA13_eofS =
			"\x7\xFFFF";
		private const string DFA13_minS =
			"\x1\x11\x1\xC\x1\x2F\x1\x5\x1\xC\x2\xFFFF";
		private const string DFA13_maxS =
			"\x2\x11\x1\x2F\x1\x2B\x1\x11\x2\xFFFF";
		private const string DFA13_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA13_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x1\x1",
				"\x1\x2\x4\xFFFF\x1\x3",
				"\x1\x4",
				"\x1\x6\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x8\xFFFF\x1\x6\x15\xFFFF\x1\x6",
				"\x1\x2\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "127:1: struct_stmt : ( func_def | type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA21 : DFA
	{
		private const string DFA21_eotS =
			"\x4\xFFFF";
		private const string DFA21_eofS =
			"\x4\xFFFF";
		private const string DFA21_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA21_maxS =
			"\x1\x15\x1\x3A\x2\xFFFF";
		private const string DFA21_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA21_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA21_transitionS =
			{
				"\x1\x2\xF\xFFFF\x1\x1",
				"\x1\x2\x4\xFFFF\x1\x3\x6\xFFFF\x3\x3\x1\xFFFF\x1\x1\x3\xFFFF\x1\x3"+
				"\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x2\x3\xD\xFFFF\x2\x3\x1\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA21_eot = DFA.UnpackEncodedString(DFA21_eotS);
		private static readonly short[] DFA21_eof = DFA.UnpackEncodedString(DFA21_eofS);
		private static readonly char[] DFA21_min = DFA.UnpackEncodedStringToUnsignedChars(DFA21_minS);
		private static readonly char[] DFA21_max = DFA.UnpackEncodedStringToUnsignedChars(DFA21_maxS);
		private static readonly short[] DFA21_accept = DFA.UnpackEncodedString(DFA21_acceptS);
		private static readonly short[] DFA21_special = DFA.UnpackEncodedString(DFA21_specialS);
		private static readonly short[][] DFA21_transition;

		static DFA21()
		{
			int numStates = DFA21_transitionS.Length;
			DFA21_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA21_transition[i] = DFA.UnpackEncodedString(DFA21_transitionS[i]);
			}
		}

		public DFA21( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 21;
			this.eot = DFA21_eot;
			this.eof = DFA21_eof;
			this.min = DFA21_min;
			this.max = DFA21_max;
			this.accept = DFA21_accept;
			this.special = DFA21_special;
			this.transition = DFA21_transition;
		}

		public override string Description { get { return "()* loopback of 149:11: ( ( NEWLINE )+ stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA26 : DFA
	{
		private const string DFA26_eotS =
			"\x4\xFFFF";
		private const string DFA26_eofS =
			"\x4\xFFFF";
		private const string DFA26_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA26_maxS =
			"\x1\x31\x1\x3A\x2\xFFFF";
		private const string DFA26_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA26_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA26_transitionS =
			{
				"\x1\x3\xF\xFFFF\x1\x1\x1B\xFFFF\x1\x2",
				"\x1\x3\x4\xFFFF\x1\x3\x6\xFFFF\x3\x3\x1\xFFFF\x1\x1\x3\xFFFF\x1\x3"+
				"\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x2\x3\xB\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA26_eot = DFA.UnpackEncodedString(DFA26_eotS);
		private static readonly short[] DFA26_eof = DFA.UnpackEncodedString(DFA26_eofS);
		private static readonly char[] DFA26_min = DFA.UnpackEncodedStringToUnsignedChars(DFA26_minS);
		private static readonly char[] DFA26_max = DFA.UnpackEncodedStringToUnsignedChars(DFA26_maxS);
		private static readonly short[] DFA26_accept = DFA.UnpackEncodedString(DFA26_acceptS);
		private static readonly short[] DFA26_special = DFA.UnpackEncodedString(DFA26_specialS);
		private static readonly short[][] DFA26_transition;

		static DFA26()
		{
			int numStates = DFA26_transitionS.Length;
			DFA26_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA26_transition[i] = DFA.UnpackEncodedString(DFA26_transitionS[i]);
			}
		}

		public DFA26( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}

		public override string Description { get { return "164:33: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\xA\xFFFF";
		private const string DFA29_eofS =
			"\x1\x3\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA29_minS =
			"\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\xA\x1\x5\x1\xC\x1\x11\x1\x5\x1\x2F";
		private const string DFA29_maxS =
			"\x1\x39\x1\xFFFF\x1\x39\x1\xFFFF\x1\x37\x1\x39\x1\x11\x1\x2F\x1\x39\x1"+
			"\x2F";
		private const string DFA29_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x6\xFFFF";
		private const string DFA29_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x3\x4\xFFFF\x1\x1\x6\xFFFF\x1\x2\x2\x1\x1\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x1\x3\xFFFF\x1\x1\x1\xFFFF\x1\x3\x2\xFFFF\x1\x1\x1\x3\x2\x1\x2\xFFFF"+
				"\x1\x3\x6\xFFFF\x2\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\x1\x2\x3",
				"",
				"\x1\x1\x4\xFFFF\x2\x1\x1\x4\x1\x1\x3\xFFFF\x1\x5\x3\xFFFF\x1\x1\x8"+
				"\xFFFF\x4\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x9\x1\x1\xFFFF\x1"+
				"\x1\x2\xFFFF\x1\x1\x2\xFFFF\x2\x1",
				"",
				"\x1\x1\x6\xFFFF\x3\x1\x5\xFFFF\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x1"+
				"\x1\xFFFF\x2\x1\x9\xFFFF\x1\x6\x6\xFFFF\x2\x1",
				"\x1\x1\x4\xFFFF\x1\x3\x1\xFFFF\x1\x7\x4\xFFFF\x1\x1\x3\xFFFF\x1\x1"+
				"\x9\xFFFF\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x1\x2\xFFFF\x1\x1\x3\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x2\xFFFF\x2\x1",
				"\x1\x9\x4\xFFFF\x1\x8",
				"\x1\x3\x1D\xFFFF\x1\x1",
				"\x1\x1\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x1\x3\xFFFF\x1\x1"+
				"\x9\xFFFF\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x1\x2\xFFFF\x1\x1\x3\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x2\xFFFF\x2\x1",
				"\x1\x6"
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "180:13: ( expr )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root208 = new BitSet(new ulong[]{0x124000000220000UL});
		public static readonly BitSet _NEWLINE_in_root210 = new BitSet(new ulong[]{0x124000000220000UL});
		public static readonly BitSet _EOF_in_root215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _imports_in_node226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_def_in_node231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_in_node236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_in_node241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_imports252 = new BitSet(new ulong[]{0x2040002UL});
		public static readonly BitSet _STRING_in_imports254 = new BitSet(new ulong[]{0x40002UL});
		public static readonly BitSet _INDENT_in_imports258 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _NEWLINE_in_imports261 = new BitSet(new ulong[]{0x2200000UL});
		public static readonly BitSet _STRING_in_imports264 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _NEWLINE_in_imports268 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _DEDENT_in_imports271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_enum285 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_enum287 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_enum289 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_enum291 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _59_in_enum294 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_enum296 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _56_in_struct309 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_struct311 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _INDENT_in_struct314 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _NEWLINE_in_struct317 = new BitSet(new ulong[]{0x220000UL});
		public static readonly BitSet _struct_stmt_in_struct320 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _DEDENT_in_struct324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_def_in_struct_stmt336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_struct_stmt341 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_struct_stmt343 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _43_in_struct_stmt346 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_struct_stmt348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_type_name374 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _Expr_Dict_in_type_name377 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_type_name379 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _IDENT_in_generic_parameter392 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _35_in_generic_parameter395 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_generic_parameter398 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _stmt_alloc_in_func_args411 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _35_in_func_args414 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _stmt_alloc_in_func_args416 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_func_args418 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _type_name_in_func_def431 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_func_def433 = new BitSet(new ulong[]{0x1400UL});
		public static readonly BitSet _Expr_Dict_in_func_def436 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _generic_parameter_in_func_def438 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_func_def440 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_func_def444 = new BitSet(new ulong[]{0x80020000UL});
		public static readonly BitSet _func_args_in_func_def446 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_func_def449 = new BitSet(new ulong[]{0x80000040000UL});
		public static readonly BitSet _stmt_block_in_func_def453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_func_def457 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_func_def459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block475 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block478 = new BitSet(new ulong[]{0x4D80034222E0400UL});
		public static readonly BitSet _stmt_in_stmt_block481 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block485 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _DEDENT_in_stmt_block488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_stmt_alloc525 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_stmt_alloc527 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _43_in_stmt_alloc530 = new BitSet(new ulong[]{0x20E0400UL});
		public static readonly BitSet _atom_expr_in_stmt_alloc532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_stmt_if558 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_stmt_if560 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_stmt_if562 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_stmt_if564 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _stmt_block_in_stmt_if566 = new BitSet(new ulong[]{0x2000000200002UL});
		public static readonly BitSet _NEWLINE_in_stmt_if569 = new BitSet(new ulong[]{0x2000000200000UL});
		public static readonly BitSet _49_in_stmt_if572 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _stmt_block_in_stmt_if574 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_stmt_while588 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_stmt_while590 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_stmt_while592 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_stmt_while594 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _stmt_block_in_stmt_while596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_stmt_for607 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_stmt_for609 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_stmt_for611 = new BitSet(new ulong[]{0x200010000000000UL});
		public static readonly BitSet _40_in_stmt_for614 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_stmt_for616 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_stmt_for618 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_stmt_for620 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _57_in_stmt_for624 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_stmt_for626 = new BitSet(new ulong[]{0x1000080000000UL});
		public static readonly BitSet _48_in_stmt_for629 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_stmt_for631 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_stmt_for636 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _stmt_block_in_stmt_for638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_expr_in_expr649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_return_expr660 = new BitSet(new ulong[]{0xC00034220E0402UL});
		public static readonly BitSet _expr_in_return_expr662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_return_expr677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_alloc_expr688 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_alloc_expr690 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _43_in_alloc_expr693 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_alloc_expr695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_expr_in_alloc_expr715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_assign_expr726 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _43_in_assign_expr729 = new BitSet(new ulong[]{0x400034220E0400UL});
		public static readonly BitSet _cond_expr_in_assign_expr732 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _logic_expr_in_cond_expr752 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _Expr_Cond_in_cond_expr755 = new BitSet(new ulong[]{0x400034220E0400UL});
		public static readonly BitSet _logic_expr_in_cond_expr758 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_cond_expr760 = new BitSet(new ulong[]{0x400034220E0400UL});
		public static readonly BitSet _logic_expr_in_cond_expr763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_logic_expr776 = new BitSet(new ulong[]{0x760040000002UL});
		public static readonly BitSet _set_in_logic_expr779 = new BitSet(new ulong[]{0x400034220E0400UL});
		public static readonly BitSet _add_expr_in_logic_expr804 = new BitSet(new ulong[]{0x760040000002UL});
		public static readonly BitSet _mul_expr_in_add_expr817 = new BitSet(new ulong[]{0x1200000002UL});
		public static readonly BitSet _set_in_add_expr820 = new BitSet(new ulong[]{0x400034220E0400UL});
		public static readonly BitSet _mul_expr_in_add_expr829 = new BitSet(new ulong[]{0x1200000002UL});
		public static readonly BitSet _new_expr_in_mul_expr842 = new BitSet(new ulong[]{0x4100000002UL});
		public static readonly BitSet _set_in_mul_expr845 = new BitSet(new ulong[]{0x400034220E0400UL});
		public static readonly BitSet _new_expr_in_mul_expr854 = new BitSet(new ulong[]{0x4100000002UL});
		public static readonly BitSet _54_in_new_expr867 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_new_expr869 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _Expr_Dict_in_new_expr872 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_new_expr874 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_new_expr876 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _prefix_expr_in_new_expr894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_prefix_expr906 = new BitSet(new ulong[]{0x34220E0400UL});
		public static readonly BitSet _call_expr_in_prefix_expr925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_args_list952 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _35_in_args_list956 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_args_list958 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _dot_expr_in_call_expr976 = new BitSet(new ulong[]{0x1402UL});
		public static readonly BitSet _Expr_Call_in_call_expr979 = new BitSet(new ulong[]{0xC0003CA20E0400UL});
		public static readonly BitSet _args_list_in_call_expr982 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_call_expr984 = new BitSet(new ulong[]{0x1402UL});
		public static readonly BitSet _Expr_Dict_in_call_expr994 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_call_expr997 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_call_expr999 = new BitSet(new ulong[]{0x1402UL});
		public static readonly BitSet _atom_expr_in_dot_expr1024 = new BitSet(new ulong[]{0x2002UL});
		public static readonly BitSet _Expr_Dot_in_dot_expr1027 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _IDENT_in_dot_expr1030 = new BitSet(new ulong[]{0x2002UL});
		public static readonly BitSet _INT_in_atom_expr1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_atom_expr1048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr1053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Call_in_atom_expr1058 = new BitSet(new ulong[]{0xC00034220E0400UL});
		public static readonly BitSet _expr_in_atom_expr1061 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_atom_expr1063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_expr_in_atom_expr1069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_block_expr1080 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _NEWLINE_in_block_expr1083 = new BitSet(new ulong[]{0x4D80034222E0400UL});
		public static readonly BitSet _stmt_in_block_expr1086 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _DEDENT_in_block_expr1090 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
