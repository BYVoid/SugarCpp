//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-04-29 21:13:49

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "Ident_List", "Import", "Infix_Func", "Left_Bracket", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_If", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Struct", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "']'", "'^'", "'^='", "'else'", "'enum'", "'for'", "'if'", "'import'", "'namespace'", "'new'", "'return'", "'struct'", "'typedef'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Enum=7;
	public const int Expr_Access=8;
	public const int Expr_Alloc=9;
	public const int Expr_Bin=10;
	public const int Expr_Block=11;
	public const int Expr_Call=12;
	public const int Expr_Call_With=13;
	public const int Expr_Cond=14;
	public const int Expr_Dict=15;
	public const int Expr_Infix=16;
	public const int Expr_Lambda=17;
	public const int Expr_New_Array=18;
	public const int Expr_New_Type=19;
	public const int Expr_Prefix=20;
	public const int Expr_Return=21;
	public const int Expr_Suffix=22;
	public const int Expr_Tuple=23;
	public const int Func_Args=24;
	public const int Func_Def=25;
	public const int IDENT=26;
	public const int INDENT=27;
	public const int Ident_List=28;
	public const int Import=29;
	public const int Infix_Func=30;
	public const int Left_Bracket=31;
	public const int Match_Tuple=32;
	public const int NEWLINE=33;
	public const int NUMBER=34;
	public const int Namespace=35;
	public const int Right_Bracket=36;
	public const int Root=37;
	public const int SP=38;
	public const int STRING=39;
	public const int Stmt_Block=40;
	public const int Stmt_For=41;
	public const int Stmt_If=42;
	public const int Stmt_Typedef=43;
	public const int Stmt_Using=44;
	public const int Stmt_While=45;
	public const int Struct=46;
	public const int Type_IDENT=47;
	public const int Type_Ref=48;
	public const int Type_Tuple=49;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:139:8: public root : overall_block ( NEWLINE )* EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE2 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE2_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(139, 1);
		try
		{
			// SugarCpp.g:140:2: ( overall_block ( NEWLINE )* EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:140:4: overall_block ( NEWLINE )* EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(140, 4);
			PushFollow(Follow._overall_block_in_root365);
			overall_block1=overall_block();
			PopFollow();

			adaptor.AddChild(root_0, overall_block1.Tree);
			DebugLocation(140, 19);
			// SugarCpp.g:140:19: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:140:19: NEWLINE
					{
					DebugLocation(140, 19);
					NEWLINE2=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root368); 
					NEWLINE2_tree = (CommonTree)adaptor.Create(NEWLINE2);
					adaptor.AddChild(root_0, NEWLINE2_tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(140, 28);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root371); 
			EOF3_tree = (CommonTree)adaptor.Create(EOF3);
			adaptor.AddChild(root_0, EOF3_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_overall_block();
	partial void LeaveRule_overall_block();

	// $ANTLR start "overall_block"
	// SugarCpp.g:143:1: overall_block : ( ( NEWLINE )* node )+ ;
	[GrammarRule("overall_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> overall_block()
	{
		EnterRule_overall_block();
		EnterRule("overall_block", 2);
		TraceIn("overall_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE4 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE4_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "overall_block");
		DebugLocation(143, 1);
		try
		{
			// SugarCpp.g:144:2: ( ( ( NEWLINE )* node )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:144:4: ( ( NEWLINE )* node )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(144, 4);
			// SugarCpp.g:144:4: ( ( NEWLINE )* node )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:144:5: ( NEWLINE )* node
					{
					DebugLocation(144, 5);
					// SugarCpp.g:144:5: ( NEWLINE )*
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch ( alt2 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:144:5: NEWLINE
							{
							DebugLocation(144, 5);
							NEWLINE4=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_overall_block383); 
							NEWLINE4_tree = (CommonTree)adaptor.Create(NEWLINE4);
							adaptor.AddChild(root_0, NEWLINE4_tree);

							}
							break;

						default:
							goto loop2;
						}
					}

					loop2:
						;

					} finally { DebugExitSubRule(2); }

					DebugLocation(144, 14);
					PushFollow(Follow._node_in_overall_block386);
					node5=node();
					PopFollow();

					adaptor.AddChild(root_0, node5.Tree);

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overall_block", 2);
			LeaveRule("overall_block", 2);
			LeaveRule_overall_block();
		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "overall_block"); }
		return retval;

	}
	// $ANTLR end "overall_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:147:1: node : ( func_def | import_def | enum_def | struct_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> struct_def9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(147, 1);
		try
		{
			// SugarCpp.g:148:2: ( func_def | import_def | enum_def | struct_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				int LA4_1 = input.LA(2);

				if ((LA4_1==IDENT||LA4_1==55||LA4_1==59||LA4_1==78))
				{
					alt4 = 1;
				}
				else if ((LA4_1==64||LA4_1==74))
				{
					alt4 = 6;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 97:
				{
				alt4 = 2;
				}
				break;
			case 94:
				{
				alt4 = 3;
				}
				break;
			case 101:
				{
				alt4 = 4;
				}
				break;
			case 98:
				{
				alt4 = 5;
				}
				break;
			case 103:
				{
				alt4 = 7;
				}
				break;
			case 102:
				{
				alt4 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:148:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(148, 4);
				PushFollow(Follow._func_def_in_node399);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:149:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(149, 4);
				PushFollow(Follow._import_def_in_node404);
				import_def7=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:150:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(150, 4);
				PushFollow(Follow._enum_def_in_node409);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:151:4: struct_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(151, 4);
				PushFollow(Follow._struct_def_in_node414);
				struct_def9=struct_def();
				PopFollow();

				adaptor.AddChild(root_0, struct_def9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:152:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(152, 4);
				PushFollow(Follow._namespace_def_in_node419);
				namespace_def10=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:153:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(153, 4);
				PushFollow(Follow._stmt_alloc_in_node424);
				stmt_alloc11=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:154:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(154, 4);
				PushFollow(Follow._stmt_using_in_node429);
				stmt_using12=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:155:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(155, 4);
				PushFollow(Follow._stmt_typedef_in_node434);
				stmt_typedef13=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:158:1: import_def : 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 4);
		TraceIn("import_def", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal14 = default(IToken);
		IToken STRING15 = default(IToken);
		IToken INDENT16 = default(IToken);
		IToken NEWLINE17 = default(IToken);
		IToken STRING18 = default(IToken);
		IToken NEWLINE19 = default(IToken);
		IToken DEDENT20 = default(IToken);

		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		CommonTree INDENT16_tree = default(CommonTree);
		CommonTree NEWLINE17_tree = default(CommonTree);
		CommonTree STRING18_tree = default(CommonTree);
		CommonTree NEWLINE19_tree = default(CommonTree);
		CommonTree DEDENT20_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(158, 1);
		try
		{
			// SugarCpp.g:159:2: ( 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:159:4: 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			{
			DebugLocation(159, 4);
			string_literal14=(IToken)Match(input,97,Follow._97_in_import_def445);  
			stream_97.Add(string_literal14);

			DebugLocation(159, 13);
			// SugarCpp.g:159:13: ( STRING )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==STRING))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:159:13: STRING
				{
				DebugLocation(159, 13);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_import_def447);  
				stream_STRING.Add(STRING15);


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(159, 21);
			// SugarCpp.g:159:21: ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==INDENT))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:159:22: INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT
				{
				DebugLocation(159, 22);
				INDENT16=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def451);  
				stream_INDENT.Add(INDENT16);

				DebugLocation(159, 29);
				// SugarCpp.g:159:29: ( ( NEWLINE )+ STRING )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					try
					{
						alt7 = dfa7.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:159:30: ( NEWLINE )+ STRING
						{
						DebugLocation(159, 30);
						// SugarCpp.g:159:30: ( NEWLINE )+
						int cnt6=0;
						try { DebugEnterSubRule(6);
						while (true)
						{
							int alt6=2;
							try { DebugEnterDecision(6, false);
							int LA6_0 = input.LA(1);

							if ((LA6_0==NEWLINE))
							{
								alt6 = 1;
							}


							} finally { DebugExitDecision(6); }
							switch (alt6)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:159:30: NEWLINE
								{
								DebugLocation(159, 30);
								NEWLINE17=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def454);  
								stream_NEWLINE.Add(NEWLINE17);


								}
								break;

							default:
								if (cnt6 >= 1)
									goto loop6;

								EarlyExitException eee6 = new EarlyExitException( 6, input );
								DebugRecognitionException(eee6);
								throw eee6;
							}
							cnt6++;
						}
						loop6:
							;

						} finally { DebugExitSubRule(6); }

						DebugLocation(159, 39);
						STRING18=(IToken)Match(input,STRING,Follow._STRING_in_import_def457);  
						stream_STRING.Add(STRING18);


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(159, 48);
				// SugarCpp.g:159:48: ( NEWLINE )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0==NEWLINE))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:159:48: NEWLINE
						{
						DebugLocation(159, 48);
						NEWLINE19=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def461);  
						stream_NEWLINE.Add(NEWLINE19);


						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(159, 57);
				DEDENT20=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def464);  
				stream_DEDENT.Add(DEDENT20);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 159:66: -> ^( Import ( STRING )* )
			{
				DebugLocation(159, 69);
				// SugarCpp.g:159:69: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(159, 71);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(159, 78);
				// SugarCpp.g:159:78: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(159, 78);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 4);
			LeaveRule("import_def", 4);
			LeaveRule_import_def();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:162:1: enum_def : 'enum' IDENT '=' IDENT ( '|' IDENT )* -> ^( Enum ( IDENT )+ ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 5);
		TraceIn("enum_def", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal21 = default(IToken);
		IToken IDENT22 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken IDENT24 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken IDENT26 = default(IToken);

		CommonTree string_literal21_tree = default(CommonTree);
		CommonTree IDENT22_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree IDENT24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree IDENT26_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(162, 1);
		try
		{
			// SugarCpp.g:163:2: ( 'enum' IDENT '=' IDENT ( '|' IDENT )* -> ^( Enum ( IDENT )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:163:4: 'enum' IDENT '=' IDENT ( '|' IDENT )*
			{
			DebugLocation(163, 4);
			string_literal21=(IToken)Match(input,94,Follow._94_in_enum_def486);  
			stream_94.Add(string_literal21);

			DebugLocation(163, 11);
			IDENT22=(IToken)Match(input,IDENT,Follow._IDENT_in_enum_def488);  
			stream_IDENT.Add(IDENT22);

			DebugLocation(163, 17);
			char_literal23=(IToken)Match(input,82,Follow._82_in_enum_def490);  
			stream_82.Add(char_literal23);

			DebugLocation(163, 21);
			IDENT24=(IToken)Match(input,IDENT,Follow._IDENT_in_enum_def492);  
			stream_IDENT.Add(IDENT24);

			DebugLocation(163, 27);
			// SugarCpp.g:163:27: ( '|' IDENT )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==105))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:163:28: '|' IDENT
					{
					DebugLocation(163, 28);
					char_literal25=(IToken)Match(input,105,Follow._105_in_enum_def495);  
					stream_105.Add(char_literal25);

					DebugLocation(163, 32);
					IDENT26=(IToken)Match(input,IDENT,Follow._IDENT_in_enum_def497);  
					stream_IDENT.Add(IDENT26);


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 163:40: -> ^( Enum ( IDENT )+ )
			{
				DebugLocation(163, 43);
				// SugarCpp.g:163:43: ^( Enum ( IDENT )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(163, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(163, 50);
				if (!(stream_IDENT.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_IDENT.HasNext )
				{
					DebugLocation(163, 50);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

				}
				stream_IDENT.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 5);
			LeaveRule("enum_def", 5);
			LeaveRule_enum_def();
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:166:1: namespace_def : 'namespace' IDENT INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace IDENT overall_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 6);
		TraceIn("namespace_def", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal27 = default(IToken);
		IToken IDENT28 = default(IToken);
		IToken INDENT29 = default(IToken);
		IToken NEWLINE31 = default(IToken);
		IToken DEDENT32 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal27_tree = default(CommonTree);
		CommonTree IDENT28_tree = default(CommonTree);
		CommonTree INDENT29_tree = default(CommonTree);
		CommonTree NEWLINE31_tree = default(CommonTree);
		CommonTree DEDENT32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_overall_block=new RewriteRuleSubtreeStream(adaptor,"rule overall_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(166, 1);
		try
		{
			// SugarCpp.g:167:2: ( 'namespace' IDENT INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace IDENT overall_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:167:4: 'namespace' IDENT INDENT overall_block ( NEWLINE )* DEDENT
			{
			DebugLocation(167, 4);
			string_literal27=(IToken)Match(input,98,Follow._98_in_namespace_def519);  
			stream_98.Add(string_literal27);

			DebugLocation(167, 16);
			IDENT28=(IToken)Match(input,IDENT,Follow._IDENT_in_namespace_def521);  
			stream_IDENT.Add(IDENT28);

			DebugLocation(167, 22);
			INDENT29=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def523);  
			stream_INDENT.Add(INDENT29);

			DebugLocation(167, 29);
			PushFollow(Follow._overall_block_in_namespace_def525);
			overall_block30=overall_block();
			PopFollow();

			stream_overall_block.Add(overall_block30.Tree);
			DebugLocation(167, 43);
			// SugarCpp.g:167:43: ( NEWLINE )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:167:43: NEWLINE
					{
					DebugLocation(167, 43);
					NEWLINE31=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def527);  
					stream_NEWLINE.Add(NEWLINE31);


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(167, 52);
			DEDENT32=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def530);  
			stream_DEDENT.Add(DEDENT32);



			{
			// AST REWRITE
			// elements: overall_block, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 167:59: -> ^( Namespace IDENT overall_block )
			{
				DebugLocation(167, 62);
				// SugarCpp.g:167:62: ^( Namespace IDENT overall_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(167, 64);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(167, 74);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(167, 80);
				adaptor.AddChild(root_1, stream_overall_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 6);
			LeaveRule("namespace_def", 6);
			LeaveRule_namespace_def();
		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_struct_def();
	partial void LeaveRule_struct_def();

	// $ANTLR start "struct_def"
	// SugarCpp.g:170:1: struct_def : 'struct' IDENT INDENT overall_block ( NEWLINE )* DEDENT -> ^( Struct IDENT overall_block ) ;
	[GrammarRule("struct_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> struct_def()
	{
		EnterRule_struct_def();
		EnterRule("struct_def", 7);
		TraceIn("struct_def", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal33 = default(IToken);
		IToken IDENT34 = default(IToken);
		IToken INDENT35 = default(IToken);
		IToken NEWLINE37 = default(IToken);
		IToken DEDENT38 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block36 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal33_tree = default(CommonTree);
		CommonTree IDENT34_tree = default(CommonTree);
		CommonTree INDENT35_tree = default(CommonTree);
		CommonTree NEWLINE37_tree = default(CommonTree);
		CommonTree DEDENT38_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_overall_block=new RewriteRuleSubtreeStream(adaptor,"rule overall_block");
		try { DebugEnterRule(GrammarFileName, "struct_def");
		DebugLocation(170, 1);
		try
		{
			// SugarCpp.g:171:2: ( 'struct' IDENT INDENT overall_block ( NEWLINE )* DEDENT -> ^( Struct IDENT overall_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:171:4: 'struct' IDENT INDENT overall_block ( NEWLINE )* DEDENT
			{
			DebugLocation(171, 4);
			string_literal33=(IToken)Match(input,101,Follow._101_in_struct_def551);  
			stream_101.Add(string_literal33);

			DebugLocation(171, 13);
			IDENT34=(IToken)Match(input,IDENT,Follow._IDENT_in_struct_def553);  
			stream_IDENT.Add(IDENT34);

			DebugLocation(171, 19);
			INDENT35=(IToken)Match(input,INDENT,Follow._INDENT_in_struct_def555);  
			stream_INDENT.Add(INDENT35);

			DebugLocation(171, 26);
			PushFollow(Follow._overall_block_in_struct_def557);
			overall_block36=overall_block();
			PopFollow();

			stream_overall_block.Add(overall_block36.Tree);
			DebugLocation(171, 40);
			// SugarCpp.g:171:40: ( NEWLINE )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==NEWLINE))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:171:40: NEWLINE
					{
					DebugLocation(171, 40);
					NEWLINE37=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_struct_def559);  
					stream_NEWLINE.Add(NEWLINE37);


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(171, 49);
			DEDENT38=(IToken)Match(input,DEDENT,Follow._DEDENT_in_struct_def562);  
			stream_DEDENT.Add(DEDENT38);



			{
			// AST REWRITE
			// elements: IDENT, overall_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 171:56: -> ^( Struct IDENT overall_block )
			{
				DebugLocation(171, 59);
				// SugarCpp.g:171:59: ^( Struct IDENT overall_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(171, 61);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Struct, "Struct"), root_1);

				DebugLocation(171, 68);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(171, 74);
				adaptor.AddChild(root_1, stream_overall_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_def", 7);
			LeaveRule("struct_def", 7);
			LeaveRule_struct_def();
		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_def"); }
		return retval;

	}
	// $ANTLR end "struct_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:174:1: type_name : IDENT ( '<' ( type_name ( ',' type_name )* )? '>' )? ( '*' )* ( '&' )? -> ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( '*' )* ( '&' )? ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 8);
		TraceIn("type_name", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT39 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken char_literal45 = default(IToken);
		IToken char_literal46 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name43 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT39_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(174, 1);
		try
		{
			// SugarCpp.g:175:2: ( IDENT ( '<' ( type_name ( ',' type_name )* )? '>' )? ( '*' )* ( '&' )? -> ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( '*' )* ( '&' )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:175:4: IDENT ( '<' ( type_name ( ',' type_name )* )? '>' )? ( '*' )* ( '&' )?
			{
			DebugLocation(175, 4);
			IDENT39=(IToken)Match(input,IDENT,Follow._IDENT_in_type_name583);  
			stream_IDENT.Add(IDENT39);

			DebugLocation(175, 10);
			// SugarCpp.g:175:10: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==78))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:175:11: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(175, 11);
				char_literal40=(IToken)Match(input,78,Follow._78_in_type_name586);  
				stream_78.Add(char_literal40);

				DebugLocation(175, 15);
				// SugarCpp.g:175:15: ( type_name ( ',' type_name )* )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==IDENT))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:175:16: type_name ( ',' type_name )*
					{
					DebugLocation(175, 16);
					PushFollow(Follow._type_name_in_type_name589);
					type_name41=type_name();
					PopFollow();

					stream_type_name.Add(type_name41.Tree);
					DebugLocation(175, 26);
					// SugarCpp.g:175:26: ( ',' type_name )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if ((LA13_0==64))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:175:27: ',' type_name
							{
							DebugLocation(175, 27);
							char_literal42=(IToken)Match(input,64,Follow._64_in_type_name592);  
							stream_64.Add(char_literal42);

							DebugLocation(175, 31);
							PushFollow(Follow._type_name_in_type_name594);
							type_name43=type_name();
							PopFollow();

							stream_type_name.Add(type_name43.Tree);

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }


					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(175, 45);
				char_literal44=(IToken)Match(input,85,Follow._85_in_type_name600);  
				stream_85.Add(char_literal44);


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(175, 51);
			// SugarCpp.g:175:51: ( '*' )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==59))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:175:51: '*'
					{
					DebugLocation(175, 51);
					char_literal45=(IToken)Match(input,59,Follow._59_in_type_name604);  
					stream_59.Add(char_literal45);


					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(175, 56);
			// SugarCpp.g:175:56: ( '&' )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==55))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:175:56: '&'
				{
				DebugLocation(175, 56);
				char_literal46=(IToken)Match(input,55,Follow._55_in_type_name607);  
				stream_55.Add(char_literal46);


				}
				break;

			}
			} finally { DebugExitSubRule(17); }



			{
			// AST REWRITE
			// elements: type_name, 78, 59, 55, 85, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 175:61: -> ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( '*' )* ( '&' )? )
			{
				DebugLocation(175, 64);
				// SugarCpp.g:175:64: ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( '*' )* ( '&' )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(175, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(175, 77);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(175, 83);
				// SugarCpp.g:175:83: ( '<' ( type_name )* '>' )?
				if (stream_type_name.HasNext||stream_78.HasNext||stream_85.HasNext)
				{
					DebugLocation(175, 84);
					adaptor.AddChild(root_1, stream_78.NextNode());
					DebugLocation(175, 88);
					// SugarCpp.g:175:88: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(175, 88);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(175, 99);
					adaptor.AddChild(root_1, stream_85.NextNode());

				}
				stream_type_name.Reset();
				stream_78.Reset();
				stream_85.Reset();
				DebugLocation(175, 106);
				// SugarCpp.g:175:106: ( '*' )*
				while ( stream_59.HasNext )
				{
					DebugLocation(175, 106);
					adaptor.AddChild(root_1, stream_59.NextNode());

				}
				stream_59.Reset();
				DebugLocation(175, 111);
				// SugarCpp.g:175:111: ( '&' )?
				if (stream_55.HasNext)
				{
					DebugLocation(175, 111);
					adaptor.AddChild(root_1, stream_55.NextNode());

				}
				stream_55.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 8);
			LeaveRule("type_name", 8);
			LeaveRule_type_name();
		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:178:1: generic_parameter : IDENT ( ',' ! IDENT )* ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 9);
		TraceIn("generic_parameter", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT47 = default(IToken);
		IToken char_literal48 = default(IToken);
		IToken IDENT49 = default(IToken);

		CommonTree IDENT47_tree = default(CommonTree);
		CommonTree char_literal48_tree = default(CommonTree);
		CommonTree IDENT49_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(178, 1);
		try
		{
			// SugarCpp.g:179:2: ( IDENT ( ',' ! IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:179:4: IDENT ( ',' ! IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(179, 4);
			IDENT47=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter644); 
			IDENT47_tree = (CommonTree)adaptor.Create(IDENT47);
			adaptor.AddChild(root_0, IDENT47_tree);
			DebugLocation(179, 10);
			// SugarCpp.g:179:10: ( ',' ! IDENT )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==64))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:179:11: ',' ! IDENT
					{
					DebugLocation(179, 14);
					char_literal48=(IToken)Match(input,64,Follow._64_in_generic_parameter647); 
					DebugLocation(179, 16);
					IDENT49=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter650); 
					IDENT49_tree = (CommonTree)adaptor.Create(IDENT49);
					adaptor.AddChild(root_0, IDENT49_tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 9);
			LeaveRule("generic_parameter", 9);
			LeaveRule_generic_parameter();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:182:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 10);
		TraceIn("func_args", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal51 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal51_tree = default(CommonTree);
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(182, 1);
		try
		{
			// SugarCpp.g:183:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:183:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(183, 4);
			PushFollow(Follow._stmt_alloc_in_func_args663);
			stmt_alloc50=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc50.Tree);
			DebugLocation(183, 15);
			// SugarCpp.g:183:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==64))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:183:16: ',' stmt_alloc
					{
					DebugLocation(183, 16);
					char_literal51=(IToken)Match(input,64,Follow._64_in_func_args666);  
					stream_64.Add(char_literal51);

					DebugLocation(183, 20);
					PushFollow(Follow._stmt_alloc_in_func_args668);
					stmt_alloc52=stmt_alloc();
					PopFollow();

					stream_stmt_alloc.Add(stmt_alloc52.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 183:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(183, 36);
				// SugarCpp.g:183:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(183, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(183, 48);
				// SugarCpp.g:183:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(183, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 10);
			LeaveRule("func_args", 10);
			LeaveRule_func_args();
		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:186:1: func_def : type_name IDENT ( '<' generic_parameter '>' )? '(' ( func_args )? ')' stmt_block ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 11);
		TraceIn("func_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT54 = default(IToken);
		IToken char_literal55 = default(IToken);
		IToken char_literal57 = default(IToken);
		IToken char_literal58 = default(IToken);
		IToken char_literal60 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT54_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree char_literal57_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		CommonTree char_literal60_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(186, 4);
		try
		{
			// SugarCpp.g:187:2: ( type_name IDENT ( '<' generic_parameter '>' )? '(' ( func_args )? ')' stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:187:4: type_name IDENT ( '<' generic_parameter '>' )? '(' ( func_args )? ')' stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(187, 4);
			PushFollow(Follow._type_name_in_func_def690);
			type_name53=type_name();
			PopFollow();

			adaptor.AddChild(root_0, type_name53.Tree);
			DebugLocation(187, 14);
			IDENT54=(IToken)Match(input,IDENT,Follow._IDENT_in_func_def692); 
			IDENT54_tree = (CommonTree)adaptor.Create(IDENT54);
			adaptor.AddChild(root_0, IDENT54_tree);
			DebugLocation(187, 20);
			// SugarCpp.g:187:20: ( '<' generic_parameter '>' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==78))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:187:21: '<' generic_parameter '>'
				{
				DebugLocation(187, 21);
				char_literal55=(IToken)Match(input,78,Follow._78_in_func_def695); 
				char_literal55_tree = (CommonTree)adaptor.Create(char_literal55);
				adaptor.AddChild(root_0, char_literal55_tree);
				DebugLocation(187, 25);
				PushFollow(Follow._generic_parameter_in_func_def697);
				generic_parameter56=generic_parameter();
				PopFollow();

				adaptor.AddChild(root_0, generic_parameter56.Tree);
				DebugLocation(187, 43);
				char_literal57=(IToken)Match(input,85,Follow._85_in_func_def699); 
				char_literal57_tree = (CommonTree)adaptor.Create(char_literal57);
				adaptor.AddChild(root_0, char_literal57_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(187, 49);
			char_literal58=(IToken)Match(input,57,Follow._57_in_func_def703); 
			char_literal58_tree = (CommonTree)adaptor.Create(char_literal58);
			adaptor.AddChild(root_0, char_literal58_tree);
			DebugLocation(187, 53);
			// SugarCpp.g:187:53: ( func_args )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==IDENT))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:187:53: func_args
				{
				DebugLocation(187, 53);
				PushFollow(Follow._func_args_in_func_def705);
				func_args59=func_args();
				PopFollow();

				adaptor.AddChild(root_0, func_args59.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(187, 64);
			char_literal60=(IToken)Match(input,58,Follow._58_in_func_def708); 
			char_literal60_tree = (CommonTree)adaptor.Create(char_literal60);
			adaptor.AddChild(root_0, char_literal60_tree);
			DebugLocation(187, 68);
			PushFollow(Follow._stmt_block_in_func_def710);
			stmt_block61=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block61.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 11);
			LeaveRule("func_def", 11);
			LeaveRule_func_def();
		}
		DebugLocation(188, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:190:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 12);
		TraceIn("stmt_block", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT62 = default(IToken);
		IToken NEWLINE63 = default(IToken);
		IToken NEWLINE65 = default(IToken);
		IToken DEDENT66 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt64 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT62_tree = default(CommonTree);
		CommonTree NEWLINE63_tree = default(CommonTree);
		CommonTree NEWLINE65_tree = default(CommonTree);
		CommonTree DEDENT66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(190, 1);
		try
		{
			// SugarCpp.g:191:2: ( INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:191:4: INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(191, 4);
			INDENT62=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block724);  
			stream_INDENT.Add(INDENT62);

			DebugLocation(191, 11);
			// SugarCpp.g:191:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				try
				{
					alt23 = dfa23.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:191:12: ( NEWLINE )+ stmt
					{
					DebugLocation(191, 12);
					// SugarCpp.g:191:12: ( NEWLINE )+
					int cnt22=0;
					try { DebugEnterSubRule(22);
					while (true)
					{
						int alt22=2;
						try { DebugEnterDecision(22, false);
						int LA22_0 = input.LA(1);

						if ((LA22_0==NEWLINE))
						{
							alt22 = 1;
						}


						} finally { DebugExitDecision(22); }
						switch (alt22)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:191:12: NEWLINE
							{
							DebugLocation(191, 12);
							NEWLINE63=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block727);  
							stream_NEWLINE.Add(NEWLINE63);


							}
							break;

						default:
							if (cnt22 >= 1)
								goto loop22;

							EarlyExitException eee22 = new EarlyExitException( 22, input );
							DebugRecognitionException(eee22);
							throw eee22;
						}
						cnt22++;
					}
					loop22:
						;

					} finally { DebugExitSubRule(22); }

					DebugLocation(191, 21);
					PushFollow(Follow._stmt_in_stmt_block730);
					stmt64=stmt();
					PopFollow();

					stream_stmt.Add(stmt64.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }

			DebugLocation(191, 28);
			// SugarCpp.g:191:28: ( NEWLINE )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==NEWLINE))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:191:28: NEWLINE
					{
					DebugLocation(191, 28);
					NEWLINE65=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block734);  
					stream_NEWLINE.Add(NEWLINE65);


					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(191, 37);
			DEDENT66=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block737);  
			stream_DEDENT.Add(DEDENT66);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 191:44: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(191, 47);
				// SugarCpp.g:191:47: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(191, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(191, 60);
				// SugarCpp.g:191:60: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(191, 60);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 12);
			LeaveRule("stmt_block", 12);
			LeaveRule_stmt_block();
		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:194:1: stmt : stmt_expr ;
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 13);
		TraceIn("stmt", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr67 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(194, 1);
		try
		{
			// SugarCpp.g:195:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:195:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(195, 4);
			PushFollow(Follow._stmt_expr_in_stmt757);
			stmt_expr67=stmt_expr();
			PopFollow();

			adaptor.AddChild(root_0, stmt_expr67.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 13);
			LeaveRule("stmt", 13);
			LeaveRule_stmt();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:198:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_if | stmt_while | stmt_for | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 14);
		TraceIn("stmt_expr", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify75 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(198, 1);
		try
		{
			// SugarCpp.g:199:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_if | stmt_while | stmt_for | stmt_modify )
			int alt25=8;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				int LA25_1 = input.LA(2);

				if ((LA25_1==64||LA25_1==74))
				{
					alt25 = 1;
				}
				else if ((LA25_1==DEDENT||LA25_1==NEWLINE||LA25_1==53||(LA25_1>=56 && LA25_1<=57)||LA25_1==60||(LA25_1>=62 && LA25_1<=63)||(LA25_1>=66 && LA25_1<=68)||LA25_1==70||LA25_1==73||(LA25_1>=75 && LA25_1<=76)||LA25_1==80||LA25_1==82||(LA25_1>=88 && LA25_1<=89)||LA25_1==92||LA25_1==106))
				{
					alt25 = 8;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 100:
				{
				alt25 = 2;
				}
				break;
			case 103:
				{
				alt25 = 3;
				}
				break;
			case 102:
				{
				alt25 = 4;
				}
				break;
			case 96:
				{
				alt25 = 5;
				}
				break;
			case 104:
				{
				alt25 = 6;
				}
				break;
			case 95:
				{
				alt25 = 7;
				}
				break;
			case 57:
				{
				alt25 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:199:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(199, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr768);
				stmt_alloc68=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc68.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:200:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(200, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr773);
				stmt_return69=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return69.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:201:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(201, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr778);
				stmt_using70=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using70.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:202:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(202, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr783);
				stmt_typedef71=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef71.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:203:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(203, 4);
				PushFollow(Follow._stmt_if_in_stmt_expr788);
				stmt_if72=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if72.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:204:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(204, 4);
				PushFollow(Follow._stmt_while_in_stmt_expr793);
				stmt_while73=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while73.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:205:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(205, 4);
				PushFollow(Follow._stmt_for_in_stmt_expr798);
				stmt_for74=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for74.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:206:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(206, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr803);
				stmt_modify75=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify75.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 14);
			LeaveRule("stmt_expr", 14);
			LeaveRule_stmt_expr();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:209:1: stmt_typedef : 'typedef' IDENT '=' type_name -> ^( Stmt_Typedef type_name IDENT ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 15);
		TraceIn("stmt_typedef", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal76 = default(IToken);
		IToken IDENT77 = default(IToken);
		IToken char_literal78 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal76_tree = default(CommonTree);
		CommonTree IDENT77_tree = default(CommonTree);
		CommonTree char_literal78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(209, 1);
		try
		{
			// SugarCpp.g:210:2: ( 'typedef' IDENT '=' type_name -> ^( Stmt_Typedef type_name IDENT ) )
			DebugEnterAlt(1);
			// SugarCpp.g:210:4: 'typedef' IDENT '=' type_name
			{
			DebugLocation(210, 4);
			string_literal76=(IToken)Match(input,102,Follow._102_in_stmt_typedef814);  
			stream_102.Add(string_literal76);

			DebugLocation(210, 14);
			IDENT77=(IToken)Match(input,IDENT,Follow._IDENT_in_stmt_typedef816);  
			stream_IDENT.Add(IDENT77);

			DebugLocation(210, 20);
			char_literal78=(IToken)Match(input,82,Follow._82_in_stmt_typedef818);  
			stream_82.Add(char_literal78);

			DebugLocation(210, 24);
			PushFollow(Follow._type_name_in_stmt_typedef820);
			type_name79=type_name();
			PopFollow();

			stream_type_name.Add(type_name79.Tree);


			{
			// AST REWRITE
			// elements: IDENT, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 210:34: -> ^( Stmt_Typedef type_name IDENT )
			{
				DebugLocation(210, 37);
				// SugarCpp.g:210:37: ^( Stmt_Typedef type_name IDENT )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(210, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(210, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(210, 62);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 15);
			LeaveRule("stmt_typedef", 15);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:213:1: stmt_using_item : ( IDENT | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 16);
		TraceIn("stmt_using_item", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set80 = default(IToken);

		CommonTree set80_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(213, 36);
		try
		{
			// SugarCpp.g:213:16: ( IDENT | 'namespace' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(213, 16);

			set80=(IToken)input.LT(1);
			if (input.LA(1)==IDENT||input.LA(1)==98)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set80));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 16);
			LeaveRule("stmt_using_item", 16);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(213, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:214:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 17);
		TraceIn("stmt_using", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal81 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item82 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal81_tree = default(CommonTree);
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:215:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(215, 4);
			string_literal81=(IToken)Match(input,103,Follow._103_in_stmt_using851);  
			stream_103.Add(string_literal81);

			DebugLocation(215, 12);
			// SugarCpp.g:215:12: ( stmt_using_item )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				try
				{
					alt26 = dfa26.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:215:12: stmt_using_item
					{
					DebugLocation(215, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using853);
					stmt_using_item82=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item82.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 215:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(215, 32);
				// SugarCpp.g:215:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(215, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(215, 45);
				// SugarCpp.g:215:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(215, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 17);
			LeaveRule("stmt_using", 17);
			LeaveRule_stmt_using();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:218:1: stmt_return : 'return' ( expr )? -> ^( Expr_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 18);
		TraceIn("stmt_return", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal83 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr84 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal83_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(218, 1);
		try
		{
			// SugarCpp.g:219:2: ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: 'return' ( expr )?
			{
			DebugLocation(219, 4);
			string_literal83=(IToken)Match(input,100,Follow._100_in_stmt_return874);  
			stream_100.Add(string_literal83);

			DebugLocation(219, 13);
			// SugarCpp.g:219:13: ( expr )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==IDENT||LA27_0==NUMBER||LA27_0==STRING||LA27_0==50||LA27_0==55||LA27_0==57||LA27_0==59||(LA27_0>=61 && LA27_0<=62)||(LA27_0>=65 && LA27_0<=66)||LA27_0==99||LA27_0==108))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:219:13: expr
				{
				DebugLocation(219, 13);
				PushFollow(Follow._expr_in_stmt_return876);
				expr84=expr();
				PopFollow();

				stream_expr.Add(expr84.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 219:19: -> ^( Expr_Return ( expr )? )
			{
				DebugLocation(219, 22);
				// SugarCpp.g:219:22: ^( Expr_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Return, "Expr_Return"), root_1);

				DebugLocation(219, 36);
				// SugarCpp.g:219:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(219, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 18);
			LeaveRule("stmt_return", 18);
			LeaveRule_stmt_return();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:222:1: stmt_if : 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 19);
		TraceIn("stmt_if", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal85 = default(IToken);
		IToken char_literal86 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken string_literal90 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block91 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal85_tree = default(CommonTree);
		CommonTree char_literal86_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree string_literal90_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:223:4: 'if' '(' expr ')' stmt_block ( 'else' stmt_block )?
			{
			DebugLocation(223, 4);
			string_literal85=(IToken)Match(input,96,Follow._96_in_stmt_if897);  
			stream_96.Add(string_literal85);

			DebugLocation(223, 9);
			char_literal86=(IToken)Match(input,57,Follow._57_in_stmt_if899);  
			stream_57.Add(char_literal86);

			DebugLocation(223, 13);
			PushFollow(Follow._expr_in_stmt_if901);
			expr87=expr();
			PopFollow();

			stream_expr.Add(expr87.Tree);
			DebugLocation(223, 18);
			char_literal88=(IToken)Match(input,58,Follow._58_in_stmt_if903);  
			stream_58.Add(char_literal88);

			DebugLocation(223, 22);
			PushFollow(Follow._stmt_block_in_stmt_if905);
			stmt_block89=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block89.Tree);
			DebugLocation(223, 33);
			// SugarCpp.g:223:33: ( 'else' stmt_block )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==93))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:34: 'else' stmt_block
				{
				DebugLocation(223, 34);
				string_literal90=(IToken)Match(input,93,Follow._93_in_stmt_if908);  
				stream_93.Add(string_literal90);

				DebugLocation(223, 41);
				PushFollow(Follow._stmt_block_in_stmt_if910);
				stmt_block91=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block91.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 223:54: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(223, 57);
				// SugarCpp.g:223:57: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(223, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(223, 67);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(223, 72);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(223, 83);
				// SugarCpp.g:223:83: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(223, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 19);
			LeaveRule("stmt_if", 19);
			LeaveRule_stmt_if();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:226:1: stmt_while : 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 20);
		TraceIn("stmt_while", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal92 = default(IToken);
		IToken char_literal93 = default(IToken);
		IToken char_literal95 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block96 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal92_tree = default(CommonTree);
		CommonTree char_literal93_tree = default(CommonTree);
		CommonTree char_literal95_tree = default(CommonTree);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(226, 1);
		try
		{
			// SugarCpp.g:227:2: ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:227:4: 'while' '(' expr ')' stmt_block
			{
			DebugLocation(227, 4);
			string_literal92=(IToken)Match(input,104,Follow._104_in_stmt_while936);  
			stream_104.Add(string_literal92);

			DebugLocation(227, 12);
			char_literal93=(IToken)Match(input,57,Follow._57_in_stmt_while938);  
			stream_57.Add(char_literal93);

			DebugLocation(227, 16);
			PushFollow(Follow._expr_in_stmt_while940);
			expr94=expr();
			PopFollow();

			stream_expr.Add(expr94.Tree);
			DebugLocation(227, 21);
			char_literal95=(IToken)Match(input,58,Follow._58_in_stmt_while942);  
			stream_58.Add(char_literal95);

			DebugLocation(227, 25);
			PushFollow(Follow._stmt_block_in_stmt_while944);
			stmt_block96=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block96.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 227:36: -> ^( Stmt_While expr stmt_block )
			{
				DebugLocation(227, 39);
				// SugarCpp.g:227:39: ^( Stmt_While expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(227, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

				DebugLocation(227, 52);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(227, 57);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 20);
			LeaveRule("stmt_while", 20);
			LeaveRule_stmt_while();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:230:1: stmt_for : 'for' '(' expr ';' expr ';' expr ')' stmt_block -> ^( Stmt_For expr expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 21);
		TraceIn("stmt_for", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal97 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken char_literal102 = default(IToken);
		IToken char_literal104 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block105 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal97_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree char_literal102_tree = default(CommonTree);
		CommonTree char_literal104_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( 'for' '(' expr ';' expr ';' expr ')' stmt_block -> ^( Stmt_For expr expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:231:4: 'for' '(' expr ';' expr ';' expr ')' stmt_block
			{
			DebugLocation(231, 4);
			string_literal97=(IToken)Match(input,95,Follow._95_in_stmt_for965);  
			stream_95.Add(string_literal97);

			DebugLocation(231, 10);
			char_literal98=(IToken)Match(input,57,Follow._57_in_stmt_for967);  
			stream_57.Add(char_literal98);

			DebugLocation(231, 14);
			PushFollow(Follow._expr_in_stmt_for969);
			expr99=expr();
			PopFollow();

			stream_expr.Add(expr99.Tree);
			DebugLocation(231, 19);
			char_literal100=(IToken)Match(input,77,Follow._77_in_stmt_for971);  
			stream_77.Add(char_literal100);

			DebugLocation(231, 23);
			PushFollow(Follow._expr_in_stmt_for973);
			expr101=expr();
			PopFollow();

			stream_expr.Add(expr101.Tree);
			DebugLocation(231, 28);
			char_literal102=(IToken)Match(input,77,Follow._77_in_stmt_for975);  
			stream_77.Add(char_literal102);

			DebugLocation(231, 32);
			PushFollow(Follow._expr_in_stmt_for977);
			expr103=expr();
			PopFollow();

			stream_expr.Add(expr103.Tree);
			DebugLocation(231, 37);
			char_literal104=(IToken)Match(input,58,Follow._58_in_stmt_for979);  
			stream_58.Add(char_literal104);

			DebugLocation(231, 41);
			PushFollow(Follow._stmt_block_in_stmt_for981);
			stmt_block105=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block105.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 231:52: -> ^( Stmt_For expr expr expr stmt_block )
			{
				DebugLocation(231, 55);
				// SugarCpp.g:231:55: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(231, 57);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(231, 66);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(231, 71);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(231, 76);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(231, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 21);
			LeaveRule("stmt_for", 21);
			LeaveRule_stmt_for();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:234:1: ident_list : IDENT ( ',' IDENT )* -> ^( Ident_List ( IDENT )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 22);
		TraceIn("ident_list", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT106 = default(IToken);
		IToken char_literal107 = default(IToken);
		IToken IDENT108 = default(IToken);

		CommonTree IDENT106_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree IDENT108_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(234, 1);
		try
		{
			// SugarCpp.g:235:2: ( IDENT ( ',' IDENT )* -> ^( Ident_List ( IDENT )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:235:4: IDENT ( ',' IDENT )*
			{
			DebugLocation(235, 4);
			IDENT106=(IToken)Match(input,IDENT,Follow._IDENT_in_ident_list1006);  
			stream_IDENT.Add(IDENT106);

			DebugLocation(235, 10);
			// SugarCpp.g:235:10: ( ',' IDENT )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==64))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:235:11: ',' IDENT
					{
					DebugLocation(235, 11);
					char_literal107=(IToken)Match(input,64,Follow._64_in_ident_list1009);  
					stream_64.Add(char_literal107);

					DebugLocation(235, 15);
					IDENT108=(IToken)Match(input,IDENT,Follow._IDENT_in_ident_list1011);  
					stream_IDENT.Add(IDENT108);


					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 235:23: -> ^( Ident_List ( IDENT )+ )
			{
				DebugLocation(235, 26);
				// SugarCpp.g:235:26: ^( Ident_List ( IDENT )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(235, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(235, 39);
				if (!(stream_IDENT.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_IDENT.HasNext )
				{
					DebugLocation(235, 39);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

				}
				stream_IDENT.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 22);
			LeaveRule("ident_list", 22);
			LeaveRule_ident_list();
		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:238:1: stmt_alloc : ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 23);
		TraceIn("stmt_alloc", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal110 = default(IToken);
		IToken char_literal112 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr113 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree char_literal112_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(238, 1);
		try
		{
			// SugarCpp.g:239:2: ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:239:4: ident_list ':' type_name ( '=' expr )?
			{
			DebugLocation(239, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc1033);
			ident_list109=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list109.Tree);
			DebugLocation(239, 15);
			char_literal110=(IToken)Match(input,74,Follow._74_in_stmt_alloc1035);  
			stream_74.Add(char_literal110);

			DebugLocation(239, 19);
			PushFollow(Follow._type_name_in_stmt_alloc1037);
			type_name111=type_name();
			PopFollow();

			stream_type_name.Add(type_name111.Tree);
			DebugLocation(239, 29);
			// SugarCpp.g:239:29: ( '=' expr )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==82))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:239:30: '=' expr
				{
				DebugLocation(239, 30);
				char_literal112=(IToken)Match(input,82,Follow._82_in_stmt_alloc1040);  
				stream_82.Add(char_literal112);

				DebugLocation(239, 34);
				PushFollow(Follow._expr_in_stmt_alloc1042);
				expr113=expr();
				PopFollow();

				stream_expr.Add(expr113.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }



			{
			// AST REWRITE
			// elements: type_name, expr, ident_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 239:41: -> ^( Expr_Alloc type_name ident_list ( expr )? )
			{
				DebugLocation(239, 44);
				// SugarCpp.g:239:44: ^( Expr_Alloc type_name ident_list ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(239, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

				DebugLocation(239, 57);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(239, 67);
				adaptor.AddChild(root_1, stream_ident_list.NextTree());
				DebugLocation(239, 78);
				// SugarCpp.g:239:78: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(239, 78);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 23);
			LeaveRule("stmt_alloc", 23);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:242:1: stmt_modify : lvalue ( modify_expr_op ^ cond_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 24);
		TraceIn("stmt_modify", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr116 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(242, 1);
		try
		{
			// SugarCpp.g:243:2: ( lvalue ( modify_expr_op ^ cond_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:243:4: lvalue ( modify_expr_op ^ cond_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(243, 4);
			PushFollow(Follow._lvalue_in_stmt_modify1068);
			lvalue114=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue114.Tree);
			DebugLocation(243, 11);
			// SugarCpp.g:243:11: ( modify_expr_op ^ cond_expr )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==53||LA31_0==56||LA31_0==60||LA31_0==63||LA31_0==67||LA31_0==73||LA31_0==76||LA31_0==80||LA31_0==82||LA31_0==88||LA31_0==92||LA31_0==106))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:243:12: modify_expr_op ^ cond_expr
				{
				DebugLocation(243, 26);
				PushFollow(Follow._modify_expr_op_in_stmt_modify1071);
				modify_expr_op115=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op115.Tree, root_0);
				DebugLocation(243, 28);
				PushFollow(Follow._cond_expr_in_stmt_modify1074);
				cond_expr116=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr116.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 24);
			LeaveRule("stmt_modify", 24);
			LeaveRule_stmt_modify();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:246:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 25);
		TraceIn("expr", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr117 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(246, 1);
		try
		{
			// SugarCpp.g:247:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:247:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(247, 4);
			PushFollow(Follow._lambda_expr_in_expr1087);
			lambda_expr117=lambda_expr();
			PopFollow();

			adaptor.AddChild(root_0, lambda_expr117.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 25);
			LeaveRule("expr", 25);
			LeaveRule_expr();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:250:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 26);
		TraceIn("lambda_expr", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal118 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken string_literal121 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr123 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		CommonTree string_literal121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(250, 1);
		try
		{
			// SugarCpp.g:251:2: ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr )
			int alt32=2;
			try { DebugEnterDecision(32, false);
			try
			{
				alt32 = dfa32.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:251:4: '(' func_args ')' '=>' modify_expr
				{
				DebugLocation(251, 4);
				char_literal118=(IToken)Match(input,57,Follow._57_in_lambda_expr1098);  
				stream_57.Add(char_literal118);

				DebugLocation(251, 8);
				PushFollow(Follow._func_args_in_lambda_expr1100);
				func_args119=func_args();
				PopFollow();

				stream_func_args.Add(func_args119.Tree);
				DebugLocation(251, 18);
				char_literal120=(IToken)Match(input,58,Follow._58_in_lambda_expr1102);  
				stream_58.Add(char_literal120);

				DebugLocation(251, 22);
				string_literal121=(IToken)Match(input,84,Follow._84_in_lambda_expr1104);  
				stream_84.Add(string_literal121);

				DebugLocation(251, 27);
				PushFollow(Follow._modify_expr_in_lambda_expr1106);
				modify_expr122=modify_expr();
				PopFollow();

				stream_modify_expr.Add(modify_expr122.Tree);


				{
				// AST REWRITE
				// elements: func_args, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 251:39: -> ^( Expr_Lambda func_args modify_expr )
				{
					DebugLocation(251, 42);
					// SugarCpp.g:251:42: ^( Expr_Lambda func_args modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(251, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(251, 56);
					adaptor.AddChild(root_1, stream_func_args.NextTree());
					DebugLocation(251, 66);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:252:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(252, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr1121);
				modify_expr123=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr123.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 26);
			LeaveRule("lambda_expr", 26);
			LeaveRule_lambda_expr();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:255:1: modify_expr_op : ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 27);
		TraceIn("modify_expr_op", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set124 = default(IToken);

		CommonTree set124_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(255, 99);
		try
		{
			// SugarCpp.g:255:15: ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(255, 15);

			set124=(IToken)input.LT(1);
			if (input.LA(1)==53||input.LA(1)==56||input.LA(1)==60||input.LA(1)==63||input.LA(1)==67||input.LA(1)==73||input.LA(1)==76||input.LA(1)==80||input.LA(1)==82||input.LA(1)==88||input.LA(1)==92||input.LA(1)==106)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set124));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 27);
			LeaveRule("modify_expr_op", 27);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(255, 99);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:256:1: modify_expr : cond_expr ( modify_expr_op ^ modify_expr )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 28);
		TraceIn("modify_expr", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr127 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(256, 1);
		try
		{
			// SugarCpp.g:257:2: ( cond_expr ( modify_expr_op ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:257:4: cond_expr ( modify_expr_op ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(257, 4);
			PushFollow(Follow._cond_expr_in_modify_expr1183);
			cond_expr125=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr125.Tree);
			DebugLocation(257, 14);
			// SugarCpp.g:257:14: ( modify_expr_op ^ modify_expr )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==53||LA33_0==56||LA33_0==60||LA33_0==63||LA33_0==67||LA33_0==73||LA33_0==76||LA33_0==80||LA33_0==82||LA33_0==88||LA33_0==92||LA33_0==106))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:15: modify_expr_op ^ modify_expr
				{
				DebugLocation(257, 29);
				PushFollow(Follow._modify_expr_op_in_modify_expr1186);
				modify_expr_op126=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op126.Tree, root_0);
				DebugLocation(257, 31);
				PushFollow(Follow._modify_expr_in_modify_expr1189);
				modify_expr127=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr127.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 28);
			LeaveRule("modify_expr", 28);
			LeaveRule_modify_expr();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:260:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 29);
		TraceIn("cond_expr_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr128 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(260, 26);
		try
		{
			// SugarCpp.g:260:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:260:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(260, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item1200);
			cond_expr128=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr128.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 29);
			LeaveRule("cond_expr_item", 29);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(260, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:261:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 30);
		TraceIn("cond_expr", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal129 = default(IToken);
		IToken string_literal130 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal129_tree = default(CommonTree);
		CommonTree string_literal130_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(261, 1);
		try
		{
			// SugarCpp.g:262:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:262:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(262, 4);
			// SugarCpp.g:262:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:262:5: a= or_expr
			{
			DebugLocation(262, 6);
			PushFollow(Follow._or_expr_in_cond_expr1212);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 262:15: -> $a
			{
				DebugLocation(262, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(262, 22);
			// SugarCpp.g:262:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==96))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(262, 23);
				string_literal129=(IToken)Match(input,96,Follow._96_in_cond_expr1221);  
				stream_96.Add(string_literal129);

				DebugLocation(262, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr1225);
				a=cond_expr_item();
				PopFollow();

				stream_cond_expr_item.Add(a.Tree);
				DebugLocation(262, 45);
				string_literal130=(IToken)Match(input,93,Follow._93_in_cond_expr1227);  
				stream_93.Add(string_literal130);

				DebugLocation(262, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr1231);
				b=cond_expr_item();
				PopFollow();

				stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, a, cond_expr
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 262:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(262, 72);
					// SugarCpp.g:262:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(262, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(262, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(262, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(262, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 30);
			LeaveRule("cond_expr", 30);
			LeaveRule_cond_expr();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:265:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 31);
		TraceIn("or_expr", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(265, 1);
		try
		{
			// SugarCpp.g:266:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:266:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(266, 4);
			// SugarCpp.g:266:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:266:5: a= and_expr
			{
			DebugLocation(266, 6);
			PushFollow(Follow._and_expr_in_or_expr1262);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 266:16: -> $a
			{
				DebugLocation(266, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(266, 23);
			// SugarCpp.g:266:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==107))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:266:24: '||' b= and_expr
					{
					DebugLocation(266, 24);
					string_literal131=(IToken)Match(input,107,Follow._107_in_or_expr1271);  
					stream_107.Add(string_literal131);

					DebugLocation(266, 30);
					PushFollow(Follow._and_expr_in_or_expr1275);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 107, or_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 266:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(266, 43);
						// SugarCpp.g:266:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(266, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(266, 54);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(266, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(266, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 31);
			LeaveRule("or_expr", 31);
			LeaveRule_or_expr();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:269:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 32);
		TraceIn("and_expr", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(269, 1);
		try
		{
			// SugarCpp.g:270:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:270:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(270, 4);
			// SugarCpp.g:270:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:270:5: a= bit_or
			{
			DebugLocation(270, 6);
			PushFollow(Follow._bit_or_in_and_expr1305);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 270:14: -> $a
			{
				DebugLocation(270, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(270, 21);
			// SugarCpp.g:270:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==54))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:270:22: '&&' b= bit_or
					{
					DebugLocation(270, 22);
					string_literal132=(IToken)Match(input,54,Follow._54_in_and_expr1314);  
					stream_54.Add(string_literal132);

					DebugLocation(270, 28);
					PushFollow(Follow._bit_or_in_and_expr1318);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 54, and_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 270:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(270, 39);
						// SugarCpp.g:270:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(270, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(270, 50);
						adaptor.AddChild(root_1, stream_54.NextNode());
						DebugLocation(270, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(270, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 32);
			LeaveRule("and_expr", 32);
			LeaveRule_and_expr();
		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:273:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 33);
		TraceIn("bit_or", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(273, 1);
		try
		{
			// SugarCpp.g:274:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:274:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(274, 4);
			// SugarCpp.g:274:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:274:5: a= bit_xor
			{
			DebugLocation(274, 6);
			PushFollow(Follow._bit_xor_in_bit_or1348);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 274:15: -> $a
			{
				DebugLocation(274, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(274, 22);
			// SugarCpp.g:274:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==105))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:23: '|' b= bit_xor
					{
					DebugLocation(274, 23);
					char_literal133=(IToken)Match(input,105,Follow._105_in_bit_or1357);  
					stream_105.Add(char_literal133);

					DebugLocation(274, 28);
					PushFollow(Follow._bit_xor_in_bit_or1361);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 105, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 274:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(274, 40);
						// SugarCpp.g:274:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(274, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(274, 51);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(274, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(274, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 33);
			LeaveRule("bit_or", 33);
			LeaveRule_bit_or();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:277:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 34);
		TraceIn("bit_xor", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(277, 1);
		try
		{
			// SugarCpp.g:278:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:278:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(278, 4);
			// SugarCpp.g:278:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:278:5: a= bit_and
			{
			DebugLocation(278, 6);
			PushFollow(Follow._bit_and_in_bit_xor1391);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 278:15: -> $a
			{
				DebugLocation(278, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(278, 22);
			// SugarCpp.g:278:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==91))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:278:23: '^' b= bit_and
					{
					DebugLocation(278, 23);
					char_literal134=(IToken)Match(input,91,Follow._91_in_bit_xor1400);  
					stream_91.Add(char_literal134);

					DebugLocation(278, 28);
					PushFollow(Follow._bit_and_in_bit_xor1404);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_xor, 91
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 278:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(278, 40);
						// SugarCpp.g:278:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(278, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(278, 51);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(278, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(278, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 34);
			LeaveRule("bit_xor", 34);
			LeaveRule_bit_xor();
		}
		DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:281:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 35);
		TraceIn("bit_and", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(281, 1);
		try
		{
			// SugarCpp.g:282:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:282:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(282, 4);
			// SugarCpp.g:282:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:282:5: a= cmp_equ_expr
			{
			DebugLocation(282, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and1434);
			a=cmp_equ_expr();
			PopFollow();

			stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 282:20: -> $a
			{
				DebugLocation(282, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(282, 27);
			// SugarCpp.g:282:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==55))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:282:28: '&' b= cmp_equ_expr
					{
					DebugLocation(282, 28);
					char_literal135=(IToken)Match(input,55,Follow._55_in_bit_and1443);  
					stream_55.Add(char_literal135);

					DebugLocation(282, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and1447);
					b=cmp_equ_expr();
					PopFollow();

					stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, b, 55
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 282:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(282, 50);
						// SugarCpp.g:282:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(282, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(282, 61);
						adaptor.AddChild(root_1, stream_55.NextNode());
						DebugLocation(282, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(282, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 35);
			LeaveRule("bit_and", 35);
			LeaveRule_bit_and();
		}
		DebugLocation(283, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:285:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 36);
		TraceIn("cmp_equ_expr_op", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set136 = default(IToken);

		CommonTree set136_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(285, 29);
		try
		{
			// SugarCpp.g:285:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(285, 16);

			set136=(IToken)input.LT(1);
			if (input.LA(1)==51||input.LA(1)==83)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set136));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 36);
			LeaveRule("cmp_equ_expr_op", 36);
			LeaveRule_cmp_equ_expr_op();
		}
		DebugLocation(285, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:286:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )* ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 37);
		TraceIn("cmp_equ_expr", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op137 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(286, 1);
		try
		{
			// SugarCpp.g:287:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:287:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )*
			{
			DebugLocation(287, 4);
			// SugarCpp.g:287:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:287:5: a= cmp_expr
			{
			DebugLocation(287, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr1488);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:16: -> $a
			{
				DebugLocation(287, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(287, 23);
			// SugarCpp.g:287:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==51||LA40_0==83))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:287:24: cmp_equ_expr_op b= cmp_expr
					{
					DebugLocation(287, 24);
					PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr1497);
					cmp_equ_expr_op137=cmp_equ_expr_op();
					PopFollow();

					stream_cmp_equ_expr_op.Add(cmp_equ_expr_op137.Tree);
					DebugLocation(287, 41);
					PushFollow(Follow._cmp_expr_in_cmp_equ_expr1501);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: cmp_equ_expr_op, cmp_equ_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 287:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
						DebugLocation(287, 54);
						// SugarCpp.g:287:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(287, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(287, 65);
						adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
						DebugLocation(287, 82);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(287, 96);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 37);
			LeaveRule("cmp_equ_expr", 37);
			LeaveRule_cmp_equ_expr();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr_op();
	partial void LeaveRule_cmp_expr_op();

	// $ANTLR start "cmp_expr_op"
	// SugarCpp.g:290:1: cmp_expr_op : ( '<' | '<=' | '>' | '>=' );
	[GrammarRule("cmp_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op()
	{
		EnterRule_cmp_expr_op();
		EnterRule("cmp_expr_op", 38);
		TraceIn("cmp_expr_op", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set138 = default(IToken);

		CommonTree set138_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_expr_op");
		DebugLocation(290, 37);
		try
		{
			// SugarCpp.g:290:12: ( '<' | '<=' | '>' | '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(290, 12);

			set138=(IToken)input.LT(1);
			if (input.LA(1)==78||input.LA(1)==81||(input.LA(1)>=85 && input.LA(1)<=86))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set138));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr_op", 38);
			LeaveRule("cmp_expr_op", 38);
			LeaveRule_cmp_expr_op();
		}
		DebugLocation(290, 37);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_expr_op"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:291:1: cmp_expr : (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )* ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 39);
		TraceIn("cmp_expr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op139 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(291, 1);
		try
		{
			// SugarCpp.g:292:2: ( (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:292:4: (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )*
			{
			DebugLocation(292, 4);
			// SugarCpp.g:292:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:292:5: a= shift_expr
			{
			DebugLocation(292, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr1551);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 292:18: -> $a
			{
				DebugLocation(292, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(292, 25);
			// SugarCpp.g:292:25: ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==78||LA41_0==81||(LA41_0>=85 && LA41_0<=86)))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:292:26: cmp_expr_op b= shift_expr
					{
					DebugLocation(292, 26);
					PushFollow(Follow._cmp_expr_op_in_cmp_expr1560);
					cmp_expr_op139=cmp_expr_op();
					PopFollow();

					stream_cmp_expr_op.Add(cmp_expr_op139.Tree);
					DebugLocation(292, 39);
					PushFollow(Follow._shift_expr_in_cmp_expr1564);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr_op, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 292:51: -> ^( Expr_Bin cmp_expr_op $cmp_expr $b)
					{
						DebugLocation(292, 54);
						// SugarCpp.g:292:54: ^( Expr_Bin cmp_expr_op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(292, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(292, 65);
						adaptor.AddChild(root_1, stream_cmp_expr_op.NextTree());
						DebugLocation(292, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(292, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 39);
			LeaveRule("cmp_expr", 39);
			LeaveRule_cmp_expr();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:295:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 40);
		TraceIn("shift_expr_op", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set140 = default(IToken);

		CommonTree set140_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(295, 27);
		try
		{
			// SugarCpp.g:295:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(295, 14);

			set140=(IToken)input.LT(1);
			if (input.LA(1)==79||input.LA(1)==87)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set140));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 40);
			LeaveRule("shift_expr_op", 40);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(295, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:296:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 41);
		TraceIn("shift_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(296, 1);
		try
		{
			// SugarCpp.g:297:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:297:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(297, 4);
			// SugarCpp.g:297:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:297:5: a= add_expr
			{
			DebugLocation(297, 6);
			PushFollow(Follow._add_expr_in_shift_expr1605);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 297:16: -> $a
			{
				DebugLocation(297, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(297, 23);
			// SugarCpp.g:297:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==79||LA42_0==87))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:297:24: shift_expr_op b= add_expr
					{
					DebugLocation(297, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr1614);
					shift_expr_op141=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op141.Tree);
					DebugLocation(297, 39);
					PushFollow(Follow._add_expr_in_shift_expr1618);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr_op, b, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 297:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(297, 52);
						// SugarCpp.g:297:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(297, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(297, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(297, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(297, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 41);
			LeaveRule("shift_expr", 41);
			LeaveRule_shift_expr();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:300:1: add_expr : (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 42);
		TraceIn("add_expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal142 = default(IToken);
		IToken char_literal143 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal142_tree = default(CommonTree);
		CommonTree char_literal143_tree = default(CommonTree);
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(300, 1);
		try
		{
			// SugarCpp.g:301:2: ( (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:301:4: (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(301, 4);
			// SugarCpp.g:301:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:301:5: a= infix_expr
			{
			DebugLocation(301, 6);
			PushFollow(Follow._infix_expr_in_add_expr1648);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 301:18: -> $a
			{
				DebugLocation(301, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(301, 25);
			// SugarCpp.g:301:25: ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=3;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==61))
				{
					alt43 = 1;
				}
				else if ((LA43_0==65))
				{
					alt43 = 2;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:301:27: '+' b= infix_expr
					{
					DebugLocation(301, 27);
					char_literal142=(IToken)Match(input,61,Follow._61_in_add_expr1658);  
					stream_61.Add(char_literal142);

					DebugLocation(301, 32);
					PushFollow(Follow._infix_expr_in_add_expr1662);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, 61, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 301:44: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(301, 47);
						// SugarCpp.g:301:47: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(301, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(301, 58);
						adaptor.AddChild(root_1, stream_61.NextNode());
						DebugLocation(301, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(301, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:302:12: '-' b= infix_expr
					{
					DebugLocation(302, 12);
					char_literal143=(IToken)Match(input,65,Follow._65_in_add_expr1689);  
					stream_65.Add(char_literal143);

					DebugLocation(302, 17);
					PushFollow(Follow._infix_expr_in_add_expr1693);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, 65, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 302:29: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(302, 32);
						// SugarCpp.g:302:32: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(302, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(302, 43);
						adaptor.AddChild(root_1, stream_65.NextNode());
						DebugLocation(302, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(302, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 42);
			LeaveRule("add_expr", 42);
			LeaveRule_add_expr();
		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:306:1: infix_expr : (a= mul_expr -> $a) ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 43);
		TraceIn("infix_expr", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken Infix_Func144 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree Infix_Func144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Infix_Func=new RewriteRuleITokenStream(adaptor,"token Infix_Func");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(306, 1);
		try
		{
			// SugarCpp.g:307:2: ( (a= mul_expr -> $a) ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:307:4: (a= mul_expr -> $a) ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )*
			{
			DebugLocation(307, 4);
			// SugarCpp.g:307:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:307:5: a= mul_expr
			{
			DebugLocation(307, 6);
			PushFollow(Follow._mul_expr_in_infix_expr1733);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 307:16: -> $a
			{
				DebugLocation(307, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(307, 23);
			// SugarCpp.g:307:23: ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==Infix_Func))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:307:25: Infix_Func b= mul_expr
					{
					DebugLocation(307, 25);
					Infix_Func144=(IToken)Match(input,Infix_Func,Follow._Infix_Func_in_infix_expr1743);  
					stream_Infix_Func.Add(Infix_Func144);

					DebugLocation(307, 37);
					PushFollow(Follow._mul_expr_in_infix_expr1747);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, Infix_Func, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 307:48: -> ^( Expr_Infix Infix_Func $infix_expr $b)
					{
						DebugLocation(307, 51);
						// SugarCpp.g:307:51: ^( Expr_Infix Infix_Func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(307, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(307, 64);
						adaptor.AddChild(root_1, stream_Infix_Func.NextNode());
						DebugLocation(307, 76);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(307, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 43);
			LeaveRule("infix_expr", 43);
			LeaveRule_infix_expr();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:310:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 44);
		TraceIn("mul_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal145 = default(IToken);
		IToken char_literal146 = default(IToken);
		IToken char_literal147 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal145_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		CommonTree char_literal147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(310, 1);
		try
		{
			// SugarCpp.g:311:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(311, 4);
			// SugarCpp.g:311:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:311:5: a= selector_expr
			{
			DebugLocation(311, 6);
			PushFollow(Follow._selector_expr_in_mul_expr1779);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 311:21: -> $a
			{
				DebugLocation(311, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(311, 28);
			// SugarCpp.g:311:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=4;
				try { DebugEnterDecision(45, false);
				switch (input.LA(1))
				{
				case 59:
					{
					alt45 = 1;
					}
					break;
				case 72:
					{
					alt45 = 2;
					}
					break;
				case 52:
					{
					alt45 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:311:30: '*' b= selector_expr
					{
					DebugLocation(311, 30);
					char_literal145=(IToken)Match(input,59,Follow._59_in_mul_expr1789);  
					stream_59.Add(char_literal145);

					DebugLocation(311, 35);
					PushFollow(Follow._selector_expr_in_mul_expr1793);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 59, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 311:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(311, 53);
						// SugarCpp.g:311:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(311, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(311, 64);
						adaptor.AddChild(root_1, stream_59.NextNode());
						DebugLocation(311, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(311, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:312:15: '/' b= selector_expr
					{
					DebugLocation(312, 15);
					char_literal146=(IToken)Match(input,72,Follow._72_in_mul_expr1823);  
					stream_72.Add(char_literal146);

					DebugLocation(312, 20);
					PushFollow(Follow._selector_expr_in_mul_expr1827);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 72, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 312:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(312, 38);
						// SugarCpp.g:312:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(312, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(312, 49);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(312, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(312, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:313:15: '%' b= selector_expr
					{
					DebugLocation(313, 15);
					char_literal147=(IToken)Match(input,52,Follow._52_in_mul_expr1857);  
					stream_52.Add(char_literal147);

					DebugLocation(313, 20);
					PushFollow(Follow._selector_expr_in_mul_expr1861);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 52, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 313:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(313, 38);
						// SugarCpp.g:313:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(313, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(313, 49);
						adaptor.AddChild(root_1, stream_52.NextNode());
						DebugLocation(313, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(313, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 44);
			LeaveRule("mul_expr", 44);
			LeaveRule_mul_expr();
		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:317:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 45);
		TraceIn("selector_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken b = default(IToken);
		IToken string_literal148 = default(IToken);
		IToken string_literal149 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree b_tree = default(CommonTree);
		CommonTree string_literal148_tree = default(CommonTree);
		CommonTree string_literal149_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(317, 1);
		try
		{
			// SugarCpp.g:318:2: ( (a= prefix_expr -> $a) ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:318:4: (a= prefix_expr -> $a) ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(318, 4);
			// SugarCpp.g:318:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:318:5: a= prefix_expr
			{
			DebugLocation(318, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr1904);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 318:19: -> $a
			{
				DebugLocation(318, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(318, 26);
			// SugarCpp.g:318:26: ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=3;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==69))
				{
					alt46 = 1;
				}
				else if ((LA46_0==71))
				{
					alt46 = 2;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:318:28: '->*' b= IDENT
					{
					DebugLocation(318, 28);
					string_literal148=(IToken)Match(input,69,Follow._69_in_selector_expr1914);  
					stream_69.Add(string_literal148);

					DebugLocation(318, 35);
					b=(IToken)Match(input,IDENT,Follow._IDENT_in_selector_expr1918);  
					stream_IDENT.Add(b);



					{
					// AST REWRITE
					// elements: b, selector_expr, 69
					// token labels: b
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_b=new RewriteRuleITokenStream(adaptor,"token b",b);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 318:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(318, 45);
						// SugarCpp.g:318:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(318, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(318, 59);
						adaptor.AddChild(root_1, stream_69.NextNode());
						DebugLocation(318, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(318, 81);
						adaptor.AddChild(root_1, stream_b.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:319:13: '.*' b= IDENT
					{
					DebugLocation(319, 13);
					string_literal149=(IToken)Match(input,71,Follow._71_in_selector_expr1946);  
					stream_71.Add(string_literal149);

					DebugLocation(319, 20);
					b=(IToken)Match(input,IDENT,Follow._IDENT_in_selector_expr1951);  
					stream_IDENT.Add(b);



					{
					// AST REWRITE
					// elements: b, 71, selector_expr
					// token labels: b
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_b=new RewriteRuleITokenStream(adaptor,"token b",b);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 319:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(319, 30);
						// SugarCpp.g:319:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(319, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(319, 44);
						adaptor.AddChild(root_1, stream_71.NextNode());
						DebugLocation(319, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(319, 66);
						adaptor.AddChild(root_1, stream_b.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 45);
			LeaveRule("selector_expr", 45);
			LeaveRule_selector_expr();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:323:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 46);
		TraceIn("prefix_expr_op", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set150 = default(IToken);

		CommonTree set150_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(323, 64);
		try
		{
			// SugarCpp.g:323:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(323, 15);

			set150=(IToken)input.LT(1);
			if (input.LA(1)==50||input.LA(1)==55||input.LA(1)==59||(input.LA(1)>=61 && input.LA(1)<=62)||(input.LA(1)>=65 && input.LA(1)<=66)||input.LA(1)==108)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set150));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 46);
			LeaveRule("prefix_expr_op", 46);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(323, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:324:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_name ( expr_list )? ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 47);
		TraceIn("prefix_expr", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal153 = default(IToken);
		IToken char_literal155 = default(IToken);
		IToken char_literal157 = default(IToken);
		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr161 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal153_tree = default(CommonTree);
		CommonTree char_literal155_tree = default(CommonTree);
		CommonTree char_literal157_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree char_literal160_tree = default(CommonTree);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(324, 1);
		try
		{
			// SugarCpp.g:325:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_name ( expr_list )? ) ) | suffix_expr )
			int alt50=3;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case 50:
			case 55:
			case 59:
			case 61:
			case 62:
			case 65:
			case 66:
			case 108:
				{
				alt50 = 1;
				}
				break;
			case 99:
				{
				alt50 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 57:
				{
				alt50 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:325:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(325, 4);
				// SugarCpp.g:325:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:325:5: prefix_expr_op prefix_expr
				{
				DebugLocation(325, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr2026);
				prefix_expr_op151=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op151.Tree);
				DebugLocation(325, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr2028);
				prefix_expr152=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr152.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 325:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(325, 36);
					// SugarCpp.g:325:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(325, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(325, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(325, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:326:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_name ( expr_list )? ) )
				{
				DebugLocation(326, 4);
				string_literal153=(IToken)Match(input,99,Follow._99_in_prefix_expr2044);  
				stream_99.Add(string_literal153);

				DebugLocation(326, 10);
				PushFollow(Follow._type_name_in_prefix_expr2046);
				type_name154=type_name();
				PopFollow();

				stream_type_name.Add(type_name154.Tree);
				DebugLocation(326, 20);
				// SugarCpp.g:326:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_name ( expr_list )? ) )
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==57))
				{
					alt49 = 1;
				}
				else if ((LA49_0==89))
				{
					alt49 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:326:22: '(' ( expr_list )? ')'
					{
					DebugLocation(326, 22);
					char_literal155=(IToken)Match(input,57,Follow._57_in_prefix_expr2050);  
					stream_57.Add(char_literal155);

					DebugLocation(326, 26);
					// SugarCpp.g:326:26: ( expr_list )?
					int alt47=2;
					try { DebugEnterSubRule(47);
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==IDENT||LA47_0==NUMBER||LA47_0==STRING||LA47_0==50||LA47_0==55||LA47_0==57||LA47_0==59||(LA47_0>=61 && LA47_0<=62)||(LA47_0>=65 && LA47_0<=66)||LA47_0==99||LA47_0==108))
					{
						alt47 = 1;
					}
					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:326:26: expr_list
						{
						DebugLocation(326, 26);
						PushFollow(Follow._expr_list_in_prefix_expr2052);
						expr_list156=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list156.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(47); }

					DebugLocation(326, 37);
					char_literal157=(IToken)Match(input,58,Follow._58_in_prefix_expr2055);  
					stream_58.Add(char_literal157);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 326:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(326, 44);
						// SugarCpp.g:326:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(326, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(326, 61);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(326, 71);
						// SugarCpp.g:326:71: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(326, 71);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:327:22: '[' ( expr_list )? ']'
					{
					DebugLocation(327, 22);
					char_literal158=(IToken)Match(input,89,Follow._89_in_prefix_expr2090);  
					stream_89.Add(char_literal158);

					DebugLocation(327, 26);
					// SugarCpp.g:327:26: ( expr_list )?
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==IDENT||LA48_0==NUMBER||LA48_0==STRING||LA48_0==50||LA48_0==55||LA48_0==57||LA48_0==59||(LA48_0>=61 && LA48_0<=62)||(LA48_0>=65 && LA48_0<=66)||LA48_0==99||LA48_0==108))
					{
						alt48 = 1;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:327:26: expr_list
						{
						DebugLocation(327, 26);
						PushFollow(Follow._expr_list_in_prefix_expr2092);
						expr_list159=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list159.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(327, 37);
					char_literal160=(IToken)Match(input,90,Follow._90_in_prefix_expr2095);  
					stream_90.Add(char_literal160);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 327:41: -> ^( Expr_New_Array type_name ( expr_list )? )
					{
						DebugLocation(327, 44);
						// SugarCpp.g:327:44: ^( Expr_New_Array type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(327, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(327, 61);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(327, 71);
						// SugarCpp.g:327:71: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(327, 71);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(49); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:329:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(329, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr2120);
				suffix_expr161=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr161.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 47);
			LeaveRule("prefix_expr", 47);
			LeaveRule_prefix_expr();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:332:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 48);
		TraceIn("expr_list", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal163 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr164 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal163_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:333:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(333, 4);
			PushFollow(Follow._expr_in_expr_list2132);
			expr162=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr162.Tree);
			DebugLocation(333, 9);
			// SugarCpp.g:333:9: ( ',' ! expr )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==64))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:333:10: ',' ! expr
					{
					DebugLocation(333, 13);
					char_literal163=(IToken)Match(input,64,Follow._64_in_expr_list2135); 
					DebugLocation(333, 15);
					PushFollow(Follow._expr_in_expr_list2138);
					expr164=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr164.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 48);
			LeaveRule("expr_list", 48);
			LeaveRule_expr_list();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:336:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $suffix_expr expr ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 49);
		TraceIn("suffix_expr", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal165 = default(IToken);
		IToken string_literal166 = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken IDENT168 = default(IToken);
		IToken string_literal169 = default(IToken);
		IToken IDENT170 = default(IToken);
		IToken string_literal171 = default(IToken);
		IToken IDENT172 = default(IToken);
		IToken char_literal173 = default(IToken);
		IToken char_literal175 = default(IToken);
		IToken char_literal176 = default(IToken);
		IToken char_literal178 = default(IToken);
		IToken char_literal179 = default(IToken);
		IToken IDENT180 = default(IToken);
		IToken char_literal181 = default(IToken);
		IToken char_literal183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list182 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal165_tree = default(CommonTree);
		CommonTree string_literal166_tree = default(CommonTree);
		CommonTree char_literal167_tree = default(CommonTree);
		CommonTree IDENT168_tree = default(CommonTree);
		CommonTree string_literal169_tree = default(CommonTree);
		CommonTree IDENT170_tree = default(CommonTree);
		CommonTree string_literal171_tree = default(CommonTree);
		CommonTree IDENT172_tree = default(CommonTree);
		CommonTree char_literal173_tree = default(CommonTree);
		CommonTree char_literal175_tree = default(CommonTree);
		CommonTree char_literal176_tree = default(CommonTree);
		CommonTree char_literal178_tree = default(CommonTree);
		CommonTree char_literal179_tree = default(CommonTree);
		CommonTree IDENT180_tree = default(CommonTree);
		CommonTree char_literal181_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(336, 1);
		try
		{
			// SugarCpp.g:337:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $suffix_expr expr ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:337:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $suffix_expr expr ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )*
			{
			DebugLocation(337, 4);
			// SugarCpp.g:337:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:337:5: a= atom_expr
			{
			DebugLocation(337, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr2154);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 337:17: -> $a
			{
				DebugLocation(337, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(337, 24);
			// SugarCpp.g:337:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $suffix_expr expr ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=9;
				try { DebugEnterDecision(54, false);
				switch (input.LA(1))
				{
				case 62:
					{
					alt54 = 1;
					}
					break;
				case 66:
					{
					alt54 = 2;
					}
					break;
				case 70:
					{
					alt54 = 3;
					}
					break;
				case 68:
					{
					alt54 = 4;
					}
					break;
				case 75:
					{
					alt54 = 5;
					}
					break;
				case 57:
					{
					alt54 = 6;
					}
					break;
				case 89:
					{
					alt54 = 7;
					}
					break;
				case 74:
					{
					alt54 = 8;
					}
					break;
				}

				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:337:26: '++'
					{
					DebugLocation(337, 26);
					string_literal165=(IToken)Match(input,62,Follow._62_in_suffix_expr2164);  
					stream_62.Add(string_literal165);



					{
					// AST REWRITE
					// elements: suffix_expr, 62
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 337:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(337, 34);
						// SugarCpp.g:337:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(337, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(337, 48);
						adaptor.AddChild(root_1, stream_62.NextNode());
						DebugLocation(337, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:338:14: '--'
					{
					DebugLocation(338, 14);
					string_literal166=(IToken)Match(input,66,Follow._66_in_suffix_expr2190);  
					stream_66.Add(string_literal166);



					{
					// AST REWRITE
					// elements: suffix_expr, 66
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 338:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(338, 22);
						// SugarCpp.g:338:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(338, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(338, 36);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(338, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:339:11: '.' IDENT
					{
					DebugLocation(339, 11);
					char_literal167=(IToken)Match(input,70,Follow._70_in_suffix_expr2213);  
					stream_70.Add(char_literal167);

					DebugLocation(339, 15);
					IDENT168=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2215);  
					stream_IDENT.Add(IDENT168);



					{
					// AST REWRITE
					// elements: IDENT, suffix_expr, 70
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 339:21: -> ^( Expr_Access '.' $suffix_expr IDENT )
					{
						DebugLocation(339, 24);
						// SugarCpp.g:339:24: ^( Expr_Access '.' $suffix_expr IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(339, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(339, 38);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(339, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(339, 55);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:340:11: '->' IDENT
					{
					DebugLocation(340, 11);
					string_literal169=(IToken)Match(input,68,Follow._68_in_suffix_expr2240);  
					stream_68.Add(string_literal169);

					DebugLocation(340, 16);
					IDENT170=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2242);  
					stream_IDENT.Add(IDENT170);



					{
					// AST REWRITE
					// elements: 68, suffix_expr, IDENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 340:22: -> ^( Expr_Access '->' $suffix_expr IDENT )
					{
						DebugLocation(340, 25);
						// SugarCpp.g:340:25: ^( Expr_Access '->' $suffix_expr IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(340, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(340, 39);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(340, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(340, 57);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:341:11: '::' IDENT
					{
					DebugLocation(341, 11);
					string_literal171=(IToken)Match(input,75,Follow._75_in_suffix_expr2267);  
					stream_75.Add(string_literal171);

					DebugLocation(341, 16);
					IDENT172=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2269);  
					stream_IDENT.Add(IDENT172);



					{
					// AST REWRITE
					// elements: IDENT, suffix_expr, 75
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 341:22: -> ^( Expr_Access '::' $suffix_expr IDENT )
					{
						DebugLocation(341, 25);
						// SugarCpp.g:341:25: ^( Expr_Access '::' $suffix_expr IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(341, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(341, 39);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(341, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(341, 57);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:342:11: '(' ( expr_list )? ')'
					{
					DebugLocation(342, 11);
					char_literal173=(IToken)Match(input,57,Follow._57_in_suffix_expr2294);  
					stream_57.Add(char_literal173);

					DebugLocation(342, 15);
					// SugarCpp.g:342:15: ( expr_list )?
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, false);
					int LA52_0 = input.LA(1);

					if ((LA52_0==IDENT||LA52_0==NUMBER||LA52_0==STRING||LA52_0==50||LA52_0==55||LA52_0==57||LA52_0==59||(LA52_0>=61 && LA52_0<=62)||(LA52_0>=65 && LA52_0<=66)||LA52_0==99||LA52_0==108))
					{
						alt52 = 1;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:342:15: expr_list
						{
						DebugLocation(342, 15);
						PushFollow(Follow._expr_list_in_suffix_expr2296);
						expr_list174=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list174.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(52); }

					DebugLocation(342, 26);
					char_literal175=(IToken)Match(input,58,Follow._58_in_suffix_expr2299);  
					stream_58.Add(char_literal175);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 342:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(342, 33);
						// SugarCpp.g:342:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(342, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(342, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(342, 58);
						// SugarCpp.g:342:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(342, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:343:11: '[' expr ']'
					{
					DebugLocation(343, 11);
					char_literal176=(IToken)Match(input,89,Follow._89_in_suffix_expr2323);  
					stream_89.Add(char_literal176);

					DebugLocation(343, 15);
					PushFollow(Follow._expr_in_suffix_expr2325);
					expr177=expr();
					PopFollow();

					stream_expr.Add(expr177.Tree);
					DebugLocation(343, 20);
					char_literal178=(IToken)Match(input,90,Follow._90_in_suffix_expr2327);  
					stream_90.Add(char_literal178);



					{
					// AST REWRITE
					// elements: suffix_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 343:24: -> ^( Expr_Dict $suffix_expr expr )
					{
						DebugLocation(343, 27);
						// SugarCpp.g:343:27: ^( Expr_Dict $suffix_expr expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(343, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(343, 40);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(343, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// SugarCpp.g:344:11: ':' IDENT '(' ( expr_list )? ')'
					{
					DebugLocation(344, 11);
					char_literal179=(IToken)Match(input,74,Follow._74_in_suffix_expr2350);  
					stream_74.Add(char_literal179);

					DebugLocation(344, 15);
					IDENT180=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2352);  
					stream_IDENT.Add(IDENT180);

					DebugLocation(344, 21);
					char_literal181=(IToken)Match(input,57,Follow._57_in_suffix_expr2354);  
					stream_57.Add(char_literal181);

					DebugLocation(344, 25);
					// SugarCpp.g:344:25: ( expr_list )?
					int alt53=2;
					try { DebugEnterSubRule(53);
					try { DebugEnterDecision(53, false);
					int LA53_0 = input.LA(1);

					if ((LA53_0==IDENT||LA53_0==NUMBER||LA53_0==STRING||LA53_0==50||LA53_0==55||LA53_0==57||LA53_0==59||(LA53_0>=61 && LA53_0<=62)||(LA53_0>=65 && LA53_0<=66)||LA53_0==99||LA53_0==108))
					{
						alt53 = 1;
					}
					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:344:25: expr_list
						{
						DebugLocation(344, 25);
						PushFollow(Follow._expr_list_in_suffix_expr2356);
						expr_list182=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list182.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(53); }

					DebugLocation(344, 36);
					char_literal183=(IToken)Match(input,58,Follow._58_in_suffix_expr2359);  
					stream_58.Add(char_literal183);



					{
					// AST REWRITE
					// elements: expr_list, IDENT, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 344:40: -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? )
					{
						DebugLocation(344, 43);
						// SugarCpp.g:344:43: ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(344, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(344, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(344, 73);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(344, 79);
						// SugarCpp.g:344:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(344, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 49);
			LeaveRule("suffix_expr", 49);
			LeaveRule_suffix_expr();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:348:1: atom_expr : ( NUMBER | IDENT | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> expr );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 50);
		TraceIn("atom_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER184 = default(IToken);
		IToken IDENT185 = default(IToken);
		IToken STRING186 = default(IToken);
		IToken char_literal187 = default(IToken);
		IToken char_literal189 = default(IToken);
		IToken char_literal191 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER184_tree = default(CommonTree);
		CommonTree IDENT185_tree = default(CommonTree);
		CommonTree STRING186_tree = default(CommonTree);
		CommonTree char_literal187_tree = default(CommonTree);
		CommonTree char_literal189_tree = default(CommonTree);
		CommonTree char_literal191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			bool more_than_one = false;

		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(348, 1);
		try
		{
			// SugarCpp.g:353:2: ( NUMBER | IDENT | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> expr )
			int alt56=4;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt56 = 1;
				}
				break;
			case IDENT:
				{
				alt56 = 2;
				}
				break;
			case STRING:
				{
				alt56 = 3;
				}
				break;
			case 57:
				{
				alt56 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:353:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(353, 4);
				NUMBER184=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr2403); 
				NUMBER184_tree = (CommonTree)adaptor.Create(NUMBER184);
				adaptor.AddChild(root_0, NUMBER184_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:354:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(354, 4);
				IDENT185=(IToken)Match(input,IDENT,Follow._IDENT_in_atom_expr2408); 
				IDENT185_tree = (CommonTree)adaptor.Create(IDENT185);
				adaptor.AddChild(root_0, IDENT185_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:355:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(355, 4);
				STRING186=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr2413); 
				STRING186_tree = (CommonTree)adaptor.Create(STRING186);
				adaptor.AddChild(root_0, STRING186_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:356:4: '(' expr ( ',' expr )* ')'
				{
				DebugLocation(356, 4);
				char_literal187=(IToken)Match(input,57,Follow._57_in_atom_expr2418);  
				stream_57.Add(char_literal187);

				DebugLocation(356, 8);
				PushFollow(Follow._expr_in_atom_expr2420);
				expr188=expr();
				PopFollow();

				stream_expr.Add(expr188.Tree);
				DebugLocation(356, 13);
				// SugarCpp.g:356:13: ( ',' expr )*
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=2;
					try { DebugEnterDecision(55, false);
					int LA55_0 = input.LA(1);

					if ((LA55_0==64))
					{
						alt55 = 1;
					}


					} finally { DebugExitDecision(55); }
					switch ( alt55 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:356:14: ',' expr
						{
						DebugLocation(356, 14);
						char_literal189=(IToken)Match(input,64,Follow._64_in_atom_expr2423);  
						stream_64.Add(char_literal189);

						DebugLocation(356, 18);
						PushFollow(Follow._expr_in_atom_expr2425);
						expr190=expr();
						PopFollow();

						stream_expr.Add(expr190.Tree);
						DebugLocation(356, 23);
						 more_than_one = true; 

						}
						break;

					default:
						goto loop55;
					}
				}

				loop55:
					;

				} finally { DebugExitSubRule(55); }

				DebugLocation(356, 52);
				char_literal191=(IToken)Match(input,58,Follow._58_in_atom_expr2432);  
				stream_58.Add(char_literal191);



				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 357:3: -> { more_than_one }? ^( Expr_Tuple ( expr )+ )
				if ( more_than_one )
				{
					DebugLocation(357, 25);
					// SugarCpp.g:357:25: ^( Expr_Tuple ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(357, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

					DebugLocation(357, 38);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(357, 38);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 358:3: -> expr
				{
					DebugLocation(358, 6);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 50);
			LeaveRule("atom_expr", 50);
			LeaveRule_atom_expr();
		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:361:1: lvalue : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' IDENT -> ^( Expr_Access '.' $lvalue IDENT ) | '->' IDENT -> ^( Expr_Access '->' $lvalue IDENT ) | '::' IDENT -> ^( Expr_Access '::' $lvalue IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $lvalue expr ) )* ;
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 51);
		TraceIn("lvalue", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal192 = default(IToken);
		IToken string_literal193 = default(IToken);
		IToken char_literal194 = default(IToken);
		IToken IDENT195 = default(IToken);
		IToken string_literal196 = default(IToken);
		IToken IDENT197 = default(IToken);
		IToken string_literal198 = default(IToken);
		IToken IDENT199 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken char_literal202 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken char_literal205 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr204 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal192_tree = default(CommonTree);
		CommonTree string_literal193_tree = default(CommonTree);
		CommonTree char_literal194_tree = default(CommonTree);
		CommonTree IDENT195_tree = default(CommonTree);
		CommonTree string_literal196_tree = default(CommonTree);
		CommonTree IDENT197_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		CommonTree IDENT199_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree char_literal202_tree = default(CommonTree);
		CommonTree char_literal203_tree = default(CommonTree);
		CommonTree char_literal205_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(361, 1);
		try
		{
			// SugarCpp.g:362:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' IDENT -> ^( Expr_Access '.' $lvalue IDENT ) | '->' IDENT -> ^( Expr_Access '->' $lvalue IDENT ) | '::' IDENT -> ^( Expr_Access '::' $lvalue IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $lvalue expr ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:363:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' IDENT -> ^( Expr_Access '.' $lvalue IDENT ) | '->' IDENT -> ^( Expr_Access '->' $lvalue IDENT ) | '::' IDENT -> ^( Expr_Access '::' $lvalue IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $lvalue expr ) )*
			{
			DebugLocation(363, 4);
			// SugarCpp.g:363:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:363:5: a= lvalue_atom
			{
			DebugLocation(363, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue2469);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 363:19: -> $a
			{
				DebugLocation(363, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(363, 26);
			// SugarCpp.g:363:26: ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' IDENT -> ^( Expr_Access '.' $lvalue IDENT ) | '->' IDENT -> ^( Expr_Access '->' $lvalue IDENT ) | '::' IDENT -> ^( Expr_Access '::' $lvalue IDENT ) | '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $lvalue expr ) )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=8;
				try { DebugEnterDecision(58, false);
				switch (input.LA(1))
				{
				case 62:
					{
					alt58 = 1;
					}
					break;
				case 66:
					{
					alt58 = 2;
					}
					break;
				case 70:
					{
					alt58 = 3;
					}
					break;
				case 68:
					{
					alt58 = 4;
					}
					break;
				case 75:
					{
					alt58 = 5;
					}
					break;
				case 57:
					{
					alt58 = 6;
					}
					break;
				case 89:
					{
					alt58 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:363:28: '++'
					{
					DebugLocation(363, 28);
					string_literal192=(IToken)Match(input,62,Follow._62_in_lvalue2479);  
					stream_62.Add(string_literal192);



					{
					// AST REWRITE
					// elements: lvalue, 62
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 363:33: -> ^( Expr_Suffix '++' $lvalue)
					{
						DebugLocation(363, 36);
						// SugarCpp.g:363:36: ^( Expr_Suffix '++' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(363, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(363, 50);
						adaptor.AddChild(root_1, stream_62.NextNode());
						DebugLocation(363, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:364:16: '--'
					{
					DebugLocation(364, 16);
					string_literal193=(IToken)Match(input,66,Follow._66_in_lvalue2507);  
					stream_66.Add(string_literal193);



					{
					// AST REWRITE
					// elements: lvalue, 66
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 364:21: -> ^( Expr_Suffix '--' $lvalue)
					{
						DebugLocation(364, 24);
						// SugarCpp.g:364:24: ^( Expr_Suffix '--' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(364, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(364, 38);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(364, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:365:13: '.' IDENT
					{
					DebugLocation(365, 13);
					char_literal194=(IToken)Match(input,70,Follow._70_in_lvalue2532);  
					stream_70.Add(char_literal194);

					DebugLocation(365, 17);
					IDENT195=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue2534);  
					stream_IDENT.Add(IDENT195);



					{
					// AST REWRITE
					// elements: IDENT, 70, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 365:23: -> ^( Expr_Access '.' $lvalue IDENT )
					{
						DebugLocation(365, 26);
						// SugarCpp.g:365:26: ^( Expr_Access '.' $lvalue IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(365, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(365, 40);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(365, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(365, 52);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:366:13: '->' IDENT
					{
					DebugLocation(366, 13);
					string_literal196=(IToken)Match(input,68,Follow._68_in_lvalue2561);  
					stream_68.Add(string_literal196);

					DebugLocation(366, 18);
					IDENT197=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue2563);  
					stream_IDENT.Add(IDENT197);



					{
					// AST REWRITE
					// elements: lvalue, 68, IDENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 366:24: -> ^( Expr_Access '->' $lvalue IDENT )
					{
						DebugLocation(366, 27);
						// SugarCpp.g:366:27: ^( Expr_Access '->' $lvalue IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(366, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(366, 41);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(366, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(366, 54);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:367:13: '::' IDENT
					{
					DebugLocation(367, 13);
					string_literal198=(IToken)Match(input,75,Follow._75_in_lvalue2590);  
					stream_75.Add(string_literal198);

					DebugLocation(367, 18);
					IDENT199=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue2592);  
					stream_IDENT.Add(IDENT199);



					{
					// AST REWRITE
					// elements: IDENT, lvalue, 75
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 367:24: -> ^( Expr_Access '::' $lvalue IDENT )
					{
						DebugLocation(367, 27);
						// SugarCpp.g:367:27: ^( Expr_Access '::' $lvalue IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(367, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(367, 41);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(367, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(367, 54);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:368:13: '(' ( expr_list )? ')'
					{
					DebugLocation(368, 13);
					char_literal200=(IToken)Match(input,57,Follow._57_in_lvalue2619);  
					stream_57.Add(char_literal200);

					DebugLocation(368, 17);
					// SugarCpp.g:368:17: ( expr_list )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==IDENT||LA57_0==NUMBER||LA57_0==STRING||LA57_0==50||LA57_0==55||LA57_0==57||LA57_0==59||(LA57_0>=61 && LA57_0<=62)||(LA57_0>=65 && LA57_0<=66)||LA57_0==99||LA57_0==108))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:368:17: expr_list
						{
						DebugLocation(368, 17);
						PushFollow(Follow._expr_list_in_lvalue2621);
						expr_list201=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list201.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(368, 28);
					char_literal202=(IToken)Match(input,58,Follow._58_in_lvalue2624);  
					stream_58.Add(char_literal202);



					{
					// AST REWRITE
					// elements: lvalue, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 368:32: -> ^( Expr_Call $lvalue ( expr_list )? )
					{
						DebugLocation(368, 35);
						// SugarCpp.g:368:35: ^( Expr_Call $lvalue ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(368, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(368, 55);
						// SugarCpp.g:368:55: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(368, 55);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:369:13: '[' expr ']'
					{
					DebugLocation(369, 13);
					char_literal203=(IToken)Match(input,89,Follow._89_in_lvalue2650);  
					stream_89.Add(char_literal203);

					DebugLocation(369, 17);
					PushFollow(Follow._expr_in_lvalue2652);
					expr204=expr();
					PopFollow();

					stream_expr.Add(expr204.Tree);
					DebugLocation(369, 22);
					char_literal205=(IToken)Match(input,90,Follow._90_in_lvalue2654);  
					stream_90.Add(char_literal205);



					{
					// AST REWRITE
					// elements: expr, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 369:26: -> ^( Expr_Dict $lvalue expr )
					{
						DebugLocation(369, 29);
						// SugarCpp.g:369:29: ^( Expr_Dict $lvalue expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(369, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(369, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 51);
			LeaveRule("lvalue", 51);
			LeaveRule_lvalue();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:373:1: lvalue_atom : ( '(' ( IDENT ( ',' IDENT )* )? ')' -> ^( Match_Tuple ( IDENT )* ) | IDENT );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 52);
		TraceIn("lvalue_atom", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal206 = default(IToken);
		IToken IDENT207 = default(IToken);
		IToken char_literal208 = default(IToken);
		IToken IDENT209 = default(IToken);
		IToken char_literal210 = default(IToken);
		IToken IDENT211 = default(IToken);

		CommonTree char_literal206_tree = default(CommonTree);
		CommonTree IDENT207_tree = default(CommonTree);
		CommonTree char_literal208_tree = default(CommonTree);
		CommonTree IDENT209_tree = default(CommonTree);
		CommonTree char_literal210_tree = default(CommonTree);
		CommonTree IDENT211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(373, 1);
		try
		{
			// SugarCpp.g:374:2: ( '(' ( IDENT ( ',' IDENT )* )? ')' -> ^( Match_Tuple ( IDENT )* ) | IDENT )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==57))
			{
				alt61 = 1;
			}
			else if ((LA61_0==IDENT))
			{
				alt61 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:374:4: '(' ( IDENT ( ',' IDENT )* )? ')'
				{
				DebugLocation(374, 4);
				char_literal206=(IToken)Match(input,57,Follow._57_in_lvalue_atom2692);  
				stream_57.Add(char_literal206);

				DebugLocation(374, 8);
				// SugarCpp.g:374:8: ( IDENT ( ',' IDENT )* )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==IDENT))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:374:9: IDENT ( ',' IDENT )*
					{
					DebugLocation(374, 9);
					IDENT207=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue_atom2695);  
					stream_IDENT.Add(IDENT207);

					DebugLocation(374, 15);
					// SugarCpp.g:374:15: ( ',' IDENT )*
					try { DebugEnterSubRule(59);
					while (true)
					{
						int alt59=2;
						try { DebugEnterDecision(59, false);
						int LA59_0 = input.LA(1);

						if ((LA59_0==64))
						{
							alt59 = 1;
						}


						} finally { DebugExitDecision(59); }
						switch ( alt59 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:374:16: ',' IDENT
							{
							DebugLocation(374, 16);
							char_literal208=(IToken)Match(input,64,Follow._64_in_lvalue_atom2698);  
							stream_64.Add(char_literal208);

							DebugLocation(374, 20);
							IDENT209=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue_atom2700);  
							stream_IDENT.Add(IDENT209);


							}
							break;

						default:
							goto loop59;
						}
					}

					loop59:
						;

					} finally { DebugExitSubRule(59); }


					}
					break;

				}
				} finally { DebugExitSubRule(60); }

				DebugLocation(374, 30);
				char_literal210=(IToken)Match(input,58,Follow._58_in_lvalue_atom2706);  
				stream_58.Add(char_literal210);



				{
				// AST REWRITE
				// elements: IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 374:34: -> ^( Match_Tuple ( IDENT )* )
				{
					DebugLocation(374, 37);
					// SugarCpp.g:374:37: ^( Match_Tuple ( IDENT )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(374, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(374, 51);
					// SugarCpp.g:374:51: ( IDENT )*
					while ( stream_IDENT.HasNext )
					{
						DebugLocation(374, 51);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

					}
					stream_IDENT.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:375:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(375, 4);
				IDENT211=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue_atom2720); 
				IDENT211_tree = (CommonTree)adaptor.Create(IDENT211);
				adaptor.AddChild(root_0, IDENT211_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 52);
			LeaveRule("lvalue_atom", 52);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"
	#endregion Rules


	#region DFA
	private DFA3 dfa3;
	private DFA7 dfa7;
	private DFA23 dfa23;
	private DFA26 dfa26;
	private DFA32 dfa32;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa7 = new DFA7( this );
		dfa23 = new DFA23( this );
		dfa26 = new DFA26( this );
		dfa32 = new DFA32( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA3_maxS =
			"\x2\x67\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x3C\xFFFF\x1\x3\x2\xFFFF\x2\x3"+
				"\x2\xFFFF\x3\x3",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x3C\xFFFF\x1\x3\x2\xFFFF\x2\x3"+
				"\x2\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()+ loopback of 144:4: ( ( NEWLINE )* node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x4\xFFFF";
		private const string DFA7_eofS =
			"\x4\xFFFF";
		private const string DFA7_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA7_maxS =
			"\x1\x21\x1\x27\x2\xFFFF";
		private const string DFA7_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA7_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x1B\xFFFF\x1\x1\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "()* loopback of 159:29: ( ( NEWLINE )+ STRING )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA23 : DFA
	{
		private const string DFA23_eotS =
			"\x4\xFFFF";
		private const string DFA23_eofS =
			"\x4\xFFFF";
		private const string DFA23_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA23_maxS =
			"\x1\x21\x1\x68\x2\xFFFF";
		private const string DFA23_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA23_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA23_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x17\xFFFF\x1\x3\x25\xFFFF\x2"+
				"\x3\x3\xFFFF\x1\x3\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA23_eot = DFA.UnpackEncodedString(DFA23_eotS);
		private static readonly short[] DFA23_eof = DFA.UnpackEncodedString(DFA23_eofS);
		private static readonly char[] DFA23_min = DFA.UnpackEncodedStringToUnsignedChars(DFA23_minS);
		private static readonly char[] DFA23_max = DFA.UnpackEncodedStringToUnsignedChars(DFA23_maxS);
		private static readonly short[] DFA23_accept = DFA.UnpackEncodedString(DFA23_acceptS);
		private static readonly short[] DFA23_special = DFA.UnpackEncodedString(DFA23_specialS);
		private static readonly short[][] DFA23_transition;

		static DFA23()
		{
			int numStates = DFA23_transitionS.Length;
			DFA23_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA23_transition[i] = DFA.UnpackEncodedString(DFA23_transitionS[i]);
			}
		}

		public DFA23( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 23;
			this.eot = DFA23_eot;
			this.eof = DFA23_eof;
			this.min = DFA23_min;
			this.max = DFA23_max;
			this.accept = DFA23_accept;
			this.special = DFA23_special;
			this.transition = DFA23_transition;
		}

		public override string Description { get { return "()* loopback of 191:11: ( ( NEWLINE )+ stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA26 : DFA
	{
		private const string DFA26_eotS =
			"\xC\xFFFF";
		private const string DFA26_eofS =
			"\x1\x1\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x5\xFFFF";
		private const string DFA26_minS =
			"\x1\x5\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x1\x1A\x1\x37\x2\x1A\x1\x37";
		private const string DFA26_maxS =
			"\x1\x67\x1\xFFFF\x3\x67\x1\xFFFF\x1\x67\x2\x55\x1\x1A\x1\x3B\x1\x55";
		private const string DFA26_acceptS =
			"\x1\xFFFF\x1\x2\x3\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA26_specialS =
			"\xC\xFFFF}>";
		private static readonly string[] DFA26_transitionS =
			{
				"\x1\x1\x14\xFFFF\x1\x2\x6\xFFFF\x1\x1\x3C\xFFFF\x1\x1\x2\xFFFF\x1\x1"+
				"\x1\x3\x2\xFFFF\x3\x1",
				"",
				"\x1\x5\x14\xFFFF\x1\x4\x6\xFFFF\x1\x5\x15\xFFFF\x1\x1\x3\xFFFF\x1\x1"+
				"\x4\xFFFF\x1\x1\x9\xFFFF\x1\x1\x3\xFFFF\x1\x1\xF\xFFFF\x1\x5\x2\xFFFF"+
				"\x2\x5\x2\xFFFF\x3\x5",
				"\x1\x5\x14\xFFFF\x1\x6\x6\xFFFF\x1\x5\x3C\xFFFF\x1\x5\x2\xFFFF\x2\x5"+
				"\x2\xFFFF\x3\x5",
				"\x1\x5\x14\xFFFF\x1\x5\x6\xFFFF\x1\x5\x15\xFFFF\x1\x5\x1\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x5\x4\xFFFF\x1\x5\x9\xFFFF\x1\x5\x3\xFFFF\x1\x7\xF\xFFFF"+
				"\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x3\x5",
				"",
				"\x1\x5\x14\xFFFF\x1\x5\x1\x1\x5\xFFFF\x1\x5\x15\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x5\x4\xFFFF\x1\x5\x9\xFFFF\x1\x5\x3\xFFFF\x1\x5\xF\xFFFF\x1\x5\x2"+
				"\xFFFF\x2\x5\x2\xFFFF\x3\x5",
				"\x1\x8\x3A\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xD\xFFFF\x1\x5\x6\xFFFF\x1\xA",
				"\x1\xB",
				"\x1\x5\x1C\xFFFF\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xD\xFFFF\x1\x5\x6\xFFFF\x1\xA"
			};

		private static readonly short[] DFA26_eot = DFA.UnpackEncodedString(DFA26_eotS);
		private static readonly short[] DFA26_eof = DFA.UnpackEncodedString(DFA26_eofS);
		private static readonly char[] DFA26_min = DFA.UnpackEncodedStringToUnsignedChars(DFA26_minS);
		private static readonly char[] DFA26_max = DFA.UnpackEncodedStringToUnsignedChars(DFA26_maxS);
		private static readonly short[] DFA26_accept = DFA.UnpackEncodedString(DFA26_acceptS);
		private static readonly short[] DFA26_special = DFA.UnpackEncodedString(DFA26_specialS);
		private static readonly short[][] DFA26_transition;

		static DFA26()
		{
			int numStates = DFA26_transitionS.Length;
			DFA26_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA26_transition[i] = DFA.UnpackEncodedString(DFA26_transitionS[i]);
			}
		}

		public DFA26( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}

		public override string Description { get { return "()* loopback of 215:12: ( stmt_using_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA32 : DFA
	{
		private const string DFA32_eotS =
			"\xB\xFFFF";
		private const string DFA32_eofS =
			"\xB\xFFFF";
		private const string DFA32_minS =
			"\x2\x1A\x1\xFFFF\x1\x1E\x2\x1A\x1\x1E\x1\x37\x1\x1A\x1\xFFFF\x1\x37";
		private const string DFA32_maxS =
			"\x2\x6C\x1\xFFFF\x1\x6B\x1\x6C\x1\x1A\x1\x6B\x1\x52\x1\x1A\x1\xFFFF\x1"+
			"\x52";
		private const string DFA32_acceptS =
			"\x2\xFFFF\x1\x2\x6\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA32_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA32_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\xA\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x20\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2",
				"\x1\x3\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\xA\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x20\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2",
				"",
				"\x1\x2\x14\xFFFF\xD\x2\x1\x4\x9\x2\x1\x5\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF"+
				"\x5\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x8\xFFFF\x3\x2",
				"\x1\x6\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\xA\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x20\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2",
				"\x1\x7",
				"\x1\x2\x14\xFFFF\xD\x2\x1\x4\x9\x2\x1\x8\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF"+
				"\x5\x2\x1\xFFFF\x2\x2\x3\xFFFF\x1\x2\x8\xFFFF\x3\x2",
				"\x1\x9\x1\xFFFF\x1\x2\x2\x9\x4\xFFFF\x1\x9\xD\xFFFF\x1\x9\x3\xFFFF"+
				"\x1\x9",
				"\x1\xA",
				"",
				"\x1\x9\x1\xFFFF\x1\x2\x2\x9\x4\xFFFF\x1\x9\xD\xFFFF\x1\x9\x3\xFFFF"+
				"\x1\x9"
			};

		private static readonly short[] DFA32_eot = DFA.UnpackEncodedString(DFA32_eotS);
		private static readonly short[] DFA32_eof = DFA.UnpackEncodedString(DFA32_eofS);
		private static readonly char[] DFA32_min = DFA.UnpackEncodedStringToUnsignedChars(DFA32_minS);
		private static readonly char[] DFA32_max = DFA.UnpackEncodedStringToUnsignedChars(DFA32_maxS);
		private static readonly short[] DFA32_accept = DFA.UnpackEncodedString(DFA32_acceptS);
		private static readonly short[] DFA32_special = DFA.UnpackEncodedString(DFA32_specialS);
		private static readonly short[][] DFA32_transition;

		static DFA32()
		{
			int numStates = DFA32_transitionS.Length;
			DFA32_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA32_transition[i] = DFA.UnpackEncodedString(DFA32_transitionS[i]);
			}
		}

		public DFA32( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}

		public override string Description { get { return "250:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _overall_block_in_root365 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _NEWLINE_in_root368 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EOF_in_root371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_overall_block383 = new BitSet(new ulong[]{0x204000000UL,0xE640000000UL});
		public static readonly BitSet _node_in_overall_block386 = new BitSet(new ulong[]{0x204000002UL,0xE640000000UL});
		public static readonly BitSet _func_def_in_node399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_def_in_node414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_node424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_node429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_node434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_import_def445 = new BitSet(new ulong[]{0x8008000002UL});
		public static readonly BitSet _STRING_in_import_def447 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _INDENT_in_import_def451 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _NEWLINE_in_import_def454 = new BitSet(new ulong[]{0x8200000000UL});
		public static readonly BitSet _STRING_in_import_def457 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _NEWLINE_in_import_def461 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _DEDENT_in_import_def464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_enum_def486 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_enum_def488 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_enum_def490 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_enum_def492 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _105_in_enum_def495 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_enum_def497 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _98_in_namespace_def519 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_namespace_def521 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _INDENT_in_namespace_def523 = new BitSet(new ulong[]{0x204000000UL,0xE640000000UL});
		public static readonly BitSet _overall_block_in_namespace_def525 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _NEWLINE_in_namespace_def527 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _DEDENT_in_namespace_def530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_struct_def551 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_struct_def553 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _INDENT_in_struct_def555 = new BitSet(new ulong[]{0x204000000UL,0xE640000000UL});
		public static readonly BitSet _overall_block_in_struct_def557 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _NEWLINE_in_struct_def559 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _DEDENT_in_struct_def562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_type_name583 = new BitSet(new ulong[]{0x880000000000002UL,0x4000UL});
		public static readonly BitSet _78_in_type_name586 = new BitSet(new ulong[]{0x4000000UL,0x200000UL});
		public static readonly BitSet _type_name_in_type_name589 = new BitSet(new ulong[]{0x0UL,0x200001UL});
		public static readonly BitSet _64_in_type_name592 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _type_name_in_type_name594 = new BitSet(new ulong[]{0x0UL,0x200001UL});
		public static readonly BitSet _85_in_type_name600 = new BitSet(new ulong[]{0x880000000000002UL});
		public static readonly BitSet _59_in_type_name604 = new BitSet(new ulong[]{0x880000000000002UL});
		public static readonly BitSet _55_in_type_name607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_generic_parameter644 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _64_in_generic_parameter647 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_generic_parameter650 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _stmt_alloc_in_func_args663 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _64_in_func_args666 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args668 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _type_name_in_func_def690 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_func_def692 = new BitSet(new ulong[]{0x200000000000000UL,0x4000UL});
		public static readonly BitSet _78_in_func_def695 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _generic_parameter_in_func_def697 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_func_def699 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_func_def703 = new BitSet(new ulong[]{0x400000004000000UL});
		public static readonly BitSet _func_args_in_func_def705 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_func_def708 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _stmt_block_in_func_def710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block724 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block727 = new BitSet(new ulong[]{0x200000204000000UL,0x1D180000000UL});
		public static readonly BitSet _stmt_in_stmt_block730 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block734 = new BitSet(new ulong[]{0x200000020UL});
		public static readonly BitSet _DEDENT_in_stmt_block737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr773 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_expr788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_expr793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_expr798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_stmt_typedef814 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_stmt_typedef816 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_stmt_typedef818 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _type_name_in_stmt_typedef820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_stmt_using851 = new BitSet(new ulong[]{0x4000002UL,0x400000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using853 = new BitSet(new ulong[]{0x4000002UL,0x400000000UL});
		public static readonly BitSet _100_in_stmt_return874 = new BitSet(new ulong[]{0x6A84008404000002UL,0x100800000006UL});
		public static readonly BitSet _expr_in_stmt_return876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_stmt_if897 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_stmt_if899 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_stmt_if901 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_stmt_if903 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if905 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_stmt_if908 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_stmt_while936 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_stmt_while938 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_stmt_while940 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_stmt_while942 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_stmt_for965 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_stmt_for967 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_stmt_for969 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_stmt_for971 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_stmt_for973 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_stmt_for975 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_stmt_for977 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_stmt_for979 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident_list1006 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _64_in_ident_list1009 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_ident_list1011 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _ident_list_in_stmt_alloc1033 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_stmt_alloc1035 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _type_name_in_stmt_alloc1037 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_stmt_alloc1040 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_stmt_alloc1042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify1068 = new BitSet(new ulong[]{0x9120000000000002UL,0x40011051208UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify1071 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _cond_expr_in_stmt_modify1074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_lambda_expr1098 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _func_args_in_lambda_expr1100 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_lambda_expr1102 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_lambda_expr1104 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr1183 = new BitSet(new ulong[]{0x9120000000000002UL,0x40011051208UL});
		public static readonly BitSet _modify_expr_op_in_modify_expr1186 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _modify_expr_in_modify_expr1189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr1212 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _96_in_cond_expr1221 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1225 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_cond_expr1227 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr1262 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _107_in_or_expr1271 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _and_expr_in_or_expr1275 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _bit_or_in_and_expr1305 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _54_in_and_expr1314 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _bit_or_in_and_expr1318 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _bit_xor_in_bit_or1348 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _105_in_bit_or1357 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _bit_xor_in_bit_or1361 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor1391 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_bit_xor1400 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _bit_and_in_bit_xor1404 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1434 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _55_in_bit_and1443 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1447 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1488 = new BitSet(new ulong[]{0x8000000000002UL,0x80000UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr1497 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1501 = new BitSet(new ulong[]{0x8000000000002UL,0x80000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1551 = new BitSet(new ulong[]{0x2UL,0x624000UL});
		public static readonly BitSet _cmp_expr_op_in_cmp_expr1560 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1564 = new BitSet(new ulong[]{0x2UL,0x624000UL});
		public static readonly BitSet _add_expr_in_shift_expr1605 = new BitSet(new ulong[]{0x2UL,0x808000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr1614 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _add_expr_in_shift_expr1618 = new BitSet(new ulong[]{0x2UL,0x808000UL});
		public static readonly BitSet _infix_expr_in_add_expr1648 = new BitSet(new ulong[]{0x2000000000000002UL,0x2UL});
		public static readonly BitSet _61_in_add_expr1658 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _infix_expr_in_add_expr1662 = new BitSet(new ulong[]{0x2000000000000002UL,0x2UL});
		public static readonly BitSet _65_in_add_expr1689 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _infix_expr_in_add_expr1693 = new BitSet(new ulong[]{0x2000000000000002UL,0x2UL});
		public static readonly BitSet _mul_expr_in_infix_expr1733 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Infix_Func_in_infix_expr1743 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _mul_expr_in_infix_expr1747 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _selector_expr_in_mul_expr1779 = new BitSet(new ulong[]{0x810000000000002UL,0x100UL});
		public static readonly BitSet _59_in_mul_expr1789 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _selector_expr_in_mul_expr1793 = new BitSet(new ulong[]{0x810000000000002UL,0x100UL});
		public static readonly BitSet _72_in_mul_expr1823 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _selector_expr_in_mul_expr1827 = new BitSet(new ulong[]{0x810000000000002UL,0x100UL});
		public static readonly BitSet _52_in_mul_expr1857 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _selector_expr_in_mul_expr1861 = new BitSet(new ulong[]{0x810000000000002UL,0x100UL});
		public static readonly BitSet _prefix_expr_in_selector_expr1904 = new BitSet(new ulong[]{0x2UL,0xA0UL});
		public static readonly BitSet _69_in_selector_expr1914 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_selector_expr1918 = new BitSet(new ulong[]{0x2UL,0xA0UL});
		public static readonly BitSet _71_in_selector_expr1946 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_selector_expr1951 = new BitSet(new ulong[]{0x2UL,0xA0UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr2026 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr2028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_prefix_expr2044 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _type_name_in_prefix_expr2046 = new BitSet(new ulong[]{0x200000000000000UL,0x2000000UL});
		public static readonly BitSet _57_in_prefix_expr2050 = new BitSet(new ulong[]{0x6E84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_list_in_prefix_expr2052 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_prefix_expr2055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_prefix_expr2090 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100804000006UL});
		public static readonly BitSet _expr_list_in_prefix_expr2092 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_prefix_expr2095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr2120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list2132 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _64_in_expr_list2135 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_expr_list2138 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _atom_expr_in_suffix_expr2154 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000C54UL});
		public static readonly BitSet _62_in_suffix_expr2164 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000C54UL});
		public static readonly BitSet _66_in_suffix_expr2190 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000C54UL});
		public static readonly BitSet _70_in_suffix_expr2213 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2215 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000C54UL});
		public static readonly BitSet _68_in_suffix_expr2240 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2242 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000C54UL});
		public static readonly BitSet _75_in_suffix_expr2267 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2269 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000C54UL});
		public static readonly BitSet _57_in_suffix_expr2294 = new BitSet(new ulong[]{0x6E84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_list_in_suffix_expr2296 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_suffix_expr2299 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000C54UL});
		public static readonly BitSet _89_in_suffix_expr2323 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_suffix_expr2325 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_suffix_expr2327 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000C54UL});
		public static readonly BitSet _74_in_suffix_expr2350 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2352 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _57_in_suffix_expr2354 = new BitSet(new ulong[]{0x6E84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_list_in_suffix_expr2356 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_suffix_expr2359 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000C54UL});
		public static readonly BitSet _NUMBER_in_atom_expr2403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_atom_expr2408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr2413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_atom_expr2418 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_atom_expr2420 = new BitSet(new ulong[]{0x400000000000000UL,0x1UL});
		public static readonly BitSet _64_in_atom_expr2423 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_atom_expr2425 = new BitSet(new ulong[]{0x400000000000000UL,0x1UL});
		public static readonly BitSet _58_in_atom_expr2432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue2469 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000854UL});
		public static readonly BitSet _62_in_lvalue2479 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000854UL});
		public static readonly BitSet _66_in_lvalue2507 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000854UL});
		public static readonly BitSet _70_in_lvalue2532 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_lvalue2534 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000854UL});
		public static readonly BitSet _68_in_lvalue2561 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_lvalue2563 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000854UL});
		public static readonly BitSet _75_in_lvalue2590 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_lvalue2592 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000854UL});
		public static readonly BitSet _57_in_lvalue2619 = new BitSet(new ulong[]{0x6E84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_list_in_lvalue2621 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_lvalue2624 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000854UL});
		public static readonly BitSet _89_in_lvalue2650 = new BitSet(new ulong[]{0x6A84008404000000UL,0x100800000006UL});
		public static readonly BitSet _expr_in_lvalue2652 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_lvalue2654 = new BitSet(new ulong[]{0x4200000000000002UL,0x2000854UL});
		public static readonly BitSet _57_in_lvalue_atom2692 = new BitSet(new ulong[]{0x400000004000000UL});
		public static readonly BitSet _IDENT_in_lvalue_atom2695 = new BitSet(new ulong[]{0x400000000000000UL,0x1UL});
		public static readonly BitSet _64_in_lvalue_atom2698 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _IDENT_in_lvalue_atom2700 = new BitSet(new ulong[]{0x400000000000000UL,0x1UL});
		public static readonly BitSet _58_in_lvalue_atom2706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_lvalue_atom2720 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
