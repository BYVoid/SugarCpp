//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-09 13:21:00

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'catch'", "'class'", "'const'", "'defer'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'try'", "'typedef'", "'unsigned'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc_Bracket=12;
	public const int Expr_Alloc_Equal=13;
	public const int Expr_Bin=14;
	public const int Expr_Bracket=15;
	public const int Expr_Call=16;
	public const int Expr_Call_With=17;
	public const int Expr_Cond=18;
	public const int Expr_Cond_Not_Null=19;
	public const int Expr_Dict=20;
	public const int Expr_Infix=21;
	public const int Expr_Lambda=22;
	public const int Expr_New_Array=23;
	public const int Expr_New_Type=24;
	public const int Expr_Not_Null=25;
	public const int Expr_Prefix=26;
	public const int Expr_Suffix=27;
	public const int Expr_Tuple=28;
	public const int Func_Args=29;
	public const int Func_Def=30;
	public const int Generic_Patameters=31;
	public const int Global_Block=32;
	public const int IDENT=33;
	public const int INDENT=34;
	public const int Ident_List=35;
	public const int Import=36;
	public const int Left_Bracket=37;
	public const int LineComment=38;
	public const int Linq_From=39;
	public const int Linq_Let=40;
	public const int Linq_Prefix=41;
	public const int Linq_Where=42;
	public const int Match_Tuple=43;
	public const int NEWLINE=44;
	public const int NUMBER=45;
	public const int Namespace=46;
	public const int Right_Bracket=47;
	public const int Root=48;
	public const int SP=49;
	public const int STRING=50;
	public const int Stmt_Block=51;
	public const int Stmt_Defer=52;
	public const int Stmt_For=53;
	public const int Stmt_ForEach=54;
	public const int Stmt_If=55;
	public const int Stmt_Linq=56;
	public const int Stmt_Loop=57;
	public const int Stmt_Return=58;
	public const int Stmt_Try=59;
	public const int Stmt_Typedef=60;
	public const int Stmt_Using=61;
	public const int Stmt_While=62;
	public const int Type_IDENT=63;
	public const int Type_Ref=64;
	public const int Type_Tuple=65;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:167:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(167, 1);
		try
		{
			// SugarCpp.g:168:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:168:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(168, 4);
			// SugarCpp.g:168:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:168:4: NEWLINE
					{
					DebugLocation(168, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root468);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(168, 13);
			PushFollow(Follow._global_block_in_root471);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(168, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root473);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 168:30: -> ^( Root global_block )
			{
				DebugLocation(168, 33);
				// SugarCpp.g:168:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(168, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(168, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:171:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(171, 1);
		try
		{
			// SugarCpp.g:172:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:172:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(172, 4);
			// SugarCpp.g:172:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==108||(LA3_0>=115 && LA3_0<=116)||LA3_0==119||LA3_0==123||LA3_0==129||(LA3_0>=134 && LA3_0<=136)||LA3_0==142))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:172:5: node ( NEWLINE )+
					{
					DebugLocation(172, 5);
					PushFollow(Follow._node_in_global_block493);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(172, 10);
					// SugarCpp.g:172:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:172:10: NEWLINE
							{
							DebugLocation(172, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block495);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 172:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(172, 24);
				// SugarCpp.g:172:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(172, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(172, 39);
				// SugarCpp.g:172:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(172, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:175:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(175, 1);
		try
		{
			// SugarCpp.g:176:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:176:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				PushFollow(Follow._func_def_in_node518);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:177:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 4);
				PushFollow(Follow._class_def_in_node523);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:178:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(178, 4);
				PushFollow(Follow._enum_def_in_node528);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:179:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(179, 4);
				PushFollow(Follow._global_alloc_in_node533);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:180:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 4);
				PushFollow(Follow._global_using_in_node538);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:181:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._global_typedef_in_node543);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:182:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 4);
				PushFollow(Follow._import_def_in_node548);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:183:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(183, 4);
				PushFollow(Follow._namespace_def_in_node553);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:186:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(186, 1);
		try
		{
			// SugarCpp.g:187:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:187:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args565); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:188:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args570); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:189:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 4);
				PushFollow(Follow._ident_in_attribute_args575);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:192:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(192, 1);
		try
		{
			// SugarCpp.g:193:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==116))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:193:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(193, 4);
				PushFollow(Follow._ident_in_attribute_item586);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(193, 10);
				// SugarCpp.g:193:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==73))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:193:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(193, 11);
					char_literal18=(IToken)Match(input,73,Follow._73_in_attribute_item589);  
					stream_73.Add(char_literal18);

					DebugLocation(193, 15);
					PushFollow(Follow._attribute_args_in_attribute_item591);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(193, 30);
					// SugarCpp.g:193:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==80))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:193:31: ',' attribute_args
							{
							DebugLocation(193, 31);
							char_literal20=(IToken)Match(input,80,Follow._80_in_attribute_item594);  
							stream_80.Add(char_literal20);

							DebugLocation(193, 35);
							PushFollow(Follow._attribute_args_in_attribute_item596);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(193, 52);
					char_literal22=(IToken)Match(input,74,Follow._74_in_attribute_item600);  
					stream_74.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 193:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(193, 61);
					// SugarCpp.g:193:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(193, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(193, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(193, 79);
					// SugarCpp.g:193:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(193, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:194:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(194, 4);
				string_literal23=(IToken)Match(input,116,Follow._116_in_attribute_item618);  
				stream_116.Add(string_literal23);

				DebugLocation(194, 12);
				// SugarCpp.g:194:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==73))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:194:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(194, 13);
					char_literal24=(IToken)Match(input,73,Follow._73_in_attribute_item621);  
					stream_73.Add(char_literal24);

					DebugLocation(194, 17);
					PushFollow(Follow._attribute_args_in_attribute_item623);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(194, 32);
					// SugarCpp.g:194:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==80))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:194:33: ',' attribute_args
							{
							DebugLocation(194, 33);
							char_literal26=(IToken)Match(input,80,Follow._80_in_attribute_item626);  
							stream_80.Add(char_literal26);

							DebugLocation(194, 37);
							PushFollow(Follow._attribute_args_in_attribute_item628);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(194, 54);
					char_literal28=(IToken)Match(input,74,Follow._74_in_attribute_item632);  
					stream_74.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 116, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 194:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(194, 63);
					// SugarCpp.g:194:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(194, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(194, 75);
					adaptor.AddChild(root_1, stream_116.NextNode());
					DebugLocation(194, 83);
					// SugarCpp.g:194:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(194, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:197:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(197, 1);
		try
		{
			// SugarCpp.g:198:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:198:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(198, 4);
			// SugarCpp.g:198:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==108))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:198:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(198, 5);
					char_literal29=(IToken)Match(input,108,Follow._108_in_attribute657);  
					stream_108.Add(char_literal29);

					DebugLocation(198, 9);
					PushFollow(Follow._attribute_item_in_attribute659);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(198, 24);
					// SugarCpp.g:198:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==80))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:198:25: ',' attribute_item
							{
							DebugLocation(198, 25);
							char_literal31=(IToken)Match(input,80,Follow._80_in_attribute662);  
							stream_80.Add(char_literal31);

							DebugLocation(198, 29);
							PushFollow(Follow._attribute_item_in_attribute664);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(198, 46);
					char_literal33=(IToken)Match(input,109,Follow._109_in_attribute668);  
					stream_109.Add(char_literal33);

					DebugLocation(198, 50);
					// SugarCpp.g:198:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:198:50: NEWLINE
							{
							DebugLocation(198, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute670);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 198:61: -> ( attribute_item )+
			{
				DebugLocation(198, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(198, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:201:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(201, 1);
		try
		{
			// SugarCpp.g:202:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:202:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) )
			{
			DebugLocation(202, 4);
			// SugarCpp.g:202:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==108))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:202:4: attribute
				{
				DebugLocation(202, 4);
				PushFollow(Follow._attribute_in_global_alloc689);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(202, 15);
			PushFollow(Follow._ident_list_in_global_alloc692);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(202, 26);
			// SugarCpp.g:202:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==90))
			{
				alt19 = 1;
			}
			else if ((LA19_0==92))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:202:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(202, 28);
				char_literal37=(IToken)Match(input,90,Follow._90_in_global_alloc696);  
				stream_90.Add(char_literal37);

				DebugLocation(202, 32);
				PushFollow(Follow._type_name_in_global_alloc698);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(202, 42);
				// SugarCpp.g:202:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 92:
				case 98:
					{
					alt17 = 1;
					}
					break;
				case 73:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:202:44: ( '=' | ':=' ) expr
					{
					DebugLocation(202, 44);
					// SugarCpp.g:202:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==98))
					{
						alt15 = 1;
					}
					else if ((LA15_0==92))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:202:45: '='
						{
						DebugLocation(202, 45);
						char_literal39=(IToken)Match(input,98,Follow._98_in_global_alloc703);  
						stream_98.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:202:51: ':='
						{
						DebugLocation(202, 51);
						string_literal40=(IToken)Match(input,92,Follow._92_in_global_alloc707);  
						stream_92.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(202, 57);
					PushFollow(Follow._expr_in_global_alloc710);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: ident_list, attribute, expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 202:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(202, 65);
						// SugarCpp.g:202:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(202, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(202, 84);
						// SugarCpp.g:202:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(202, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(202, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(202, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(202, 116);
						// SugarCpp.g:202:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(202, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:203:43: '(' ( expr_list )? ')'
					{
					DebugLocation(203, 43);
					char_literal42=(IToken)Match(input,73,Follow._73_in_global_alloc770);  
					stream_73.Add(char_literal42);

					DebugLocation(203, 47);
					// SugarCpp.g:203:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==66||LA16_0==71||LA16_0==73||LA16_0==75||(LA16_0>=77 && LA16_0<=78)||(LA16_0>=81 && LA16_0<=82)||LA16_0==107||LA16_0==130||LA16_0==142))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:203:47: expr_list
						{
						DebugLocation(203, 47);
						PushFollow(Follow._expr_list_in_global_alloc772);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(203, 58);
					char_literal44=(IToken)Match(input,74,Follow._74_in_global_alloc775);  
					stream_74.Add(char_literal44);



					{
					// AST REWRITE
					// elements: attribute, ident_list, expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 203:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(203, 65);
						// SugarCpp.g:203:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(203, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(203, 86);
						// SugarCpp.g:203:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(203, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(203, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(203, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(203, 118);
						// SugarCpp.g:203:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(203, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:204:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 204:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(204, 20);
						// SugarCpp.g:204:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(204, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(204, 39);
						// SugarCpp.g:204:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(204, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(204, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(204, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:206:10: ':=' ( modify_expr ( ',' modify_expr )* )
				{
				DebugLocation(206, 10);
				string_literal45=(IToken)Match(input,92,Follow._92_in_global_alloc848);  
				stream_92.Add(string_literal45);

				DebugLocation(206, 15);
				// SugarCpp.g:206:15: ( modify_expr ( ',' modify_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:206:16: modify_expr ( ',' modify_expr )*
				{
				DebugLocation(206, 16);
				PushFollow(Follow._modify_expr_in_global_alloc851);
				modify_expr46=modify_expr();
				PopFollow();

				stream_modify_expr.Add(modify_expr46.Tree);
				DebugLocation(206, 28);
				// SugarCpp.g:206:28: ( ',' modify_expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==80))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:206:29: ',' modify_expr
						{
						DebugLocation(206, 29);
						char_literal47=(IToken)Match(input,80,Follow._80_in_global_alloc854);  
						stream_80.Add(char_literal47);

						DebugLocation(206, 33);
						PushFollow(Follow._modify_expr_in_global_alloc856);
						modify_expr48=modify_expr();
						PopFollow();

						stream_modify_expr.Add(modify_expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: 92, ident_list, modify_expr, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 206:48: -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ )
				{
					DebugLocation(206, 51);
					// SugarCpp.g:206:51: ^( ':=' ( attribute )? ident_list ( modify_expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(206, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_92.NextNode(), root_1);

					DebugLocation(206, 58);
					// SugarCpp.g:206:58: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(206, 58);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(206, 69);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(206, 80);
					if (!(stream_modify_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_modify_expr.HasNext )
					{
						DebugLocation(206, 80);
						adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					}
					stream_modify_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:210:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(210, 1);
		try
		{
			// SugarCpp.g:211:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:211:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(211, 4);
			PushFollow(Follow._stmt_using_in_global_using893);
			stmt_using49=stmt_using();
			PopFollow();

			adaptor.AddChild(root_0, stmt_using49.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:214:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:215:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(215, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef904);
			stmt_typedef50=stmt_typedef();
			PopFollow();

			adaptor.AddChild(root_0, stmt_typedef50.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:218:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken STRING52 = default(IToken);
		IToken NEWLINE53 = default(IToken);
		IToken INDENT54 = default(IToken);
		IToken NEWLINE55 = default(IToken);
		IToken STRING56 = default(IToken);
		IToken NEWLINE57 = default(IToken);
		IToken DEDENT58 = default(IToken);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree STRING52_tree = default(CommonTree);
		CommonTree NEWLINE53_tree = default(CommonTree);
		CommonTree INDENT54_tree = default(CommonTree);
		CommonTree NEWLINE55_tree = default(CommonTree);
		CommonTree STRING56_tree = default(CommonTree);
		CommonTree NEWLINE57_tree = default(CommonTree);
		CommonTree DEDENT58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(218, 1);
		try
		{
			// SugarCpp.g:219:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(219, 4);
			string_literal51=(IToken)Match(input,123,Follow._123_in_import_def915);  
			stream_123.Add(string_literal51);

			DebugLocation(219, 13);
			// SugarCpp.g:219:13: ( STRING )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==STRING))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:219:13: STRING
				{
				DebugLocation(219, 13);
				STRING52=(IToken)Match(input,STRING,Follow._STRING_in_import_def917);  
				stream_STRING.Add(STRING52);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(219, 21);
			// SugarCpp.g:219:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			try
			{
				alt25 = dfa25.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:219:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(219, 22);
				// SugarCpp.g:219:22: ( NEWLINE )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==NEWLINE))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:219:22: NEWLINE
						{
						DebugLocation(219, 22);
						NEWLINE53=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def921);  
						stream_NEWLINE.Add(NEWLINE53);


						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(219, 31);
				INDENT54=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def924);  
				stream_INDENT.Add(INDENT54);

				DebugLocation(219, 38);
				// SugarCpp.g:219:38: ( NEWLINE )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==NEWLINE))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:219:38: NEWLINE
						{
						DebugLocation(219, 38);
						NEWLINE55=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def926);  
						stream_NEWLINE.Add(NEWLINE55);


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(219, 48);
				// SugarCpp.g:219:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==STRING))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:219:49: STRING ( NEWLINE )+
						{
						DebugLocation(219, 49);
						STRING56=(IToken)Match(input,STRING,Follow._STRING_in_import_def931);  
						stream_STRING.Add(STRING56);

						DebugLocation(219, 56);
						// SugarCpp.g:219:56: ( NEWLINE )+
						int cnt23=0;
						try { DebugEnterSubRule(23);
						while (true)
						{
							int alt23=2;
							try { DebugEnterDecision(23, false);
							int LA23_0 = input.LA(1);

							if ((LA23_0==NEWLINE))
							{
								alt23 = 1;
							}


							} finally { DebugExitDecision(23); }
							switch (alt23)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:219:56: NEWLINE
								{
								DebugLocation(219, 56);
								NEWLINE57=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def933);  
								stream_NEWLINE.Add(NEWLINE57);


								}
								break;

							default:
								if (cnt23 >= 1)
									goto loop23;

								EarlyExitException eee23 = new EarlyExitException( 23, input );
								DebugRecognitionException(eee23);
								throw eee23;
							}
							cnt23++;
						}
						loop23:
							;

						} finally { DebugExitSubRule(23); }


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(219, 67);
				DEDENT58=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def938);  
				stream_DEDENT.Add(DEDENT58);


				}
				break;

			}
			} finally { DebugExitSubRule(25); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 219:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(219, 79);
				// SugarCpp.g:219:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(219, 88);
				// SugarCpp.g:219:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(219, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:222:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:223:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(223, 4);
			// SugarCpp.g:223:4: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==108))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:4: attribute
				{
				DebugLocation(223, 4);
				PushFollow(Follow._attribute_in_enum_def960);
				attribute59=attribute();
				PopFollow();

				stream_attribute.Add(attribute59.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(223, 15);
			string_literal60=(IToken)Match(input,119,Follow._119_in_enum_def963);  
			stream_119.Add(string_literal60);

			DebugLocation(223, 22);
			PushFollow(Follow._ident_in_enum_def965);
			ident61=ident();
			PopFollow();

			stream_ident.Add(ident61.Tree);
			DebugLocation(223, 28);
			char_literal62=(IToken)Match(input,98,Follow._98_in_enum_def967);  
			stream_98.Add(char_literal62);

			DebugLocation(223, 32);
			// SugarCpp.g:223:32: ( ident ( '|' ident )* )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==IDENT))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:33: ident ( '|' ident )*
				{
				DebugLocation(223, 33);
				PushFollow(Follow._ident_in_enum_def970);
				ident63=ident();
				PopFollow();

				stream_ident.Add(ident63.Tree);
				DebugLocation(223, 39);
				// SugarCpp.g:223:39: ( '|' ident )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==139))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:223:40: '|' ident
						{
						DebugLocation(223, 40);
						char_literal64=(IToken)Match(input,139,Follow._139_in_enum_def973);  
						stream_139.Add(char_literal64);

						DebugLocation(223, 44);
						PushFollow(Follow._ident_in_enum_def975);
						ident65=ident();
						PopFollow();

						stream_ident.Add(ident65.Tree);

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: ident, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 223:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(223, 57);
				// SugarCpp.g:223:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(223, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(223, 64);
				// SugarCpp.g:223:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(223, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(223, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(223, 81);
				// SugarCpp.g:223:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(223, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(223, 94);
				// SugarCpp.g:223:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(223, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:226:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken INDENT69 = default(IToken);
		IToken NEWLINE70 = default(IToken);
		IToken DEDENT72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block71 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree INDENT69_tree = default(CommonTree);
		CommonTree NEWLINE70_tree = default(CommonTree);
		CommonTree DEDENT72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(226, 1);
		try
		{
			// SugarCpp.g:227:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:227:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(227, 4);
			string_literal66=(IToken)Match(input,129,Follow._129_in_namespace_def1008);  
			stream_129.Add(string_literal66);

			DebugLocation(227, 16);
			PushFollow(Follow._ident_in_namespace_def1010);
			ident67=ident();
			PopFollow();

			stream_ident.Add(ident67.Tree);
			DebugLocation(227, 22);
			// SugarCpp.g:227:22: ( NEWLINE )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:227:22: NEWLINE
					{
					DebugLocation(227, 22);
					NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1012);  
					stream_NEWLINE.Add(NEWLINE68);


					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(227, 31);
			INDENT69=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1015);  
			stream_INDENT.Add(INDENT69);

			DebugLocation(227, 38);
			// SugarCpp.g:227:38: ( NEWLINE )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==NEWLINE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:227:38: NEWLINE
					{
					DebugLocation(227, 38);
					NEWLINE70=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1017);  
					stream_NEWLINE.Add(NEWLINE70);


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(227, 47);
			PushFollow(Follow._global_block_in_namespace_def1020);
			global_block71=global_block();
			PopFollow();

			stream_global_block.Add(global_block71.Tree);
			DebugLocation(227, 60);
			DEDENT72=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1022);  
			stream_DEDENT.Add(DEDENT72);



			{
			// AST REWRITE
			// elements: ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 227:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(227, 70);
				// SugarCpp.g:227:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(227, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(227, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(227, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:230:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken NEWLINE84 = default(IToken);
		IToken INDENT85 = default(IToken);
		IToken NEWLINE86 = default(IToken);
		IToken DEDENT88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		CommonTree char_literal79_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree NEWLINE84_tree = default(CommonTree);
		CommonTree INDENT85_tree = default(CommonTree);
		CommonTree NEWLINE86_tree = default(CommonTree);
		CommonTree DEDENT88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:231:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(231, 5);
			// SugarCpp.g:231:5: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==108))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:5: attribute
				{
				DebugLocation(231, 5);
				PushFollow(Follow._attribute_in_class_def1044);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(231, 16);
			string_literal74=(IToken)Match(input,115,Follow._115_in_class_def1047);  
			stream_115.Add(string_literal74);

			DebugLocation(231, 24);
			PushFollow(Follow._ident_in_class_def1049);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(231, 30);
			// SugarCpp.g:231:30: ( generic_parameter )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==94))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:31: generic_parameter
				{
				DebugLocation(231, 31);
				PushFollow(Follow._generic_parameter_in_class_def1052);
				generic_parameter76=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(231, 51);
			// SugarCpp.g:231:51: ( '(' func_args ')' )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==73))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:52: '(' func_args ')'
				{
				DebugLocation(231, 52);
				char_literal77=(IToken)Match(input,73,Follow._73_in_class_def1057);  
				stream_73.Add(char_literal77);

				DebugLocation(231, 56);
				PushFollow(Follow._func_args_in_class_def1059);
				func_args78=func_args();
				PopFollow();

				stream_func_args.Add(func_args78.Tree);
				DebugLocation(231, 66);
				char_literal79=(IToken)Match(input,74,Follow._74_in_class_def1061);  
				stream_74.Add(char_literal79);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(231, 72);
			// SugarCpp.g:231:72: ( ':' ident ( ',' ident )* )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==90))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:73: ':' ident ( ',' ident )*
				{
				DebugLocation(231, 73);
				char_literal80=(IToken)Match(input,90,Follow._90_in_class_def1066);  
				stream_90.Add(char_literal80);

				DebugLocation(231, 77);
				PushFollow(Follow._ident_in_class_def1068);
				ident81=ident();
				PopFollow();

				stream_ident.Add(ident81.Tree);
				DebugLocation(231, 83);
				// SugarCpp.g:231:83: ( ',' ident )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==80))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:231:84: ',' ident
						{
						DebugLocation(231, 84);
						char_literal82=(IToken)Match(input,80,Follow._80_in_class_def1071);  
						stream_80.Add(char_literal82);

						DebugLocation(231, 88);
						PushFollow(Follow._ident_in_class_def1073);
						ident83=ident();
						PopFollow();

						stream_ident.Add(ident83.Tree);

						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(231, 98);
			// SugarCpp.g:231:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			try
			{
				alt38 = dfa38.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(231, 99);
				// SugarCpp.g:231:99: ( NEWLINE )+
				int cnt36=0;
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==NEWLINE))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:231:99: NEWLINE
						{
						DebugLocation(231, 99);
						NEWLINE84=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1080);  
						stream_NEWLINE.Add(NEWLINE84);


						}
						break;

					default:
						if (cnt36 >= 1)
							goto loop36;

						EarlyExitException eee36 = new EarlyExitException( 36, input );
						DebugRecognitionException(eee36);
						throw eee36;
					}
					cnt36++;
				}
				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(231, 108);
				INDENT85=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1083);  
				stream_INDENT.Add(INDENT85);

				DebugLocation(231, 115);
				// SugarCpp.g:231:115: ( NEWLINE )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==NEWLINE))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:231:115: NEWLINE
						{
						DebugLocation(231, 115);
						NEWLINE86=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1085);  
						stream_NEWLINE.Add(NEWLINE86);


						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(231, 124);
				PushFollow(Follow._global_block_in_class_def1088);
				global_block87=global_block();
				PopFollow();

				stream_global_block.Add(global_block87.Tree);
				DebugLocation(231, 137);
				DEDENT88=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1090);  
				stream_DEDENT.Add(DEDENT88);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: global_block, ident, attribute, generic_parameter, func_args, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 231:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(231, 149);
				// SugarCpp.g:231:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(231, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(231, 157);
				// SugarCpp.g:231:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(231, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(231, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(231, 174);
				// SugarCpp.g:231:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(231, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(231, 193);
				// SugarCpp.g:231:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(231, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(231, 204);
				// SugarCpp.g:231:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(231, 205);
					// SugarCpp.g:231:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(231, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(231, 218);
					// SugarCpp.g:231:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(231, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(231, 228);
				// SugarCpp.g:231:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(231, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:234:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);

		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(234, 34);
		try
		{
			// SugarCpp.g:234:13: ( '*' | '[' ']' | '&' )
			int alt39=3;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case 75:
				{
				alt39 = 1;
				}
				break;
			case 108:
				{
				alt39 = 2;
				}
				break;
			case 71:
				{
				alt39 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:234:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 15);
				char_literal89=(IToken)Match(input,75,Follow._75_in_type_name_op1131); 
				char_literal89_tree = (CommonTree)adaptor.Create(char_literal89);
				adaptor.AddChild(root_0, char_literal89_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:234:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 21);
				char_literal90=(IToken)Match(input,108,Follow._108_in_type_name_op1135); 
				char_literal90_tree = (CommonTree)adaptor.Create(char_literal90);
				adaptor.AddChild(root_0, char_literal90_tree);
				DebugLocation(234, 25);
				char_literal91=(IToken)Match(input,109,Follow._109_in_type_name_op1137); 
				char_literal91_tree = (CommonTree)adaptor.Create(char_literal91);
				adaptor.AddChild(root_0, char_literal91_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:234:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 31);
				char_literal92=(IToken)Match(input,71,Follow._71_in_type_name_op1141); 
				char_literal92_tree = (CommonTree)adaptor.Create(char_literal92);
				adaptor.AddChild(root_0, char_literal92_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
		}
		DebugLocation(234, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:235:1: type_name : ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal93 = default(IToken);
		IToken string_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(235, 1);
		try
		{
			// SugarCpp.g:236:2: ( ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:236:4: ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(236, 4);
			// SugarCpp.g:236:4: ( 'const' )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==116))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:236:4: 'const'
				{
				DebugLocation(236, 4);
				string_literal93=(IToken)Match(input,116,Follow._116_in_type_name1150);  
				stream_116.Add(string_literal93);


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(236, 13);
			// SugarCpp.g:236:13: ( 'unsigned' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==135))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:236:13: 'unsigned'
				{
				DebugLocation(236, 13);
				string_literal94=(IToken)Match(input,135,Follow._135_in_type_name1153);  
				stream_135.Add(string_literal94);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(236, 25);
			PushFollow(Follow._ident_in_type_name1156);
			ident95=ident();
			PopFollow();

			stream_ident.Add(ident95.Tree);
			DebugLocation(236, 31);
			// SugarCpp.g:236:31: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==94))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:236:32: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(236, 32);
				char_literal96=(IToken)Match(input,94,Follow._94_in_type_name1159);  
				stream_94.Add(char_literal96);

				DebugLocation(236, 36);
				// SugarCpp.g:236:36: ( type_name ( ',' type_name )* )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==IDENT||LA43_0==116||LA43_0==135))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:236:37: type_name ( ',' type_name )*
					{
					DebugLocation(236, 37);
					PushFollow(Follow._type_name_in_type_name1162);
					type_name97=type_name();
					PopFollow();

					stream_type_name.Add(type_name97.Tree);
					DebugLocation(236, 47);
					// SugarCpp.g:236:47: ( ',' type_name )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==80))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:236:48: ',' type_name
							{
							DebugLocation(236, 48);
							char_literal98=(IToken)Match(input,80,Follow._80_in_type_name1165);  
							stream_80.Add(char_literal98);

							DebugLocation(236, 52);
							PushFollow(Follow._type_name_in_type_name1167);
							type_name99=type_name();
							PopFollow();

							stream_type_name.Add(type_name99.Tree);

							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(236, 66);
				char_literal100=(IToken)Match(input,101,Follow._101_in_type_name1173);  
				stream_101.Add(char_literal100);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(236, 72);
			// SugarCpp.g:236:72: ( type_name_op )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==108))
				{
					int LA45_2 = input.LA(2);

					if ((LA45_2==109))
					{
						alt45 = 1;
					}


				}
				else if ((LA45_0==71||LA45_0==75))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:236:72: type_name_op
					{
					DebugLocation(236, 72);
					PushFollow(Follow._type_name_op_in_type_name1177);
					type_name_op101=type_name_op();
					PopFollow();

					stream_type_name_op.Add(type_name_op101.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: 94, 101, 116, 135, type_name, ident, type_name_op
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 236:86: -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(236, 89);
				// SugarCpp.g:236:89: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(236, 91);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(236, 102);
				// SugarCpp.g:236:102: ( 'const' )?
				if (stream_116.HasNext)
				{
					DebugLocation(236, 102);
					adaptor.AddChild(root_1, stream_116.NextNode());

				}
				stream_116.Reset();
				DebugLocation(236, 111);
				// SugarCpp.g:236:111: ( 'unsigned' )?
				if (stream_135.HasNext)
				{
					DebugLocation(236, 111);
					adaptor.AddChild(root_1, stream_135.NextNode());

				}
				stream_135.Reset();
				DebugLocation(236, 123);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(236, 129);
				// SugarCpp.g:236:129: ( '<' ( type_name )* '>' )?
				if (stream_94.HasNext||stream_101.HasNext||stream_type_name.HasNext)
				{
					DebugLocation(236, 130);
					adaptor.AddChild(root_1, stream_94.NextNode());
					DebugLocation(236, 134);
					// SugarCpp.g:236:134: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(236, 134);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(236, 145);
					adaptor.AddChild(root_1, stream_101.NextNode());

				}
				stream_94.Reset();
				stream_101.Reset();
				stream_type_name.Reset();
				DebugLocation(236, 152);
				// SugarCpp.g:236:152: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(236, 152);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:239:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 16);
		TraceIn("generic_parameter_inside", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(239, 1);
		try
		{
			// SugarCpp.g:240:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:240:4: ident ( ',' ident )*
			{
			DebugLocation(240, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1217);
			ident102=ident();
			PopFollow();

			stream_ident.Add(ident102.Tree);
			DebugLocation(240, 10);
			// SugarCpp.g:240:10: ( ',' ident )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==80))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:11: ',' ident
					{
					DebugLocation(240, 11);
					char_literal103=(IToken)Match(input,80,Follow._80_in_generic_parameter_inside1220);  
					stream_80.Add(char_literal103);

					DebugLocation(240, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1222);
					ident104=ident();
					PopFollow();

					stream_ident.Add(ident104.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(240, 26);
				// SugarCpp.g:240:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(240, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(240, 47);
				// SugarCpp.g:240:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(240, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 16);
			LeaveRule("generic_parameter_inside", 16);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:243:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 17);
		TraceIn("generic_parameter", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(243, 1);
		try
		{
			// SugarCpp.g:244:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(244, 4);
			char_literal105=(IToken)Match(input,94,Follow._94_in_generic_parameter1244);  
			stream_94.Add(char_literal105);

			DebugLocation(244, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1246);
			generic_parameter_inside106=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside106.Tree);
			DebugLocation(244, 33);
			char_literal107=(IToken)Match(input,101,Follow._101_in_generic_parameter1248);  
			stream_101.Add(char_literal107);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 244:37: -> generic_parameter_inside
			{
				DebugLocation(244, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 17);
			LeaveRule("generic_parameter", 17);
			LeaveRule_generic_parameter();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:247:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 18);
		TraceIn("func_args", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(247, 1);
		try
		{
			// SugarCpp.g:248:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(248, 4);
			PushFollow(Follow._func_args_item_in_func_args1263);
			func_args_item108=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item108.Tree);
			DebugLocation(248, 19);
			// SugarCpp.g:248:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==80))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:248:20: ',' func_args_item
					{
					DebugLocation(248, 20);
					char_literal109=(IToken)Match(input,80,Follow._80_in_func_args1266);  
					stream_80.Add(char_literal109);

					DebugLocation(248, 24);
					PushFollow(Follow._func_args_item_in_func_args1268);
					func_args_item110=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item110.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 248:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(248, 44);
				// SugarCpp.g:248:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(248, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(248, 56);
				// SugarCpp.g:248:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(248, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 18);
			LeaveRule("func_args", 18);
			LeaveRule_func_args();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:251:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 19);
		TraceIn("func_args_item", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken string_literal115 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken string_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree string_literal115_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree string_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(251, 1);
		try
		{
			// SugarCpp.g:252:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt51=2;
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==IDENT))
			{
				alt51 = 1;
			}
			else if ((LA51_0==92))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(252, 4);
				PushFollow(Follow._ident_list_in_func_args_item1290);
				ident_list111=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list111.Tree);
				DebugLocation(252, 15);
				char_literal112=(IToken)Match(input,90,Follow._90_in_func_args_item1292);  
				stream_90.Add(char_literal112);

				DebugLocation(252, 19);
				PushFollow(Follow._type_name_in_func_args_item1294);
				type_name113=type_name();
				PopFollow();

				stream_type_name.Add(type_name113.Tree);
				DebugLocation(252, 29);
				// SugarCpp.g:252:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt50=3;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				switch (input.LA(1))
				{
				case 92:
				case 98:
					{
					alt50 = 1;
					}
					break;
				case 73:
					{
					alt50 = 2;
					}
					break;
				case 74:
				case 80:
					{
					alt50 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:252:31: ( '=' | ':=' ) expr
					{
					DebugLocation(252, 31);
					// SugarCpp.g:252:31: ( '=' | ':=' )
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==98))
					{
						alt48 = 1;
					}
					else if ((LA48_0==92))
					{
						alt48 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:32: '='
						{
						DebugLocation(252, 32);
						char_literal114=(IToken)Match(input,98,Follow._98_in_func_args_item1299);  
						stream_98.Add(char_literal114);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:252:38: ':='
						{
						DebugLocation(252, 38);
						string_literal115=(IToken)Match(input,92,Follow._92_in_func_args_item1303);  
						stream_92.Add(string_literal115);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(252, 44);
					PushFollow(Follow._expr_in_func_args_item1306);
					expr116=expr();
					PopFollow();

					stream_expr.Add(expr116.Tree);


					{
					// AST REWRITE
					// elements: expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 252:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(252, 53);
						// SugarCpp.g:252:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(252, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(252, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(252, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(252, 93);
						// SugarCpp.g:252:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(252, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:253:33: '(' ( expr_list )? ')'
					{
					DebugLocation(253, 33);
					char_literal117=(IToken)Match(input,73,Follow._73_in_func_args_item1354);  
					stream_73.Add(char_literal117);

					DebugLocation(253, 37);
					// SugarCpp.g:253:37: ( expr_list )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, false);
					int LA49_0 = input.LA(1);

					if ((LA49_0==IDENT||LA49_0==NUMBER||LA49_0==STRING||LA49_0==66||LA49_0==71||LA49_0==73||LA49_0==75||(LA49_0>=77 && LA49_0<=78)||(LA49_0>=81 && LA49_0<=82)||LA49_0==107||LA49_0==130||LA49_0==142))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:253:37: expr_list
						{
						DebugLocation(253, 37);
						PushFollow(Follow._expr_list_in_func_args_item1356);
						expr_list118=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list118.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(253, 48);
					char_literal119=(IToken)Match(input,74,Follow._74_in_func_args_item1359);  
					stream_74.Add(char_literal119);



					{
					// AST REWRITE
					// elements: type_name, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 253:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(253, 56);
						// SugarCpp.g:253:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(253, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(253, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(253, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(253, 98);
						// SugarCpp.g:253:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(253, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:254:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 254:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(254, 18);
						// SugarCpp.g:254:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(254, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(254, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(254, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:256:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(256, 8);
				string_literal120=(IToken)Match(input,92,Follow._92_in_func_args_item1416); 
				string_literal120_tree = (CommonTree)adaptor.Create(string_literal120);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal120_tree, root_0);
				DebugLocation(256, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1420);
				modify_expr121=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr121.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 19);
			LeaveRule("func_args_item", 19);
			LeaveRule_func_args_item();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:259:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 20);
		TraceIn("func_def", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken NEWLINE130 = default(IToken);
		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree NEWLINE130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(259, 4);
		try
		{
			// SugarCpp.g:260:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:260:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(260, 4);
			// SugarCpp.g:260:4: ( attribute )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==108))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:4: attribute
				{
				DebugLocation(260, 4);
				PushFollow(Follow._attribute_in_func_def1431);
				attribute122=attribute();
				PopFollow();

				stream_attribute.Add(attribute122.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(260, 15);
			// SugarCpp.g:260:15: ( type_name )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:15: type_name
				{
				DebugLocation(260, 15);
				PushFollow(Follow._type_name_in_func_def1434);
				type_name123=type_name();
				PopFollow();

				stream_type_name.Add(type_name123.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(260, 26);
			// SugarCpp.g:260:26: ( '~' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==142))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:26: '~'
				{
				DebugLocation(260, 26);
				char_literal124=(IToken)Match(input,142,Follow._142_in_func_def1437);  
				stream_142.Add(char_literal124);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(260, 31);
			PushFollow(Follow._ident_in_func_def1440);
			ident125=ident();
			PopFollow();

			stream_ident.Add(ident125.Tree);
			DebugLocation(260, 37);
			// SugarCpp.g:260:37: ( generic_parameter )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==94))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:37: generic_parameter
				{
				DebugLocation(260, 37);
				PushFollow(Follow._generic_parameter_in_func_def1442);
				generic_parameter126=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(260, 56);
			char_literal127=(IToken)Match(input,73,Follow._73_in_func_def1445);  
			stream_73.Add(char_literal127);

			DebugLocation(260, 60);
			// SugarCpp.g:260:60: ( func_args )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==92))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:60: func_args
				{
				DebugLocation(260, 60);
				PushFollow(Follow._func_args_in_func_def1447);
				func_args128=func_args();
				PopFollow();

				stream_func_args.Add(func_args128.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(260, 71);
			char_literal129=(IToken)Match(input,74,Follow._74_in_func_def1450);  
			stream_74.Add(char_literal129);

			DebugLocation(260, 75);
			// SugarCpp.g:260:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==NEWLINE))
			{
				alt58 = 1;
			}
			else if ((LA58_0==98))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(260, 76);
				// SugarCpp.g:260:76: ( NEWLINE )+
				int cnt57=0;
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==NEWLINE))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:260:76: NEWLINE
						{
						DebugLocation(260, 76);
						NEWLINE130=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1453);  
						stream_NEWLINE.Add(NEWLINE130);


						}
						break;

					default:
						if (cnt57 >= 1)
							goto loop57;

						EarlyExitException eee57 = new EarlyExitException( 57, input );
						DebugRecognitionException(eee57);
						throw eee57;
					}
					cnt57++;
				}
				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(260, 85);
				PushFollow(Follow._stmt_block_in_func_def1456);
				stmt_block131=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block131.Tree);


				{
				// AST REWRITE
				// elements: generic_parameter, func_args, ident, type_name, attribute, stmt_block, 142
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 260:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(260, 99);
					// SugarCpp.g:260:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(260, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(260, 110);
					// SugarCpp.g:260:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(260, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(260, 121);
					// SugarCpp.g:260:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(260, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(260, 132);
					// SugarCpp.g:260:132: ( '~' )?
					if (stream_142.HasNext)
					{
						DebugLocation(260, 132);
						adaptor.AddChild(root_1, stream_142.NextNode());

					}
					stream_142.Reset();
					DebugLocation(260, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(260, 143);
					// SugarCpp.g:260:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(260, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(260, 162);
					// SugarCpp.g:260:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(260, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(260, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:261:23: '=' expr
				{
				DebugLocation(261, 23);
				char_literal132=(IToken)Match(input,98,Follow._98_in_func_def1505);  
				stream_98.Add(char_literal132);

				DebugLocation(261, 27);
				PushFollow(Follow._expr_in_func_def1507);
				expr133=expr();
				PopFollow();

				stream_expr.Add(expr133.Tree);


				{
				// AST REWRITE
				// elements: type_name, 142, expr, generic_parameter, ident, func_args, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 261:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(261, 36);
					// SugarCpp.g:261:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(261, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(261, 47);
					// SugarCpp.g:261:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(261, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(261, 58);
					// SugarCpp.g:261:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(261, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(261, 69);
					// SugarCpp.g:261:69: ( '~' )?
					if (stream_142.HasNext)
					{
						DebugLocation(261, 69);
						adaptor.AddChild(root_1, stream_142.NextNode());

					}
					stream_142.Reset();
					DebugLocation(261, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(261, 80);
					// SugarCpp.g:261:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(261, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(261, 99);
					// SugarCpp.g:261:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(261, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(261, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 20);
			LeaveRule("func_def", 20);
			LeaveRule_func_def();
		}
		DebugLocation(262, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:264:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 21);
		TraceIn("stmt_block", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT134 = default(IToken);
		IToken NEWLINE135 = default(IToken);
		IToken NEWLINE137 = default(IToken);
		IToken DEDENT138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT134_tree = default(CommonTree);
		CommonTree NEWLINE135_tree = default(CommonTree);
		CommonTree NEWLINE137_tree = default(CommonTree);
		CommonTree DEDENT138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(264, 1);
		try
		{
			// SugarCpp.g:265:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(265, 4);
			INDENT134=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1548);  
			stream_INDENT.Add(INDENT134);

			DebugLocation(265, 11);
			// SugarCpp.g:265:11: ( NEWLINE )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==NEWLINE))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:265:11: NEWLINE
					{
					DebugLocation(265, 11);
					NEWLINE135=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1550);  
					stream_NEWLINE.Add(NEWLINE135);


					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(265, 21);
			// SugarCpp.g:265:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==73||LA61_0==107||LA61_0==117||(LA61_0>=120 && LA61_0<=122)||(LA61_0>=127 && LA61_0<=128)||(LA61_0>=132 && LA61_0<=134)||(LA61_0>=136 && LA61_0<=138)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:265:22: stmt ( NEWLINE )+
					{
					DebugLocation(265, 22);
					PushFollow(Follow._stmt_in_stmt_block1555);
					stmt136=stmt();
					PopFollow();

					stream_stmt.Add(stmt136.Tree);
					DebugLocation(265, 27);
					// SugarCpp.g:265:27: ( NEWLINE )+
					int cnt60=0;
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==NEWLINE))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:265:27: NEWLINE
							{
							DebugLocation(265, 27);
							NEWLINE137=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1557);  
							stream_NEWLINE.Add(NEWLINE137);


							}
							break;

						default:
							if (cnt60 >= 1)
								goto loop60;

							EarlyExitException eee60 = new EarlyExitException( 60, input );
							DebugRecognitionException(eee60);
							throw eee60;
						}
						cnt60++;
					}
					loop60:
						;

					} finally { DebugExitSubRule(60); }


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(265, 38);
			DEDENT138=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1562);  
			stream_DEDENT.Add(DEDENT138);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(265, 48);
				// SugarCpp.g:265:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(265, 61);
				// SugarCpp.g:265:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(265, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 21);
			LeaveRule("stmt_block", 21);
			LeaveRule_stmt_block();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:268:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 22);
		TraceIn("stmt", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_linq144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(268, 1);
		try
		{
			// SugarCpp.g:269:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer )
			int alt62=7;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 73:
			case 107:
			case 132:
			case 134:
			case 136:
				{
				alt62 = 1;
				}
				break;
			case 122:
				{
				alt62 = 2;
				}
				break;
			case 120:
				{
				alt62 = 3;
				}
				break;
			case 128:
			case 138:
				{
				alt62 = 4;
				}
				break;
			case 133:
				{
				alt62 = 5;
				}
				break;
			case 121:
			case 127:
			case 137:
				{
				alt62 = 6;
				}
				break;
			case 117:
				{
				alt62 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(269, 4);
				PushFollow(Follow._stmt_expr_in_stmt1582);
				stmt_expr139=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr139.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:270:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(270, 4);
				PushFollow(Follow._stmt_if_in_stmt1587);
				stmt_if140=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if140.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:271:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(271, 4);
				PushFollow(Follow._stmt_for_in_stmt1592);
				stmt_for141=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for141.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:272:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(272, 4);
				PushFollow(Follow._stmt_while_in_stmt1597);
				stmt_while142=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while142.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:273:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(273, 4);
				PushFollow(Follow._stmt_try_in_stmt1602);
				stmt_try143=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try143.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:274:4: stmt_linq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(274, 4);
				PushFollow(Follow._stmt_linq_in_stmt1607);
				stmt_linq144=stmt_linq();
				PopFollow();

				adaptor.AddChild(root_0, stmt_linq144.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:275:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(275, 4);
				PushFollow(Follow._stmt_defer_in_stmt1612);
				stmt_defer145=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer145.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 22);
			LeaveRule("stmt", 22);
			LeaveRule_stmt();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:278:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )? ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 23);
		TraceIn("stmt_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal146 = default(IToken);
		IToken string_literal148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal146_tree = default(CommonTree);
		CommonTree string_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(278, 1);
		try
		{
			// SugarCpp.g:279:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:279:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )?
			{
			DebugLocation(279, 4);
			// SugarCpp.g:279:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:279:5: a= stmt_expr_item
			{
			DebugLocation(279, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1626);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 279:22: -> $a
			{
				DebugLocation(279, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(279, 29);
			// SugarCpp.g:279:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )?
			int alt63=3;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==122))
			{
				alt63 = 1;
			}
			else if ((LA63_0==138))
			{
				alt63 = 2;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:279:31: 'if' expr
				{
				DebugLocation(279, 31);
				string_literal146=(IToken)Match(input,122,Follow._122_in_stmt_expr1636);  
				stream_122.Add(string_literal146);

				DebugLocation(279, 36);
				PushFollow(Follow._expr_in_stmt_expr1638);
				expr147=expr();
				PopFollow();

				stream_expr.Add(expr147.Tree);


				{
				// AST REWRITE
				// elements: stmt_expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 279:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
				{
					DebugLocation(279, 44);
					// SugarCpp.g:279:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(279, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

					DebugLocation(279, 54);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(279, 59);
					// SugarCpp.g:279:59: ^( Stmt_Block $stmt_expr)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(279, 61);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(279, 73);
					adaptor.AddChild(root_2, stream_retval.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:280:13: 'while' expr
				{
				DebugLocation(280, 13);
				string_literal148=(IToken)Match(input,138,Follow._138_in_stmt_expr1667);  
				stream_138.Add(string_literal148);

				DebugLocation(280, 21);
				PushFollow(Follow._expr_in_stmt_expr1669);
				expr149=expr();
				PopFollow();

				stream_expr.Add(expr149.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 280:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
				{
					DebugLocation(280, 29);
					// SugarCpp.g:280:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(280, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

					DebugLocation(280, 42);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(280, 47);
					// SugarCpp.g:280:47: ^( Stmt_Block $stmt_expr)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(280, 49);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(280, 61);
					adaptor.AddChild(root_2, stream_retval.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 23);
			LeaveRule("stmt_expr", 23);
			LeaveRule_stmt_expr();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:284:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 24);
		TraceIn("stmt_expr_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(284, 1);
		try
		{
			// SugarCpp.g:285:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt64=5;
			try { DebugEnterDecision(64, false);
			try
			{
				alt64 = dfa64.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(285, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item1708);
				stmt_alloc150=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc150.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:286:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(286, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item1713);
				stmt_return151=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return151.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:287:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(287, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item1718);
				stmt_using152=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using152.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:288:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(288, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item1723);
				stmt_typedef153=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef153.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:289:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(289, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item1728);
				stmt_modify154=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify154.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 24);
			LeaveRule("stmt_expr_item", 24);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:292:1: stmt_defer : 'defer' stmt -> ^( Stmt_Defer stmt ) ;
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 25);
		TraceIn("stmt_defer", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal155_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(292, 1);
		try
		{
			// SugarCpp.g:293:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) )
			DebugEnterAlt(1);
			// SugarCpp.g:293:4: 'defer' stmt
			{
			DebugLocation(293, 4);
			string_literal155=(IToken)Match(input,117,Follow._117_in_stmt_defer1739);  
			stream_117.Add(string_literal155);

			DebugLocation(293, 12);
			PushFollow(Follow._stmt_in_stmt_defer1741);
			stmt156=stmt();
			PopFollow();

			stream_stmt.Add(stmt156.Tree);


			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 293:17: -> ^( Stmt_Defer stmt )
			{
				DebugLocation(293, 20);
				// SugarCpp.g:293:20: ^( Stmt_Defer stmt )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(293, 22);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

				DebugLocation(293, 33);
				adaptor.AddChild(root_1, stream_stmt.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 25);
			LeaveRule("stmt_defer", 25);
			LeaveRule_stmt_defer();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:296:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 26);
		TraceIn("stmt_typedef", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal157 = default(IToken);
		IToken char_literal159 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name160 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal157_tree = default(CommonTree);
		CommonTree char_literal159_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(296, 1);
		try
		{
			// SugarCpp.g:297:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:297:4: 'typedef' ident '=' type_name
			{
			DebugLocation(297, 4);
			string_literal157=(IToken)Match(input,134,Follow._134_in_stmt_typedef1760);  
			stream_134.Add(string_literal157);

			DebugLocation(297, 14);
			PushFollow(Follow._ident_in_stmt_typedef1762);
			ident158=ident();
			PopFollow();

			stream_ident.Add(ident158.Tree);
			DebugLocation(297, 20);
			char_literal159=(IToken)Match(input,98,Follow._98_in_stmt_typedef1764);  
			stream_98.Add(char_literal159);

			DebugLocation(297, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1766);
			type_name160=type_name();
			PopFollow();

			stream_type_name.Add(type_name160.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 297:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(297, 37);
				// SugarCpp.g:297:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(297, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(297, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(297, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 26);
			LeaveRule("stmt_typedef", 26);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:300:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 27);
		TraceIn("stmt_using_item", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal162 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident161 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal162_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(300, 36);
		try
		{
			// SugarCpp.g:300:16: ( ident | 'namespace' )
			int alt65=2;
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==IDENT))
			{
				alt65 = 1;
			}
			else if ((LA65_0==129))
			{
				alt65 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:300:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(300, 18);
				PushFollow(Follow._ident_in_stmt_using_item1785);
				ident161=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident161.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:300:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(300, 26);
				string_literal162=(IToken)Match(input,129,Follow._129_in_stmt_using_item1789); 
				string_literal162_tree = (CommonTree)adaptor.Create(string_literal162);
				adaptor.AddChild(root_0, string_literal162_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 27);
			LeaveRule("stmt_using_item", 27);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(300, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:301:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 28);
		TraceIn("stmt_using", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal163 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item164 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal163_tree = default(CommonTree);
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(301, 1);
		try
		{
			// SugarCpp.g:302:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:302:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(302, 4);
			string_literal163=(IToken)Match(input,136,Follow._136_in_stmt_using1797);  
			stream_136.Add(string_literal163);

			DebugLocation(302, 12);
			// SugarCpp.g:302:12: ( stmt_using_item )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==IDENT||LA66_0==129))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:302:12: stmt_using_item
					{
					DebugLocation(302, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1799);
					stmt_using_item164=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item164.Tree);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 302:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(302, 32);
				// SugarCpp.g:302:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(302, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(302, 45);
				// SugarCpp.g:302:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(302, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 28);
			LeaveRule("stmt_using", 28);
			LeaveRule_stmt_using();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:305:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 29);
		TraceIn("stmt_return", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal165 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr166 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal165_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(305, 1);
		try
		{
			// SugarCpp.g:306:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:306:4: 'return' ( expr )?
			{
			DebugLocation(306, 4);
			string_literal165=(IToken)Match(input,132,Follow._132_in_stmt_return1820);  
			stream_132.Add(string_literal165);

			DebugLocation(306, 13);
			// SugarCpp.g:306:13: ( expr )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==IDENT||LA67_0==NUMBER||LA67_0==STRING||LA67_0==66||LA67_0==71||LA67_0==73||LA67_0==75||(LA67_0>=77 && LA67_0<=78)||(LA67_0>=81 && LA67_0<=82)||LA67_0==107||LA67_0==130||LA67_0==142))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:306:13: expr
				{
				DebugLocation(306, 13);
				PushFollow(Follow._expr_in_stmt_return1822);
				expr166=expr();
				PopFollow();

				stream_expr.Add(expr166.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(67); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 306:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(306, 22);
				// SugarCpp.g:306:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(306, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(306, 36);
				// SugarCpp.g:306:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(306, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 29);
			LeaveRule("stmt_return", 29);
			LeaveRule_stmt_return();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:309:1: stmt_if : 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 30);
		TraceIn("stmt_if", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal167 = default(IToken);
		IToken NEWLINE170 = default(IToken);
		IToken string_literal171 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block172 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal167_tree = default(CommonTree);
		CommonTree NEWLINE170_tree = default(CommonTree);
		CommonTree string_literal171_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(309, 1);
		try
		{
			// SugarCpp.g:310:2: ( 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:310:4: 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )?
			{
			DebugLocation(310, 4);
			string_literal167=(IToken)Match(input,122,Follow._122_in_stmt_if1843);  
			stream_122.Add(string_literal167);

			DebugLocation(310, 9);
			PushFollow(Follow._expr_in_stmt_if1845);
			expr168=expr();
			PopFollow();

			stream_expr.Add(expr168.Tree);
			DebugLocation(310, 14);
			PushFollow(Follow._stmt_block_in_stmt_if1847);
			stmt_block169=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block169.Tree);
			DebugLocation(310, 25);
			// SugarCpp.g:310:25: ( ( NEWLINE )* 'else' stmt_block )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			try
			{
				alt69 = dfa69.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:310:26: ( NEWLINE )* 'else' stmt_block
				{
				DebugLocation(310, 26);
				// SugarCpp.g:310:26: ( NEWLINE )*
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==NEWLINE))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch ( alt68 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:310:26: NEWLINE
						{
						DebugLocation(310, 26);
						NEWLINE170=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1850);  
						stream_NEWLINE.Add(NEWLINE170);


						}
						break;

					default:
						goto loop68;
					}
				}

				loop68:
					;

				} finally { DebugExitSubRule(68); }

				DebugLocation(310, 35);
				string_literal171=(IToken)Match(input,118,Follow._118_in_stmt_if1853);  
				stream_118.Add(string_literal171);

				DebugLocation(310, 42);
				PushFollow(Follow._stmt_block_in_stmt_if1855);
				stmt_block172=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block172.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(69); }



			{
			// AST REWRITE
			// elements: stmt_block, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 310:55: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(310, 58);
				// SugarCpp.g:310:58: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(310, 60);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(310, 68);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(310, 73);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(310, 84);
				// SugarCpp.g:310:84: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(310, 84);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 30);
			LeaveRule("stmt_if", 30);
			LeaveRule_stmt_if();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:313:1: stmt_while : ( 'while' expr stmt_block -> ^( Stmt_While expr stmt_block ) | 'loop' stmt_block -> ^( Stmt_Loop stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 31);
		TraceIn("stmt_while", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal173 = default(IToken);
		IToken string_literal176 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block177 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal173_tree = default(CommonTree);
		CommonTree string_literal176_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(313, 1);
		try
		{
			// SugarCpp.g:314:2: ( 'while' expr stmt_block -> ^( Stmt_While expr stmt_block ) | 'loop' stmt_block -> ^( Stmt_Loop stmt_block ) )
			int alt70=2;
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==138))
			{
				alt70 = 1;
			}
			else if ((LA70_0==128))
			{
				alt70 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:4: 'while' expr stmt_block
				{
				DebugLocation(314, 4);
				string_literal173=(IToken)Match(input,138,Follow._138_in_stmt_while1881);  
				stream_138.Add(string_literal173);

				DebugLocation(314, 12);
				PushFollow(Follow._expr_in_stmt_while1883);
				expr174=expr();
				PopFollow();

				stream_expr.Add(expr174.Tree);
				DebugLocation(314, 17);
				PushFollow(Follow._stmt_block_in_stmt_while1885);
				stmt_block175=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block175.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 314:28: -> ^( Stmt_While expr stmt_block )
				{
					DebugLocation(314, 31);
					// SugarCpp.g:314:31: ^( Stmt_While expr stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(314, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

					DebugLocation(314, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(314, 49);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:315:4: 'loop' stmt_block
				{
				DebugLocation(315, 4);
				string_literal176=(IToken)Match(input,128,Follow._128_in_stmt_while1900);  
				stream_128.Add(string_literal176);

				DebugLocation(315, 11);
				PushFollow(Follow._stmt_block_in_stmt_while1902);
				stmt_block177=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block177.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 315:22: -> ^( Stmt_Loop stmt_block )
				{
					DebugLocation(315, 25);
					// SugarCpp.g:315:25: ^( Stmt_Loop stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(315, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(315, 37);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 31);
			LeaveRule("stmt_while", 31);
			LeaveRule_stmt_while();
		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:318:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 32);
		TraceIn("stmt_for", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal178 = default(IToken);
		IToken char_literal179 = default(IToken);
		IToken char_literal181 = default(IToken);
		IToken char_literal183 = default(IToken);
		IToken string_literal185 = default(IToken);
		IToken char_literal187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block188 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal178_tree = default(CommonTree);
		CommonTree char_literal179_tree = default(CommonTree);
		CommonTree char_literal181_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		CommonTree string_literal185_tree = default(CommonTree);
		CommonTree char_literal187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(318, 1);
		try
		{
			// SugarCpp.g:323:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:323:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(323, 4);
			string_literal178=(IToken)Match(input,120,Follow._120_in_stmt_for1926);  
			stream_120.Add(string_literal178);

			DebugLocation(323, 10);
			char_literal179=(IToken)Match(input,73,Follow._73_in_stmt_for1928);  
			stream_73.Add(char_literal179);

			DebugLocation(323, 14);
			PushFollow(Follow._expr_in_stmt_for1930);
			expr180=expr();
			PopFollow();

			stream_expr.Add(expr180.Tree);
			DebugLocation(323, 19);
			// SugarCpp.g:323:19: ( ';' expr ';' expr | 'in' expr )
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==93))
			{
				alt71 = 1;
			}
			else if ((LA71_0==124))
			{
				alt71 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:20: ';' expr ';' expr
				{
				DebugLocation(323, 20);
				char_literal181=(IToken)Match(input,93,Follow._93_in_stmt_for1933);  
				stream_93.Add(char_literal181);

				DebugLocation(323, 24);
				PushFollow(Follow._expr_in_stmt_for1935);
				expr182=expr();
				PopFollow();

				stream_expr.Add(expr182.Tree);
				DebugLocation(323, 29);
				char_literal183=(IToken)Match(input,93,Follow._93_in_stmt_for1937);  
				stream_93.Add(char_literal183);

				DebugLocation(323, 33);
				PushFollow(Follow._expr_in_stmt_for1939);
				expr184=expr();
				PopFollow();

				stream_expr.Add(expr184.Tree);
				DebugLocation(323, 38);
				type=0;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:323:50: 'in' expr
				{
				DebugLocation(323, 50);
				string_literal185=(IToken)Match(input,124,Follow._124_in_stmt_for1945);  
				stream_124.Add(string_literal185);

				DebugLocation(323, 55);
				PushFollow(Follow._expr_in_stmt_for1947);
				expr186=expr();
				PopFollow();

				stream_expr.Add(expr186.Tree);
				DebugLocation(323, 60);
				type=1;

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(323, 71);
			char_literal187=(IToken)Match(input,74,Follow._74_in_stmt_for1952);  
			stream_74.Add(char_literal187);

			DebugLocation(323, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1954);
			stmt_block188=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block188.Tree);


			{
			// AST REWRITE
			// elements: expr, expr, expr, stmt_block, stmt_block, expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 324:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(324, 18);
				// SugarCpp.g:324:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(324, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(324, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(324, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(324, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(324, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 325:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(325, 7);
				// SugarCpp.g:325:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(325, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(325, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(325, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(325, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 32);
			LeaveRule("stmt_for", 32);
			LeaveRule_stmt_for();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:328:1: stmt_try : 'try' stmt_block 'catch' expr stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 33);
		TraceIn("stmt_try", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal189 = default(IToken);
		IToken string_literal191 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block193 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal189_tree = default(CommonTree);
		CommonTree string_literal191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( 'try' stmt_block 'catch' expr stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: 'try' stmt_block 'catch' expr stmt_block
			{
			DebugLocation(329, 4);
			string_literal189=(IToken)Match(input,133,Follow._133_in_stmt_try1999);  
			stream_133.Add(string_literal189);

			DebugLocation(329, 10);
			PushFollow(Follow._stmt_block_in_stmt_try2001);
			stmt_block190=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block190.Tree);
			DebugLocation(329, 21);
			string_literal191=(IToken)Match(input,114,Follow._114_in_stmt_try2003);  
			stream_114.Add(string_literal191);

			DebugLocation(329, 29);
			PushFollow(Follow._expr_in_stmt_try2005);
			expr192=expr();
			PopFollow();

			stream_expr.Add(expr192.Tree);
			DebugLocation(329, 34);
			PushFollow(Follow._stmt_block_in_stmt_try2007);
			stmt_block193=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block193.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:45: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(329, 48);
				// SugarCpp.g:329:48: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(329, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(329, 59);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(329, 70);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(329, 75);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 33);
			LeaveRule("stmt_try", 33);
			LeaveRule_stmt_try();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarCpp.g:332:1: linq_item : ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) );
	[GrammarRule("linq_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 34);
		TraceIn("linq_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal194 = default(IToken);
		IToken string_literal196 = default(IToken);
		IToken string_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken string_literal202 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr203 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal194_tree = default(CommonTree);
		CommonTree string_literal196_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree string_literal202_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) )
			int alt72=3;
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case 121:
				{
				alt72 = 1;
				}
				break;
			case 127:
				{
				alt72 = 2;
				}
				break;
			case 137:
				{
				alt72 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:333:4: 'from' expr 'in' expr
				{
				DebugLocation(333, 4);
				string_literal194=(IToken)Match(input,121,Follow._121_in_linq_item2030);  
				stream_121.Add(string_literal194);

				DebugLocation(333, 11);
				PushFollow(Follow._expr_in_linq_item2032);
				expr195=expr();
				PopFollow();

				stream_expr.Add(expr195.Tree);
				DebugLocation(333, 16);
				string_literal196=(IToken)Match(input,124,Follow._124_in_linq_item2034);  
				stream_124.Add(string_literal196);

				DebugLocation(333, 21);
				PushFollow(Follow._expr_in_linq_item2036);
				expr197=expr();
				PopFollow();

				stream_expr.Add(expr197.Tree);


				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 333:26: -> ^( Linq_From expr expr )
				{
					DebugLocation(333, 29);
					// SugarCpp.g:333:29: ^( Linq_From expr expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(333, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_From, "Linq_From"), root_1);

					DebugLocation(333, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(333, 46);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:334:4: 'let' ident '=' expr
				{
				DebugLocation(334, 4);
				string_literal198=(IToken)Match(input,127,Follow._127_in_linq_item2051);  
				stream_127.Add(string_literal198);

				DebugLocation(334, 10);
				PushFollow(Follow._ident_in_linq_item2053);
				ident199=ident();
				PopFollow();

				stream_ident.Add(ident199.Tree);
				DebugLocation(334, 16);
				char_literal200=(IToken)Match(input,98,Follow._98_in_linq_item2055);  
				stream_98.Add(char_literal200);

				DebugLocation(334, 20);
				PushFollow(Follow._expr_in_linq_item2057);
				expr201=expr();
				PopFollow();

				stream_expr.Add(expr201.Tree);


				{
				// AST REWRITE
				// elements: ident, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 334:25: -> ^( Linq_Let ident expr )
				{
					DebugLocation(334, 28);
					// SugarCpp.g:334:28: ^( Linq_Let ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(334, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Let, "Linq_Let"), root_1);

					DebugLocation(334, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(334, 45);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:335:4: 'where' expr
				{
				DebugLocation(335, 4);
				string_literal202=(IToken)Match(input,137,Follow._137_in_linq_item2072);  
				stream_137.Add(string_literal202);

				DebugLocation(335, 12);
				PushFollow(Follow._expr_in_linq_item2074);
				expr203=expr();
				PopFollow();

				stream_expr.Add(expr203.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 335:17: -> ^( Linq_Where expr )
				{
					DebugLocation(335, 20);
					// SugarCpp.g:335:20: ^( Linq_Where expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(335, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Where, "Linq_Where"), root_1);

					DebugLocation(335, 33);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_item", 34);
			LeaveRule("linq_item", 34);
			LeaveRule_linq_item();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return retval;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarCpp.g:338:1: linq_prefix : ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 35);
		TraceIn("linq_prefix", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE206 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item205 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE206_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_linq_item=new RewriteRuleSubtreeStream(adaptor,"rule linq_item");
		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(338, 1);
		try
		{
			// SugarCpp.g:339:2: ( ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:339:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			{
			DebugLocation(339, 4);
			// SugarCpp.g:339:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			int cnt75=0;
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==121||LA75_0==127||LA75_0==137))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:339:5: linq_item ( linq_item )* ( NEWLINE )+
					{
					DebugLocation(339, 5);
					PushFollow(Follow._linq_item_in_linq_prefix2094);
					linq_item204=linq_item();
					PopFollow();

					stream_linq_item.Add(linq_item204.Tree);
					DebugLocation(339, 15);
					// SugarCpp.g:339:15: ( linq_item )*
					try { DebugEnterSubRule(73);
					while (true)
					{
						int alt73=2;
						try { DebugEnterDecision(73, false);
						int LA73_0 = input.LA(1);

						if ((LA73_0==121||LA73_0==127||LA73_0==137))
						{
							alt73 = 1;
						}


						} finally { DebugExitDecision(73); }
						switch ( alt73 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:339:15: linq_item
							{
							DebugLocation(339, 15);
							PushFollow(Follow._linq_item_in_linq_prefix2096);
							linq_item205=linq_item();
							PopFollow();

							stream_linq_item.Add(linq_item205.Tree);

							}
							break;

						default:
							goto loop73;
						}
					}

					loop73:
						;

					} finally { DebugExitSubRule(73); }

					DebugLocation(339, 26);
					// SugarCpp.g:339:26: ( NEWLINE )+
					int cnt74=0;
					try { DebugEnterSubRule(74);
					while (true)
					{
						int alt74=2;
						try { DebugEnterDecision(74, false);
						int LA74_0 = input.LA(1);

						if ((LA74_0==NEWLINE))
						{
							alt74 = 1;
						}


						} finally { DebugExitDecision(74); }
						switch (alt74)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:339:26: NEWLINE
							{
							DebugLocation(339, 26);
							NEWLINE206=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix2099);  
							stream_NEWLINE.Add(NEWLINE206);


							}
							break;

						default:
							if (cnt74 >= 1)
								goto loop74;

							EarlyExitException eee74 = new EarlyExitException( 74, input );
							DebugRecognitionException(eee74);
							throw eee74;
						}
						cnt74++;
					}
					loop74:
						;

					} finally { DebugExitSubRule(74); }


					}
					break;

				default:
					if (cnt75 >= 1)
						goto loop75;

					EarlyExitException eee75 = new EarlyExitException( 75, input );
					DebugRecognitionException(eee75);
					throw eee75;
				}
				cnt75++;
			}
			loop75:
				;

			} finally { DebugExitSubRule(75); }



			{
			// AST REWRITE
			// elements: linq_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 339:37: -> ^( Linq_Prefix ( linq_item )+ )
			{
				DebugLocation(339, 40);
				// SugarCpp.g:339:40: ^( Linq_Prefix ( linq_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(339, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Prefix, "Linq_Prefix"), root_1);

				DebugLocation(339, 54);
				if (!(stream_linq_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_linq_item.HasNext )
				{
					DebugLocation(339, 54);
					adaptor.AddChild(root_1, stream_linq_item.NextTree());

				}
				stream_linq_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_prefix", 35);
			LeaveRule("linq_prefix", 35);
			LeaveRule_linq_prefix();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return retval;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarCpp.g:342:1: stmt_linq : linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 36);
		TraceIn("stmt_linq", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> linq_prefix207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block208 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_linq_prefix=new RewriteRuleSubtreeStream(adaptor,"rule linq_prefix");
		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(342, 1);
		try
		{
			// SugarCpp.g:343:2: ( linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:343:4: linq_prefix stmt_block
			{
			DebugLocation(343, 4);
			PushFollow(Follow._linq_prefix_in_stmt_linq2122);
			linq_prefix207=linq_prefix();
			PopFollow();

			stream_linq_prefix.Add(linq_prefix207.Tree);
			DebugLocation(343, 16);
			PushFollow(Follow._stmt_block_in_stmt_linq2124);
			stmt_block208=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block208.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, linq_prefix
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 343:27: -> ^( Stmt_Linq linq_prefix stmt_block )
			{
				DebugLocation(343, 30);
				// SugarCpp.g:343:30: ^( Stmt_Linq linq_prefix stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(343, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Linq, "Stmt_Linq"), root_1);

				DebugLocation(343, 42);
				adaptor.AddChild(root_1, stream_linq_prefix.NextTree());
				DebugLocation(343, 54);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_linq", 36);
			LeaveRule("stmt_linq", 36);
			LeaveRule_stmt_linq();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return retval;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:346:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 37);
		TraceIn("ident_list", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal210 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident211 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal210_tree = default(CommonTree);
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(346, 1);
		try
		{
			// SugarCpp.g:347:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:347:4: ident ( ',' ident )*
			{
			DebugLocation(347, 4);
			PushFollow(Follow._ident_in_ident_list2145);
			ident209=ident();
			PopFollow();

			stream_ident.Add(ident209.Tree);
			DebugLocation(347, 10);
			// SugarCpp.g:347:10: ( ',' ident )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==80))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:347:11: ',' ident
					{
					DebugLocation(347, 11);
					char_literal210=(IToken)Match(input,80,Follow._80_in_ident_list2148);  
					stream_80.Add(char_literal210);

					DebugLocation(347, 15);
					PushFollow(Follow._ident_in_ident_list2150);
					ident211=ident();
					PopFollow();

					stream_ident.Add(ident211.Tree);

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 347:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(347, 26);
				// SugarCpp.g:347:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(347, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(347, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(347, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 37);
			LeaveRule("ident_list", 37);
			LeaveRule_ident_list();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:350:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 38);
		TraceIn("stmt_alloc", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal213 = default(IToken);
		IToken char_literal215 = default(IToken);
		IToken string_literal216 = default(IToken);
		IToken char_literal218 = default(IToken);
		IToken char_literal220 = default(IToken);
		IToken string_literal221 = default(IToken);
		IToken char_literal223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr224 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal213_tree = default(CommonTree);
		CommonTree char_literal215_tree = default(CommonTree);
		CommonTree string_literal216_tree = default(CommonTree);
		CommonTree char_literal218_tree = default(CommonTree);
		CommonTree char_literal220_tree = default(CommonTree);
		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree char_literal223_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(350, 1);
		try
		{
			// SugarCpp.g:351:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:351:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) )
			{
			DebugLocation(351, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2172);
			ident_list212=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list212.Tree);
			DebugLocation(351, 15);
			// SugarCpp.g:351:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) )
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==90))
			{
				alt81 = 1;
			}
			else if ((LA81_0==92))
			{
				alt81 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:351:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(351, 17);
				char_literal213=(IToken)Match(input,90,Follow._90_in_stmt_alloc2176);  
				stream_90.Add(char_literal213);

				DebugLocation(351, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2178);
				type_name214=type_name();
				PopFollow();

				stream_type_name.Add(type_name214.Tree);
				DebugLocation(351, 31);
				// SugarCpp.g:351:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt79=3;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				switch (input.LA(1))
				{
				case 92:
				case 98:
					{
					alt79 = 1;
					}
					break;
				case 73:
					{
					alt79 = 2;
					}
					break;
				case NEWLINE:
				case 122:
				case 138:
					{
					alt79 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:351:33: ( '=' | ':=' ) expr
					{
					DebugLocation(351, 33);
					// SugarCpp.g:351:33: ( '=' | ':=' )
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, false);
					int LA77_0 = input.LA(1);

					if ((LA77_0==98))
					{
						alt77 = 1;
					}
					else if ((LA77_0==92))
					{
						alt77 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:351:34: '='
						{
						DebugLocation(351, 34);
						char_literal215=(IToken)Match(input,98,Follow._98_in_stmt_alloc2183);  
						stream_98.Add(char_literal215);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:351:40: ':='
						{
						DebugLocation(351, 40);
						string_literal216=(IToken)Match(input,92,Follow._92_in_stmt_alloc2187);  
						stream_92.Add(string_literal216);


						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(351, 46);
					PushFollow(Follow._expr_in_stmt_alloc2190);
					expr217=expr();
					PopFollow();

					stream_expr.Add(expr217.Tree);


					{
					// AST REWRITE
					// elements: ident_list, expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 351:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(351, 55);
						// SugarCpp.g:351:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(351, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(351, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(351, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(351, 95);
						// SugarCpp.g:351:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(351, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:352:33: '(' ( expr_list )? ')'
					{
					DebugLocation(352, 33);
					char_literal218=(IToken)Match(input,73,Follow._73_in_stmt_alloc2238);  
					stream_73.Add(char_literal218);

					DebugLocation(352, 37);
					// SugarCpp.g:352:37: ( expr_list )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, false);
					int LA78_0 = input.LA(1);

					if ((LA78_0==IDENT||LA78_0==NUMBER||LA78_0==STRING||LA78_0==66||LA78_0==71||LA78_0==73||LA78_0==75||(LA78_0>=77 && LA78_0<=78)||(LA78_0>=81 && LA78_0<=82)||LA78_0==107||LA78_0==130||LA78_0==142))
					{
						alt78 = 1;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:352:37: expr_list
						{
						DebugLocation(352, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc2240);
						expr_list219=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list219.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(78); }

					DebugLocation(352, 48);
					char_literal220=(IToken)Match(input,74,Follow._74_in_stmt_alloc2243);  
					stream_74.Add(char_literal220);



					{
					// AST REWRITE
					// elements: type_name, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 352:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(352, 56);
						// SugarCpp.g:352:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(352, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(352, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(352, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(352, 98);
						// SugarCpp.g:352:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(352, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:353:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 353:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(353, 18);
						// SugarCpp.g:353:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(353, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(353, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(353, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(79); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:355:8: ':=' ( expr ( ',' modify_expr )* )
				{
				DebugLocation(355, 8);
				string_literal221=(IToken)Match(input,92,Follow._92_in_stmt_alloc2304);  
				stream_92.Add(string_literal221);

				DebugLocation(355, 14);
				// SugarCpp.g:355:14: ( expr ( ',' modify_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:355:15: expr ( ',' modify_expr )*
				{
				DebugLocation(355, 15);
				PushFollow(Follow._expr_in_stmt_alloc2308);
				expr222=expr();
				PopFollow();

				stream_expr.Add(expr222.Tree);
				DebugLocation(355, 20);
				// SugarCpp.g:355:20: ( ',' modify_expr )*
				try { DebugEnterSubRule(80);
				while (true)
				{
					int alt80=2;
					try { DebugEnterDecision(80, false);
					int LA80_0 = input.LA(1);

					if ((LA80_0==80))
					{
						alt80 = 1;
					}


					} finally { DebugExitDecision(80); }
					switch ( alt80 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:355:21: ',' modify_expr
						{
						DebugLocation(355, 21);
						char_literal223=(IToken)Match(input,80,Follow._80_in_stmt_alloc2311);  
						stream_80.Add(char_literal223);

						DebugLocation(355, 25);
						PushFollow(Follow._modify_expr_in_stmt_alloc2313);
						modify_expr224=modify_expr();
						PopFollow();

						stream_modify_expr.Add(modify_expr224.Tree);

						}
						break;

					default:
						goto loop80;
					}
				}

				loop80:
					;

				} finally { DebugExitSubRule(80); }


				}



				{
				// AST REWRITE
				// elements: 92, ident_list, expr, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 355:40: -> ^( ':=' ident_list expr ( modify_expr )* )
				{
					DebugLocation(355, 43);
					// SugarCpp.g:355:43: ^( ':=' ident_list expr ( modify_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(355, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_92.NextNode(), root_1);

					DebugLocation(355, 50);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(355, 61);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(355, 66);
					// SugarCpp.g:355:66: ( modify_expr )*
					while ( stream_modify_expr.HasNext )
					{
						DebugLocation(355, 66);
						adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					}
					stream_modify_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 38);
			LeaveRule("stmt_alloc", 38);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(356, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:358:1: stmt_modify : lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 39);
		TraceIn("stmt_modify", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr229 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal228_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(358, 1);
		try
		{
			// SugarCpp.g:359:2: ( lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:359:4: lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(359, 4);
			PushFollow(Follow._lvalue_in_stmt_modify2341);
			lvalue225=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue225.Tree);
			DebugLocation(359, 11);
			// SugarCpp.g:359:11: ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )?
			int alt82=3;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==69||LA82_0==72||LA82_0==76||LA82_0==79||LA82_0==83||LA82_0==89||LA82_0==96||LA82_0==98||LA82_0==104||LA82_0==111||LA82_0==140))
			{
				alt82 = 1;
			}
			else if ((LA82_0==106))
			{
				alt82 = 2;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:359:13: modify_expr_op ^ modify_expr
				{
				DebugLocation(359, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify2345);
				modify_expr_op226=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op226.Tree, root_0);
				DebugLocation(359, 29);
				PushFollow(Follow._modify_expr_in_stmt_modify2348);
				modify_expr227=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr227.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:360:13: '?=' ^ modify_expr
				{
				DebugLocation(360, 17);
				string_literal228=(IToken)Match(input,106,Follow._106_in_stmt_modify2362); 
				string_literal228_tree = (CommonTree)adaptor.Create(string_literal228);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal228_tree, root_0);
				DebugLocation(360, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify2365);
				modify_expr229=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr229.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 39);
			LeaveRule("stmt_modify", 39);
			LeaveRule_stmt_modify();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:363:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 40);
		TraceIn("expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr230 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(363, 1);
		try
		{
			// SugarCpp.g:364:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:364:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(364, 4);
			PushFollow(Follow._lambda_expr_in_expr2378);
			lambda_expr230=lambda_expr();
			PopFollow();

			adaptor.AddChild(root_0, lambda_expr230.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 40);
			LeaveRule("expr", 40);
			LeaveRule_expr();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:367:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 41);
		TraceIn("lambda_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal231 = default(IToken);
		IToken char_literal233 = default(IToken);
		IToken string_literal234 = default(IToken);
		IToken string_literal236 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr235 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr238 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal231_tree = default(CommonTree);
		CommonTree char_literal233_tree = default(CommonTree);
		CommonTree string_literal234_tree = default(CommonTree);
		CommonTree string_literal236_tree = default(CommonTree);
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(367, 1);
		try
		{
			// SugarCpp.g:368:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt85=2;
			try { DebugEnterDecision(85, false);
			try
			{
				alt85 = dfa85.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:368:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(368, 4);
				char_literal231=(IToken)Match(input,73,Follow._73_in_lambda_expr2389);  
				stream_73.Add(char_literal231);

				DebugLocation(368, 8);
				// SugarCpp.g:368:8: ( func_args )?
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==IDENT||LA83_0==92))
				{
					alt83 = 1;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:368:8: func_args
					{
					DebugLocation(368, 8);
					PushFollow(Follow._func_args_in_lambda_expr2391);
					func_args232=func_args();
					PopFollow();

					stream_func_args.Add(func_args232.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(83); }

				DebugLocation(368, 19);
				char_literal233=(IToken)Match(input,74,Follow._74_in_lambda_expr2394);  
				stream_74.Add(char_literal233);

				DebugLocation(368, 23);
				// SugarCpp.g:368:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt84=2;
				try { DebugEnterSubRule(84);
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==84))
				{
					alt84 = 1;
				}
				else if ((LA84_0==100))
				{
					alt84 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(84); }
				switch (alt84)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:368:25: '->' expr
					{
					DebugLocation(368, 25);
					string_literal234=(IToken)Match(input,84,Follow._84_in_lambda_expr2398);  
					stream_84.Add(string_literal234);

					DebugLocation(368, 30);
					PushFollow(Follow._expr_in_lambda_expr2400);
					expr235=expr();
					PopFollow();

					stream_expr.Add(expr235.Tree);


					{
					// AST REWRITE
					// elements: 84, expr, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 368:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(368, 39);
						// SugarCpp.g:368:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(368, 53);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(368, 58);
						// SugarCpp.g:368:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(368, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(368, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:369:25: '=>' expr
					{
					DebugLocation(369, 25);
					string_literal236=(IToken)Match(input,100,Follow._100_in_lambda_expr2440);  
					stream_100.Add(string_literal236);

					DebugLocation(369, 30);
					PushFollow(Follow._expr_in_lambda_expr2442);
					expr237=expr();
					PopFollow();

					stream_expr.Add(expr237.Tree);


					{
					// AST REWRITE
					// elements: 100, expr, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 369:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(369, 39);
						// SugarCpp.g:369:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(369, 53);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(369, 58);
						// SugarCpp.g:369:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(369, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(369, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(84); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:370:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(370, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr2462);
				modify_expr238=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr238.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 41);
			LeaveRule("lambda_expr", 41);
			LeaveRule_lambda_expr();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:373:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 42);
		TraceIn("modify_expr_op", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set239 = default(IToken);

		CommonTree set239_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(373, 91);
		try
		{
			// SugarCpp.g:373:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(373, 15);

			set239=(IToken)input.LT(1);
			if (input.LA(1)==69||input.LA(1)==72||input.LA(1)==76||input.LA(1)==79||input.LA(1)==83||input.LA(1)==89||input.LA(1)==96||input.LA(1)==98||input.LA(1)==104||input.LA(1)==111||input.LA(1)==140)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set239));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 42);
			LeaveRule("modify_expr_op", 42);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(373, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:374:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 43);
		TraceIn("modify_expr", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set241 = default(IToken);
		IToken char_literal243 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr240 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set241_tree = default(CommonTree);
		CommonTree char_literal243_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(374, 1);
		try
		{
			// SugarCpp.g:375:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:375:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(375, 4);
			PushFollow(Follow._cond_expr_in_modify_expr2519);
			cond_expr240=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr240.Tree);
			DebugLocation(375, 14);
			// SugarCpp.g:375:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt87=3;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==69||LA87_0==72||LA87_0==76||LA87_0==79||LA87_0==83||LA87_0==89||LA87_0==92||LA87_0==96||LA87_0==104||LA87_0==111||LA87_0==140))
			{
				alt87 = 1;
			}
			else if ((LA87_0==98))
			{
				alt87 = 2;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:375:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(375, 94);

				set241=(IToken)input.LT(1);
				set241=(IToken)input.LT(1);
				if (input.LA(1)==69||input.LA(1)==72||input.LA(1)==76||input.LA(1)==79||input.LA(1)==83||input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==104||input.LA(1)==111||input.LA(1)==140)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set241), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(375, 96);
				PushFollow(Follow._cond_expr_in_modify_expr2568);
				cond_expr242=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr242.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:376:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(376, 7);
				// SugarCpp.g:376:7: ( '=' ^ cond_expr )+
				int cnt86=0;
				try { DebugEnterSubRule(86);
				while (true)
				{
					int alt86=2;
					try { DebugEnterDecision(86, false);
					int LA86_0 = input.LA(1);

					if ((LA86_0==98))
					{
						alt86 = 1;
					}


					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:376:8: '=' ^ cond_expr
						{
						DebugLocation(376, 11);
						char_literal243=(IToken)Match(input,98,Follow._98_in_modify_expr2577); 
						char_literal243_tree = (CommonTree)adaptor.Create(char_literal243);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal243_tree, root_0);
						DebugLocation(376, 13);
						PushFollow(Follow._cond_expr_in_modify_expr2580);
						cond_expr244=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr244.Tree);

						}
						break;

					default:
						if (cnt86 >= 1)
							goto loop86;

						EarlyExitException eee86 = new EarlyExitException( 86, input );
						DebugRecognitionException(eee86);
						throw eee86;
					}
					cnt86++;
				}
				loop86:
					;

				} finally { DebugExitSubRule(86); }


				}
				break;

			}
			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 43);
			LeaveRule("modify_expr", 43);
			LeaveRule_modify_expr();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:379:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 44);
		TraceIn("cond_expr_item", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr245 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(379, 24);
		try
		{
			// SugarCpp.g:379:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:379:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(379, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item2593);
			or_expr245=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr245.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 44);
			LeaveRule("cond_expr_item", 44);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(379, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:380:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 45);
		TraceIn("cond_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal246 = default(IToken);
		IToken char_literal247 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal246_tree = default(CommonTree);
		CommonTree char_literal247_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(380, 1);
		try
		{
			// SugarCpp.g:381:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:381:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(381, 4);
			// SugarCpp.g:381:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:381:5: a= or_expr
			{
			DebugLocation(381, 6);
			PushFollow(Follow._or_expr_in_cond_expr2605);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 381:15: -> $a
			{
				DebugLocation(381, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(381, 22);
			// SugarCpp.g:381:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt90=2;
			try { DebugEnterSubRule(90);
			try { DebugEnterDecision(90, false);
			int LA90_0 = input.LA(1);

			if ((LA90_0==105))
			{
				alt90 = 1;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:381:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(381, 23);
				char_literal246=(IToken)Match(input,105,Follow._105_in_cond_expr2614);  
				stream_105.Add(char_literal246);

				DebugLocation(381, 27);
				// SugarCpp.g:381:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==IDENT||LA89_0==NUMBER||LA89_0==STRING||LA89_0==66||LA89_0==71||LA89_0==73||LA89_0==75||(LA89_0>=77 && LA89_0<=78)||(LA89_0>=81 && LA89_0<=82)||LA89_0==107||LA89_0==130||LA89_0==142))
				{
					alt89 = 1;
				}
				else if ((LA89_0==INDENT||LA89_0==NEWLINE||LA89_0==69||LA89_0==72||LA89_0==74||LA89_0==76||(LA89_0>=79 && LA89_0<=80)||LA89_0==83||LA89_0==89||(LA89_0>=92 && LA89_0<=93)||LA89_0==96||LA89_0==98||LA89_0==104||LA89_0==109||LA89_0==111||(LA89_0>=121 && LA89_0<=122)||LA89_0==124||LA89_0==127||(LA89_0>=137 && LA89_0<=138)||LA89_0==140))
				{
					alt89 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:381:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(381, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr2620);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(381, 46);
					// SugarCpp.g:381:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt88=2;
					try { DebugEnterSubRule(88);
					try { DebugEnterDecision(88, false);
					int LA88_0 = input.LA(1);

					if ((LA88_0==90))
					{
						alt88 = 1;
					}
					else if ((LA88_0==INDENT||LA88_0==NEWLINE||LA88_0==69||LA88_0==72||LA88_0==74||LA88_0==76||(LA88_0>=79 && LA88_0<=80)||LA88_0==83||LA88_0==89||(LA88_0>=92 && LA88_0<=93)||LA88_0==96||LA88_0==98||LA88_0==104||LA88_0==109||LA88_0==111||(LA88_0>=121 && LA88_0<=122)||LA88_0==124||LA88_0==127||(LA88_0>=137 && LA88_0<=138)||LA88_0==140))
					{
						alt88 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:381:48: ':' b= cond_expr_item
						{
						DebugLocation(381, 48);
						char_literal247=(IToken)Match(input,90,Follow._90_in_cond_expr2624);  
						stream_90.Add(char_literal247);

						DebugLocation(381, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr2628);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, cond_expr, a
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 381:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(381, 72);
							// SugarCpp.g:381:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(381, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(381, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(381, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(381, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:382:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 382:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(382, 20);
							// SugarCpp.g:382:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(382, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(382, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(382, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(88); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:384:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 384:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(384, 14);
						// SugarCpp.g:384:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(384, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(384, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(89); }


				}
				break;

			}
			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 45);
			LeaveRule("cond_expr", 45);
			LeaveRule_cond_expr();
		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:388:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 46);
		TraceIn("or_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal248 = default(IToken);
		IToken string_literal249 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal248_tree = default(CommonTree);
		CommonTree string_literal249_tree = default(CommonTree);
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(388, 1);
		try
		{
			// SugarCpp.g:389:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:389:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )*
			{
			DebugLocation(389, 4);
			// SugarCpp.g:389:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:389:5: a= and_expr
			{
			DebugLocation(389, 6);
			PushFollow(Follow._and_expr_in_or_expr2731);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 389:16: -> $a
			{
				DebugLocation(389, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(389, 23);
			// SugarCpp.g:389:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=3;
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==141))
				{
					alt91 = 1;
				}
				else if ((LA91_0==131))
				{
					alt91 = 2;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:389:25: '||' b= and_expr
					{
					DebugLocation(389, 25);
					string_literal248=(IToken)Match(input,141,Follow._141_in_or_expr2741);  
					stream_141.Add(string_literal248);

					DebugLocation(389, 31);
					PushFollow(Follow._and_expr_in_or_expr2745);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, 141
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 389:41: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(389, 44);
						// SugarCpp.g:389:44: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(389, 55);
						adaptor.AddChild(root_1, stream_141.NextNode());
						DebugLocation(389, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(389, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:390:25: 'or' b= and_expr
					{
					DebugLocation(390, 25);
					string_literal249=(IToken)Match(input,131,Follow._131_in_or_expr2785);  
					stream_131.Add(string_literal249);

					DebugLocation(390, 31);
					PushFollow(Follow._and_expr_in_or_expr2789);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: or_expr, b, 131
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 390:41: -> ^( 'or' $or_expr $b)
					{
						DebugLocation(390, 44);
						// SugarCpp.g:390:44: ^( 'or' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_131.NextNode(), root_1);

						DebugLocation(390, 52);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(390, 61);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 46);
			LeaveRule("or_expr", 46);
			LeaveRule_or_expr();
		}
		DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:393:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( Expr_Bin 'and' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 47);
		TraceIn("and_expr", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal250 = default(IToken);
		IToken string_literal251 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal250_tree = default(CommonTree);
		CommonTree string_literal251_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(393, 1);
		try
		{
			// SugarCpp.g:394:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( Expr_Bin 'and' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:394:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( Expr_Bin 'and' $and_expr $b) )*
			{
			DebugLocation(394, 4);
			// SugarCpp.g:394:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:394:5: a= bit_or
			{
			DebugLocation(394, 6);
			PushFollow(Follow._bit_or_in_and_expr2817);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 394:14: -> $a
			{
				DebugLocation(394, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(394, 21);
			// SugarCpp.g:394:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( Expr_Bin 'and' $and_expr $b) )*
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=3;
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==70))
				{
					alt92 = 1;
				}
				else if ((LA92_0==113))
				{
					alt92 = 2;
				}


				} finally { DebugExitDecision(92); }
				switch ( alt92 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:394:23: '&&' b= bit_or
					{
					DebugLocation(394, 23);
					string_literal250=(IToken)Match(input,70,Follow._70_in_and_expr2827);  
					stream_70.Add(string_literal250);

					DebugLocation(394, 29);
					PushFollow(Follow._bit_or_in_and_expr2831);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 70, and_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:37: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(394, 40);
						// SugarCpp.g:394:40: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(394, 51);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(394, 57);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(394, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:395:11: 'and' b= bit_or
					{
					DebugLocation(395, 11);
					string_literal251=(IToken)Match(input,113,Follow._113_in_and_expr2857);  
					stream_113.Add(string_literal251);

					DebugLocation(395, 18);
					PushFollow(Follow._bit_or_in_and_expr2861);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, and_expr, 113
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:26: -> ^( Expr_Bin 'and' $and_expr $b)
					{
						DebugLocation(395, 29);
						// SugarCpp.g:395:29: ^( Expr_Bin 'and' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(395, 40);
						adaptor.AddChild(root_1, stream_113.NextNode());
						DebugLocation(395, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(395, 57);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop92;
				}
			}

			loop92:
				;

			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 47);
			LeaveRule("and_expr", 47);
			LeaveRule_and_expr();
		}
		DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:398:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 48);
		TraceIn("bit_or", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal252 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal252_tree = default(CommonTree);
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(398, 1);
		try
		{
			// SugarCpp.g:399:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:399:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(399, 4);
			// SugarCpp.g:399:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:399:5: a= bit_xor
			{
			DebugLocation(399, 6);
			PushFollow(Follow._bit_xor_in_bit_or2891);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 399:15: -> $a
			{
				DebugLocation(399, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(399, 22);
			// SugarCpp.g:399:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==139))
				{
					alt93 = 1;
				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:399:23: '|' b= bit_xor
					{
					DebugLocation(399, 23);
					char_literal252=(IToken)Match(input,139,Follow._139_in_bit_or2900);  
					stream_139.Add(char_literal252);

					DebugLocation(399, 28);
					PushFollow(Follow._bit_xor_in_bit_or2904);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_or, 139
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 399:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(399, 40);
						// SugarCpp.g:399:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(399, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(399, 51);
						adaptor.AddChild(root_1, stream_139.NextNode());
						DebugLocation(399, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(399, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 48);
			LeaveRule("bit_or", 48);
			LeaveRule_bit_or();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:402:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 49);
		TraceIn("bit_xor", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal253 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal253_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(402, 1);
		try
		{
			// SugarCpp.g:403:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:403:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(403, 4);
			// SugarCpp.g:403:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:403:5: a= bit_and
			{
			DebugLocation(403, 6);
			PushFollow(Follow._bit_and_in_bit_xor2934);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 403:15: -> $a
			{
				DebugLocation(403, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(403, 22);
			// SugarCpp.g:403:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==110))
				{
					alt94 = 1;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:403:23: '^' b= bit_and
					{
					DebugLocation(403, 23);
					char_literal253=(IToken)Match(input,110,Follow._110_in_bit_xor2943);  
					stream_110.Add(char_literal253);

					DebugLocation(403, 28);
					PushFollow(Follow._bit_and_in_bit_xor2947);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, 110, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 403:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(403, 40);
						// SugarCpp.g:403:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(403, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(403, 51);
						adaptor.AddChild(root_1, stream_110.NextNode());
						DebugLocation(403, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(403, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 49);
			LeaveRule("bit_xor", 49);
			LeaveRule_bit_xor();
		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:406:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 50);
		TraceIn("bit_and", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal254 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal254_tree = default(CommonTree);
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(406, 1);
		try
		{
			// SugarCpp.g:407:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:407:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(407, 4);
			// SugarCpp.g:407:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:407:5: a= cmp_equ_expr
			{
			DebugLocation(407, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and2977);
			a=cmp_equ_expr();
			PopFollow();

			stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 407:20: -> $a
			{
				DebugLocation(407, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(407, 27);
			// SugarCpp.g:407:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=2;
				try { DebugEnterDecision(95, false);
				int LA95_0 = input.LA(1);

				if ((LA95_0==71))
				{
					alt95 = 1;
				}


				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:407:28: '&' b= cmp_equ_expr
					{
					DebugLocation(407, 28);
					char_literal254=(IToken)Match(input,71,Follow._71_in_bit_and2986);  
					stream_71.Add(char_literal254);

					DebugLocation(407, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and2990);
					b=cmp_equ_expr();
					PopFollow();

					stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 71, bit_and
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 407:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(407, 50);
						// SugarCpp.g:407:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(407, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(407, 61);
						adaptor.AddChild(root_1, stream_71.NextNode());
						DebugLocation(407, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(407, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 50);
			LeaveRule("bit_and", 50);
			LeaveRule_bit_and();
		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:410:1: cmp_equ_expr_op : ( '==' | 'is' | '!=' | 'isnt' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 51);
		TraceIn("cmp_equ_expr_op", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set255 = default(IToken);

		CommonTree set255_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(410, 45);
		try
		{
			// SugarCpp.g:410:16: ( '==' | 'is' | '!=' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(410, 16);

			set255=(IToken)input.LT(1);
			if (input.LA(1)==67||input.LA(1)==99||(input.LA(1)>=125 && input.LA(1)<=126))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set255));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 51);
			LeaveRule("cmp_equ_expr_op", 51);
			LeaveRule_cmp_equ_expr_op();
		}
		DebugLocation(410, 45);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:411:1: cmp_equ_expr : (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 52);
		TraceIn("cmp_equ_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(411, 1);
		try
		{
			// SugarCpp.g:412:2: ( (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:412:4: (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) )?
			{
			DebugLocation(412, 4);
			// SugarCpp.g:412:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:412:5: a= cmp_expr
			{
			DebugLocation(412, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr3039);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 412:16: -> $a
			{
				DebugLocation(412, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(412, 23);
			// SugarCpp.g:412:23: (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) )?
			int alt96=2;
			try { DebugEnterSubRule(96);
			try { DebugEnterDecision(96, false);
			int LA96_0 = input.LA(1);

			if ((LA96_0==67||LA96_0==99||(LA96_0>=125 && LA96_0<=126)))
			{
				alt96 = 1;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:412:25: op= cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(412, 27);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr3051);
				op=cmp_equ_expr_op();
				PopFollow();

				stream_cmp_equ_expr_op.Add(op.Tree);
				DebugLocation(412, 45);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr3055);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_equ_expr, op
				// token labels: 
				// rule labels: retval, op, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 412:55: -> ^( Expr_Bin $op $cmp_equ_expr $b)
				{
					DebugLocation(412, 58);
					// SugarCpp.g:412:58: ^( Expr_Bin $op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(412, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(412, 70);
					adaptor.AddChild(root_1, stream_op.NextTree());
					DebugLocation(412, 74);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(412, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(96); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 52);
			LeaveRule("cmp_equ_expr", 52);
			LeaveRule_cmp_equ_expr();
		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:415:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 53);
		TraceIn("cmp_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal256 = default(IToken);
		IToken char_literal258 = default(IToken);
		IToken char_literal259 = default(IToken);
		IToken char_literal261 = default(IToken);
		IToken string_literal262 = default(IToken);
		IToken char_literal263 = default(IToken);
		IToken string_literal264 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident257 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list260 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal256_tree = default(CommonTree);
		CommonTree char_literal258_tree = default(CommonTree);
		CommonTree char_literal259_tree = default(CommonTree);
		CommonTree char_literal261_tree = default(CommonTree);
		CommonTree string_literal262_tree = default(CommonTree);
		CommonTree char_literal263_tree = default(CommonTree);
		CommonTree string_literal264_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(415, 1);
		try
		{
			// SugarCpp.g:416:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:416:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			{
			DebugLocation(416, 4);
			// SugarCpp.g:416:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:416:5: a= infix_expr
			{
			DebugLocation(416, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr3088);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 416:18: -> $a
			{
				DebugLocation(416, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(416, 25);
			// SugarCpp.g:416:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=5;
				try { DebugEnterDecision(100, false);
				switch (input.LA(1))
				{
				case 94:
					{
					alt100 = 1;
					}
					break;
				case 97:
					{
					alt100 = 2;
					}
					break;
				case 101:
					{
					alt100 = 3;
					}
					break;
				case 102:
					{
					alt100 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:416:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					{
					DebugLocation(416, 27);
					char_literal256=(IToken)Match(input,94,Follow._94_in_cmp_expr3098);  
					stream_94.Add(char_literal256);

					DebugLocation(416, 32);
					PushFollow(Follow._infix_expr_in_cmp_expr3102);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);
					DebugLocation(416, 44);
					// SugarCpp.g:416:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					int alt99=2;
					try { DebugEnterSubRule(99);
					try { DebugEnterDecision(99, false);
					switch (input.LA(1))
					{
					case IDENT:
						{
						alt99 = 1;
						}
						break;
					case 101:
						{
						int LA99_2 = input.LA(2);

						if (((b.Tree.Token.Type == IDENT)))
						{
							alt99 = 1;
						}
						else if ((true))
						{
							alt99 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 99, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case INDENT:
					case NEWLINE:
					case 67:
					case 69:
					case 70:
					case 71:
					case 72:
					case 74:
					case 76:
					case 79:
					case 80:
					case 83:
					case 89:
					case 90:
					case 92:
					case 93:
					case 94:
					case 96:
					case 97:
					case 98:
					case 99:
					case 102:
					case 104:
					case 105:
					case 109:
					case 110:
					case 111:
					case 113:
					case 121:
					case 122:
					case 124:
					case 125:
					case 126:
					case 127:
					case 131:
					case 137:
					case 138:
					case 139:
					case 140:
					case 141:
						{
						alt99 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(99); }
					switch (alt99)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:416:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
						{
						DebugLocation(416, 46);
						if (!((b.Tree.Token.Type == IDENT)))
						{
							throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
						}
						DebugLocation(416, 76);
						// SugarCpp.g:416:76: ( ident )*
						try { DebugEnterSubRule(97);
						while (true)
						{
							int alt97=2;
							try { DebugEnterDecision(97, false);
							int LA97_0 = input.LA(1);

							if ((LA97_0==IDENT))
							{
								alt97 = 1;
							}


							} finally { DebugExitDecision(97); }
							switch ( alt97 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:416:76: ident
								{
								DebugLocation(416, 76);
								PushFollow(Follow._ident_in_cmp_expr3108);
								ident257=ident();
								PopFollow();

								stream_ident.Add(ident257.Tree);

								}
								break;

							default:
								goto loop97;
							}
						}

						loop97:
							;

						} finally { DebugExitSubRule(97); }

						DebugLocation(416, 83);
						char_literal258=(IToken)Match(input,101,Follow._101_in_cmp_expr3111);  
						stream_101.Add(char_literal258);

						DebugLocation(416, 87);
						char_literal259=(IToken)Match(input,73,Follow._73_in_cmp_expr3113);  
						stream_73.Add(char_literal259);

						DebugLocation(416, 91);
						// SugarCpp.g:416:91: ( expr_list )?
						int alt98=2;
						try { DebugEnterSubRule(98);
						try { DebugEnterDecision(98, false);
						int LA98_0 = input.LA(1);

						if ((LA98_0==IDENT||LA98_0==NUMBER||LA98_0==STRING||LA98_0==66||LA98_0==71||LA98_0==73||LA98_0==75||(LA98_0>=77 && LA98_0<=78)||(LA98_0>=81 && LA98_0<=82)||LA98_0==107||LA98_0==130||LA98_0==142))
						{
							alt98 = 1;
						}
						} finally { DebugExitDecision(98); }
						switch (alt98)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:416:91: expr_list
							{
							DebugLocation(416, 91);
							PushFollow(Follow._expr_list_in_cmp_expr3115);
							expr_list260=expr_list();
							PopFollow();

							stream_expr_list.Add(expr_list260.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(98); }

						DebugLocation(416, 102);
						char_literal261=(IToken)Match(input,74,Follow._74_in_cmp_expr3118);  
						stream_74.Add(char_literal261);



						{
						// AST REWRITE
						// elements: b, expr_list, ident, cmp_expr
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 416:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
							DebugLocation(416, 109);
							// SugarCpp.g:416:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(416, 111);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(416, 122);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(416, 131);
							// SugarCpp.g:416:131: ^( Generic_Patameters $b ( ident )* )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(416, 133);
							root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

							DebugLocation(416, 153);
							adaptor.AddChild(root_2, stream_b.NextTree());
							DebugLocation(416, 155);
							// SugarCpp.g:416:155: ( ident )*
							while ( stream_ident.HasNext )
							{
								DebugLocation(416, 155);
								adaptor.AddChild(root_2, stream_ident.NextTree());

							}
							stream_ident.Reset();

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(416, 163);
							// SugarCpp.g:416:163: ( expr_list )?
							if (stream_expr_list.HasNext)
							{
								DebugLocation(416, 163);
								adaptor.AddChild(root_1, stream_expr_list.NextTree());

							}
							stream_expr_list.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:417:46: 
						{

						{
						// AST REWRITE
						// elements: cmp_expr, b, 94
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 417:46: -> ^( Expr_Bin '<' $cmp_expr $b)
						{
							DebugLocation(417, 49);
							// SugarCpp.g:417:49: ^( Expr_Bin '<' $cmp_expr $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(417, 51);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

							DebugLocation(417, 60);
							adaptor.AddChild(root_1, stream_94.NextNode());
							DebugLocation(417, 65);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(417, 75);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(99); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:418:27: '<=' b= infix_expr
					{
					DebugLocation(418, 27);
					string_literal262=(IToken)Match(input,97,Follow._97_in_cmp_expr3228);  
					stream_97.Add(string_literal262);

					DebugLocation(418, 33);
					PushFollow(Follow._infix_expr_in_cmp_expr3232);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 97, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 418:45: -> ^( Expr_Bin '<=' $cmp_expr $b)
					{
						DebugLocation(418, 48);
						// SugarCpp.g:418:48: ^( Expr_Bin '<=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(418, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(418, 59);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(418, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(418, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:419:12: '>' b= infix_expr
					{
					DebugLocation(419, 12);
					char_literal263=(IToken)Match(input,101,Follow._101_in_cmp_expr3259);  
					stream_101.Add(char_literal263);

					DebugLocation(419, 17);
					PushFollow(Follow._infix_expr_in_cmp_expr3263);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr, 101
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 419:29: -> ^( Expr_Bin '>' $cmp_expr $b)
					{
						DebugLocation(419, 32);
						// SugarCpp.g:419:32: ^( Expr_Bin '>' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(419, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(419, 43);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(419, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(419, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:420:12: '>=' b= infix_expr
					{
					DebugLocation(420, 12);
					string_literal264=(IToken)Match(input,102,Follow._102_in_cmp_expr3290);  
					stream_102.Add(string_literal264);

					DebugLocation(420, 18);
					PushFollow(Follow._infix_expr_in_cmp_expr3294);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 102, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 420:30: -> ^( Expr_Bin '>=' $cmp_expr $b)
					{
						DebugLocation(420, 33);
						// SugarCpp.g:420:33: ^( Expr_Bin '>=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(420, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(420, 44);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(420, 50);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(420, 60);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 53);
			LeaveRule("cmp_expr", 53);
			LeaveRule_cmp_expr();
		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:423:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 54);
		TraceIn("infix_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func265 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(423, 1);
		try
		{
			// SugarCpp.g:424:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:424:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(424, 4);
			// SugarCpp.g:424:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:424:5: a= shift_expr
			{
			DebugLocation(424, 6);
			PushFollow(Follow._shift_expr_in_infix_expr3324);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 424:18: -> $a
			{
				DebugLocation(424, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(424, 25);
			// SugarCpp.g:424:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, false);
				int LA101_0 = input.LA(1);

				if ((LA101_0==112))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:424:27: infix_func b= shift_expr
					{
					DebugLocation(424, 27);
					PushFollow(Follow._infix_func_in_infix_expr3334);
					infix_func265=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func265.Tree);
					DebugLocation(424, 39);
					PushFollow(Follow._shift_expr_in_infix_expr3338);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_func, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 424:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(424, 55);
						// SugarCpp.g:424:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(424, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(424, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(424, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(424, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 54);
			LeaveRule("infix_expr", 54);
			LeaveRule_infix_expr();
		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:427:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 55);
		TraceIn("shift_expr_op", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set266 = default(IToken);

		CommonTree set266_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(427, 27);
		try
		{
			// SugarCpp.g:427:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(427, 14);

			set266=(IToken)input.LT(1);
			if (input.LA(1)==95||input.LA(1)==103)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set266));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 55);
			LeaveRule("shift_expr_op", 55);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(427, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:428:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 56);
		TraceIn("shift_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op267 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(428, 1);
		try
		{
			// SugarCpp.g:429:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:429:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(429, 4);
			// SugarCpp.g:429:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:429:5: a= add_expr
			{
			DebugLocation(429, 6);
			PushFollow(Follow._add_expr_in_shift_expr3381);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 429:16: -> $a
			{
				DebugLocation(429, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(429, 23);
			// SugarCpp.g:429:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==95||LA102_0==103))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:429:24: shift_expr_op b= add_expr
					{
					DebugLocation(429, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr3390);
					shift_expr_op267=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op267.Tree);
					DebugLocation(429, 39);
					PushFollow(Follow._add_expr_in_shift_expr3394);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 429:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(429, 52);
						// SugarCpp.g:429:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(429, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(429, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(429, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(429, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 56);
			LeaveRule("shift_expr", 56);
			LeaveRule_shift_expr();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:432:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 57);
		TraceIn("add_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal268 = default(IToken);
		IToken char_literal269 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal268_tree = default(CommonTree);
		CommonTree char_literal269_tree = default(CommonTree);
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(432, 1);
		try
		{
			// SugarCpp.g:433:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:433:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(433, 4);
			// SugarCpp.g:433:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:433:5: a= mul_expr
			{
			DebugLocation(433, 6);
			PushFollow(Follow._mul_expr_in_add_expr3424);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 433:16: -> $a
			{
				DebugLocation(433, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(433, 23);
			// SugarCpp.g:433:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=3;
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==77))
				{
					alt103 = 1;
				}
				else if ((LA103_0==81))
				{
					alt103 = 2;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:433:25: '+' b= mul_expr
					{
					DebugLocation(433, 25);
					char_literal268=(IToken)Match(input,77,Follow._77_in_add_expr3434);  
					stream_77.Add(char_literal268);

					DebugLocation(433, 30);
					PushFollow(Follow._mul_expr_in_add_expr3438);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, 77, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 433:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(433, 43);
						// SugarCpp.g:433:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(433, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(433, 54);
						adaptor.AddChild(root_1, stream_77.NextNode());
						DebugLocation(433, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(433, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:434:10: '-' b= mul_expr
					{
					DebugLocation(434, 10);
					char_literal269=(IToken)Match(input,81,Follow._81_in_add_expr3463);  
					stream_81.Add(char_literal269);

					DebugLocation(434, 15);
					PushFollow(Follow._mul_expr_in_add_expr3467);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 81, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 434:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(434, 28);
						// SugarCpp.g:434:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(434, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(434, 39);
						adaptor.AddChild(root_1, stream_81.NextNode());
						DebugLocation(434, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(434, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 57);
			LeaveRule("add_expr", 57);
			LeaveRule_add_expr();
		}
		DebugLocation(436, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:438:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 58);
		TraceIn("mul_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal270 = default(IToken);
		IToken char_literal271 = default(IToken);
		IToken char_literal272 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal270_tree = default(CommonTree);
		CommonTree char_literal271_tree = default(CommonTree);
		CommonTree char_literal272_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(438, 1);
		try
		{
			// SugarCpp.g:439:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:439:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(439, 4);
			// SugarCpp.g:439:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:439:5: a= selector_expr
			{
			DebugLocation(439, 6);
			PushFollow(Follow._selector_expr_in_mul_expr3505);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 439:21: -> $a
			{
				DebugLocation(439, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(439, 28);
			// SugarCpp.g:439:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=4;
				try { DebugEnterDecision(104, false);
				switch (input.LA(1))
				{
				case 75:
					{
					alt104 = 1;
					}
					break;
				case 88:
					{
					alt104 = 2;
					}
					break;
				case 68:
					{
					alt104 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:439:30: '*' b= selector_expr
					{
					DebugLocation(439, 30);
					char_literal270=(IToken)Match(input,75,Follow._75_in_mul_expr3515);  
					stream_75.Add(char_literal270);

					DebugLocation(439, 35);
					PushFollow(Follow._selector_expr_in_mul_expr3519);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 75, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 439:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(439, 53);
						// SugarCpp.g:439:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(439, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(439, 64);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(439, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(439, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:440:15: '/' b= selector_expr
					{
					DebugLocation(440, 15);
					char_literal271=(IToken)Match(input,88,Follow._88_in_mul_expr3549);  
					stream_88.Add(char_literal271);

					DebugLocation(440, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3553);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 88
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 440:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(440, 38);
						// SugarCpp.g:440:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(440, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(440, 49);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(440, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(440, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:441:15: '%' b= selector_expr
					{
					DebugLocation(441, 15);
					char_literal272=(IToken)Match(input,68,Follow._68_in_mul_expr3583);  
					stream_68.Add(char_literal272);

					DebugLocation(441, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3587);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 68, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(441, 38);
						// SugarCpp.g:441:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(441, 49);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(441, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(441, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 58);
			LeaveRule("mul_expr", 58);
			LeaveRule_mul_expr();
		}
		DebugLocation(443, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:445:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 59);
		TraceIn("selector_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal273 = default(IToken);
		IToken string_literal274 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree string_literal274_tree = default(CommonTree);
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(445, 1);
		try
		{
			// SugarCpp.g:446:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:446:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(446, 4);
			// SugarCpp.g:446:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:446:5: a= prefix_expr
			{
			DebugLocation(446, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr3630);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 446:19: -> $a
			{
				DebugLocation(446, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(446, 26);
			// SugarCpp.g:446:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=3;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==85))
				{
					alt105 = 1;
				}
				else if ((LA105_0==87))
				{
					alt105 = 2;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:446:28: '->*' b= ident
					{
					DebugLocation(446, 28);
					string_literal273=(IToken)Match(input,85,Follow._85_in_selector_expr3640);  
					stream_85.Add(string_literal273);

					DebugLocation(446, 35);
					PushFollow(Follow._ident_in_selector_expr3644);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 85
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 446:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(446, 45);
						// SugarCpp.g:446:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(446, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(446, 59);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(446, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(446, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:447:13: '.*' b= ident
					{
					DebugLocation(447, 13);
					string_literal274=(IToken)Match(input,87,Follow._87_in_selector_expr3672);  
					stream_87.Add(string_literal274);

					DebugLocation(447, 20);
					PushFollow(Follow._ident_in_selector_expr3677);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 87, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 447:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(447, 30);
						// SugarCpp.g:447:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(447, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(447, 44);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(447, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(447, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 59);
			LeaveRule("selector_expr", 59);
			LeaveRule_selector_expr();
		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:451:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 60);
		TraceIn("prefix_expr_op", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set275 = default(IToken);

		CommonTree set275_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(451, 63);
		try
		{
			// SugarCpp.g:451:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(451, 15);

			set275=(IToken)input.LT(1);
			if (input.LA(1)==66||input.LA(1)==71||input.LA(1)==75||(input.LA(1)>=77 && input.LA(1)<=78)||(input.LA(1)>=81 && input.LA(1)<=82)||input.LA(1)==142)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set275));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 60);
			LeaveRule("prefix_expr_op", 60);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(451, 63);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:452:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 61);
		TraceIn("prefix_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal278 = default(IToken);
		IToken char_literal280 = default(IToken);
		IToken char_literal282 = default(IToken);
		IToken char_literal283 = default(IToken);
		IToken char_literal285 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list284 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr286 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree char_literal280_tree = default(CommonTree);
		CommonTree char_literal282_tree = default(CommonTree);
		CommonTree char_literal283_tree = default(CommonTree);
		CommonTree char_literal285_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(452, 1);
		try
		{
			// SugarCpp.g:453:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt108=3;
			try { DebugEnterDecision(108, false);
			switch (input.LA(1))
			{
			case 66:
			case 71:
			case 75:
			case 77:
			case 78:
			case 81:
			case 82:
			case 142:
				{
				alt108 = 1;
				}
				break;
			case 130:
				{
				alt108 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 73:
			case 107:
				{
				alt108 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 108, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:453:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(453, 4);
				// SugarCpp.g:453:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:453:5: prefix_expr_op prefix_expr
				{
				DebugLocation(453, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr3751);
				prefix_expr_op276=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op276.Tree);
				DebugLocation(453, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr3753);
				prefix_expr277=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr277.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 453:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(453, 36);
					// SugarCpp.g:453:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(453, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(453, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(453, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:454:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(454, 4);
				string_literal278=(IToken)Match(input,130,Follow._130_in_prefix_expr3769);  
				stream_130.Add(string_literal278);

				DebugLocation(454, 10);
				PushFollow(Follow._type_name_in_prefix_expr3771);
				type_name279=type_name();
				PopFollow();

				stream_type_name.Add(type_name279.Tree);
				DebugLocation(454, 20);
				// SugarCpp.g:454:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==73))
				{
					alt107 = 1;
				}
				else if ((LA107_0==108))
				{
					alt107 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:454:22: '(' ( expr_list )? ')'
					{
					DebugLocation(454, 22);
					char_literal280=(IToken)Match(input,73,Follow._73_in_prefix_expr3775);  
					stream_73.Add(char_literal280);

					DebugLocation(454, 26);
					// SugarCpp.g:454:26: ( expr_list )?
					int alt106=2;
					try { DebugEnterSubRule(106);
					try { DebugEnterDecision(106, false);
					int LA106_0 = input.LA(1);

					if ((LA106_0==IDENT||LA106_0==NUMBER||LA106_0==STRING||LA106_0==66||LA106_0==71||LA106_0==73||LA106_0==75||(LA106_0>=77 && LA106_0<=78)||(LA106_0>=81 && LA106_0<=82)||LA106_0==107||LA106_0==130||LA106_0==142))
					{
						alt106 = 1;
					}
					} finally { DebugExitDecision(106); }
					switch (alt106)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:454:26: expr_list
						{
						DebugLocation(454, 26);
						PushFollow(Follow._expr_list_in_prefix_expr3777);
						expr_list281=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list281.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(106); }

					DebugLocation(454, 37);
					char_literal282=(IToken)Match(input,74,Follow._74_in_prefix_expr3780);  
					stream_74.Add(char_literal282);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 454:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(454, 44);
						// SugarCpp.g:454:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(454, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(454, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(454, 70);
						// SugarCpp.g:454:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(454, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:455:10: '[' expr_list ']'
					{
					DebugLocation(455, 10);
					char_literal283=(IToken)Match(input,108,Follow._108_in_prefix_expr3802);  
					stream_108.Add(char_literal283);

					DebugLocation(455, 14);
					PushFollow(Follow._expr_list_in_prefix_expr3804);
					expr_list284=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list284.Tree);
					DebugLocation(455, 24);
					char_literal285=(IToken)Match(input,109,Follow._109_in_prefix_expr3806);  
					stream_109.Add(char_literal285);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 455:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(455, 31);
						// SugarCpp.g:455:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(455, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(455, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(455, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(107); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:456:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(456, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr3822);
				suffix_expr286=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr286.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 61);
			LeaveRule("prefix_expr", 61);
			LeaveRule_prefix_expr();
		}
		DebugLocation(457, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:459:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 62);
		TraceIn("expr_list", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal288 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr289 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal288_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(459, 1);
		try
		{
			// SugarCpp.g:460:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:460:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(460, 4);
			PushFollow(Follow._expr_in_expr_list3834);
			expr287=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr287.Tree);
			DebugLocation(460, 9);
			// SugarCpp.g:460:9: ( ',' ! expr )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==80))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:460:10: ',' ! expr
					{
					DebugLocation(460, 13);
					char_literal288=(IToken)Match(input,80,Follow._80_in_expr_list3837); 
					DebugLocation(460, 15);
					PushFollow(Follow._expr_in_expr_list3840);
					expr289=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr289.Tree);

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 62);
			LeaveRule("expr_list", 62);
			LeaveRule_expr_list();
		}
		DebugLocation(461, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:463:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 63);
		TraceIn("suffix_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal290 = default(IToken);
		IToken string_literal291 = default(IToken);
		IToken char_literal292 = default(IToken);
		IToken string_literal294 = default(IToken);
		IToken char_literal296 = default(IToken);
		IToken char_literal298 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken char_literal301 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident295 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list297 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list300 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree string_literal291_tree = default(CommonTree);
		CommonTree char_literal292_tree = default(CommonTree);
		CommonTree string_literal294_tree = default(CommonTree);
		CommonTree char_literal296_tree = default(CommonTree);
		CommonTree char_literal298_tree = default(CommonTree);
		CommonTree char_literal299_tree = default(CommonTree);
		CommonTree char_literal301_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(463, 1);
		try
		{
			// SugarCpp.g:464:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:464:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			{
			DebugLocation(464, 4);
			// SugarCpp.g:464:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:464:5: a= atom_expr
			{
			DebugLocation(464, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr3856);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 464:17: -> $a
			{
				DebugLocation(464, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(464, 24);
			// SugarCpp.g:464:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=7;
				try { DebugEnterDecision(112, false);
				switch (input.LA(1))
				{
				case 78:
					{
					alt112 = 1;
					}
					break;
				case 82:
					{
					alt112 = 2;
					}
					break;
				case 86:
					{
					alt112 = 3;
					}
					break;
				case 84:
					{
					alt112 = 4;
					}
					break;
				case 73:
					{
					alt112 = 5;
					}
					break;
				case 108:
					{
					alt112 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:464:26: '++'
					{
					DebugLocation(464, 26);
					string_literal290=(IToken)Match(input,78,Follow._78_in_suffix_expr3866);  
					stream_78.Add(string_literal290);



					{
					// AST REWRITE
					// elements: suffix_expr, 78
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 464:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(464, 34);
						// SugarCpp.g:464:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(464, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(464, 48);
						adaptor.AddChild(root_1, stream_78.NextNode());
						DebugLocation(464, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:465:14: '--'
					{
					DebugLocation(465, 14);
					string_literal291=(IToken)Match(input,82,Follow._82_in_suffix_expr3892);  
					stream_82.Add(string_literal291);



					{
					// AST REWRITE
					// elements: 82, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 465:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(465, 22);
						// SugarCpp.g:465:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(465, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(465, 36);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(465, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:466:11: '.' ident
					{
					DebugLocation(466, 11);
					char_literal292=(IToken)Match(input,86,Follow._86_in_suffix_expr3915);  
					stream_86.Add(char_literal292);

					DebugLocation(466, 15);
					PushFollow(Follow._ident_in_suffix_expr3917);
					ident293=ident();
					PopFollow();

					stream_ident.Add(ident293.Tree);


					{
					// AST REWRITE
					// elements: ident, 86, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 466:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(466, 24);
						// SugarCpp.g:466:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(466, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(466, 38);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(466, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(466, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:467:11: '->' ident
					{
					DebugLocation(467, 11);
					string_literal294=(IToken)Match(input,84,Follow._84_in_suffix_expr3942);  
					stream_84.Add(string_literal294);

					DebugLocation(467, 16);
					PushFollow(Follow._ident_in_suffix_expr3944);
					ident295=ident();
					PopFollow();

					stream_ident.Add(ident295.Tree);


					{
					// AST REWRITE
					// elements: 84, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 467:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(467, 25);
						// SugarCpp.g:467:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(467, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(467, 39);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(467, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(467, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:468:11: '(' ( expr_list )? ')'
					{
					DebugLocation(468, 11);
					char_literal296=(IToken)Match(input,73,Follow._73_in_suffix_expr3969);  
					stream_73.Add(char_literal296);

					DebugLocation(468, 15);
					// SugarCpp.g:468:15: ( expr_list )?
					int alt110=2;
					try { DebugEnterSubRule(110);
					try { DebugEnterDecision(110, false);
					int LA110_0 = input.LA(1);

					if ((LA110_0==IDENT||LA110_0==NUMBER||LA110_0==STRING||LA110_0==66||LA110_0==71||LA110_0==73||LA110_0==75||(LA110_0>=77 && LA110_0<=78)||(LA110_0>=81 && LA110_0<=82)||LA110_0==107||LA110_0==130||LA110_0==142))
					{
						alt110 = 1;
					}
					} finally { DebugExitDecision(110); }
					switch (alt110)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:468:15: expr_list
						{
						DebugLocation(468, 15);
						PushFollow(Follow._expr_list_in_suffix_expr3971);
						expr_list297=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list297.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(110); }

					DebugLocation(468, 26);
					char_literal298=(IToken)Match(input,74,Follow._74_in_suffix_expr3974);  
					stream_74.Add(char_literal298);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 468:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(468, 33);
						// SugarCpp.g:468:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(468, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(468, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(468, 58);
						// SugarCpp.g:468:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(468, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:469:11: '[' ( expr_list )? ']'
					{
					DebugLocation(469, 11);
					char_literal299=(IToken)Match(input,108,Follow._108_in_suffix_expr3998);  
					stream_108.Add(char_literal299);

					DebugLocation(469, 15);
					// SugarCpp.g:469:15: ( expr_list )?
					int alt111=2;
					try { DebugEnterSubRule(111);
					try { DebugEnterDecision(111, false);
					int LA111_0 = input.LA(1);

					if ((LA111_0==IDENT||LA111_0==NUMBER||LA111_0==STRING||LA111_0==66||LA111_0==71||LA111_0==73||LA111_0==75||(LA111_0>=77 && LA111_0<=78)||(LA111_0>=81 && LA111_0<=82)||LA111_0==107||LA111_0==130||LA111_0==142))
					{
						alt111 = 1;
					}
					} finally { DebugExitDecision(111); }
					switch (alt111)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:469:15: expr_list
						{
						DebugLocation(469, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4000);
						expr_list300=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list300.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(111); }

					DebugLocation(469, 26);
					char_literal301=(IToken)Match(input,109,Follow._109_in_suffix_expr4003);  
					stream_109.Add(char_literal301);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 469:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(469, 33);
						// SugarCpp.g:469:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(469, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(469, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(469, 58);
						// SugarCpp.g:469:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(469, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 63);
			LeaveRule("suffix_expr", 63);
			LeaveRule_suffix_expr();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:474:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 64);
		TraceIn("atom_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER302 = default(IToken);
		IToken STRING304 = default(IToken);
		IToken char_literal305 = default(IToken);
		IToken char_literal307 = default(IToken);
		IToken char_literal309 = default(IToken);
		IToken char_literal311 = default(IToken);
		IToken char_literal312 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident303 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident306 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr308 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr310 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER302_tree = default(CommonTree);
		CommonTree STRING304_tree = default(CommonTree);
		CommonTree char_literal305_tree = default(CommonTree);
		CommonTree char_literal307_tree = default(CommonTree);
		CommonTree char_literal309_tree = default(CommonTree);
		CommonTree char_literal311_tree = default(CommonTree);
		CommonTree char_literal312_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(474, 1);
		try
		{
			// SugarCpp.g:475:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt115=5;
			try { DebugEnterDecision(115, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt115 = 1;
				}
				break;
			case IDENT:
				{
				alt115 = 2;
				}
				break;
			case STRING:
				{
				alt115 = 3;
				}
				break;
			case 107:
				{
				alt115 = 4;
				}
				break;
			case 73:
				{
				alt115 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 115, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:475:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(475, 4);
				NUMBER302=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr4049); 
				NUMBER302_tree = (CommonTree)adaptor.Create(NUMBER302);
				adaptor.AddChild(root_0, NUMBER302_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:476:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(476, 4);
				PushFollow(Follow._ident_in_atom_expr4054);
				ident303=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident303.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:477:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(477, 4);
				STRING304=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr4059); 
				STRING304_tree = (CommonTree)adaptor.Create(STRING304);
				adaptor.AddChild(root_0, STRING304_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:478:4: '@' ident
				{
				DebugLocation(478, 4);
				char_literal305=(IToken)Match(input,107,Follow._107_in_atom_expr4064);  
				stream_107.Add(char_literal305);

				DebugLocation(478, 8);
				PushFollow(Follow._ident_in_atom_expr4066);
				ident306=ident();
				PopFollow();

				stream_ident.Add(ident306.Tree);


				{
				// AST REWRITE
				// elements: 107, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 478:14: -> ^( '@' ident )
				{
					DebugLocation(478, 17);
					// SugarCpp.g:478:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(478, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_107.NextNode(), root_1);

					DebugLocation(478, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:479:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(479, 4);
				char_literal307=(IToken)Match(input,73,Follow._73_in_atom_expr4079);  
				stream_73.Add(char_literal307);

				DebugLocation(479, 8);
				PushFollow(Follow._expr_in_atom_expr4081);
				expr308=expr();
				PopFollow();

				stream_expr.Add(expr308.Tree);
				DebugLocation(479, 13);
				// SugarCpp.g:479:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==80))
				{
					alt114 = 1;
				}
				else if ((LA114_0==74))
				{
					alt114 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 114, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:479:15: ( ',' expr )+ ')'
					{
					DebugLocation(479, 15);
					// SugarCpp.g:479:15: ( ',' expr )+
					int cnt113=0;
					try { DebugEnterSubRule(113);
					while (true)
					{
						int alt113=2;
						try { DebugEnterDecision(113, false);
						int LA113_0 = input.LA(1);

						if ((LA113_0==80))
						{
							alt113 = 1;
						}


						} finally { DebugExitDecision(113); }
						switch (alt113)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:479:16: ',' expr
							{
							DebugLocation(479, 16);
							char_literal309=(IToken)Match(input,80,Follow._80_in_atom_expr4086);  
							stream_80.Add(char_literal309);

							DebugLocation(479, 20);
							PushFollow(Follow._expr_in_atom_expr4088);
							expr310=expr();
							PopFollow();

							stream_expr.Add(expr310.Tree);

							}
							break;

						default:
							if (cnt113 >= 1)
								goto loop113;

							EarlyExitException eee113 = new EarlyExitException( 113, input );
							DebugRecognitionException(eee113);
							throw eee113;
						}
						cnt113++;
					}
					loop113:
						;

					} finally { DebugExitSubRule(113); }

					DebugLocation(479, 27);
					char_literal311=(IToken)Match(input,74,Follow._74_in_atom_expr4092);  
					stream_74.Add(char_literal311);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 479:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(479, 34);
						// SugarCpp.g:479:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(479, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(479, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(479, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:480:15: ')'
					{
					DebugLocation(480, 15);
					char_literal312=(IToken)Match(input,74,Follow._74_in_atom_expr4117);  
					stream_74.Add(char_literal312);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 480:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(480, 22);
						// SugarCpp.g:480:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(480, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(480, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(114); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 64);
			LeaveRule("atom_expr", 64);
			LeaveRule_atom_expr();
		}
		DebugLocation(482, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:484:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 65);
		TraceIn("lvalue_item", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal313 = default(IToken);
		IToken string_literal314 = default(IToken);
		IToken char_literal315 = default(IToken);
		IToken string_literal317 = default(IToken);
		IToken char_literal320 = default(IToken);
		IToken char_literal322 = default(IToken);
		IToken char_literal323 = default(IToken);
		IToken char_literal325 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident316 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter319 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list321 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list324 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal313_tree = default(CommonTree);
		CommonTree string_literal314_tree = default(CommonTree);
		CommonTree char_literal315_tree = default(CommonTree);
		CommonTree string_literal317_tree = default(CommonTree);
		CommonTree char_literal320_tree = default(CommonTree);
		CommonTree char_literal322_tree = default(CommonTree);
		CommonTree char_literal323_tree = default(CommonTree);
		CommonTree char_literal325_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(484, 1);
		try
		{
			// SugarCpp.g:485:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:485:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(485, 4);
			// SugarCpp.g:485:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:485:5: a= lvalue_atom
			{
			DebugLocation(485, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item4147);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 485:19: -> $a
			{
				DebugLocation(485, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(485, 26);
			// SugarCpp.g:485:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=7;
				try { DebugEnterDecision(119, false);
				switch (input.LA(1))
				{
				case 78:
					{
					alt119 = 1;
					}
					break;
				case 82:
					{
					alt119 = 2;
					}
					break;
				case 86:
					{
					alt119 = 3;
					}
					break;
				case 84:
					{
					alt119 = 4;
					}
					break;
				case 73:
				case 94:
					{
					alt119 = 5;
					}
					break;
				case 108:
					{
					alt119 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:485:28: '++'
					{
					DebugLocation(485, 28);
					string_literal313=(IToken)Match(input,78,Follow._78_in_lvalue_item4157);  
					stream_78.Add(string_literal313);



					{
					// AST REWRITE
					// elements: 78, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 485:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(485, 36);
						// SugarCpp.g:485:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(485, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(485, 50);
						adaptor.AddChild(root_1, stream_78.NextNode());
						DebugLocation(485, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:486:16: '--'
					{
					DebugLocation(486, 16);
					string_literal314=(IToken)Match(input,82,Follow._82_in_lvalue_item4185);  
					stream_82.Add(string_literal314);



					{
					// AST REWRITE
					// elements: 82, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 486:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(486, 24);
						// SugarCpp.g:486:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(486, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(486, 38);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(486, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:487:13: '.' ident
					{
					DebugLocation(487, 13);
					char_literal315=(IToken)Match(input,86,Follow._86_in_lvalue_item4210);  
					stream_86.Add(char_literal315);

					DebugLocation(487, 17);
					PushFollow(Follow._ident_in_lvalue_item4212);
					ident316=ident();
					PopFollow();

					stream_ident.Add(ident316.Tree);


					{
					// AST REWRITE
					// elements: lvalue_item, 86, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 487:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(487, 26);
						// SugarCpp.g:487:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(487, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(487, 40);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(487, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(487, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:488:13: '->' ident
					{
					DebugLocation(488, 13);
					string_literal317=(IToken)Match(input,84,Follow._84_in_lvalue_item4239);  
					stream_84.Add(string_literal317);

					DebugLocation(488, 18);
					PushFollow(Follow._ident_in_lvalue_item4241);
					ident318=ident();
					PopFollow();

					stream_ident.Add(ident318.Tree);


					{
					// AST REWRITE
					// elements: 84, ident, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 488:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(488, 27);
						// SugarCpp.g:488:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(488, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(488, 41);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(488, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(488, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:489:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(489, 13);
					// SugarCpp.g:489:13: ( generic_parameter )?
					int alt116=2;
					try { DebugEnterSubRule(116);
					try { DebugEnterDecision(116, false);
					int LA116_0 = input.LA(1);

					if ((LA116_0==94))
					{
						alt116 = 1;
					}
					} finally { DebugExitDecision(116); }
					switch (alt116)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:489:13: generic_parameter
						{
						DebugLocation(489, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item4268);
						generic_parameter319=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter319.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(116); }

					DebugLocation(489, 32);
					char_literal320=(IToken)Match(input,73,Follow._73_in_lvalue_item4271);  
					stream_73.Add(char_literal320);

					DebugLocation(489, 36);
					// SugarCpp.g:489:36: ( expr_list )?
					int alt117=2;
					try { DebugEnterSubRule(117);
					try { DebugEnterDecision(117, false);
					int LA117_0 = input.LA(1);

					if ((LA117_0==IDENT||LA117_0==NUMBER||LA117_0==STRING||LA117_0==66||LA117_0==71||LA117_0==73||LA117_0==75||(LA117_0>=77 && LA117_0<=78)||(LA117_0>=81 && LA117_0<=82)||LA117_0==107||LA117_0==130||LA117_0==142))
					{
						alt117 = 1;
					}
					} finally { DebugExitDecision(117); }
					switch (alt117)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:489:36: expr_list
						{
						DebugLocation(489, 36);
						PushFollow(Follow._expr_list_in_lvalue_item4273);
						expr_list321=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list321.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(117); }

					DebugLocation(489, 47);
					char_literal322=(IToken)Match(input,74,Follow._74_in_lvalue_item4276);  
					stream_74.Add(char_literal322);



					{
					// AST REWRITE
					// elements: expr_list, lvalue_item, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 489:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(489, 54);
						// SugarCpp.g:489:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(489, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(489, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(489, 79);
						// SugarCpp.g:489:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(489, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(489, 98);
						// SugarCpp.g:489:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(489, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:490:13: '[' ( expr_list )? ']'
					{
					DebugLocation(490, 13);
					char_literal323=(IToken)Match(input,108,Follow._108_in_lvalue_item4305);  
					stream_108.Add(char_literal323);

					DebugLocation(490, 17);
					// SugarCpp.g:490:17: ( expr_list )?
					int alt118=2;
					try { DebugEnterSubRule(118);
					try { DebugEnterDecision(118, false);
					int LA118_0 = input.LA(1);

					if ((LA118_0==IDENT||LA118_0==NUMBER||LA118_0==STRING||LA118_0==66||LA118_0==71||LA118_0==73||LA118_0==75||(LA118_0>=77 && LA118_0<=78)||(LA118_0>=81 && LA118_0<=82)||LA118_0==107||LA118_0==130||LA118_0==142))
					{
						alt118 = 1;
					}
					} finally { DebugExitDecision(118); }
					switch (alt118)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:490:17: expr_list
						{
						DebugLocation(490, 17);
						PushFollow(Follow._expr_list_in_lvalue_item4307);
						expr_list324=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list324.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(118); }

					DebugLocation(490, 28);
					char_literal325=(IToken)Match(input,109,Follow._109_in_lvalue_item4310);  
					stream_109.Add(char_literal325);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 490:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(490, 35);
						// SugarCpp.g:490:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(490, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(490, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(490, 60);
						// SugarCpp.g:490:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(490, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 65);
			LeaveRule("lvalue_item", 65);
			LeaveRule_lvalue_item();
		}
		DebugLocation(492, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:494:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 66);
		TraceIn("lvalue_atom", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal327 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident326 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident328 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal327_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(494, 1);
		try
		{
			// SugarCpp.g:495:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt120=2;
			try { DebugEnterDecision(120, false);
			int LA120_0 = input.LA(1);

			if ((LA120_0==IDENT))
			{
				alt120 = 1;
			}
			else if ((LA120_0==107))
			{
				alt120 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:495:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(495, 4);
				PushFollow(Follow._ident_in_lvalue_atom4349);
				ident326=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident326.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:496:4: '@' ident
				{
				DebugLocation(496, 4);
				char_literal327=(IToken)Match(input,107,Follow._107_in_lvalue_atom4354);  
				stream_107.Add(char_literal327);

				DebugLocation(496, 8);
				PushFollow(Follow._ident_in_lvalue_atom4356);
				ident328=ident();
				PopFollow();

				stream_ident.Add(ident328.Tree);


				{
				// AST REWRITE
				// elements: 107, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 496:14: -> ^( '@' ident )
				{
					DebugLocation(496, 17);
					// SugarCpp.g:496:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(496, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_107.NextNode(), root_1);

					DebugLocation(496, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 66);
			LeaveRule("lvalue_atom", 66);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:499:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 67);
		TraceIn("lvalue", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal329 = default(IToken);
		IToken char_literal331 = default(IToken);
		IToken char_literal333 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item330 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item334 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal329_tree = default(CommonTree);
		CommonTree char_literal331_tree = default(CommonTree);
		CommonTree char_literal333_tree = default(CommonTree);
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(499, 1);
		try
		{
			// SugarCpp.g:500:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt122=2;
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==73))
			{
				alt122 = 1;
			}
			else if ((LA122_0==IDENT||LA122_0==107))
			{
				alt122 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:500:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(500, 4);
				char_literal329=(IToken)Match(input,73,Follow._73_in_lvalue4375);  
				stream_73.Add(char_literal329);

				DebugLocation(500, 8);
				PushFollow(Follow._lvalue_item_in_lvalue4377);
				lvalue_item330=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item330.Tree);
				DebugLocation(500, 20);
				// SugarCpp.g:500:20: ( ',' lvalue_item )+
				int cnt121=0;
				try { DebugEnterSubRule(121);
				while (true)
				{
					int alt121=2;
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==80))
					{
						alt121 = 1;
					}


					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:500:21: ',' lvalue_item
						{
						DebugLocation(500, 21);
						char_literal331=(IToken)Match(input,80,Follow._80_in_lvalue4380);  
						stream_80.Add(char_literal331);

						DebugLocation(500, 25);
						PushFollow(Follow._lvalue_item_in_lvalue4382);
						lvalue_item332=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item332.Tree);

						}
						break;

					default:
						if (cnt121 >= 1)
							goto loop121;

						EarlyExitException eee121 = new EarlyExitException( 121, input );
						DebugRecognitionException(eee121);
						throw eee121;
					}
					cnt121++;
				}
				loop121:
					;

				} finally { DebugExitSubRule(121); }

				DebugLocation(500, 39);
				char_literal333=(IToken)Match(input,74,Follow._74_in_lvalue4386);  
				stream_74.Add(char_literal333);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 500:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(500, 46);
					// SugarCpp.g:500:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(500, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(500, 60);
					// SugarCpp.g:500:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(500, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:501:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(501, 4);
				PushFollow(Follow._lvalue_item_in_lvalue4400);
				lvalue_item334=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item334.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 67);
			LeaveRule("lvalue", 67);
			LeaveRule_lvalue();
		}
		DebugLocation(502, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:504:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 68);
		TraceIn("ident", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT335 = default(IToken);
		IToken string_literal336 = default(IToken);
		IToken IDENT337 = default(IToken);

		CommonTree IDENT335_tree = default(CommonTree);
		CommonTree string_literal336_tree = default(CommonTree);
		CommonTree IDENT337_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(504, 1);
		try
		{
			// SugarCpp.g:505:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:505:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(505, 4);
			IDENT335=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4411); 
			IDENT335_tree = (CommonTree)adaptor.Create(IDENT335);
			adaptor.AddChild(root_0, IDENT335_tree);
			DebugLocation(505, 10);
			// SugarCpp.g:505:10: ( '::' IDENT )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==91))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:505:11: '::' IDENT
					{
					DebugLocation(505, 11);
					string_literal336=(IToken)Match(input,91,Follow._91_in_ident4414); 
					string_literal336_tree = (CommonTree)adaptor.Create(string_literal336);
					adaptor.AddChild(root_0, string_literal336_tree);
					DebugLocation(505, 16);
					IDENT337=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4416); 
					IDENT337_tree = (CommonTree)adaptor.Create(IDENT337);
					adaptor.AddChild(root_0, IDENT337_tree);

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 68);
			LeaveRule("ident", 68);
			LeaveRule_ident();
		}
		DebugLocation(506, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:508:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 69);
		TraceIn("infix_func", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal338 = default(IToken);
		IToken char_literal340 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident339 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal338_tree = default(CommonTree);
		CommonTree char_literal340_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(508, 1);
		try
		{
			// SugarCpp.g:509:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:509:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(509, 7);
			char_literal338=(IToken)Match(input,112,Follow._112_in_infix_func4429); 
			DebugLocation(509, 9);
			PushFollow(Follow._ident_in_infix_func4432);
			ident339=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident339.Tree);
			DebugLocation(509, 18);
			char_literal340=(IToken)Match(input,112,Follow._112_in_infix_func4434); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 69);
			LeaveRule("infix_func", 69);
			LeaveRule_infix_func();
		}
		DebugLocation(510, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA25 dfa25;
	private DFA38 dfa38;
	private DFA53 dfa53;
	private DFA64 dfa64;
	private DFA69 dfa69;
	private DFA85 dfa85;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa25 = new DFA25( this );
		dfa38 = new DFA38( this );
		dfa53 = new DFA53( this );
		dfa64 = new DFA64( this );
		dfa69 = new DFA69( this );
		dfa85 = new DFA85( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x21\x1\xFFFF\x1\x21\x6\xFFFF\x2\x49\x1\x21\x1\xFFFF\x3\x21\x1\x2C"+
			"\x2\x21\x1\x49\x3\x4A\x2\x49\x1\x21\x3\x4A\x1\x21\x1\x50\x5\x21\x1\x50"+
			"\x1\x21\x4\x4A\x1\x49\xA\x4A\x2\x21\x1\x50\x2\x21\x1\x50\x2\x21\xA\x4A"+
			"\x2\x21\x2\x4A";
		private const string DFA4_maxS =
			"\x1\x8E\x1\x74\x1\xFFFF\x1\x8E\x6\xFFFF\x2\x6D\x1\x21\x1\xFFFF\x1\x21"+
			"\x1\x32\x1\x74\x1\x2C\x1\x32\x1\x8E\x1\x6D\x2\x50\x1\x5B\x2\x6D\x1\x8E"+
			"\x2\x50\x1\x5B\x1\x32\x1\x6D\x2\x21\x3\x32\x1\x6D\x1\x21\x2\x50\x2\x5B"+
			"\x1\x6D\x2\x50\x1\x5B\x2\x50\x1\x5B\x2\x50\x2\x5B\x1\x21\x1\x32\x1\x6D"+
			"\x1\x21\x1\x32\x1\x6D\x2\x21\x1\x5B\x2\x50\x2\x5B\x2\x50\x3\x5B\x2\x21"+
			"\x2\x5B";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x4A\xFFFF\x1\x1\x6\xFFFF\x1\x4\x1\x2\x2\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x8\x5\xFFFF\x1\x9\x4\xFFFF\x1\x7\x1\x2\x1\x6\x5\xFFFF\x1\x2",
				"\x1\xA\x52\xFFFF\x1\xB",
				"",
				"\x1\x2\x25\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xD\xFFFF\x1\x2\x21\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\xB\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x52\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\xB\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x25\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xD\xFFFF\x1\x2\x21\xFFFF"+
				"\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x3\xA\xFFFF\x1\x1A\x3F\xFFFF\x1\x1\x6\xFFFF\x1\x4\x1\x2\x2\xFFFF"+
				"\x1\x5\xF\xFFFF\x1\x2\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\xB\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\xB\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\xB\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\xB\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\xB\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\xB\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "175:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x4\xFFFF";
		private const string DFA25_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA25_minS =
			"\x1\x2C\x1\x8\x2\xFFFF";
		private const string DFA25_maxS =
			"\x1\x2C\x1\x8E\x2\xFFFF";
		private const string DFA25_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA25_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x18\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x3F\xFFFF\x1\x3\x6\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x4\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "219:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\x4\xFFFF";
		private const string DFA38_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA38_minS =
			"\x1\x2C\x1\x8\x2\xFFFF";
		private const string DFA38_maxS =
			"\x1\x2C\x1\x8E\x2\xFFFF";
		private const string DFA38_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA38_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x18\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x3F\xFFFF\x1\x3\x6\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x4\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "231:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\xF\xFFFF";
		private const string DFA53_eofS =
			"\xF\xFFFF";
		private const string DFA53_minS =
			"\x1\x21\x1\xFFFF\x1\x21\x1\xFFFF\x3\x21\x1\x47\x3\x21\x2\x47\x1\x21\x1"+
			"\x47";
		private const string DFA53_maxS =
			"\x1\x8E\x1\xFFFF\x1\x8E\x1\xFFFF\x1\x21\x1\x87\x1\x8E\x1\x6C\x1\x21\x1"+
			"\x87\x1\x8E\x2\x6C\x1\x21\x1\x6C";
		private const string DFA53_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA53_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x2\x52\xFFFF\x1\x1\x12\xFFFF\x1\x1\x6\xFFFF\x1\x3",
				"",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xD\xFFFF\x1\x1\x21\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x43\xFFFF\x1\x1\xE\xFFFF\x1\x1\x12\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xD\xFFFF\x1\x1\x21\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x52\xFFFF\x1\x1\x12\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x20\xFFFF\x1\x1"+
				"\x21\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "260:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA64 : DFA
	{
		private const string DFA64_eotS =
			"\x9\xFFFF";
		private const string DFA64_eofS =
			"\x9\xFFFF";
		private const string DFA64_minS =
			"\x1\x21\x1\x2C\x4\xFFFF\x1\x21\x1\xFFFF\x1\x2C";
		private const string DFA64_maxS =
			"\x1\x88\x1\x8C\x4\xFFFF\x1\x21\x1\xFFFF\x1\x8C";
		private const string DFA64_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA64_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA64_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x5\x21\xFFFF\x1\x5\x18\xFFFF\x1\x2\x1\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x3",
				"\x1\x5\x18\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xA\xFFFF\x1\x5\xF\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x18\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xA\xFFFF\x1\x5\xF\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5"
			};

		private static readonly short[] DFA64_eot = DFA.UnpackEncodedString(DFA64_eotS);
		private static readonly short[] DFA64_eof = DFA.UnpackEncodedString(DFA64_eofS);
		private static readonly char[] DFA64_min = DFA.UnpackEncodedStringToUnsignedChars(DFA64_minS);
		private static readonly char[] DFA64_max = DFA.UnpackEncodedStringToUnsignedChars(DFA64_maxS);
		private static readonly short[] DFA64_accept = DFA.UnpackEncodedString(DFA64_acceptS);
		private static readonly short[] DFA64_special = DFA.UnpackEncodedString(DFA64_specialS);
		private static readonly short[][] DFA64_transition;

		static DFA64()
		{
			int numStates = DFA64_transitionS.Length;
			DFA64_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA64_transition[i] = DFA.UnpackEncodedString(DFA64_transitionS[i]);
			}
		}

		public DFA64( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 64;
			this.eot = DFA64_eot;
			this.eof = DFA64_eof;
			this.min = DFA64_min;
			this.max = DFA64_max;
			this.accept = DFA64_accept;
			this.special = DFA64_special;
			this.transition = DFA64_transition;
		}

		public override string Description { get { return "284:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA69 : DFA
	{
		private const string DFA69_eotS =
			"\x4\xFFFF";
		private const string DFA69_eofS =
			"\x4\xFFFF";
		private const string DFA69_minS =
			"\x1\x2C\x1\x8\x2\xFFFF";
		private const string DFA69_maxS =
			"\x1\x76\x1\x8A\x2\xFFFF";
		private const string DFA69_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA69_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA69_transitionS =
			{
				"\x1\x1\x49\xFFFF\x1\x2",
				"\x1\x3\x18\xFFFF\x1\x3\xA\xFFFF\x1\x1\x1C\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\x9\xFFFF\x1\x3\x1\x2\x1\xFFFF\x3\x3\x4\xFFFF\x2\x3\x3\xFFFF\x3\x3"+
				"\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA69_eot = DFA.UnpackEncodedString(DFA69_eotS);
		private static readonly short[] DFA69_eof = DFA.UnpackEncodedString(DFA69_eofS);
		private static readonly char[] DFA69_min = DFA.UnpackEncodedStringToUnsignedChars(DFA69_minS);
		private static readonly char[] DFA69_max = DFA.UnpackEncodedStringToUnsignedChars(DFA69_maxS);
		private static readonly short[] DFA69_accept = DFA.UnpackEncodedString(DFA69_acceptS);
		private static readonly short[] DFA69_special = DFA.UnpackEncodedString(DFA69_specialS);
		private static readonly short[][] DFA69_transition;

		static DFA69()
		{
			int numStates = DFA69_transitionS.Length;
			DFA69_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA69_transition[i] = DFA.UnpackEncodedString(DFA69_transitionS[i]);
			}
		}

		public DFA69( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 69;
			this.eot = DFA69_eot;
			this.eof = DFA69_eof;
			this.min = DFA69_min;
			this.max = DFA69_max;
			this.accept = DFA69_accept;
			this.special = DFA69_special;
			this.transition = DFA69_transition;
		}

		public override string Description { get { return "310:25: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA85 : DFA
	{
		private const string DFA85_eotS =
			"\xB\xFFFF";
		private const string DFA85_eofS =
			"\xB\xFFFF";
		private const string DFA85_minS =
			"\x2\x21\x1\xFFFF\x1\x43\x1\xFFFF\x2\x21\x2\x43\x1\x21\x1\x43";
		private const string DFA85_maxS =
			"\x2\x8E\x1\xFFFF\x1\x8D\x1\xFFFF\x1\x21\x1\x8E\x2\x8D\x1\x21\x1\x8D";
		private const string DFA85_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA85_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA85_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xF\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2\x16\xFFFF\x1\x2\xB\xFFFF\x1\x2",
				"\x1\x3\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xF\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xE\xFFFF\x1\x2\x16\xFFFF\x1\x2\xB\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x4\x2\xB\xFFFF\x2\x2\x4\xFFFF\x1\x2\x7\xFFFF"+
				"\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\xF\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2\x16\xFFFF\x1\x2\xB\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x4\x2\xB\xFFFF\x2\x2\x4\xFFFF\x1\x2\x7\xFFFF"+
				"\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x4\x2\xB\xFFFF\x2\x2\x4\xFFFF\x1\x2\x7\xFFFF"+
				"\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x4\x2\xB\xFFFF\x2\x2\x4\xFFFF\x1\x2\x7\xFFFF"+
				"\x3\x2"
			};

		private static readonly short[] DFA85_eot = DFA.UnpackEncodedString(DFA85_eotS);
		private static readonly short[] DFA85_eof = DFA.UnpackEncodedString(DFA85_eofS);
		private static readonly char[] DFA85_min = DFA.UnpackEncodedStringToUnsignedChars(DFA85_minS);
		private static readonly char[] DFA85_max = DFA.UnpackEncodedStringToUnsignedChars(DFA85_maxS);
		private static readonly short[] DFA85_accept = DFA.UnpackEncodedString(DFA85_acceptS);
		private static readonly short[] DFA85_special = DFA.UnpackEncodedString(DFA85_specialS);
		private static readonly short[][] DFA85_transition;

		static DFA85()
		{
			int numStates = DFA85_transitionS.Length;
			DFA85_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA85_transition[i] = DFA.UnpackEncodedString(DFA85_transitionS[i]);
			}
		}

		public DFA85( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 85;
			this.eot = DFA85_eot;
			this.eof = DFA85_eof;
			this.min = DFA85_min;
			this.max = DFA85_max;
			this.accept = DFA85_accept;
			this.special = DFA85_special;
			this.transition = DFA85_transition;
		}

		public override string Description { get { return "367:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root468 = new BitSet(new ulong[]{0x100200000000UL,0x898100000000000UL,0x41C2UL});
		public static readonly BitSet _global_block_in_root471 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block493 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block495 = new BitSet(new ulong[]{0x100200000002UL,0x898100000000000UL,0x41C2UL});
		public static readonly BitSet _func_def_in_node518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item586 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _73_in_attribute_item589 = new BitSet(new ulong[]{0x4200200000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item591 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _80_in_attribute_item594 = new BitSet(new ulong[]{0x4200200000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item596 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _74_in_attribute_item600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_attribute_item618 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _73_in_attribute_item621 = new BitSet(new ulong[]{0x4200200000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item623 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _80_in_attribute_item626 = new BitSet(new ulong[]{0x4200200000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item628 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _74_in_attribute_item632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_attribute657 = new BitSet(new ulong[]{0x200000000UL,0x10000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute659 = new BitSet(new ulong[]{0x0UL,0x200000010000UL});
		public static readonly BitSet _80_in_attribute662 = new BitSet(new ulong[]{0x200000000UL,0x10000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute664 = new BitSet(new ulong[]{0x0UL,0x200000010000UL});
		public static readonly BitSet _109_in_attribute668 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute670 = new BitSet(new ulong[]{0x100000000002UL,0x100000000000UL});
		public static readonly BitSet _attribute_in_global_alloc689 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_list_in_global_alloc692 = new BitSet(new ulong[]{0x0UL,0x14000000UL});
		public static readonly BitSet _90_in_global_alloc696 = new BitSet(new ulong[]{0x200000000UL,0x10000000000000UL,0x80UL});
		public static readonly BitSet _type_name_in_global_alloc698 = new BitSet(new ulong[]{0x2UL,0x410000200UL});
		public static readonly BitSet _98_in_global_alloc703 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _92_in_global_alloc707 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_global_alloc710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_global_alloc770 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066E84UL,0x4004UL});
		public static readonly BitSet _expr_list_in_global_alloc772 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_global_alloc775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_global_alloc848 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _modify_expr_in_global_alloc851 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_global_alloc854 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _modify_expr_in_global_alloc856 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _stmt_using_in_global_using893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_import_def915 = new BitSet(new ulong[]{0x4100000000002UL});
		public static readonly BitSet _STRING_in_import_def917 = new BitSet(new ulong[]{0x100000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def921 = new BitSet(new ulong[]{0x100400000000UL});
		public static readonly BitSet _INDENT_in_import_def924 = new BitSet(new ulong[]{0x4100000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def926 = new BitSet(new ulong[]{0x4100000000100UL});
		public static readonly BitSet _STRING_in_import_def931 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def933 = new BitSet(new ulong[]{0x4100000000100UL});
		public static readonly BitSet _DEDENT_in_import_def938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def960 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_enum_def963 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_enum_def965 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_enum_def967 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _ident_in_enum_def970 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_enum_def973 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_enum_def975 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800UL});
		public static readonly BitSet _129_in_namespace_def1008 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_namespace_def1010 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1012 = new BitSet(new ulong[]{0x100400000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1015 = new BitSet(new ulong[]{0x100200000100UL,0x898100000000000UL,0x41C2UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1017 = new BitSet(new ulong[]{0x100200000100UL,0x898100000000000UL,0x41C2UL});
		public static readonly BitSet _global_block_in_namespace_def1020 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1044 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_class_def1047 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_class_def1049 = new BitSet(new ulong[]{0x100000000002UL,0x44000200UL});
		public static readonly BitSet _generic_parameter_in_class_def1052 = new BitSet(new ulong[]{0x100000000002UL,0x4000200UL});
		public static readonly BitSet _73_in_class_def1057 = new BitSet(new ulong[]{0x200000000UL,0x10000000UL});
		public static readonly BitSet _func_args_in_class_def1059 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_class_def1061 = new BitSet(new ulong[]{0x100000000002UL,0x4000000UL});
		public static readonly BitSet _90_in_class_def1066 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_class_def1068 = new BitSet(new ulong[]{0x100000000002UL,0x10000UL});
		public static readonly BitSet _80_in_class_def1071 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_class_def1073 = new BitSet(new ulong[]{0x100000000002UL,0x10000UL});
		public static readonly BitSet _NEWLINE_in_class_def1080 = new BitSet(new ulong[]{0x100400000000UL});
		public static readonly BitSet _INDENT_in_class_def1083 = new BitSet(new ulong[]{0x100200000100UL,0x898100000000000UL,0x41C2UL});
		public static readonly BitSet _NEWLINE_in_class_def1085 = new BitSet(new ulong[]{0x100200000100UL,0x898100000000000UL,0x41C2UL});
		public static readonly BitSet _global_block_in_class_def1088 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_type_name_op1131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_type_name_op1135 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_type_name_op1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_type_name_op1141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_type_name1150 = new BitSet(new ulong[]{0x200000000UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_type_name1153 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_type_name1156 = new BitSet(new ulong[]{0x2UL,0x100040000880UL});
		public static readonly BitSet _94_in_type_name1159 = new BitSet(new ulong[]{0x200000000UL,0x10002000000000UL,0x80UL});
		public static readonly BitSet _type_name_in_type_name1162 = new BitSet(new ulong[]{0x0UL,0x2000010000UL});
		public static readonly BitSet _80_in_type_name1165 = new BitSet(new ulong[]{0x200000000UL,0x10000000000000UL,0x80UL});
		public static readonly BitSet _type_name_in_type_name1167 = new BitSet(new ulong[]{0x0UL,0x2000010000UL});
		public static readonly BitSet _101_in_type_name1173 = new BitSet(new ulong[]{0x2UL,0x100000000880UL});
		public static readonly BitSet _type_name_op_in_type_name1177 = new BitSet(new ulong[]{0x2UL,0x100000000880UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1217 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_generic_parameter_inside1220 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1222 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _94_in_generic_parameter1244 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1246 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _101_in_generic_parameter1248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1263 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_func_args1266 = new BitSet(new ulong[]{0x200000000UL,0x10000000UL});
		public static readonly BitSet _func_args_item_in_func_args1268 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _ident_list_in_func_args_item1290 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_func_args_item1292 = new BitSet(new ulong[]{0x200000000UL,0x10000000000000UL,0x80UL});
		public static readonly BitSet _type_name_in_func_args_item1294 = new BitSet(new ulong[]{0x2UL,0x410000200UL});
		public static readonly BitSet _98_in_func_args_item1299 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _92_in_func_args_item1303 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_func_args_item1306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_func_args_item1354 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066E84UL,0x4004UL});
		public static readonly BitSet _expr_list_in_func_args_item1356 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_func_args_item1359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_func_args_item1416 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _modify_expr_in_func_args_item1420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1431 = new BitSet(new ulong[]{0x200000000UL,0x10000000000000UL,0x4080UL});
		public static readonly BitSet _type_name_in_func_def1434 = new BitSet(new ulong[]{0x200000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _142_in_func_def1437 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_func_def1440 = new BitSet(new ulong[]{0x0UL,0x40000200UL});
		public static readonly BitSet _generic_parameter_in_func_def1442 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _73_in_func_def1445 = new BitSet(new ulong[]{0x200000000UL,0x10000400UL});
		public static readonly BitSet _func_args_in_func_def1447 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_func_def1450 = new BitSet(new ulong[]{0x100000000000UL,0x400000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1453 = new BitSet(new ulong[]{0x100400000000UL});
		public static readonly BitSet _stmt_block_in_func_def1456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_func_def1505 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_func_def1507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1548 = new BitSet(new ulong[]{0x100200000100UL,0x8720080000000200UL,0x771UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1550 = new BitSet(new ulong[]{0x100200000100UL,0x8720080000000200UL,0x771UL});
		public static readonly BitSet _stmt_in_stmt_block1555 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1557 = new BitSet(new ulong[]{0x100200000100UL,0x8720080000000200UL,0x771UL});
		public static readonly BitSet _DEDENT_in_stmt_block1562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1626 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL,0x400UL});
		public static readonly BitSet _122_in_stmt_expr1636 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_expr1638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_stmt_expr1667 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_expr1669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item1708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item1713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item1718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item1723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item1728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_stmt_defer1739 = new BitSet(new ulong[]{0x200000000UL,0x8720080000000200UL,0x771UL});
		public static readonly BitSet _stmt_in_stmt_defer1741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_stmt_typedef1760 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1762 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_typedef1764 = new BitSet(new ulong[]{0x200000000UL,0x10000000000000UL,0x80UL});
		public static readonly BitSet _type_name_in_stmt_typedef1766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_using_item1789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_stmt_using1797 = new BitSet(new ulong[]{0x200000002UL,0x0UL,0x2UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1799 = new BitSet(new ulong[]{0x200000002UL,0x0UL,0x2UL});
		public static readonly BitSet _132_in_stmt_return1820 = new BitSet(new ulong[]{0x4200200000002UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_return1822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_stmt_if1843 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_if1845 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1847 = new BitSet(new ulong[]{0x100000000002UL,0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1850 = new BitSet(new ulong[]{0x100000000000UL,0x40000000000000UL});
		public static readonly BitSet _118_in_stmt_if1853 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_stmt_while1881 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_while1883 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_stmt_while1900 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_stmt_for1926 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _73_in_stmt_for1928 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_for1930 = new BitSet(new ulong[]{0x0UL,0x1000000020000000UL});
		public static readonly BitSet _93_in_stmt_for1933 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_for1935 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_stmt_for1937 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_for1939 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _124_in_stmt_for1945 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_for1947 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_stmt_for1952 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_stmt_try1999 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2001 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_stmt_try2003 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_try2005 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_linq_item2030 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_linq_item2032 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_linq_item2034 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_linq_item2036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_linq_item2051 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_linq_item2053 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_linq_item2055 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_linq_item2057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_linq_item2072 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_linq_item2074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _linq_item_in_linq_prefix2094 = new BitSet(new ulong[]{0x100000000000UL,0x8200000000000000UL,0x200UL});
		public static readonly BitSet _linq_item_in_linq_prefix2096 = new BitSet(new ulong[]{0x100000000000UL,0x8200000000000000UL,0x200UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix2099 = new BitSet(new ulong[]{0x100000000002UL,0x8200000000000000UL,0x200UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq2122 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq2124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2145 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_ident_list2148 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_ident_list2150 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2172 = new BitSet(new ulong[]{0x0UL,0x14000000UL});
		public static readonly BitSet _90_in_stmt_alloc2176 = new BitSet(new ulong[]{0x200000000UL,0x10000000000000UL,0x80UL});
		public static readonly BitSet _type_name_in_stmt_alloc2178 = new BitSet(new ulong[]{0x2UL,0x410000200UL});
		public static readonly BitSet _98_in_stmt_alloc2183 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _92_in_stmt_alloc2187 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_alloc2190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_stmt_alloc2238 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066E84UL,0x4004UL});
		public static readonly BitSet _expr_list_in_stmt_alloc2240 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_stmt_alloc2243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_stmt_alloc2304 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_stmt_alloc2308 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_alloc2311 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc2313 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _lvalue_in_stmt_modify2341 = new BitSet(new ulong[]{0x2UL,0x850502089120UL,0x1000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify2345 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_stmt_modify2362 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_lambda_expr2389 = new BitSet(new ulong[]{0x200000000UL,0x10000400UL});
		public static readonly BitSet _func_args_in_lambda_expr2391 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_lambda_expr2394 = new BitSet(new ulong[]{0x0UL,0x1000100000UL});
		public static readonly BitSet _84_in_lambda_expr2398 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_lambda_expr2400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_lambda_expr2440 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_lambda_expr2442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr2462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr2519 = new BitSet(new ulong[]{0x2UL,0x810512089120UL,0x1000UL});
		public static readonly BitSet _set_in_modify_expr2523 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _cond_expr_in_modify_expr2568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_modify_expr2577 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _cond_expr_in_modify_expr2580 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item2593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr2605 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _105_in_cond_expr2614 = new BitSet(new ulong[]{0x4200200000002UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2620 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_cond_expr2624 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr2731 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2008UL});
		public static readonly BitSet _141_in_or_expr2741 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _and_expr_in_or_expr2745 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2008UL});
		public static readonly BitSet _131_in_or_expr2785 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _and_expr_in_or_expr2789 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2008UL});
		public static readonly BitSet _bit_or_in_and_expr2817 = new BitSet(new ulong[]{0x2UL,0x2000000000040UL});
		public static readonly BitSet _70_in_and_expr2827 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _bit_or_in_and_expr2831 = new BitSet(new ulong[]{0x2UL,0x2000000000040UL});
		public static readonly BitSet _113_in_and_expr2857 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _bit_or_in_and_expr2861 = new BitSet(new ulong[]{0x2UL,0x2000000000040UL});
		public static readonly BitSet _bit_xor_in_bit_or2891 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_bit_or2900 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _bit_xor_in_bit_or2904 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800UL});
		public static readonly BitSet _bit_and_in_bit_xor2934 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _110_in_bit_xor2943 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _bit_and_in_bit_xor2947 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2977 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _71_in_bit_and2986 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2990 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3039 = new BitSet(new ulong[]{0x2UL,0x6000000800000008UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr3051 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3088 = new BitSet(new ulong[]{0x2UL,0x6240000000UL});
		public static readonly BitSet _94_in_cmp_expr3098 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3102 = new BitSet(new ulong[]{0x200000002UL,0x6240000000UL});
		public static readonly BitSet _ident_in_cmp_expr3108 = new BitSet(new ulong[]{0x200000000UL,0x2000000000UL});
		public static readonly BitSet _101_in_cmp_expr3111 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _73_in_cmp_expr3113 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066E84UL,0x4004UL});
		public static readonly BitSet _expr_list_in_cmp_expr3115 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_cmp_expr3118 = new BitSet(new ulong[]{0x2UL,0x6240000000UL});
		public static readonly BitSet _97_in_cmp_expr3228 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3232 = new BitSet(new ulong[]{0x2UL,0x6240000000UL});
		public static readonly BitSet _101_in_cmp_expr3259 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3263 = new BitSet(new ulong[]{0x2UL,0x6240000000UL});
		public static readonly BitSet _102_in_cmp_expr3290 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3294 = new BitSet(new ulong[]{0x2UL,0x6240000000UL});
		public static readonly BitSet _shift_expr_in_infix_expr3324 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr3334 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _shift_expr_in_infix_expr3338 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr3381 = new BitSet(new ulong[]{0x2UL,0x8080000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr3390 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _add_expr_in_shift_expr3394 = new BitSet(new ulong[]{0x2UL,0x8080000000UL});
		public static readonly BitSet _mul_expr_in_add_expr3424 = new BitSet(new ulong[]{0x2UL,0x22000UL});
		public static readonly BitSet _77_in_add_expr3434 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _mul_expr_in_add_expr3438 = new BitSet(new ulong[]{0x2UL,0x22000UL});
		public static readonly BitSet _81_in_add_expr3463 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _mul_expr_in_add_expr3467 = new BitSet(new ulong[]{0x2UL,0x22000UL});
		public static readonly BitSet _selector_expr_in_mul_expr3505 = new BitSet(new ulong[]{0x2UL,0x1000810UL});
		public static readonly BitSet _75_in_mul_expr3515 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _selector_expr_in_mul_expr3519 = new BitSet(new ulong[]{0x2UL,0x1000810UL});
		public static readonly BitSet _88_in_mul_expr3549 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _selector_expr_in_mul_expr3553 = new BitSet(new ulong[]{0x2UL,0x1000810UL});
		public static readonly BitSet _68_in_mul_expr3583 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _selector_expr_in_mul_expr3587 = new BitSet(new ulong[]{0x2UL,0x1000810UL});
		public static readonly BitSet _prefix_expr_in_selector_expr3630 = new BitSet(new ulong[]{0x2UL,0xA00000UL});
		public static readonly BitSet _85_in_selector_expr3640 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_selector_expr3644 = new BitSet(new ulong[]{0x2UL,0xA00000UL});
		public static readonly BitSet _87_in_selector_expr3672 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_selector_expr3677 = new BitSet(new ulong[]{0x2UL,0xA00000UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr3751 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr3753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_prefix_expr3769 = new BitSet(new ulong[]{0x200000000UL,0x10000000000000UL,0x80UL});
		public static readonly BitSet _type_name_in_prefix_expr3771 = new BitSet(new ulong[]{0x0UL,0x100000000200UL});
		public static readonly BitSet _73_in_prefix_expr3775 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066E84UL,0x4004UL});
		public static readonly BitSet _expr_list_in_prefix_expr3777 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_prefix_expr3780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_prefix_expr3802 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_list_in_prefix_expr3804 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_prefix_expr3806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr3822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list3834 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_expr_list3837 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_expr_list3840 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr3856 = new BitSet(new ulong[]{0x2UL,0x100000544200UL});
		public static readonly BitSet _78_in_suffix_expr3866 = new BitSet(new ulong[]{0x2UL,0x100000544200UL});
		public static readonly BitSet _82_in_suffix_expr3892 = new BitSet(new ulong[]{0x2UL,0x100000544200UL});
		public static readonly BitSet _86_in_suffix_expr3915 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_suffix_expr3917 = new BitSet(new ulong[]{0x2UL,0x100000544200UL});
		public static readonly BitSet _84_in_suffix_expr3942 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_suffix_expr3944 = new BitSet(new ulong[]{0x2UL,0x100000544200UL});
		public static readonly BitSet _73_in_suffix_expr3969 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066E84UL,0x4004UL});
		public static readonly BitSet _expr_list_in_suffix_expr3971 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_suffix_expr3974 = new BitSet(new ulong[]{0x2UL,0x100000544200UL});
		public static readonly BitSet _108_in_suffix_expr3998 = new BitSet(new ulong[]{0x4200200000000UL,0x280000066A84UL,0x4004UL});
		public static readonly BitSet _expr_list_in_suffix_expr4000 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_suffix_expr4003 = new BitSet(new ulong[]{0x2UL,0x100000544200UL});
		public static readonly BitSet _NUMBER_in_atom_expr4049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr4054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr4059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_atom_expr4064 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_atom_expr4066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_atom_expr4079 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_atom_expr4081 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _80_in_atom_expr4086 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066A84UL,0x4004UL});
		public static readonly BitSet _expr_in_atom_expr4088 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _74_in_atom_expr4092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_atom_expr4117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item4147 = new BitSet(new ulong[]{0x2UL,0x100040544200UL});
		public static readonly BitSet _78_in_lvalue_item4157 = new BitSet(new ulong[]{0x2UL,0x100040544200UL});
		public static readonly BitSet _82_in_lvalue_item4185 = new BitSet(new ulong[]{0x2UL,0x100040544200UL});
		public static readonly BitSet _86_in_lvalue_item4210 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_lvalue_item4212 = new BitSet(new ulong[]{0x2UL,0x100040544200UL});
		public static readonly BitSet _84_in_lvalue_item4239 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_lvalue_item4241 = new BitSet(new ulong[]{0x2UL,0x100040544200UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item4268 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _73_in_lvalue_item4271 = new BitSet(new ulong[]{0x4200200000000UL,0x80000066E84UL,0x4004UL});
		public static readonly BitSet _expr_list_in_lvalue_item4273 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_lvalue_item4276 = new BitSet(new ulong[]{0x2UL,0x100040544200UL});
		public static readonly BitSet _108_in_lvalue_item4305 = new BitSet(new ulong[]{0x4200200000000UL,0x280000066A84UL,0x4004UL});
		public static readonly BitSet _expr_list_in_lvalue_item4307 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_lvalue_item4310 = new BitSet(new ulong[]{0x2UL,0x100040544200UL});
		public static readonly BitSet _ident_in_lvalue_atom4349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_lvalue_atom4354 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_lvalue_atom4356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_lvalue4375 = new BitSet(new ulong[]{0x200000000UL,0x80000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4377 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_lvalue4380 = new BitSet(new ulong[]{0x200000000UL,0x80000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4382 = new BitSet(new ulong[]{0x0UL,0x10400UL});
		public static readonly BitSet _74_in_lvalue4386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue4400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident4411 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_ident4414 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _IDENT_in_ident4416 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _112_in_infix_func4429 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _ident_in_infix_func4432 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_infix_func4434 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
