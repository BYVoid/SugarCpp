//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-02 15:16:23

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'in'", "'namespace'", "'new'", "'return'", "'try'", "'typedef'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc=12;
	public const int Expr_Bin=13;
	public const int Expr_Bracket=14;
	public const int Expr_Call=15;
	public const int Expr_Call_With=16;
	public const int Expr_Cond=17;
	public const int Expr_Dict=18;
	public const int Expr_Infix=19;
	public const int Expr_Lambda=20;
	public const int Expr_New_Array=21;
	public const int Expr_New_Type=22;
	public const int Expr_Prefix=23;
	public const int Expr_Return=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int IDENT=29;
	public const int INDENT=30;
	public const int Ident_List=31;
	public const int Import=32;
	public const int Left_Bracket=33;
	public const int LineComment=34;
	public const int Match_Tuple=35;
	public const int NEWLINE=36;
	public const int NUMBER=37;
	public const int Namespace=38;
	public const int Right_Bracket=39;
	public const int Root=40;
	public const int SP=41;
	public const int STRING=42;
	public const int Stmt_Block=43;
	public const int Stmt_For=44;
	public const int Stmt_ForEach=45;
	public const int Stmt_If=46;
	public const int Stmt_Try=47;
	public const int Stmt_Typedef=48;
	public const int Stmt_Using=49;
	public const int Stmt_While=50;
	public const int Type_IDENT=51;
	public const int Type_Ref=52;
	public const int Type_Tuple=53;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[200+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:146:8: public root : overall_block ( NEWLINE )* EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int root_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE2 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE2_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(146, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// SugarCpp.g:147:2: ( overall_block ( NEWLINE )* EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:147:4: overall_block ( NEWLINE )* EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(147, 4);
			PushFollow(Follow._overall_block_in_root400);
			overall_block1=overall_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, overall_block1.Tree);
			DebugLocation(147, 19);
			// SugarCpp.g:147:19: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:147:19: NEWLINE
					{
					DebugLocation(147, 19);
					NEWLINE2=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root403); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NEWLINE2_tree = (CommonTree)adaptor.Create(NEWLINE2);
					adaptor.AddChild(root_0, NEWLINE2_tree);
					}

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(147, 28);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root406); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF3_tree = (CommonTree)adaptor.Create(EOF3);
			adaptor.AddChild(root_0, EOF3_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
			if (state.backtracking > 0) { Memoize(input, 1, root_StartIndex); }

		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_overall_block();
	partial void LeaveRule_overall_block();

	// $ANTLR start "overall_block"
	// SugarCpp.g:150:1: overall_block : ( ( NEWLINE )* node )+ ;
	[GrammarRule("overall_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> overall_block()
	{
		EnterRule_overall_block();
		EnterRule("overall_block", 2);
		TraceIn("overall_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int overall_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE4 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE4_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "overall_block");
		DebugLocation(150, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// SugarCpp.g:151:2: ( ( ( NEWLINE )* node )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:151:4: ( ( NEWLINE )* node )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(151, 4);
			// SugarCpp.g:151:4: ( ( NEWLINE )* node )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:151:5: ( NEWLINE )* node
					{
					DebugLocation(151, 5);
					// SugarCpp.g:151:5: ( NEWLINE )*
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch ( alt2 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:151:5: NEWLINE
							{
							DebugLocation(151, 5);
							NEWLINE4=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_overall_block418); if (state.failed) return retval;
							if (state.backtracking == 0) {
							NEWLINE4_tree = (CommonTree)adaptor.Create(NEWLINE4);
							adaptor.AddChild(root_0, NEWLINE4_tree);
							}

							}
							break;

						default:
							goto loop2;
						}
					}

					loop2:
						;

					} finally { DebugExitSubRule(2); }

					DebugLocation(151, 14);
					PushFollow(Follow._node_in_overall_block421);
					node5=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, node5.Tree);

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overall_block", 2);
			LeaveRule("overall_block", 2);
			LeaveRule_overall_block();
			if (state.backtracking > 0) { Memoize(input, 2, overall_block_StartIndex); }

		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "overall_block"); }
		return retval;

	}
	// $ANTLR end "overall_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:154:1: node : ( func_def | import_def | enum_def | class_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(154, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// SugarCpp.g:155:2: ( func_def | import_def | enum_def | class_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:155:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(155, 4);
				PushFollow(Follow._func_def_in_node434);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:156:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(156, 4);
				PushFollow(Follow._import_def_in_node439);
				import_def7=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:157:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 4);
				PushFollow(Follow._enum_def_in_node444);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:158:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(158, 4);
				PushFollow(Follow._class_def_in_node449);
				class_def9=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:159:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._namespace_def_in_node454);
				namespace_def10=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:160:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._stmt_alloc_in_node459);
				stmt_alloc11=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:161:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._stmt_using_in_node464);
				stmt_using12=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:162:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._stmt_typedef_in_node469);
				stmt_typedef13=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
			if (state.backtracking > 0) { Memoize(input, 3, node_StartIndex); }

		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:165:1: import_def : 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 4);
		TraceIn("import_def", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int import_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal14 = default(IToken);
		IToken STRING15 = default(IToken);
		IToken INDENT16 = default(IToken);
		IToken NEWLINE17 = default(IToken);
		IToken STRING18 = default(IToken);
		IToken NEWLINE19 = default(IToken);
		IToken DEDENT20 = default(IToken);

		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		CommonTree INDENT16_tree = default(CommonTree);
		CommonTree NEWLINE17_tree = default(CommonTree);
		CommonTree STRING18_tree = default(CommonTree);
		CommonTree NEWLINE19_tree = default(CommonTree);
		CommonTree DEDENT20_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(165, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// SugarCpp.g:166:2: ( 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:166:4: 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			{
			DebugLocation(166, 4);
			string_literal14=(IToken)Match(input,104,Follow._104_in_import_def480); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_104.Add(string_literal14);

			DebugLocation(166, 13);
			// SugarCpp.g:166:13: ( STRING )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==STRING))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:166:13: STRING
				{
				DebugLocation(166, 13);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_import_def482); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING15);


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(166, 21);
			// SugarCpp.g:166:21: ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==INDENT))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:166:22: INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT
				{
				DebugLocation(166, 22);
				INDENT16=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def486); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT16);

				DebugLocation(166, 29);
				// SugarCpp.g:166:29: ( ( NEWLINE )+ STRING )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					try
					{
						alt7 = dfa7.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:166:30: ( NEWLINE )+ STRING
						{
						DebugLocation(166, 30);
						// SugarCpp.g:166:30: ( NEWLINE )+
						int cnt6=0;
						try { DebugEnterSubRule(6);
						while (true)
						{
							int alt6=2;
							try { DebugEnterDecision(6, false);
							int LA6_0 = input.LA(1);

							if ((LA6_0==NEWLINE))
							{
								alt6 = 1;
							}


							} finally { DebugExitDecision(6); }
							switch (alt6)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:166:30: NEWLINE
								{
								DebugLocation(166, 30);
								NEWLINE17=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def489); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE17);


								}
								break;

							default:
								if (cnt6 >= 1)
									goto loop6;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee6 = new EarlyExitException( 6, input );
								DebugRecognitionException(eee6);
								throw eee6;
							}
							cnt6++;
						}
						loop6:
							;

						} finally { DebugExitSubRule(6); }

						DebugLocation(166, 39);
						STRING18=(IToken)Match(input,STRING,Follow._STRING_in_import_def492); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING18);


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(166, 48);
				// SugarCpp.g:166:48: ( NEWLINE )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0==NEWLINE))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:166:48: NEWLINE
						{
						DebugLocation(166, 48);
						NEWLINE19=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def496); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE19);


						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(166, 57);
				DEDENT20=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def499); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT20);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 166:66: -> ^( Import ( STRING )* )
			{
				DebugLocation(166, 69);
				// SugarCpp.g:166:69: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(166, 71);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(166, 78);
				// SugarCpp.g:166:78: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(166, 78);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 4);
			LeaveRule("import_def", 4);
			LeaveRule_import_def();
			if (state.backtracking > 0) { Memoize(input, 4, import_def_StartIndex); }

		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:169:1: enum_def : 'enum' ident '=' ident ( '|' ident )* -> ^( Enum ( ident )+ ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 5);
		TraceIn("enum_def", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enum_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal21 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken char_literal25 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident22 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal21_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(169, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// SugarCpp.g:170:2: ( 'enum' ident '=' ident ( '|' ident )* -> ^( Enum ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:170:4: 'enum' ident '=' ident ( '|' ident )*
			{
			DebugLocation(170, 4);
			string_literal21=(IToken)Match(input,101,Follow._101_in_enum_def521); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(string_literal21);

			DebugLocation(170, 11);
			PushFollow(Follow._ident_in_enum_def523);
			ident22=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident22.Tree);
			DebugLocation(170, 17);
			char_literal23=(IToken)Match(input,86,Follow._86_in_enum_def525); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_86.Add(char_literal23);

			DebugLocation(170, 21);
			PushFollow(Follow._ident_in_enum_def527);
			ident24=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident24.Tree);
			DebugLocation(170, 27);
			// SugarCpp.g:170:27: ( '|' ident )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==113))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:170:28: '|' ident
					{
					DebugLocation(170, 28);
					char_literal25=(IToken)Match(input,113,Follow._113_in_enum_def530); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(char_literal25);

					DebugLocation(170, 32);
					PushFollow(Follow._ident_in_enum_def532);
					ident26=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident26.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 170:40: -> ^( Enum ( ident )+ )
			{
				DebugLocation(170, 43);
				// SugarCpp.g:170:43: ^( Enum ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(170, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(170, 50);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(170, 50);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 5);
			LeaveRule("enum_def", 5);
			LeaveRule_enum_def();
			if (state.backtracking > 0) { Memoize(input, 5, enum_def_StartIndex); }

		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:173:1: namespace_def : 'namespace' ident INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace ident overall_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 6);
		TraceIn("namespace_def", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int namespace_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal27 = default(IToken);
		IToken INDENT29 = default(IToken);
		IToken NEWLINE31 = default(IToken);
		IToken DEDENT32 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident28 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal27_tree = default(CommonTree);
		CommonTree INDENT29_tree = default(CommonTree);
		CommonTree NEWLINE31_tree = default(CommonTree);
		CommonTree DEDENT32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_overall_block=new RewriteRuleSubtreeStream(adaptor,"rule overall_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(173, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// SugarCpp.g:174:2: ( 'namespace' ident INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace ident overall_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:174:4: 'namespace' ident INDENT overall_block ( NEWLINE )* DEDENT
			{
			DebugLocation(174, 4);
			string_literal27=(IToken)Match(input,106,Follow._106_in_namespace_def554); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_106.Add(string_literal27);

			DebugLocation(174, 16);
			PushFollow(Follow._ident_in_namespace_def556);
			ident28=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident28.Tree);
			DebugLocation(174, 22);
			INDENT29=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def558); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT29);

			DebugLocation(174, 29);
			PushFollow(Follow._overall_block_in_namespace_def560);
			overall_block30=overall_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_overall_block.Add(overall_block30.Tree);
			DebugLocation(174, 43);
			// SugarCpp.g:174:43: ( NEWLINE )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:174:43: NEWLINE
					{
					DebugLocation(174, 43);
					NEWLINE31=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def562); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE31);


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(174, 52);
			DEDENT32=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def565); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT32);



			{
			// AST REWRITE
			// elements: overall_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 174:59: -> ^( Namespace ident overall_block )
			{
				DebugLocation(174, 62);
				// SugarCpp.g:174:62: ^( Namespace ident overall_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(174, 64);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(174, 74);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(174, 80);
				adaptor.AddChild(root_1, stream_overall_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 6);
			LeaveRule("namespace_def", 6);
			LeaveRule_namespace_def();
			if (state.backtracking > 0) { Memoize(input, 6, namespace_def_StartIndex); }

		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:177:1: class_def : ( attribute )? 'class' ident INDENT class_block ( NEWLINE )* DEDENT -> ^( Class ( attribute )? ident class_block ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 7);
		TraceIn("class_def", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal34 = default(IToken);
		IToken INDENT36 = default(IToken);
		IToken NEWLINE38 = default(IToken);
		IToken DEDENT39 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute33 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_block37 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal34_tree = default(CommonTree);
		CommonTree INDENT36_tree = default(CommonTree);
		CommonTree NEWLINE38_tree = default(CommonTree);
		CommonTree DEDENT39_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_class_block=new RewriteRuleSubtreeStream(adaptor,"rule class_block");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(177, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// SugarCpp.g:178:2: ( ( attribute )? 'class' ident INDENT class_block ( NEWLINE )* DEDENT -> ^( Class ( attribute )? ident class_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:178:4: ( attribute )? 'class' ident INDENT class_block ( NEWLINE )* DEDENT
			{
			DebugLocation(178, 4);
			// SugarCpp.g:178:4: ( attribute )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==93))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:178:4: attribute
				{
				DebugLocation(178, 4);
				PushFollow(Follow._attribute_in_class_def586);
				attribute33=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(178, 15);
			string_literal34=(IToken)Match(input,99,Follow._99_in_class_def589); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_99.Add(string_literal34);

			DebugLocation(178, 23);
			PushFollow(Follow._ident_in_class_def591);
			ident35=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident35.Tree);
			DebugLocation(178, 29);
			INDENT36=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def593); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT36);

			DebugLocation(178, 36);
			PushFollow(Follow._class_block_in_class_def595);
			class_block37=class_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_class_block.Add(class_block37.Tree);
			DebugLocation(178, 48);
			// SugarCpp.g:178:48: ( NEWLINE )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==NEWLINE))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:178:48: NEWLINE
					{
					DebugLocation(178, 48);
					NEWLINE38=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def597); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE38);


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(178, 57);
			DEDENT39=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def600); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT39);



			{
			// AST REWRITE
			// elements: ident, class_block, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 178:64: -> ^( Class ( attribute )? ident class_block )
			{
				DebugLocation(178, 67);
				// SugarCpp.g:178:67: ^( Class ( attribute )? ident class_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(178, 69);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(178, 75);
				// SugarCpp.g:178:75: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(178, 75);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(178, 86);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(178, 92);
				adaptor.AddChild(root_1, stream_class_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 7);
			LeaveRule("class_def", 7);
			LeaveRule_class_def();
			if (state.backtracking > 0) { Memoize(input, 7, class_def_StartIndex); }

		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_class_block();
	partial void LeaveRule_class_block();

	// $ANTLR start "class_block"
	// SugarCpp.g:181:1: class_block : ( ( NEWLINE )* class_node )+ ;
	[GrammarRule("class_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_block()
	{
		EnterRule_class_block();
		EnterRule("class_block", 8);
		TraceIn("class_block", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE40 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> class_node41 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE40_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "class_block");
		DebugLocation(181, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// SugarCpp.g:182:2: ( ( ( NEWLINE )* class_node )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:182:4: ( ( NEWLINE )* class_node )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(182, 4);
			// SugarCpp.g:182:4: ( ( NEWLINE )* class_node )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				try
				{
					alt15 = dfa15.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:182:5: ( NEWLINE )* class_node
					{
					DebugLocation(182, 5);
					// SugarCpp.g:182:5: ( NEWLINE )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if ((LA14_0==NEWLINE))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:182:5: NEWLINE
							{
							DebugLocation(182, 5);
							NEWLINE40=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_block625); if (state.failed) return retval;
							if (state.backtracking == 0) {
							NEWLINE40_tree = (CommonTree)adaptor.Create(NEWLINE40);
							adaptor.AddChild(root_0, NEWLINE40_tree);
							}

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }

					DebugLocation(182, 14);
					PushFollow(Follow._class_node_in_class_block628);
					class_node41=class_node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_node41.Tree);

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_block", 8);
			LeaveRule("class_block", 8);
			LeaveRule_class_block();
			if (state.backtracking > 0) { Memoize(input, 8, class_block_StartIndex); }

		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "class_block"); }
		return retval;

	}
	// $ANTLR end "class_block"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:185:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 9);
		TraceIn("attribute_args", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER42 = default(IToken);
		IToken STRING43 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident44 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER42_tree = default(CommonTree);
		CommonTree STRING43_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(185, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// SugarCpp.g:186:2: ( NUMBER | STRING | ident )
			int alt16=3;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt16 = 1;
				}
				break;
			case STRING:
				{
				alt16 = 2;
				}
				break;
			case IDENT:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:186:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				NUMBER42=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args642); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER42_tree = (CommonTree)adaptor.Create(NUMBER42);
				adaptor.AddChild(root_0, NUMBER42_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:187:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				STRING43=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args647); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING43_tree = (CommonTree)adaptor.Create(STRING43);
				adaptor.AddChild(root_0, STRING43_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:188:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				PushFollow(Follow._ident_in_attribute_args652);
				ident44=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident44.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 9);
			LeaveRule("attribute_args", 9);
			LeaveRule_attribute_args();
			if (state.backtracking > 0) { Memoize(input, 9, attribute_args_StartIndex); }

		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:191:1: attribute_item : ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 10);
		TraceIn("attribute_item", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal46 = default(IToken);
		IToken char_literal48 = default(IToken);
		IToken char_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident45 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal46_tree = default(CommonTree);
		CommonTree char_literal48_tree = default(CommonTree);
		CommonTree char_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(191, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// SugarCpp.g:192:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:192:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
			{
			DebugLocation(192, 4);
			PushFollow(Follow._ident_in_attribute_item663);
			ident45=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident45.Tree);
			DebugLocation(192, 10);
			// SugarCpp.g:192:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==61))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:192:11: '(' attribute_args ( ',' attribute_args )* ')'
				{
				DebugLocation(192, 11);
				char_literal46=(IToken)Match(input,61,Follow._61_in_attribute_item666); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal46);

				DebugLocation(192, 15);
				PushFollow(Follow._attribute_args_in_attribute_item668);
				attribute_args47=attribute_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute_args.Add(attribute_args47.Tree);
				DebugLocation(192, 30);
				// SugarCpp.g:192:30: ( ',' attribute_args )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==68))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:192:31: ',' attribute_args
						{
						DebugLocation(192, 31);
						char_literal48=(IToken)Match(input,68,Follow._68_in_attribute_item671); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_68.Add(char_literal48);

						DebugLocation(192, 35);
						PushFollow(Follow._attribute_args_in_attribute_item673);
						attribute_args49=attribute_args();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_attribute_args.Add(attribute_args49.Tree);

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(192, 52);
				char_literal50=(IToken)Match(input,62,Follow._62_in_attribute_item677); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal50);


				}
				break;

			}
			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: ident, attribute_args
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 192:58: -> ^( Attribute ident ( attribute_args )* )
			{
				DebugLocation(192, 61);
				// SugarCpp.g:192:61: ^( Attribute ident ( attribute_args )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(192, 63);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

				DebugLocation(192, 73);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(192, 79);
				// SugarCpp.g:192:79: ( attribute_args )*
				while ( stream_attribute_args.HasNext )
				{
					DebugLocation(192, 79);
					adaptor.AddChild(root_1, stream_attribute_args.NextTree());

				}
				stream_attribute_args.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 10);
			LeaveRule("attribute_item", 10);
			LeaveRule_attribute_item();
			if (state.backtracking > 0) { Memoize(input, 10, attribute_item_StartIndex); }

		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:195:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 11);
		TraceIn("attribute", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal51 = default(IToken);
		IToken char_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		IToken NEWLINE56 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item54 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree NEWLINE56_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(195, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// SugarCpp.g:196:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:196:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(196, 4);
			// SugarCpp.g:196:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt21=0;
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==93))
				{
					int LA21_2 = input.LA(2);

					if ((EvaluatePredicate(synpred28_SugarCpp_fragment)))
					{
						alt21 = 1;
					}


				}


				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:196:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(196, 5);
					char_literal51=(IToken)Match(input,93,Follow._93_in_attribute702); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal51);

					DebugLocation(196, 9);
					PushFollow(Follow._attribute_item_in_attribute704);
					attribute_item52=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item52.Tree);
					DebugLocation(196, 24);
					// SugarCpp.g:196:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(19);
					while (true)
					{
						int alt19=2;
						try { DebugEnterDecision(19, false);
						int LA19_0 = input.LA(1);

						if ((LA19_0==68))
						{
							alt19 = 1;
						}


						} finally { DebugExitDecision(19); }
						switch ( alt19 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:196:25: ',' attribute_item
							{
							DebugLocation(196, 25);
							char_literal53=(IToken)Match(input,68,Follow._68_in_attribute707); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_68.Add(char_literal53);

							DebugLocation(196, 29);
							PushFollow(Follow._attribute_item_in_attribute709);
							attribute_item54=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item54.Tree);

							}
							break;

						default:
							goto loop19;
						}
					}

					loop19:
						;

					} finally { DebugExitSubRule(19); }

					DebugLocation(196, 46);
					char_literal55=(IToken)Match(input,94,Follow._94_in_attribute713); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal55);

					DebugLocation(196, 50);
					// SugarCpp.g:196:50: ( NEWLINE )+
					int cnt20=0;
					try { DebugEnterSubRule(20);
					while (true)
					{
						int alt20=2;
						try { DebugEnterDecision(20, false);
						int LA20_0 = input.LA(1);

						if ((LA20_0==NEWLINE))
						{
							alt20 = 1;
						}


						} finally { DebugExitDecision(20); }
						switch (alt20)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:196:50: NEWLINE
							{
							DebugLocation(196, 50);
							NEWLINE56=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute715); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE56);


							}
							break;

						default:
							if (cnt20 >= 1)
								goto loop20;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee20 = new EarlyExitException( 20, input );
							DebugRecognitionException(eee20);
							throw eee20;
						}
						cnt20++;
					}
					loop20:
						;

					} finally { DebugExitSubRule(20); }


					}
					break;

				default:
					if (cnt21 >= 1)
						goto loop21;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee21 = new EarlyExitException( 21, input );
					DebugRecognitionException(eee21);
					throw eee21;
				}
				cnt21++;
			}
			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 196:61: -> ( attribute_item )+
			{
				DebugLocation(196, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(196, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 11);
			LeaveRule("attribute", 11);
			LeaveRule_attribute();
			if (state.backtracking > 0) { Memoize(input, 11, attribute_StartIndex); }

		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_class_node();
	partial void LeaveRule_class_node();

	// $ANTLR start "class_node"
	// SugarCpp.g:199:1: class_node : ( attribute )? node ;
	[GrammarRule("class_node")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_node()
	{
		EnterRule_class_node();
		EnterRule("class_node", 12);
		TraceIn("class_node", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> node58 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "class_node");
		DebugLocation(199, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// SugarCpp.g:200:2: ( ( attribute )? node )
			DebugEnterAlt(1);
			// SugarCpp.g:200:4: ( attribute )? node
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(200, 4);
			// SugarCpp.g:200:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			try
			{
				alt22 = dfa22.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:200:4: attribute
				{
				DebugLocation(200, 4);
				PushFollow(Follow._attribute_in_class_node734);
				attribute57=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(200, 15);
			PushFollow(Follow._node_in_class_node737);
			node58=node();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, node58.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_node", 12);
			LeaveRule("class_node", 12);
			LeaveRule_class_node();
			if (state.backtracking > 0) { Memoize(input, 12, class_node_StartIndex); }

		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "class_node"); }
		return retval;

	}
	// $ANTLR end "class_node"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:203:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 13);
		TraceIn("type_name_op", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal59 = default(IToken);
		IToken char_literal60 = default(IToken);
		IToken char_literal61 = default(IToken);
		IToken char_literal62 = default(IToken);

		CommonTree char_literal59_tree = default(CommonTree);
		CommonTree char_literal60_tree = default(CommonTree);
		CommonTree char_literal61_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(203, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// SugarCpp.g:203:13: ( '*' | '[' ']' | '&' )
			int alt23=3;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case 63:
				{
				alt23 = 1;
				}
				break;
			case 93:
				{
				alt23 = 2;
				}
				break;
			case 59:
				{
				alt23 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:203:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(203, 15);
				char_literal59=(IToken)Match(input,63,Follow._63_in_type_name_op746); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal59_tree = (CommonTree)adaptor.Create(char_literal59);
				adaptor.AddChild(root_0, char_literal59_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:203:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(203, 21);
				char_literal60=(IToken)Match(input,93,Follow._93_in_type_name_op750); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal60_tree = (CommonTree)adaptor.Create(char_literal60);
				adaptor.AddChild(root_0, char_literal60_tree);
				}
				DebugLocation(203, 25);
				char_literal61=(IToken)Match(input,94,Follow._94_in_type_name_op752); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal61_tree = (CommonTree)adaptor.Create(char_literal61);
				adaptor.AddChild(root_0, char_literal61_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:203:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(203, 31);
				char_literal62=(IToken)Match(input,59,Follow._59_in_type_name_op756); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal62_tree = (CommonTree)adaptor.Create(char_literal62);
				adaptor.AddChild(root_0, char_literal62_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 13);
			LeaveRule("type_name_op", 13);
			LeaveRule_type_name_op();
			if (state.backtracking > 0) { Memoize(input, 13, type_name_op_StartIndex); }

		}
		DebugLocation(203, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:204:1: type_name : ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal64 = default(IToken);
		IToken char_literal66 = default(IToken);
		IToken char_literal68 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op69 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal64_tree = default(CommonTree);
		CommonTree char_literal66_tree = default(CommonTree);
		CommonTree char_literal68_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(204, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// SugarCpp.g:205:2: ( ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:205:4: ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(205, 4);
			PushFollow(Follow._ident_in_type_name765);
			ident63=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident63.Tree);
			DebugLocation(205, 10);
			// SugarCpp.g:205:10: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==82))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:205:11: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(205, 11);
				char_literal64=(IToken)Match(input,82,Follow._82_in_type_name768); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_82.Add(char_literal64);

				DebugLocation(205, 15);
				// SugarCpp.g:205:15: ( type_name ( ',' type_name )* )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==IDENT))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:205:16: type_name ( ',' type_name )*
					{
					DebugLocation(205, 16);
					PushFollow(Follow._type_name_in_type_name771);
					type_name65=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name65.Tree);
					DebugLocation(205, 26);
					// SugarCpp.g:205:26: ( ',' type_name )*
					try { DebugEnterSubRule(24);
					while (true)
					{
						int alt24=2;
						try { DebugEnterDecision(24, false);
						int LA24_0 = input.LA(1);

						if ((LA24_0==68))
						{
							alt24 = 1;
						}


						} finally { DebugExitDecision(24); }
						switch ( alt24 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:205:27: ',' type_name
							{
							DebugLocation(205, 27);
							char_literal66=(IToken)Match(input,68,Follow._68_in_type_name774); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_68.Add(char_literal66);

							DebugLocation(205, 31);
							PushFollow(Follow._type_name_in_type_name776);
							type_name67=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name67.Tree);

							}
							break;

						default:
							goto loop24;
						}
					}

					loop24:
						;

					} finally { DebugExitSubRule(24); }


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(205, 45);
				char_literal68=(IToken)Match(input,89,Follow._89_in_type_name782); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal68);


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(205, 51);
			// SugarCpp.g:205:51: ( type_name_op )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==93))
				{
					int LA27_2 = input.LA(2);

					if ((LA27_2==94))
					{
						alt27 = 1;
					}


				}
				else if ((LA27_0==59||LA27_0==63))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:205:51: type_name_op
					{
					DebugLocation(205, 51);
					PushFollow(Follow._type_name_op_in_type_name786);
					type_name_op69=type_name_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name_op.Add(type_name_op69.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: type_name_op, 89, 82, ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 205:65: -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(205, 68);
				// SugarCpp.g:205:68: ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(205, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(205, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(205, 87);
				// SugarCpp.g:205:87: ( '<' ( type_name )* '>' )?
				if (stream_89.HasNext||stream_82.HasNext||stream_type_name.HasNext)
				{
					DebugLocation(205, 88);
					adaptor.AddChild(root_1, stream_82.NextNode());
					DebugLocation(205, 92);
					// SugarCpp.g:205:92: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(205, 92);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(205, 103);
					adaptor.AddChild(root_1, stream_89.NextNode());

				}
				stream_89.Reset();
				stream_82.Reset();
				stream_type_name.Reset();
				DebugLocation(205, 110);
				// SugarCpp.g:205:110: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(205, 110);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 14, type_name_StartIndex); }

		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:208:1: generic_parameter : '<' ident ( ',' ! ident )* '>' ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 15);
		TraceIn("generic_parameter", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int generic_parameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal70 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken char_literal74 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal70_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		CommonTree char_literal74_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(208, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// SugarCpp.g:209:2: ( '<' ident ( ',' ! ident )* '>' )
			DebugEnterAlt(1);
			// SugarCpp.g:209:4: '<' ident ( ',' ! ident )* '>'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(209, 4);
			char_literal70=(IToken)Match(input,82,Follow._82_in_generic_parameter820); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal70_tree = (CommonTree)adaptor.Create(char_literal70);
			adaptor.AddChild(root_0, char_literal70_tree);
			}
			DebugLocation(209, 8);
			PushFollow(Follow._ident_in_generic_parameter822);
			ident71=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident71.Tree);
			DebugLocation(209, 14);
			// SugarCpp.g:209:14: ( ',' ! ident )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==68))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:209:15: ',' ! ident
					{
					DebugLocation(209, 18);
					char_literal72=(IToken)Match(input,68,Follow._68_in_generic_parameter825); if (state.failed) return retval;
					DebugLocation(209, 20);
					PushFollow(Follow._ident_in_generic_parameter828);
					ident73=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ident73.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }

			DebugLocation(209, 28);
			char_literal74=(IToken)Match(input,89,Follow._89_in_generic_parameter832); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal74_tree = (CommonTree)adaptor.Create(char_literal74);
			adaptor.AddChild(root_0, char_literal74_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 15);
			LeaveRule("generic_parameter", 15);
			LeaveRule_generic_parameter();
			if (state.backtracking > 0) { Memoize(input, 15, generic_parameter_StartIndex); }

		}
		DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:212:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 16);
		TraceIn("func_args", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal76 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc77 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(212, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// SugarCpp.g:213:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:213:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(213, 4);
			PushFollow(Follow._stmt_alloc_in_func_args843);
			stmt_alloc75=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc75.Tree);
			DebugLocation(213, 15);
			// SugarCpp.g:213:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==68))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:213:16: ',' stmt_alloc
					{
					DebugLocation(213, 16);
					char_literal76=(IToken)Match(input,68,Follow._68_in_func_args846); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(char_literal76);

					DebugLocation(213, 20);
					PushFollow(Follow._stmt_alloc_in_func_args848);
					stmt_alloc77=stmt_alloc();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc77.Tree);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 213:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(213, 36);
				// SugarCpp.g:213:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(213, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(213, 48);
				// SugarCpp.g:213:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(213, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 16);
			LeaveRule("func_args", 16);
			LeaveRule_func_args();
			if (state.backtracking > 0) { Memoize(input, 16, func_args_StartIndex); }

		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:216:1: func_def : ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 17);
		TraceIn("func_def", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal79 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken char_literal86 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal79_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree char_literal84_tree = default(CommonTree);
		CommonTree char_literal86_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(216, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// SugarCpp.g:217:2: ( ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:217:4: ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( stmt_block | '=' expr )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(217, 4);
			// SugarCpp.g:217:4: ( type_name )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			try
			{
				alt30 = dfa30.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:217:4: type_name
				{
				DebugLocation(217, 4);
				PushFollow(Follow._type_name_in_func_def870);
				type_name78=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name78.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(217, 15);
			// SugarCpp.g:217:15: ( '~' )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==116))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:217:15: '~'
				{
				DebugLocation(217, 15);
				char_literal79=(IToken)Match(input,116,Follow._116_in_func_def873); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal79_tree = (CommonTree)adaptor.Create(char_literal79);
				adaptor.AddChild(root_0, char_literal79_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(217, 20);
			PushFollow(Follow._ident_in_func_def876);
			ident80=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident80.Tree);
			DebugLocation(217, 26);
			// SugarCpp.g:217:26: ( generic_parameter )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==82))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:217:26: generic_parameter
				{
				DebugLocation(217, 26);
				PushFollow(Follow._generic_parameter_in_func_def878);
				generic_parameter81=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_parameter81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(217, 45);
			char_literal82=(IToken)Match(input,61,Follow._61_in_func_def881); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal82_tree = (CommonTree)adaptor.Create(char_literal82);
			adaptor.AddChild(root_0, char_literal82_tree);
			}
			DebugLocation(217, 49);
			// SugarCpp.g:217:49: ( func_args )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==IDENT))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:217:49: func_args
				{
				DebugLocation(217, 49);
				PushFollow(Follow._func_args_in_func_def883);
				func_args83=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_args83.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(217, 60);
			char_literal84=(IToken)Match(input,62,Follow._62_in_func_def886); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal84_tree = (CommonTree)adaptor.Create(char_literal84);
			adaptor.AddChild(root_0, char_literal84_tree);
			}
			DebugLocation(217, 64);
			// SugarCpp.g:217:64: ( stmt_block | '=' expr )
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==INDENT))
			{
				alt34 = 1;
			}
			else if ((LA34_0==86))
			{
				alt34 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:217:66: stmt_block
				{
				DebugLocation(217, 66);
				PushFollow(Follow._stmt_block_in_func_def890);
				stmt_block85=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_block85.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:217:79: '=' expr
				{
				DebugLocation(217, 79);
				char_literal86=(IToken)Match(input,86,Follow._86_in_func_def894); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal86_tree = (CommonTree)adaptor.Create(char_literal86);
				adaptor.AddChild(root_0, char_literal86_tree);
				}
				DebugLocation(217, 83);
				PushFollow(Follow._expr_in_func_def896);
				expr87=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expr87.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 17);
			LeaveRule("func_def", 17);
			LeaveRule_func_def();
			if (state.backtracking > 0) { Memoize(input, 17, func_def_StartIndex); }

		}
		DebugLocation(218, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:220:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 18);
		TraceIn("stmt_block", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INDENT88 = default(IToken);
		IToken NEWLINE89 = default(IToken);
		IToken NEWLINE91 = default(IToken);
		IToken DEDENT92 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt90 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT88_tree = default(CommonTree);
		CommonTree NEWLINE89_tree = default(CommonTree);
		CommonTree NEWLINE91_tree = default(CommonTree);
		CommonTree DEDENT92_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(220, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// SugarCpp.g:221:2: ( INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:221:4: INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(221, 4);
			INDENT88=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block912); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT88);

			DebugLocation(221, 11);
			// SugarCpp.g:221:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				try
				{
					alt36 = dfa36.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:221:12: ( NEWLINE )+ stmt
					{
					DebugLocation(221, 12);
					// SugarCpp.g:221:12: ( NEWLINE )+
					int cnt35=0;
					try { DebugEnterSubRule(35);
					while (true)
					{
						int alt35=2;
						try { DebugEnterDecision(35, false);
						int LA35_0 = input.LA(1);

						if ((LA35_0==NEWLINE))
						{
							alt35 = 1;
						}


						} finally { DebugExitDecision(35); }
						switch (alt35)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:221:12: NEWLINE
							{
							DebugLocation(221, 12);
							NEWLINE89=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block915); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE89);


							}
							break;

						default:
							if (cnt35 >= 1)
								goto loop35;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee35 = new EarlyExitException( 35, input );
							DebugRecognitionException(eee35);
							throw eee35;
						}
						cnt35++;
					}
					loop35:
						;

					} finally { DebugExitSubRule(35); }

					DebugLocation(221, 21);
					PushFollow(Follow._stmt_in_stmt_block918);
					stmt90=stmt();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt.Add(stmt90.Tree);

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }

			DebugLocation(221, 28);
			// SugarCpp.g:221:28: ( NEWLINE )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==NEWLINE))
				{
					alt37 = 1;
				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:221:28: NEWLINE
					{
					DebugLocation(221, 28);
					NEWLINE91=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block922); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE91);


					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }

			DebugLocation(221, 37);
			DEDENT92=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block925); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT92);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 221:44: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(221, 47);
				// SugarCpp.g:221:47: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(221, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(221, 60);
				// SugarCpp.g:221:60: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(221, 60);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 18);
			LeaveRule("stmt_block", 18);
			LeaveRule_stmt_block();
			if (state.backtracking > 0) { Memoize(input, 18, stmt_block_StartIndex); }

		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:224:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 19);
		TraceIn("stmt", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr93 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try97 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(224, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// SugarCpp.g:225:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try )
			int alt38=5;
			try { DebugEnterDecision(38, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 61:
			case 108:
			case 110:
			case 111:
				{
				alt38 = 1;
				}
				break;
			case 103:
				{
				alt38 = 2;
				}
				break;
			case 102:
				{
				alt38 = 3;
				}
				break;
			case 112:
				{
				alt38 = 4;
				}
				break;
			case 109:
				{
				alt38 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:225:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._stmt_expr_in_stmt945);
				stmt_expr93=stmt_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr93.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:226:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._stmt_if_in_stmt950);
				stmt_if94=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if94.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:227:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._stmt_for_in_stmt955);
				stmt_for95=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for95.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:228:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._stmt_while_in_stmt960);
				stmt_while96=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while96.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:229:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				PushFollow(Follow._stmt_try_in_stmt965);
				stmt_try97=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try97.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 19);
			LeaveRule("stmt", 19);
			LeaveRule_stmt();
			if (state.backtracking > 0) { Memoize(input, 19, stmt_StartIndex); }

		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:232:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 20);
		TraceIn("stmt_expr", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc98 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify102 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(232, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// SugarCpp.g:233:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt39=5;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				int LA39_1 = input.LA(2);

				if ((EvaluatePredicate(synpred50_SugarCpp_fragment)))
				{
					alt39 = 1;
				}
				else if ((true))
				{
					alt39 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 108:
				{
				alt39 = 2;
				}
				break;
			case 111:
				{
				alt39 = 3;
				}
				break;
			case 110:
				{
				alt39 = 4;
				}
				break;
			case 61:
				{
				alt39 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:233:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(233, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr976);
				stmt_alloc98=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc98.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:234:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr981);
				stmt_return99=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return99.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:235:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr986);
				stmt_using100=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using100.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:236:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(236, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr991);
				stmt_typedef101=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef101.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:237:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(237, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr996);
				stmt_modify102=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify102.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 20);
			LeaveRule("stmt_expr", 20);
			LeaveRule_stmt_expr();
			if (state.backtracking > 0) { Memoize(input, 20, stmt_expr_StartIndex); }

		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:240:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 21);
		TraceIn("stmt_typedef", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_typedef_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal103 = default(IToken);
		IToken char_literal105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal103_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(240, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// SugarCpp.g:241:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: 'typedef' ident '=' type_name
			{
			DebugLocation(241, 4);
			string_literal103=(IToken)Match(input,110,Follow._110_in_stmt_typedef1007); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_110.Add(string_literal103);

			DebugLocation(241, 14);
			PushFollow(Follow._ident_in_stmt_typedef1009);
			ident104=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident104.Tree);
			DebugLocation(241, 20);
			char_literal105=(IToken)Match(input,86,Follow._86_in_stmt_typedef1011); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_86.Add(char_literal105);

			DebugLocation(241, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1013);
			type_name106=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name106.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 241:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(241, 37);
				// SugarCpp.g:241:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(241, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(241, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(241, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 21);
			LeaveRule("stmt_typedef", 21);
			LeaveRule_stmt_typedef();
			if (state.backtracking > 0) { Memoize(input, 21, stmt_typedef_StartIndex); }

		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:244:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 22);
		TraceIn("stmt_using_item", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal108 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident107 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal108_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(244, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// SugarCpp.g:244:16: ( ident | 'namespace' )
			int alt40=2;
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==IDENT))
			{
				alt40 = 1;
			}
			else if ((LA40_0==106))
			{
				alt40 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(244, 18);
				PushFollow(Follow._ident_in_stmt_using_item1032);
				ident107=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident107.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:244:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(244, 26);
				string_literal108=(IToken)Match(input,106,Follow._106_in_stmt_using_item1036); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal108_tree = (CommonTree)adaptor.Create(string_literal108);
				adaptor.AddChild(root_0, string_literal108_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 22);
			LeaveRule("stmt_using_item", 22);
			LeaveRule_stmt_using_item();
			if (state.backtracking > 0) { Memoize(input, 22, stmt_using_item_StartIndex); }

		}
		DebugLocation(244, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:245:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 23);
		TraceIn("stmt_using", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(245, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// SugarCpp.g:246:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:246:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(246, 4);
			string_literal109=(IToken)Match(input,111,Follow._111_in_stmt_using1044); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_111.Add(string_literal109);

			DebugLocation(246, 12);
			// SugarCpp.g:246:12: ( stmt_using_item )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				try
				{
					alt41 = dfa41.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:246:12: stmt_using_item
					{
					DebugLocation(246, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1046);
					stmt_using_item110=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item110.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 246:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(246, 32);
				// SugarCpp.g:246:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(246, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(246, 45);
				// SugarCpp.g:246:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(246, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 23);
			LeaveRule("stmt_using", 23);
			LeaveRule_stmt_using();
			if (state.backtracking > 0) { Memoize(input, 23, stmt_using_StartIndex); }

		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:249:1: stmt_return : 'return' ( expr )? -> ^( Expr_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 24);
		TraceIn("stmt_return", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_return_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr112 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(249, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// SugarCpp.g:250:2: ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:250:4: 'return' ( expr )?
			{
			DebugLocation(250, 4);
			string_literal111=(IToken)Match(input,108,Follow._108_in_stmt_return1067); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_108.Add(string_literal111);

			DebugLocation(250, 13);
			// SugarCpp.g:250:13: ( expr )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==IDENT||LA42_0==NUMBER||LA42_0==STRING||LA42_0==54||LA42_0==59||LA42_0==61||LA42_0==63||(LA42_0>=65 && LA42_0<=66)||(LA42_0>=69 && LA42_0<=70)||LA42_0==107||LA42_0==116))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:250:13: expr
				{
				DebugLocation(250, 13);
				PushFollow(Follow._expr_in_stmt_return1069);
				expr112=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr112.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 250:19: -> ^( Expr_Return ( expr )? )
			{
				DebugLocation(250, 22);
				// SugarCpp.g:250:22: ^( Expr_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(250, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Return, "Expr_Return"), root_1);

				DebugLocation(250, 36);
				// SugarCpp.g:250:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(250, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 24);
			LeaveRule("stmt_return", 24);
			LeaveRule_stmt_return();
			if (state.backtracking > 0) { Memoize(input, 24, stmt_return_StartIndex); }

		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:253:1: stmt_if : 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 25);
		TraceIn("stmt_if", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_if_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal113 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken string_literal118 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block119 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal113_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree string_literal118_tree = default(CommonTree);
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(253, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// SugarCpp.g:254:2: ( 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:254:4: 'if' '(' expr ')' stmt_block ( 'else' stmt_block )?
			{
			DebugLocation(254, 4);
			string_literal113=(IToken)Match(input,103,Follow._103_in_stmt_if1090); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_103.Add(string_literal113);

			DebugLocation(254, 9);
			char_literal114=(IToken)Match(input,61,Follow._61_in_stmt_if1092); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal114);

			DebugLocation(254, 13);
			PushFollow(Follow._expr_in_stmt_if1094);
			expr115=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr115.Tree);
			DebugLocation(254, 18);
			char_literal116=(IToken)Match(input,62,Follow._62_in_stmt_if1096); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal116);

			DebugLocation(254, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1098);
			stmt_block117=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block117.Tree);
			DebugLocation(254, 33);
			// SugarCpp.g:254:33: ( 'else' stmt_block )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==100))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:254:34: 'else' stmt_block
				{
				DebugLocation(254, 34);
				string_literal118=(IToken)Match(input,100,Follow._100_in_stmt_if1101); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_100.Add(string_literal118);

				DebugLocation(254, 41);
				PushFollow(Follow._stmt_block_in_stmt_if1103);
				stmt_block119=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block119.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(43); }



			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 254:54: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(254, 57);
				// SugarCpp.g:254:57: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(254, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(254, 67);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(254, 72);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(254, 83);
				// SugarCpp.g:254:83: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(254, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 25);
			LeaveRule("stmt_if", 25);
			LeaveRule_stmt_if();
			if (state.backtracking > 0) { Memoize(input, 25, stmt_if_StartIndex); }

		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:257:1: stmt_while : 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 26);
		TraceIn("stmt_while", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_while_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal120 = default(IToken);
		IToken char_literal121 = default(IToken);
		IToken char_literal123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal120_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		CommonTree char_literal123_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(257, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// SugarCpp.g:258:2: ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:258:4: 'while' '(' expr ')' stmt_block
			{
			DebugLocation(258, 4);
			string_literal120=(IToken)Match(input,112,Follow._112_in_stmt_while1129); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_112.Add(string_literal120);

			DebugLocation(258, 12);
			char_literal121=(IToken)Match(input,61,Follow._61_in_stmt_while1131); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal121);

			DebugLocation(258, 16);
			PushFollow(Follow._expr_in_stmt_while1133);
			expr122=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr122.Tree);
			DebugLocation(258, 21);
			char_literal123=(IToken)Match(input,62,Follow._62_in_stmt_while1135); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal123);

			DebugLocation(258, 25);
			PushFollow(Follow._stmt_block_in_stmt_while1137);
			stmt_block124=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block124.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 258:36: -> ^( Stmt_While expr stmt_block )
			{
				DebugLocation(258, 39);
				// SugarCpp.g:258:39: ^( Stmt_While expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(258, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

				DebugLocation(258, 52);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(258, 57);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 26);
			LeaveRule("stmt_while", 26);
			LeaveRule_stmt_while();
			if (state.backtracking > 0) { Memoize(input, 26, stmt_while_StartIndex); }

		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:261:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 27);
		TraceIn("stmt_for", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_for_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal125 = default(IToken);
		IToken char_literal126 = default(IToken);
		IToken char_literal128 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken string_literal132 = default(IToken);
		IToken char_literal134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr133 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal125_tree = default(CommonTree);
		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree string_literal132_tree = default(CommonTree);
		CommonTree char_literal134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(261, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// SugarCpp.g:266:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:266:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(266, 4);
			string_literal125=(IToken)Match(input,102,Follow._102_in_stmt_for1163); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_102.Add(string_literal125);

			DebugLocation(266, 10);
			char_literal126=(IToken)Match(input,61,Follow._61_in_stmt_for1165); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal126);

			DebugLocation(266, 14);
			PushFollow(Follow._expr_in_stmt_for1167);
			expr127=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr127.Tree);
			DebugLocation(266, 19);
			// SugarCpp.g:266:19: ( ';' expr ';' expr | 'in' expr )
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==81))
			{
				alt44 = 1;
			}
			else if ((LA44_0==105))
			{
				alt44 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:20: ';' expr ';' expr
				{
				DebugLocation(266, 20);
				char_literal128=(IToken)Match(input,81,Follow._81_in_stmt_for1170); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_81.Add(char_literal128);

				DebugLocation(266, 24);
				PushFollow(Follow._expr_in_stmt_for1172);
				expr129=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr129.Tree);
				DebugLocation(266, 29);
				char_literal130=(IToken)Match(input,81,Follow._81_in_stmt_for1174); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_81.Add(char_literal130);

				DebugLocation(266, 33);
				PushFollow(Follow._expr_in_stmt_for1176);
				expr131=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr131.Tree);
				DebugLocation(266, 38);
				if (state.backtracking == 0)
				{
					type=0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:266:50: 'in' expr
				{
				DebugLocation(266, 50);
				string_literal132=(IToken)Match(input,105,Follow._105_in_stmt_for1182); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_105.Add(string_literal132);

				DebugLocation(266, 55);
				PushFollow(Follow._expr_in_stmt_for1184);
				expr133=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr133.Tree);
				DebugLocation(266, 60);
				if (state.backtracking == 0)
				{
					type=1;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(266, 71);
			char_literal134=(IToken)Match(input,62,Follow._62_in_stmt_for1189); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal134);

			DebugLocation(266, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1191);
			stmt_block135=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block135.Tree);


			{
			// AST REWRITE
			// elements: expr, expr, expr, expr, stmt_block, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 267:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(267, 18);
				// SugarCpp.g:267:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(267, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(267, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(267, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(267, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(267, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 268:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(268, 7);
				// SugarCpp.g:268:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(268, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(268, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(268, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(268, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 27);
			LeaveRule("stmt_for", 27);
			LeaveRule_stmt_for();
			if (state.backtracking > 0) { Memoize(input, 27, stmt_for_StartIndex); }

		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:271:1: stmt_try : 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 28);
		TraceIn("stmt_try", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_try_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal136 = default(IToken);
		IToken string_literal138 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken char_literal141 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal136_tree = default(CommonTree);
		CommonTree string_literal138_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(271, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// SugarCpp.g:272:2: ( 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:272:4: 'try' stmt_block 'catch' '(' expr ')' stmt_block
			{
			DebugLocation(272, 4);
			string_literal136=(IToken)Match(input,109,Follow._109_in_stmt_try1236); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_109.Add(string_literal136);

			DebugLocation(272, 10);
			PushFollow(Follow._stmt_block_in_stmt_try1238);
			stmt_block137=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block137.Tree);
			DebugLocation(272, 21);
			string_literal138=(IToken)Match(input,98,Follow._98_in_stmt_try1240); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_98.Add(string_literal138);

			DebugLocation(272, 29);
			char_literal139=(IToken)Match(input,61,Follow._61_in_stmt_try1242); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal139);

			DebugLocation(272, 33);
			PushFollow(Follow._expr_in_stmt_try1244);
			expr140=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr140.Tree);
			DebugLocation(272, 38);
			char_literal141=(IToken)Match(input,62,Follow._62_in_stmt_try1246); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal141);

			DebugLocation(272, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1248);
			stmt_block142=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block142.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 272:53: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(272, 56);
				// SugarCpp.g:272:56: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(272, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(272, 67);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(272, 78);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(272, 83);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 28);
			LeaveRule("stmt_try", 28);
			LeaveRule_stmt_try();
			if (state.backtracking > 0) { Memoize(input, 28, stmt_try_StartIndex); }

		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:275:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 29);
		TraceIn("ident_list", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal144 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(275, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// SugarCpp.g:276:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:276:4: ident ( ',' ident )*
			{
			DebugLocation(276, 4);
			PushFollow(Follow._ident_in_ident_list1271);
			ident143=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident143.Tree);
			DebugLocation(276, 10);
			// SugarCpp.g:276:10: ( ',' ident )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==68))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:11: ',' ident
					{
					DebugLocation(276, 11);
					char_literal144=(IToken)Match(input,68,Follow._68_in_ident_list1274); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(char_literal144);

					DebugLocation(276, 15);
					PushFollow(Follow._ident_in_ident_list1276);
					ident145=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident145.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 276:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(276, 26);
				// SugarCpp.g:276:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(276, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(276, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(276, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 29);
			LeaveRule("ident_list", 29);
			LeaveRule_ident_list();
			if (state.backtracking > 0) { Memoize(input, 29, ident_list_StartIndex); }

		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:279:1: stmt_alloc : ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) | ident ':=' ^ modify_expr );
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 30);
		TraceIn("stmt_alloc", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_alloc_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal147 = default(IToken);
		IToken char_literal149 = default(IToken);
		IToken string_literal152 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr153 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal147_tree = default(CommonTree);
		CommonTree char_literal149_tree = default(CommonTree);
		CommonTree string_literal152_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(279, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// SugarCpp.g:280:2: ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) | ident ':=' ^ modify_expr )
			int alt47=2;
			try { DebugEnterDecision(47, false);
			try
			{
				alt47 = dfa47.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:280:4: ident_list ':' type_name ( '=' expr )?
				{
				DebugLocation(280, 4);
				PushFollow(Follow._ident_list_in_stmt_alloc1298);
				ident_list146=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list146.Tree);
				DebugLocation(280, 15);
				char_literal147=(IToken)Match(input,78,Follow._78_in_stmt_alloc1300); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_78.Add(char_literal147);

				DebugLocation(280, 19);
				PushFollow(Follow._type_name_in_stmt_alloc1302);
				type_name148=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name148.Tree);
				DebugLocation(280, 29);
				// SugarCpp.g:280:29: ( '=' expr )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==86))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:30: '=' expr
					{
					DebugLocation(280, 30);
					char_literal149=(IToken)Match(input,86,Follow._86_in_stmt_alloc1305); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_86.Add(char_literal149);

					DebugLocation(280, 34);
					PushFollow(Follow._expr_in_stmt_alloc1307);
					expr150=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr150.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(46); }



				{
				// AST REWRITE
				// elements: type_name, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 280:41: -> ^( Expr_Alloc type_name ident_list ( expr )? )
				{
					DebugLocation(280, 44);
					// SugarCpp.g:280:44: ^( Expr_Alloc type_name ident_list ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(280, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(280, 57);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(280, 67);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(280, 78);
					// SugarCpp.g:280:78: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(280, 78);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:281:4: ident ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(281, 4);
				PushFollow(Follow._ident_in_stmt_alloc1327);
				ident151=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident151.Tree);
				DebugLocation(281, 14);
				string_literal152=(IToken)Match(input,80,Follow._80_in_stmt_alloc1329); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal152_tree = (CommonTree)adaptor.Create(string_literal152);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal152_tree, root_0);
				}
				DebugLocation(281, 16);
				PushFollow(Follow._modify_expr_in_stmt_alloc1332);
				modify_expr153=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr153.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 30);
			LeaveRule("stmt_alloc", 30);
			LeaveRule_stmt_alloc();
			if (state.backtracking > 0) { Memoize(input, 30, stmt_alloc_StartIndex); }

		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:284:1: stmt_modify : lvalue ( modify_expr_op ^ cond_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 31);
		TraceIn("stmt_modify", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_modify_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(284, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// SugarCpp.g:285:2: ( lvalue ( modify_expr_op ^ cond_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:285:4: lvalue ( modify_expr_op ^ cond_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(285, 4);
			PushFollow(Follow._lvalue_in_stmt_modify1343);
			lvalue154=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue154.Tree);
			DebugLocation(285, 11);
			// SugarCpp.g:285:11: ( modify_expr_op ^ cond_expr )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==57||LA48_0==60||LA48_0==64||LA48_0==67||LA48_0==71||LA48_0==77||LA48_0==80||LA48_0==84||LA48_0==86||LA48_0==92||LA48_0==96||LA48_0==114))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:12: modify_expr_op ^ cond_expr
				{
				DebugLocation(285, 26);
				PushFollow(Follow._modify_expr_op_in_stmt_modify1346);
				modify_expr_op155=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op155.Tree, root_0);
				DebugLocation(285, 28);
				PushFollow(Follow._cond_expr_in_stmt_modify1349);
				cond_expr156=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr156.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 31);
			LeaveRule("stmt_modify", 31);
			LeaveRule_stmt_modify();
			if (state.backtracking > 0) { Memoize(input, 31, stmt_modify_StartIndex); }

		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:288:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 32);
		TraceIn("expr", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(288, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// SugarCpp.g:289:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:289:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(289, 4);
			PushFollow(Follow._lambda_expr_in_expr1362);
			lambda_expr157=lambda_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr157.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 32);
			LeaveRule("expr", 32);
			LeaveRule_expr();
			if (state.backtracking > 0) { Memoize(input, 32, expr_StartIndex); }

		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:292:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 33);
		TraceIn("lambda_expr", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lambda_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		IToken string_literal161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree char_literal160_tree = default(CommonTree);
		CommonTree string_literal161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(292, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// SugarCpp.g:293:2: ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==61))
			{
				int LA49_1 = input.LA(2);

				if ((EvaluatePredicate(synpred63_SugarCpp_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA49_0==IDENT||LA49_0==NUMBER||LA49_0==STRING||LA49_0==54||LA49_0==59||LA49_0==63||(LA49_0>=65 && LA49_0<=66)||(LA49_0>=69 && LA49_0<=70)||LA49_0==107||LA49_0==116))
			{
				alt49 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:293:4: '(' func_args ')' '=>' modify_expr
				{
				DebugLocation(293, 4);
				char_literal158=(IToken)Match(input,61,Follow._61_in_lambda_expr1373); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal158);

				DebugLocation(293, 8);
				PushFollow(Follow._func_args_in_lambda_expr1375);
				func_args159=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args159.Tree);
				DebugLocation(293, 18);
				char_literal160=(IToken)Match(input,62,Follow._62_in_lambda_expr1377); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal160);

				DebugLocation(293, 22);
				string_literal161=(IToken)Match(input,88,Follow._88_in_lambda_expr1379); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(string_literal161);

				DebugLocation(293, 27);
				PushFollow(Follow._modify_expr_in_lambda_expr1381);
				modify_expr162=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(modify_expr162.Tree);


				{
				// AST REWRITE
				// elements: func_args, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 293:39: -> ^( Expr_Lambda func_args modify_expr )
				{
					DebugLocation(293, 42);
					// SugarCpp.g:293:42: ^( Expr_Lambda func_args modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(293, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(293, 56);
					adaptor.AddChild(root_1, stream_func_args.NextTree());
					DebugLocation(293, 66);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:294:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(294, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr1396);
				modify_expr163=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr163.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 33);
			LeaveRule("lambda_expr", 33);
			LeaveRule_lambda_expr();
			if (state.backtracking > 0) { Memoize(input, 33, lambda_expr_StartIndex); }

		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:297:1: modify_expr_op : ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 34);
		TraceIn("modify_expr_op", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set164 = default(IToken);

		CommonTree set164_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(297, 99);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// SugarCpp.g:297:15: ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(297, 15);

			set164=(IToken)input.LT(1);
			if (input.LA(1)==57||input.LA(1)==60||input.LA(1)==64||input.LA(1)==67||input.LA(1)==71||input.LA(1)==77||input.LA(1)==80||input.LA(1)==84||input.LA(1)==86||input.LA(1)==92||input.LA(1)==96||input.LA(1)==114)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set164));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 34);
			LeaveRule("modify_expr_op", 34);
			LeaveRule_modify_expr_op();
			if (state.backtracking > 0) { Memoize(input, 34, modify_expr_op_StartIndex); }

		}
		DebugLocation(297, 99);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:298:1: modify_expr : cond_expr ( modify_expr_op ^ modify_expr )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 35);
		TraceIn("modify_expr", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr167 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(298, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// SugarCpp.g:299:2: ( cond_expr ( modify_expr_op ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:299:4: cond_expr ( modify_expr_op ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(299, 4);
			PushFollow(Follow._cond_expr_in_modify_expr1458);
			cond_expr165=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr165.Tree);
			DebugLocation(299, 14);
			// SugarCpp.g:299:14: ( modify_expr_op ^ modify_expr )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==57||LA50_0==60||LA50_0==64||LA50_0==67||LA50_0==71||LA50_0==77||LA50_0==80||LA50_0==84||LA50_0==86||LA50_0==92||LA50_0==96||LA50_0==114))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:299:15: modify_expr_op ^ modify_expr
				{
				DebugLocation(299, 29);
				PushFollow(Follow._modify_expr_op_in_modify_expr1461);
				modify_expr_op166=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op166.Tree, root_0);
				DebugLocation(299, 31);
				PushFollow(Follow._modify_expr_in_modify_expr1464);
				modify_expr167=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr167.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 35);
			LeaveRule("modify_expr", 35);
			LeaveRule_modify_expr();
			if (state.backtracking > 0) { Memoize(input, 35, modify_expr_StartIndex); }

		}
		DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:302:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 36);
		TraceIn("cond_expr_item", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr168 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(302, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// SugarCpp.g:302:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:302:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(302, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item1475);
			cond_expr168=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr168.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 36);
			LeaveRule("cond_expr_item", 36);
			LeaveRule_cond_expr_item();
			if (state.backtracking > 0) { Memoize(input, 36, cond_expr_item_StartIndex); }

		}
		DebugLocation(302, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:303:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 37);
		TraceIn("cond_expr", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal169 = default(IToken);
		IToken string_literal170 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal169_tree = default(CommonTree);
		CommonTree string_literal170_tree = default(CommonTree);
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(303, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// SugarCpp.g:304:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:304:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(304, 4);
			// SugarCpp.g:304:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:304:5: a= or_expr
			{
			DebugLocation(304, 6);
			PushFollow(Follow._or_expr_in_cond_expr1487);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 304:15: -> $a
			{
				DebugLocation(304, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(304, 22);
			// SugarCpp.g:304:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==103))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:304:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(304, 23);
				string_literal169=(IToken)Match(input,103,Follow._103_in_cond_expr1496); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_103.Add(string_literal169);

				DebugLocation(304, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr1500);
				a=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
				DebugLocation(304, 45);
				string_literal170=(IToken)Match(input,100,Follow._100_in_cond_expr1502); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_100.Add(string_literal170);

				DebugLocation(304, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr1506);
				b=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: a, cond_expr, b
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 304:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(304, 72);
					// SugarCpp.g:304:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(304, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(304, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(304, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(304, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 37);
			LeaveRule("cond_expr", 37);
			LeaveRule_cond_expr();
			if (state.backtracking > 0) { Memoize(input, 37, cond_expr_StartIndex); }

		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:307:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 38);
		TraceIn("or_expr", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int or_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal171 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal171_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(307, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// SugarCpp.g:308:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:308:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(308, 4);
			// SugarCpp.g:308:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:308:5: a= and_expr
			{
			DebugLocation(308, 6);
			PushFollow(Follow._and_expr_in_or_expr1537);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 308:16: -> $a
			{
				DebugLocation(308, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(308, 23);
			// SugarCpp.g:308:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==115))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:308:24: '||' b= and_expr
					{
					DebugLocation(308, 24);
					string_literal171=(IToken)Match(input,115,Follow._115_in_or_expr1546); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_115.Add(string_literal171);

					DebugLocation(308, 30);
					PushFollow(Follow._and_expr_in_or_expr1550);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: or_expr, 115, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 308:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(308, 43);
						// SugarCpp.g:308:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(308, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(308, 54);
						adaptor.AddChild(root_1, stream_115.NextNode());
						DebugLocation(308, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(308, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 38);
			LeaveRule("or_expr", 38);
			LeaveRule_or_expr();
			if (state.backtracking > 0) { Memoize(input, 38, or_expr_StartIndex); }

		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:311:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 39);
		TraceIn("and_expr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int and_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal172 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal172_tree = default(CommonTree);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(311, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// SugarCpp.g:312:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:312:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(312, 4);
			// SugarCpp.g:312:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:312:5: a= bit_or
			{
			DebugLocation(312, 6);
			PushFollow(Follow._bit_or_in_and_expr1580);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 312:14: -> $a
			{
				DebugLocation(312, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(312, 21);
			// SugarCpp.g:312:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==58))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:312:22: '&&' b= bit_or
					{
					DebugLocation(312, 22);
					string_literal172=(IToken)Match(input,58,Follow._58_in_and_expr1589); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_58.Add(string_literal172);

					DebugLocation(312, 28);
					PushFollow(Follow._bit_or_in_and_expr1593);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 58, and_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 312:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(312, 39);
						// SugarCpp.g:312:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(312, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(312, 50);
						adaptor.AddChild(root_1, stream_58.NextNode());
						DebugLocation(312, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(312, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 39);
			LeaveRule("and_expr", 39);
			LeaveRule_and_expr();
			if (state.backtracking > 0) { Memoize(input, 39, and_expr_StartIndex); }

		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:315:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 40);
		TraceIn("bit_or", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_or_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal173 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal173_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(315, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// SugarCpp.g:316:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:316:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(316, 4);
			// SugarCpp.g:316:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:316:5: a= bit_xor
			{
			DebugLocation(316, 6);
			PushFollow(Follow._bit_xor_in_bit_or1623);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 316:15: -> $a
			{
				DebugLocation(316, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(316, 22);
			// SugarCpp.g:316:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==113))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:316:23: '|' b= bit_xor
					{
					DebugLocation(316, 23);
					char_literal173=(IToken)Match(input,113,Follow._113_in_bit_or1632); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(char_literal173);

					DebugLocation(316, 28);
					PushFollow(Follow._bit_xor_in_bit_or1636);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_or, 113, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 316:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(316, 40);
						// SugarCpp.g:316:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(316, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(316, 51);
						adaptor.AddChild(root_1, stream_113.NextNode());
						DebugLocation(316, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(316, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 40);
			LeaveRule("bit_or", 40);
			LeaveRule_bit_or();
			if (state.backtracking > 0) { Memoize(input, 40, bit_or_StartIndex); }

		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:319:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 41);
		TraceIn("bit_xor", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_xor_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal174 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal174_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(319, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// SugarCpp.g:320:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:320:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(320, 4);
			// SugarCpp.g:320:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:320:5: a= bit_and
			{
			DebugLocation(320, 6);
			PushFollow(Follow._bit_and_in_bit_xor1666);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 320:15: -> $a
			{
				DebugLocation(320, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(320, 22);
			// SugarCpp.g:320:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==95))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:320:23: '^' b= bit_and
					{
					DebugLocation(320, 23);
					char_literal174=(IToken)Match(input,95,Follow._95_in_bit_xor1675); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal174);

					DebugLocation(320, 28);
					PushFollow(Follow._bit_and_in_bit_xor1679);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, b, 95
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 320:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(320, 40);
						// SugarCpp.g:320:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(320, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(320, 51);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(320, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(320, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 41);
			LeaveRule("bit_xor", 41);
			LeaveRule_bit_xor();
			if (state.backtracking > 0) { Memoize(input, 41, bit_xor_StartIndex); }

		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:323:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 42);
		TraceIn("bit_and", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_and_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal175 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal175_tree = default(CommonTree);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(323, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// SugarCpp.g:324:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:324:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(324, 4);
			// SugarCpp.g:324:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:324:5: a= cmp_equ_expr
			{
			DebugLocation(324, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and1709);
			a=cmp_equ_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 324:20: -> $a
			{
				DebugLocation(324, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(324, 27);
			// SugarCpp.g:324:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==59))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:324:28: '&' b= cmp_equ_expr
					{
					DebugLocation(324, 28);
					char_literal175=(IToken)Match(input,59,Follow._59_in_bit_and1718); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_59.Add(char_literal175);

					DebugLocation(324, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and1722);
					b=cmp_equ_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 59, b, bit_and
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 324:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(324, 50);
						// SugarCpp.g:324:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(324, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(324, 61);
						adaptor.AddChild(root_1, stream_59.NextNode());
						DebugLocation(324, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(324, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 42);
			LeaveRule("bit_and", 42);
			LeaveRule_bit_and();
			if (state.backtracking > 0) { Memoize(input, 42, bit_and_StartIndex); }

		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:327:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 43);
		TraceIn("cmp_equ_expr_op", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set176 = default(IToken);

		CommonTree set176_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(327, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// SugarCpp.g:327:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(327, 16);

			set176=(IToken)input.LT(1);
			if (input.LA(1)==55||input.LA(1)==87)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set176));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 43);
			LeaveRule("cmp_equ_expr_op", 43);
			LeaveRule_cmp_equ_expr_op();
			if (state.backtracking > 0) { Memoize(input, 43, cmp_equ_expr_op_StartIndex); }

		}
		DebugLocation(327, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:328:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 44);
		TraceIn("cmp_equ_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op177 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(328, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// SugarCpp.g:329:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			{
			DebugLocation(329, 4);
			// SugarCpp.g:329:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:329:5: a= cmp_expr
			{
			DebugLocation(329, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr1763);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:16: -> $a
			{
				DebugLocation(329, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(329, 23);
			// SugarCpp.g:329:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==55||LA57_0==87))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:24: cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(329, 24);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr1772);
				cmp_equ_expr_op177=cmp_equ_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_equ_expr_op.Add(cmp_equ_expr_op177.Tree);
				DebugLocation(329, 41);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr1776);
				b=cmp_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_equ_expr_op, cmp_equ_expr
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 329:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
				{
					DebugLocation(329, 54);
					// SugarCpp.g:329:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(329, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(329, 65);
					adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
					DebugLocation(329, 82);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(329, 96);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 44);
			LeaveRule("cmp_equ_expr", 44);
			LeaveRule_cmp_equ_expr();
			if (state.backtracking > 0) { Memoize(input, 44, cmp_equ_expr_StartIndex); }

		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr_op();
	partial void LeaveRule_cmp_expr_op();

	// $ANTLR start "cmp_expr_op"
	// SugarCpp.g:332:1: cmp_expr_op : ( '<' | '<=' | '>' | '>=' );
	[GrammarRule("cmp_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op()
	{
		EnterRule_cmp_expr_op();
		EnterRule("cmp_expr_op", 45);
		TraceIn("cmp_expr_op", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set178 = default(IToken);

		CommonTree set178_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_expr_op");
		DebugLocation(332, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// SugarCpp.g:332:12: ( '<' | '<=' | '>' | '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(332, 12);

			set178=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==85||(input.LA(1)>=89 && input.LA(1)<=90))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set178));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr_op", 45);
			LeaveRule("cmp_expr_op", 45);
			LeaveRule_cmp_expr_op();
			if (state.backtracking > 0) { Memoize(input, 45, cmp_expr_op_StartIndex); }

		}
		DebugLocation(332, 37);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_expr_op"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:333:1: cmp_expr : (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 46);
		TraceIn("cmp_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op179 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(333, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// SugarCpp.g:334:2: ( (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:334:4: (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			{
			DebugLocation(334, 4);
			// SugarCpp.g:334:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:334:5: a= shift_expr
			{
			DebugLocation(334, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr1826);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 334:18: -> $a
			{
				DebugLocation(334, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(334, 25);
			// SugarCpp.g:334:25: ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==82||LA58_0==85||(LA58_0>=89 && LA58_0<=90)))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:334:26: cmp_expr_op b= shift_expr
				{
				DebugLocation(334, 26);
				PushFollow(Follow._cmp_expr_op_in_cmp_expr1835);
				cmp_expr_op179=cmp_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr_op.Add(cmp_expr_op179.Tree);
				DebugLocation(334, 39);
				PushFollow(Follow._shift_expr_in_cmp_expr1839);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_expr_op, cmp_expr, b
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 334:51: -> ^( Expr_Bin cmp_expr_op $cmp_expr $b)
				{
					DebugLocation(334, 54);
					// SugarCpp.g:334:54: ^( Expr_Bin cmp_expr_op $cmp_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(334, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(334, 65);
					adaptor.AddChild(root_1, stream_cmp_expr_op.NextTree());
					DebugLocation(334, 78);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(334, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 46);
			LeaveRule("cmp_expr", 46);
			LeaveRule_cmp_expr();
			if (state.backtracking > 0) { Memoize(input, 46, cmp_expr_StartIndex); }

		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:337:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 47);
		TraceIn("shift_expr_op", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set180 = default(IToken);

		CommonTree set180_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(337, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// SugarCpp.g:337:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(337, 14);

			set180=(IToken)input.LT(1);
			if (input.LA(1)==83||input.LA(1)==91)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set180));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 47);
			LeaveRule("shift_expr_op", 47);
			LeaveRule_shift_expr_op();
			if (state.backtracking > 0) { Memoize(input, 47, shift_expr_op_StartIndex); }

		}
		DebugLocation(337, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:338:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 48);
		TraceIn("shift_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op181 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(338, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// SugarCpp.g:339:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:339:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(339, 4);
			// SugarCpp.g:339:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:339:5: a= add_expr
			{
			DebugLocation(339, 6);
			PushFollow(Follow._add_expr_in_shift_expr1880);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 339:16: -> $a
			{
				DebugLocation(339, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(339, 23);
			// SugarCpp.g:339:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==83||LA59_0==91))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:339:24: shift_expr_op b= add_expr
					{
					DebugLocation(339, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr1889);
					shift_expr_op181=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op181.Tree);
					DebugLocation(339, 39);
					PushFollow(Follow._add_expr_in_shift_expr1893);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr_op, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 339:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(339, 52);
						// SugarCpp.g:339:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(339, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(339, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(339, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(339, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 48);
			LeaveRule("shift_expr", 48);
			LeaveRule_shift_expr();
			if (state.backtracking > 0) { Memoize(input, 48, shift_expr_StartIndex); }

		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:342:1: add_expr : (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 49);
		TraceIn("add_expr", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int add_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal182 = default(IToken);
		IToken char_literal183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(342, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// SugarCpp.g:343:2: ( (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:343:4: (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(343, 4);
			// SugarCpp.g:343:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:343:5: a= infix_expr
			{
			DebugLocation(343, 6);
			PushFollow(Follow._infix_expr_in_add_expr1923);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 343:18: -> $a
			{
				DebugLocation(343, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(343, 25);
			// SugarCpp.g:343:25: ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=3;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==65))
				{
					alt60 = 1;
				}
				else if ((LA60_0==69))
				{
					alt60 = 2;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:343:27: '+' b= infix_expr
					{
					DebugLocation(343, 27);
					char_literal182=(IToken)Match(input,65,Follow._65_in_add_expr1933); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_65.Add(char_literal182);

					DebugLocation(343, 32);
					PushFollow(Follow._infix_expr_in_add_expr1937);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 65
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 343:44: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(343, 47);
						// SugarCpp.g:343:47: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(343, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(343, 58);
						adaptor.AddChild(root_1, stream_65.NextNode());
						DebugLocation(343, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(343, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:344:12: '-' b= infix_expr
					{
					DebugLocation(344, 12);
					char_literal183=(IToken)Match(input,69,Follow._69_in_add_expr1964); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_69.Add(char_literal183);

					DebugLocation(344, 17);
					PushFollow(Follow._infix_expr_in_add_expr1968);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, 69, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 344:29: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(344, 32);
						// SugarCpp.g:344:32: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(344, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(344, 43);
						adaptor.AddChild(root_1, stream_69.NextNode());
						DebugLocation(344, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(344, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 49);
			LeaveRule("add_expr", 49);
			LeaveRule_add_expr();
			if (state.backtracking > 0) { Memoize(input, 49, add_expr_StartIndex); }

		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:348:1: infix_expr : (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 50);
		TraceIn("infix_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func184 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(348, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// SugarCpp.g:349:2: ( (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:349:4: (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(349, 4);
			// SugarCpp.g:349:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:349:5: a= mul_expr
			{
			DebugLocation(349, 6);
			PushFollow(Follow._mul_expr_in_infix_expr2008);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 349:16: -> $a
			{
				DebugLocation(349, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(349, 23);
			// SugarCpp.g:349:23: ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==97))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:349:25: infix_func b= mul_expr
					{
					DebugLocation(349, 25);
					PushFollow(Follow._infix_func_in_infix_expr2018);
					infix_func184=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func184.Tree);
					DebugLocation(349, 37);
					PushFollow(Follow._mul_expr_in_infix_expr2022);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, infix_func, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 349:48: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(349, 51);
						// SugarCpp.g:349:51: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(349, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(349, 64);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(349, 76);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(349, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 50);
			LeaveRule("infix_expr", 50);
			LeaveRule_infix_expr();
			if (state.backtracking > 0) { Memoize(input, 50, infix_expr_StartIndex); }

		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:352:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 51);
		TraceIn("mul_expr", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int mul_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal185 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken char_literal187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal185_tree = default(CommonTree);
		CommonTree char_literal186_tree = default(CommonTree);
		CommonTree char_literal187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(352, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// SugarCpp.g:353:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:353:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(353, 4);
			// SugarCpp.g:353:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:353:5: a= selector_expr
			{
			DebugLocation(353, 6);
			PushFollow(Follow._selector_expr_in_mul_expr2054);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 353:21: -> $a
			{
				DebugLocation(353, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(353, 28);
			// SugarCpp.g:353:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=4;
				try { DebugEnterDecision(62, false);
				switch (input.LA(1))
				{
				case 63:
					{
					alt62 = 1;
					}
					break;
				case 76:
					{
					alt62 = 2;
					}
					break;
				case 56:
					{
					alt62 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:353:30: '*' b= selector_expr
					{
					DebugLocation(353, 30);
					char_literal185=(IToken)Match(input,63,Follow._63_in_mul_expr2064); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_63.Add(char_literal185);

					DebugLocation(353, 35);
					PushFollow(Follow._selector_expr_in_mul_expr2068);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 63
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 353:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(353, 53);
						// SugarCpp.g:353:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(353, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(353, 64);
						adaptor.AddChild(root_1, stream_63.NextNode());
						DebugLocation(353, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(353, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:354:15: '/' b= selector_expr
					{
					DebugLocation(354, 15);
					char_literal186=(IToken)Match(input,76,Follow._76_in_mul_expr2098); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_76.Add(char_literal186);

					DebugLocation(354, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2102);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 76, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 354:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(354, 38);
						// SugarCpp.g:354:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(354, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(354, 49);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(354, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(354, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:355:15: '%' b= selector_expr
					{
					DebugLocation(355, 15);
					char_literal187=(IToken)Match(input,56,Follow._56_in_mul_expr2132); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_56.Add(char_literal187);

					DebugLocation(355, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2136);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 56, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 355:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(355, 38);
						// SugarCpp.g:355:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(355, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(355, 49);
						adaptor.AddChild(root_1, stream_56.NextNode());
						DebugLocation(355, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(355, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 51);
			LeaveRule("mul_expr", 51);
			LeaveRule_mul_expr();
			if (state.backtracking > 0) { Memoize(input, 51, mul_expr_StartIndex); }

		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:359:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 52);
		TraceIn("selector_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int selector_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal188 = default(IToken);
		IToken string_literal189 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal188_tree = default(CommonTree);
		CommonTree string_literal189_tree = default(CommonTree);
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(359, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// SugarCpp.g:360:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:360:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(360, 4);
			// SugarCpp.g:360:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:360:5: a= prefix_expr
			{
			DebugLocation(360, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr2179);
			a=prefix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 360:19: -> $a
			{
				DebugLocation(360, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(360, 26);
			// SugarCpp.g:360:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=3;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==73))
				{
					alt63 = 1;
				}
				else if ((LA63_0==75))
				{
					alt63 = 2;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:360:28: '->*' b= ident
					{
					DebugLocation(360, 28);
					string_literal188=(IToken)Match(input,73,Follow._73_in_selector_expr2189); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_73.Add(string_literal188);

					DebugLocation(360, 35);
					PushFollow(Follow._ident_in_selector_expr2193);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, b, 73
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 360:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(360, 45);
						// SugarCpp.g:360:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(360, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(360, 59);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(360, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(360, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:361:13: '.*' b= ident
					{
					DebugLocation(361, 13);
					string_literal189=(IToken)Match(input,75,Follow._75_in_selector_expr2221); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_75.Add(string_literal189);

					DebugLocation(361, 20);
					PushFollow(Follow._ident_in_selector_expr2226);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 75
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 361:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(361, 30);
						// SugarCpp.g:361:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(361, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(361, 44);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(361, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(361, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 52);
			LeaveRule("selector_expr", 52);
			LeaveRule_selector_expr();
			if (state.backtracking > 0) { Memoize(input, 52, selector_expr_StartIndex); }

		}
		DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:365:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 53);
		TraceIn("prefix_expr_op", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set190 = default(IToken);

		CommonTree set190_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(365, 64);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// SugarCpp.g:365:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(365, 15);

			set190=(IToken)input.LT(1);
			if (input.LA(1)==54||input.LA(1)==59||input.LA(1)==63||(input.LA(1)>=65 && input.LA(1)<=66)||(input.LA(1)>=69 && input.LA(1)<=70)||input.LA(1)==116)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set190));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 53);
			LeaveRule("prefix_expr_op", 53);
			LeaveRule_prefix_expr_op();
			if (state.backtracking > 0) { Memoize(input, 53, prefix_expr_op_StartIndex); }

		}
		DebugLocation(365, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:366:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 54);
		TraceIn("prefix_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal193 = default(IToken);
		IToken char_literal195 = default(IToken);
		IToken char_literal197 = default(IToken);
		IToken char_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr201 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal193_tree = default(CommonTree);
		CommonTree char_literal195_tree = default(CommonTree);
		CommonTree char_literal197_tree = default(CommonTree);
		CommonTree char_literal198_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(366, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// SugarCpp.g:367:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt66=3;
			try { DebugEnterDecision(66, false);
			switch (input.LA(1))
			{
			case 54:
			case 59:
			case 63:
			case 65:
			case 66:
			case 69:
			case 70:
			case 116:
				{
				alt66 = 1;
				}
				break;
			case 107:
				{
				alt66 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 61:
				{
				alt66 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:367:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(367, 4);
				// SugarCpp.g:367:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:367:5: prefix_expr_op prefix_expr
				{
				DebugLocation(367, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr2301);
				prefix_expr_op191=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op191.Tree);
				DebugLocation(367, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr2303);
				prefix_expr192=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr192.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 367:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(367, 36);
					// SugarCpp.g:367:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(367, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(367, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(367, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:368:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(368, 4);
				string_literal193=(IToken)Match(input,107,Follow._107_in_prefix_expr2319); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_107.Add(string_literal193);

				DebugLocation(368, 10);
				PushFollow(Follow._type_name_in_prefix_expr2321);
				type_name194=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name194.Tree);
				DebugLocation(368, 20);
				// SugarCpp.g:368:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==61))
				{
					alt65 = 1;
				}
				else if ((LA65_0==93))
				{
					alt65 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:368:22: '(' ( expr_list )? ')'
					{
					DebugLocation(368, 22);
					char_literal195=(IToken)Match(input,61,Follow._61_in_prefix_expr2325); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal195);

					DebugLocation(368, 26);
					// SugarCpp.g:368:26: ( expr_list )?
					int alt64=2;
					try { DebugEnterSubRule(64);
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==IDENT||LA64_0==NUMBER||LA64_0==STRING||LA64_0==54||LA64_0==59||LA64_0==61||LA64_0==63||(LA64_0>=65 && LA64_0<=66)||(LA64_0>=69 && LA64_0<=70)||LA64_0==107||LA64_0==116))
					{
						alt64 = 1;
					}
					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:368:26: expr_list
						{
						DebugLocation(368, 26);
						PushFollow(Follow._expr_list_in_prefix_expr2327);
						expr_list196=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list196.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(64); }

					DebugLocation(368, 37);
					char_literal197=(IToken)Match(input,62,Follow._62_in_prefix_expr2330); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal197);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 368:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(368, 44);
						// SugarCpp.g:368:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(368, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(368, 70);
						// SugarCpp.g:368:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(368, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:369:10: '[' expr_list ']'
					{
					DebugLocation(369, 10);
					char_literal198=(IToken)Match(input,93,Follow._93_in_prefix_expr2352); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal198);

					DebugLocation(369, 14);
					PushFollow(Follow._expr_list_in_prefix_expr2354);
					expr_list199=expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr_list.Add(expr_list199.Tree);
					DebugLocation(369, 24);
					char_literal200=(IToken)Match(input,94,Follow._94_in_prefix_expr2356); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal200);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 369:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(369, 31);
						// SugarCpp.g:369:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(369, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(369, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(65); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:370:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(370, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr2372);
				suffix_expr201=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr201.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 54);
			LeaveRule("prefix_expr", 54);
			LeaveRule_prefix_expr();
			if (state.backtracking > 0) { Memoize(input, 54, prefix_expr_StartIndex); }

		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:373:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 55);
		TraceIn("expr_list", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal203 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr204 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal203_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(373, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// SugarCpp.g:374:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:374:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(374, 4);
			PushFollow(Follow._expr_in_expr_list2384);
			expr202=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr202.Tree);
			DebugLocation(374, 9);
			// SugarCpp.g:374:9: ( ',' ! expr )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==68))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:374:10: ',' ! expr
					{
					DebugLocation(374, 13);
					char_literal203=(IToken)Match(input,68,Follow._68_in_expr_list2387); if (state.failed) return retval;
					DebugLocation(374, 15);
					PushFollow(Follow._expr_in_expr_list2390);
					expr204=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr204.Tree);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 55);
			LeaveRule("expr_list", 55);
			LeaveRule_expr_list();
			if (state.backtracking > 0) { Memoize(input, 55, expr_list_StartIndex); }

		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:377:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 56);
		TraceIn("suffix_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int suffix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal205 = default(IToken);
		IToken string_literal206 = default(IToken);
		IToken char_literal207 = default(IToken);
		IToken string_literal209 = default(IToken);
		IToken string_literal211 = default(IToken);
		IToken char_literal214 = default(IToken);
		IToken char_literal216 = default(IToken);
		IToken char_literal217 = default(IToken);
		IToken char_literal219 = default(IToken);
		IToken char_literal220 = default(IToken);
		IToken char_literal222 = default(IToken);
		IToken char_literal224 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list223 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal205_tree = default(CommonTree);
		CommonTree string_literal206_tree = default(CommonTree);
		CommonTree char_literal207_tree = default(CommonTree);
		CommonTree string_literal209_tree = default(CommonTree);
		CommonTree string_literal211_tree = default(CommonTree);
		CommonTree char_literal214_tree = default(CommonTree);
		CommonTree char_literal216_tree = default(CommonTree);
		CommonTree char_literal217_tree = default(CommonTree);
		CommonTree char_literal219_tree = default(CommonTree);
		CommonTree char_literal220_tree = default(CommonTree);
		CommonTree char_literal222_tree = default(CommonTree);
		CommonTree char_literal224_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(377, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// SugarCpp.g:378:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:378:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			{
			DebugLocation(378, 4);
			// SugarCpp.g:378:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:378:5: a= atom_expr
			{
			DebugLocation(378, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr2406);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 378:17: -> $a
			{
				DebugLocation(378, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(378, 24);
			// SugarCpp.g:378:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=9;
				try { DebugEnterDecision(72, false);
				switch (input.LA(1))
				{
				case 82:
					{
					int LA72_10 = input.LA(2);

					if ((EvaluatePredicate(synpred117_SugarCpp_fragment)))
					{
						alt72 = 6;
					}


					}
					break;
				case 93:
					{
					int LA72_26 = input.LA(2);

					if ((EvaluatePredicate(synpred119_SugarCpp_fragment)))
					{
						alt72 = 7;
					}


					}
					break;
				case 66:
					{
					alt72 = 1;
					}
					break;
				case 70:
					{
					alt72 = 2;
					}
					break;
				case 74:
					{
					alt72 = 3;
					}
					break;
				case 72:
					{
					alt72 = 4;
					}
					break;
				case 79:
					{
					alt72 = 5;
					}
					break;
				case 61:
					{
					alt72 = 6;
					}
					break;
				case 78:
					{
					alt72 = 8;
					}
					break;
				}

				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:378:26: '++'
					{
					DebugLocation(378, 26);
					string_literal205=(IToken)Match(input,66,Follow._66_in_suffix_expr2416); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_66.Add(string_literal205);



					{
					// AST REWRITE
					// elements: suffix_expr, 66
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 378:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(378, 34);
						// SugarCpp.g:378:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(378, 48);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(378, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:379:14: '--'
					{
					DebugLocation(379, 14);
					string_literal206=(IToken)Match(input,70,Follow._70_in_suffix_expr2442); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(string_literal206);



					{
					// AST REWRITE
					// elements: suffix_expr, 70
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 379:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(379, 22);
						// SugarCpp.g:379:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(379, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(379, 36);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(379, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:380:11: '.' ident
					{
					DebugLocation(380, 11);
					char_literal207=(IToken)Match(input,74,Follow._74_in_suffix_expr2465); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_74.Add(char_literal207);

					DebugLocation(380, 15);
					PushFollow(Follow._ident_in_suffix_expr2467);
					ident208=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident208.Tree);


					{
					// AST REWRITE
					// elements: ident, 74, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 380:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(380, 24);
						// SugarCpp.g:380:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(380, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(380, 38);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(380, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(380, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:381:11: '->' ident
					{
					DebugLocation(381, 11);
					string_literal209=(IToken)Match(input,72,Follow._72_in_suffix_expr2492); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(string_literal209);

					DebugLocation(381, 16);
					PushFollow(Follow._ident_in_suffix_expr2494);
					ident210=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident210.Tree);


					{
					// AST REWRITE
					// elements: 72, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 381:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(381, 25);
						// SugarCpp.g:381:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(381, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(381, 39);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(381, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(381, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:382:11: '::' ident
					{
					DebugLocation(382, 11);
					string_literal211=(IToken)Match(input,79,Follow._79_in_suffix_expr2519); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_79.Add(string_literal211);

					DebugLocation(382, 16);
					PushFollow(Follow._ident_in_suffix_expr2521);
					ident212=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident212.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 79
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 382:22: -> ^( Expr_Access '::' $suffix_expr ident )
					{
						DebugLocation(382, 25);
						// SugarCpp.g:382:25: ^( Expr_Access '::' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(382, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(382, 39);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(382, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(382, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:383:11: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(383, 11);
					// SugarCpp.g:383:11: ( generic_parameter )?
					int alt68=2;
					try { DebugEnterSubRule(68);
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==82))
					{
						alt68 = 1;
					}
					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:383:11: generic_parameter
						{
						DebugLocation(383, 11);
						PushFollow(Follow._generic_parameter_in_suffix_expr2546);
						generic_parameter213=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter213.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(68); }

					DebugLocation(383, 30);
					char_literal214=(IToken)Match(input,61,Follow._61_in_suffix_expr2549); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal214);

					DebugLocation(383, 34);
					// SugarCpp.g:383:34: ( expr_list )?
					int alt69=2;
					try { DebugEnterSubRule(69);
					try { DebugEnterDecision(69, false);
					int LA69_0 = input.LA(1);

					if ((LA69_0==IDENT||LA69_0==NUMBER||LA69_0==STRING||LA69_0==54||LA69_0==59||LA69_0==61||LA69_0==63||(LA69_0>=65 && LA69_0<=66)||(LA69_0>=69 && LA69_0<=70)||LA69_0==107||LA69_0==116))
					{
						alt69 = 1;
					}
					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:383:34: expr_list
						{
						DebugLocation(383, 34);
						PushFollow(Follow._expr_list_in_suffix_expr2551);
						expr_list215=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list215.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(69); }

					DebugLocation(383, 45);
					char_literal216=(IToken)Match(input,62,Follow._62_in_suffix_expr2554); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal216);



					{
					// AST REWRITE
					// elements: generic_parameter, suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 383:49: -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(383, 52);
						// SugarCpp.g:383:52: ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(383, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(383, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(383, 77);
						// SugarCpp.g:383:77: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(383, 77);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(383, 96);
						// SugarCpp.g:383:96: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(383, 96);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:384:11: '[' ( expr_list )? ']'
					{
					DebugLocation(384, 11);
					char_literal217=(IToken)Match(input,93,Follow._93_in_suffix_expr2581); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal217);

					DebugLocation(384, 15);
					// SugarCpp.g:384:15: ( expr_list )?
					int alt70=2;
					try { DebugEnterSubRule(70);
					try { DebugEnterDecision(70, false);
					int LA70_0 = input.LA(1);

					if ((LA70_0==IDENT||LA70_0==NUMBER||LA70_0==STRING||LA70_0==54||LA70_0==59||LA70_0==61||LA70_0==63||(LA70_0>=65 && LA70_0<=66)||(LA70_0>=69 && LA70_0<=70)||LA70_0==107||LA70_0==116))
					{
						alt70 = 1;
					}
					} finally { DebugExitDecision(70); }
					switch (alt70)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:384:15: expr_list
						{
						DebugLocation(384, 15);
						PushFollow(Follow._expr_list_in_suffix_expr2583);
						expr_list218=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list218.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(70); }

					DebugLocation(384, 26);
					char_literal219=(IToken)Match(input,94,Follow._94_in_suffix_expr2586); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal219);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 384:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(384, 33);
						// SugarCpp.g:384:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(384, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(384, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(384, 58);
						// SugarCpp.g:384:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(384, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// SugarCpp.g:385:11: ':' ident '(' ( expr_list )? ')'
					{
					DebugLocation(385, 11);
					char_literal220=(IToken)Match(input,78,Follow._78_in_suffix_expr2610); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_78.Add(char_literal220);

					DebugLocation(385, 15);
					PushFollow(Follow._ident_in_suffix_expr2612);
					ident221=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident221.Tree);
					DebugLocation(385, 21);
					char_literal222=(IToken)Match(input,61,Follow._61_in_suffix_expr2614); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal222);

					DebugLocation(385, 25);
					// SugarCpp.g:385:25: ( expr_list )?
					int alt71=2;
					try { DebugEnterSubRule(71);
					try { DebugEnterDecision(71, false);
					int LA71_0 = input.LA(1);

					if ((LA71_0==IDENT||LA71_0==NUMBER||LA71_0==STRING||LA71_0==54||LA71_0==59||LA71_0==61||LA71_0==63||(LA71_0>=65 && LA71_0<=66)||(LA71_0>=69 && LA71_0<=70)||LA71_0==107||LA71_0==116))
					{
						alt71 = 1;
					}
					} finally { DebugExitDecision(71); }
					switch (alt71)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:385:25: expr_list
						{
						DebugLocation(385, 25);
						PushFollow(Follow._expr_list_in_suffix_expr2616);
						expr_list223=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list223.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(71); }

					DebugLocation(385, 36);
					char_literal224=(IToken)Match(input,62,Follow._62_in_suffix_expr2619); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal224);



					{
					// AST REWRITE
					// elements: expr_list, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 385:40: -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
					{
						DebugLocation(385, 43);
						// SugarCpp.g:385:43: ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(385, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(385, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(385, 73);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(385, 79);
						// SugarCpp.g:385:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(385, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 56);
			LeaveRule("suffix_expr", 56);
			LeaveRule_suffix_expr();
			if (state.backtracking > 0) { Memoize(input, 56, suffix_expr_StartIndex); }

		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:389:1: atom_expr : ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 57);
		TraceIn("atom_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atom_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER225 = default(IToken);
		IToken STRING227 = default(IToken);
		IToken char_literal228 = default(IToken);
		IToken char_literal230 = default(IToken);
		IToken char_literal232 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr231 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER225_tree = default(CommonTree);
		CommonTree STRING227_tree = default(CommonTree);
		CommonTree char_literal228_tree = default(CommonTree);
		CommonTree char_literal230_tree = default(CommonTree);
		CommonTree char_literal232_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			bool more_than_one = false;

		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(389, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// SugarCpp.g:394:2: ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) )
			int alt74=4;
			try { DebugEnterDecision(74, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt74 = 1;
				}
				break;
			case IDENT:
				{
				alt74 = 2;
				}
				break;
			case STRING:
				{
				alt74 = 3;
				}
				break;
			case 61:
				{
				alt74 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:394:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(394, 4);
				NUMBER225=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr2663); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER225_tree = (CommonTree)adaptor.Create(NUMBER225);
				adaptor.AddChild(root_0, NUMBER225_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:395:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._ident_in_atom_expr2668);
				ident226=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident226.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:396:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(396, 4);
				STRING227=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr2673); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING227_tree = (CommonTree)adaptor.Create(STRING227);
				adaptor.AddChild(root_0, STRING227_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:397:4: '(' expr ( ',' expr )* ')'
				{
				DebugLocation(397, 4);
				char_literal228=(IToken)Match(input,61,Follow._61_in_atom_expr2678); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal228);

				DebugLocation(397, 8);
				PushFollow(Follow._expr_in_atom_expr2680);
				expr229=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr229.Tree);
				DebugLocation(397, 13);
				// SugarCpp.g:397:13: ( ',' expr )*
				try { DebugEnterSubRule(73);
				while (true)
				{
					int alt73=2;
					try { DebugEnterDecision(73, false);
					int LA73_0 = input.LA(1);

					if ((LA73_0==68))
					{
						alt73 = 1;
					}


					} finally { DebugExitDecision(73); }
					switch ( alt73 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:397:14: ',' expr
						{
						DebugLocation(397, 14);
						char_literal230=(IToken)Match(input,68,Follow._68_in_atom_expr2683); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_68.Add(char_literal230);

						DebugLocation(397, 18);
						PushFollow(Follow._expr_in_atom_expr2685);
						expr231=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr231.Tree);
						DebugLocation(397, 23);
						if (state.backtracking == 0)
						{
							 more_than_one = true; 
						}

						}
						break;

					default:
						goto loop73;
					}
				}

				loop73:
					;

				} finally { DebugExitSubRule(73); }

				DebugLocation(397, 52);
				char_literal232=(IToken)Match(input,62,Follow._62_in_atom_expr2692); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal232);



				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 398:3: -> { more_than_one }? ^( Expr_Tuple ( expr )+ )
				if ( more_than_one )
				{
					DebugLocation(398, 25);
					// SugarCpp.g:398:25: ^( Expr_Tuple ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(398, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

					DebugLocation(398, 38);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(398, 38);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 399:3: -> ^( Expr_Bracket expr )
				{
					DebugLocation(399, 6);
					// SugarCpp.g:399:6: ^( Expr_Bracket expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(399, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

					DebugLocation(399, 21);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 57);
			LeaveRule("atom_expr", 57);
			LeaveRule_atom_expr();
			if (state.backtracking > 0) { Memoize(input, 57, atom_expr_StartIndex); }

		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:402:1: lvalue : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* ;
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 58);
		TraceIn("lvalue", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal233 = default(IToken);
		IToken string_literal234 = default(IToken);
		IToken char_literal235 = default(IToken);
		IToken string_literal237 = default(IToken);
		IToken string_literal239 = default(IToken);
		IToken char_literal242 = default(IToken);
		IToken char_literal244 = default(IToken);
		IToken char_literal245 = default(IToken);
		IToken char_literal247 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident240 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter241 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list243 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list246 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree string_literal234_tree = default(CommonTree);
		CommonTree char_literal235_tree = default(CommonTree);
		CommonTree string_literal237_tree = default(CommonTree);
		CommonTree string_literal239_tree = default(CommonTree);
		CommonTree char_literal242_tree = default(CommonTree);
		CommonTree char_literal244_tree = default(CommonTree);
		CommonTree char_literal245_tree = default(CommonTree);
		CommonTree char_literal247_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(402, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// SugarCpp.g:403:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:403:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			{
			DebugLocation(403, 4);
			// SugarCpp.g:403:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:403:5: a= lvalue_atom
			{
			DebugLocation(403, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue2729);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 403:19: -> $a
			{
				DebugLocation(403, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(403, 26);
			// SugarCpp.g:403:26: ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=8;
				try { DebugEnterDecision(78, false);
				switch (input.LA(1))
				{
				case 66:
					{
					alt78 = 1;
					}
					break;
				case 70:
					{
					alt78 = 2;
					}
					break;
				case 74:
					{
					alt78 = 3;
					}
					break;
				case 72:
					{
					alt78 = 4;
					}
					break;
				case 79:
					{
					alt78 = 5;
					}
					break;
				case 61:
				case 82:
					{
					alt78 = 6;
					}
					break;
				case 93:
					{
					alt78 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:403:28: '++'
					{
					DebugLocation(403, 28);
					string_literal233=(IToken)Match(input,66,Follow._66_in_lvalue2739); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_66.Add(string_literal233);



					{
					// AST REWRITE
					// elements: lvalue, 66
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 403:33: -> ^( Expr_Suffix '++' $lvalue)
					{
						DebugLocation(403, 36);
						// SugarCpp.g:403:36: ^( Expr_Suffix '++' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(403, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(403, 50);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(403, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:404:16: '--'
					{
					DebugLocation(404, 16);
					string_literal234=(IToken)Match(input,70,Follow._70_in_lvalue2767); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(string_literal234);



					{
					// AST REWRITE
					// elements: lvalue, 70
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 404:21: -> ^( Expr_Suffix '--' $lvalue)
					{
						DebugLocation(404, 24);
						// SugarCpp.g:404:24: ^( Expr_Suffix '--' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(404, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(404, 38);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(404, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:405:13: '.' ident
					{
					DebugLocation(405, 13);
					char_literal235=(IToken)Match(input,74,Follow._74_in_lvalue2792); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_74.Add(char_literal235);

					DebugLocation(405, 17);
					PushFollow(Follow._ident_in_lvalue2794);
					ident236=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident236.Tree);


					{
					// AST REWRITE
					// elements: lvalue, 74, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 405:23: -> ^( Expr_Access '.' $lvalue ident )
					{
						DebugLocation(405, 26);
						// SugarCpp.g:405:26: ^( Expr_Access '.' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(405, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(405, 40);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(405, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(405, 52);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:406:13: '->' ident
					{
					DebugLocation(406, 13);
					string_literal237=(IToken)Match(input,72,Follow._72_in_lvalue2821); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(string_literal237);

					DebugLocation(406, 18);
					PushFollow(Follow._ident_in_lvalue2823);
					ident238=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident238.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue, 72
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 406:24: -> ^( Expr_Access '->' $lvalue ident )
					{
						DebugLocation(406, 27);
						// SugarCpp.g:406:27: ^( Expr_Access '->' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(406, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(406, 41);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(406, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(406, 54);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:407:13: '::' ident
					{
					DebugLocation(407, 13);
					string_literal239=(IToken)Match(input,79,Follow._79_in_lvalue2850); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_79.Add(string_literal239);

					DebugLocation(407, 18);
					PushFollow(Follow._ident_in_lvalue2852);
					ident240=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident240.Tree);


					{
					// AST REWRITE
					// elements: ident, 79, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 407:24: -> ^( Expr_Access '::' $lvalue ident )
					{
						DebugLocation(407, 27);
						// SugarCpp.g:407:27: ^( Expr_Access '::' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(407, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(407, 41);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(407, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(407, 54);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:408:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(408, 13);
					// SugarCpp.g:408:13: ( generic_parameter )?
					int alt75=2;
					try { DebugEnterSubRule(75);
					try { DebugEnterDecision(75, false);
					int LA75_0 = input.LA(1);

					if ((LA75_0==82))
					{
						alt75 = 1;
					}
					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:408:13: generic_parameter
						{
						DebugLocation(408, 13);
						PushFollow(Follow._generic_parameter_in_lvalue2879);
						generic_parameter241=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter241.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(75); }

					DebugLocation(408, 32);
					char_literal242=(IToken)Match(input,61,Follow._61_in_lvalue2882); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal242);

					DebugLocation(408, 36);
					// SugarCpp.g:408:36: ( expr_list )?
					int alt76=2;
					try { DebugEnterSubRule(76);
					try { DebugEnterDecision(76, false);
					int LA76_0 = input.LA(1);

					if ((LA76_0==IDENT||LA76_0==NUMBER||LA76_0==STRING||LA76_0==54||LA76_0==59||LA76_0==61||LA76_0==63||(LA76_0>=65 && LA76_0<=66)||(LA76_0>=69 && LA76_0<=70)||LA76_0==107||LA76_0==116))
					{
						alt76 = 1;
					}
					} finally { DebugExitDecision(76); }
					switch (alt76)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:408:36: expr_list
						{
						DebugLocation(408, 36);
						PushFollow(Follow._expr_list_in_lvalue2884);
						expr_list243=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list243.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(76); }

					DebugLocation(408, 47);
					char_literal244=(IToken)Match(input,62,Follow._62_in_lvalue2887); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal244);



					{
					// AST REWRITE
					// elements: expr_list, generic_parameter, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 408:51: -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(408, 54);
						// SugarCpp.g:408:54: ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(408, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(408, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(408, 74);
						// SugarCpp.g:408:74: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(408, 74);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(408, 93);
						// SugarCpp.g:408:93: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(408, 93);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:409:13: '[' ( expr_list )? ']'
					{
					DebugLocation(409, 13);
					char_literal245=(IToken)Match(input,93,Follow._93_in_lvalue2916); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal245);

					DebugLocation(409, 17);
					// SugarCpp.g:409:17: ( expr_list )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, false);
					int LA77_0 = input.LA(1);

					if ((LA77_0==IDENT||LA77_0==NUMBER||LA77_0==STRING||LA77_0==54||LA77_0==59||LA77_0==61||LA77_0==63||(LA77_0>=65 && LA77_0<=66)||(LA77_0>=69 && LA77_0<=70)||LA77_0==107||LA77_0==116))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:409:17: expr_list
						{
						DebugLocation(409, 17);
						PushFollow(Follow._expr_list_in_lvalue2918);
						expr_list246=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list246.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(409, 28);
					char_literal247=(IToken)Match(input,94,Follow._94_in_lvalue2921); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal247);



					{
					// AST REWRITE
					// elements: expr_list, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 409:32: -> ^( Expr_Dict $lvalue ( expr_list )? )
					{
						DebugLocation(409, 35);
						// SugarCpp.g:409:35: ^( Expr_Dict $lvalue ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(409, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(409, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(409, 55);
						// SugarCpp.g:409:55: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(409, 55);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 58);
			LeaveRule("lvalue", 58);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 58, lvalue_StartIndex); }

		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:413:1: lvalue_atom : ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 59);
		TraceIn("lvalue_atom", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_atom_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal248 = default(IToken);
		IToken char_literal250 = default(IToken);
		IToken char_literal252 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident253 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal248_tree = default(CommonTree);
		CommonTree char_literal250_tree = default(CommonTree);
		CommonTree char_literal252_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(413, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// SugarCpp.g:414:2: ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident )
			int alt81=2;
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==61))
			{
				alt81 = 1;
			}
			else if ((LA81_0==IDENT))
			{
				alt81 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:414:4: '(' ( lvalue ( ',' lvalue )* )? ')'
				{
				DebugLocation(414, 4);
				char_literal248=(IToken)Match(input,61,Follow._61_in_lvalue_atom2960); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal248);

				DebugLocation(414, 8);
				// SugarCpp.g:414:8: ( lvalue ( ',' lvalue )* )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==IDENT||LA80_0==61))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:9: lvalue ( ',' lvalue )*
					{
					DebugLocation(414, 9);
					PushFollow(Follow._lvalue_in_lvalue_atom2963);
					lvalue249=lvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lvalue.Add(lvalue249.Tree);
					DebugLocation(414, 16);
					// SugarCpp.g:414:16: ( ',' lvalue )*
					try { DebugEnterSubRule(79);
					while (true)
					{
						int alt79=2;
						try { DebugEnterDecision(79, false);
						int LA79_0 = input.LA(1);

						if ((LA79_0==68))
						{
							alt79 = 1;
						}


						} finally { DebugExitDecision(79); }
						switch ( alt79 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:414:17: ',' lvalue
							{
							DebugLocation(414, 17);
							char_literal250=(IToken)Match(input,68,Follow._68_in_lvalue_atom2966); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_68.Add(char_literal250);

							DebugLocation(414, 21);
							PushFollow(Follow._lvalue_in_lvalue_atom2968);
							lvalue251=lvalue();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_lvalue.Add(lvalue251.Tree);

							}
							break;

						default:
							goto loop79;
						}
					}

					loop79:
						;

					} finally { DebugExitSubRule(79); }


					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(414, 32);
				char_literal252=(IToken)Match(input,62,Follow._62_in_lvalue_atom2974); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal252);



				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 414:36: -> ^( Match_Tuple ( lvalue )* )
				{
					DebugLocation(414, 39);
					// SugarCpp.g:414:39: ^( Match_Tuple ( lvalue )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(414, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(414, 53);
					// SugarCpp.g:414:53: ( lvalue )*
					while ( stream_lvalue.HasNext )
					{
						DebugLocation(414, 53);
						adaptor.AddChild(root_1, stream_lvalue.NextTree());

					}
					stream_lvalue.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:415:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(415, 4);
				PushFollow(Follow._ident_in_lvalue_atom2988);
				ident253=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident253.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 59);
			LeaveRule("lvalue_atom", 59);
			LeaveRule_lvalue_atom();
			if (state.backtracking > 0) { Memoize(input, 59, lvalue_atom_StartIndex); }

		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:418:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 60);
		TraceIn("ident", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT254 = default(IToken);
		IToken string_literal255 = default(IToken);
		IToken IDENT256 = default(IToken);

		CommonTree IDENT254_tree = default(CommonTree);
		CommonTree string_literal255_tree = default(CommonTree);
		CommonTree IDENT256_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(418, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// SugarCpp.g:419:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:419:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(419, 4);
			IDENT254=(IToken)Match(input,IDENT,Follow._IDENT_in_ident2999); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT254_tree = (CommonTree)adaptor.Create(IDENT254);
			adaptor.AddChild(root_0, IDENT254_tree);
			}
			DebugLocation(419, 10);
			// SugarCpp.g:419:10: ( '::' IDENT )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==79))
				{
					int LA82_2 = input.LA(2);

					if ((LA82_2==IDENT))
					{
						int LA82_3 = input.LA(3);

						if ((EvaluatePredicate(synpred139_SugarCpp_fragment)))
						{
							alt82 = 1;
						}


					}


				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:419:11: '::' IDENT
					{
					DebugLocation(419, 11);
					string_literal255=(IToken)Match(input,79,Follow._79_in_ident3002); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal255_tree = (CommonTree)adaptor.Create(string_literal255);
					adaptor.AddChild(root_0, string_literal255_tree);
					}
					DebugLocation(419, 16);
					IDENT256=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3004); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT256_tree = (CommonTree)adaptor.Create(IDENT256);
					adaptor.AddChild(root_0, IDENT256_tree);
					}

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 60);
			LeaveRule("ident", 60);
			LeaveRule_ident();
			if (state.backtracking > 0) { Memoize(input, 60, ident_StartIndex); }

		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:422:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 61);
		TraceIn("infix_func", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_func_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal257 = default(IToken);
		IToken char_literal259 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident258 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal257_tree = default(CommonTree);
		CommonTree char_literal259_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(422, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// SugarCpp.g:423:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:423:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(423, 7);
			char_literal257=(IToken)Match(input,97,Follow._97_in_infix_func3017); if (state.failed) return retval;
			DebugLocation(423, 9);
			PushFollow(Follow._ident_in_infix_func3020);
			ident258=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident258.Tree);
			DebugLocation(423, 18);
			char_literal259=(IToken)Match(input,97,Follow._97_in_infix_func3022); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 61);
			LeaveRule("infix_func", 61);
			LeaveRule_infix_func();
			if (state.backtracking > 0) { Memoize(input, 61, infix_func_StartIndex); }

		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred28_SugarCpp_fragment();
	partial void LeaveRule_synpred28_SugarCpp_fragment();

	// $ANTLR start synpred28_SugarCpp
	public void synpred28_SugarCpp_fragment()
	{
		EnterRule_synpred28_SugarCpp_fragment();
		EnterRule("synpred28_SugarCpp_fragment", 89);
		TraceIn("synpred28_SugarCpp_fragment", 89);
		try
		{
			// SugarCpp.g:196:5: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:196:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
			{
			DebugLocation(196, 5);
			Match(input,93,Follow._93_in_synpred28_SugarCpp702); if (state.failed) return;
			DebugLocation(196, 9);
			PushFollow(Follow._attribute_item_in_synpred28_SugarCpp704);
			attribute_item();
			PopFollow();
			if (state.failed) return;
			DebugLocation(196, 24);
			// SugarCpp.g:196:24: ( ',' attribute_item )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==68))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:196:25: ',' attribute_item
					{
					DebugLocation(196, 25);
					Match(input,68,Follow._68_in_synpred28_SugarCpp707); if (state.failed) return;
					DebugLocation(196, 29);
					PushFollow(Follow._attribute_item_in_synpred28_SugarCpp709);
					attribute_item();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }

			DebugLocation(196, 46);
			Match(input,94,Follow._94_in_synpred28_SugarCpp713); if (state.failed) return;
			DebugLocation(196, 50);
			// SugarCpp.g:196:50: ( NEWLINE )+
			int cnt91=0;
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==NEWLINE))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:196:50: NEWLINE
					{
					DebugLocation(196, 50);
					Match(input,NEWLINE,Follow._NEWLINE_in_synpred28_SugarCpp715); if (state.failed) return;

					}
					break;

				default:
					if (cnt91 >= 1)
						goto loop91;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee91 = new EarlyExitException( 91, input );
					DebugRecognitionException(eee91);
					throw eee91;
				}
				cnt91++;
			}
			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

		}
		finally
		{
			TraceOut("synpred28_SugarCpp_fragment", 89);
			LeaveRule("synpred28_SugarCpp_fragment", 89);
			LeaveRule_synpred28_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred28_SugarCpp

	partial void EnterRule_synpred29_SugarCpp_fragment();
	partial void LeaveRule_synpred29_SugarCpp_fragment();

	// $ANTLR start synpred29_SugarCpp
	public void synpred29_SugarCpp_fragment()
	{
		EnterRule_synpred29_SugarCpp_fragment();
		EnterRule("synpred29_SugarCpp_fragment", 90);
		TraceIn("synpred29_SugarCpp_fragment", 90);
		try
		{
			// SugarCpp.g:200:4: ( attribute )
			DebugEnterAlt(1);
			// SugarCpp.g:200:4: attribute
			{
			DebugLocation(200, 4);
			PushFollow(Follow._attribute_in_synpred29_SugarCpp734);
			attribute();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred29_SugarCpp_fragment", 90);
			LeaveRule("synpred29_SugarCpp_fragment", 90);
			LeaveRule_synpred29_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred29_SugarCpp

	partial void EnterRule_synpred50_SugarCpp_fragment();
	partial void LeaveRule_synpred50_SugarCpp_fragment();

	// $ANTLR start synpred50_SugarCpp
	public void synpred50_SugarCpp_fragment()
	{
		EnterRule_synpred50_SugarCpp_fragment();
		EnterRule("synpred50_SugarCpp_fragment", 111);
		TraceIn("synpred50_SugarCpp_fragment", 111);
		try
		{
			// SugarCpp.g:233:4: ( stmt_alloc )
			DebugEnterAlt(1);
			// SugarCpp.g:233:4: stmt_alloc
			{
			DebugLocation(233, 4);
			PushFollow(Follow._stmt_alloc_in_synpred50_SugarCpp976);
			stmt_alloc();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred50_SugarCpp_fragment", 111);
			LeaveRule("synpred50_SugarCpp_fragment", 111);
			LeaveRule_synpred50_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred50_SugarCpp

	partial void EnterRule_synpred55_SugarCpp_fragment();
	partial void LeaveRule_synpred55_SugarCpp_fragment();

	// $ANTLR start synpred55_SugarCpp
	public void synpred55_SugarCpp_fragment()
	{
		EnterRule_synpred55_SugarCpp_fragment();
		EnterRule("synpred55_SugarCpp_fragment", 116);
		TraceIn("synpred55_SugarCpp_fragment", 116);
		try
		{
			// SugarCpp.g:246:12: ( stmt_using_item )
			DebugEnterAlt(1);
			// SugarCpp.g:246:12: stmt_using_item
			{
			DebugLocation(246, 12);
			PushFollow(Follow._stmt_using_item_in_synpred55_SugarCpp1046);
			stmt_using_item();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred55_SugarCpp_fragment", 116);
			LeaveRule("synpred55_SugarCpp_fragment", 116);
			LeaveRule_synpred55_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred55_SugarCpp

	partial void EnterRule_synpred63_SugarCpp_fragment();
	partial void LeaveRule_synpred63_SugarCpp_fragment();

	// $ANTLR start synpred63_SugarCpp
	public void synpred63_SugarCpp_fragment()
	{
		EnterRule_synpred63_SugarCpp_fragment();
		EnterRule("synpred63_SugarCpp_fragment", 124);
		TraceIn("synpred63_SugarCpp_fragment", 124);
		try
		{
			// SugarCpp.g:293:4: ( '(' func_args ')' '=>' modify_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:293:4: '(' func_args ')' '=>' modify_expr
			{
			DebugLocation(293, 4);
			Match(input,61,Follow._61_in_synpred63_SugarCpp1373); if (state.failed) return;
			DebugLocation(293, 8);
			PushFollow(Follow._func_args_in_synpred63_SugarCpp1375);
			func_args();
			PopFollow();
			if (state.failed) return;
			DebugLocation(293, 18);
			Match(input,62,Follow._62_in_synpred63_SugarCpp1377); if (state.failed) return;
			DebugLocation(293, 22);
			Match(input,88,Follow._88_in_synpred63_SugarCpp1379); if (state.failed) return;
			DebugLocation(293, 27);
			PushFollow(Follow._modify_expr_in_synpred63_SugarCpp1381);
			modify_expr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred63_SugarCpp_fragment", 124);
			LeaveRule("synpred63_SugarCpp_fragment", 124);
			LeaveRule_synpred63_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred63_SugarCpp

	partial void EnterRule_synpred117_SugarCpp_fragment();
	partial void LeaveRule_synpred117_SugarCpp_fragment();

	// $ANTLR start synpred117_SugarCpp
	public void synpred117_SugarCpp_fragment()
	{
		EnterRule_synpred117_SugarCpp_fragment();
		EnterRule("synpred117_SugarCpp_fragment", 178);
		TraceIn("synpred117_SugarCpp_fragment", 178);
		try
		{
			// SugarCpp.g:383:11: ( ( generic_parameter )? '(' ( expr_list )? ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:383:11: ( generic_parameter )? '(' ( expr_list )? ')'
			{
			DebugLocation(383, 11);
			// SugarCpp.g:383:11: ( generic_parameter )?
			int alt100=2;
			try { DebugEnterSubRule(100);
			try { DebugEnterDecision(100, false);
			int LA100_0 = input.LA(1);

			if ((LA100_0==82))
			{
				alt100 = 1;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:383:11: generic_parameter
				{
				DebugLocation(383, 11);
				PushFollow(Follow._generic_parameter_in_synpred117_SugarCpp2546);
				generic_parameter();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(100); }

			DebugLocation(383, 30);
			Match(input,61,Follow._61_in_synpred117_SugarCpp2549); if (state.failed) return;
			DebugLocation(383, 34);
			// SugarCpp.g:383:34: ( expr_list )?
			int alt101=2;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, false);
			int LA101_0 = input.LA(1);

			if ((LA101_0==IDENT||LA101_0==NUMBER||LA101_0==STRING||LA101_0==54||LA101_0==59||LA101_0==61||LA101_0==63||(LA101_0>=65 && LA101_0<=66)||(LA101_0>=69 && LA101_0<=70)||LA101_0==107||LA101_0==116))
			{
				alt101 = 1;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:383:34: expr_list
				{
				DebugLocation(383, 34);
				PushFollow(Follow._expr_list_in_synpred117_SugarCpp2551);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(101); }

			DebugLocation(383, 45);
			Match(input,62,Follow._62_in_synpred117_SugarCpp2554); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred117_SugarCpp_fragment", 178);
			LeaveRule("synpred117_SugarCpp_fragment", 178);
			LeaveRule_synpred117_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred117_SugarCpp

	partial void EnterRule_synpred119_SugarCpp_fragment();
	partial void LeaveRule_synpred119_SugarCpp_fragment();

	// $ANTLR start synpred119_SugarCpp
	public void synpred119_SugarCpp_fragment()
	{
		EnterRule_synpred119_SugarCpp_fragment();
		EnterRule("synpred119_SugarCpp_fragment", 180);
		TraceIn("synpred119_SugarCpp_fragment", 180);
		try
		{
			// SugarCpp.g:384:11: ( '[' ( expr_list )? ']' )
			DebugEnterAlt(1);
			// SugarCpp.g:384:11: '[' ( expr_list )? ']'
			{
			DebugLocation(384, 11);
			Match(input,93,Follow._93_in_synpred119_SugarCpp2581); if (state.failed) return;
			DebugLocation(384, 15);
			// SugarCpp.g:384:15: ( expr_list )?
			int alt102=2;
			try { DebugEnterSubRule(102);
			try { DebugEnterDecision(102, false);
			int LA102_0 = input.LA(1);

			if ((LA102_0==IDENT||LA102_0==NUMBER||LA102_0==STRING||LA102_0==54||LA102_0==59||LA102_0==61||LA102_0==63||(LA102_0>=65 && LA102_0<=66)||(LA102_0>=69 && LA102_0<=70)||LA102_0==107||LA102_0==116))
			{
				alt102 = 1;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:384:15: expr_list
				{
				DebugLocation(384, 15);
				PushFollow(Follow._expr_list_in_synpred119_SugarCpp2583);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(102); }

			DebugLocation(384, 26);
			Match(input,94,Follow._94_in_synpred119_SugarCpp2586); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred119_SugarCpp_fragment", 180);
			LeaveRule("synpred119_SugarCpp_fragment", 180);
			LeaveRule_synpred119_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred119_SugarCpp

	partial void EnterRule_synpred139_SugarCpp_fragment();
	partial void LeaveRule_synpred139_SugarCpp_fragment();

	// $ANTLR start synpred139_SugarCpp
	public void synpred139_SugarCpp_fragment()
	{
		EnterRule_synpred139_SugarCpp_fragment();
		EnterRule("synpred139_SugarCpp_fragment", 200);
		TraceIn("synpred139_SugarCpp_fragment", 200);
		try
		{
			// SugarCpp.g:419:11: ( '::' IDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:419:11: '::' IDENT
			{
			DebugLocation(419, 11);
			Match(input,79,Follow._79_in_synpred139_SugarCpp3002); if (state.failed) return;
			DebugLocation(419, 16);
			Match(input,IDENT,Follow._IDENT_in_synpred139_SugarCpp3004); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred139_SugarCpp_fragment", 200);
			LeaveRule("synpred139_SugarCpp_fragment", 200);
			LeaveRule_synpred139_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred139_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA3 dfa3;
	private DFA4 dfa4;
	private DFA7 dfa7;
	private DFA15 dfa15;
	private DFA22 dfa22;
	private DFA30 dfa30;
	private DFA36 dfa36;
	private DFA41 dfa41;
	private DFA47 dfa47;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa4 = new DFA4( this );
		dfa7 = new DFA7( this );
		dfa15 = new DFA15( this );
		dfa22 = new DFA22( this, SpecialStateTransition22 );
		dfa30 = new DFA30( this );
		dfa36 = new DFA36( this );
		dfa41 = new DFA41( this, SpecialStateTransition41 );
		dfa47 = new DFA47( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA3_maxS =
			"\x2\x74\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x38\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3\x4\xFFFF"+
				"\x1\x3",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x38\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3\x4\xFFFF"+
				"\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()+ loopback of 151:4: ( ( NEWLINE )* node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\xC\xFFFF";
		private const string DFA4_eofS =
			"\xC\xFFFF";
		private const string DFA4_minS =
			"\x2\x1D\x7\xFFFF\x1\x1D\x1\xFFFF\x1\x1D";
		private const string DFA4_maxS =
			"\x2\x74\x7\xFFFF\x1\x1D\x1\xFFFF\x1\x74";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x7\x1\x8\x1\xFFFF\x1\x6\x1"+
			"\xFFFF";
		private const string DFA4_specialS =
			"\xC\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x1\x3F\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x4\x2\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x6\x3\xFFFF\x1\x8\x1\x7\x4\xFFFF\x1\x2",
				"\x1\x2\x1D\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xA"+
				"\x9\xFFFF\x1\xA\x1\x9\x1\xA\x1\xFFFF\x1\x2\xA\xFFFF\x1\x2\x16\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xB",
				"",
				"\x1\x2\x1D\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xA"+
				"\x9\xFFFF\x1\xA\x1\x9\x1\xA\x1\xFFFF\x1\x2\xA\xFFFF\x1\x2\x16\xFFFF"+
				"\x1\x2"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "154:1: node : ( func_def | import_def | enum_def | class_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x4\xFFFF";
		private const string DFA7_eofS =
			"\x4\xFFFF";
		private const string DFA7_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA7_maxS =
			"\x1\x24\x1\x2A\x2\xFFFF";
		private const string DFA7_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA7_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x1B\xFFFF\x1\x1\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "()* loopback of 166:29: ( ( NEWLINE )+ STRING )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA15 : DFA
	{
		private const string DFA15_eotS =
			"\x4\xFFFF";
		private const string DFA15_eofS =
			"\x4\xFFFF";
		private const string DFA15_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA15_maxS =
			"\x2\x74\x2\xFFFF";
		private const string DFA15_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA15_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA15_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x38\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3\x4\xFFFF"+
				"\x1\x3",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x38\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3\x4\xFFFF"+
				"\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
		private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
		private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
		private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
		private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
		private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
		private static readonly short[][] DFA15_transition;

		static DFA15()
		{
			int numStates = DFA15_transitionS.Length;
			DFA15_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
			}
		}

		public DFA15( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 15;
			this.eot = DFA15_eot;
			this.eof = DFA15_eof;
			this.min = DFA15_min;
			this.max = DFA15_max;
			this.accept = DFA15_accept;
			this.special = DFA15_special;
			this.transition = DFA15_transition;
		}

		public override string Description { get { return "()+ loopback of 182:4: ( ( NEWLINE )* class_node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x27\xFFFF";
		private const string DFA22_eofS =
			"\x27\xFFFF";
		private const string DFA22_minS =
			"\x2\x1D\x1\xFFFF\x1\x3D\x3\x1D\x1\x24\x1\x3D\x3\x3E\x1\x3D\x1\x0\x1\x1D"+
			"\x1\x44\x3\x1D\x1\xFFFF\x4\x3E\x1\x3D\x3\x3E\x2\x1D\x1\x44\x1\x1D\x5"+
			"\x3E\x1\x1D\x1\x3E";
		private const string DFA22_maxS =
			"\x1\x74\x1\x1D\x1\xFFFF\x1\x5E\x1\x1D\x1\x2A\x1\x1D\x1\x24\x1\x5E\x2"+
			"\x44\x1\x4F\x1\x5E\x1\x0\x1\x2A\x1\x5E\x2\x1D\x1\x2A\x1\xFFFF\x2\x44"+
			"\x2\x4F\x1\x5E\x2\x44\x1\x4F\x1\x1D\x1\x2A\x1\x5E\x1\x1D\x1\x4F\x2\x44"+
			"\x2\x4F\x1\x1D\x1\x4F";
		private const string DFA22_acceptS =
			"\x2\xFFFF\x1\x2\x10\xFFFF\x1\x1\x13\xFFFF";
		private const string DFA22_specialS =
			"\xD\xFFFF\x1\x0\x19\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x1\x2\x3F\xFFFF\x1\x1\x5\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x3\xFFFF\x2\x2\x4\xFFFF\x1\x2",
				"\x1\x3",
				"",
				"\x1\x5\x6\xFFFF\x1\x6\xA\xFFFF\x1\x4\xE\xFFFF\x1\x7",
				"\x1\x8",
				"\x1\xB\x7\xFFFF\x1\x9\x4\xFFFF\x1\xA",
				"\x1\xC",
				"\x1\xD",
				"\x1\x5\x6\xFFFF\x1\x6\xA\xFFFF\x1\x4\xE\xFFFF\x1\x7",
				"\x1\xF\x5\xFFFF\x1\xE",
				"\x1\xF\x5\xFFFF\x1\xE",
				"\x1\xF\x5\xFFFF\x1\xE\xA\xFFFF\x1\x10",
				"\x1\x12\x6\xFFFF\x1\x6\xA\xFFFF\x1\x11\xE\xFFFF\x1\x7",
				"\x1\xFFFF",
				"\x1\x16\x7\xFFFF\x1\x14\x4\xFFFF\x1\x15",
				"\x1\x6\x19\xFFFF\x1\x7",
				"\x1\x17",
				"\x1\x18",
				"\x1\x1B\x7\xFFFF\x1\x19\x4\xFFFF\x1\x1A",
				"",
				"\x1\xF\x5\xFFFF\x1\xE",
				"\x1\xF\x5\xFFFF\x1\xE",
				"\x1\xF\x5\xFFFF\x1\xE\xA\xFFFF\x1\x1C",
				"\x1\xF\x5\xFFFF\x1\xE\xA\xFFFF\x1\x10",
				"\x1\x12\x6\xFFFF\x1\x6\xA\xFFFF\x1\x11\xE\xFFFF\x1\x7",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x1F",
				"\x1\x20",
				"\x1\x23\x7\xFFFF\x1\x21\x4\xFFFF\x1\x22",
				"\x1\x6\x19\xFFFF\x1\x7",
				"\x1\x24",
				"\x1\xF\x5\xFFFF\x1\xE\xA\xFFFF\x1\x1C",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x25",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x1F",
				"\x1\x26",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x25"
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "200:4: ( attribute )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition22(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA22_13 = input.LA(1);


				int index22_13 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred29_SugarCpp_fragment))) {s = 19;}

				else if ((true)) {s = 2;}


				input.Seek(index22_13);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 22, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA30 : DFA
	{
		private const string DFA30_eotS =
			"\xF\xFFFF";
		private const string DFA30_eofS =
			"\xF\xFFFF";
		private const string DFA30_minS =
			"\x2\x1D\x1\xFFFF\x2\x1D\x1\xFFFF\x1\x1D\x1\x3B\x3\x1D\x2\x3B\x1\x1D\x1"+
			"\x3B";
		private const string DFA30_maxS =
			"\x2\x74\x1\xFFFF\x1\x1D\x1\x59\x1\xFFFF\x1\x74\x1\x5D\x2\x1D\x1\x74\x2"+
			"\x5D\x1\x1D\x1\x5D";
		private const string DFA30_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x1\x9\xFFFF";
		private const string DFA30_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA30_transitionS =
			{
				"\x1\x1\x56\xFFFF\x1\x2",
				"\x1\x5\x1D\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\xF\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x4\xA\xFFFF\x1\x5\x16\xFFFF\x1\x5",
				"",
				"\x1\x6",
				"\x1\x7\x3B\xFFFF\x1\x5",
				"",
				"\x1\x5\x1D\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\xF\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x4\xA\xFFFF\x1\x5\x16\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\xB",
				"\x1\xC",
				"\x1\x5\x1D\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\x1D\xFFFF\x1\x5"+
				"\x16\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\xE",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5"
			};

		private static readonly short[] DFA30_eot = DFA.UnpackEncodedString(DFA30_eotS);
		private static readonly short[] DFA30_eof = DFA.UnpackEncodedString(DFA30_eofS);
		private static readonly char[] DFA30_min = DFA.UnpackEncodedStringToUnsignedChars(DFA30_minS);
		private static readonly char[] DFA30_max = DFA.UnpackEncodedStringToUnsignedChars(DFA30_maxS);
		private static readonly short[] DFA30_accept = DFA.UnpackEncodedString(DFA30_acceptS);
		private static readonly short[] DFA30_special = DFA.UnpackEncodedString(DFA30_specialS);
		private static readonly short[][] DFA30_transition;

		static DFA30()
		{
			int numStates = DFA30_transitionS.Length;
			DFA30_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA30_transition[i] = DFA.UnpackEncodedString(DFA30_transitionS[i]);
			}
		}

		public DFA30( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}

		public override string Description { get { return "217:4: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x4\xFFFF";
		private const string DFA36_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x24\x1\x70\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x18\xFFFF\x1\x3\x28\xFFFF\x2"+
				"\x3\x4\xFFFF\x5\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "()* loopback of 221:11: ( ( NEWLINE )+ stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA41 : DFA
	{
		private const string DFA41_eotS =
			"\x8\xFFFF";
		private const string DFA41_eofS =
			"\x1\x1\x2\xFFFF\x1\x4\x1\xFFFF\x1\x4\x1\xFFFF\x1\x4";
		private const string DFA41_minS =
			"\x1\x8\x1\xFFFF\x1\x0\x1\x8\x1\xFFFF\x1\x8\x1\x1D\x1\x8";
		private const string DFA41_maxS =
			"\x1\x74\x1\xFFFF\x1\x0\x1\x74\x1\xFFFF\x1\x74\x1\x1D\x1\x74";
		private const string DFA41_acceptS =
			"\x1\xFFFF\x1\x2\x2\xFFFF\x1\x1\x3\xFFFF";
		private const string DFA41_specialS =
			"\x2\xFFFF\x1\x0\x5\xFFFF}>";
		private static readonly string[] DFA41_transitionS =
			{
				"\x1\x1\x14\xFFFF\x1\x2\x6\xFFFF\x1\x1\x38\xFFFF\x1\x1\x5\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x3\x3\xFFFF\x2\x1\x4\xFFFF"+
				"\x1\x1",
				"",
				"\x1\xFFFF",
				"\x1\x4\x14\xFFFF\x1\x5\x6\xFFFF\x1\x4\x38\xFFFF\x1\x4\x5\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x4\x2\xFFFF\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x2\x4\x4\xFFFF"+
				"\x1\x4",
				"",
				"\x1\x4\x14\xFFFF\x1\x4\x1\x1\x5\xFFFF\x1\x4\x16\xFFFF\x1\x4\x1\xFFFF"+
				"\x1\x4\x1\xFFFF\x1\x4\x4\xFFFF\x1\x4\x9\xFFFF\x1\x4\x1\x6\x1\x4\x1\xFFFF"+
				"\x1\x4\xA\xFFFF\x1\x4\x5\xFFFF\x1\x4\x1\xFFFF\x1\x4\x2\xFFFF\x1\x4\x1"+
				"\xFFFF\x1\x4\x3\xFFFF\x2\x4\x4\xFFFF\x1\x4",
				"\x1\x7",
				"\x1\x4\x14\xFFFF\x1\x4\x1\x1\x5\xFFFF\x1\x4\x16\xFFFF\x1\x4\x1\xFFFF"+
				"\x1\x4\x1\xFFFF\x1\x4\x4\xFFFF\x1\x4\x9\xFFFF\x1\x4\x1\x6\x1\x4\x1\xFFFF"+
				"\x1\x4\xA\xFFFF\x1\x4\x5\xFFFF\x1\x4\x1\xFFFF\x1\x4\x2\xFFFF\x1\x4\x1"+
				"\xFFFF\x1\x4\x3\xFFFF\x2\x4\x4\xFFFF\x1\x4"
			};

		private static readonly short[] DFA41_eot = DFA.UnpackEncodedString(DFA41_eotS);
		private static readonly short[] DFA41_eof = DFA.UnpackEncodedString(DFA41_eofS);
		private static readonly char[] DFA41_min = DFA.UnpackEncodedStringToUnsignedChars(DFA41_minS);
		private static readonly char[] DFA41_max = DFA.UnpackEncodedStringToUnsignedChars(DFA41_maxS);
		private static readonly short[] DFA41_accept = DFA.UnpackEncodedString(DFA41_acceptS);
		private static readonly short[] DFA41_special = DFA.UnpackEncodedString(DFA41_specialS);
		private static readonly short[][] DFA41_transition;

		static DFA41()
		{
			int numStates = DFA41_transitionS.Length;
			DFA41_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA41_transition[i] = DFA.UnpackEncodedString(DFA41_transitionS[i]);
			}
		}

		public DFA41( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 41;
			this.eot = DFA41_eot;
			this.eof = DFA41_eof;
			this.min = DFA41_min;
			this.max = DFA41_max;
			this.accept = DFA41_accept;
			this.special = DFA41_special;
			this.transition = DFA41_transition;
		}

		public override string Description { get { return "()* loopback of 246:12: ( stmt_using_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition41(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA41_2 = input.LA(1);


				int index41_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred55_SugarCpp_fragment))) {s = 4;}

				else if ((true)) {s = 1;}


				input.Seek(index41_2);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 41, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA47 : DFA
	{
		private const string DFA47_eotS =
			"\x6\xFFFF";
		private const string DFA47_eofS =
			"\x6\xFFFF";
		private const string DFA47_minS =
			"\x1\x1D\x1\x44\x1\x1D\x2\xFFFF\x1\x44";
		private const string DFA47_maxS =
			"\x1\x1D\x1\x50\x1\x1D\x2\xFFFF\x1\x50";
		private const string DFA47_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA47_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA47_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x9\xFFFF\x1\x3\x1\x2\x1\x4",
				"\x1\x5",
				"",
				"",
				"\x1\x3\x9\xFFFF\x1\x3\x1\x2\x1\x4"
			};

		private static readonly short[] DFA47_eot = DFA.UnpackEncodedString(DFA47_eotS);
		private static readonly short[] DFA47_eof = DFA.UnpackEncodedString(DFA47_eofS);
		private static readonly char[] DFA47_min = DFA.UnpackEncodedStringToUnsignedChars(DFA47_minS);
		private static readonly char[] DFA47_max = DFA.UnpackEncodedStringToUnsignedChars(DFA47_maxS);
		private static readonly short[] DFA47_accept = DFA.UnpackEncodedString(DFA47_acceptS);
		private static readonly short[] DFA47_special = DFA.UnpackEncodedString(DFA47_specialS);
		private static readonly short[][] DFA47_transition;

		static DFA47()
		{
			int numStates = DFA47_transitionS.Length;
			DFA47_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA47_transition[i] = DFA.UnpackEncodedString(DFA47_transitionS[i]);
			}
		}

		public DFA47( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 47;
			this.eot = DFA47_eot;
			this.eof = DFA47_eof;
			this.min = DFA47_min;
			this.max = DFA47_max;
			this.accept = DFA47_accept;
			this.special = DFA47_special;
			this.transition = DFA47_transition;
		}

		public override string Description { get { return "279:1: stmt_alloc : ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) | ident ':=' ^ modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _overall_block_in_root400 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_root403 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _EOF_in_root406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_overall_block418 = new BitSet(new ulong[]{0x1020000000UL,0x10C52820000000UL});
		public static readonly BitSet _node_in_overall_block421 = new BitSet(new ulong[]{0x1020000002UL,0x10C52820000000UL});
		public static readonly BitSet _func_def_in_node434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_node459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_node464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_node469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_import_def480 = new BitSet(new ulong[]{0x40040000002UL});
		public static readonly BitSet _STRING_in_import_def482 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _INDENT_in_import_def486 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def489 = new BitSet(new ulong[]{0x41000000000UL});
		public static readonly BitSet _STRING_in_import_def492 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def496 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _DEDENT_in_import_def499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_enum_def521 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_enum_def523 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_enum_def525 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_enum_def527 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_enum_def530 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_enum_def532 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _106_in_namespace_def554 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_namespace_def556 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _INDENT_in_namespace_def558 = new BitSet(new ulong[]{0x1020000000UL,0x10C52820000000UL});
		public static readonly BitSet _overall_block_in_namespace_def560 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_namespace_def562 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _DEDENT_in_namespace_def565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def586 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_class_def589 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_class_def591 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _INDENT_in_class_def593 = new BitSet(new ulong[]{0x1020000000UL,0x10C52820000000UL});
		public static readonly BitSet _class_block_in_class_def595 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_class_def597 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _DEDENT_in_class_def600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_class_block625 = new BitSet(new ulong[]{0x1020000000UL,0x10C52820000000UL});
		public static readonly BitSet _class_node_in_class_block628 = new BitSet(new ulong[]{0x1020000002UL,0x10C52820000000UL});
		public static readonly BitSet _NUMBER_in_attribute_args642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item663 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_attribute_item666 = new BitSet(new ulong[]{0x42020000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item668 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _68_in_attribute_item671 = new BitSet(new ulong[]{0x42020000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item673 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _62_in_attribute_item677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_attribute702 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _attribute_item_in_attribute704 = new BitSet(new ulong[]{0x0UL,0x40000010UL});
		public static readonly BitSet _68_in_attribute707 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _attribute_item_in_attribute709 = new BitSet(new ulong[]{0x0UL,0x40000010UL});
		public static readonly BitSet _94_in_attribute713 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute715 = new BitSet(new ulong[]{0x1000000002UL,0x20000000UL});
		public static readonly BitSet _attribute_in_class_node734 = new BitSet(new ulong[]{0x20000000UL,0x10C52820000000UL});
		public static readonly BitSet _node_in_class_node737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_type_name_op746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name_op750 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_type_name_op752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_type_name_op756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_type_name765 = new BitSet(new ulong[]{0x8800000000000002UL,0x20040000UL});
		public static readonly BitSet _82_in_type_name768 = new BitSet(new ulong[]{0x20000000UL,0x2000000UL});
		public static readonly BitSet _type_name_in_type_name771 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _68_in_type_name774 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _type_name_in_type_name776 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _89_in_type_name782 = new BitSet(new ulong[]{0x8800000000000002UL,0x20000000UL});
		public static readonly BitSet _type_name_op_in_type_name786 = new BitSet(new ulong[]{0x8800000000000002UL,0x20000000UL});
		public static readonly BitSet _82_in_generic_parameter820 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_generic_parameter822 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _68_in_generic_parameter825 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_generic_parameter828 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _89_in_generic_parameter832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_func_args843 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _68_in_func_args846 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args848 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _type_name_in_func_def870 = new BitSet(new ulong[]{0x20000000UL,0x10000000000000UL});
		public static readonly BitSet _116_in_func_def873 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_func_def876 = new BitSet(new ulong[]{0x2000000000000000UL,0x40000UL});
		public static readonly BitSet _generic_parameter_in_func_def878 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_func_def881 = new BitSet(new ulong[]{0x4000000020000000UL});
		public static readonly BitSet _func_args_in_func_def883 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_func_def886 = new BitSet(new ulong[]{0x40000000UL,0x400000UL});
		public static readonly BitSet _stmt_block_in_func_def890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_func_def894 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_func_def896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block912 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_block915 = new BitSet(new ulong[]{0x2000001020000000UL,0x1F0C000000000UL});
		public static readonly BitSet _stmt_in_stmt_block918 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_block922 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_block925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_stmt_typedef1007 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1009 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_stmt_typedef1011 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_stmt_using_item1036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_stmt_using1044 = new BitSet(new ulong[]{0x20000002UL,0x40000000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1046 = new BitSet(new ulong[]{0x20000002UL,0x40000000000UL});
		public static readonly BitSet _108_in_stmt_return1067 = new BitSet(new ulong[]{0xA840042020000002UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_return1069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_stmt_if1090 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_if1092 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_if1094 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_stmt_if1096 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1098 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_stmt_if1101 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_while1129 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_while1131 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_while1133 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_stmt_while1135 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_stmt_for1163 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_for1165 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_for1167 = new BitSet(new ulong[]{0x0UL,0x20000020000UL});
		public static readonly BitSet _81_in_stmt_for1170 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_for1172 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_stmt_for1174 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_for1176 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _105_in_stmt_for1182 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_for1184 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_stmt_for1189 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_stmt_try1236 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1238 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_try1240 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_try1242 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_try1244 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_stmt_try1246 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list1271 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _68_in_ident_list1274 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_ident_list1276 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _ident_list_in_stmt_alloc1298 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_stmt_alloc1300 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _type_name_in_stmt_alloc1302 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_stmt_alloc1305 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_alloc1307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_alloc1327 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_alloc1329 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc1332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify1343 = new BitSet(new ulong[]{0x1200000000000002UL,0x4000110512089UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify1346 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _cond_expr_in_stmt_modify1349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1362 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_lambda_expr1373 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _func_args_in_lambda_expr1375 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_lambda_expr1377 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_lambda_expr1379 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr1458 = new BitSet(new ulong[]{0x1200000000000002UL,0x4000110512089UL});
		public static readonly BitSet _modify_expr_op_in_modify_expr1461 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _modify_expr_in_modify_expr1464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item1475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr1487 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_cond_expr1496 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1500 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_cond_expr1502 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr1537 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _115_in_or_expr1546 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _and_expr_in_or_expr1550 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _bit_or_in_and_expr1580 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_and_expr1589 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _bit_or_in_and_expr1593 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _bit_xor_in_bit_or1623 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_bit_or1632 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _bit_xor_in_bit_or1636 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor1666 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_bit_xor1675 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _bit_and_in_bit_xor1679 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1709 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _59_in_bit_and1718 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1722 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1763 = new BitSet(new ulong[]{0x80000000000002UL,0x800000UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr1772 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1826 = new BitSet(new ulong[]{0x2UL,0x6240000UL});
		public static readonly BitSet _cmp_expr_op_in_cmp_expr1835 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr1880 = new BitSet(new ulong[]{0x2UL,0x8080000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr1889 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _add_expr_in_shift_expr1893 = new BitSet(new ulong[]{0x2UL,0x8080000UL});
		public static readonly BitSet _infix_expr_in_add_expr1923 = new BitSet(new ulong[]{0x2UL,0x22UL});
		public static readonly BitSet _65_in_add_expr1933 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _infix_expr_in_add_expr1937 = new BitSet(new ulong[]{0x2UL,0x22UL});
		public static readonly BitSet _69_in_add_expr1964 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _infix_expr_in_add_expr1968 = new BitSet(new ulong[]{0x2UL,0x22UL});
		public static readonly BitSet _mul_expr_in_infix_expr2008 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _infix_func_in_infix_expr2018 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _mul_expr_in_infix_expr2022 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _selector_expr_in_mul_expr2054 = new BitSet(new ulong[]{0x8100000000000002UL,0x1000UL});
		public static readonly BitSet _63_in_mul_expr2064 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _selector_expr_in_mul_expr2068 = new BitSet(new ulong[]{0x8100000000000002UL,0x1000UL});
		public static readonly BitSet _76_in_mul_expr2098 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _selector_expr_in_mul_expr2102 = new BitSet(new ulong[]{0x8100000000000002UL,0x1000UL});
		public static readonly BitSet _56_in_mul_expr2132 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _selector_expr_in_mul_expr2136 = new BitSet(new ulong[]{0x8100000000000002UL,0x1000UL});
		public static readonly BitSet _prefix_expr_in_selector_expr2179 = new BitSet(new ulong[]{0x2UL,0xA00UL});
		public static readonly BitSet _73_in_selector_expr2189 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_selector_expr2193 = new BitSet(new ulong[]{0x2UL,0xA00UL});
		public static readonly BitSet _75_in_selector_expr2221 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_selector_expr2226 = new BitSet(new ulong[]{0x2UL,0xA00UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr2301 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr2303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_prefix_expr2319 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _type_name_in_prefix_expr2321 = new BitSet(new ulong[]{0x2000000000000000UL,0x20000000UL});
		public static readonly BitSet _61_in_prefix_expr2325 = new BitSet(new ulong[]{0xE840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_prefix_expr2327 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_prefix_expr2330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_prefix_expr2352 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_prefix_expr2354 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_prefix_expr2356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr2372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list2384 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _68_in_expr_list2387 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_expr_list2390 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _atom_expr_in_suffix_expr2406 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _66_in_suffix_expr2416 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _70_in_suffix_expr2442 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _74_in_suffix_expr2465 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_suffix_expr2467 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _72_in_suffix_expr2492 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_suffix_expr2494 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _79_in_suffix_expr2519 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_suffix_expr2521 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _generic_parameter_in_suffix_expr2546 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_suffix_expr2549 = new BitSet(new ulong[]{0xE840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_suffix_expr2551 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_suffix_expr2554 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _93_in_suffix_expr2581 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080040000066UL});
		public static readonly BitSet _expr_list_in_suffix_expr2583 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_suffix_expr2586 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _78_in_suffix_expr2610 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_suffix_expr2612 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_suffix_expr2614 = new BitSet(new ulong[]{0xE840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_suffix_expr2616 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_suffix_expr2619 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _NUMBER_in_atom_expr2663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr2668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr2673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_atom_expr2678 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_atom_expr2680 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _68_in_atom_expr2683 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_atom_expr2685 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _62_in_atom_expr2692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue2729 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _66_in_lvalue2739 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _70_in_lvalue2767 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _74_in_lvalue2792 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_lvalue2794 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _72_in_lvalue2821 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_lvalue2823 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _79_in_lvalue2850 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_lvalue2852 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _generic_parameter_in_lvalue2879 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_lvalue2882 = new BitSet(new ulong[]{0xE840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_lvalue2884 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_lvalue2887 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _93_in_lvalue2916 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080040000066UL});
		public static readonly BitSet _expr_list_in_lvalue2918 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_lvalue2921 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _61_in_lvalue_atom2960 = new BitSet(new ulong[]{0x6000000020000000UL});
		public static readonly BitSet _lvalue_in_lvalue_atom2963 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _68_in_lvalue_atom2966 = new BitSet(new ulong[]{0x2000000020000000UL});
		public static readonly BitSet _lvalue_in_lvalue_atom2968 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _62_in_lvalue_atom2974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_lvalue_atom2988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident2999 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _79_in_ident3002 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _IDENT_in_ident3004 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _97_in_infix_func3017 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_infix_func3020 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_infix_func3022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_synpred28_SugarCpp702 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _attribute_item_in_synpred28_SugarCpp704 = new BitSet(new ulong[]{0x0UL,0x40000010UL});
		public static readonly BitSet _68_in_synpred28_SugarCpp707 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _attribute_item_in_synpred28_SugarCpp709 = new BitSet(new ulong[]{0x0UL,0x40000010UL});
		public static readonly BitSet _94_in_synpred28_SugarCpp713 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_synpred28_SugarCpp715 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _attribute_in_synpred29_SugarCpp734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_synpred50_SugarCpp976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_item_in_synpred55_SugarCpp1046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_synpred63_SugarCpp1373 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _func_args_in_synpred63_SugarCpp1375 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_synpred63_SugarCpp1377 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_synpred63_SugarCpp1379 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _modify_expr_in_synpred63_SugarCpp1381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_parameter_in_synpred117_SugarCpp2546 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_synpred117_SugarCpp2549 = new BitSet(new ulong[]{0xE840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_synpred117_SugarCpp2551 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_synpred117_SugarCpp2554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_synpred119_SugarCpp2581 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080040000066UL});
		public static readonly BitSet _expr_list_in_synpred119_SugarCpp2583 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_synpred119_SugarCpp2586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_synpred139_SugarCpp3002 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _IDENT_in_synpred139_SugarCpp3004 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
