//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-09 10:39:07

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'@'", "'['", "'\\\\'", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'const'", "'defer'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'let'", "'loop'", "'namespace'", "'new'", "'return'", "'try'", "'typedef'", "'unsigned'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc_Bracket=12;
	public const int Expr_Alloc_Equal=13;
	public const int Expr_Bin=14;
	public const int Expr_Bracket=15;
	public const int Expr_Call=16;
	public const int Expr_Call_With=17;
	public const int Expr_Cond=18;
	public const int Expr_Dict=19;
	public const int Expr_Infix=20;
	public const int Expr_Lambda=21;
	public const int Expr_New_Array=22;
	public const int Expr_New_Type=23;
	public const int Expr_Prefix=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int Generic_Patameters=29;
	public const int Global_Block=30;
	public const int IDENT=31;
	public const int INDENT=32;
	public const int Ident_List=33;
	public const int Import=34;
	public const int Left_Bracket=35;
	public const int LineComment=36;
	public const int Linq_From=37;
	public const int Linq_Let=38;
	public const int Linq_Prefix=39;
	public const int Linq_Where=40;
	public const int Match_Tuple=41;
	public const int NEWLINE=42;
	public const int NUMBER=43;
	public const int Namespace=44;
	public const int Right_Bracket=45;
	public const int Root=46;
	public const int SP=47;
	public const int STRING=48;
	public const int Stmt_Block=49;
	public const int Stmt_Defer=50;
	public const int Stmt_For=51;
	public const int Stmt_ForEach=52;
	public const int Stmt_If=53;
	public const int Stmt_Linq=54;
	public const int Stmt_Loop=55;
	public const int Stmt_Return=56;
	public const int Stmt_Try=57;
	public const int Stmt_Typedef=58;
	public const int Stmt_Using=59;
	public const int Stmt_While=60;
	public const int Type_IDENT=61;
	public const int Type_Ref=62;
	public const int Type_Tuple=63;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:164:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(164, 1);
		try
		{
			// SugarCpp.g:165:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:165:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(165, 4);
			// SugarCpp.g:165:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:165:4: NEWLINE
					{
					DebugLocation(165, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root455);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(165, 13);
			PushFollow(Follow._global_block_in_root458);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(165, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root460);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 165:30: -> ^( Root global_block )
			{
				DebugLocation(165, 33);
				// SugarCpp.g:165:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(165, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(165, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:168:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(168, 1);
		try
		{
			// SugarCpp.g:169:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:169:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(169, 4);
			// SugarCpp.g:169:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||(LA3_0>=103 && LA3_0<=104)||(LA3_0>=111 && LA3_0<=112)||LA3_0==115||LA3_0==119||LA3_0==123||(LA3_0>=127 && LA3_0<=129)||LA3_0==135))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:169:5: node ( NEWLINE )+
					{
					DebugLocation(169, 5);
					PushFollow(Follow._node_in_global_block480);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(169, 10);
					// SugarCpp.g:169:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:169:10: NEWLINE
							{
							DebugLocation(169, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block482);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 169:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(169, 24);
				// SugarCpp.g:169:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(169, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(169, 39);
				// SugarCpp.g:169:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(169, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:172:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(172, 1);
		try
		{
			// SugarCpp.g:173:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:173:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(173, 4);
				PushFollow(Follow._func_def_in_node505);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:174:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(174, 4);
				PushFollow(Follow._class_def_in_node510);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:175:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(175, 4);
				PushFollow(Follow._enum_def_in_node515);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:176:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				PushFollow(Follow._global_alloc_in_node520);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:177:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 4);
				PushFollow(Follow._global_using_in_node525);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:178:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(178, 4);
				PushFollow(Follow._global_typedef_in_node530);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:179:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(179, 4);
				PushFollow(Follow._import_def_in_node535);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:180:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 4);
				PushFollow(Follow._namespace_def_in_node540);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:183:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(183, 1);
		try
		{
			// SugarCpp.g:184:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
			case 103:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:184:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args552); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:185:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args557); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:186:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				PushFollow(Follow._ident_in_attribute_args562);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:189:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(189, 1);
		try
		{
			// SugarCpp.g:190:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT||LA10_0==103))
			{
				alt10 = 1;
			}
			else if ((LA10_0==112))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:190:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(190, 4);
				PushFollow(Follow._ident_in_attribute_item573);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(190, 10);
				// SugarCpp.g:190:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==71))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:190:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(190, 11);
					char_literal18=(IToken)Match(input,71,Follow._71_in_attribute_item576);  
					stream_71.Add(char_literal18);

					DebugLocation(190, 15);
					PushFollow(Follow._attribute_args_in_attribute_item578);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(190, 30);
					// SugarCpp.g:190:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==78))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:190:31: ',' attribute_args
							{
							DebugLocation(190, 31);
							char_literal20=(IToken)Match(input,78,Follow._78_in_attribute_item581);  
							stream_78.Add(char_literal20);

							DebugLocation(190, 35);
							PushFollow(Follow._attribute_args_in_attribute_item583);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(190, 52);
					char_literal22=(IToken)Match(input,72,Follow._72_in_attribute_item587);  
					stream_72.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 190:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(190, 61);
					// SugarCpp.g:190:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(190, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(190, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(190, 79);
					// SugarCpp.g:190:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(190, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:191:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(191, 4);
				string_literal23=(IToken)Match(input,112,Follow._112_in_attribute_item605);  
				stream_112.Add(string_literal23);

				DebugLocation(191, 12);
				// SugarCpp.g:191:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==71))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:191:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(191, 13);
					char_literal24=(IToken)Match(input,71,Follow._71_in_attribute_item608);  
					stream_71.Add(char_literal24);

					DebugLocation(191, 17);
					PushFollow(Follow._attribute_args_in_attribute_item610);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(191, 32);
					// SugarCpp.g:191:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==78))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:191:33: ',' attribute_args
							{
							DebugLocation(191, 33);
							char_literal26=(IToken)Match(input,78,Follow._78_in_attribute_item613);  
							stream_78.Add(char_literal26);

							DebugLocation(191, 37);
							PushFollow(Follow._attribute_args_in_attribute_item615);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(191, 54);
					char_literal28=(IToken)Match(input,72,Follow._72_in_attribute_item619);  
					stream_72.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 112
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 191:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(191, 63);
					// SugarCpp.g:191:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(191, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(191, 75);
					adaptor.AddChild(root_1, stream_112.NextNode());
					DebugLocation(191, 83);
					// SugarCpp.g:191:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(191, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:194:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(194, 1);
		try
		{
			// SugarCpp.g:195:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:195:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(195, 4);
			// SugarCpp.g:195:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==104))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:195:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(195, 5);
					char_literal29=(IToken)Match(input,104,Follow._104_in_attribute644);  
					stream_104.Add(char_literal29);

					DebugLocation(195, 9);
					PushFollow(Follow._attribute_item_in_attribute646);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(195, 24);
					// SugarCpp.g:195:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==78))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:195:25: ',' attribute_item
							{
							DebugLocation(195, 25);
							char_literal31=(IToken)Match(input,78,Follow._78_in_attribute649);  
							stream_78.Add(char_literal31);

							DebugLocation(195, 29);
							PushFollow(Follow._attribute_item_in_attribute651);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(195, 46);
					char_literal33=(IToken)Match(input,106,Follow._106_in_attribute655);  
					stream_106.Add(char_literal33);

					DebugLocation(195, 50);
					// SugarCpp.g:195:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:195:50: NEWLINE
							{
							DebugLocation(195, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute657);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 195:61: -> ( attribute_item )+
			{
				DebugLocation(195, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(195, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:198:1: global_alloc : ( ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) );
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute45 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(198, 1);
		try
		{
			// SugarCpp.g:199:2: ( ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			try
			{
				alt19 = dfa19.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:199:4: ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(199, 4);
				// SugarCpp.g:199:4: ( attribute )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==104))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:199:4: attribute
					{
					DebugLocation(199, 4);
					PushFollow(Follow._attribute_in_global_alloc676);
					attribute35=attribute();
					PopFollow();

					stream_attribute.Add(attribute35.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(199, 15);
				PushFollow(Follow._ident_list_in_global_alloc679);
				ident_list36=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list36.Tree);
				DebugLocation(199, 26);
				char_literal37=(IToken)Match(input,88,Follow._88_in_global_alloc681);  
				stream_88.Add(char_literal37);

				DebugLocation(199, 30);
				PushFollow(Follow._type_name_in_global_alloc683);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(199, 40);
				// SugarCpp.g:199:40: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 90:
				case 96:
					{
					alt17 = 1;
					}
					break;
				case 71:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:199:42: ( '=' | ':=' ) expr
					{
					DebugLocation(199, 42);
					// SugarCpp.g:199:42: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==96))
					{
						alt15 = 1;
					}
					else if ((LA15_0==90))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:199:43: '='
						{
						DebugLocation(199, 43);
						char_literal39=(IToken)Match(input,96,Follow._96_in_global_alloc688);  
						stream_96.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:199:49: ':='
						{
						DebugLocation(199, 49);
						string_literal40=(IToken)Match(input,90,Follow._90_in_global_alloc692);  
						stream_90.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(199, 55);
					PushFollow(Follow._expr_in_global_alloc695);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 199:60: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(199, 63);
						// SugarCpp.g:199:63: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(199, 65);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(199, 82);
						// SugarCpp.g:199:82: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(199, 82);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(199, 93);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(199, 103);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(199, 114);
						// SugarCpp.g:199:114: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(199, 114);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:200:42: '(' ( expr_list )? ')'
					{
					DebugLocation(200, 42);
					char_literal42=(IToken)Match(input,71,Follow._71_in_global_alloc754);  
					stream_71.Add(char_literal42);

					DebugLocation(200, 46);
					// SugarCpp.g:200:46: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==64||LA16_0==69||LA16_0==71||LA16_0==73||(LA16_0>=75 && LA16_0<=76)||(LA16_0>=79 && LA16_0<=80)||LA16_0==103||LA16_0==105||LA16_0==124||LA16_0==135))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:200:46: expr_list
						{
						DebugLocation(200, 46);
						PushFollow(Follow._expr_list_in_global_alloc756);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(200, 57);
					char_literal44=(IToken)Match(input,72,Follow._72_in_global_alloc759);  
					stream_72.Add(char_literal44);



					{
					// AST REWRITE
					// elements: type_name, attribute, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 200:61: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(200, 64);
						// SugarCpp.g:200:64: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(200, 66);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(200, 85);
						// SugarCpp.g:200:85: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(200, 85);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(200, 96);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(200, 106);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(200, 117);
						// SugarCpp.g:200:117: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(200, 117);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:201:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 201:15: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(201, 18);
						// SugarCpp.g:201:18: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(201, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(201, 37);
						// SugarCpp.g:201:37: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(201, 37);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(201, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(201, 58);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:203:4: ( attribute )? ident ':=' modify_expr
				{
				DebugLocation(203, 4);
				// SugarCpp.g:203:4: ( attribute )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==104))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:203:4: attribute
					{
					DebugLocation(203, 4);
					PushFollow(Follow._attribute_in_global_alloc821);
					attribute45=attribute();
					PopFollow();

					stream_attribute.Add(attribute45.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(203, 15);
				PushFollow(Follow._ident_in_global_alloc824);
				ident46=ident();
				PopFollow();

				stream_ident.Add(ident46.Tree);
				DebugLocation(203, 21);
				string_literal47=(IToken)Match(input,90,Follow._90_in_global_alloc826);  
				stream_90.Add(string_literal47);

				DebugLocation(203, 26);
				PushFollow(Follow._modify_expr_in_global_alloc828);
				modify_expr48=modify_expr();
				PopFollow();

				stream_modify_expr.Add(modify_expr48.Tree);


				{
				// AST REWRITE
				// elements: 90, ident, modify_expr, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 203:38: -> ^( ':=' ( attribute )? ident modify_expr )
				{
					DebugLocation(203, 41);
					// SugarCpp.g:203:41: ^( ':=' ( attribute )? ident modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(203, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_90.NextNode(), root_1);

					DebugLocation(203, 48);
					// SugarCpp.g:203:48: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(203, 48);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(203, 59);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(203, 65);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:206:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(206, 1);
		try
		{
			// SugarCpp.g:207:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:207:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(207, 4);
			PushFollow(Follow._stmt_using_in_global_using852);
			stmt_using49=stmt_using();
			PopFollow();

			adaptor.AddChild(root_0, stmt_using49.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:210:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(210, 1);
		try
		{
			// SugarCpp.g:211:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:211:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(211, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef863);
			stmt_typedef50=stmt_typedef();
			PopFollow();

			adaptor.AddChild(root_0, stmt_typedef50.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:214:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken STRING52 = default(IToken);
		IToken NEWLINE53 = default(IToken);
		IToken INDENT54 = default(IToken);
		IToken NEWLINE55 = default(IToken);
		IToken STRING56 = default(IToken);
		IToken NEWLINE57 = default(IToken);
		IToken DEDENT58 = default(IToken);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree STRING52_tree = default(CommonTree);
		CommonTree NEWLINE53_tree = default(CommonTree);
		CommonTree INDENT54_tree = default(CommonTree);
		CommonTree NEWLINE55_tree = default(CommonTree);
		CommonTree STRING56_tree = default(CommonTree);
		CommonTree NEWLINE57_tree = default(CommonTree);
		CommonTree DEDENT58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:215:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(215, 4);
			string_literal51=(IToken)Match(input,119,Follow._119_in_import_def874);  
			stream_119.Add(string_literal51);

			DebugLocation(215, 13);
			// SugarCpp.g:215:13: ( STRING )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==STRING))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:13: STRING
				{
				DebugLocation(215, 13);
				STRING52=(IToken)Match(input,STRING,Follow._STRING_in_import_def876);  
				stream_STRING.Add(STRING52);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(215, 21);
			// SugarCpp.g:215:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			try
			{
				alt25 = dfa25.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(215, 22);
				// SugarCpp.g:215:22: ( NEWLINE )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==NEWLINE))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:215:22: NEWLINE
						{
						DebugLocation(215, 22);
						NEWLINE53=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def880);  
						stream_NEWLINE.Add(NEWLINE53);


						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(215, 31);
				INDENT54=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def883);  
				stream_INDENT.Add(INDENT54);

				DebugLocation(215, 38);
				// SugarCpp.g:215:38: ( NEWLINE )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==NEWLINE))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:215:38: NEWLINE
						{
						DebugLocation(215, 38);
						NEWLINE55=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def885);  
						stream_NEWLINE.Add(NEWLINE55);


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(215, 48);
				// SugarCpp.g:215:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==STRING))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:215:49: STRING ( NEWLINE )+
						{
						DebugLocation(215, 49);
						STRING56=(IToken)Match(input,STRING,Follow._STRING_in_import_def890);  
						stream_STRING.Add(STRING56);

						DebugLocation(215, 56);
						// SugarCpp.g:215:56: ( NEWLINE )+
						int cnt23=0;
						try { DebugEnterSubRule(23);
						while (true)
						{
							int alt23=2;
							try { DebugEnterDecision(23, false);
							int LA23_0 = input.LA(1);

							if ((LA23_0==NEWLINE))
							{
								alt23 = 1;
							}


							} finally { DebugExitDecision(23); }
							switch (alt23)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:215:56: NEWLINE
								{
								DebugLocation(215, 56);
								NEWLINE57=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def892);  
								stream_NEWLINE.Add(NEWLINE57);


								}
								break;

							default:
								if (cnt23 >= 1)
									goto loop23;

								EarlyExitException eee23 = new EarlyExitException( 23, input );
								DebugRecognitionException(eee23);
								throw eee23;
							}
							cnt23++;
						}
						loop23:
							;

						} finally { DebugExitSubRule(23); }


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(215, 67);
				DEDENT58=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def897);  
				stream_DEDENT.Add(DEDENT58);


				}
				break;

			}
			} finally { DebugExitSubRule(25); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 215:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(215, 79);
				// SugarCpp.g:215:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(215, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(215, 88);
				// SugarCpp.g:215:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(215, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:218:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(218, 1);
		try
		{
			// SugarCpp.g:219:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(219, 4);
			// SugarCpp.g:219:4: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==104))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:219:4: attribute
				{
				DebugLocation(219, 4);
				PushFollow(Follow._attribute_in_enum_def919);
				attribute59=attribute();
				PopFollow();

				stream_attribute.Add(attribute59.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(219, 15);
			string_literal60=(IToken)Match(input,115,Follow._115_in_enum_def922);  
			stream_115.Add(string_literal60);

			DebugLocation(219, 22);
			PushFollow(Follow._ident_in_enum_def924);
			ident61=ident();
			PopFollow();

			stream_ident.Add(ident61.Tree);
			DebugLocation(219, 28);
			char_literal62=(IToken)Match(input,96,Follow._96_in_enum_def926);  
			stream_96.Add(char_literal62);

			DebugLocation(219, 32);
			// SugarCpp.g:219:32: ( ident ( '|' ident )* )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==IDENT||LA28_0==103))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:219:33: ident ( '|' ident )*
				{
				DebugLocation(219, 33);
				PushFollow(Follow._ident_in_enum_def929);
				ident63=ident();
				PopFollow();

				stream_ident.Add(ident63.Tree);
				DebugLocation(219, 39);
				// SugarCpp.g:219:39: ( '|' ident )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==132))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:219:40: '|' ident
						{
						DebugLocation(219, 40);
						char_literal64=(IToken)Match(input,132,Follow._132_in_enum_def932);  
						stream_132.Add(char_literal64);

						DebugLocation(219, 44);
						PushFollow(Follow._ident_in_enum_def934);
						ident65=ident();
						PopFollow();

						stream_ident.Add(ident65.Tree);

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: ident, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 219:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(219, 57);
				// SugarCpp.g:219:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(219, 64);
				// SugarCpp.g:219:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(219, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(219, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(219, 81);
				// SugarCpp.g:219:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(219, 94);
				// SugarCpp.g:219:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(219, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:222:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken INDENT69 = default(IToken);
		IToken NEWLINE70 = default(IToken);
		IToken DEDENT72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block71 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree INDENT69_tree = default(CommonTree);
		CommonTree NEWLINE70_tree = default(CommonTree);
		CommonTree DEDENT72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:223:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(223, 4);
			string_literal66=(IToken)Match(input,123,Follow._123_in_namespace_def967);  
			stream_123.Add(string_literal66);

			DebugLocation(223, 16);
			PushFollow(Follow._ident_in_namespace_def969);
			ident67=ident();
			PopFollow();

			stream_ident.Add(ident67.Tree);
			DebugLocation(223, 22);
			// SugarCpp.g:223:22: ( NEWLINE )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:223:22: NEWLINE
					{
					DebugLocation(223, 22);
					NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def971);  
					stream_NEWLINE.Add(NEWLINE68);


					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(223, 31);
			INDENT69=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def974);  
			stream_INDENT.Add(INDENT69);

			DebugLocation(223, 38);
			// SugarCpp.g:223:38: ( NEWLINE )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==NEWLINE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:223:38: NEWLINE
					{
					DebugLocation(223, 38);
					NEWLINE70=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def976);  
					stream_NEWLINE.Add(NEWLINE70);


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(223, 47);
			PushFollow(Follow._global_block_in_namespace_def979);
			global_block71=global_block();
			PopFollow();

			stream_global_block.Add(global_block71.Tree);
			DebugLocation(223, 60);
			DEDENT72=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def981);  
			stream_DEDENT.Add(DEDENT72);



			{
			// AST REWRITE
			// elements: ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 223:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(223, 70);
				// SugarCpp.g:223:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(223, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(223, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(223, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:226:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken NEWLINE84 = default(IToken);
		IToken INDENT85 = default(IToken);
		IToken NEWLINE86 = default(IToken);
		IToken DEDENT88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		CommonTree char_literal79_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree NEWLINE84_tree = default(CommonTree);
		CommonTree INDENT85_tree = default(CommonTree);
		CommonTree NEWLINE86_tree = default(CommonTree);
		CommonTree DEDENT88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(226, 1);
		try
		{
			// SugarCpp.g:227:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:227:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(227, 5);
			// SugarCpp.g:227:5: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==104))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:5: attribute
				{
				DebugLocation(227, 5);
				PushFollow(Follow._attribute_in_class_def1003);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(227, 16);
			string_literal74=(IToken)Match(input,111,Follow._111_in_class_def1006);  
			stream_111.Add(string_literal74);

			DebugLocation(227, 24);
			PushFollow(Follow._ident_in_class_def1008);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(227, 30);
			// SugarCpp.g:227:30: ( generic_parameter )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==92))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:31: generic_parameter
				{
				DebugLocation(227, 31);
				PushFollow(Follow._generic_parameter_in_class_def1011);
				generic_parameter76=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(227, 51);
			// SugarCpp.g:227:51: ( '(' func_args ')' )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==71))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:52: '(' func_args ')'
				{
				DebugLocation(227, 52);
				char_literal77=(IToken)Match(input,71,Follow._71_in_class_def1016);  
				stream_71.Add(char_literal77);

				DebugLocation(227, 56);
				PushFollow(Follow._func_args_in_class_def1018);
				func_args78=func_args();
				PopFollow();

				stream_func_args.Add(func_args78.Tree);
				DebugLocation(227, 66);
				char_literal79=(IToken)Match(input,72,Follow._72_in_class_def1020);  
				stream_72.Add(char_literal79);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(227, 72);
			// SugarCpp.g:227:72: ( ':' ident ( ',' ident )* )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==88))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:73: ':' ident ( ',' ident )*
				{
				DebugLocation(227, 73);
				char_literal80=(IToken)Match(input,88,Follow._88_in_class_def1025);  
				stream_88.Add(char_literal80);

				DebugLocation(227, 77);
				PushFollow(Follow._ident_in_class_def1027);
				ident81=ident();
				PopFollow();

				stream_ident.Add(ident81.Tree);
				DebugLocation(227, 83);
				// SugarCpp.g:227:83: ( ',' ident )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==78))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:227:84: ',' ident
						{
						DebugLocation(227, 84);
						char_literal82=(IToken)Match(input,78,Follow._78_in_class_def1030);  
						stream_78.Add(char_literal82);

						DebugLocation(227, 88);
						PushFollow(Follow._ident_in_class_def1032);
						ident83=ident();
						PopFollow();

						stream_ident.Add(ident83.Tree);

						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(227, 98);
			// SugarCpp.g:227:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			try
			{
				alt38 = dfa38.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(227, 99);
				// SugarCpp.g:227:99: ( NEWLINE )+
				int cnt36=0;
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==NEWLINE))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:227:99: NEWLINE
						{
						DebugLocation(227, 99);
						NEWLINE84=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1039);  
						stream_NEWLINE.Add(NEWLINE84);


						}
						break;

					default:
						if (cnt36 >= 1)
							goto loop36;

						EarlyExitException eee36 = new EarlyExitException( 36, input );
						DebugRecognitionException(eee36);
						throw eee36;
					}
					cnt36++;
				}
				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(227, 108);
				INDENT85=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1042);  
				stream_INDENT.Add(INDENT85);

				DebugLocation(227, 115);
				// SugarCpp.g:227:115: ( NEWLINE )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==NEWLINE))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:227:115: NEWLINE
						{
						DebugLocation(227, 115);
						NEWLINE86=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1044);  
						stream_NEWLINE.Add(NEWLINE86);


						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(227, 124);
				PushFollow(Follow._global_block_in_class_def1047);
				global_block87=global_block();
				PopFollow();

				stream_global_block.Add(global_block87.Tree);
				DebugLocation(227, 137);
				DEDENT88=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1049);  
				stream_DEDENT.Add(DEDENT88);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: global_block, ident, attribute, generic_parameter, func_args, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 227:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(227, 149);
				// SugarCpp.g:227:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(227, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(227, 157);
				// SugarCpp.g:227:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(227, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(227, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(227, 174);
				// SugarCpp.g:227:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(227, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(227, 193);
				// SugarCpp.g:227:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(227, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(227, 204);
				// SugarCpp.g:227:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(227, 205);
					// SugarCpp.g:227:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(227, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(227, 218);
					// SugarCpp.g:227:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(227, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(227, 228);
				// SugarCpp.g:227:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(227, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:230:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);

		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(230, 34);
		try
		{
			// SugarCpp.g:230:13: ( '*' | '[' ']' | '&' )
			int alt39=3;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case 73:
				{
				alt39 = 1;
				}
				break;
			case 104:
				{
				alt39 = 2;
				}
				break;
			case 69:
				{
				alt39 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:230:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 15);
				char_literal89=(IToken)Match(input,73,Follow._73_in_type_name_op1090); 
				char_literal89_tree = (CommonTree)adaptor.Create(char_literal89);
				adaptor.AddChild(root_0, char_literal89_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:230:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 21);
				char_literal90=(IToken)Match(input,104,Follow._104_in_type_name_op1094); 
				char_literal90_tree = (CommonTree)adaptor.Create(char_literal90);
				adaptor.AddChild(root_0, char_literal90_tree);
				DebugLocation(230, 25);
				char_literal91=(IToken)Match(input,106,Follow._106_in_type_name_op1096); 
				char_literal91_tree = (CommonTree)adaptor.Create(char_literal91);
				adaptor.AddChild(root_0, char_literal91_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:230:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 31);
				char_literal92=(IToken)Match(input,69,Follow._69_in_type_name_op1100); 
				char_literal92_tree = (CommonTree)adaptor.Create(char_literal92);
				adaptor.AddChild(root_0, char_literal92_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
		}
		DebugLocation(230, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:231:1: type_name : ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal93 = default(IToken);
		IToken string_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:232:4: ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(232, 4);
			// SugarCpp.g:232:4: ( 'const' )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==112))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:4: 'const'
				{
				DebugLocation(232, 4);
				string_literal93=(IToken)Match(input,112,Follow._112_in_type_name1109);  
				stream_112.Add(string_literal93);


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(232, 13);
			// SugarCpp.g:232:13: ( 'unsigned' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==128))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:13: 'unsigned'
				{
				DebugLocation(232, 13);
				string_literal94=(IToken)Match(input,128,Follow._128_in_type_name1112);  
				stream_128.Add(string_literal94);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(232, 25);
			PushFollow(Follow._ident_in_type_name1115);
			ident95=ident();
			PopFollow();

			stream_ident.Add(ident95.Tree);
			DebugLocation(232, 31);
			// SugarCpp.g:232:31: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==92))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:32: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(232, 32);
				char_literal96=(IToken)Match(input,92,Follow._92_in_type_name1118);  
				stream_92.Add(char_literal96);

				DebugLocation(232, 36);
				// SugarCpp.g:232:36: ( type_name ( ',' type_name )* )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==IDENT||LA43_0==103||LA43_0==112||LA43_0==128))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:37: type_name ( ',' type_name )*
					{
					DebugLocation(232, 37);
					PushFollow(Follow._type_name_in_type_name1121);
					type_name97=type_name();
					PopFollow();

					stream_type_name.Add(type_name97.Tree);
					DebugLocation(232, 47);
					// SugarCpp.g:232:47: ( ',' type_name )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==78))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:232:48: ',' type_name
							{
							DebugLocation(232, 48);
							char_literal98=(IToken)Match(input,78,Follow._78_in_type_name1124);  
							stream_78.Add(char_literal98);

							DebugLocation(232, 52);
							PushFollow(Follow._type_name_in_type_name1126);
							type_name99=type_name();
							PopFollow();

							stream_type_name.Add(type_name99.Tree);

							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(232, 66);
				char_literal100=(IToken)Match(input,99,Follow._99_in_type_name1132);  
				stream_99.Add(char_literal100);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(232, 72);
			// SugarCpp.g:232:72: ( type_name_op )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==104))
				{
					int LA45_2 = input.LA(2);

					if ((LA45_2==106))
					{
						alt45 = 1;
					}


				}
				else if ((LA45_0==69||LA45_0==73))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:72: type_name_op
					{
					DebugLocation(232, 72);
					PushFollow(Follow._type_name_op_in_type_name1136);
					type_name_op101=type_name_op();
					PopFollow();

					stream_type_name_op.Add(type_name_op101.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: 92, 99, 112, 128, type_name, ident, type_name_op
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 232:86: -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(232, 89);
				// SugarCpp.g:232:89: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(232, 91);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(232, 102);
				// SugarCpp.g:232:102: ( 'const' )?
				if (stream_112.HasNext)
				{
					DebugLocation(232, 102);
					adaptor.AddChild(root_1, stream_112.NextNode());

				}
				stream_112.Reset();
				DebugLocation(232, 111);
				// SugarCpp.g:232:111: ( 'unsigned' )?
				if (stream_128.HasNext)
				{
					DebugLocation(232, 111);
					adaptor.AddChild(root_1, stream_128.NextNode());

				}
				stream_128.Reset();
				DebugLocation(232, 123);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(232, 129);
				// SugarCpp.g:232:129: ( '<' ( type_name )* '>' )?
				if (stream_92.HasNext||stream_99.HasNext||stream_type_name.HasNext)
				{
					DebugLocation(232, 130);
					adaptor.AddChild(root_1, stream_92.NextNode());
					DebugLocation(232, 134);
					// SugarCpp.g:232:134: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(232, 134);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(232, 145);
					adaptor.AddChild(root_1, stream_99.NextNode());

				}
				stream_92.Reset();
				stream_99.Reset();
				stream_type_name.Reset();
				DebugLocation(232, 152);
				// SugarCpp.g:232:152: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(232, 152);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:235:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 16);
		TraceIn("generic_parameter_inside", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(235, 1);
		try
		{
			// SugarCpp.g:236:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:236:4: ident ( ',' ident )*
			{
			DebugLocation(236, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1176);
			ident102=ident();
			PopFollow();

			stream_ident.Add(ident102.Tree);
			DebugLocation(236, 10);
			// SugarCpp.g:236:10: ( ',' ident )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==78))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:236:11: ',' ident
					{
					DebugLocation(236, 11);
					char_literal103=(IToken)Match(input,78,Follow._78_in_generic_parameter_inside1179);  
					stream_78.Add(char_literal103);

					DebugLocation(236, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1181);
					ident104=ident();
					PopFollow();

					stream_ident.Add(ident104.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 236:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(236, 26);
				// SugarCpp.g:236:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(236, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(236, 47);
				// SugarCpp.g:236:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(236, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 16);
			LeaveRule("generic_parameter_inside", 16);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:239:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 17);
		TraceIn("generic_parameter", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(239, 1);
		try
		{
			// SugarCpp.g:240:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:240:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(240, 4);
			char_literal105=(IToken)Match(input,92,Follow._92_in_generic_parameter1203);  
			stream_92.Add(char_literal105);

			DebugLocation(240, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1205);
			generic_parameter_inside106=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside106.Tree);
			DebugLocation(240, 33);
			char_literal107=(IToken)Match(input,99,Follow._99_in_generic_parameter1207);  
			stream_99.Add(char_literal107);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:37: -> generic_parameter_inside
			{
				DebugLocation(240, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 17);
			LeaveRule("generic_parameter", 17);
			LeaveRule_generic_parameter();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:243:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 18);
		TraceIn("func_args", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(243, 1);
		try
		{
			// SugarCpp.g:244:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(244, 4);
			PushFollow(Follow._stmt_alloc_in_func_args1222);
			stmt_alloc108=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc108.Tree);
			DebugLocation(244, 15);
			// SugarCpp.g:244:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==78))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:16: ',' stmt_alloc
					{
					DebugLocation(244, 16);
					char_literal109=(IToken)Match(input,78,Follow._78_in_func_args1225);  
					stream_78.Add(char_literal109);

					DebugLocation(244, 20);
					PushFollow(Follow._stmt_alloc_in_func_args1227);
					stmt_alloc110=stmt_alloc();
					PopFollow();

					stream_stmt_alloc.Add(stmt_alloc110.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 244:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(244, 36);
				// SugarCpp.g:244:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(244, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(244, 48);
				// SugarCpp.g:244:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(244, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 18);
			LeaveRule("func_args", 18);
			LeaveRule_func_args();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:247:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 19);
		TraceIn("func_def", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal113 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal118 = default(IToken);
		IToken NEWLINE119 = default(IToken);
		IToken char_literal121 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name112 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr122 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal113_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree NEWLINE119_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(247, 4);
		try
		{
			// SugarCpp.g:248:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(248, 4);
			// SugarCpp.g:248:4: ( attribute )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==104))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:4: attribute
				{
				DebugLocation(248, 4);
				PushFollow(Follow._attribute_in_func_def1249);
				attribute111=attribute();
				PopFollow();

				stream_attribute.Add(attribute111.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }

			DebugLocation(248, 15);
			// SugarCpp.g:248:15: ( type_name )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			try
			{
				alt49 = dfa49.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:15: type_name
				{
				DebugLocation(248, 15);
				PushFollow(Follow._type_name_in_func_def1252);
				type_name112=type_name();
				PopFollow();

				stream_type_name.Add(type_name112.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }

			DebugLocation(248, 26);
			// SugarCpp.g:248:26: ( '~' )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==135))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:26: '~'
				{
				DebugLocation(248, 26);
				char_literal113=(IToken)Match(input,135,Follow._135_in_func_def1255);  
				stream_135.Add(char_literal113);


				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(248, 31);
			PushFollow(Follow._ident_in_func_def1258);
			ident114=ident();
			PopFollow();

			stream_ident.Add(ident114.Tree);
			DebugLocation(248, 37);
			// SugarCpp.g:248:37: ( generic_parameter )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==92))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:37: generic_parameter
				{
				DebugLocation(248, 37);
				PushFollow(Follow._generic_parameter_in_func_def1260);
				generic_parameter115=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter115.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(248, 56);
			char_literal116=(IToken)Match(input,71,Follow._71_in_func_def1263);  
			stream_71.Add(char_literal116);

			DebugLocation(248, 60);
			// SugarCpp.g:248:60: ( func_args )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==IDENT||LA52_0==103))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:60: func_args
				{
				DebugLocation(248, 60);
				PushFollow(Follow._func_args_in_func_def1265);
				func_args117=func_args();
				PopFollow();

				stream_func_args.Add(func_args117.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(248, 71);
			char_literal118=(IToken)Match(input,72,Follow._72_in_func_def1268);  
			stream_72.Add(char_literal118);

			DebugLocation(248, 75);
			// SugarCpp.g:248:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==NEWLINE))
			{
				alt54 = 1;
			}
			else if ((LA54_0==96))
			{
				alt54 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(248, 76);
				// SugarCpp.g:248:76: ( NEWLINE )+
				int cnt53=0;
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_0 = input.LA(1);

					if ((LA53_0==NEWLINE))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:248:76: NEWLINE
						{
						DebugLocation(248, 76);
						NEWLINE119=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1271);  
						stream_NEWLINE.Add(NEWLINE119);


						}
						break;

					default:
						if (cnt53 >= 1)
							goto loop53;

						EarlyExitException eee53 = new EarlyExitException( 53, input );
						DebugRecognitionException(eee53);
						throw eee53;
					}
					cnt53++;
				}
				loop53:
					;

				} finally { DebugExitSubRule(53); }

				DebugLocation(248, 85);
				PushFollow(Follow._stmt_block_in_func_def1274);
				stmt_block120=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block120.Tree);


				{
				// AST REWRITE
				// elements: attribute, stmt_block, generic_parameter, 135, func_args, ident, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 248:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(248, 99);
					// SugarCpp.g:248:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(248, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(248, 110);
					// SugarCpp.g:248:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(248, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(248, 121);
					// SugarCpp.g:248:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(248, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(248, 132);
					// SugarCpp.g:248:132: ( '~' )?
					if (stream_135.HasNext)
					{
						DebugLocation(248, 132);
						adaptor.AddChild(root_1, stream_135.NextNode());

					}
					stream_135.Reset();
					DebugLocation(248, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(248, 143);
					// SugarCpp.g:248:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(248, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(248, 162);
					// SugarCpp.g:248:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(248, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(248, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:249:23: '=' expr
				{
				DebugLocation(249, 23);
				char_literal121=(IToken)Match(input,96,Follow._96_in_func_def1323);  
				stream_96.Add(char_literal121);

				DebugLocation(249, 27);
				PushFollow(Follow._expr_in_func_def1325);
				expr122=expr();
				PopFollow();

				stream_expr.Add(expr122.Tree);


				{
				// AST REWRITE
				// elements: 135, ident, expr, attribute, generic_parameter, func_args, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 249:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(249, 36);
					// SugarCpp.g:249:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(249, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(249, 47);
					// SugarCpp.g:249:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(249, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(249, 58);
					// SugarCpp.g:249:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(249, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(249, 69);
					// SugarCpp.g:249:69: ( '~' )?
					if (stream_135.HasNext)
					{
						DebugLocation(249, 69);
						adaptor.AddChild(root_1, stream_135.NextNode());

					}
					stream_135.Reset();
					DebugLocation(249, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(249, 80);
					// SugarCpp.g:249:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(249, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(249, 99);
					// SugarCpp.g:249:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(249, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(249, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 19);
			LeaveRule("func_def", 19);
			LeaveRule_func_def();
		}
		DebugLocation(250, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:252:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 20);
		TraceIn("stmt_block", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT123 = default(IToken);
		IToken NEWLINE124 = default(IToken);
		IToken NEWLINE126 = default(IToken);
		IToken DEDENT127 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt125 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT123_tree = default(CommonTree);
		CommonTree NEWLINE124_tree = default(CommonTree);
		CommonTree NEWLINE126_tree = default(CommonTree);
		CommonTree DEDENT127_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(252, 1);
		try
		{
			// SugarCpp.g:253:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:253:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(253, 4);
			INDENT123=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1366);  
			stream_INDENT.Add(INDENT123);

			DebugLocation(253, 11);
			// SugarCpp.g:253:11: ( NEWLINE )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==NEWLINE))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:253:11: NEWLINE
					{
					DebugLocation(253, 11);
					NEWLINE124=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1368);  
					stream_NEWLINE.Add(NEWLINE124);


					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }

			DebugLocation(253, 21);
			// SugarCpp.g:253:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==IDENT||LA57_0==71||LA57_0==103||LA57_0==113||(LA57_0>=116 && LA57_0<=118)||(LA57_0>=121 && LA57_0<=122)||(LA57_0>=125 && LA57_0<=127)||(LA57_0>=129 && LA57_0<=131)))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:253:22: stmt ( NEWLINE )+
					{
					DebugLocation(253, 22);
					PushFollow(Follow._stmt_in_stmt_block1373);
					stmt125=stmt();
					PopFollow();

					stream_stmt.Add(stmt125.Tree);
					DebugLocation(253, 27);
					// SugarCpp.g:253:27: ( NEWLINE )+
					int cnt56=0;
					try { DebugEnterSubRule(56);
					while (true)
					{
						int alt56=2;
						try { DebugEnterDecision(56, false);
						int LA56_0 = input.LA(1);

						if ((LA56_0==NEWLINE))
						{
							alt56 = 1;
						}


						} finally { DebugExitDecision(56); }
						switch (alt56)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:253:27: NEWLINE
							{
							DebugLocation(253, 27);
							NEWLINE126=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1375);  
							stream_NEWLINE.Add(NEWLINE126);


							}
							break;

						default:
							if (cnt56 >= 1)
								goto loop56;

							EarlyExitException eee56 = new EarlyExitException( 56, input );
							DebugRecognitionException(eee56);
							throw eee56;
						}
						cnt56++;
					}
					loop56:
						;

					} finally { DebugExitSubRule(56); }


					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }

			DebugLocation(253, 38);
			DEDENT127=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1380);  
			stream_DEDENT.Add(DEDENT127);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 253:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(253, 48);
				// SugarCpp.g:253:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(253, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(253, 61);
				// SugarCpp.g:253:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(253, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 20);
			LeaveRule("stmt_block", 20);
			LeaveRule_stmt_block();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:256:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 21);
		TraceIn("stmt", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_linq133 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(256, 1);
		try
		{
			// SugarCpp.g:257:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer )
			int alt58=7;
			try { DebugEnterDecision(58, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 71:
			case 103:
			case 125:
			case 127:
			case 129:
				{
				alt58 = 1;
				}
				break;
			case 118:
				{
				alt58 = 2;
				}
				break;
			case 116:
				{
				alt58 = 3;
				}
				break;
			case 122:
			case 131:
				{
				alt58 = 4;
				}
				break;
			case 126:
				{
				alt58 = 5;
				}
				break;
			case 117:
			case 121:
			case 130:
				{
				alt58 = 6;
				}
				break;
			case 113:
				{
				alt58 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(257, 4);
				PushFollow(Follow._stmt_expr_in_stmt1400);
				stmt_expr128=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr128.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:258:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(258, 4);
				PushFollow(Follow._stmt_if_in_stmt1405);
				stmt_if129=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if129.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:259:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(259, 4);
				PushFollow(Follow._stmt_for_in_stmt1410);
				stmt_for130=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for130.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:260:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(260, 4);
				PushFollow(Follow._stmt_while_in_stmt1415);
				stmt_while131=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while131.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:261:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(261, 4);
				PushFollow(Follow._stmt_try_in_stmt1420);
				stmt_try132=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try132.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:262:4: stmt_linq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(262, 4);
				PushFollow(Follow._stmt_linq_in_stmt1425);
				stmt_linq133=stmt_linq();
				PopFollow();

				adaptor.AddChild(root_0, stmt_linq133.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:263:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(263, 4);
				PushFollow(Follow._stmt_defer_in_stmt1430);
				stmt_defer134=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer134.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 21);
			LeaveRule("stmt", 21);
			LeaveRule_stmt();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:266:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 22);
		TraceIn("stmt_expr", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc135 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify139 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(266, 1);
		try
		{
			// SugarCpp.g:267:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt59=5;
			try { DebugEnterDecision(59, false);
			try
			{
				alt59 = dfa59.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(267, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr1441);
				stmt_alloc135=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc135.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:268:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(268, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr1446);
				stmt_return136=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return136.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:269:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(269, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr1451);
				stmt_using137=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using137.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:270:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(270, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1456);
				stmt_typedef138=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef138.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:271:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(271, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr1461);
				stmt_modify139=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify139.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 22);
			LeaveRule("stmt_expr", 22);
			LeaveRule_stmt_expr();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:274:1: stmt_defer : 'defer' stmt -> ^( Stmt_Defer stmt ) ;
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 23);
		TraceIn("stmt_defer", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal140_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(274, 1);
		try
		{
			// SugarCpp.g:275:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) )
			DebugEnterAlt(1);
			// SugarCpp.g:275:4: 'defer' stmt
			{
			DebugLocation(275, 4);
			string_literal140=(IToken)Match(input,113,Follow._113_in_stmt_defer1472);  
			stream_113.Add(string_literal140);

			DebugLocation(275, 12);
			PushFollow(Follow._stmt_in_stmt_defer1474);
			stmt141=stmt();
			PopFollow();

			stream_stmt.Add(stmt141.Tree);


			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 275:17: -> ^( Stmt_Defer stmt )
			{
				DebugLocation(275, 20);
				// SugarCpp.g:275:20: ^( Stmt_Defer stmt )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(275, 22);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

				DebugLocation(275, 33);
				adaptor.AddChild(root_1, stream_stmt.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 23);
			LeaveRule("stmt_defer", 23);
			LeaveRule_stmt_defer();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:278:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 24);
		TraceIn("stmt_typedef", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal142 = default(IToken);
		IToken char_literal144 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal142_tree = default(CommonTree);
		CommonTree char_literal144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(278, 1);
		try
		{
			// SugarCpp.g:279:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:279:4: 'typedef' ident '=' type_name
			{
			DebugLocation(279, 4);
			string_literal142=(IToken)Match(input,127,Follow._127_in_stmt_typedef1493);  
			stream_127.Add(string_literal142);

			DebugLocation(279, 14);
			PushFollow(Follow._ident_in_stmt_typedef1495);
			ident143=ident();
			PopFollow();

			stream_ident.Add(ident143.Tree);
			DebugLocation(279, 20);
			char_literal144=(IToken)Match(input,96,Follow._96_in_stmt_typedef1497);  
			stream_96.Add(char_literal144);

			DebugLocation(279, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1499);
			type_name145=type_name();
			PopFollow();

			stream_type_name.Add(type_name145.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 279:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(279, 37);
				// SugarCpp.g:279:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(279, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(279, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(279, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 24);
			LeaveRule("stmt_typedef", 24);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:282:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 25);
		TraceIn("stmt_using_item", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal147 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident146 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal147_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(282, 36);
		try
		{
			// SugarCpp.g:282:16: ( ident | 'namespace' )
			int alt60=2;
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==IDENT||LA60_0==103))
			{
				alt60 = 1;
			}
			else if ((LA60_0==123))
			{
				alt60 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:282:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(282, 18);
				PushFollow(Follow._ident_in_stmt_using_item1518);
				ident146=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident146.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:282:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(282, 26);
				string_literal147=(IToken)Match(input,123,Follow._123_in_stmt_using_item1522); 
				string_literal147_tree = (CommonTree)adaptor.Create(string_literal147);
				adaptor.AddChild(root_0, string_literal147_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 25);
			LeaveRule("stmt_using_item", 25);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(282, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:283:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 26);
		TraceIn("stmt_using", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(283, 1);
		try
		{
			// SugarCpp.g:284:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:284:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(284, 4);
			string_literal148=(IToken)Match(input,129,Follow._129_in_stmt_using1530);  
			stream_129.Add(string_literal148);

			DebugLocation(284, 12);
			// SugarCpp.g:284:12: ( stmt_using_item )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==103||LA61_0==123))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:284:12: stmt_using_item
					{
					DebugLocation(284, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1532);
					stmt_using_item149=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item149.Tree);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 284:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(284, 32);
				// SugarCpp.g:284:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(284, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(284, 45);
				// SugarCpp.g:284:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(284, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 26);
			LeaveRule("stmt_using", 26);
			LeaveRule_stmt_using();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:287:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 27);
		TraceIn("stmt_return", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal150 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr151 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal150_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(287, 1);
		try
		{
			// SugarCpp.g:288:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:288:4: 'return' ( expr )?
			{
			DebugLocation(288, 4);
			string_literal150=(IToken)Match(input,125,Follow._125_in_stmt_return1553);  
			stream_125.Add(string_literal150);

			DebugLocation(288, 13);
			// SugarCpp.g:288:13: ( expr )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==IDENT||LA62_0==NUMBER||LA62_0==STRING||LA62_0==64||LA62_0==69||LA62_0==71||LA62_0==73||(LA62_0>=75 && LA62_0<=76)||(LA62_0>=79 && LA62_0<=80)||LA62_0==103||LA62_0==105||LA62_0==124||LA62_0==135))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:13: expr
				{
				DebugLocation(288, 13);
				PushFollow(Follow._expr_in_stmt_return1555);
				expr151=expr();
				PopFollow();

				stream_expr.Add(expr151.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 288:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(288, 22);
				// SugarCpp.g:288:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(288, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(288, 36);
				// SugarCpp.g:288:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(288, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 27);
			LeaveRule("stmt_return", 27);
			LeaveRule_stmt_return();
		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:291:1: stmt_if : 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 28);
		TraceIn("stmt_if", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal152 = default(IToken);
		IToken NEWLINE155 = default(IToken);
		IToken string_literal156 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal152_tree = default(CommonTree);
		CommonTree NEWLINE155_tree = default(CommonTree);
		CommonTree string_literal156_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(291, 1);
		try
		{
			// SugarCpp.g:292:2: ( 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:292:4: 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )?
			{
			DebugLocation(292, 4);
			string_literal152=(IToken)Match(input,118,Follow._118_in_stmt_if1576);  
			stream_118.Add(string_literal152);

			DebugLocation(292, 9);
			PushFollow(Follow._expr_in_stmt_if1578);
			expr153=expr();
			PopFollow();

			stream_expr.Add(expr153.Tree);
			DebugLocation(292, 14);
			PushFollow(Follow._stmt_block_in_stmt_if1580);
			stmt_block154=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block154.Tree);
			DebugLocation(292, 25);
			// SugarCpp.g:292:25: ( ( NEWLINE )* 'else' stmt_block )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			try
			{
				alt64 = dfa64.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:292:26: ( NEWLINE )* 'else' stmt_block
				{
				DebugLocation(292, 26);
				// SugarCpp.g:292:26: ( NEWLINE )*
				try { DebugEnterSubRule(63);
				while (true)
				{
					int alt63=2;
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==NEWLINE))
					{
						alt63 = 1;
					}


					} finally { DebugExitDecision(63); }
					switch ( alt63 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:292:26: NEWLINE
						{
						DebugLocation(292, 26);
						NEWLINE155=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1583);  
						stream_NEWLINE.Add(NEWLINE155);


						}
						break;

					default:
						goto loop63;
					}
				}

				loop63:
					;

				} finally { DebugExitSubRule(63); }

				DebugLocation(292, 35);
				string_literal156=(IToken)Match(input,114,Follow._114_in_stmt_if1586);  
				stream_114.Add(string_literal156);

				DebugLocation(292, 42);
				PushFollow(Follow._stmt_block_in_stmt_if1588);
				stmt_block157=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block157.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }



			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 292:55: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(292, 58);
				// SugarCpp.g:292:58: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(292, 60);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(292, 68);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(292, 73);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(292, 84);
				// SugarCpp.g:292:84: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(292, 84);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 28);
			LeaveRule("stmt_if", 28);
			LeaveRule_stmt_if();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:295:1: stmt_while : ( 'while' expr stmt_block -> ^( Stmt_While expr stmt_block ) | 'loop' stmt_block -> ^( Stmt_Loop stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 29);
		TraceIn("stmt_while", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal158 = default(IToken);
		IToken string_literal161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block162 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal158_tree = default(CommonTree);
		CommonTree string_literal161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(295, 1);
		try
		{
			// SugarCpp.g:296:2: ( 'while' expr stmt_block -> ^( Stmt_While expr stmt_block ) | 'loop' stmt_block -> ^( Stmt_Loop stmt_block ) )
			int alt65=2;
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==131))
			{
				alt65 = 1;
			}
			else if ((LA65_0==122))
			{
				alt65 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:296:4: 'while' expr stmt_block
				{
				DebugLocation(296, 4);
				string_literal158=(IToken)Match(input,131,Follow._131_in_stmt_while1614);  
				stream_131.Add(string_literal158);

				DebugLocation(296, 12);
				PushFollow(Follow._expr_in_stmt_while1616);
				expr159=expr();
				PopFollow();

				stream_expr.Add(expr159.Tree);
				DebugLocation(296, 17);
				PushFollow(Follow._stmt_block_in_stmt_while1618);
				stmt_block160=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block160.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 296:28: -> ^( Stmt_While expr stmt_block )
				{
					DebugLocation(296, 31);
					// SugarCpp.g:296:31: ^( Stmt_While expr stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(296, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

					DebugLocation(296, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(296, 49);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:297:4: 'loop' stmt_block
				{
				DebugLocation(297, 4);
				string_literal161=(IToken)Match(input,122,Follow._122_in_stmt_while1633);  
				stream_122.Add(string_literal161);

				DebugLocation(297, 11);
				PushFollow(Follow._stmt_block_in_stmt_while1635);
				stmt_block162=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block162.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 297:22: -> ^( Stmt_Loop stmt_block )
				{
					DebugLocation(297, 25);
					// SugarCpp.g:297:25: ^( Stmt_Loop stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(297, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(297, 37);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 29);
			LeaveRule("stmt_while", 29);
			LeaveRule_stmt_while();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:300:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 30);
		TraceIn("stmt_for", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal163 = default(IToken);
		IToken char_literal164 = default(IToken);
		IToken char_literal166 = default(IToken);
		IToken char_literal168 = default(IToken);
		IToken string_literal170 = default(IToken);
		IToken char_literal172 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block173 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal163_tree = default(CommonTree);
		CommonTree char_literal164_tree = default(CommonTree);
		CommonTree char_literal166_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		CommonTree string_literal170_tree = default(CommonTree);
		CommonTree char_literal172_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(300, 1);
		try
		{
			// SugarCpp.g:305:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:305:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(305, 4);
			string_literal163=(IToken)Match(input,116,Follow._116_in_stmt_for1659);  
			stream_116.Add(string_literal163);

			DebugLocation(305, 10);
			char_literal164=(IToken)Match(input,71,Follow._71_in_stmt_for1661);  
			stream_71.Add(char_literal164);

			DebugLocation(305, 14);
			PushFollow(Follow._expr_in_stmt_for1663);
			expr165=expr();
			PopFollow();

			stream_expr.Add(expr165.Tree);
			DebugLocation(305, 19);
			// SugarCpp.g:305:19: ( ';' expr ';' expr | 'in' expr )
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==91))
			{
				alt66 = 1;
			}
			else if ((LA66_0==120))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:305:20: ';' expr ';' expr
				{
				DebugLocation(305, 20);
				char_literal166=(IToken)Match(input,91,Follow._91_in_stmt_for1666);  
				stream_91.Add(char_literal166);

				DebugLocation(305, 24);
				PushFollow(Follow._expr_in_stmt_for1668);
				expr167=expr();
				PopFollow();

				stream_expr.Add(expr167.Tree);
				DebugLocation(305, 29);
				char_literal168=(IToken)Match(input,91,Follow._91_in_stmt_for1670);  
				stream_91.Add(char_literal168);

				DebugLocation(305, 33);
				PushFollow(Follow._expr_in_stmt_for1672);
				expr169=expr();
				PopFollow();

				stream_expr.Add(expr169.Tree);
				DebugLocation(305, 38);
				type=0;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:305:50: 'in' expr
				{
				DebugLocation(305, 50);
				string_literal170=(IToken)Match(input,120,Follow._120_in_stmt_for1678);  
				stream_120.Add(string_literal170);

				DebugLocation(305, 55);
				PushFollow(Follow._expr_in_stmt_for1680);
				expr171=expr();
				PopFollow();

				stream_expr.Add(expr171.Tree);
				DebugLocation(305, 60);
				type=1;

				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(305, 71);
			char_literal172=(IToken)Match(input,72,Follow._72_in_stmt_for1685);  
			stream_72.Add(char_literal172);

			DebugLocation(305, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1687);
			stmt_block173=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block173.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, expr, expr, stmt_block, expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 306:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(306, 18);
				// SugarCpp.g:306:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(306, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(306, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(306, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(306, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(306, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 307:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(307, 7);
				// SugarCpp.g:307:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(307, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(307, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(307, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(307, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 30);
			LeaveRule("stmt_for", 30);
			LeaveRule_stmt_for();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:310:1: stmt_try : 'try' stmt_block 'catch' expr stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 31);
		TraceIn("stmt_try", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal174 = default(IToken);
		IToken string_literal176 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree string_literal176_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(310, 1);
		try
		{
			// SugarCpp.g:311:2: ( 'try' stmt_block 'catch' expr stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: 'try' stmt_block 'catch' expr stmt_block
			{
			DebugLocation(311, 4);
			string_literal174=(IToken)Match(input,126,Follow._126_in_stmt_try1732);  
			stream_126.Add(string_literal174);

			DebugLocation(311, 10);
			PushFollow(Follow._stmt_block_in_stmt_try1734);
			stmt_block175=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block175.Tree);
			DebugLocation(311, 21);
			string_literal176=(IToken)Match(input,110,Follow._110_in_stmt_try1736);  
			stream_110.Add(string_literal176);

			DebugLocation(311, 29);
			PushFollow(Follow._expr_in_stmt_try1738);
			expr177=expr();
			PopFollow();

			stream_expr.Add(expr177.Tree);
			DebugLocation(311, 34);
			PushFollow(Follow._stmt_block_in_stmt_try1740);
			stmt_block178=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block178.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 311:45: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(311, 48);
				// SugarCpp.g:311:48: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(311, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(311, 59);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(311, 70);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(311, 75);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 31);
			LeaveRule("stmt_try", 31);
			LeaveRule_stmt_try();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarCpp.g:314:1: linq_item : ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) );
	[GrammarRule("linq_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 32);
		TraceIn("linq_item", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal179 = default(IToken);
		IToken string_literal181 = default(IToken);
		IToken string_literal183 = default(IToken);
		IToken char_literal185 = default(IToken);
		IToken string_literal187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr188 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal179_tree = default(CommonTree);
		CommonTree string_literal181_tree = default(CommonTree);
		CommonTree string_literal183_tree = default(CommonTree);
		CommonTree char_literal185_tree = default(CommonTree);
		CommonTree string_literal187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(314, 1);
		try
		{
			// SugarCpp.g:315:2: ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) )
			int alt67=3;
			try { DebugEnterDecision(67, false);
			switch (input.LA(1))
			{
			case 117:
				{
				alt67 = 1;
				}
				break;
			case 121:
				{
				alt67 = 2;
				}
				break;
			case 130:
				{
				alt67 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:315:4: 'from' expr 'in' expr
				{
				DebugLocation(315, 4);
				string_literal179=(IToken)Match(input,117,Follow._117_in_linq_item1763);  
				stream_117.Add(string_literal179);

				DebugLocation(315, 11);
				PushFollow(Follow._expr_in_linq_item1765);
				expr180=expr();
				PopFollow();

				stream_expr.Add(expr180.Tree);
				DebugLocation(315, 16);
				string_literal181=(IToken)Match(input,120,Follow._120_in_linq_item1767);  
				stream_120.Add(string_literal181);

				DebugLocation(315, 21);
				PushFollow(Follow._expr_in_linq_item1769);
				expr182=expr();
				PopFollow();

				stream_expr.Add(expr182.Tree);


				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 315:26: -> ^( Linq_From expr expr )
				{
					DebugLocation(315, 29);
					// SugarCpp.g:315:29: ^( Linq_From expr expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(315, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_From, "Linq_From"), root_1);

					DebugLocation(315, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(315, 46);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:316:4: 'let' ident '=' expr
				{
				DebugLocation(316, 4);
				string_literal183=(IToken)Match(input,121,Follow._121_in_linq_item1784);  
				stream_121.Add(string_literal183);

				DebugLocation(316, 10);
				PushFollow(Follow._ident_in_linq_item1786);
				ident184=ident();
				PopFollow();

				stream_ident.Add(ident184.Tree);
				DebugLocation(316, 16);
				char_literal185=(IToken)Match(input,96,Follow._96_in_linq_item1788);  
				stream_96.Add(char_literal185);

				DebugLocation(316, 20);
				PushFollow(Follow._expr_in_linq_item1790);
				expr186=expr();
				PopFollow();

				stream_expr.Add(expr186.Tree);


				{
				// AST REWRITE
				// elements: expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 316:25: -> ^( Linq_Let ident expr )
				{
					DebugLocation(316, 28);
					// SugarCpp.g:316:28: ^( Linq_Let ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(316, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Let, "Linq_Let"), root_1);

					DebugLocation(316, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(316, 45);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:317:4: 'where' expr
				{
				DebugLocation(317, 4);
				string_literal187=(IToken)Match(input,130,Follow._130_in_linq_item1805);  
				stream_130.Add(string_literal187);

				DebugLocation(317, 12);
				PushFollow(Follow._expr_in_linq_item1807);
				expr188=expr();
				PopFollow();

				stream_expr.Add(expr188.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 317:17: -> ^( Linq_Where expr )
				{
					DebugLocation(317, 20);
					// SugarCpp.g:317:20: ^( Linq_Where expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(317, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Where, "Linq_Where"), root_1);

					DebugLocation(317, 33);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_item", 32);
			LeaveRule("linq_item", 32);
			LeaveRule_linq_item();
		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return retval;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarCpp.g:320:1: linq_prefix : ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 33);
		TraceIn("linq_prefix", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE191 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item189 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_linq_item=new RewriteRuleSubtreeStream(adaptor,"rule linq_item");
		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(320, 1);
		try
		{
			// SugarCpp.g:321:2: ( ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:321:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			{
			DebugLocation(321, 4);
			// SugarCpp.g:321:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			int cnt70=0;
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==117||LA70_0==121||LA70_0==130))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:321:5: linq_item ( linq_item )* ( NEWLINE )+
					{
					DebugLocation(321, 5);
					PushFollow(Follow._linq_item_in_linq_prefix1827);
					linq_item189=linq_item();
					PopFollow();

					stream_linq_item.Add(linq_item189.Tree);
					DebugLocation(321, 15);
					// SugarCpp.g:321:15: ( linq_item )*
					try { DebugEnterSubRule(68);
					while (true)
					{
						int alt68=2;
						try { DebugEnterDecision(68, false);
						int LA68_0 = input.LA(1);

						if ((LA68_0==117||LA68_0==121||LA68_0==130))
						{
							alt68 = 1;
						}


						} finally { DebugExitDecision(68); }
						switch ( alt68 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:321:15: linq_item
							{
							DebugLocation(321, 15);
							PushFollow(Follow._linq_item_in_linq_prefix1829);
							linq_item190=linq_item();
							PopFollow();

							stream_linq_item.Add(linq_item190.Tree);

							}
							break;

						default:
							goto loop68;
						}
					}

					loop68:
						;

					} finally { DebugExitSubRule(68); }

					DebugLocation(321, 26);
					// SugarCpp.g:321:26: ( NEWLINE )+
					int cnt69=0;
					try { DebugEnterSubRule(69);
					while (true)
					{
						int alt69=2;
						try { DebugEnterDecision(69, false);
						int LA69_0 = input.LA(1);

						if ((LA69_0==NEWLINE))
						{
							alt69 = 1;
						}


						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:321:26: NEWLINE
							{
							DebugLocation(321, 26);
							NEWLINE191=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix1832);  
							stream_NEWLINE.Add(NEWLINE191);


							}
							break;

						default:
							if (cnt69 >= 1)
								goto loop69;

							EarlyExitException eee69 = new EarlyExitException( 69, input );
							DebugRecognitionException(eee69);
							throw eee69;
						}
						cnt69++;
					}
					loop69:
						;

					} finally { DebugExitSubRule(69); }


					}
					break;

				default:
					if (cnt70 >= 1)
						goto loop70;

					EarlyExitException eee70 = new EarlyExitException( 70, input );
					DebugRecognitionException(eee70);
					throw eee70;
				}
				cnt70++;
			}
			loop70:
				;

			} finally { DebugExitSubRule(70); }



			{
			// AST REWRITE
			// elements: linq_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 321:37: -> ^( Linq_Prefix ( linq_item )+ )
			{
				DebugLocation(321, 40);
				// SugarCpp.g:321:40: ^( Linq_Prefix ( linq_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(321, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Prefix, "Linq_Prefix"), root_1);

				DebugLocation(321, 54);
				if (!(stream_linq_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_linq_item.HasNext )
				{
					DebugLocation(321, 54);
					adaptor.AddChild(root_1, stream_linq_item.NextTree());

				}
				stream_linq_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_prefix", 33);
			LeaveRule("linq_prefix", 33);
			LeaveRule_linq_prefix();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return retval;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarCpp.g:324:1: stmt_linq : linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 34);
		TraceIn("stmt_linq", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> linq_prefix192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block193 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_linq_prefix=new RewriteRuleSubtreeStream(adaptor,"rule linq_prefix");
		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(324, 1);
		try
		{
			// SugarCpp.g:325:2: ( linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:325:4: linq_prefix stmt_block
			{
			DebugLocation(325, 4);
			PushFollow(Follow._linq_prefix_in_stmt_linq1855);
			linq_prefix192=linq_prefix();
			PopFollow();

			stream_linq_prefix.Add(linq_prefix192.Tree);
			DebugLocation(325, 16);
			PushFollow(Follow._stmt_block_in_stmt_linq1857);
			stmt_block193=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block193.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, linq_prefix
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 325:27: -> ^( Stmt_Linq linq_prefix stmt_block )
			{
				DebugLocation(325, 30);
				// SugarCpp.g:325:30: ^( Stmt_Linq linq_prefix stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(325, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Linq, "Stmt_Linq"), root_1);

				DebugLocation(325, 42);
				adaptor.AddChild(root_1, stream_linq_prefix.NextTree());
				DebugLocation(325, 54);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_linq", 34);
			LeaveRule("stmt_linq", 34);
			LeaveRule_stmt_linq();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return retval;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:328:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 35);
		TraceIn("ident_list", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal195 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident196 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal195_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: ident ( ',' ident )*
			{
			DebugLocation(329, 4);
			PushFollow(Follow._ident_in_ident_list1878);
			ident194=ident();
			PopFollow();

			stream_ident.Add(ident194.Tree);
			DebugLocation(329, 10);
			// SugarCpp.g:329:10: ( ',' ident )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==78))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:11: ',' ident
					{
					DebugLocation(329, 11);
					char_literal195=(IToken)Match(input,78,Follow._78_in_ident_list1881);  
					stream_78.Add(char_literal195);

					DebugLocation(329, 15);
					PushFollow(Follow._ident_in_ident_list1883);
					ident196=ident();
					PopFollow();

					stream_ident.Add(ident196.Tree);

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(329, 26);
				// SugarCpp.g:329:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(329, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(329, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(329, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 35);
			LeaveRule("ident_list", 35);
			LeaveRule_ident_list();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:332:1: stmt_alloc : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ident ':=' ^ modify_expr );
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 36);
		TraceIn("stmt_alloc", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken string_literal201 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken char_literal205 = default(IToken);
		IToken string_literal207 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident206 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr208 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal198_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree string_literal201_tree = default(CommonTree);
		CommonTree char_literal203_tree = default(CommonTree);
		CommonTree char_literal205_tree = default(CommonTree);
		CommonTree string_literal207_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ident ':=' ^ modify_expr )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			try
			{
				alt75 = dfa75.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:333:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(333, 4);
				PushFollow(Follow._ident_list_in_stmt_alloc1905);
				ident_list197=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list197.Tree);
				DebugLocation(333, 15);
				char_literal198=(IToken)Match(input,88,Follow._88_in_stmt_alloc1907);  
				stream_88.Add(char_literal198);

				DebugLocation(333, 19);
				PushFollow(Follow._type_name_in_stmt_alloc1909);
				type_name199=type_name();
				PopFollow();

				stream_type_name.Add(type_name199.Tree);
				DebugLocation(333, 29);
				// SugarCpp.g:333:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt74=3;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				switch (input.LA(1))
				{
				case 90:
				case 96:
					{
					alt74 = 1;
					}
					break;
				case 71:
					{
					alt74 = 2;
					}
					break;
				case NEWLINE:
				case 72:
				case 78:
					{
					alt74 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:333:31: ( '=' | ':=' ) expr
					{
					DebugLocation(333, 31);
					// SugarCpp.g:333:31: ( '=' | ':=' )
					int alt72=2;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, false);
					int LA72_0 = input.LA(1);

					if ((LA72_0==96))
					{
						alt72 = 1;
					}
					else if ((LA72_0==90))
					{
						alt72 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:333:32: '='
						{
						DebugLocation(333, 32);
						char_literal200=(IToken)Match(input,96,Follow._96_in_stmt_alloc1914);  
						stream_96.Add(char_literal200);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:333:38: ':='
						{
						DebugLocation(333, 38);
						string_literal201=(IToken)Match(input,90,Follow._90_in_stmt_alloc1918);  
						stream_90.Add(string_literal201);


						}
						break;

					}
					} finally { DebugExitSubRule(72); }

					DebugLocation(333, 44);
					PushFollow(Follow._expr_in_stmt_alloc1921);
					expr202=expr();
					PopFollow();

					stream_expr.Add(expr202.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 333:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(333, 53);
						// SugarCpp.g:333:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(333, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(333, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(333, 93);
						// SugarCpp.g:333:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(333, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:334:31: '(' ( expr_list )? ')'
					{
					DebugLocation(334, 31);
					char_literal203=(IToken)Match(input,71,Follow._71_in_stmt_alloc1967);  
					stream_71.Add(char_literal203);

					DebugLocation(334, 35);
					// SugarCpp.g:334:35: ( expr_list )?
					int alt73=2;
					try { DebugEnterSubRule(73);
					try { DebugEnterDecision(73, false);
					int LA73_0 = input.LA(1);

					if ((LA73_0==IDENT||LA73_0==NUMBER||LA73_0==STRING||LA73_0==64||LA73_0==69||LA73_0==71||LA73_0==73||(LA73_0>=75 && LA73_0<=76)||(LA73_0>=79 && LA73_0<=80)||LA73_0==103||LA73_0==105||LA73_0==124||LA73_0==135))
					{
						alt73 = 1;
					}
					} finally { DebugExitDecision(73); }
					switch (alt73)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:334:35: expr_list
						{
						DebugLocation(334, 35);
						PushFollow(Follow._expr_list_in_stmt_alloc1969);
						expr_list204=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list204.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(73); }

					DebugLocation(334, 46);
					char_literal205=(IToken)Match(input,72,Follow._72_in_stmt_alloc1972);  
					stream_72.Add(char_literal205);



					{
					// AST REWRITE
					// elements: expr_list, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 334:51: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(334, 54);
						// SugarCpp.g:334:54: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(334, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(334, 75);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(334, 85);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(334, 96);
						// SugarCpp.g:334:96: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(334, 96);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:335:13: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 335:13: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(335, 16);
						// SugarCpp.g:335:16: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(335, 18);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(335, 35);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(335, 45);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(74); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:337:4: ident ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(337, 4);
				PushFollow(Follow._ident_in_stmt_alloc2025);
				ident206=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident206.Tree);
				DebugLocation(337, 14);
				string_literal207=(IToken)Match(input,90,Follow._90_in_stmt_alloc2027); 
				string_literal207_tree = (CommonTree)adaptor.Create(string_literal207);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal207_tree, root_0);
				DebugLocation(337, 16);
				PushFollow(Follow._modify_expr_in_stmt_alloc2030);
				modify_expr208=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr208.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 36);
			LeaveRule("stmt_alloc", 36);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:340:1: stmt_modify : lvalue ( modify_expr_op ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 37);
		TraceIn("stmt_modify", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr211 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(340, 1);
		try
		{
			// SugarCpp.g:341:2: ( lvalue ( modify_expr_op ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:341:4: lvalue ( modify_expr_op ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(341, 4);
			PushFollow(Follow._lvalue_in_stmt_modify2041);
			lvalue209=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue209.Tree);
			DebugLocation(341, 11);
			// SugarCpp.g:341:11: ( modify_expr_op ^ modify_expr )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==67||LA76_0==70||LA76_0==74||LA76_0==77||LA76_0==81||LA76_0==87||LA76_0==94||LA76_0==96||LA76_0==102||LA76_0==108||LA76_0==133))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:341:12: modify_expr_op ^ modify_expr
				{
				DebugLocation(341, 26);
				PushFollow(Follow._modify_expr_op_in_stmt_modify2044);
				modify_expr_op210=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op210.Tree, root_0);
				DebugLocation(341, 28);
				PushFollow(Follow._modify_expr_in_stmt_modify2047);
				modify_expr211=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr211.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 37);
			LeaveRule("stmt_modify", 37);
			LeaveRule_stmt_modify();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:344:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 38);
		TraceIn("expr", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(344, 1);
		try
		{
			// SugarCpp.g:345:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:345:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(345, 4);
			PushFollow(Follow._lambda_expr_in_expr2060);
			lambda_expr212=lambda_expr();
			PopFollow();

			adaptor.AddChild(root_0, lambda_expr212.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 38);
			LeaveRule("expr", 38);
			LeaveRule_expr();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:348:1: lambda_expr : ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 39);
		TraceIn("lambda_expr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal213 = default(IToken);
		IToken char_literal214 = default(IToken);
		IToken char_literal216 = default(IToken);
		IToken string_literal217 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr219 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal213_tree = default(CommonTree);
		CommonTree char_literal214_tree = default(CommonTree);
		CommonTree char_literal216_tree = default(CommonTree);
		CommonTree string_literal217_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(348, 1);
		try
		{
			// SugarCpp.g:349:2: ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==105))
			{
				alt78 = 1;
			}
			else if ((LA78_0==IDENT||LA78_0==NUMBER||LA78_0==STRING||LA78_0==64||LA78_0==69||LA78_0==71||LA78_0==73||(LA78_0>=75 && LA78_0<=76)||(LA78_0>=79 && LA78_0<=80)||LA78_0==103||LA78_0==124||LA78_0==135))
			{
				alt78 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:349:4: '\\\\' '(' ( func_args )? ')' '=>' lambda_expr
				{
				DebugLocation(349, 4);
				char_literal213=(IToken)Match(input,105,Follow._105_in_lambda_expr2071);  
				stream_105.Add(char_literal213);

				DebugLocation(349, 9);
				char_literal214=(IToken)Match(input,71,Follow._71_in_lambda_expr2073);  
				stream_71.Add(char_literal214);

				DebugLocation(349, 13);
				// SugarCpp.g:349:13: ( func_args )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==IDENT||LA77_0==103))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:349:13: func_args
					{
					DebugLocation(349, 13);
					PushFollow(Follow._func_args_in_lambda_expr2075);
					func_args215=func_args();
					PopFollow();

					stream_func_args.Add(func_args215.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(349, 24);
				char_literal216=(IToken)Match(input,72,Follow._72_in_lambda_expr2078);  
				stream_72.Add(char_literal216);

				DebugLocation(349, 28);
				string_literal217=(IToken)Match(input,98,Follow._98_in_lambda_expr2080);  
				stream_98.Add(string_literal217);

				DebugLocation(349, 33);
				PushFollow(Follow._lambda_expr_in_lambda_expr2082);
				lambda_expr218=lambda_expr();
				PopFollow();

				stream_lambda_expr.Add(lambda_expr218.Tree);


				{
				// AST REWRITE
				// elements: func_args, lambda_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 349:45: -> ^( Expr_Lambda ( func_args )? lambda_expr )
				{
					DebugLocation(349, 48);
					// SugarCpp.g:349:48: ^( Expr_Lambda ( func_args )? lambda_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(349, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(349, 62);
					// SugarCpp.g:349:62: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(349, 62);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(349, 73);
					adaptor.AddChild(root_1, stream_lambda_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:350:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(350, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr2098);
				modify_expr219=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr219.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 39);
			LeaveRule("lambda_expr", 39);
			LeaveRule_lambda_expr();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:353:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 40);
		TraceIn("modify_expr_op", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set220 = default(IToken);

		CommonTree set220_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(353, 92);
		try
		{
			// SugarCpp.g:353:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(353, 15);

			set220=(IToken)input.LT(1);
			if (input.LA(1)==67||input.LA(1)==70||input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==87||input.LA(1)==94||input.LA(1)==96||input.LA(1)==102||input.LA(1)==108||input.LA(1)==133)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set220));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 40);
			LeaveRule("modify_expr_op", 40);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(353, 92);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:354:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 41);
		TraceIn("modify_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set222 = default(IToken);
		IToken char_literal224 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set222_tree = default(CommonTree);
		CommonTree char_literal224_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(354, 1);
		try
		{
			// SugarCpp.g:355:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:355:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(355, 4);
			PushFollow(Follow._cond_expr_in_modify_expr2156);
			cond_expr221=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr221.Tree);
			DebugLocation(355, 14);
			// SugarCpp.g:355:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt80=3;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==67||LA80_0==70||LA80_0==74||LA80_0==77||LA80_0==81||LA80_0==87||LA80_0==90||LA80_0==94||LA80_0==102||LA80_0==108||LA80_0==133))
			{
				alt80 = 1;
			}
			else if ((LA80_0==96))
			{
				alt80 = 2;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:355:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(355, 94);

				set222=(IToken)input.LT(1);
				set222=(IToken)input.LT(1);
				if (input.LA(1)==67||input.LA(1)==70||input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==102||input.LA(1)==108||input.LA(1)==133)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set222), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(355, 96);
				PushFollow(Follow._cond_expr_in_modify_expr2205);
				cond_expr223=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr223.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:356:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(356, 7);
				// SugarCpp.g:356:7: ( '=' ^ cond_expr )+
				int cnt79=0;
				try { DebugEnterSubRule(79);
				while (true)
				{
					int alt79=2;
					try { DebugEnterDecision(79, false);
					int LA79_0 = input.LA(1);

					if ((LA79_0==96))
					{
						alt79 = 1;
					}


					} finally { DebugExitDecision(79); }
					switch (alt79)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:356:8: '=' ^ cond_expr
						{
						DebugLocation(356, 11);
						char_literal224=(IToken)Match(input,96,Follow._96_in_modify_expr2214); 
						char_literal224_tree = (CommonTree)adaptor.Create(char_literal224);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal224_tree, root_0);
						DebugLocation(356, 13);
						PushFollow(Follow._cond_expr_in_modify_expr2217);
						cond_expr225=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr225.Tree);

						}
						break;

					default:
						if (cnt79 >= 1)
							goto loop79;

						EarlyExitException eee79 = new EarlyExitException( 79, input );
						DebugRecognitionException(eee79);
						throw eee79;
					}
					cnt79++;
				}
				loop79:
					;

				} finally { DebugExitSubRule(79); }


				}
				break;

			}
			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 41);
			LeaveRule("modify_expr", 41);
			LeaveRule_modify_expr();
		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:359:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 42);
		TraceIn("cond_expr_item", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr226 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(359, 26);
		try
		{
			// SugarCpp.g:359:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:359:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(359, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item2230);
			cond_expr226=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr226.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 42);
			LeaveRule("cond_expr_item", 42);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(359, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:360:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 43);
		TraceIn("cond_expr", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal227 = default(IToken);
		IToken string_literal228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal227_tree = default(CommonTree);
		CommonTree string_literal228_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(360, 1);
		try
		{
			// SugarCpp.g:361:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:361:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(361, 4);
			// SugarCpp.g:361:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:361:5: a= or_expr
			{
			DebugLocation(361, 6);
			PushFollow(Follow._or_expr_in_cond_expr2242);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 361:15: -> $a
			{
				DebugLocation(361, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(361, 22);
			// SugarCpp.g:361:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==118))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:361:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(361, 23);
				string_literal227=(IToken)Match(input,118,Follow._118_in_cond_expr2251);  
				stream_118.Add(string_literal227);

				DebugLocation(361, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr2255);
				a=cond_expr_item();
				PopFollow();

				stream_cond_expr_item.Add(a.Tree);
				DebugLocation(361, 45);
				string_literal228=(IToken)Match(input,114,Follow._114_in_cond_expr2257);  
				stream_114.Add(string_literal228);

				DebugLocation(361, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr2261);
				b=cond_expr_item();
				PopFollow();

				stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cond_expr, a, b
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 361:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(361, 72);
					// SugarCpp.g:361:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(361, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(361, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(361, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(361, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 43);
			LeaveRule("cond_expr", 43);
			LeaveRule_cond_expr();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:364:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 44);
		TraceIn("or_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal229 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal229_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(364, 1);
		try
		{
			// SugarCpp.g:365:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:365:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(365, 4);
			// SugarCpp.g:365:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:365:5: a= and_expr
			{
			DebugLocation(365, 6);
			PushFollow(Follow._and_expr_in_or_expr2292);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 365:16: -> $a
			{
				DebugLocation(365, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(365, 23);
			// SugarCpp.g:365:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==134))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:365:24: '||' b= and_expr
					{
					DebugLocation(365, 24);
					string_literal229=(IToken)Match(input,134,Follow._134_in_or_expr2301);  
					stream_134.Add(string_literal229);

					DebugLocation(365, 30);
					PushFollow(Follow._and_expr_in_or_expr2305);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 134, or_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 365:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(365, 43);
						// SugarCpp.g:365:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(365, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(365, 54);
						adaptor.AddChild(root_1, stream_134.NextNode());
						DebugLocation(365, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(365, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 44);
			LeaveRule("or_expr", 44);
			LeaveRule_or_expr();
		}
		DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:368:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 45);
		TraceIn("and_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal230 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(368, 1);
		try
		{
			// SugarCpp.g:369:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:369:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(369, 4);
			// SugarCpp.g:369:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:369:5: a= bit_or
			{
			DebugLocation(369, 6);
			PushFollow(Follow._bit_or_in_and_expr2335);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 369:14: -> $a
			{
				DebugLocation(369, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(369, 21);
			// SugarCpp.g:369:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==68))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:369:22: '&&' b= bit_or
					{
					DebugLocation(369, 22);
					string_literal230=(IToken)Match(input,68,Follow._68_in_and_expr2344);  
					stream_68.Add(string_literal230);

					DebugLocation(369, 28);
					PushFollow(Follow._bit_or_in_and_expr2348);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, 68, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 369:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(369, 39);
						// SugarCpp.g:369:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(369, 50);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(369, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(369, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 45);
			LeaveRule("and_expr", 45);
			LeaveRule_and_expr();
		}
		DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:372:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 46);
		TraceIn("bit_or", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal231 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal231_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(372, 1);
		try
		{
			// SugarCpp.g:373:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:373:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(373, 4);
			// SugarCpp.g:373:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:373:5: a= bit_xor
			{
			DebugLocation(373, 6);
			PushFollow(Follow._bit_xor_in_bit_or2378);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 373:15: -> $a
			{
				DebugLocation(373, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(373, 22);
			// SugarCpp.g:373:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==132))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:373:23: '|' b= bit_xor
					{
					DebugLocation(373, 23);
					char_literal231=(IToken)Match(input,132,Follow._132_in_bit_or2387);  
					stream_132.Add(char_literal231);

					DebugLocation(373, 28);
					PushFollow(Follow._bit_xor_in_bit_or2391);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_or, b, 132
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 373:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(373, 40);
						// SugarCpp.g:373:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(373, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(373, 51);
						adaptor.AddChild(root_1, stream_132.NextNode());
						DebugLocation(373, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(373, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 46);
			LeaveRule("bit_or", 46);
			LeaveRule_bit_or();
		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:376:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 47);
		TraceIn("bit_xor", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal232 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal232_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(376, 1);
		try
		{
			// SugarCpp.g:377:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:377:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(377, 4);
			// SugarCpp.g:377:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:377:5: a= bit_and
			{
			DebugLocation(377, 6);
			PushFollow(Follow._bit_and_in_bit_xor2421);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 377:15: -> $a
			{
				DebugLocation(377, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(377, 22);
			// SugarCpp.g:377:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==107))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:377:23: '^' b= bit_and
					{
					DebugLocation(377, 23);
					char_literal232=(IToken)Match(input,107,Follow._107_in_bit_xor2430);  
					stream_107.Add(char_literal232);

					DebugLocation(377, 28);
					PushFollow(Follow._bit_and_in_bit_xor2434);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 107, b, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 377:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(377, 40);
						// SugarCpp.g:377:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(377, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(377, 51);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(377, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(377, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 47);
			LeaveRule("bit_xor", 47);
			LeaveRule_bit_xor();
		}
		DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:380:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 48);
		TraceIn("bit_and", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal233 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal233_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(380, 1);
		try
		{
			// SugarCpp.g:381:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:381:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(381, 4);
			// SugarCpp.g:381:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:381:5: a= cmp_equ_expr
			{
			DebugLocation(381, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and2464);
			a=cmp_equ_expr();
			PopFollow();

			stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 381:20: -> $a
			{
				DebugLocation(381, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(381, 27);
			// SugarCpp.g:381:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==69))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:381:28: '&' b= cmp_equ_expr
					{
					DebugLocation(381, 28);
					char_literal233=(IToken)Match(input,69,Follow._69_in_bit_and2473);  
					stream_69.Add(char_literal233);

					DebugLocation(381, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and2477);
					b=cmp_equ_expr();
					PopFollow();

					stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, 69, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 381:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(381, 50);
						// SugarCpp.g:381:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(381, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(381, 61);
						adaptor.AddChild(root_1, stream_69.NextNode());
						DebugLocation(381, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(381, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 48);
			LeaveRule("bit_and", 48);
			LeaveRule_bit_and();
		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:384:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 49);
		TraceIn("cmp_equ_expr_op", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set234 = default(IToken);

		CommonTree set234_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(384, 29);
		try
		{
			// SugarCpp.g:384:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(384, 16);

			set234=(IToken)input.LT(1);
			if (input.LA(1)==65||input.LA(1)==97)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set234));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 49);
			LeaveRule("cmp_equ_expr_op", 49);
			LeaveRule_cmp_equ_expr_op();
		}
		DebugLocation(384, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:385:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 50);
		TraceIn("cmp_equ_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op235 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(385, 1);
		try
		{
			// SugarCpp.g:386:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:386:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			{
			DebugLocation(386, 4);
			// SugarCpp.g:386:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:386:5: a= cmp_expr
			{
			DebugLocation(386, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr2518);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 386:16: -> $a
			{
				DebugLocation(386, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(386, 23);
			// SugarCpp.g:386:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==65||LA87_0==97))
			{
				alt87 = 1;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:386:24: cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(386, 24);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr2527);
				cmp_equ_expr_op235=cmp_equ_expr_op();
				PopFollow();

				stream_cmp_equ_expr_op.Add(cmp_equ_expr_op235.Tree);
				DebugLocation(386, 41);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr2531);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_equ_expr, cmp_equ_expr_op, b
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 386:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
				{
					DebugLocation(386, 54);
					// SugarCpp.g:386:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(386, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(386, 65);
					adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
					DebugLocation(386, 82);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(386, 96);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 50);
			LeaveRule("cmp_equ_expr", 50);
			LeaveRule_cmp_equ_expr();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:389:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 51);
		TraceIn("cmp_expr", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal236 = default(IToken);
		IToken char_literal238 = default(IToken);
		IToken char_literal239 = default(IToken);
		IToken char_literal241 = default(IToken);
		IToken string_literal242 = default(IToken);
		IToken char_literal243 = default(IToken);
		IToken string_literal244 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal236_tree = default(CommonTree);
		CommonTree char_literal238_tree = default(CommonTree);
		CommonTree char_literal239_tree = default(CommonTree);
		CommonTree char_literal241_tree = default(CommonTree);
		CommonTree string_literal242_tree = default(CommonTree);
		CommonTree char_literal243_tree = default(CommonTree);
		CommonTree string_literal244_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(389, 1);
		try
		{
			// SugarCpp.g:390:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:390:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			{
			DebugLocation(390, 4);
			// SugarCpp.g:390:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:390:5: a= infix_expr
			{
			DebugLocation(390, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr2562);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 390:18: -> $a
			{
				DebugLocation(390, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(390, 25);
			// SugarCpp.g:390:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=5;
				try { DebugEnterDecision(91, false);
				switch (input.LA(1))
				{
				case 92:
					{
					alt91 = 1;
					}
					break;
				case 95:
					{
					alt91 = 2;
					}
					break;
				case 99:
					{
					alt91 = 3;
					}
					break;
				case 100:
					{
					alt91 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:390:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					{
					DebugLocation(390, 27);
					char_literal236=(IToken)Match(input,92,Follow._92_in_cmp_expr2572);  
					stream_92.Add(char_literal236);

					DebugLocation(390, 32);
					PushFollow(Follow._infix_expr_in_cmp_expr2576);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);
					DebugLocation(390, 44);
					// SugarCpp.g:390:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					int alt90=2;
					try { DebugEnterSubRule(90);
					try { DebugEnterDecision(90, false);
					switch (input.LA(1))
					{
					case IDENT:
					case 103:
						{
						alt90 = 1;
						}
						break;
					case 99:
						{
						int LA90_3 = input.LA(2);

						if (((b.Tree.Token.Type == IDENT)))
						{
							alt90 = 1;
						}
						else if ((true))
						{
							alt90 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 90, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case INDENT:
					case NEWLINE:
					case 65:
					case 67:
					case 68:
					case 69:
					case 70:
					case 72:
					case 74:
					case 77:
					case 78:
					case 81:
					case 87:
					case 90:
					case 91:
					case 92:
					case 94:
					case 95:
					case 96:
					case 97:
					case 100:
					case 102:
					case 106:
					case 107:
					case 108:
					case 114:
					case 117:
					case 118:
					case 120:
					case 121:
					case 130:
					case 132:
					case 133:
					case 134:
						{
						alt90 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(90); }
					switch (alt90)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:390:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
						{
						DebugLocation(390, 46);
						if (!((b.Tree.Token.Type == IDENT)))
						{
							throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
						}
						DebugLocation(390, 76);
						// SugarCpp.g:390:76: ( ident )*
						try { DebugEnterSubRule(88);
						while (true)
						{
							int alt88=2;
							try { DebugEnterDecision(88, false);
							int LA88_0 = input.LA(1);

							if ((LA88_0==IDENT||LA88_0==103))
							{
								alt88 = 1;
							}


							} finally { DebugExitDecision(88); }
							switch ( alt88 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:390:76: ident
								{
								DebugLocation(390, 76);
								PushFollow(Follow._ident_in_cmp_expr2582);
								ident237=ident();
								PopFollow();

								stream_ident.Add(ident237.Tree);

								}
								break;

							default:
								goto loop88;
							}
						}

						loop88:
							;

						} finally { DebugExitSubRule(88); }

						DebugLocation(390, 83);
						char_literal238=(IToken)Match(input,99,Follow._99_in_cmp_expr2585);  
						stream_99.Add(char_literal238);

						DebugLocation(390, 87);
						char_literal239=(IToken)Match(input,71,Follow._71_in_cmp_expr2587);  
						stream_71.Add(char_literal239);

						DebugLocation(390, 91);
						// SugarCpp.g:390:91: ( expr_list )?
						int alt89=2;
						try { DebugEnterSubRule(89);
						try { DebugEnterDecision(89, false);
						int LA89_0 = input.LA(1);

						if ((LA89_0==IDENT||LA89_0==NUMBER||LA89_0==STRING||LA89_0==64||LA89_0==69||LA89_0==71||LA89_0==73||(LA89_0>=75 && LA89_0<=76)||(LA89_0>=79 && LA89_0<=80)||LA89_0==103||LA89_0==105||LA89_0==124||LA89_0==135))
						{
							alt89 = 1;
						}
						} finally { DebugExitDecision(89); }
						switch (alt89)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:390:91: expr_list
							{
							DebugLocation(390, 91);
							PushFollow(Follow._expr_list_in_cmp_expr2589);
							expr_list240=expr_list();
							PopFollow();

							stream_expr_list.Add(expr_list240.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(89); }

						DebugLocation(390, 102);
						char_literal241=(IToken)Match(input,72,Follow._72_in_cmp_expr2592);  
						stream_72.Add(char_literal241);



						{
						// AST REWRITE
						// elements: ident, cmp_expr, b, expr_list
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 390:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
							DebugLocation(390, 109);
							// SugarCpp.g:390:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(390, 111);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(390, 122);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(390, 131);
							// SugarCpp.g:390:131: ^( Generic_Patameters $b ( ident )* )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(390, 133);
							root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

							DebugLocation(390, 153);
							adaptor.AddChild(root_2, stream_b.NextTree());
							DebugLocation(390, 155);
							// SugarCpp.g:390:155: ( ident )*
							while ( stream_ident.HasNext )
							{
								DebugLocation(390, 155);
								adaptor.AddChild(root_2, stream_ident.NextTree());

							}
							stream_ident.Reset();

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(390, 163);
							// SugarCpp.g:390:163: ( expr_list )?
							if (stream_expr_list.HasNext)
							{
								DebugLocation(390, 163);
								adaptor.AddChild(root_1, stream_expr_list.NextTree());

							}
							stream_expr_list.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:391:46: 
						{

						{
						// AST REWRITE
						// elements: cmp_expr, 92, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 391:46: -> ^( Expr_Bin '<' $cmp_expr $b)
						{
							DebugLocation(391, 49);
							// SugarCpp.g:391:49: ^( Expr_Bin '<' $cmp_expr $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(391, 51);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

							DebugLocation(391, 60);
							adaptor.AddChild(root_1, stream_92.NextNode());
							DebugLocation(391, 65);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(391, 75);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(90); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:392:27: '<=' b= infix_expr
					{
					DebugLocation(392, 27);
					string_literal242=(IToken)Match(input,95,Follow._95_in_cmp_expr2702);  
					stream_95.Add(string_literal242);

					DebugLocation(392, 33);
					PushFollow(Follow._infix_expr_in_cmp_expr2706);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 95, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 392:45: -> ^( Expr_Bin '<=' $cmp_expr $b)
					{
						DebugLocation(392, 48);
						// SugarCpp.g:392:48: ^( Expr_Bin '<=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(392, 59);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(392, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(392, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:393:12: '>' b= infix_expr
					{
					DebugLocation(393, 12);
					char_literal243=(IToken)Match(input,99,Follow._99_in_cmp_expr2733);  
					stream_99.Add(char_literal243);

					DebugLocation(393, 17);
					PushFollow(Follow._infix_expr_in_cmp_expr2737);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, 99, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 393:29: -> ^( Expr_Bin '>' $cmp_expr $b)
					{
						DebugLocation(393, 32);
						// SugarCpp.g:393:32: ^( Expr_Bin '>' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(393, 43);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(393, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(393, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:394:12: '>=' b= infix_expr
					{
					DebugLocation(394, 12);
					string_literal244=(IToken)Match(input,100,Follow._100_in_cmp_expr2764);  
					stream_100.Add(string_literal244);

					DebugLocation(394, 18);
					PushFollow(Follow._infix_expr_in_cmp_expr2768);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr, 100
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:30: -> ^( Expr_Bin '>=' $cmp_expr $b)
					{
						DebugLocation(394, 33);
						// SugarCpp.g:394:33: ^( Expr_Bin '>=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(394, 44);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(394, 50);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(394, 60);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 51);
			LeaveRule("cmp_expr", 51);
			LeaveRule_cmp_expr();
		}
		DebugLocation(395, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:397:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 52);
		TraceIn("infix_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func245 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(397, 1);
		try
		{
			// SugarCpp.g:398:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:398:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(398, 4);
			// SugarCpp.g:398:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:398:5: a= shift_expr
			{
			DebugLocation(398, 6);
			PushFollow(Follow._shift_expr_in_infix_expr2798);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 398:18: -> $a
			{
				DebugLocation(398, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(398, 25);
			// SugarCpp.g:398:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=2;
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==109))
				{
					alt92 = 1;
				}


				} finally { DebugExitDecision(92); }
				switch ( alt92 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:398:27: infix_func b= shift_expr
					{
					DebugLocation(398, 27);
					PushFollow(Follow._infix_func_in_infix_expr2808);
					infix_func245=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func245.Tree);
					DebugLocation(398, 39);
					PushFollow(Follow._shift_expr_in_infix_expr2812);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, b, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 398:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(398, 55);
						// SugarCpp.g:398:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(398, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(398, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(398, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(398, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop92;
				}
			}

			loop92:
				;

			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 52);
			LeaveRule("infix_expr", 52);
			LeaveRule_infix_expr();
		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:401:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 53);
		TraceIn("shift_expr_op", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set246 = default(IToken);

		CommonTree set246_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(401, 27);
		try
		{
			// SugarCpp.g:401:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(401, 14);

			set246=(IToken)input.LT(1);
			if (input.LA(1)==93||input.LA(1)==101)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set246));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 53);
			LeaveRule("shift_expr_op", 53);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(401, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:402:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 54);
		TraceIn("shift_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(402, 1);
		try
		{
			// SugarCpp.g:403:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:403:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(403, 4);
			// SugarCpp.g:403:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:403:5: a= add_expr
			{
			DebugLocation(403, 6);
			PushFollow(Follow._add_expr_in_shift_expr2855);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 403:16: -> $a
			{
				DebugLocation(403, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(403, 23);
			// SugarCpp.g:403:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==93||LA93_0==101))
				{
					alt93 = 1;
				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:403:24: shift_expr_op b= add_expr
					{
					DebugLocation(403, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr2864);
					shift_expr_op247=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op247.Tree);
					DebugLocation(403, 39);
					PushFollow(Follow._add_expr_in_shift_expr2868);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr_op, shift_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 403:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(403, 52);
						// SugarCpp.g:403:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(403, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(403, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(403, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(403, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 54);
			LeaveRule("shift_expr", 54);
			LeaveRule_shift_expr();
		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:406:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 55);
		TraceIn("add_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal248 = default(IToken);
		IToken char_literal249 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal248_tree = default(CommonTree);
		CommonTree char_literal249_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(406, 1);
		try
		{
			// SugarCpp.g:407:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:407:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(407, 4);
			// SugarCpp.g:407:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:407:5: a= mul_expr
			{
			DebugLocation(407, 6);
			PushFollow(Follow._mul_expr_in_add_expr2898);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 407:16: -> $a
			{
				DebugLocation(407, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(407, 23);
			// SugarCpp.g:407:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=3;
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==75))
				{
					alt94 = 1;
				}
				else if ((LA94_0==79))
				{
					alt94 = 2;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:407:25: '+' b= mul_expr
					{
					DebugLocation(407, 25);
					char_literal248=(IToken)Match(input,75,Follow._75_in_add_expr2908);  
					stream_75.Add(char_literal248);

					DebugLocation(407, 30);
					PushFollow(Follow._mul_expr_in_add_expr2912);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 75, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 407:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(407, 43);
						// SugarCpp.g:407:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(407, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(407, 54);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(407, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(407, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:408:10: '-' b= mul_expr
					{
					DebugLocation(408, 10);
					char_literal249=(IToken)Match(input,79,Follow._79_in_add_expr2937);  
					stream_79.Add(char_literal249);

					DebugLocation(408, 15);
					PushFollow(Follow._mul_expr_in_add_expr2941);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 79
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 408:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(408, 28);
						// SugarCpp.g:408:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(408, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(408, 39);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(408, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(408, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 55);
			LeaveRule("add_expr", 55);
			LeaveRule_add_expr();
		}
		DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:412:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 56);
		TraceIn("mul_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal250 = default(IToken);
		IToken char_literal251 = default(IToken);
		IToken char_literal252 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal250_tree = default(CommonTree);
		CommonTree char_literal251_tree = default(CommonTree);
		CommonTree char_literal252_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(412, 1);
		try
		{
			// SugarCpp.g:413:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:413:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(413, 4);
			// SugarCpp.g:413:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:413:5: a= selector_expr
			{
			DebugLocation(413, 6);
			PushFollow(Follow._selector_expr_in_mul_expr2979);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 413:21: -> $a
			{
				DebugLocation(413, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(413, 28);
			// SugarCpp.g:413:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=4;
				try { DebugEnterDecision(95, false);
				switch (input.LA(1))
				{
				case 73:
					{
					alt95 = 1;
					}
					break;
				case 86:
					{
					alt95 = 2;
					}
					break;
				case 66:
					{
					alt95 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:413:30: '*' b= selector_expr
					{
					DebugLocation(413, 30);
					char_literal250=(IToken)Match(input,73,Follow._73_in_mul_expr2989);  
					stream_73.Add(char_literal250);

					DebugLocation(413, 35);
					PushFollow(Follow._selector_expr_in_mul_expr2993);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 73
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 413:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(413, 53);
						// SugarCpp.g:413:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(413, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(413, 64);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(413, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(413, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:414:15: '/' b= selector_expr
					{
					DebugLocation(414, 15);
					char_literal251=(IToken)Match(input,86,Follow._86_in_mul_expr3023);  
					stream_86.Add(char_literal251);

					DebugLocation(414, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3027);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 86, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 414:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(414, 38);
						// SugarCpp.g:414:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(414, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(414, 49);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(414, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(414, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:415:15: '%' b= selector_expr
					{
					DebugLocation(415, 15);
					char_literal252=(IToken)Match(input,66,Follow._66_in_mul_expr3057);  
					stream_66.Add(char_literal252);

					DebugLocation(415, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3061);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 66
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 415:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(415, 38);
						// SugarCpp.g:415:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(415, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(415, 49);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(415, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(415, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 56);
			LeaveRule("mul_expr", 56);
			LeaveRule_mul_expr();
		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:419:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 57);
		TraceIn("selector_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal253 = default(IToken);
		IToken string_literal254 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal253_tree = default(CommonTree);
		CommonTree string_literal254_tree = default(CommonTree);
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(419, 1);
		try
		{
			// SugarCpp.g:420:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:420:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(420, 4);
			// SugarCpp.g:420:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:420:5: a= prefix_expr
			{
			DebugLocation(420, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr3104);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 420:19: -> $a
			{
				DebugLocation(420, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(420, 26);
			// SugarCpp.g:420:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(96);
			while (true)
			{
				int alt96=3;
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==83))
				{
					alt96 = 1;
				}
				else if ((LA96_0==85))
				{
					alt96 = 2;
				}


				} finally { DebugExitDecision(96); }
				switch ( alt96 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:420:28: '->*' b= ident
					{
					DebugLocation(420, 28);
					string_literal253=(IToken)Match(input,83,Follow._83_in_selector_expr3114);  
					stream_83.Add(string_literal253);

					DebugLocation(420, 35);
					PushFollow(Follow._ident_in_selector_expr3118);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 83
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 420:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(420, 45);
						// SugarCpp.g:420:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(420, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(420, 59);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(420, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(420, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:421:13: '.*' b= ident
					{
					DebugLocation(421, 13);
					string_literal254=(IToken)Match(input,85,Follow._85_in_selector_expr3146);  
					stream_85.Add(string_literal254);

					DebugLocation(421, 20);
					PushFollow(Follow._ident_in_selector_expr3151);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, b, 85
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 421:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(421, 30);
						// SugarCpp.g:421:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(421, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(421, 44);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(421, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(421, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop96;
				}
			}

			loop96:
				;

			} finally { DebugExitSubRule(96); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 57);
			LeaveRule("selector_expr", 57);
			LeaveRule_selector_expr();
		}
		DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:425:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 58);
		TraceIn("prefix_expr_op", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set255 = default(IToken);

		CommonTree set255_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(425, 64);
		try
		{
			// SugarCpp.g:425:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(425, 15);

			set255=(IToken)input.LT(1);
			if (input.LA(1)==64||input.LA(1)==69||input.LA(1)==73||(input.LA(1)>=75 && input.LA(1)<=76)||(input.LA(1)>=79 && input.LA(1)<=80)||input.LA(1)==135)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set255));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 58);
			LeaveRule("prefix_expr_op", 58);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(425, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:426:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 59);
		TraceIn("prefix_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal258 = default(IToken);
		IToken char_literal260 = default(IToken);
		IToken char_literal262 = default(IToken);
		IToken char_literal263 = default(IToken);
		IToken char_literal265 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op256 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr257 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr266 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal258_tree = default(CommonTree);
		CommonTree char_literal260_tree = default(CommonTree);
		CommonTree char_literal262_tree = default(CommonTree);
		CommonTree char_literal263_tree = default(CommonTree);
		CommonTree char_literal265_tree = default(CommonTree);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(426, 1);
		try
		{
			// SugarCpp.g:427:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt99=3;
			try { DebugEnterDecision(99, false);
			switch (input.LA(1))
			{
			case 64:
			case 69:
			case 73:
			case 75:
			case 76:
			case 79:
			case 80:
			case 135:
				{
				alt99 = 1;
				}
				break;
			case 124:
				{
				alt99 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 71:
			case 103:
				{
				alt99 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:427:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(427, 4);
				// SugarCpp.g:427:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:427:5: prefix_expr_op prefix_expr
				{
				DebugLocation(427, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr3226);
				prefix_expr_op256=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op256.Tree);
				DebugLocation(427, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr3228);
				prefix_expr257=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr257.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 427:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(427, 36);
					// SugarCpp.g:427:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(427, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(427, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(427, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:428:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(428, 4);
				string_literal258=(IToken)Match(input,124,Follow._124_in_prefix_expr3244);  
				stream_124.Add(string_literal258);

				DebugLocation(428, 10);
				PushFollow(Follow._type_name_in_prefix_expr3246);
				type_name259=type_name();
				PopFollow();

				stream_type_name.Add(type_name259.Tree);
				DebugLocation(428, 20);
				// SugarCpp.g:428:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==71))
				{
					alt98 = 1;
				}
				else if ((LA98_0==104))
				{
					alt98 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:428:22: '(' ( expr_list )? ')'
					{
					DebugLocation(428, 22);
					char_literal260=(IToken)Match(input,71,Follow._71_in_prefix_expr3250);  
					stream_71.Add(char_literal260);

					DebugLocation(428, 26);
					// SugarCpp.g:428:26: ( expr_list )?
					int alt97=2;
					try { DebugEnterSubRule(97);
					try { DebugEnterDecision(97, false);
					int LA97_0 = input.LA(1);

					if ((LA97_0==IDENT||LA97_0==NUMBER||LA97_0==STRING||LA97_0==64||LA97_0==69||LA97_0==71||LA97_0==73||(LA97_0>=75 && LA97_0<=76)||(LA97_0>=79 && LA97_0<=80)||LA97_0==103||LA97_0==105||LA97_0==124||LA97_0==135))
					{
						alt97 = 1;
					}
					} finally { DebugExitDecision(97); }
					switch (alt97)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:428:26: expr_list
						{
						DebugLocation(428, 26);
						PushFollow(Follow._expr_list_in_prefix_expr3252);
						expr_list261=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list261.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(97); }

					DebugLocation(428, 37);
					char_literal262=(IToken)Match(input,72,Follow._72_in_prefix_expr3255);  
					stream_72.Add(char_literal262);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 428:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(428, 44);
						// SugarCpp.g:428:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(428, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(428, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(428, 70);
						// SugarCpp.g:428:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(428, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:429:10: '[' expr_list ']'
					{
					DebugLocation(429, 10);
					char_literal263=(IToken)Match(input,104,Follow._104_in_prefix_expr3277);  
					stream_104.Add(char_literal263);

					DebugLocation(429, 14);
					PushFollow(Follow._expr_list_in_prefix_expr3279);
					expr_list264=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list264.Tree);
					DebugLocation(429, 24);
					char_literal265=(IToken)Match(input,106,Follow._106_in_prefix_expr3281);  
					stream_106.Add(char_literal265);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 429:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(429, 31);
						// SugarCpp.g:429:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(429, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(429, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(429, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(98); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:430:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(430, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr3297);
				suffix_expr266=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr266.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 59);
			LeaveRule("prefix_expr", 59);
			LeaveRule_prefix_expr();
		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:433:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 60);
		TraceIn("expr_list", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal268 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr267 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr269 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal268_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(433, 1);
		try
		{
			// SugarCpp.g:434:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:434:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(434, 4);
			PushFollow(Follow._expr_in_expr_list3309);
			expr267=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr267.Tree);
			DebugLocation(434, 9);
			// SugarCpp.g:434:9: ( ',' ! expr )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==78))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:10: ',' ! expr
					{
					DebugLocation(434, 13);
					char_literal268=(IToken)Match(input,78,Follow._78_in_expr_list3312); 
					DebugLocation(434, 15);
					PushFollow(Follow._expr_in_expr_list3315);
					expr269=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr269.Tree);

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 60);
			LeaveRule("expr_list", 60);
			LeaveRule_expr_list();
		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:437:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 61);
		TraceIn("suffix_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal270 = default(IToken);
		IToken string_literal271 = default(IToken);
		IToken char_literal272 = default(IToken);
		IToken string_literal274 = default(IToken);
		IToken char_literal276 = default(IToken);
		IToken char_literal278 = default(IToken);
		IToken char_literal279 = default(IToken);
		IToken char_literal281 = default(IToken);
		IToken char_literal282 = default(IToken);
		IToken char_literal284 = default(IToken);
		IToken char_literal286 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list280 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list285 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal270_tree = default(CommonTree);
		CommonTree string_literal271_tree = default(CommonTree);
		CommonTree char_literal272_tree = default(CommonTree);
		CommonTree string_literal274_tree = default(CommonTree);
		CommonTree char_literal276_tree = default(CommonTree);
		CommonTree char_literal278_tree = default(CommonTree);
		CommonTree char_literal279_tree = default(CommonTree);
		CommonTree char_literal281_tree = default(CommonTree);
		CommonTree char_literal282_tree = default(CommonTree);
		CommonTree char_literal284_tree = default(CommonTree);
		CommonTree char_literal286_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(437, 1);
		try
		{
			// SugarCpp.g:438:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:438:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			{
			DebugLocation(438, 4);
			// SugarCpp.g:438:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:438:5: a= atom_expr
			{
			DebugLocation(438, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr3331);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 438:17: -> $a
			{
				DebugLocation(438, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(438, 24);
			// SugarCpp.g:438:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=8;
				try { DebugEnterDecision(104, false);
				switch (input.LA(1))
				{
				case 76:
					{
					alt104 = 1;
					}
					break;
				case 80:
					{
					alt104 = 2;
					}
					break;
				case 84:
					{
					alt104 = 3;
					}
					break;
				case 82:
					{
					alt104 = 4;
					}
					break;
				case 71:
					{
					alt104 = 5;
					}
					break;
				case 104:
					{
					alt104 = 6;
					}
					break;
				case 88:
					{
					alt104 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:438:26: '++'
					{
					DebugLocation(438, 26);
					string_literal270=(IToken)Match(input,76,Follow._76_in_suffix_expr3341);  
					stream_76.Add(string_literal270);



					{
					// AST REWRITE
					// elements: suffix_expr, 76
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 438:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(438, 34);
						// SugarCpp.g:438:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(438, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(438, 48);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(438, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:439:14: '--'
					{
					DebugLocation(439, 14);
					string_literal271=(IToken)Match(input,80,Follow._80_in_suffix_expr3367);  
					stream_80.Add(string_literal271);



					{
					// AST REWRITE
					// elements: suffix_expr, 80
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 439:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(439, 22);
						// SugarCpp.g:439:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(439, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(439, 36);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(439, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:440:11: '.' ident
					{
					DebugLocation(440, 11);
					char_literal272=(IToken)Match(input,84,Follow._84_in_suffix_expr3390);  
					stream_84.Add(char_literal272);

					DebugLocation(440, 15);
					PushFollow(Follow._ident_in_suffix_expr3392);
					ident273=ident();
					PopFollow();

					stream_ident.Add(ident273.Tree);


					{
					// AST REWRITE
					// elements: 84, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 440:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(440, 24);
						// SugarCpp.g:440:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(440, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(440, 38);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(440, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(440, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:441:11: '->' ident
					{
					DebugLocation(441, 11);
					string_literal274=(IToken)Match(input,82,Follow._82_in_suffix_expr3417);  
					stream_82.Add(string_literal274);

					DebugLocation(441, 16);
					PushFollow(Follow._ident_in_suffix_expr3419);
					ident275=ident();
					PopFollow();

					stream_ident.Add(ident275.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 82
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(441, 25);
						// SugarCpp.g:441:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(441, 39);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(441, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(441, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:442:11: '(' ( expr_list )? ')'
					{
					DebugLocation(442, 11);
					char_literal276=(IToken)Match(input,71,Follow._71_in_suffix_expr3444);  
					stream_71.Add(char_literal276);

					DebugLocation(442, 15);
					// SugarCpp.g:442:15: ( expr_list )?
					int alt101=2;
					try { DebugEnterSubRule(101);
					try { DebugEnterDecision(101, false);
					int LA101_0 = input.LA(1);

					if ((LA101_0==IDENT||LA101_0==NUMBER||LA101_0==STRING||LA101_0==64||LA101_0==69||LA101_0==71||LA101_0==73||(LA101_0>=75 && LA101_0<=76)||(LA101_0>=79 && LA101_0<=80)||LA101_0==103||LA101_0==105||LA101_0==124||LA101_0==135))
					{
						alt101 = 1;
					}
					} finally { DebugExitDecision(101); }
					switch (alt101)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:442:15: expr_list
						{
						DebugLocation(442, 15);
						PushFollow(Follow._expr_list_in_suffix_expr3446);
						expr_list277=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list277.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(101); }

					DebugLocation(442, 26);
					char_literal278=(IToken)Match(input,72,Follow._72_in_suffix_expr3449);  
					stream_72.Add(char_literal278);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 442:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(442, 33);
						// SugarCpp.g:442:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(442, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(442, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(442, 58);
						// SugarCpp.g:442:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(442, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:443:11: '[' ( expr_list )? ']'
					{
					DebugLocation(443, 11);
					char_literal279=(IToken)Match(input,104,Follow._104_in_suffix_expr3473);  
					stream_104.Add(char_literal279);

					DebugLocation(443, 15);
					// SugarCpp.g:443:15: ( expr_list )?
					int alt102=2;
					try { DebugEnterSubRule(102);
					try { DebugEnterDecision(102, false);
					int LA102_0 = input.LA(1);

					if ((LA102_0==IDENT||LA102_0==NUMBER||LA102_0==STRING||LA102_0==64||LA102_0==69||LA102_0==71||LA102_0==73||(LA102_0>=75 && LA102_0<=76)||(LA102_0>=79 && LA102_0<=80)||LA102_0==103||LA102_0==105||LA102_0==124||LA102_0==135))
					{
						alt102 = 1;
					}
					} finally { DebugExitDecision(102); }
					switch (alt102)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:443:15: expr_list
						{
						DebugLocation(443, 15);
						PushFollow(Follow._expr_list_in_suffix_expr3475);
						expr_list280=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list280.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(102); }

					DebugLocation(443, 26);
					char_literal281=(IToken)Match(input,106,Follow._106_in_suffix_expr3478);  
					stream_106.Add(char_literal281);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 443:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(443, 33);
						// SugarCpp.g:443:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(443, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(443, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(443, 58);
						// SugarCpp.g:443:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(443, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:444:11: ':' ident '(' ( expr_list )? ')'
					{
					DebugLocation(444, 11);
					char_literal282=(IToken)Match(input,88,Follow._88_in_suffix_expr3502);  
					stream_88.Add(char_literal282);

					DebugLocation(444, 15);
					PushFollow(Follow._ident_in_suffix_expr3504);
					ident283=ident();
					PopFollow();

					stream_ident.Add(ident283.Tree);
					DebugLocation(444, 21);
					char_literal284=(IToken)Match(input,71,Follow._71_in_suffix_expr3506);  
					stream_71.Add(char_literal284);

					DebugLocation(444, 25);
					// SugarCpp.g:444:25: ( expr_list )?
					int alt103=2;
					try { DebugEnterSubRule(103);
					try { DebugEnterDecision(103, false);
					int LA103_0 = input.LA(1);

					if ((LA103_0==IDENT||LA103_0==NUMBER||LA103_0==STRING||LA103_0==64||LA103_0==69||LA103_0==71||LA103_0==73||(LA103_0>=75 && LA103_0<=76)||(LA103_0>=79 && LA103_0<=80)||LA103_0==103||LA103_0==105||LA103_0==124||LA103_0==135))
					{
						alt103 = 1;
					}
					} finally { DebugExitDecision(103); }
					switch (alt103)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:444:25: expr_list
						{
						DebugLocation(444, 25);
						PushFollow(Follow._expr_list_in_suffix_expr3508);
						expr_list285=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list285.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(103); }

					DebugLocation(444, 36);
					char_literal286=(IToken)Match(input,72,Follow._72_in_suffix_expr3511);  
					stream_72.Add(char_literal286);



					{
					// AST REWRITE
					// elements: ident, suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 444:40: -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
					{
						DebugLocation(444, 43);
						// SugarCpp.g:444:43: ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(444, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(444, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(444, 73);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(444, 79);
						// SugarCpp.g:444:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(444, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 61);
			LeaveRule("suffix_expr", 61);
			LeaveRule_suffix_expr();
		}
		DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:448:1: atom_expr : ( NUMBER | ident | STRING | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 62);
		TraceIn("atom_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER287 = default(IToken);
		IToken STRING289 = default(IToken);
		IToken char_literal290 = default(IToken);
		IToken char_literal292 = default(IToken);
		IToken char_literal294 = default(IToken);
		IToken char_literal295 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr293 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER287_tree = default(CommonTree);
		CommonTree STRING289_tree = default(CommonTree);
		CommonTree char_literal290_tree = default(CommonTree);
		CommonTree char_literal292_tree = default(CommonTree);
		CommonTree char_literal294_tree = default(CommonTree);
		CommonTree char_literal295_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(448, 1);
		try
		{
			// SugarCpp.g:449:2: ( NUMBER | ident | STRING | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt107=4;
			try { DebugEnterDecision(107, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt107 = 1;
				}
				break;
			case IDENT:
			case 103:
				{
				alt107 = 2;
				}
				break;
			case STRING:
				{
				alt107 = 3;
				}
				break;
			case 71:
				{
				alt107 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:449:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(449, 4);
				NUMBER287=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr3550); 
				NUMBER287_tree = (CommonTree)adaptor.Create(NUMBER287);
				adaptor.AddChild(root_0, NUMBER287_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:450:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(450, 4);
				PushFollow(Follow._ident_in_atom_expr3555);
				ident288=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident288.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:451:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(451, 4);
				STRING289=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr3560); 
				STRING289_tree = (CommonTree)adaptor.Create(STRING289);
				adaptor.AddChild(root_0, STRING289_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:452:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(452, 4);
				char_literal290=(IToken)Match(input,71,Follow._71_in_atom_expr3565);  
				stream_71.Add(char_literal290);

				DebugLocation(452, 8);
				PushFollow(Follow._expr_in_atom_expr3567);
				expr291=expr();
				PopFollow();

				stream_expr.Add(expr291.Tree);
				DebugLocation(452, 13);
				// SugarCpp.g:452:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==78))
				{
					alt106 = 1;
				}
				else if ((LA106_0==72))
				{
					alt106 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 106, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:452:15: ( ',' expr )+ ')'
					{
					DebugLocation(452, 15);
					// SugarCpp.g:452:15: ( ',' expr )+
					int cnt105=0;
					try { DebugEnterSubRule(105);
					while (true)
					{
						int alt105=2;
						try { DebugEnterDecision(105, false);
						int LA105_0 = input.LA(1);

						if ((LA105_0==78))
						{
							alt105 = 1;
						}


						} finally { DebugExitDecision(105); }
						switch (alt105)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:452:16: ',' expr
							{
							DebugLocation(452, 16);
							char_literal292=(IToken)Match(input,78,Follow._78_in_atom_expr3572);  
							stream_78.Add(char_literal292);

							DebugLocation(452, 20);
							PushFollow(Follow._expr_in_atom_expr3574);
							expr293=expr();
							PopFollow();

							stream_expr.Add(expr293.Tree);

							}
							break;

						default:
							if (cnt105 >= 1)
								goto loop105;

							EarlyExitException eee105 = new EarlyExitException( 105, input );
							DebugRecognitionException(eee105);
							throw eee105;
						}
						cnt105++;
					}
					loop105:
						;

					} finally { DebugExitSubRule(105); }

					DebugLocation(452, 27);
					char_literal294=(IToken)Match(input,72,Follow._72_in_atom_expr3578);  
					stream_72.Add(char_literal294);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 452:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(452, 34);
						// SugarCpp.g:452:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(452, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(452, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(452, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:453:15: ')'
					{
					DebugLocation(453, 15);
					char_literal295=(IToken)Match(input,72,Follow._72_in_atom_expr3603);  
					stream_72.Add(char_literal295);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 453:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(453, 22);
						// SugarCpp.g:453:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(453, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(453, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(106); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 62);
			LeaveRule("atom_expr", 62);
			LeaveRule_atom_expr();
		}
		DebugLocation(455, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:457:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 63);
		TraceIn("lvalue_item", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal296 = default(IToken);
		IToken string_literal297 = default(IToken);
		IToken char_literal298 = default(IToken);
		IToken string_literal300 = default(IToken);
		IToken char_literal303 = default(IToken);
		IToken char_literal305 = default(IToken);
		IToken char_literal306 = default(IToken);
		IToken char_literal308 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident299 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter302 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list304 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list307 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal296_tree = default(CommonTree);
		CommonTree string_literal297_tree = default(CommonTree);
		CommonTree char_literal298_tree = default(CommonTree);
		CommonTree string_literal300_tree = default(CommonTree);
		CommonTree char_literal303_tree = default(CommonTree);
		CommonTree char_literal305_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		CommonTree char_literal308_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(457, 1);
		try
		{
			// SugarCpp.g:458:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:458:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(458, 4);
			// SugarCpp.g:458:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:458:5: a= lvalue_atom
			{
			DebugLocation(458, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item3633);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 458:19: -> $a
			{
				DebugLocation(458, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(458, 26);
			// SugarCpp.g:458:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=7;
				try { DebugEnterDecision(111, false);
				switch (input.LA(1))
				{
				case 76:
					{
					alt111 = 1;
					}
					break;
				case 80:
					{
					alt111 = 2;
					}
					break;
				case 84:
					{
					alt111 = 3;
					}
					break;
				case 82:
					{
					alt111 = 4;
					}
					break;
				case 71:
				case 92:
					{
					alt111 = 5;
					}
					break;
				case 104:
					{
					alt111 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:458:28: '++'
					{
					DebugLocation(458, 28);
					string_literal296=(IToken)Match(input,76,Follow._76_in_lvalue_item3643);  
					stream_76.Add(string_literal296);



					{
					// AST REWRITE
					// elements: 76, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 458:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(458, 36);
						// SugarCpp.g:458:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(458, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(458, 50);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(458, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:459:16: '--'
					{
					DebugLocation(459, 16);
					string_literal297=(IToken)Match(input,80,Follow._80_in_lvalue_item3671);  
					stream_80.Add(string_literal297);



					{
					// AST REWRITE
					// elements: lvalue_item, 80
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 459:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(459, 24);
						// SugarCpp.g:459:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(459, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(459, 38);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(459, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:460:13: '.' ident
					{
					DebugLocation(460, 13);
					char_literal298=(IToken)Match(input,84,Follow._84_in_lvalue_item3696);  
					stream_84.Add(char_literal298);

					DebugLocation(460, 17);
					PushFollow(Follow._ident_in_lvalue_item3698);
					ident299=ident();
					PopFollow();

					stream_ident.Add(ident299.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_item, 84
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 460:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(460, 26);
						// SugarCpp.g:460:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(460, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(460, 40);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(460, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(460, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:461:13: '->' ident
					{
					DebugLocation(461, 13);
					string_literal300=(IToken)Match(input,82,Follow._82_in_lvalue_item3725);  
					stream_82.Add(string_literal300);

					DebugLocation(461, 18);
					PushFollow(Follow._ident_in_lvalue_item3727);
					ident301=ident();
					PopFollow();

					stream_ident.Add(ident301.Tree);


					{
					// AST REWRITE
					// elements: ident, 82, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 461:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(461, 27);
						// SugarCpp.g:461:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(461, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(461, 41);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(461, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(461, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:462:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(462, 13);
					// SugarCpp.g:462:13: ( generic_parameter )?
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, false);
					int LA108_0 = input.LA(1);

					if ((LA108_0==92))
					{
						alt108 = 1;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:462:13: generic_parameter
						{
						DebugLocation(462, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item3754);
						generic_parameter302=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter302.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(108); }

					DebugLocation(462, 32);
					char_literal303=(IToken)Match(input,71,Follow._71_in_lvalue_item3757);  
					stream_71.Add(char_literal303);

					DebugLocation(462, 36);
					// SugarCpp.g:462:36: ( expr_list )?
					int alt109=2;
					try { DebugEnterSubRule(109);
					try { DebugEnterDecision(109, false);
					int LA109_0 = input.LA(1);

					if ((LA109_0==IDENT||LA109_0==NUMBER||LA109_0==STRING||LA109_0==64||LA109_0==69||LA109_0==71||LA109_0==73||(LA109_0>=75 && LA109_0<=76)||(LA109_0>=79 && LA109_0<=80)||LA109_0==103||LA109_0==105||LA109_0==124||LA109_0==135))
					{
						alt109 = 1;
					}
					} finally { DebugExitDecision(109); }
					switch (alt109)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:462:36: expr_list
						{
						DebugLocation(462, 36);
						PushFollow(Follow._expr_list_in_lvalue_item3759);
						expr_list304=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list304.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(109); }

					DebugLocation(462, 47);
					char_literal305=(IToken)Match(input,72,Follow._72_in_lvalue_item3762);  
					stream_72.Add(char_literal305);



					{
					// AST REWRITE
					// elements: generic_parameter, expr_list, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 462:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(462, 54);
						// SugarCpp.g:462:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(462, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(462, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(462, 79);
						// SugarCpp.g:462:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(462, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(462, 98);
						// SugarCpp.g:462:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(462, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:463:13: '[' ( expr_list )? ']'
					{
					DebugLocation(463, 13);
					char_literal306=(IToken)Match(input,104,Follow._104_in_lvalue_item3791);  
					stream_104.Add(char_literal306);

					DebugLocation(463, 17);
					// SugarCpp.g:463:17: ( expr_list )?
					int alt110=2;
					try { DebugEnterSubRule(110);
					try { DebugEnterDecision(110, false);
					int LA110_0 = input.LA(1);

					if ((LA110_0==IDENT||LA110_0==NUMBER||LA110_0==STRING||LA110_0==64||LA110_0==69||LA110_0==71||LA110_0==73||(LA110_0>=75 && LA110_0<=76)||(LA110_0>=79 && LA110_0<=80)||LA110_0==103||LA110_0==105||LA110_0==124||LA110_0==135))
					{
						alt110 = 1;
					}
					} finally { DebugExitDecision(110); }
					switch (alt110)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:463:17: expr_list
						{
						DebugLocation(463, 17);
						PushFollow(Follow._expr_list_in_lvalue_item3793);
						expr_list307=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list307.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(110); }

					DebugLocation(463, 28);
					char_literal308=(IToken)Match(input,106,Follow._106_in_lvalue_item3796);  
					stream_106.Add(char_literal308);



					{
					// AST REWRITE
					// elements: expr_list, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 463:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(463, 35);
						// SugarCpp.g:463:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(463, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(463, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(463, 60);
						// SugarCpp.g:463:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(463, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 63);
			LeaveRule("lvalue_item", 63);
			LeaveRule_lvalue_item();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:467:1: lvalue_atom : ident ;
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 64);
		TraceIn("lvalue_atom", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> ident309 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(467, 1);
		try
		{
			// SugarCpp.g:468:2: ( ident )
			DebugEnterAlt(1);
			// SugarCpp.g:468:4: ident
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(468, 4);
			PushFollow(Follow._ident_in_lvalue_atom3835);
			ident309=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident309.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 64);
			LeaveRule("lvalue_atom", 64);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:471:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 65);
		TraceIn("lvalue", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal310 = default(IToken);
		IToken char_literal312 = default(IToken);
		IToken char_literal314 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item315 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal310_tree = default(CommonTree);
		CommonTree char_literal312_tree = default(CommonTree);
		CommonTree char_literal314_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(471, 1);
		try
		{
			// SugarCpp.g:472:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt113=2;
			try { DebugEnterDecision(113, false);
			int LA113_0 = input.LA(1);

			if ((LA113_0==71))
			{
				alt113 = 1;
			}
			else if ((LA113_0==IDENT||LA113_0==103))
			{
				alt113 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 113, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:472:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(472, 4);
				char_literal310=(IToken)Match(input,71,Follow._71_in_lvalue3846);  
				stream_71.Add(char_literal310);

				DebugLocation(472, 8);
				PushFollow(Follow._lvalue_item_in_lvalue3848);
				lvalue_item311=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item311.Tree);
				DebugLocation(472, 20);
				// SugarCpp.g:472:20: ( ',' lvalue_item )+
				int cnt112=0;
				try { DebugEnterSubRule(112);
				while (true)
				{
					int alt112=2;
					try { DebugEnterDecision(112, false);
					int LA112_0 = input.LA(1);

					if ((LA112_0==78))
					{
						alt112 = 1;
					}


					} finally { DebugExitDecision(112); }
					switch (alt112)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:472:21: ',' lvalue_item
						{
						DebugLocation(472, 21);
						char_literal312=(IToken)Match(input,78,Follow._78_in_lvalue3851);  
						stream_78.Add(char_literal312);

						DebugLocation(472, 25);
						PushFollow(Follow._lvalue_item_in_lvalue3853);
						lvalue_item313=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item313.Tree);

						}
						break;

					default:
						if (cnt112 >= 1)
							goto loop112;

						EarlyExitException eee112 = new EarlyExitException( 112, input );
						DebugRecognitionException(eee112);
						throw eee112;
					}
					cnt112++;
				}
				loop112:
					;

				} finally { DebugExitSubRule(112); }

				DebugLocation(472, 39);
				char_literal314=(IToken)Match(input,72,Follow._72_in_lvalue3857);  
				stream_72.Add(char_literal314);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 472:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(472, 46);
					// SugarCpp.g:472:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(472, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(472, 60);
					// SugarCpp.g:472:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(472, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:473:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(473, 4);
				PushFollow(Follow._lvalue_item_in_lvalue3871);
				lvalue_item315=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item315.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 65);
			LeaveRule("lvalue", 65);
			LeaveRule_lvalue();
		}
		DebugLocation(474, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:476:1: ident : ( '@' )? IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 66);
		TraceIn("ident", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal316 = default(IToken);
		IToken IDENT317 = default(IToken);
		IToken string_literal318 = default(IToken);
		IToken IDENT319 = default(IToken);

		CommonTree char_literal316_tree = default(CommonTree);
		CommonTree IDENT317_tree = default(CommonTree);
		CommonTree string_literal318_tree = default(CommonTree);
		CommonTree IDENT319_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(476, 1);
		try
		{
			// SugarCpp.g:477:2: ( ( '@' )? IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:477:4: ( '@' )? IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(477, 4);
			// SugarCpp.g:477:4: ( '@' )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			int LA114_0 = input.LA(1);

			if ((LA114_0==103))
			{
				alt114 = 1;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:477:4: '@'
				{
				DebugLocation(477, 4);
				char_literal316=(IToken)Match(input,103,Follow._103_in_ident3882); 
				char_literal316_tree = (CommonTree)adaptor.Create(char_literal316);
				adaptor.AddChild(root_0, char_literal316_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(114); }

			DebugLocation(477, 9);
			IDENT317=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3885); 
			IDENT317_tree = (CommonTree)adaptor.Create(IDENT317);
			adaptor.AddChild(root_0, IDENT317_tree);
			DebugLocation(477, 15);
			// SugarCpp.g:477:15: ( '::' IDENT )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==89))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:477:16: '::' IDENT
					{
					DebugLocation(477, 16);
					string_literal318=(IToken)Match(input,89,Follow._89_in_ident3888); 
					string_literal318_tree = (CommonTree)adaptor.Create(string_literal318);
					adaptor.AddChild(root_0, string_literal318_tree);
					DebugLocation(477, 21);
					IDENT319=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3890); 
					IDENT319_tree = (CommonTree)adaptor.Create(IDENT319);
					adaptor.AddChild(root_0, IDENT319_tree);

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 66);
			LeaveRule("ident", 66);
			LeaveRule_ident();
		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:480:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 67);
		TraceIn("infix_func", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal320 = default(IToken);
		IToken char_literal322 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident321 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal320_tree = default(CommonTree);
		CommonTree char_literal322_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(480, 1);
		try
		{
			// SugarCpp.g:481:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:481:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(481, 7);
			char_literal320=(IToken)Match(input,109,Follow._109_in_infix_func3903); 
			DebugLocation(481, 9);
			PushFollow(Follow._ident_in_infix_func3906);
			ident321=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident321.Tree);
			DebugLocation(481, 18);
			char_literal322=(IToken)Match(input,109,Follow._109_in_infix_func3908); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 67);
			LeaveRule("infix_func", 67);
			LeaveRule_infix_func();
		}
		DebugLocation(482, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA19 dfa19;
	private DFA25 dfa25;
	private DFA38 dfa38;
	private DFA49 dfa49;
	private DFA59 dfa59;
	private DFA64 dfa64;
	private DFA75 dfa75;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa19 = new DFA19( this );
		dfa25 = new DFA25( this );
		dfa38 = new DFA38( this );
		dfa49 = new DFA49( this );
		dfa59 = new DFA59( this );
		dfa64 = new DFA64( this );
		dfa75 = new DFA75( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x57\xFFFF";
		private const string DFA4_eofS =
			"\x57\xFFFF";
		private const string DFA4_minS =
			"\x2\x1F\x1\xFFFF\x2\x1F\x6\xFFFF\x1\x1F\x2\x47\x1\x1F\x1\xFFFF\x3\x1F"+
			"\x1\x2A\x2\x1F\x1\x47\x2\x48\x1\x1F\x1\x48\x1\x1F\x2\x47\x1\x1F\x2\x48"+
			"\x1\x1F\x1\x48\x1\x1F\x1\x4E\x5\x1F\x1\x4E\x1\x1F\x2\x48\x1\x1F\x2\x48"+
			"\x1\x47\x2\x48\x1\x1F\x3\x48\x1\x1F\x3\x48\x1\x1F\x2\x48\x2\x1F\x1\x4E"+
			"\x2\x1F\x1\x4E\x2\x1F\x3\x48\x1\x1F\x4\x48\x1\x1F\x3\x48\x2\x1F\x2\x48";
		private const string DFA4_maxS =
			"\x1\x87\x1\x70\x1\xFFFF\x1\x1F\x1\x87\x6\xFFFF\x1\x1F\x2\x6A\x1\x1F\x1"+
			"\xFFFF\x1\x1F\x1\x67\x1\x70\x1\x2A\x1\x67\x1\x87\x1\x6A\x2\x4E\x1\x1F"+
			"\x1\x59\x1\x1F\x2\x6A\x1\x87\x2\x4E\x1\x1F\x1\x59\x1\x67\x1\x6A\x2\x1F"+
			"\x3\x67\x1\x6A\x1\x1F\x2\x4E\x1\x1F\x2\x59\x1\x6A\x2\x4E\x1\x1F\x1\x59"+
			"\x2\x4E\x1\x1F\x1\x59\x2\x4E\x1\x1F\x2\x59\x1\x1F\x1\x67\x1\x6A\x1\x1F"+
			"\x1\x67\x1\x6A\x2\x1F\x1\x59\x2\x4E\x1\x1F\x2\x59\x2\x4E\x1\x1F\x3\x59"+
			"\x2\x1F\x2\x59";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x2\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x4\xFFFF"+
			"\x1\x4\x47\xFFFF";
		private const string DFA4_specialS =
			"\x57\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x4\x47\xFFFF\x1\x3\x1\x1\x6\xFFFF\x1\x5\x1\x2\x2\xFFFF\x1\x6\x3"+
				"\xFFFF\x1\x9\x3\xFFFF\x1\xA\x3\xFFFF\x1\x8\x1\x2\x1\x7\x5\xFFFF\x1\x2",
				"\x1\xC\x47\xFFFF\x1\xB\x8\xFFFF\x1\xD",
				"",
				"\x1\x4",
				"\x1\x2\x25\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xF"+
				"\x9\xFFFF\x1\xF\x1\xE\x1\xF\x1\xFFFF\x1\x2\xA\xFFFF\x2\x2\x1E\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xC",
				"\x1\x11\x6\xFFFF\x1\x12\xA\xFFFF\x1\x10\x10\xFFFF\x1\x13",
				"\x1\x14\x6\xFFFF\x1\x12\x1B\xFFFF\x1\x13",
				"\x1\x15",
				"",
				"\x1\x16",
				"\x1\x1A\xB\xFFFF\x1\x17\x4\xFFFF\x1\x18\x36\xFFFF\x1\x19",
				"\x1\x1C\x47\xFFFF\x1\x1B\x8\xFFFF\x1\x1D",
				"\x1\x1E",
				"\x1\x22\xB\xFFFF\x1\x1F\x4\xFFFF\x1\x20\x36\xFFFF\x1\x21",
				"\x1\x2\x25\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xF"+
				"\x9\xFFFF\x1\xF\x1\xE\x1\xF\x1\xFFFF\x1\x2\xA\xFFFF\x2\x2\x1E\xFFFF"+
				"\x1\x2",
				"\x1\x11\x6\xFFFF\x1\x12\xA\xFFFF\x1\x10\x10\xFFFF\x1\x13",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x1A",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x25",
				"\x1\x1C",
				"\x1\x27\x6\xFFFF\x1\x12\xA\xFFFF\x1\x26\x10\xFFFF\x1\x13",
				"\x1\x28\x6\xFFFF\x1\x12\x1B\xFFFF\x1\x13",
				"\x1\x4\xA\xFFFF\x1\x1E\x3C\xFFFF\x1\x3\x1\x1\x6\xFFFF\x1\x5\x1\x2\x2"+
				"\xFFFF\x1\x6\xC\xFFFF\x1\x2\x6\xFFFF\x1\x2",
				"\x1\x2A\x5\xFFFF\x1\x29",
				"\x1\x2A\x5\xFFFF\x1\x29",
				"\x1\x22",
				"\x1\x2A\x5\xFFFF\x1\x29\xA\xFFFF\x1\x2B",
				"\x1\x2F\xB\xFFFF\x1\x2C\x4\xFFFF\x1\x2D\x36\xFFFF\x1\x2E",
				"\x1\x12\x1B\xFFFF\x1\x13",
				"\x1\x30",
				"\x1\x31",
				"\x1\x35\xB\xFFFF\x1\x32\x4\xFFFF\x1\x33\x36\xFFFF\x1\x34",
				"\x1\x39\xB\xFFFF\x1\x36\x4\xFFFF\x1\x37\x36\xFFFF\x1\x38",
				"\x1\x3D\xB\xFFFF\x1\x3A\x4\xFFFF\x1\x3B\x36\xFFFF\x1\x3C",
				"\x1\x12\x1B\xFFFF\x1\x13",
				"\x1\x3E",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x2F",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x3F",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x25",
				"\x1\x27\x6\xFFFF\x1\x12\xA\xFFFF\x1\x26\x10\xFFFF\x1\x13",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x35",
				"\x1\x41\x5\xFFFF\x1\x40\xA\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x39",
				"\x1\x44\x5\xFFFF\x1\x43\xA\xFFFF\x1\x45",
				"\x1\x2A\x5\xFFFF\x1\x29",
				"\x1\x2A\x5\xFFFF\x1\x29",
				"\x1\x3D",
				"\x1\x2A\x5\xFFFF\x1\x29\xA\xFFFF\x1\x46",
				"\x1\x2A\x5\xFFFF\x1\x29\xA\xFFFF\x1\x2B",
				"\x1\x47",
				"\x1\x4B\xB\xFFFF\x1\x48\x4\xFFFF\x1\x49\x36\xFFFF\x1\x4A",
				"\x1\x12\x1B\xFFFF\x1\x13",
				"\x1\x4C",
				"\x1\x50\xB\xFFFF\x1\x4D\x4\xFFFF\x1\x4E\x36\xFFFF\x1\x4F",
				"\x1\x12\x1B\xFFFF\x1\x13",
				"\x1\x51",
				"\x1\x52",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x4B",
				"\x1\x41\x5\xFFFF\x1\x40\xA\xFFFF\x1\x53",
				"\x1\x41\x5\xFFFF\x1\x40\xA\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x50",
				"\x1\x44\x5\xFFFF\x1\x43\xA\xFFFF\x1\x54",
				"\x1\x44\x5\xFFFF\x1\x43\xA\xFFFF\x1\x45",
				"\x1\x2A\x5\xFFFF\x1\x29\xA\xFFFF\x1\x46",
				"\x1\x55",
				"\x1\x56",
				"\x1\x41\x5\xFFFF\x1\x40\xA\xFFFF\x1\x53",
				"\x1\x44\x5\xFFFF\x1\x43\xA\xFFFF\x1\x54"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "172:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x51\xFFFF";
		private const string DFA19_eofS =
			"\x51\xFFFF";
		private const string DFA19_minS =
			"\x3\x1F\x1\x4E\x1\x1F\x2\x47\x1\x1F\x2\xFFFF\x3\x1F\x1\x2A\x1\x1F\x1"+
			"\x4E\x1\x47\x2\x48\x1\x1F\x1\x48\x1\x1F\x2\x47\x1\x1F\x2\x48\x1\x1F\x1"+
			"\x48\x1\x1F\x1\x4E\x5\x1F\x1\x4E\x1\x1F\x2\x48\x1\x1F\x2\x48\x1\x47\x2"+
			"\x48\x1\x1F\x3\x48\x1\x1F\x3\x48\x1\x1F\x2\x48\x2\x1F\x1\x4E\x2\x1F\x1"+
			"\x4E\x2\x1F\x3\x48\x1\x1F\x4\x48\x1\x1F\x3\x48\x2\x1F\x2\x48";
		private const string DFA19_maxS =
			"\x1\x68\x1\x70\x1\x1F\x1\x5A\x1\x1F\x2\x6A\x1\x1F\x2\xFFFF\x1\x1F\x1"+
			"\x67\x1\x70\x1\x2A\x1\x67\x1\x5A\x1\x6A\x2\x4E\x1\x1F\x1\x59\x1\x1F\x2"+
			"\x6A\x1\x68\x2\x4E\x1\x1F\x1\x59\x1\x67\x1\x6A\x2\x1F\x3\x67\x1\x6A\x1"+
			"\x1F\x2\x4E\x1\x1F\x2\x59\x1\x6A\x2\x4E\x1\x1F\x1\x59\x2\x4E\x1\x1F\x1"+
			"\x59\x2\x4E\x1\x1F\x2\x59\x1\x1F\x1\x67\x1\x6A\x1\x1F\x1\x67\x1\x6A\x2"+
			"\x1F\x1\x59\x2\x4E\x1\x1F\x2\x59\x2\x4E\x1\x1F\x3\x59\x2\x1F\x2\x59";
		private const string DFA19_acceptS =
			"\x8\xFFFF\x1\x1\x1\x2\x47\xFFFF";
		private const string DFA19_specialS =
			"\x51\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x1\x3\x47\xFFFF\x1\x2\x1\x1",
				"\x1\x5\x47\xFFFF\x1\x4\x8\xFFFF\x1\x6",
				"\x1\x3",
				"\x1\x8\x9\xFFFF\x1\x8\x1\x7\x1\x9",
				"\x1\x5",
				"\x1\xB\x6\xFFFF\x1\xC\xA\xFFFF\x1\xA\x10\xFFFF\x1\xD",
				"\x1\xE\x6\xFFFF\x1\xC\x1B\xFFFF\x1\xD",
				"\x1\xF",
				"",
				"",
				"\x1\x10",
				"\x1\x14\xB\xFFFF\x1\x11\x4\xFFFF\x1\x12\x36\xFFFF\x1\x13",
				"\x1\x16\x47\xFFFF\x1\x15\x8\xFFFF\x1\x17",
				"\x1\x18",
				"\x1\x1C\xB\xFFFF\x1\x19\x4\xFFFF\x1\x1A\x36\xFFFF\x1\x1B",
				"\x1\x8\x9\xFFFF\x1\x8\x1\x7\x1\x9",
				"\x1\xB\x6\xFFFF\x1\xC\xA\xFFFF\x1\xA\x10\xFFFF\x1\xD",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x14",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x1F",
				"\x1\x16",
				"\x1\x21\x6\xFFFF\x1\xC\xA\xFFFF\x1\x20\x10\xFFFF\x1\xD",
				"\x1\x22\x6\xFFFF\x1\xC\x1B\xFFFF\x1\xD",
				"\x1\x3\xA\xFFFF\x1\x18\x3C\xFFFF\x1\x2\x1\x1",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x1C",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x25",
				"\x1\x29\xB\xFFFF\x1\x26\x4\xFFFF\x1\x27\x36\xFFFF\x1\x28",
				"\x1\xC\x1B\xFFFF\x1\xD",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2F\xB\xFFFF\x1\x2C\x4\xFFFF\x1\x2D\x36\xFFFF\x1\x2E",
				"\x1\x33\xB\xFFFF\x1\x30\x4\xFFFF\x1\x31\x36\xFFFF\x1\x32",
				"\x1\x37\xB\xFFFF\x1\x34\x4\xFFFF\x1\x35\x36\xFFFF\x1\x36",
				"\x1\xC\x1B\xFFFF\x1\xD",
				"\x1\x38",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x29",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x39",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x1F",
				"\x1\x21\x6\xFFFF\x1\xC\xA\xFFFF\x1\x20\x10\xFFFF\x1\xD",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x2F",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x33",
				"\x1\x3E\x5\xFFFF\x1\x3D\xA\xFFFF\x1\x3F",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x24\x5\xFFFF\x1\x23",
				"\x1\x37",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x40",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x25",
				"\x1\x41",
				"\x1\x45\xB\xFFFF\x1\x42\x4\xFFFF\x1\x43\x36\xFFFF\x1\x44",
				"\x1\xC\x1B\xFFFF\x1\xD",
				"\x1\x46",
				"\x1\x4A\xB\xFFFF\x1\x47\x4\xFFFF\x1\x48\x36\xFFFF\x1\x49",
				"\x1\xC\x1B\xFFFF\x1\xD",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x45",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x4D",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x3E\x5\xFFFF\x1\x3D\xA\xFFFF\x1\x4E",
				"\x1\x3E\x5\xFFFF\x1\x3D\xA\xFFFF\x1\x3F",
				"\x1\x24\x5\xFFFF\x1\x23\xA\xFFFF\x1\x40",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x4D",
				"\x1\x3E\x5\xFFFF\x1\x3D\xA\xFFFF\x1\x4E"
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "198:1: global_alloc : ( ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x4\xFFFF";
		private const string DFA25_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA25_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA25_maxS =
			"\x1\x2A\x1\x87\x2\xFFFF";
		private const string DFA25_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA25_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x16\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x3C\xFFFF\x2\x3\x6\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "215:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\x4\xFFFF";
		private const string DFA38_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA38_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA38_maxS =
			"\x1\x2A\x1\x87\x2\xFFFF";
		private const string DFA38_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA38_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x16\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x3C\xFFFF\x2\x3\x6\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "227:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA49 : DFA
	{
		private const string DFA49_eotS =
			"\x12\xFFFF";
		private const string DFA49_eofS =
			"\x12\xFFFF";
		private const string DFA49_minS =
			"\x1\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x4\x1F\x1\x45\x3\x1F\x1\x45\x1\x1F\x1"+
			"\x45\x1\x1F\x1\x45";
		private const string DFA49_maxS =
			"\x1\x87\x1\xFFFF\x1\x1F\x1\x87\x1\xFFFF\x1\x1F\x1\x80\x1\x87\x1\x1F\x1"+
			"\x68\x1\x1F\x1\x80\x1\x87\x1\x68\x1\x1F\x1\x68\x1\x1F\x1\x68";
		private const string DFA49_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xD\xFFFF";
		private const string DFA49_specialS =
			"\x12\xFFFF}>";
		private static readonly string[] DFA49_transitionS =
			{
				"\x1\x3\x47\xFFFF\x1\x2\x8\xFFFF\x1\x1\xF\xFFFF\x1\x1\x6\xFFFF\x1\x4",
				"",
				"\x1\x3",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x4\x1\xFFFF\x1\x1\xF\xFFFF\x1\x5"+
				"\x2\xFFFF\x1\x6\xA\xFFFF\x2\x1\x1E\xFFFF\x1\x1",
				"",
				"\x1\x7",
				"\x1\x9\x43\xFFFF\x1\x1\x3\xFFFF\x1\x8\x8\xFFFF\x1\x1\xF\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x4\x1\xFFFF\x1\x1\xF\xFFFF\x1\x5"+
				"\x2\xFFFF\x1\x6\xA\xFFFF\x2\x1\x1E\xFFFF\x1\x1",
				"\x1\x9",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\xA\xFFFF\x1\xA\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xC\x4\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xF\x47\xFFFF\x1\xE\x8\xFFFF\x1\x1\xF\xFFFF\x1\x1",
				"\x1\x1\x25\xFFFF\x1\x1\x1\xFFFF\x1\x4\x1\xFFFF\x1\x1\x1D\xFFFF\x2\x1"+
				"\x1E\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\xA\xFFFF\x1\xA\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xC\x4\xFFFF\x1\x1",
				"\x1\xF",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\xA\xFFFF\x1\x10\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xC\x4\xFFFF\x1\x1",
				"\x1\x11",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\xA\xFFFF\x1\x10\x2\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\xC\x4\xFFFF\x1\x1"
			};

		private static readonly short[] DFA49_eot = DFA.UnpackEncodedString(DFA49_eotS);
		private static readonly short[] DFA49_eof = DFA.UnpackEncodedString(DFA49_eofS);
		private static readonly char[] DFA49_min = DFA.UnpackEncodedStringToUnsignedChars(DFA49_minS);
		private static readonly char[] DFA49_max = DFA.UnpackEncodedStringToUnsignedChars(DFA49_maxS);
		private static readonly short[] DFA49_accept = DFA.UnpackEncodedString(DFA49_acceptS);
		private static readonly short[] DFA49_special = DFA.UnpackEncodedString(DFA49_specialS);
		private static readonly short[][] DFA49_transition;

		static DFA49()
		{
			int numStates = DFA49_transitionS.Length;
			DFA49_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA49_transition[i] = DFA.UnpackEncodedString(DFA49_transitionS[i]);
			}
		}

		public DFA49( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}

		public override string Description { get { return "248:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA59 : DFA
	{
		private const string DFA59_eotS =
			"\xA\xFFFF";
		private const string DFA59_eofS =
			"\xA\xFFFF";
		private const string DFA59_minS =
			"\x2\x1F\x1\x2A\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x2A";
		private const string DFA59_maxS =
			"\x1\x81\x1\x1F\x1\x85\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x85";
		private const string DFA59_acceptS =
			"\x3\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA59_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA59_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x6\x1F\xFFFF\x1\x1\x15\xFFFF\x1\x3\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x1\x4",
				"\x1\x2",
				"\x1\x6\x18\xFFFF\x1\x6\x2\xFFFF\x2\x6\x2\xFFFF\x1\x6\x1\xFFFF\x2\x6"+
				"\x1\x8\x1\xFFFF\x3\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\x8\x1\x7\x1\x8"+
				"\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x5\xFFFF\x1\x6\x1\xFFFF"+
				"\x1\x6\x3\xFFFF\x1\x6\x18\xFFFF\x1\x6",
				"",
				"",
				"",
				"",
				"\x1\x9",
				"",
				"\x1\x6\x18\xFFFF\x1\x6\x2\xFFFF\x2\x6\x2\xFFFF\x1\x6\x1\xFFFF\x2\x6"+
				"\x1\x8\x1\xFFFF\x3\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\x8\x1\x7\x1\x8"+
				"\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x5\xFFFF\x1\x6\x1\xFFFF"+
				"\x1\x6\x3\xFFFF\x1\x6\x18\xFFFF\x1\x6"
			};

		private static readonly short[] DFA59_eot = DFA.UnpackEncodedString(DFA59_eotS);
		private static readonly short[] DFA59_eof = DFA.UnpackEncodedString(DFA59_eofS);
		private static readonly char[] DFA59_min = DFA.UnpackEncodedStringToUnsignedChars(DFA59_minS);
		private static readonly char[] DFA59_max = DFA.UnpackEncodedStringToUnsignedChars(DFA59_maxS);
		private static readonly short[] DFA59_accept = DFA.UnpackEncodedString(DFA59_acceptS);
		private static readonly short[] DFA59_special = DFA.UnpackEncodedString(DFA59_specialS);
		private static readonly short[][] DFA59_transition;

		static DFA59()
		{
			int numStates = DFA59_transitionS.Length;
			DFA59_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA59_transition[i] = DFA.UnpackEncodedString(DFA59_transitionS[i]);
			}
		}

		public DFA59( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}

		public override string Description { get { return "266:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA64 : DFA
	{
		private const string DFA64_eotS =
			"\x4\xFFFF";
		private const string DFA64_eofS =
			"\x4\xFFFF";
		private const string DFA64_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA64_maxS =
			"\x1\x72\x1\x83\x2\xFFFF";
		private const string DFA64_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA64_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA64_transitionS =
			{
				"\x1\x1\x47\xFFFF\x1\x2",
				"\x1\x3\x16\xFFFF\x1\x3\xA\xFFFF\x1\x1\x1C\xFFFF\x1\x3\x1F\xFFFF\x1"+
				"\x3\x9\xFFFF\x1\x3\x1\x2\x1\xFFFF\x3\x3\x2\xFFFF\x2\x3\x2\xFFFF\x3\x3"+
				"\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA64_eot = DFA.UnpackEncodedString(DFA64_eotS);
		private static readonly short[] DFA64_eof = DFA.UnpackEncodedString(DFA64_eofS);
		private static readonly char[] DFA64_min = DFA.UnpackEncodedStringToUnsignedChars(DFA64_minS);
		private static readonly char[] DFA64_max = DFA.UnpackEncodedStringToUnsignedChars(DFA64_maxS);
		private static readonly short[] DFA64_accept = DFA.UnpackEncodedString(DFA64_acceptS);
		private static readonly short[] DFA64_special = DFA.UnpackEncodedString(DFA64_specialS);
		private static readonly short[][] DFA64_transition;

		static DFA64()
		{
			int numStates = DFA64_transitionS.Length;
			DFA64_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA64_transition[i] = DFA.UnpackEncodedString(DFA64_transitionS[i]);
			}
		}

		public DFA64( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 64;
			this.eot = DFA64_eot;
			this.eof = DFA64_eof;
			this.min = DFA64_min;
			this.max = DFA64_max;
			this.accept = DFA64_accept;
			this.special = DFA64_special;
			this.transition = DFA64_transition;
		}

		public override string Description { get { return "292:25: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA75 : DFA
	{
		private const string DFA75_eotS =
			"\x7\xFFFF";
		private const string DFA75_eofS =
			"\x7\xFFFF";
		private const string DFA75_minS =
			"\x2\x1F\x1\x4E\x1\x1F\x2\xFFFF\x1\x4E";
		private const string DFA75_maxS =
			"\x1\x67\x1\x1F\x1\x5A\x1\x1F\x2\xFFFF\x1\x5A";
		private const string DFA75_acceptS =
			"\x4\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA75_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA75_transitionS =
			{
				"\x1\x2\x47\xFFFF\x1\x1",
				"\x1\x2",
				"\x1\x4\x9\xFFFF\x1\x4\x1\x3\x1\x5",
				"\x1\x6",
				"",
				"",
				"\x1\x4\x9\xFFFF\x1\x4\x1\x3\x1\x5"
			};

		private static readonly short[] DFA75_eot = DFA.UnpackEncodedString(DFA75_eotS);
		private static readonly short[] DFA75_eof = DFA.UnpackEncodedString(DFA75_eofS);
		private static readonly char[] DFA75_min = DFA.UnpackEncodedStringToUnsignedChars(DFA75_minS);
		private static readonly char[] DFA75_max = DFA.UnpackEncodedStringToUnsignedChars(DFA75_maxS);
		private static readonly short[] DFA75_accept = DFA.UnpackEncodedString(DFA75_acceptS);
		private static readonly short[] DFA75_special = DFA.UnpackEncodedString(DFA75_specialS);
		private static readonly short[][] DFA75_transition;

		static DFA75()
		{
			int numStates = DFA75_transitionS.Length;
			DFA75_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA75_transition[i] = DFA.UnpackEncodedString(DFA75_transitionS[i]);
			}
		}

		public DFA75( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 75;
			this.eot = DFA75_eot;
			this.eof = DFA75_eof;
			this.min = DFA75_min;
			this.max = DFA75_max;
			this.accept = DFA75_accept;
			this.special = DFA75_special;
			this.transition = DFA75_transition;
		}

		public override string Description { get { return "332:1: stmt_alloc : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ident ':=' ^ modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root455 = new BitSet(new ulong[]{0x40080000000UL,0x8889818000000000UL,0x83UL});
		public static readonly BitSet _global_block_in_root458 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block480 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block482 = new BitSet(new ulong[]{0x40080000002UL,0x8889818000000000UL,0x83UL});
		public static readonly BitSet _func_def_in_node505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item573 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _71_in_attribute_item576 = new BitSet(new ulong[]{0x1080080000000UL,0x8000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item578 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_attribute_item581 = new BitSet(new ulong[]{0x1080080000000UL,0x8000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item583 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_attribute_item587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_attribute_item605 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _71_in_attribute_item608 = new BitSet(new ulong[]{0x1080080000000UL,0x8000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item610 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_attribute_item613 = new BitSet(new ulong[]{0x1080080000000UL,0x8000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item615 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_attribute_item619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_attribute644 = new BitSet(new ulong[]{0x80000000UL,0x1008000000000UL});
		public static readonly BitSet _attribute_item_in_attribute646 = new BitSet(new ulong[]{0x0UL,0x40000004000UL});
		public static readonly BitSet _78_in_attribute649 = new BitSet(new ulong[]{0x80000000UL,0x1008000000000UL});
		public static readonly BitSet _attribute_item_in_attribute651 = new BitSet(new ulong[]{0x0UL,0x40000004000UL});
		public static readonly BitSet _106_in_attribute655 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute657 = new BitSet(new ulong[]{0x40000000002UL,0x10000000000UL});
		public static readonly BitSet _attribute_in_global_alloc676 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc679 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_global_alloc681 = new BitSet(new ulong[]{0x80000000UL,0x1008000000000UL,0x1UL});
		public static readonly BitSet _type_name_in_global_alloc683 = new BitSet(new ulong[]{0x2UL,0x104000080UL});
		public static readonly BitSet _96_in_global_alloc688 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _90_in_global_alloc692 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_global_alloc695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_global_alloc754 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019BA1UL,0x80UL});
		public static readonly BitSet _expr_list_in_global_alloc756 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_global_alloc759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_global_alloc821 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_global_alloc824 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_global_alloc826 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _modify_expr_in_global_alloc828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_import_def874 = new BitSet(new ulong[]{0x1040000000002UL});
		public static readonly BitSet _STRING_in_import_def876 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def880 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_import_def883 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def885 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _STRING_in_import_def890 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def892 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _DEDENT_in_import_def897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def919 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_enum_def922 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_enum_def924 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_enum_def926 = new BitSet(new ulong[]{0x80000002UL,0x8000000000UL});
		public static readonly BitSet _ident_in_enum_def929 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_enum_def932 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_enum_def934 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _123_in_namespace_def967 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_namespace_def969 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def971 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_namespace_def974 = new BitSet(new ulong[]{0x40080000100UL,0x8889818000000000UL,0x83UL});
		public static readonly BitSet _NEWLINE_in_namespace_def976 = new BitSet(new ulong[]{0x40080000100UL,0x8889818000000000UL,0x83UL});
		public static readonly BitSet _global_block_in_namespace_def979 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1003 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_class_def1006 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_class_def1008 = new BitSet(new ulong[]{0x40000000002UL,0x11000080UL});
		public static readonly BitSet _generic_parameter_in_class_def1011 = new BitSet(new ulong[]{0x40000000002UL,0x1000080UL});
		public static readonly BitSet _71_in_class_def1016 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _func_args_in_class_def1018 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_class_def1020 = new BitSet(new ulong[]{0x40000000002UL,0x1000000UL});
		public static readonly BitSet _88_in_class_def1025 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_class_def1027 = new BitSet(new ulong[]{0x40000000002UL,0x4000UL});
		public static readonly BitSet _78_in_class_def1030 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_class_def1032 = new BitSet(new ulong[]{0x40000000002UL,0x4000UL});
		public static readonly BitSet _NEWLINE_in_class_def1039 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_class_def1042 = new BitSet(new ulong[]{0x40080000100UL,0x8889818000000000UL,0x83UL});
		public static readonly BitSet _NEWLINE_in_class_def1044 = new BitSet(new ulong[]{0x40080000100UL,0x8889818000000000UL,0x83UL});
		public static readonly BitSet _global_block_in_class_def1047 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_type_name_op1090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_type_name_op1094 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_type_name_op1096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_type_name_op1100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_type_name1109 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL,0x1UL});
		public static readonly BitSet _128_in_type_name1112 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_type_name1115 = new BitSet(new ulong[]{0x2UL,0x10010000220UL});
		public static readonly BitSet _92_in_type_name1118 = new BitSet(new ulong[]{0x80000000UL,0x1008800000000UL,0x1UL});
		public static readonly BitSet _type_name_in_type_name1121 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _78_in_type_name1124 = new BitSet(new ulong[]{0x80000000UL,0x1008000000000UL,0x1UL});
		public static readonly BitSet _type_name_in_type_name1126 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _99_in_type_name1132 = new BitSet(new ulong[]{0x2UL,0x10000000220UL});
		public static readonly BitSet _type_name_op_in_type_name1136 = new BitSet(new ulong[]{0x2UL,0x10000000220UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1176 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_generic_parameter_inside1179 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1181 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _92_in_generic_parameter1203 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1205 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_generic_parameter1207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_func_args1222 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_func_args1225 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args1227 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _attribute_in_func_def1249 = new BitSet(new ulong[]{0x80000000UL,0x1008000000000UL,0x81UL});
		public static readonly BitSet _type_name_in_func_def1252 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL,0x80UL});
		public static readonly BitSet _135_in_func_def1255 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_func_def1258 = new BitSet(new ulong[]{0x0UL,0x10000080UL});
		public static readonly BitSet _generic_parameter_in_func_def1260 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_func_def1263 = new BitSet(new ulong[]{0x80000000UL,0x8000000100UL});
		public static readonly BitSet _func_args_in_func_def1265 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_func_def1268 = new BitSet(new ulong[]{0x40000000000UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1271 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _stmt_block_in_func_def1274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_func_def1323 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_func_def1325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1366 = new BitSet(new ulong[]{0x40080000100UL,0xE672008000000080UL,0xEUL});
		public static readonly BitSet _NEWLINE_in_stmt_block1368 = new BitSet(new ulong[]{0x40080000100UL,0xE672008000000080UL,0xEUL});
		public static readonly BitSet _stmt_in_stmt_block1373 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1375 = new BitSet(new ulong[]{0x40080000100UL,0xE672008000000080UL,0xEUL});
		public static readonly BitSet _DEDENT_in_stmt_block1380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr1441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr1446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr1461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_stmt_defer1472 = new BitSet(new ulong[]{0x80000000UL,0xE672008000000080UL,0xEUL});
		public static readonly BitSet _stmt_in_stmt_defer1474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_stmt_typedef1493 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1495 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_stmt_typedef1497 = new BitSet(new ulong[]{0x80000000UL,0x1008000000000UL,0x1UL});
		public static readonly BitSet _type_name_in_stmt_typedef1499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_stmt_using_item1522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_using1530 = new BitSet(new ulong[]{0x80000002UL,0x800008000000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1532 = new BitSet(new ulong[]{0x80000002UL,0x800008000000000UL});
		public static readonly BitSet _125_in_stmt_return1553 = new BitSet(new ulong[]{0x1080080000002UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_stmt_return1555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_stmt_if1576 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_stmt_if1578 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1580 = new BitSet(new ulong[]{0x40000000002UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1583 = new BitSet(new ulong[]{0x40000000000UL,0x4000000000000UL});
		public static readonly BitSet _114_in_stmt_if1586 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_stmt_while1614 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_stmt_while1616 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_stmt_while1633 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_for1659 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stmt_for1661 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_stmt_for1663 = new BitSet(new ulong[]{0x0UL,0x100000008000000UL});
		public static readonly BitSet _91_in_stmt_for1666 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_stmt_for1668 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_stmt_for1670 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_stmt_for1672 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _120_in_stmt_for1678 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_stmt_for1680 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_for1685 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_stmt_try1732 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1734 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_stmt_try1736 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_stmt_try1738 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_linq_item1763 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_linq_item1765 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_linq_item1767 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_linq_item1769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_linq_item1784 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_linq_item1786 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_linq_item1788 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_linq_item1790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_linq_item1805 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_linq_item1807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _linq_item_in_linq_prefix1827 = new BitSet(new ulong[]{0x40000000000UL,0x220000000000000UL,0x4UL});
		public static readonly BitSet _linq_item_in_linq_prefix1829 = new BitSet(new ulong[]{0x40000000000UL,0x220000000000000UL,0x4UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix1832 = new BitSet(new ulong[]{0x40000000002UL,0x220000000000000UL,0x4UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq1855 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq1857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list1878 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_ident_list1881 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_ident_list1883 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc1905 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_stmt_alloc1907 = new BitSet(new ulong[]{0x80000000UL,0x1008000000000UL,0x1UL});
		public static readonly BitSet _type_name_in_stmt_alloc1909 = new BitSet(new ulong[]{0x2UL,0x104000080UL});
		public static readonly BitSet _96_in_stmt_alloc1914 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _90_in_stmt_alloc1918 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_stmt_alloc1921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_stmt_alloc1967 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019BA1UL,0x80UL});
		public static readonly BitSet _expr_list_in_stmt_alloc1969 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_alloc1972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_alloc2025 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_stmt_alloc2027 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc2030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify2041 = new BitSet(new ulong[]{0x2UL,0x104140822448UL,0x20UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify2044 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_lambda_expr2071 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_lambda_expr2073 = new BitSet(new ulong[]{0x80000000UL,0x8000000100UL});
		public static readonly BitSet _func_args_in_lambda_expr2075 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_lambda_expr2078 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_lambda_expr2080 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _lambda_expr_in_lambda_expr2082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr2098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr2156 = new BitSet(new ulong[]{0x2UL,0x104144822448UL,0x20UL});
		public static readonly BitSet _set_in_modify_expr2160 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _cond_expr_in_modify_expr2205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_modify_expr2214 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _cond_expr_in_modify_expr2217 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item2230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr2242 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _118_in_cond_expr2251 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2255 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_cond_expr2257 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr2292 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _134_in_or_expr2301 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _and_expr_in_or_expr2305 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _bit_or_in_and_expr2335 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _68_in_and_expr2344 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _bit_or_in_and_expr2348 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _bit_xor_in_bit_or2378 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_bit_or2387 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _bit_xor_in_bit_or2391 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _bit_and_in_bit_xor2421 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _107_in_bit_xor2430 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _bit_and_in_bit_xor2434 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2464 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_bit_and2473 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2477 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2518 = new BitSet(new ulong[]{0x2UL,0x200000002UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr2527 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _infix_expr_in_cmp_expr2562 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _92_in_cmp_expr2572 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _infix_expr_in_cmp_expr2576 = new BitSet(new ulong[]{0x80000002UL,0x9890000000UL});
		public static readonly BitSet _ident_in_cmp_expr2582 = new BitSet(new ulong[]{0x80000000UL,0x8800000000UL});
		public static readonly BitSet _99_in_cmp_expr2585 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_cmp_expr2587 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019BA1UL,0x80UL});
		public static readonly BitSet _expr_list_in_cmp_expr2589 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_cmp_expr2592 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _95_in_cmp_expr2702 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _infix_expr_in_cmp_expr2706 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _99_in_cmp_expr2733 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _infix_expr_in_cmp_expr2737 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _100_in_cmp_expr2764 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _infix_expr_in_cmp_expr2768 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _shift_expr_in_infix_expr2798 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr2808 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _shift_expr_in_infix_expr2812 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr2855 = new BitSet(new ulong[]{0x2UL,0x2020000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr2864 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _add_expr_in_shift_expr2868 = new BitSet(new ulong[]{0x2UL,0x2020000000UL});
		public static readonly BitSet _mul_expr_in_add_expr2898 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _75_in_add_expr2908 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _mul_expr_in_add_expr2912 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _79_in_add_expr2937 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _mul_expr_in_add_expr2941 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _selector_expr_in_mul_expr2979 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _73_in_mul_expr2989 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _selector_expr_in_mul_expr2993 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _86_in_mul_expr3023 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _selector_expr_in_mul_expr3027 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _66_in_mul_expr3057 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _selector_expr_in_mul_expr3061 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _prefix_expr_in_selector_expr3104 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _83_in_selector_expr3114 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_selector_expr3118 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _85_in_selector_expr3146 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_selector_expr3151 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr3226 = new BitSet(new ulong[]{0x1080080000000UL,0x1000008000019AA1UL,0x80UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr3228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_prefix_expr3244 = new BitSet(new ulong[]{0x80000000UL,0x1008000000000UL,0x1UL});
		public static readonly BitSet _type_name_in_prefix_expr3246 = new BitSet(new ulong[]{0x0UL,0x10000000080UL});
		public static readonly BitSet _71_in_prefix_expr3250 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019BA1UL,0x80UL});
		public static readonly BitSet _expr_list_in_prefix_expr3252 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_prefix_expr3255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_prefix_expr3277 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_list_in_prefix_expr3279 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_prefix_expr3281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr3297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list3309 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_expr_list3312 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_expr_list3315 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr3331 = new BitSet(new ulong[]{0x2UL,0x10001151080UL});
		public static readonly BitSet _76_in_suffix_expr3341 = new BitSet(new ulong[]{0x2UL,0x10001151080UL});
		public static readonly BitSet _80_in_suffix_expr3367 = new BitSet(new ulong[]{0x2UL,0x10001151080UL});
		public static readonly BitSet _84_in_suffix_expr3390 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_suffix_expr3392 = new BitSet(new ulong[]{0x2UL,0x10001151080UL});
		public static readonly BitSet _82_in_suffix_expr3417 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_suffix_expr3419 = new BitSet(new ulong[]{0x2UL,0x10001151080UL});
		public static readonly BitSet _71_in_suffix_expr3444 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019BA1UL,0x80UL});
		public static readonly BitSet _expr_list_in_suffix_expr3446 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_suffix_expr3449 = new BitSet(new ulong[]{0x2UL,0x10001151080UL});
		public static readonly BitSet _104_in_suffix_expr3473 = new BitSet(new ulong[]{0x1080080000000UL,0x1000068000019AA1UL,0x80UL});
		public static readonly BitSet _expr_list_in_suffix_expr3475 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_suffix_expr3478 = new BitSet(new ulong[]{0x2UL,0x10001151080UL});
		public static readonly BitSet _88_in_suffix_expr3502 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_suffix_expr3504 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_suffix_expr3506 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019BA1UL,0x80UL});
		public static readonly BitSet _expr_list_in_suffix_expr3508 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_suffix_expr3511 = new BitSet(new ulong[]{0x2UL,0x10001151080UL});
		public static readonly BitSet _NUMBER_in_atom_expr3550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr3555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr3560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_atom_expr3565 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_atom_expr3567 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_atom_expr3572 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019AA1UL,0x80UL});
		public static readonly BitSet _expr_in_atom_expr3574 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_atom_expr3578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_atom_expr3603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item3633 = new BitSet(new ulong[]{0x2UL,0x10010151080UL});
		public static readonly BitSet _76_in_lvalue_item3643 = new BitSet(new ulong[]{0x2UL,0x10010151080UL});
		public static readonly BitSet _80_in_lvalue_item3671 = new BitSet(new ulong[]{0x2UL,0x10010151080UL});
		public static readonly BitSet _84_in_lvalue_item3696 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_lvalue_item3698 = new BitSet(new ulong[]{0x2UL,0x10010151080UL});
		public static readonly BitSet _82_in_lvalue_item3725 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_lvalue_item3727 = new BitSet(new ulong[]{0x2UL,0x10010151080UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item3754 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_lvalue_item3757 = new BitSet(new ulong[]{0x1080080000000UL,0x1000028000019BA1UL,0x80UL});
		public static readonly BitSet _expr_list_in_lvalue_item3759 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_lvalue_item3762 = new BitSet(new ulong[]{0x2UL,0x10010151080UL});
		public static readonly BitSet _104_in_lvalue_item3791 = new BitSet(new ulong[]{0x1080080000000UL,0x1000068000019AA1UL,0x80UL});
		public static readonly BitSet _expr_list_in_lvalue_item3793 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_lvalue_item3796 = new BitSet(new ulong[]{0x2UL,0x10010151080UL});
		public static readonly BitSet _ident_in_lvalue_atom3835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_lvalue3846 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue3848 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_lvalue3851 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue3853 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_lvalue3857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue3871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_ident3882 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident3885 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_ident3888 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident3890 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _109_in_infix_func3903 = new BitSet(new ulong[]{0x80000000UL,0x8000000000UL});
		public static readonly BitSet _ident_in_infix_func3906 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_infix_func3908 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
