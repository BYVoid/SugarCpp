//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-04-28 16:39:51

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Expr_Alloc", "Expr_Alloc_Auto", "Expr_Bin", "Expr_Block", "Expr_Cond", "Expr_Match_Tuple", "Expr_New", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_If", "Stmt_While", "Type_Tuple", "'%'", "'('", "')'", "'*'", "'+'", "'++'", "','", "'-'", "'--'", "'/'", "'<'", "'='", "'>'", "'return'", "'|'"
	};
	public const int EOF=-1;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Expr_Alloc=7;
	public const int Expr_Alloc_Auto=8;
	public const int Expr_Bin=9;
	public const int Expr_Block=10;
	public const int Expr_Cond=11;
	public const int Expr_Match_Tuple=12;
	public const int Expr_New=13;
	public const int Expr_Return=14;
	public const int Expr_Suffix=15;
	public const int Expr_Tuple=16;
	public const int Func_Def=17;
	public const int IDENT=18;
	public const int INDENT=19;
	public const int INT=20;
	public const int Left_Bracket=21;
	public const int NEWLINE=22;
	public const int Right_Bracket=23;
	public const int Root=24;
	public const int SP=25;
	public const int STRING=26;
	public const int Stmt_If=27;
	public const int Stmt_While=28;
	public const int Type_Tuple=29;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:113:8: public root : ( node ( NEWLINE )* )+ EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE2 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE2_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(113, 1);
		try
		{
			// SugarCpp.g:114:2: ( ( node ( NEWLINE )* )+ EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:114:4: ( node ( NEWLINE )* )+ EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(114, 4);
			// SugarCpp.g:114:4: ( node ( NEWLINE )* )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==IDENT||LA2_0==31))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:114:5: node ( NEWLINE )*
					{
					DebugLocation(114, 5);
					PushFollow(Follow._node_in_root245);
					node1=node();
					PopFollow();

					adaptor.AddChild(root_0, node1.Tree);
					DebugLocation(114, 10);
					// SugarCpp.g:114:10: ( NEWLINE )*
					try { DebugEnterSubRule(1);
					while (true)
					{
						int alt1=2;
						try { DebugEnterDecision(1, false);
						int LA1_0 = input.LA(1);

						if ((LA1_0==NEWLINE))
						{
							alt1 = 1;
						}


						} finally { DebugExitDecision(1); }
						switch ( alt1 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:114:10: NEWLINE
							{
							DebugLocation(114, 10);
							NEWLINE2=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root247); 
							NEWLINE2_tree = (CommonTree)adaptor.Create(NEWLINE2);
							adaptor.AddChild(root_0, NEWLINE2_tree);

							}
							break;

						default:
							goto loop1;
						}
					}

					loop1:
						;

					} finally { DebugExitSubRule(1); }


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(114, 21);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root252); 
			EOF3_tree = (CommonTree)adaptor.Create(EOF3);
			adaptor.AddChild(root_0, EOF3_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:117:1: node : func_def ;
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(117, 1);
		try
		{
			// SugarCpp.g:118:2: ( func_def )
			DebugEnterAlt(1);
			// SugarCpp.g:118:4: func_def
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(118, 4);
			PushFollow(Follow._func_def_in_node263);
			func_def4=func_def();
			PopFollow();

			adaptor.AddChild(root_0, func_def4.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:121:1: type_name : IDENT ( '<' type_name ( ',' type_name )* '>' )* ( '*' )* ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 3);
		TraceIn("type_name", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT5 = default(IToken);
		IToken char_literal6 = default(IToken);
		IToken char_literal8 = default(IToken);
		IToken char_literal10 = default(IToken);
		IToken char_literal11 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name9 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT5_tree = default(CommonTree);
		CommonTree char_literal6_tree = default(CommonTree);
		CommonTree char_literal8_tree = default(CommonTree);
		CommonTree char_literal10_tree = default(CommonTree);
		CommonTree char_literal11_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(121, 1);
		try
		{
			// SugarCpp.g:122:2: ( IDENT ( '<' type_name ( ',' type_name )* '>' )* ( '*' )* )
			DebugEnterAlt(1);
			// SugarCpp.g:122:4: IDENT ( '<' type_name ( ',' type_name )* '>' )* ( '*' )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(122, 4);
			IDENT5=(IToken)Match(input,IDENT,Follow._IDENT_in_type_name274); 
			IDENT5_tree = (CommonTree)adaptor.Create(IDENT5);
			adaptor.AddChild(root_0, IDENT5_tree);
			DebugLocation(122, 10);
			// SugarCpp.g:122:10: ( '<' type_name ( ',' type_name )* '>' )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0==40))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:122:11: '<' type_name ( ',' type_name )* '>'
					{
					DebugLocation(122, 11);
					char_literal6=(IToken)Match(input,40,Follow._40_in_type_name277); 
					char_literal6_tree = (CommonTree)adaptor.Create(char_literal6);
					adaptor.AddChild(root_0, char_literal6_tree);
					DebugLocation(122, 15);
					PushFollow(Follow._type_name_in_type_name279);
					type_name7=type_name();
					PopFollow();

					adaptor.AddChild(root_0, type_name7.Tree);
					DebugLocation(122, 25);
					// SugarCpp.g:122:25: ( ',' type_name )*
					try { DebugEnterSubRule(3);
					while (true)
					{
						int alt3=2;
						try { DebugEnterDecision(3, false);
						int LA3_0 = input.LA(1);

						if ((LA3_0==36))
						{
							alt3 = 1;
						}


						} finally { DebugExitDecision(3); }
						switch ( alt3 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:122:26: ',' type_name
							{
							DebugLocation(122, 26);
							char_literal8=(IToken)Match(input,36,Follow._36_in_type_name282); 
							char_literal8_tree = (CommonTree)adaptor.Create(char_literal8);
							adaptor.AddChild(root_0, char_literal8_tree);
							DebugLocation(122, 30);
							PushFollow(Follow._type_name_in_type_name284);
							type_name9=type_name();
							PopFollow();

							adaptor.AddChild(root_0, type_name9.Tree);

							}
							break;

						default:
							goto loop3;
						}
					}

					loop3:
						;

					} finally { DebugExitSubRule(3); }

					DebugLocation(122, 42);
					char_literal10=(IToken)Match(input,42,Follow._42_in_type_name288); 
					char_literal10_tree = (CommonTree)adaptor.Create(char_literal10);
					adaptor.AddChild(root_0, char_literal10_tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(122, 48);
			// SugarCpp.g:122:48: ( '*' )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==33))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:122:49: '*'
					{
					DebugLocation(122, 49);
					char_literal11=(IToken)Match(input,33,Follow._33_in_type_name293); 
					char_literal11_tree = (CommonTree)adaptor.Create(char_literal11);
					adaptor.AddChild(root_0, char_literal11_tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 3);
			LeaveRule("type_name", 3);
			LeaveRule_type_name();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_type_name();
	partial void LeaveRule_func_type_name();

	// $ANTLR start "func_type_name"
	// SugarCpp.g:125:1: func_type_name : ( IDENT ( '<' func_type_name ( ',' func_type_name )* '>' )* ( '*' )* | '(' func_type_name ( ',' func_type_name ) ')' -> ^( Type_Tuple ( func_type_name )+ ) );
	[GrammarRule("func_type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type_name()
	{
		EnterRule_func_type_name();
		EnterRule("func_type_name", 4);
		TraceIn("func_type_name", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT12 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken char_literal15 = default(IToken);
		IToken char_literal17 = default(IToken);
		IToken char_literal18 = default(IToken);
		IToken char_literal19 = default(IToken);
		IToken char_literal21 = default(IToken);
		IToken char_literal23 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_type_name14 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type_name16 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type_name20 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type_name22 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT12_tree = default(CommonTree);
		CommonTree char_literal13_tree = default(CommonTree);
		CommonTree char_literal15_tree = default(CommonTree);
		CommonTree char_literal17_tree = default(CommonTree);
		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal19_tree = default(CommonTree);
		CommonTree char_literal21_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		RewriteRuleITokenStream stream_32=new RewriteRuleITokenStream(adaptor,"token 32");
		RewriteRuleITokenStream stream_31=new RewriteRuleITokenStream(adaptor,"token 31");
		RewriteRuleITokenStream stream_36=new RewriteRuleITokenStream(adaptor,"token 36");
		RewriteRuleSubtreeStream stream_func_type_name=new RewriteRuleSubtreeStream(adaptor,"rule func_type_name");
		try { DebugEnterRule(GrammarFileName, "func_type_name");
		DebugLocation(125, 1);
		try
		{
			// SugarCpp.g:126:2: ( IDENT ( '<' func_type_name ( ',' func_type_name )* '>' )* ( '*' )* | '(' func_type_name ( ',' func_type_name ) ')' -> ^( Type_Tuple ( func_type_name )+ ) )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==IDENT))
			{
				alt9 = 1;
			}
			else if ((LA9_0==31))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:126:4: IDENT ( '<' func_type_name ( ',' func_type_name )* '>' )* ( '*' )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(126, 4);
				IDENT12=(IToken)Match(input,IDENT,Follow._IDENT_in_func_type_name306); 
				IDENT12_tree = (CommonTree)adaptor.Create(IDENT12);
				adaptor.AddChild(root_0, IDENT12_tree);
				DebugLocation(126, 10);
				// SugarCpp.g:126:10: ( '<' func_type_name ( ',' func_type_name )* '>' )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_0 = input.LA(1);

					if ((LA7_0==40))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:126:11: '<' func_type_name ( ',' func_type_name )* '>'
						{
						DebugLocation(126, 11);
						char_literal13=(IToken)Match(input,40,Follow._40_in_func_type_name309); 
						char_literal13_tree = (CommonTree)adaptor.Create(char_literal13);
						adaptor.AddChild(root_0, char_literal13_tree);
						DebugLocation(126, 15);
						PushFollow(Follow._func_type_name_in_func_type_name311);
						func_type_name14=func_type_name();
						PopFollow();

						adaptor.AddChild(root_0, func_type_name14.Tree);
						DebugLocation(126, 30);
						// SugarCpp.g:126:30: ( ',' func_type_name )*
						try { DebugEnterSubRule(6);
						while (true)
						{
							int alt6=2;
							try { DebugEnterDecision(6, false);
							int LA6_0 = input.LA(1);

							if ((LA6_0==36))
							{
								alt6 = 1;
							}


							} finally { DebugExitDecision(6); }
							switch ( alt6 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:126:31: ',' func_type_name
								{
								DebugLocation(126, 31);
								char_literal15=(IToken)Match(input,36,Follow._36_in_func_type_name314); 
								char_literal15_tree = (CommonTree)adaptor.Create(char_literal15);
								adaptor.AddChild(root_0, char_literal15_tree);
								DebugLocation(126, 35);
								PushFollow(Follow._func_type_name_in_func_type_name316);
								func_type_name16=func_type_name();
								PopFollow();

								adaptor.AddChild(root_0, func_type_name16.Tree);

								}
								break;

							default:
								goto loop6;
							}
						}

						loop6:
							;

						} finally { DebugExitSubRule(6); }

						DebugLocation(126, 52);
						char_literal17=(IToken)Match(input,42,Follow._42_in_func_type_name320); 
						char_literal17_tree = (CommonTree)adaptor.Create(char_literal17);
						adaptor.AddChild(root_0, char_literal17_tree);

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(126, 58);
				// SugarCpp.g:126:58: ( '*' )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0==33))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:126:59: '*'
						{
						DebugLocation(126, 59);
						char_literal18=(IToken)Match(input,33,Follow._33_in_func_type_name325); 
						char_literal18_tree = (CommonTree)adaptor.Create(char_literal18);
						adaptor.AddChild(root_0, char_literal18_tree);

						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:127:4: '(' func_type_name ( ',' func_type_name ) ')'
				{
				DebugLocation(127, 4);
				char_literal19=(IToken)Match(input,31,Follow._31_in_func_type_name332);  
				stream_31.Add(char_literal19);

				DebugLocation(127, 8);
				PushFollow(Follow._func_type_name_in_func_type_name334);
				func_type_name20=func_type_name();
				PopFollow();

				stream_func_type_name.Add(func_type_name20.Tree);
				DebugLocation(127, 23);
				// SugarCpp.g:127:23: ( ',' func_type_name )
				DebugEnterAlt(1);
				// SugarCpp.g:127:24: ',' func_type_name
				{
				DebugLocation(127, 24);
				char_literal21=(IToken)Match(input,36,Follow._36_in_func_type_name337);  
				stream_36.Add(char_literal21);

				DebugLocation(127, 28);
				PushFollow(Follow._func_type_name_in_func_type_name339);
				func_type_name22=func_type_name();
				PopFollow();

				stream_func_type_name.Add(func_type_name22.Tree);

				}

				DebugLocation(127, 44);
				char_literal23=(IToken)Match(input,32,Follow._32_in_func_type_name342);  
				stream_32.Add(char_literal23);



				{
				// AST REWRITE
				// elements: func_type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 127:48: -> ^( Type_Tuple ( func_type_name )+ )
				{
					DebugLocation(127, 51);
					// SugarCpp.g:127:51: ^( Type_Tuple ( func_type_name )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(127, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Tuple, "Type_Tuple"), root_1);

					DebugLocation(127, 64);
					if (!(stream_func_type_name.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_func_type_name.HasNext )
					{
						DebugLocation(127, 64);
						adaptor.AddChild(root_1, stream_func_type_name.NextTree());

					}
					stream_func_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type_name", 4);
			LeaveRule("func_type_name", 4);
			LeaveRule_func_type_name();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type_name"); }
		return retval;

	}
	// $ANTLR end "func_type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:130:1: generic_parameter : IDENT ( ',' ! IDENT )* ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 5);
		TraceIn("generic_parameter", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT24 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken IDENT26 = default(IToken);

		CommonTree IDENT24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree IDENT26_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(130, 1);
		try
		{
			// SugarCpp.g:131:2: ( IDENT ( ',' ! IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:131:4: IDENT ( ',' ! IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(131, 4);
			IDENT24=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter362); 
			IDENT24_tree = (CommonTree)adaptor.Create(IDENT24);
			adaptor.AddChild(root_0, IDENT24_tree);
			DebugLocation(131, 10);
			// SugarCpp.g:131:10: ( ',' ! IDENT )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==36))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:131:11: ',' ! IDENT
					{
					DebugLocation(131, 14);
					char_literal25=(IToken)Match(input,36,Follow._36_in_generic_parameter365); 
					DebugLocation(131, 16);
					IDENT26=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter368); 
					IDENT26_tree = (CommonTree)adaptor.Create(IDENT26);
					adaptor.AddChild(root_0, IDENT26_tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 5);
			LeaveRule("generic_parameter", 5);
			LeaveRule_generic_parameter();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:134:1: func_args : stmt_alloc ( ',' stmt_alloc IDENT )* ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 6);
		TraceIn("func_args", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal28 = default(IToken);
		IToken IDENT30 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc29 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree IDENT30_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(134, 1);
		try
		{
			// SugarCpp.g:135:2: ( stmt_alloc ( ',' stmt_alloc IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:135:4: stmt_alloc ( ',' stmt_alloc IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(135, 4);
			PushFollow(Follow._stmt_alloc_in_func_args381);
			stmt_alloc27=stmt_alloc();
			PopFollow();

			adaptor.AddChild(root_0, stmt_alloc27.Tree);
			DebugLocation(135, 15);
			// SugarCpp.g:135:15: ( ',' stmt_alloc IDENT )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==36))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:135:16: ',' stmt_alloc IDENT
					{
					DebugLocation(135, 16);
					char_literal28=(IToken)Match(input,36,Follow._36_in_func_args384); 
					char_literal28_tree = (CommonTree)adaptor.Create(char_literal28);
					adaptor.AddChild(root_0, char_literal28_tree);
					DebugLocation(135, 20);
					PushFollow(Follow._stmt_alloc_in_func_args386);
					stmt_alloc29=stmt_alloc();
					PopFollow();

					adaptor.AddChild(root_0, stmt_alloc29.Tree);
					DebugLocation(135, 31);
					IDENT30=(IToken)Match(input,IDENT,Follow._IDENT_in_func_args388); 
					IDENT30_tree = (CommonTree)adaptor.Create(IDENT30);
					adaptor.AddChild(root_0, IDENT30_tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 6);
			LeaveRule("func_args", 6);
			LeaveRule_func_args();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:138:1: func_def : func_type_name IDENT ( '<' generic_parameter '>' )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 7);
		TraceIn("func_def", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT32 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken char_literal35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken char_literal40 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_type_name31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT32_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree char_literal35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(138, 4);
		try
		{
			// SugarCpp.g:139:2: ( func_type_name IDENT ( '<' generic_parameter '>' )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:139:4: func_type_name IDENT ( '<' generic_parameter '>' )? '(' ( func_args )? ')' ( stmt_block | '=' expr )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(139, 4);
			PushFollow(Follow._func_type_name_in_func_def401);
			func_type_name31=func_type_name();
			PopFollow();

			adaptor.AddChild(root_0, func_type_name31.Tree);
			DebugLocation(139, 19);
			IDENT32=(IToken)Match(input,IDENT,Follow._IDENT_in_func_def403); 
			IDENT32_tree = (CommonTree)adaptor.Create(IDENT32);
			adaptor.AddChild(root_0, IDENT32_tree);
			DebugLocation(139, 25);
			// SugarCpp.g:139:25: ( '<' generic_parameter '>' )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==40))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:139:26: '<' generic_parameter '>'
				{
				DebugLocation(139, 26);
				char_literal33=(IToken)Match(input,40,Follow._40_in_func_def406); 
				char_literal33_tree = (CommonTree)adaptor.Create(char_literal33);
				adaptor.AddChild(root_0, char_literal33_tree);
				DebugLocation(139, 30);
				PushFollow(Follow._generic_parameter_in_func_def408);
				generic_parameter34=generic_parameter();
				PopFollow();

				adaptor.AddChild(root_0, generic_parameter34.Tree);
				DebugLocation(139, 48);
				char_literal35=(IToken)Match(input,42,Follow._42_in_func_def410); 
				char_literal35_tree = (CommonTree)adaptor.Create(char_literal35);
				adaptor.AddChild(root_0, char_literal35_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(139, 54);
			char_literal36=(IToken)Match(input,31,Follow._31_in_func_def414); 
			char_literal36_tree = (CommonTree)adaptor.Create(char_literal36);
			adaptor.AddChild(root_0, char_literal36_tree);
			DebugLocation(139, 58);
			// SugarCpp.g:139:58: ( func_args )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==IDENT||LA13_0==44))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:139:58: func_args
				{
				DebugLocation(139, 58);
				PushFollow(Follow._func_args_in_func_def416);
				func_args37=func_args();
				PopFollow();

				adaptor.AddChild(root_0, func_args37.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(139, 69);
			char_literal38=(IToken)Match(input,32,Follow._32_in_func_def419); 
			char_literal38_tree = (CommonTree)adaptor.Create(char_literal38);
			adaptor.AddChild(root_0, char_literal38_tree);
			DebugLocation(139, 73);
			// SugarCpp.g:139:73: ( stmt_block | '=' expr )
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==INDENT))
			{
				alt14 = 1;
			}
			else if ((LA14_0==41))
			{
				alt14 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:139:75: stmt_block
				{
				DebugLocation(139, 75);
				PushFollow(Follow._stmt_block_in_func_def423);
				stmt_block39=stmt_block();
				PopFollow();

				adaptor.AddChild(root_0, stmt_block39.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:139:88: '=' expr
				{
				DebugLocation(139, 88);
				char_literal40=(IToken)Match(input,41,Follow._41_in_func_def427); 
				char_literal40_tree = (CommonTree)adaptor.Create(char_literal40);
				adaptor.AddChild(root_0, char_literal40_tree);
				DebugLocation(139, 92);
				PushFollow(Follow._expr_in_func_def429);
				expr41=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr41.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 7);
			LeaveRule("func_def", 7);
			LeaveRule_func_def();
		}
		DebugLocation(140, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:142:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 8);
		TraceIn("stmt_block", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT42 = default(IToken);
		IToken NEWLINE43 = default(IToken);
		IToken NEWLINE45 = default(IToken);
		IToken DEDENT46 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt44 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT42_tree = default(CommonTree);
		CommonTree NEWLINE43_tree = default(CommonTree);
		CommonTree NEWLINE45_tree = default(CommonTree);
		CommonTree DEDENT46_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(142, 1);
		try
		{
			// SugarCpp.g:143:2: ( INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:143:4: INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(143, 4);
			INDENT42=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block445); 
			INDENT42_tree = (CommonTree)adaptor.Create(INDENT42);
			adaptor.AddChild(root_0, INDENT42_tree);
			DebugLocation(143, 11);
			// SugarCpp.g:143:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				try
				{
					alt16 = dfa16.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:143:12: ( NEWLINE )+ stmt
					{
					DebugLocation(143, 12);
					// SugarCpp.g:143:12: ( NEWLINE )+
					int cnt15=0;
					try { DebugEnterSubRule(15);
					while (true)
					{
						int alt15=2;
						try { DebugEnterDecision(15, false);
						int LA15_0 = input.LA(1);

						if ((LA15_0==NEWLINE))
						{
							alt15 = 1;
						}


						} finally { DebugExitDecision(15); }
						switch (alt15)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:143:12: NEWLINE
							{
							DebugLocation(143, 12);
							NEWLINE43=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block448); 
							NEWLINE43_tree = (CommonTree)adaptor.Create(NEWLINE43);
							adaptor.AddChild(root_0, NEWLINE43_tree);

							}
							break;

						default:
							if (cnt15 >= 1)
								goto loop15;

							EarlyExitException eee15 = new EarlyExitException( 15, input );
							DebugRecognitionException(eee15);
							throw eee15;
						}
						cnt15++;
					}
					loop15:
						;

					} finally { DebugExitSubRule(15); }

					DebugLocation(143, 21);
					PushFollow(Follow._stmt_in_stmt_block451);
					stmt44=stmt();
					PopFollow();

					adaptor.AddChild(root_0, stmt44.Tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(143, 28);
			// SugarCpp.g:143:28: ( NEWLINE )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==NEWLINE))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:143:28: NEWLINE
					{
					DebugLocation(143, 28);
					NEWLINE45=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block455); 
					NEWLINE45_tree = (CommonTree)adaptor.Create(NEWLINE45);
					adaptor.AddChild(root_0, NEWLINE45_tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }

			DebugLocation(143, 37);
			DEDENT46=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block458); 
			DEDENT46_tree = (CommonTree)adaptor.Create(DEDENT46);
			adaptor.AddChild(root_0, DEDENT46_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 8);
			LeaveRule("stmt_block", 8);
			LeaveRule_stmt_block();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:146:1: stmt : stmt_expr ;
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 9);
		TraceIn("stmt", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr47 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(146, 1);
		try
		{
			// SugarCpp.g:147:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:147:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(147, 4);
			PushFollow(Follow._stmt_expr_in_stmt469);
			stmt_expr47=stmt_expr();
			PopFollow();

			adaptor.AddChild(root_0, stmt_expr47.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 9);
			LeaveRule("stmt", 9);
			LeaveRule_stmt();
		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:150:1: stmt_expr : ( stmt_alloc | stmt_return );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 10);
		TraceIn("stmt_expr", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(150, 1);
		try
		{
			// SugarCpp.g:151:2: ( stmt_alloc | stmt_return )
			int alt18=2;
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==IDENT||LA18_0==44))
			{
				alt18 = 1;
			}
			else if ((LA18_0==43))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:151:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(151, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr480);
				stmt_alloc48=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc48.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:152:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(152, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr485);
				stmt_return49=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return49.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 10);
			LeaveRule("stmt_expr", 10);
			LeaveRule_stmt_expr();
		}
		DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:155:1: stmt_return : 'return' ( expr )? -> ^( Expr_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 11);
		TraceIn("stmt_return", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(155, 1);
		try
		{
			// SugarCpp.g:156:2: ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:156:4: 'return' ( expr )?
			{
			DebugLocation(156, 4);
			string_literal50=(IToken)Match(input,43,Follow._43_in_stmt_return496);  
			stream_43.Add(string_literal50);

			DebugLocation(156, 13);
			// SugarCpp.g:156:13: ( expr )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==IDENT||LA19_0==INT||LA19_0==STRING||LA19_0==31))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:156:13: expr
				{
				DebugLocation(156, 13);
				PushFollow(Follow._expr_in_stmt_return498);
				expr51=expr();
				PopFollow();

				stream_expr.Add(expr51.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 156:19: -> ^( Expr_Return ( expr )? )
			{
				DebugLocation(156, 22);
				// SugarCpp.g:156:22: ^( Expr_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(156, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Return, "Expr_Return"), root_1);

				DebugLocation(156, 36);
				// SugarCpp.g:156:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(156, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 11);
			LeaveRule("stmt_return", 11);
			LeaveRule_stmt_return();
		}
		DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:159:1: stmt_alloc : ( type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) | '|' IDENT '|' ( '=' expr )? -> ^( Expr_Alloc_Auto IDENT ( expr )? ) );
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 12);
		TraceIn("stmt_alloc", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT53 = default(IToken);
		IToken char_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken IDENT57 = default(IToken);
		IToken char_literal58 = default(IToken);
		IToken char_literal59 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr55 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr60 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT53_tree = default(CommonTree);
		CommonTree char_literal54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		CommonTree IDENT57_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		CommonTree char_literal59_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(159, 1);
		try
		{
			// SugarCpp.g:160:2: ( type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) | '|' IDENT '|' ( '=' expr )? -> ^( Expr_Alloc_Auto IDENT ( expr )? ) )
			int alt22=2;
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==IDENT))
			{
				alt22 = 1;
			}
			else if ((LA22_0==44))
			{
				alt22 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:160:4: type_name IDENT ( '=' expr )?
				{
				DebugLocation(160, 4);
				PushFollow(Follow._type_name_in_stmt_alloc519);
				type_name52=type_name();
				PopFollow();

				stream_type_name.Add(type_name52.Tree);
				DebugLocation(160, 14);
				IDENT53=(IToken)Match(input,IDENT,Follow._IDENT_in_stmt_alloc521);  
				stream_IDENT.Add(IDENT53);

				DebugLocation(160, 20);
				// SugarCpp.g:160:20: ( '=' expr )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==41))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:160:21: '=' expr
					{
					DebugLocation(160, 21);
					char_literal54=(IToken)Match(input,41,Follow._41_in_stmt_alloc524);  
					stream_41.Add(char_literal54);

					DebugLocation(160, 25);
					PushFollow(Follow._expr_in_stmt_alloc526);
					expr55=expr();
					PopFollow();

					stream_expr.Add(expr55.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(20); }



				{
				// AST REWRITE
				// elements: type_name, expr, IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 160:32: -> ^( Expr_Alloc type_name IDENT ( expr )? )
				{
					DebugLocation(160, 35);
					// SugarCpp.g:160:35: ^( Expr_Alloc type_name IDENT ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(160, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(160, 48);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(160, 58);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(160, 64);
					// SugarCpp.g:160:64: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(160, 64);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:161:4: '|' IDENT '|' ( '=' expr )?
				{
				DebugLocation(161, 4);
				char_literal56=(IToken)Match(input,44,Follow._44_in_stmt_alloc546);  
				stream_44.Add(char_literal56);

				DebugLocation(161, 8);
				IDENT57=(IToken)Match(input,IDENT,Follow._IDENT_in_stmt_alloc548);  
				stream_IDENT.Add(IDENT57);

				DebugLocation(161, 14);
				char_literal58=(IToken)Match(input,44,Follow._44_in_stmt_alloc550);  
				stream_44.Add(char_literal58);

				DebugLocation(161, 18);
				// SugarCpp.g:161:18: ( '=' expr )?
				int alt21=2;
				try { DebugEnterSubRule(21);
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==41))
				{
					alt21 = 1;
				}
				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:161:19: '=' expr
					{
					DebugLocation(161, 19);
					char_literal59=(IToken)Match(input,41,Follow._41_in_stmt_alloc553);  
					stream_41.Add(char_literal59);

					DebugLocation(161, 23);
					PushFollow(Follow._expr_in_stmt_alloc555);
					expr60=expr();
					PopFollow();

					stream_expr.Add(expr60.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(21); }



				{
				// AST REWRITE
				// elements: IDENT, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 161:30: -> ^( Expr_Alloc_Auto IDENT ( expr )? )
				{
					DebugLocation(161, 33);
					// SugarCpp.g:161:33: ^( Expr_Alloc_Auto IDENT ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(161, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Auto, "Expr_Alloc_Auto"), root_1);

					DebugLocation(161, 51);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(161, 57);
					// SugarCpp.g:161:57: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(161, 57);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 12);
			LeaveRule("stmt_alloc", 12);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:164:1: expr : add_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 13);
		TraceIn("expr", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> add_expr61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(164, 1);
		try
		{
			// SugarCpp.g:165:2: ( add_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:165:4: add_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(165, 4);
			PushFollow(Follow._add_expr_in_expr579);
			add_expr61=add_expr();
			PopFollow();

			adaptor.AddChild(root_0, add_expr61.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 13);
			LeaveRule("expr", 13);
			LeaveRule_expr();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:168:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 14);
		TraceIn("add_expr", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal62 = default(IToken);
		IToken char_literal63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_34=new RewriteRuleITokenStream(adaptor,"token 34");
		RewriteRuleITokenStream stream_37=new RewriteRuleITokenStream(adaptor,"token 37");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(168, 1);
		try
		{
			// SugarCpp.g:169:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:169:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(169, 4);
			// SugarCpp.g:169:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:169:5: a= mul_expr
			{
			DebugLocation(169, 6);
			PushFollow(Follow._mul_expr_in_add_expr593);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 169:16: -> $a
			{
				DebugLocation(169, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(169, 23);
			// SugarCpp.g:169:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=3;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==34))
				{
					alt23 = 1;
				}
				else if ((LA23_0==37))
				{
					alt23 = 2;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:169:25: '+' b= mul_expr
					{
					DebugLocation(169, 25);
					char_literal62=(IToken)Match(input,34,Follow._34_in_add_expr603);  
					stream_34.Add(char_literal62);

					DebugLocation(169, 30);
					PushFollow(Follow._mul_expr_in_add_expr607);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 34, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 169:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(169, 43);
						// SugarCpp.g:169:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(169, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(169, 54);
						adaptor.AddChild(root_1, stream_34.NextNode());
						DebugLocation(169, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(169, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:170:10: '-' b= mul_expr
					{
					DebugLocation(170, 10);
					char_literal63=(IToken)Match(input,37,Follow._37_in_add_expr632);  
					stream_37.Add(char_literal63);

					DebugLocation(170, 15);
					PushFollow(Follow._mul_expr_in_add_expr636);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 37
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 170:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(170, 28);
						// SugarCpp.g:170:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(170, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(170, 39);
						adaptor.AddChild(root_1, stream_37.NextNode());
						DebugLocation(170, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(170, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 14);
			LeaveRule("add_expr", 14);
			LeaveRule_add_expr();
		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:174:1: mul_expr : (a= suffix_expr -> $a) ( '*' b= suffix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= suffix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= suffix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 15);
		TraceIn("mul_expr", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal64 = default(IToken);
		IToken char_literal65 = default(IToken);
		IToken char_literal66 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal64_tree = default(CommonTree);
		CommonTree char_literal65_tree = default(CommonTree);
		CommonTree char_literal66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_30=new RewriteRuleITokenStream(adaptor,"token 30");
		RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		RewriteRuleSubtreeStream stream_suffix_expr=new RewriteRuleSubtreeStream(adaptor,"rule suffix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(174, 1);
		try
		{
			// SugarCpp.g:175:2: ( (a= suffix_expr -> $a) ( '*' b= suffix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= suffix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= suffix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:175:4: (a= suffix_expr -> $a) ( '*' b= suffix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= suffix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= suffix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(175, 4);
			// SugarCpp.g:175:4: (a= suffix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:175:5: a= suffix_expr
			{
			DebugLocation(175, 6);
			PushFollow(Follow._suffix_expr_in_mul_expr674);
			a=suffix_expr();
			PopFollow();

			stream_suffix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 175:19: -> $a
			{
				DebugLocation(175, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(175, 26);
			// SugarCpp.g:175:26: ( '*' b= suffix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= suffix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= suffix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=4;
				try { DebugEnterDecision(24, false);
				switch (input.LA(1))
				{
				case 33:
					{
					alt24 = 1;
					}
					break;
				case 39:
					{
					alt24 = 2;
					}
					break;
				case 30:
					{
					alt24 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:175:28: '*' b= suffix_expr
					{
					DebugLocation(175, 28);
					char_literal64=(IToken)Match(input,33,Follow._33_in_mul_expr684);  
					stream_33.Add(char_literal64);

					DebugLocation(175, 33);
					PushFollow(Follow._suffix_expr_in_mul_expr688);
					b=suffix_expr();
					PopFollow();

					stream_suffix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 33, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 175:46: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(175, 49);
						// SugarCpp.g:175:49: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(175, 51);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(175, 60);
						adaptor.AddChild(root_1, stream_33.NextNode());
						DebugLocation(175, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(175, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:176:13: '/' b= suffix_expr
					{
					DebugLocation(176, 13);
					char_literal65=(IToken)Match(input,39,Follow._39_in_mul_expr716);  
					stream_39.Add(char_literal65);

					DebugLocation(176, 18);
					PushFollow(Follow._suffix_expr_in_mul_expr720);
					b=suffix_expr();
					PopFollow();

					stream_suffix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 39, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 176:31: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(176, 34);
						// SugarCpp.g:176:34: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(176, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(176, 45);
						adaptor.AddChild(root_1, stream_39.NextNode());
						DebugLocation(176, 50);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(176, 60);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:177:13: '%' b= suffix_expr
					{
					DebugLocation(177, 13);
					char_literal66=(IToken)Match(input,30,Follow._30_in_mul_expr748);  
					stream_30.Add(char_literal66);

					DebugLocation(177, 18);
					PushFollow(Follow._suffix_expr_in_mul_expr752);
					b=suffix_expr();
					PopFollow();

					stream_suffix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 30, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 177:31: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(177, 34);
						// SugarCpp.g:177:34: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(177, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(177, 45);
						adaptor.AddChild(root_1, stream_30.NextNode());
						DebugLocation(177, 50);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(177, 60);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 15);
			LeaveRule("mul_expr", 15);
			LeaveRule_mul_expr();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:181:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 16);
		TraceIn("suffix_expr", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken string_literal68 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree string_literal68_tree = default(CommonTree);
		RewriteRuleITokenStream stream_35=new RewriteRuleITokenStream(adaptor,"token 35");
		RewriteRuleITokenStream stream_38=new RewriteRuleITokenStream(adaptor,"token 38");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(181, 1);
		try
		{
			// SugarCpp.g:182:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:182:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) )*
			{
			DebugLocation(182, 4);
			// SugarCpp.g:182:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:182:5: a= atom_expr
			{
			DebugLocation(182, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr793);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 182:17: -> $a
			{
				DebugLocation(182, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(182, 24);
			// SugarCpp.g:182:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=3;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==35))
				{
					alt25 = 1;
				}
				else if ((LA25_0==38))
				{
					alt25 = 2;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:182:26: '++'
					{
					DebugLocation(182, 26);
					string_literal67=(IToken)Match(input,35,Follow._35_in_suffix_expr803);  
					stream_35.Add(string_literal67);



					{
					// AST REWRITE
					// elements: suffix_expr, 35
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 182:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(182, 34);
						// SugarCpp.g:182:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(182, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(182, 48);
						adaptor.AddChild(root_1, stream_35.NextNode());
						DebugLocation(182, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:183:11: '--'
					{
					DebugLocation(183, 11);
					string_literal68=(IToken)Match(input,38,Follow._38_in_suffix_expr826);  
					stream_38.Add(string_literal68);



					{
					// AST REWRITE
					// elements: suffix_expr, 38
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 183:16: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(183, 19);
						// SugarCpp.g:183:19: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(183, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(183, 33);
						adaptor.AddChild(root_1, stream_38.NextNode());
						DebugLocation(183, 39);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 16);
			LeaveRule("suffix_expr", 16);
			LeaveRule_suffix_expr();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:187:1: atom_expr : ( INT | IDENT | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> expr );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 17);
		TraceIn("atom_expr", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INT69 = default(IToken);
		IToken IDENT70 = default(IToken);
		IToken STRING71 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken char_literal74 = default(IToken);
		IToken char_literal76 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr75 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INT69_tree = default(CommonTree);
		CommonTree IDENT70_tree = default(CommonTree);
		CommonTree STRING71_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		CommonTree char_literal74_tree = default(CommonTree);
		CommonTree char_literal76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_32=new RewriteRuleITokenStream(adaptor,"token 32");
		RewriteRuleITokenStream stream_31=new RewriteRuleITokenStream(adaptor,"token 31");
		RewriteRuleITokenStream stream_36=new RewriteRuleITokenStream(adaptor,"token 36");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(187, 1);
		try
		{
			// SugarCpp.g:188:2: ( INT | IDENT | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> expr )
			int alt27=4;
			try { DebugEnterDecision(27, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt27 = 1;
				}
				break;
			case IDENT:
				{
				alt27 = 2;
				}
				break;
			case STRING:
				{
				alt27 = 3;
				}
				break;
			case 31:
				{
				alt27 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:188:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				INT69=(IToken)Match(input,INT,Follow._INT_in_atom_expr859); 
				INT69_tree = (CommonTree)adaptor.Create(INT69);
				adaptor.AddChild(root_0, INT69_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:189:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 4);
				IDENT70=(IToken)Match(input,IDENT,Follow._IDENT_in_atom_expr864); 
				IDENT70_tree = (CommonTree)adaptor.Create(IDENT70);
				adaptor.AddChild(root_0, IDENT70_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:190:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(190, 4);
				STRING71=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr869); 
				STRING71_tree = (CommonTree)adaptor.Create(STRING71);
				adaptor.AddChild(root_0, STRING71_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:191:4: '(' expr ( ',' expr )* ')'
				{
				DebugLocation(191, 4);
				 bool more_than_one = false; 
				DebugLocation(192, 3);
				char_literal72=(IToken)Match(input,31,Follow._31_in_atom_expr878);  
				stream_31.Add(char_literal72);

				DebugLocation(192, 7);
				PushFollow(Follow._expr_in_atom_expr880);
				expr73=expr();
				PopFollow();

				stream_expr.Add(expr73.Tree);
				DebugLocation(192, 12);
				// SugarCpp.g:192:12: ( ',' expr )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==36))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:192:13: ',' expr
						{
						DebugLocation(192, 13);
						char_literal74=(IToken)Match(input,36,Follow._36_in_atom_expr883);  
						stream_36.Add(char_literal74);

						DebugLocation(192, 17);
						PushFollow(Follow._expr_in_atom_expr885);
						expr75=expr();
						PopFollow();

						stream_expr.Add(expr75.Tree);
						DebugLocation(192, 22);
						 more_than_one = true; Console.WriteLine("More Than One!"); 

						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(192, 88);
				char_literal76=(IToken)Match(input,32,Follow._32_in_atom_expr892);  
				stream_32.Add(char_literal76);



				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 193:3: -> { more_than_one }? ^( Expr_Tuple ( expr )+ )
				if ( more_than_one )
				{
					DebugLocation(193, 25);
					// SugarCpp.g:193:25: ^( Expr_Tuple ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(193, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

					DebugLocation(193, 38);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(193, 38);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 194:3: -> expr
				{
					DebugLocation(194, 6);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 17);
			LeaveRule("atom_expr", 17);
			LeaveRule_atom_expr();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:197:1: lvalue : IDENT ;
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 18);
		TraceIn("lvalue", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT77 = default(IToken);

		CommonTree IDENT77_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(197, 1);
		try
		{
			// SugarCpp.g:198:2: ( IDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:198:4: IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(198, 4);
			IDENT77=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue922); 
			IDENT77_tree = (CommonTree)adaptor.Create(IDENT77);
			adaptor.AddChild(root_0, IDENT77_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 18);
			LeaveRule("lvalue", 18);
			LeaveRule_lvalue();
		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"
	#endregion Rules


	#region DFA
	private DFA16 dfa16;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa16 = new DFA16( this );
	}

	private class DFA16 : DFA
	{
		private const string DFA16_eotS =
			"\x4\xFFFF";
		private const string DFA16_eofS =
			"\x4\xFFFF";
		private const string DFA16_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA16_maxS =
			"\x1\x16\x1\x2C\x2\xFFFF";
		private const string DFA16_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA16_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA16_transitionS =
			{
				"\x1\x2\x10\xFFFF\x1\x1",
				"\x1\x2\xC\xFFFF\x1\x3\x3\xFFFF\x1\x1\x14\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA16_eot = DFA.UnpackEncodedString(DFA16_eotS);
		private static readonly short[] DFA16_eof = DFA.UnpackEncodedString(DFA16_eofS);
		private static readonly char[] DFA16_min = DFA.UnpackEncodedStringToUnsignedChars(DFA16_minS);
		private static readonly char[] DFA16_max = DFA.UnpackEncodedStringToUnsignedChars(DFA16_maxS);
		private static readonly short[] DFA16_accept = DFA.UnpackEncodedString(DFA16_acceptS);
		private static readonly short[] DFA16_special = DFA.UnpackEncodedString(DFA16_specialS);
		private static readonly short[][] DFA16_transition;

		static DFA16()
		{
			int numStates = DFA16_transitionS.Length;
			DFA16_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA16_transition[i] = DFA.UnpackEncodedString(DFA16_transitionS[i]);
			}
		}

		public DFA16( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 16;
			this.eot = DFA16_eot;
			this.eof = DFA16_eof;
			this.min = DFA16_min;
			this.max = DFA16_max;
			this.accept = DFA16_accept;
			this.special = DFA16_special;
			this.transition = DFA16_transition;
		}

		public override string Description { get { return "()* loopback of 143:11: ( ( NEWLINE )+ stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root245 = new BitSet(new ulong[]{0x80440000UL});
		public static readonly BitSet _NEWLINE_in_root247 = new BitSet(new ulong[]{0x80440000UL});
		public static readonly BitSet _EOF_in_root252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_def_in_node263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_type_name274 = new BitSet(new ulong[]{0x10200000002UL});
		public static readonly BitSet _40_in_type_name277 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _type_name_in_type_name279 = new BitSet(new ulong[]{0x41000000000UL});
		public static readonly BitSet _36_in_type_name282 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _type_name_in_type_name284 = new BitSet(new ulong[]{0x41000000000UL});
		public static readonly BitSet _42_in_type_name288 = new BitSet(new ulong[]{0x10200000002UL});
		public static readonly BitSet _33_in_type_name293 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _IDENT_in_func_type_name306 = new BitSet(new ulong[]{0x10200000002UL});
		public static readonly BitSet _40_in_func_type_name309 = new BitSet(new ulong[]{0x80040000UL});
		public static readonly BitSet _func_type_name_in_func_type_name311 = new BitSet(new ulong[]{0x41000000000UL});
		public static readonly BitSet _36_in_func_type_name314 = new BitSet(new ulong[]{0x80040000UL});
		public static readonly BitSet _func_type_name_in_func_type_name316 = new BitSet(new ulong[]{0x41000000000UL});
		public static readonly BitSet _42_in_func_type_name320 = new BitSet(new ulong[]{0x10200000002UL});
		public static readonly BitSet _33_in_func_type_name325 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _31_in_func_type_name332 = new BitSet(new ulong[]{0x80040000UL});
		public static readonly BitSet _func_type_name_in_func_type_name334 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _36_in_func_type_name337 = new BitSet(new ulong[]{0x80040000UL});
		public static readonly BitSet _func_type_name_in_func_type_name339 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_func_type_name342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_generic_parameter362 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _36_in_generic_parameter365 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _IDENT_in_generic_parameter368 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _stmt_alloc_in_func_args381 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _36_in_func_args384 = new BitSet(new ulong[]{0x100000040000UL});
		public static readonly BitSet _stmt_alloc_in_func_args386 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _IDENT_in_func_args388 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _func_type_name_in_func_def401 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _IDENT_in_func_def403 = new BitSet(new ulong[]{0x10080000000UL});
		public static readonly BitSet _40_in_func_def406 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _generic_parameter_in_func_def408 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_func_def410 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_func_def414 = new BitSet(new ulong[]{0x100100040000UL});
		public static readonly BitSet _func_args_in_func_def416 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_func_def419 = new BitSet(new ulong[]{0x20000080000UL});
		public static readonly BitSet _stmt_block_in_func_def423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_func_def427 = new BitSet(new ulong[]{0x84140000UL});
		public static readonly BitSet _expr_in_func_def429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block445 = new BitSet(new ulong[]{0x400020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block448 = new BitSet(new ulong[]{0x180000440000UL});
		public static readonly BitSet _stmt_in_stmt_block451 = new BitSet(new ulong[]{0x400020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block455 = new BitSet(new ulong[]{0x400020UL});
		public static readonly BitSet _DEDENT_in_stmt_block458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_stmt_return496 = new BitSet(new ulong[]{0x84140002UL});
		public static readonly BitSet _expr_in_stmt_return498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_stmt_alloc519 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _IDENT_in_stmt_alloc521 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _41_in_stmt_alloc524 = new BitSet(new ulong[]{0x84140000UL});
		public static readonly BitSet _expr_in_stmt_alloc526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_stmt_alloc546 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _IDENT_in_stmt_alloc548 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_stmt_alloc550 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _41_in_stmt_alloc553 = new BitSet(new ulong[]{0x84140000UL});
		public static readonly BitSet _expr_in_stmt_alloc555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_expr579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mul_expr_in_add_expr593 = new BitSet(new ulong[]{0x2400000002UL});
		public static readonly BitSet _34_in_add_expr603 = new BitSet(new ulong[]{0x84140000UL});
		public static readonly BitSet _mul_expr_in_add_expr607 = new BitSet(new ulong[]{0x2400000002UL});
		public static readonly BitSet _37_in_add_expr632 = new BitSet(new ulong[]{0x84140000UL});
		public static readonly BitSet _mul_expr_in_add_expr636 = new BitSet(new ulong[]{0x2400000002UL});
		public static readonly BitSet _suffix_expr_in_mul_expr674 = new BitSet(new ulong[]{0x8240000002UL});
		public static readonly BitSet _33_in_mul_expr684 = new BitSet(new ulong[]{0x84140000UL});
		public static readonly BitSet _suffix_expr_in_mul_expr688 = new BitSet(new ulong[]{0x8240000002UL});
		public static readonly BitSet _39_in_mul_expr716 = new BitSet(new ulong[]{0x84140000UL});
		public static readonly BitSet _suffix_expr_in_mul_expr720 = new BitSet(new ulong[]{0x8240000002UL});
		public static readonly BitSet _30_in_mul_expr748 = new BitSet(new ulong[]{0x84140000UL});
		public static readonly BitSet _suffix_expr_in_mul_expr752 = new BitSet(new ulong[]{0x8240000002UL});
		public static readonly BitSet _atom_expr_in_suffix_expr793 = new BitSet(new ulong[]{0x4800000002UL});
		public static readonly BitSet _35_in_suffix_expr803 = new BitSet(new ulong[]{0x4800000002UL});
		public static readonly BitSet _38_in_suffix_expr826 = new BitSet(new ulong[]{0x4800000002UL});
		public static readonly BitSet _INT_in_atom_expr859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_atom_expr864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _31_in_atom_expr878 = new BitSet(new ulong[]{0x84140000UL});
		public static readonly BitSet _expr_in_atom_expr880 = new BitSet(new ulong[]{0x1100000000UL});
		public static readonly BitSet _36_in_atom_expr883 = new BitSet(new ulong[]{0x84140000UL});
		public static readonly BitSet _expr_in_atom_expr885 = new BitSet(new ulong[]{0x1100000000UL});
		public static readonly BitSet _32_in_atom_expr892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_lvalue922 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
