//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-05 11:50:55

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Linq", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "'\\\\'", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'let'", "'namespace'", "'new'", "'return'", "'try'", "'typedef'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc=12;
	public const int Expr_Bin=13;
	public const int Expr_Bracket=14;
	public const int Expr_Call=15;
	public const int Expr_Call_With=16;
	public const int Expr_Cond=17;
	public const int Expr_Dict=18;
	public const int Expr_Infix=19;
	public const int Expr_Lambda=20;
	public const int Expr_New_Array=21;
	public const int Expr_New_Type=22;
	public const int Expr_Prefix=23;
	public const int Expr_Return=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int Generic_Patameters=29;
	public const int Global_Block=30;
	public const int IDENT=31;
	public const int INDENT=32;
	public const int Ident_List=33;
	public const int Import=34;
	public const int Left_Bracket=35;
	public const int LineComment=36;
	public const int Linq_From=37;
	public const int Linq_Let=38;
	public const int Linq_Prefix=39;
	public const int Linq_Where=40;
	public const int Match_Tuple=41;
	public const int NEWLINE=42;
	public const int NUMBER=43;
	public const int Namespace=44;
	public const int Right_Bracket=45;
	public const int Root=46;
	public const int SP=47;
	public const int STRING=48;
	public const int Stmt_Block=49;
	public const int Stmt_For=50;
	public const int Stmt_ForEach=51;
	public const int Stmt_If=52;
	public const int Stmt_Linq=53;
	public const int Stmt_Try=54;
	public const int Stmt_Typedef=55;
	public const int Stmt_Using=56;
	public const int Stmt_While=57;
	public const int Type_IDENT=58;
	public const int Type_Ref=59;
	public const int Type_Tuple=60;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[231+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:161:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int root_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(161, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// SugarCpp.g:162:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:162:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(162, 4);
			// SugarCpp.g:162:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:162:4: NEWLINE
					{
					DebugLocation(162, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root444); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(162, 13);
			PushFollow(Follow._global_block_in_root447);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(162, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root449); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 162:30: -> ^( Root global_block )
			{
				DebugLocation(162, 33);
				// SugarCpp.g:162:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(162, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(162, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
			if (state.backtracking > 0) { Memoize(input, 1, root_StartIndex); }

		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:165:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(165, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// SugarCpp.g:166:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:166:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(166, 4);
			// SugarCpp.g:166:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==100||LA3_0==107||LA3_0==109||LA3_0==113||LA3_0==116||(LA3_0>=120 && LA3_0<=121)||LA3_0==127))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:166:5: node ( NEWLINE )+
					{
					DebugLocation(166, 5);
					PushFollow(Follow._node_in_global_block469);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(166, 10);
					// SugarCpp.g:166:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:166:10: NEWLINE
							{
							DebugLocation(166, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block471); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 166:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(166, 24);
				// SugarCpp.g:166:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(166, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(166, 39);
				// SugarCpp.g:166:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(166, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
			if (state.backtracking > 0) { Memoize(input, 2, global_block_StartIndex); }

		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:169:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(169, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// SugarCpp.g:170:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:170:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(170, 4);
				PushFollow(Follow._func_def_in_node494);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:171:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(171, 4);
				PushFollow(Follow._class_def_in_node499);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:172:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(172, 4);
				PushFollow(Follow._enum_def_in_node504);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:173:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(173, 4);
				PushFollow(Follow._global_alloc_in_node509);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:174:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(174, 4);
				PushFollow(Follow._global_using_in_node514);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:175:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(175, 4);
				PushFollow(Follow._global_typedef_in_node519);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:176:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				PushFollow(Follow._import_def_in_node524);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:177:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 4);
				PushFollow(Follow._namespace_def_in_node529);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
			if (state.backtracking > 0) { Memoize(input, 3, node_StartIndex); }

		}
		DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:180:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(180, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// SugarCpp.g:181:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:181:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args541); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:182:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args546); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:183:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(183, 4);
				PushFollow(Follow._ident_in_attribute_args551);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
			if (state.backtracking > 0) { Memoize(input, 4, attribute_args_StartIndex); }

		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:186:1: attribute_item : ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(186, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// SugarCpp.g:187:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:187:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
			{
			DebugLocation(187, 4);
			PushFollow(Follow._ident_in_attribute_item562);
			ident17=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
			DebugLocation(187, 10);
			// SugarCpp.g:187:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==68))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:187:11: '(' attribute_args ( ',' attribute_args )* ')'
				{
				DebugLocation(187, 11);
				char_literal18=(IToken)Match(input,68,Follow._68_in_attribute_item565); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_68.Add(char_literal18);

				DebugLocation(187, 15);
				PushFollow(Follow._attribute_args_in_attribute_item567);
				attribute_args19=attribute_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
				DebugLocation(187, 30);
				// SugarCpp.g:187:30: ( ',' attribute_args )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==75))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:187:31: ',' attribute_args
						{
						DebugLocation(187, 31);
						char_literal20=(IToken)Match(input,75,Follow._75_in_attribute_item570); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_75.Add(char_literal20);

						DebugLocation(187, 35);
						PushFollow(Follow._attribute_args_in_attribute_item572);
						attribute_args21=attribute_args();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(187, 52);
				char_literal22=(IToken)Match(input,69,Follow._69_in_attribute_item576); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal22);


				}
				break;

			}
			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: ident, attribute_args
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 187:58: -> ^( Attribute ident ( attribute_args )* )
			{
				DebugLocation(187, 61);
				// SugarCpp.g:187:61: ^( Attribute ident ( attribute_args )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(187, 63);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

				DebugLocation(187, 73);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(187, 79);
				// SugarCpp.g:187:79: ( attribute_args )*
				while ( stream_attribute_args.HasNext )
				{
					DebugLocation(187, 79);
					adaptor.AddChild(root_1, stream_attribute_args.NextTree());

				}
				stream_attribute_args.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
			if (state.backtracking > 0) { Memoize(input, 5, attribute_item_StartIndex); }

		}
		DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:190:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal23 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken char_literal27 = default(IToken);
		IToken NEWLINE28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree char_literal27_tree = default(CommonTree);
		CommonTree NEWLINE28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(190, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// SugarCpp.g:191:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:191:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(191, 4);
			// SugarCpp.g:191:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==100))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:191:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(191, 5);
					char_literal23=(IToken)Match(input,100,Follow._100_in_attribute601); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal23);

					DebugLocation(191, 9);
					PushFollow(Follow._attribute_item_in_attribute603);
					attribute_item24=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item24.Tree);
					DebugLocation(191, 24);
					// SugarCpp.g:191:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==75))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:191:25: ',' attribute_item
							{
							DebugLocation(191, 25);
							char_literal25=(IToken)Match(input,75,Follow._75_in_attribute606); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_75.Add(char_literal25);

							DebugLocation(191, 29);
							PushFollow(Follow._attribute_item_in_attribute608);
							attribute_item26=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item26.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(191, 46);
					char_literal27=(IToken)Match(input,102,Follow._102_in_attribute612); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(char_literal27);

					DebugLocation(191, 50);
					// SugarCpp.g:191:50: ( NEWLINE )+
					int cnt9=0;
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0==NEWLINE))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:191:50: NEWLINE
							{
							DebugLocation(191, 50);
							NEWLINE28=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute614); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE28);


							}
							break;

						default:
							if (cnt9 >= 1)
								goto loop9;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee9 = new EarlyExitException( 9, input );
							DebugRecognitionException(eee9);
							throw eee9;
						}
						cnt9++;
					}
					loop9:
						;

					} finally { DebugExitSubRule(9); }


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 191:61: -> ( attribute_item )+
			{
				DebugLocation(191, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(191, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
			if (state.backtracking > 0) { Memoize(input, 6, attribute_StartIndex); }

		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:194:1: global_alloc : ( ( attribute )? ident_list ':' type_name ( ':=' expr )? -> ^( Expr_Alloc ( attribute )? type_name ident_list ( expr )? ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) );
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_alloc_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal31 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken string_literal37 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute29 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name32 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr38 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree string_literal33_tree = default(CommonTree);
		CommonTree string_literal37_tree = default(CommonTree);
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(194, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// SugarCpp.g:195:2: ( ( attribute )? ident_list ':' type_name ( ':=' expr )? -> ^( Expr_Alloc ( attribute )? type_name ident_list ( expr )? ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			try
			{
				alt14 = dfa14.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:195:4: ( attribute )? ident_list ':' type_name ( ':=' expr )?
				{
				DebugLocation(195, 4);
				// SugarCpp.g:195:4: ( attribute )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==100))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:195:4: attribute
					{
					DebugLocation(195, 4);
					PushFollow(Follow._attribute_in_global_alloc633);
					attribute29=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute.Add(attribute29.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(195, 15);
				PushFollow(Follow._ident_list_in_global_alloc636);
				ident_list30=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list30.Tree);
				DebugLocation(195, 26);
				char_literal31=(IToken)Match(input,85,Follow._85_in_global_alloc638); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_85.Add(char_literal31);

				DebugLocation(195, 30);
				PushFollow(Follow._type_name_in_global_alloc640);
				type_name32=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name32.Tree);
				DebugLocation(195, 40);
				// SugarCpp.g:195:40: ( ':=' expr )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==87))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:195:41: ':=' expr
					{
					DebugLocation(195, 41);
					string_literal33=(IToken)Match(input,87,Follow._87_in_global_alloc643); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_87.Add(string_literal33);

					DebugLocation(195, 46);
					PushFollow(Follow._expr_in_global_alloc645);
					expr34=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr34.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }



				{
				// AST REWRITE
				// elements: ident_list, attribute, type_name, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 195:53: -> ^( Expr_Alloc ( attribute )? type_name ident_list ( expr )? )
				{
					DebugLocation(195, 56);
					// SugarCpp.g:195:56: ^( Expr_Alloc ( attribute )? type_name ident_list ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(195, 58);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(195, 69);
					// SugarCpp.g:195:69: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(195, 69);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(195, 80);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(195, 90);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(195, 101);
					// SugarCpp.g:195:101: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(195, 101);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:196:4: ( attribute )? ident ':=' modify_expr
				{
				DebugLocation(196, 4);
				// SugarCpp.g:196:4: ( attribute )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==100))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:196:4: attribute
					{
					DebugLocation(196, 4);
					PushFollow(Follow._attribute_in_global_alloc668);
					attribute35=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute.Add(attribute35.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(196, 15);
				PushFollow(Follow._ident_in_global_alloc671);
				ident36=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident36.Tree);
				DebugLocation(196, 21);
				string_literal37=(IToken)Match(input,87,Follow._87_in_global_alloc673); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_87.Add(string_literal37);

				DebugLocation(196, 26);
				PushFollow(Follow._modify_expr_in_global_alloc675);
				modify_expr38=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(modify_expr38.Tree);


				{
				// AST REWRITE
				// elements: modify_expr, attribute, 87, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 196:38: -> ^( ':=' ( attribute )? ident modify_expr )
				{
					DebugLocation(196, 41);
					// SugarCpp.g:196:41: ^( ':=' ( attribute )? ident modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_87.NextNode(), root_1);

					DebugLocation(196, 48);
					// SugarCpp.g:196:48: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(196, 48);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(196, 59);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(196, 65);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
			if (state.backtracking > 0) { Memoize(input, 7, global_alloc_StartIndex); }

		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:199:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_using_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using39 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(199, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// SugarCpp.g:200:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:200:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(200, 4);
			PushFollow(Follow._stmt_using_in_global_using699);
			stmt_using39=stmt_using();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using39.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
			if (state.backtracking > 0) { Memoize(input, 8, global_using_StartIndex); }

		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:203:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_typedef_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef40 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(203, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// SugarCpp.g:204:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:204:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(204, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef710);
			stmt_typedef40=stmt_typedef();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef40.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
			if (state.backtracking > 0) { Memoize(input, 9, global_typedef_StartIndex); }

		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:207:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int import_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal41 = default(IToken);
		IToken STRING42 = default(IToken);
		IToken NEWLINE43 = default(IToken);
		IToken INDENT44 = default(IToken);
		IToken NEWLINE45 = default(IToken);
		IToken STRING46 = default(IToken);
		IToken NEWLINE47 = default(IToken);
		IToken DEDENT48 = default(IToken);

		CommonTree string_literal41_tree = default(CommonTree);
		CommonTree STRING42_tree = default(CommonTree);
		CommonTree NEWLINE43_tree = default(CommonTree);
		CommonTree INDENT44_tree = default(CommonTree);
		CommonTree NEWLINE45_tree = default(CommonTree);
		CommonTree STRING46_tree = default(CommonTree);
		CommonTree NEWLINE47_tree = default(CommonTree);
		CommonTree DEDENT48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(207, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// SugarCpp.g:208:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:208:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(208, 4);
			string_literal41=(IToken)Match(input,113,Follow._113_in_import_def721); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_113.Add(string_literal41);

			DebugLocation(208, 13);
			// SugarCpp.g:208:13: ( STRING )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==STRING))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:208:13: STRING
				{
				DebugLocation(208, 13);
				STRING42=(IToken)Match(input,STRING,Follow._STRING_in_import_def723); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING42);


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(208, 21);
			// SugarCpp.g:208:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			try
			{
				alt20 = dfa20.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:208:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(208, 22);
				// SugarCpp.g:208:22: ( NEWLINE )+
				int cnt16=0;
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==NEWLINE))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:208:22: NEWLINE
						{
						DebugLocation(208, 22);
						NEWLINE43=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def727); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE43);


						}
						break;

					default:
						if (cnt16 >= 1)
							goto loop16;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee16 = new EarlyExitException( 16, input );
						DebugRecognitionException(eee16);
						throw eee16;
					}
					cnt16++;
				}
				loop16:
					;

				} finally { DebugExitSubRule(16); }

				DebugLocation(208, 31);
				INDENT44=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def730); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT44);

				DebugLocation(208, 38);
				// SugarCpp.g:208:38: ( NEWLINE )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==NEWLINE))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:208:38: NEWLINE
						{
						DebugLocation(208, 38);
						NEWLINE45=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def732); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE45);


						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(208, 48);
				// SugarCpp.g:208:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==STRING))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:208:49: STRING ( NEWLINE )+
						{
						DebugLocation(208, 49);
						STRING46=(IToken)Match(input,STRING,Follow._STRING_in_import_def737); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING46);

						DebugLocation(208, 56);
						// SugarCpp.g:208:56: ( NEWLINE )+
						int cnt18=0;
						try { DebugEnterSubRule(18);
						while (true)
						{
							int alt18=2;
							try { DebugEnterDecision(18, false);
							int LA18_0 = input.LA(1);

							if ((LA18_0==NEWLINE))
							{
								alt18 = 1;
							}


							} finally { DebugExitDecision(18); }
							switch (alt18)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:208:56: NEWLINE
								{
								DebugLocation(208, 56);
								NEWLINE47=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def739); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE47);


								}
								break;

							default:
								if (cnt18 >= 1)
									goto loop18;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee18 = new EarlyExitException( 18, input );
								DebugRecognitionException(eee18);
								throw eee18;
							}
							cnt18++;
						}
						loop18:
							;

						} finally { DebugExitSubRule(18); }


						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(208, 67);
				DEDENT48=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def744); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT48);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 208:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(208, 79);
				// SugarCpp.g:208:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(208, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(208, 88);
				// SugarCpp.g:208:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(208, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
			if (state.backtracking > 0) { Memoize(input, 10, import_def_StartIndex); }

		}
		DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:211:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enum_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		IToken char_literal52 = default(IToken);
		IToken char_literal54 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident51 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident55 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		CommonTree char_literal52_tree = default(CommonTree);
		CommonTree char_literal54_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(211, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// SugarCpp.g:212:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:212:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(212, 4);
			// SugarCpp.g:212:4: ( attribute )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==100))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:212:4: attribute
				{
				DebugLocation(212, 4);
				PushFollow(Follow._attribute_in_enum_def766);
				attribute49=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(212, 15);
			string_literal50=(IToken)Match(input,109,Follow._109_in_enum_def769); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_109.Add(string_literal50);

			DebugLocation(212, 22);
			PushFollow(Follow._ident_in_enum_def771);
			ident51=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident51.Tree);
			DebugLocation(212, 28);
			char_literal52=(IToken)Match(input,93,Follow._93_in_enum_def773); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal52);

			DebugLocation(212, 32);
			// SugarCpp.g:212:32: ( ident ( '|' ident )* )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==IDENT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:212:33: ident ( '|' ident )*
				{
				DebugLocation(212, 33);
				PushFollow(Follow._ident_in_enum_def776);
				ident53=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident53.Tree);
				DebugLocation(212, 39);
				// SugarCpp.g:212:39: ( '|' ident )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==124))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:212:40: '|' ident
						{
						DebugLocation(212, 40);
						char_literal54=(IToken)Match(input,124,Follow._124_in_enum_def779); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_124.Add(char_literal54);

						DebugLocation(212, 44);
						PushFollow(Follow._ident_in_enum_def781);
						ident55=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident55.Tree);

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				}
				break;

			}
			} finally { DebugExitSubRule(23); }



			{
			// AST REWRITE
			// elements: ident, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 212:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(212, 57);
				// SugarCpp.g:212:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(212, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(212, 64);
				// SugarCpp.g:212:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(212, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(212, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(212, 81);
				// SugarCpp.g:212:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(212, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(212, 94);
				// SugarCpp.g:212:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(212, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
			if (state.backtracking > 0) { Memoize(input, 11, enum_def_StartIndex); }

		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:215:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int namespace_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal56 = default(IToken);
		IToken NEWLINE58 = default(IToken);
		IToken INDENT59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken DEDENT62 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal56_tree = default(CommonTree);
		CommonTree NEWLINE58_tree = default(CommonTree);
		CommonTree INDENT59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree DEDENT62_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(215, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// SugarCpp.g:216:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:216:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(216, 4);
			string_literal56=(IToken)Match(input,116,Follow._116_in_namespace_def814); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_116.Add(string_literal56);

			DebugLocation(216, 16);
			PushFollow(Follow._ident_in_namespace_def816);
			ident57=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident57.Tree);
			DebugLocation(216, 22);
			// SugarCpp.g:216:22: ( NEWLINE )+
			int cnt24=0;
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==NEWLINE))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:216:22: NEWLINE
					{
					DebugLocation(216, 22);
					NEWLINE58=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def818); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE58);


					}
					break;

				default:
					if (cnt24 >= 1)
						goto loop24;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee24 = new EarlyExitException( 24, input );
					DebugRecognitionException(eee24);
					throw eee24;
				}
				cnt24++;
			}
			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(216, 31);
			INDENT59=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def821); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT59);

			DebugLocation(216, 38);
			// SugarCpp.g:216:38: ( NEWLINE )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==NEWLINE))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:216:38: NEWLINE
					{
					DebugLocation(216, 38);
					NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def823); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE60);


					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(216, 47);
			PushFollow(Follow._global_block_in_namespace_def826);
			global_block61=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block61.Tree);
			DebugLocation(216, 60);
			DEDENT62=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def828); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT62);



			{
			// AST REWRITE
			// elements: ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 216:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(216, 70);
				// SugarCpp.g:216:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(216, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(216, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(216, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
			if (state.backtracking > 0) { Memoize(input, 12, namespace_def_StartIndex); }

		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:219:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal64 = default(IToken);
		IToken char_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal70 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken NEWLINE74 = default(IToken);
		IToken INDENT75 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken DEDENT78 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block77 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal64_tree = default(CommonTree);
		CommonTree char_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal70_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		CommonTree NEWLINE74_tree = default(CommonTree);
		CommonTree INDENT75_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree DEDENT78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(219, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// SugarCpp.g:220:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:220:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(220, 5);
			// SugarCpp.g:220:5: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==100))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:5: attribute
				{
				DebugLocation(220, 5);
				PushFollow(Follow._attribute_in_class_def850);
				attribute63=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute63.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(220, 16);
			string_literal64=(IToken)Match(input,107,Follow._107_in_class_def853); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_107.Add(string_literal64);

			DebugLocation(220, 24);
			PushFollow(Follow._ident_in_class_def855);
			ident65=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident65.Tree);
			DebugLocation(220, 30);
			// SugarCpp.g:220:30: ( generic_parameter )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==89))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:31: generic_parameter
				{
				DebugLocation(220, 31);
				PushFollow(Follow._generic_parameter_in_class_def858);
				generic_parameter66=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(220, 51);
			// SugarCpp.g:220:51: ( '(' func_args ')' )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==68))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:52: '(' func_args ')'
				{
				DebugLocation(220, 52);
				char_literal67=(IToken)Match(input,68,Follow._68_in_class_def863); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_68.Add(char_literal67);

				DebugLocation(220, 56);
				PushFollow(Follow._func_args_in_class_def865);
				func_args68=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args68.Tree);
				DebugLocation(220, 66);
				char_literal69=(IToken)Match(input,69,Follow._69_in_class_def867); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal69);


				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(220, 72);
			// SugarCpp.g:220:72: ( ':' ident ( ',' ident )* )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==85))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:73: ':' ident ( ',' ident )*
				{
				DebugLocation(220, 73);
				char_literal70=(IToken)Match(input,85,Follow._85_in_class_def872); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_85.Add(char_literal70);

				DebugLocation(220, 77);
				PushFollow(Follow._ident_in_class_def874);
				ident71=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident71.Tree);
				DebugLocation(220, 83);
				// SugarCpp.g:220:83: ( ',' ident )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if ((LA29_0==75))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:220:84: ',' ident
						{
						DebugLocation(220, 84);
						char_literal72=(IToken)Match(input,75,Follow._75_in_class_def877); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_75.Add(char_literal72);

						DebugLocation(220, 88);
						PushFollow(Follow._ident_in_class_def879);
						ident73=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident73.Tree);

						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }


				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(220, 98);
			// SugarCpp.g:220:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			try
			{
				alt33 = dfa33.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(220, 99);
				// SugarCpp.g:220:99: ( NEWLINE )+
				int cnt31=0;
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==NEWLINE))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:220:99: NEWLINE
						{
						DebugLocation(220, 99);
						NEWLINE74=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def886); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE74);


						}
						break;

					default:
						if (cnt31 >= 1)
							goto loop31;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee31 = new EarlyExitException( 31, input );
						DebugRecognitionException(eee31);
						throw eee31;
					}
					cnt31++;
				}
				loop31:
					;

				} finally { DebugExitSubRule(31); }

				DebugLocation(220, 108);
				INDENT75=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def889); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT75);

				DebugLocation(220, 115);
				// SugarCpp.g:220:115: ( NEWLINE )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if ((LA32_0==NEWLINE))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:220:115: NEWLINE
						{
						DebugLocation(220, 115);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def891); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }

				DebugLocation(220, 124);
				PushFollow(Follow._global_block_in_class_def894);
				global_block77=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block77.Tree);
				DebugLocation(220, 137);
				DEDENT78=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def896); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT78);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: ident, attribute, global_block, ident, func_args, generic_parameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 220:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(220, 149);
				// SugarCpp.g:220:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(220, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(220, 157);
				// SugarCpp.g:220:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(220, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(220, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(220, 174);
				// SugarCpp.g:220:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(220, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(220, 193);
				// SugarCpp.g:220:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(220, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(220, 204);
				// SugarCpp.g:220:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(220, 205);
					// SugarCpp.g:220:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(220, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(220, 218);
					// SugarCpp.g:220:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(220, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(220, 228);
				// SugarCpp.g:220:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(220, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
			if (state.backtracking > 0) { Memoize(input, 13, class_def_StartIndex); }

		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:223:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal81 = default(IToken);
		IToken char_literal82 = default(IToken);

		CommonTree char_literal79_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree char_literal81_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(223, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// SugarCpp.g:223:13: ( '*' | '[' ']' | '&' )
			int alt34=3;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case 70:
				{
				alt34 = 1;
				}
				break;
			case 100:
				{
				alt34 = 2;
				}
				break;
			case 66:
				{
				alt34 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 15);
				char_literal79=(IToken)Match(input,70,Follow._70_in_type_name_op937); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal79_tree = (CommonTree)adaptor.Create(char_literal79);
				adaptor.AddChild(root_0, char_literal79_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:223:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 21);
				char_literal80=(IToken)Match(input,100,Follow._100_in_type_name_op941); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal80_tree = (CommonTree)adaptor.Create(char_literal80);
				adaptor.AddChild(root_0, char_literal80_tree);
				}
				DebugLocation(223, 25);
				char_literal81=(IToken)Match(input,102,Follow._102_in_type_name_op943); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal81_tree = (CommonTree)adaptor.Create(char_literal81);
				adaptor.AddChild(root_0, char_literal81_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:223:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 31);
				char_literal82=(IToken)Match(input,66,Follow._66_in_type_name_op947); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal82_tree = (CommonTree)adaptor.Create(char_literal82);
				adaptor.AddChild(root_0, char_literal82_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
			if (state.backtracking > 0) { Memoize(input, 14, type_name_op_StartIndex); }

		}
		DebugLocation(223, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:224:1: type_name : ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal84 = default(IToken);
		IToken char_literal86 = default(IToken);
		IToken char_literal88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op89 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal84_tree = default(CommonTree);
		CommonTree char_literal86_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(224, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// SugarCpp.g:225:2: ( ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:225:4: ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(225, 4);
			PushFollow(Follow._ident_in_type_name956);
			ident83=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident83.Tree);
			DebugLocation(225, 10);
			// SugarCpp.g:225:10: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==89))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:225:11: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(225, 11);
				char_literal84=(IToken)Match(input,89,Follow._89_in_type_name959); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal84);

				DebugLocation(225, 15);
				// SugarCpp.g:225:15: ( type_name ( ',' type_name )* )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==IDENT))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:225:16: type_name ( ',' type_name )*
					{
					DebugLocation(225, 16);
					PushFollow(Follow._type_name_in_type_name962);
					type_name85=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name85.Tree);
					DebugLocation(225, 26);
					// SugarCpp.g:225:26: ( ',' type_name )*
					try { DebugEnterSubRule(35);
					while (true)
					{
						int alt35=2;
						try { DebugEnterDecision(35, false);
						int LA35_0 = input.LA(1);

						if ((LA35_0==75))
						{
							alt35 = 1;
						}


						} finally { DebugExitDecision(35); }
						switch ( alt35 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:225:27: ',' type_name
							{
							DebugLocation(225, 27);
							char_literal86=(IToken)Match(input,75,Follow._75_in_type_name965); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_75.Add(char_literal86);

							DebugLocation(225, 31);
							PushFollow(Follow._type_name_in_type_name967);
							type_name87=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name87.Tree);

							}
							break;

						default:
							goto loop35;
						}
					}

					loop35:
						;

					} finally { DebugExitSubRule(35); }


					}
					break;

				}
				} finally { DebugExitSubRule(36); }

				DebugLocation(225, 45);
				char_literal88=(IToken)Match(input,96,Follow._96_in_type_name973); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_96.Add(char_literal88);


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(225, 51);
			// SugarCpp.g:225:51: ( type_name_op )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==100))
				{
					int LA38_2 = input.LA(2);

					if ((LA38_2==102))
					{
						alt38 = 1;
					}


				}
				else if ((LA38_0==66||LA38_0==70))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:225:51: type_name_op
					{
					DebugLocation(225, 51);
					PushFollow(Follow._type_name_op_in_type_name977);
					type_name_op89=type_name_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name_op.Add(type_name_op89.Tree);

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: type_name_op, ident, 96, 89, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 225:65: -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(225, 68);
				// SugarCpp.g:225:68: ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(225, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(225, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(225, 87);
				// SugarCpp.g:225:87: ( '<' ( type_name )* '>' )?
				if (stream_96.HasNext||stream_89.HasNext||stream_type_name.HasNext)
				{
					DebugLocation(225, 88);
					adaptor.AddChild(root_1, stream_89.NextNode());
					DebugLocation(225, 92);
					// SugarCpp.g:225:92: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(225, 92);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(225, 103);
					adaptor.AddChild(root_1, stream_96.NextNode());

				}
				stream_96.Reset();
				stream_89.Reset();
				stream_type_name.Reset();
				DebugLocation(225, 110);
				// SugarCpp.g:225:110: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(225, 110);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 15, type_name_StartIndex); }

		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:228:1: generic_parameter : '<' ident ( ',' ident )* '>' -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 16);
		TraceIn("generic_parameter", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int generic_parameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal90 = default(IToken);
		IToken char_literal92 = default(IToken);
		IToken char_literal94 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident93 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		CommonTree char_literal94_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(228, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// SugarCpp.g:229:2: ( '<' ident ( ',' ident )* '>' -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:229:4: '<' ident ( ',' ident )* '>'
			{
			DebugLocation(229, 4);
			char_literal90=(IToken)Match(input,89,Follow._89_in_generic_parameter1011); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_89.Add(char_literal90);

			DebugLocation(229, 8);
			PushFollow(Follow._ident_in_generic_parameter1013);
			ident91=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident91.Tree);
			DebugLocation(229, 14);
			// SugarCpp.g:229:14: ( ',' ident )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==75))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:229:15: ',' ident
					{
					DebugLocation(229, 15);
					char_literal92=(IToken)Match(input,75,Follow._75_in_generic_parameter1016); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_75.Add(char_literal92);

					DebugLocation(229, 19);
					PushFollow(Follow._ident_in_generic_parameter1018);
					ident93=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident93.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }

			DebugLocation(229, 27);
			char_literal94=(IToken)Match(input,96,Follow._96_in_generic_parameter1022); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_96.Add(char_literal94);



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 229:31: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(229, 34);
				// SugarCpp.g:229:34: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(229, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(229, 55);
				// SugarCpp.g:229:55: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(229, 55);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 16);
			LeaveRule("generic_parameter", 16);
			LeaveRule_generic_parameter();
			if (state.backtracking > 0) { Memoize(input, 16, generic_parameter_StartIndex); }

		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:232:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 17);
		TraceIn("func_args", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc97 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(232, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// SugarCpp.g:233:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:233:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(233, 4);
			PushFollow(Follow._stmt_alloc_in_func_args1042);
			stmt_alloc95=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc95.Tree);
			DebugLocation(233, 15);
			// SugarCpp.g:233:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==75))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:233:16: ',' stmt_alloc
					{
					DebugLocation(233, 16);
					char_literal96=(IToken)Match(input,75,Follow._75_in_func_args1045); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_75.Add(char_literal96);

					DebugLocation(233, 20);
					PushFollow(Follow._stmt_alloc_in_func_args1047);
					stmt_alloc97=stmt_alloc();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc97.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 233:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(233, 36);
				// SugarCpp.g:233:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(233, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(233, 48);
				// SugarCpp.g:233:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(233, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 17);
			LeaveRule("func_args", 17);
			LeaveRule_func_args();
			if (state.backtracking > 0) { Memoize(input, 17, func_args_StartIndex); }

		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:236:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 18);
		TraceIn("func_def", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal100 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken NEWLINE106 = default(IToken);
		IToken char_literal108 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute98 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr109 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree NEWLINE106_tree = default(CommonTree);
		CommonTree char_literal108_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(236, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// SugarCpp.g:237:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:237:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(237, 4);
			// SugarCpp.g:237:4: ( attribute )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==100))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:4: attribute
				{
				DebugLocation(237, 4);
				PushFollow(Follow._attribute_in_func_def1069);
				attribute98=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute98.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(237, 15);
			// SugarCpp.g:237:15: ( type_name )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			try
			{
				alt42 = dfa42.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:15: type_name
				{
				DebugLocation(237, 15);
				PushFollow(Follow._type_name_in_func_def1072);
				type_name99=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name99.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(237, 26);
			// SugarCpp.g:237:26: ( '~' )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==127))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:26: '~'
				{
				DebugLocation(237, 26);
				char_literal100=(IToken)Match(input,127,Follow._127_in_func_def1075); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_127.Add(char_literal100);


				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(237, 31);
			PushFollow(Follow._ident_in_func_def1078);
			ident101=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident101.Tree);
			DebugLocation(237, 37);
			// SugarCpp.g:237:37: ( generic_parameter )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==89))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:37: generic_parameter
				{
				DebugLocation(237, 37);
				PushFollow(Follow._generic_parameter_in_func_def1080);
				generic_parameter102=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter102.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(237, 56);
			char_literal103=(IToken)Match(input,68,Follow._68_in_func_def1083); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_68.Add(char_literal103);

			DebugLocation(237, 60);
			// SugarCpp.g:237:60: ( func_args )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==IDENT))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:60: func_args
				{
				DebugLocation(237, 60);
				PushFollow(Follow._func_args_in_func_def1085);
				func_args104=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args104.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(237, 71);
			char_literal105=(IToken)Match(input,69,Follow._69_in_func_def1088); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_69.Add(char_literal105);

			DebugLocation(237, 75);
			// SugarCpp.g:237:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==NEWLINE))
			{
				alt47 = 1;
			}
			else if ((LA47_0==93))
			{
				alt47 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(237, 76);
				// SugarCpp.g:237:76: ( NEWLINE )+
				int cnt46=0;
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, false);
					int LA46_0 = input.LA(1);

					if ((LA46_0==NEWLINE))
					{
						alt46 = 1;
					}


					} finally { DebugExitDecision(46); }
					switch (alt46)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:237:76: NEWLINE
						{
						DebugLocation(237, 76);
						NEWLINE106=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1091); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE106);


						}
						break;

					default:
						if (cnt46 >= 1)
							goto loop46;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee46 = new EarlyExitException( 46, input );
						DebugRecognitionException(eee46);
						throw eee46;
					}
					cnt46++;
				}
				loop46:
					;

				} finally { DebugExitSubRule(46); }

				DebugLocation(237, 85);
				PushFollow(Follow._stmt_block_in_func_def1094);
				stmt_block107=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block107.Tree);


				{
				// AST REWRITE
				// elements: func_args, stmt_block, generic_parameter, 127, ident, attribute, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 237:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(237, 99);
					// SugarCpp.g:237:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(237, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(237, 110);
					// SugarCpp.g:237:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(237, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(237, 121);
					// SugarCpp.g:237:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(237, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(237, 132);
					// SugarCpp.g:237:132: ( '~' )?
					if (stream_127.HasNext)
					{
						DebugLocation(237, 132);
						adaptor.AddChild(root_1, stream_127.NextNode());

					}
					stream_127.Reset();
					DebugLocation(237, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(237, 143);
					// SugarCpp.g:237:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(237, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(237, 162);
					// SugarCpp.g:237:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(237, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(237, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:238:23: '=' expr
				{
				DebugLocation(238, 23);
				char_literal108=(IToken)Match(input,93,Follow._93_in_func_def1143); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal108);

				DebugLocation(238, 27);
				PushFollow(Follow._expr_in_func_def1145);
				expr109=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr109.Tree);


				{
				// AST REWRITE
				// elements: type_name, 127, generic_parameter, expr, func_args, ident, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 238:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(238, 36);
					// SugarCpp.g:238:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(238, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(238, 47);
					// SugarCpp.g:238:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(238, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(238, 58);
					// SugarCpp.g:238:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(238, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(238, 69);
					// SugarCpp.g:238:69: ( '~' )?
					if (stream_127.HasNext)
					{
						DebugLocation(238, 69);
						adaptor.AddChild(root_1, stream_127.NextNode());

					}
					stream_127.Reset();
					DebugLocation(238, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(238, 80);
					// SugarCpp.g:238:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(238, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(238, 99);
					// SugarCpp.g:238:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(238, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(238, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 18);
			LeaveRule("func_def", 18);
			LeaveRule_func_def();
			if (state.backtracking > 0) { Memoize(input, 18, func_def_StartIndex); }

		}
		DebugLocation(239, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:241:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 19);
		TraceIn("stmt_block", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INDENT110 = default(IToken);
		IToken NEWLINE111 = default(IToken);
		IToken NEWLINE113 = default(IToken);
		IToken DEDENT114 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt112 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT110_tree = default(CommonTree);
		CommonTree NEWLINE111_tree = default(CommonTree);
		CommonTree NEWLINE113_tree = default(CommonTree);
		CommonTree DEDENT114_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(241, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// SugarCpp.g:242:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:242:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(242, 4);
			INDENT110=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1186); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT110);

			DebugLocation(242, 11);
			// SugarCpp.g:242:11: ( NEWLINE )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==NEWLINE))
				{
					alt48 = 1;
				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:242:11: NEWLINE
					{
					DebugLocation(242, 11);
					NEWLINE111=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1188); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE111);


					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }

			DebugLocation(242, 21);
			// SugarCpp.g:242:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==IDENT||LA50_0==68||(LA50_0>=110 && LA50_0<=112)||LA50_0==115||(LA50_0>=118 && LA50_0<=123)))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:242:22: stmt ( NEWLINE )+
					{
					DebugLocation(242, 22);
					PushFollow(Follow._stmt_in_stmt_block1193);
					stmt112=stmt();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt.Add(stmt112.Tree);
					DebugLocation(242, 27);
					// SugarCpp.g:242:27: ( NEWLINE )+
					int cnt49=0;
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==NEWLINE))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch (alt49)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:242:27: NEWLINE
							{
							DebugLocation(242, 27);
							NEWLINE113=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1195); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE113);


							}
							break;

						default:
							if (cnt49 >= 1)
								goto loop49;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee49 = new EarlyExitException( 49, input );
							DebugRecognitionException(eee49);
							throw eee49;
						}
						cnt49++;
					}
					loop49:
						;

					} finally { DebugExitSubRule(49); }


					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }

			DebugLocation(242, 38);
			DEDENT114=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1200); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT114);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 242:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(242, 48);
				// SugarCpp.g:242:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(242, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(242, 61);
				// SugarCpp.g:242:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(242, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 19);
			LeaveRule("stmt_block", 19);
			LeaveRule_stmt_block();
			if (state.backtracking > 0) { Memoize(input, 19, stmt_block_StartIndex); }

		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:245:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 20);
		TraceIn("stmt", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_linq120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(245, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// SugarCpp.g:246:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq )
			int alt51=6;
			try { DebugEnterDecision(51, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 68:
			case 118:
			case 120:
			case 121:
				{
				alt51 = 1;
				}
				break;
			case 112:
				{
				alt51 = 2;
				}
				break;
			case 110:
				{
				alt51 = 3;
				}
				break;
			case 123:
				{
				alt51 = 4;
				}
				break;
			case 119:
				{
				alt51 = 5;
				}
				break;
			case 111:
			case 115:
			case 122:
				{
				alt51 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:246:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(246, 4);
				PushFollow(Follow._stmt_expr_in_stmt1220);
				stmt_expr115=stmt_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr115.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:247:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(247, 4);
				PushFollow(Follow._stmt_if_in_stmt1225);
				stmt_if116=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if116.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:248:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(248, 4);
				PushFollow(Follow._stmt_for_in_stmt1230);
				stmt_for117=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for117.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:249:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(249, 4);
				PushFollow(Follow._stmt_while_in_stmt1235);
				stmt_while118=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while118.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:250:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(250, 4);
				PushFollow(Follow._stmt_try_in_stmt1240);
				stmt_try119=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try119.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:251:4: stmt_linq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(251, 4);
				PushFollow(Follow._stmt_linq_in_stmt1245);
				stmt_linq120=stmt_linq();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_linq120.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 20);
			LeaveRule("stmt", 20);
			LeaveRule_stmt();
			if (state.backtracking > 0) { Memoize(input, 20, stmt_StartIndex); }

		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:254:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 21);
		TraceIn("stmt_expr", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify125 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(254, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// SugarCpp.g:255:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt52=5;
			try { DebugEnterDecision(52, false);
			try
			{
				alt52 = dfa52.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(255, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr1256);
				stmt_alloc121=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc121.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:256:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(256, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr1261);
				stmt_return122=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return122.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:257:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(257, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr1266);
				stmt_using123=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using123.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:258:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(258, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1271);
				stmt_typedef124=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef124.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:259:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(259, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr1276);
				stmt_modify125=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify125.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 21);
			LeaveRule("stmt_expr", 21);
			LeaveRule_stmt_expr();
			if (state.backtracking > 0) { Memoize(input, 21, stmt_expr_StartIndex); }

		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:262:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 22);
		TraceIn("stmt_typedef", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_typedef_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal126 = default(IToken);
		IToken char_literal128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal126_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(262, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// SugarCpp.g:263:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:263:4: 'typedef' ident '=' type_name
			{
			DebugLocation(263, 4);
			string_literal126=(IToken)Match(input,120,Follow._120_in_stmt_typedef1287); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_120.Add(string_literal126);

			DebugLocation(263, 14);
			PushFollow(Follow._ident_in_stmt_typedef1289);
			ident127=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident127.Tree);
			DebugLocation(263, 20);
			char_literal128=(IToken)Match(input,93,Follow._93_in_stmt_typedef1291); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal128);

			DebugLocation(263, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1293);
			type_name129=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name129.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 263:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(263, 37);
				// SugarCpp.g:263:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(263, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(263, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(263, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 22);
			LeaveRule("stmt_typedef", 22);
			LeaveRule_stmt_typedef();
			if (state.backtracking > 0) { Memoize(input, 22, stmt_typedef_StartIndex); }

		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:266:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 23);
		TraceIn("stmt_using_item", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident130 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal131_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(266, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// SugarCpp.g:266:16: ( ident | 'namespace' )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==IDENT))
			{
				alt53 = 1;
			}
			else if ((LA53_0==116))
			{
				alt53 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(266, 18);
				PushFollow(Follow._ident_in_stmt_using_item1312);
				ident130=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident130.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:266:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(266, 26);
				string_literal131=(IToken)Match(input,116,Follow._116_in_stmt_using_item1316); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal131_tree = (CommonTree)adaptor.Create(string_literal131);
				adaptor.AddChild(root_0, string_literal131_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 23);
			LeaveRule("stmt_using_item", 23);
			LeaveRule_stmt_using_item();
			if (state.backtracking > 0) { Memoize(input, 23, stmt_using_item_StartIndex); }

		}
		DebugLocation(266, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:267:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 24);
		TraceIn("stmt_using", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(267, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// SugarCpp.g:268:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:268:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(268, 4);
			string_literal132=(IToken)Match(input,121,Follow._121_in_stmt_using1324); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(string_literal132);

			DebugLocation(268, 12);
			// SugarCpp.g:268:12: ( stmt_using_item )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==IDENT||LA54_0==116))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:268:12: stmt_using_item
					{
					DebugLocation(268, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1326);
					stmt_using_item133=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item133.Tree);

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 268:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(268, 32);
				// SugarCpp.g:268:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(268, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(268, 45);
				// SugarCpp.g:268:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(268, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 24);
			LeaveRule("stmt_using", 24);
			LeaveRule_stmt_using();
			if (state.backtracking > 0) { Memoize(input, 24, stmt_using_StartIndex); }

		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:271:1: stmt_return : 'return' ( expr )? -> ^( Expr_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 25);
		TraceIn("stmt_return", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_return_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(271, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// SugarCpp.g:272:2: ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:272:4: 'return' ( expr )?
			{
			DebugLocation(272, 4);
			string_literal134=(IToken)Match(input,118,Follow._118_in_stmt_return1347); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_118.Add(string_literal134);

			DebugLocation(272, 13);
			// SugarCpp.g:272:13: ( expr )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==IDENT||LA55_0==NUMBER||LA55_0==STRING||LA55_0==61||LA55_0==66||LA55_0==68||LA55_0==70||(LA55_0>=72 && LA55_0<=73)||(LA55_0>=76 && LA55_0<=77)||LA55_0==101||LA55_0==117||LA55_0==127))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:272:13: expr
				{
				DebugLocation(272, 13);
				PushFollow(Follow._expr_in_stmt_return1349);
				expr135=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr135.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 272:19: -> ^( Expr_Return ( expr )? )
			{
				DebugLocation(272, 22);
				// SugarCpp.g:272:22: ^( Expr_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(272, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Return, "Expr_Return"), root_1);

				DebugLocation(272, 36);
				// SugarCpp.g:272:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(272, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 25);
			LeaveRule("stmt_return", 25);
			LeaveRule_stmt_return();
			if (state.backtracking > 0) { Memoize(input, 25, stmt_return_StartIndex); }

		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:275:1: stmt_if : 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 26);
		TraceIn("stmt_if", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_if_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal136 = default(IToken);
		IToken char_literal137 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken string_literal141 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal136_tree = default(CommonTree);
		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree string_literal141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(275, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// SugarCpp.g:276:2: ( 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:276:4: 'if' '(' expr ')' stmt_block ( 'else' stmt_block )?
			{
			DebugLocation(276, 4);
			string_literal136=(IToken)Match(input,112,Follow._112_in_stmt_if1370); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_112.Add(string_literal136);

			DebugLocation(276, 9);
			char_literal137=(IToken)Match(input,68,Follow._68_in_stmt_if1372); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_68.Add(char_literal137);

			DebugLocation(276, 13);
			PushFollow(Follow._expr_in_stmt_if1374);
			expr138=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr138.Tree);
			DebugLocation(276, 18);
			char_literal139=(IToken)Match(input,69,Follow._69_in_stmt_if1376); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_69.Add(char_literal139);

			DebugLocation(276, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1378);
			stmt_block140=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block140.Tree);
			DebugLocation(276, 33);
			// SugarCpp.g:276:33: ( 'else' stmt_block )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==108))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:276:34: 'else' stmt_block
				{
				DebugLocation(276, 34);
				string_literal141=(IToken)Match(input,108,Follow._108_in_stmt_if1381); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_108.Add(string_literal141);

				DebugLocation(276, 41);
				PushFollow(Follow._stmt_block_in_stmt_if1383);
				stmt_block142=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block142.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }



			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 276:54: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(276, 57);
				// SugarCpp.g:276:57: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(276, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(276, 67);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(276, 72);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(276, 83);
				// SugarCpp.g:276:83: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(276, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 26);
			LeaveRule("stmt_if", 26);
			LeaveRule_stmt_if();
			if (state.backtracking > 0) { Memoize(input, 26, stmt_if_StartIndex); }

		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:279:1: stmt_while : 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 27);
		TraceIn("stmt_while", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_while_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal143 = default(IToken);
		IToken char_literal144 = default(IToken);
		IToken char_literal146 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block147 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal143_tree = default(CommonTree);
		CommonTree char_literal144_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(279, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// SugarCpp.g:280:2: ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:280:4: 'while' '(' expr ')' stmt_block
			{
			DebugLocation(280, 4);
			string_literal143=(IToken)Match(input,123,Follow._123_in_stmt_while1409); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(string_literal143);

			DebugLocation(280, 12);
			char_literal144=(IToken)Match(input,68,Follow._68_in_stmt_while1411); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_68.Add(char_literal144);

			DebugLocation(280, 16);
			PushFollow(Follow._expr_in_stmt_while1413);
			expr145=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr145.Tree);
			DebugLocation(280, 21);
			char_literal146=(IToken)Match(input,69,Follow._69_in_stmt_while1415); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_69.Add(char_literal146);

			DebugLocation(280, 25);
			PushFollow(Follow._stmt_block_in_stmt_while1417);
			stmt_block147=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block147.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 280:36: -> ^( Stmt_While expr stmt_block )
			{
				DebugLocation(280, 39);
				// SugarCpp.g:280:39: ^( Stmt_While expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(280, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

				DebugLocation(280, 52);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(280, 57);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 27);
			LeaveRule("stmt_while", 27);
			LeaveRule_stmt_while();
			if (state.backtracking > 0) { Memoize(input, 27, stmt_while_StartIndex); }

		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:283:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 28);
		TraceIn("stmt_for", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_for_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal148 = default(IToken);
		IToken char_literal149 = default(IToken);
		IToken char_literal151 = default(IToken);
		IToken char_literal153 = default(IToken);
		IToken string_literal155 = default(IToken);
		IToken char_literal157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block158 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal148_tree = default(CommonTree);
		CommonTree char_literal149_tree = default(CommonTree);
		CommonTree char_literal151_tree = default(CommonTree);
		CommonTree char_literal153_tree = default(CommonTree);
		CommonTree string_literal155_tree = default(CommonTree);
		CommonTree char_literal157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(283, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// SugarCpp.g:288:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:288:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(288, 4);
			string_literal148=(IToken)Match(input,110,Follow._110_in_stmt_for1443); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_110.Add(string_literal148);

			DebugLocation(288, 10);
			char_literal149=(IToken)Match(input,68,Follow._68_in_stmt_for1445); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_68.Add(char_literal149);

			DebugLocation(288, 14);
			PushFollow(Follow._expr_in_stmt_for1447);
			expr150=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr150.Tree);
			DebugLocation(288, 19);
			// SugarCpp.g:288:19: ( ';' expr ';' expr | 'in' expr )
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==88))
			{
				alt57 = 1;
			}
			else if ((LA57_0==114))
			{
				alt57 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:20: ';' expr ';' expr
				{
				DebugLocation(288, 20);
				char_literal151=(IToken)Match(input,88,Follow._88_in_stmt_for1450); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal151);

				DebugLocation(288, 24);
				PushFollow(Follow._expr_in_stmt_for1452);
				expr152=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr152.Tree);
				DebugLocation(288, 29);
				char_literal153=(IToken)Match(input,88,Follow._88_in_stmt_for1454); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal153);

				DebugLocation(288, 33);
				PushFollow(Follow._expr_in_stmt_for1456);
				expr154=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr154.Tree);
				DebugLocation(288, 38);
				if (state.backtracking == 0)
				{
					type=0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:288:50: 'in' expr
				{
				DebugLocation(288, 50);
				string_literal155=(IToken)Match(input,114,Follow._114_in_stmt_for1462); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(string_literal155);

				DebugLocation(288, 55);
				PushFollow(Follow._expr_in_stmt_for1464);
				expr156=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr156.Tree);
				DebugLocation(288, 60);
				if (state.backtracking == 0)
				{
					type=1;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(288, 71);
			char_literal157=(IToken)Match(input,69,Follow._69_in_stmt_for1469); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_69.Add(char_literal157);

			DebugLocation(288, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1471);
			stmt_block158=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block158.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block, expr, expr, expr, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 289:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(289, 18);
				// SugarCpp.g:289:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(289, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(289, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(289, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(289, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(289, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 290:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(290, 7);
				// SugarCpp.g:290:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(290, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(290, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(290, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(290, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 28);
			LeaveRule("stmt_for", 28);
			LeaveRule_stmt_for();
			if (state.backtracking > 0) { Memoize(input, 28, stmt_for_StartIndex); }

		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:293:1: stmt_try : 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 29);
		TraceIn("stmt_try", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_try_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal159 = default(IToken);
		IToken string_literal161 = default(IToken);
		IToken char_literal162 = default(IToken);
		IToken char_literal164 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block165 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal159_tree = default(CommonTree);
		CommonTree string_literal161_tree = default(CommonTree);
		CommonTree char_literal162_tree = default(CommonTree);
		CommonTree char_literal164_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(293, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// SugarCpp.g:294:2: ( 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:294:4: 'try' stmt_block 'catch' '(' expr ')' stmt_block
			{
			DebugLocation(294, 4);
			string_literal159=(IToken)Match(input,119,Follow._119_in_stmt_try1516); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_119.Add(string_literal159);

			DebugLocation(294, 10);
			PushFollow(Follow._stmt_block_in_stmt_try1518);
			stmt_block160=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block160.Tree);
			DebugLocation(294, 21);
			string_literal161=(IToken)Match(input,106,Follow._106_in_stmt_try1520); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_106.Add(string_literal161);

			DebugLocation(294, 29);
			char_literal162=(IToken)Match(input,68,Follow._68_in_stmt_try1522); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_68.Add(char_literal162);

			DebugLocation(294, 33);
			PushFollow(Follow._expr_in_stmt_try1524);
			expr163=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr163.Tree);
			DebugLocation(294, 38);
			char_literal164=(IToken)Match(input,69,Follow._69_in_stmt_try1526); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_69.Add(char_literal164);

			DebugLocation(294, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1528);
			stmt_block165=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block165.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 294:53: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(294, 56);
				// SugarCpp.g:294:56: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(294, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(294, 67);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(294, 78);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(294, 83);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 29);
			LeaveRule("stmt_try", 29);
			LeaveRule_stmt_try();
			if (state.backtracking > 0) { Memoize(input, 29, stmt_try_StartIndex); }

		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarCpp.g:297:1: linq_item : ( 'from' ident 'in' expr -> ^( Linq_From ident expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) );
	[GrammarRule("linq_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 30);
		TraceIn("linq_item", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int linq_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal166 = default(IToken);
		IToken string_literal168 = default(IToken);
		IToken string_literal170 = default(IToken);
		IToken char_literal172 = default(IToken);
		IToken string_literal174 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr175 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal166_tree = default(CommonTree);
		CommonTree string_literal168_tree = default(CommonTree);
		CommonTree string_literal170_tree = default(CommonTree);
		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree string_literal174_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(297, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// SugarCpp.g:298:2: ( 'from' ident 'in' expr -> ^( Linq_From ident expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) )
			int alt58=3;
			try { DebugEnterDecision(58, false);
			switch (input.LA(1))
			{
			case 111:
				{
				alt58 = 1;
				}
				break;
			case 115:
				{
				alt58 = 2;
				}
				break;
			case 122:
				{
				alt58 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:298:4: 'from' ident 'in' expr
				{
				DebugLocation(298, 4);
				string_literal166=(IToken)Match(input,111,Follow._111_in_linq_item1551); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(string_literal166);

				DebugLocation(298, 11);
				PushFollow(Follow._ident_in_linq_item1553);
				ident167=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident167.Tree);
				DebugLocation(298, 17);
				string_literal168=(IToken)Match(input,114,Follow._114_in_linq_item1555); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(string_literal168);

				DebugLocation(298, 22);
				PushFollow(Follow._expr_in_linq_item1557);
				expr169=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr169.Tree);


				{
				// AST REWRITE
				// elements: expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 298:27: -> ^( Linq_From ident expr )
				{
					DebugLocation(298, 30);
					// SugarCpp.g:298:30: ^( Linq_From ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 32);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_From, "Linq_From"), root_1);

					DebugLocation(298, 42);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(298, 48);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:299:4: 'let' ident '=' expr
				{
				DebugLocation(299, 4);
				string_literal170=(IToken)Match(input,115,Follow._115_in_linq_item1572); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_115.Add(string_literal170);

				DebugLocation(299, 10);
				PushFollow(Follow._ident_in_linq_item1574);
				ident171=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident171.Tree);
				DebugLocation(299, 16);
				char_literal172=(IToken)Match(input,93,Follow._93_in_linq_item1576); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal172);

				DebugLocation(299, 20);
				PushFollow(Follow._expr_in_linq_item1578);
				expr173=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr173.Tree);


				{
				// AST REWRITE
				// elements: expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 299:25: -> ^( Linq_Let ident expr )
				{
					DebugLocation(299, 28);
					// SugarCpp.g:299:28: ^( Linq_Let ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(299, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Let, "Linq_Let"), root_1);

					DebugLocation(299, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(299, 45);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:300:4: 'where' expr
				{
				DebugLocation(300, 4);
				string_literal174=(IToken)Match(input,122,Follow._122_in_linq_item1593); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_122.Add(string_literal174);

				DebugLocation(300, 12);
				PushFollow(Follow._expr_in_linq_item1595);
				expr175=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr175.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 300:17: -> ^( Linq_Where expr )
				{
					DebugLocation(300, 20);
					// SugarCpp.g:300:20: ^( Linq_Where expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(300, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Where, "Linq_Where"), root_1);

					DebugLocation(300, 33);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_item", 30);
			LeaveRule("linq_item", 30);
			LeaveRule_linq_item();
			if (state.backtracking > 0) { Memoize(input, 30, linq_item_StartIndex); }

		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return retval;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarCpp.g:303:1: linq_prefix : ( linq_item ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 31);
		TraceIn("linq_prefix", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int linq_prefix_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE177 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE177_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_linq_item=new RewriteRuleSubtreeStream(adaptor,"rule linq_item");
		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(303, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// SugarCpp.g:304:2: ( ( linq_item ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:304:4: ( linq_item ( NEWLINE )+ )+
			{
			DebugLocation(304, 4);
			// SugarCpp.g:304:4: ( linq_item ( NEWLINE )+ )+
			int cnt60=0;
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==111||LA60_0==115||LA60_0==122))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:304:5: linq_item ( NEWLINE )+
					{
					DebugLocation(304, 5);
					PushFollow(Follow._linq_item_in_linq_prefix1615);
					linq_item176=linq_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_linq_item.Add(linq_item176.Tree);
					DebugLocation(304, 15);
					// SugarCpp.g:304:15: ( NEWLINE )+
					int cnt59=0;
					try { DebugEnterSubRule(59);
					while (true)
					{
						int alt59=2;
						try { DebugEnterDecision(59, false);
						int LA59_0 = input.LA(1);

						if ((LA59_0==NEWLINE))
						{
							alt59 = 1;
						}


						} finally { DebugExitDecision(59); }
						switch (alt59)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:304:15: NEWLINE
							{
							DebugLocation(304, 15);
							NEWLINE177=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix1617); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE177);


							}
							break;

						default:
							if (cnt59 >= 1)
								goto loop59;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee59 = new EarlyExitException( 59, input );
							DebugRecognitionException(eee59);
							throw eee59;
						}
						cnt59++;
					}
					loop59:
						;

					} finally { DebugExitSubRule(59); }


					}
					break;

				default:
					if (cnt60 >= 1)
						goto loop60;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee60 = new EarlyExitException( 60, input );
					DebugRecognitionException(eee60);
					throw eee60;
				}
				cnt60++;
			}
			loop60:
				;

			} finally { DebugExitSubRule(60); }



			{
			// AST REWRITE
			// elements: linq_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 304:26: -> ^( Linq_Prefix ( linq_item )+ )
			{
				DebugLocation(304, 29);
				// SugarCpp.g:304:29: ^( Linq_Prefix ( linq_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(304, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Prefix, "Linq_Prefix"), root_1);

				DebugLocation(304, 43);
				if (!(stream_linq_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_linq_item.HasNext )
				{
					DebugLocation(304, 43);
					adaptor.AddChild(root_1, stream_linq_item.NextTree());

				}
				stream_linq_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_prefix", 31);
			LeaveRule("linq_prefix", 31);
			LeaveRule_linq_prefix();
			if (state.backtracking > 0) { Memoize(input, 31, linq_prefix_StartIndex); }

		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return retval;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarCpp.g:307:1: stmt_linq : linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 32);
		TraceIn("stmt_linq", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_linq_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> linq_prefix178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block179 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_linq_prefix=new RewriteRuleSubtreeStream(adaptor,"rule linq_prefix");
		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(307, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// SugarCpp.g:308:2: ( linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:308:4: linq_prefix stmt_block
			{
			DebugLocation(308, 4);
			PushFollow(Follow._linq_prefix_in_stmt_linq1640);
			linq_prefix178=linq_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_linq_prefix.Add(linq_prefix178.Tree);
			DebugLocation(308, 16);
			PushFollow(Follow._stmt_block_in_stmt_linq1642);
			stmt_block179=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block179.Tree);


			{
			// AST REWRITE
			// elements: linq_prefix, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 308:27: -> ^( Stmt_Linq linq_prefix stmt_block )
			{
				DebugLocation(308, 30);
				// SugarCpp.g:308:30: ^( Stmt_Linq linq_prefix stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(308, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Linq, "Stmt_Linq"), root_1);

				DebugLocation(308, 42);
				adaptor.AddChild(root_1, stream_linq_prefix.NextTree());
				DebugLocation(308, 54);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_linq", 32);
			LeaveRule("stmt_linq", 32);
			LeaveRule_stmt_linq();
			if (state.backtracking > 0) { Memoize(input, 32, stmt_linq_StartIndex); }

		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return retval;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:311:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 33);
		TraceIn("ident_list", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal181 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident182 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal181_tree = default(CommonTree);
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(311, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// SugarCpp.g:312:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:312:4: ident ( ',' ident )*
			{
			DebugLocation(312, 4);
			PushFollow(Follow._ident_in_ident_list1663);
			ident180=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident180.Tree);
			DebugLocation(312, 10);
			// SugarCpp.g:312:10: ( ',' ident )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==75))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:312:11: ',' ident
					{
					DebugLocation(312, 11);
					char_literal181=(IToken)Match(input,75,Follow._75_in_ident_list1666); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_75.Add(char_literal181);

					DebugLocation(312, 15);
					PushFollow(Follow._ident_in_ident_list1668);
					ident182=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident182.Tree);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 312:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(312, 26);
				// SugarCpp.g:312:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(312, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(312, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(312, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 33);
			LeaveRule("ident_list", 33);
			LeaveRule_ident_list();
			if (state.backtracking > 0) { Memoize(input, 33, ident_list_StartIndex); }

		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:315:1: stmt_alloc : ( ident_list ':' type_name ( ':=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) | ident ':=' ^ modify_expr );
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 34);
		TraceIn("stmt_alloc", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_alloc_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal184 = default(IToken);
		IToken string_literal186 = default(IToken);
		IToken string_literal189 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr187 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal184_tree = default(CommonTree);
		CommonTree string_literal186_tree = default(CommonTree);
		CommonTree string_literal189_tree = default(CommonTree);
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(315, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// SugarCpp.g:316:2: ( ident_list ':' type_name ( ':=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) | ident ':=' ^ modify_expr )
			int alt63=2;
			try { DebugEnterDecision(63, false);
			try
			{
				alt63 = dfa63.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:316:4: ident_list ':' type_name ( ':=' expr )?
				{
				DebugLocation(316, 4);
				PushFollow(Follow._ident_list_in_stmt_alloc1690);
				ident_list183=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list183.Tree);
				DebugLocation(316, 15);
				char_literal184=(IToken)Match(input,85,Follow._85_in_stmt_alloc1692); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_85.Add(char_literal184);

				DebugLocation(316, 19);
				PushFollow(Follow._type_name_in_stmt_alloc1694);
				type_name185=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name185.Tree);
				DebugLocation(316, 29);
				// SugarCpp.g:316:29: ( ':=' expr )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==87))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:316:30: ':=' expr
					{
					DebugLocation(316, 30);
					string_literal186=(IToken)Match(input,87,Follow._87_in_stmt_alloc1697); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_87.Add(string_literal186);

					DebugLocation(316, 35);
					PushFollow(Follow._expr_in_stmt_alloc1699);
					expr187=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr187.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(62); }



				{
				// AST REWRITE
				// elements: ident_list, expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 316:42: -> ^( Expr_Alloc type_name ident_list ( expr )? )
				{
					DebugLocation(316, 45);
					// SugarCpp.g:316:45: ^( Expr_Alloc type_name ident_list ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(316, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(316, 58);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(316, 68);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(316, 79);
					// SugarCpp.g:316:79: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(316, 79);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:317:4: ident ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(317, 4);
				PushFollow(Follow._ident_in_stmt_alloc1719);
				ident188=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident188.Tree);
				DebugLocation(317, 14);
				string_literal189=(IToken)Match(input,87,Follow._87_in_stmt_alloc1721); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal189_tree = (CommonTree)adaptor.Create(string_literal189);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal189_tree, root_0);
				}
				DebugLocation(317, 16);
				PushFollow(Follow._modify_expr_in_stmt_alloc1724);
				modify_expr190=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr190.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 34);
			LeaveRule("stmt_alloc", 34);
			LeaveRule_stmt_alloc();
			if (state.backtracking > 0) { Memoize(input, 34, stmt_alloc_StartIndex); }

		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:320:1: stmt_modify : lvalue ( modify_expr_op ^ cond_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 35);
		TraceIn("stmt_modify", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_modify_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr193 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(320, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// SugarCpp.g:321:2: ( lvalue ( modify_expr_op ^ cond_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:321:4: lvalue ( modify_expr_op ^ cond_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(321, 4);
			PushFollow(Follow._lvalue_in_stmt_modify1735);
			lvalue191=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue191.Tree);
			DebugLocation(321, 11);
			// SugarCpp.g:321:11: ( modify_expr_op ^ cond_expr )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==64||LA64_0==67||LA64_0==71||LA64_0==74||LA64_0==78||LA64_0==84||LA64_0==91||LA64_0==93||LA64_0==99||LA64_0==104||LA64_0==125))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:321:12: modify_expr_op ^ cond_expr
				{
				DebugLocation(321, 26);
				PushFollow(Follow._modify_expr_op_in_stmt_modify1738);
				modify_expr_op192=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op192.Tree, root_0);
				DebugLocation(321, 28);
				PushFollow(Follow._cond_expr_in_stmt_modify1741);
				cond_expr193=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr193.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 35);
			LeaveRule("stmt_modify", 35);
			LeaveRule_stmt_modify();
			if (state.backtracking > 0) { Memoize(input, 35, stmt_modify_StartIndex); }

		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:324:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 36);
		TraceIn("expr", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr194 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(324, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// SugarCpp.g:325:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:325:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(325, 4);
			PushFollow(Follow._lambda_expr_in_expr1754);
			lambda_expr194=lambda_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr194.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 36);
			LeaveRule("expr", 36);
			LeaveRule_expr();
			if (state.backtracking > 0) { Memoize(input, 36, expr_StartIndex); }

		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:328:1: lambda_expr : ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 37);
		TraceIn("lambda_expr", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lambda_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal195 = default(IToken);
		IToken char_literal196 = default(IToken);
		IToken char_literal198 = default(IToken);
		IToken string_literal199 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr200 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr201 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal195_tree = default(CommonTree);
		CommonTree char_literal196_tree = default(CommonTree);
		CommonTree char_literal198_tree = default(CommonTree);
		CommonTree string_literal199_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(328, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// SugarCpp.g:329:2: ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr )
			int alt66=2;
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==101))
			{
				alt66 = 1;
			}
			else if ((LA66_0==IDENT||LA66_0==NUMBER||LA66_0==STRING||LA66_0==61||LA66_0==66||LA66_0==68||LA66_0==70||(LA66_0>=72 && LA66_0<=73)||(LA66_0>=76 && LA66_0<=77)||LA66_0==117||LA66_0==127))
			{
				alt66 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:4: '\\\\' '(' ( func_args )? ')' '=>' lambda_expr
				{
				DebugLocation(329, 4);
				char_literal195=(IToken)Match(input,101,Follow._101_in_lambda_expr1765); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_101.Add(char_literal195);

				DebugLocation(329, 9);
				char_literal196=(IToken)Match(input,68,Follow._68_in_lambda_expr1767); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_68.Add(char_literal196);

				DebugLocation(329, 13);
				// SugarCpp.g:329:13: ( func_args )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==IDENT))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:13: func_args
					{
					DebugLocation(329, 13);
					PushFollow(Follow._func_args_in_lambda_expr1769);
					func_args197=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args197.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(65); }

				DebugLocation(329, 24);
				char_literal198=(IToken)Match(input,69,Follow._69_in_lambda_expr1772); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal198);

				DebugLocation(329, 28);
				string_literal199=(IToken)Match(input,95,Follow._95_in_lambda_expr1774); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_95.Add(string_literal199);

				DebugLocation(329, 33);
				PushFollow(Follow._lambda_expr_in_lambda_expr1776);
				lambda_expr200=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lambda_expr.Add(lambda_expr200.Tree);


				{
				// AST REWRITE
				// elements: lambda_expr, func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 329:45: -> ^( Expr_Lambda ( func_args )? lambda_expr )
				{
					DebugLocation(329, 48);
					// SugarCpp.g:329:48: ^( Expr_Lambda ( func_args )? lambda_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(329, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(329, 62);
					// SugarCpp.g:329:62: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(329, 62);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(329, 73);
					adaptor.AddChild(root_1, stream_lambda_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:330:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(330, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr1792);
				modify_expr201=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr201.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 37);
			LeaveRule("lambda_expr", 37);
			LeaveRule_lambda_expr();
			if (state.backtracking > 0) { Memoize(input, 37, lambda_expr_StartIndex); }

		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:333:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 38);
		TraceIn("modify_expr_op", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set202 = default(IToken);

		CommonTree set202_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(333, 92);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// SugarCpp.g:333:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(333, 15);

			set202=(IToken)input.LT(1);
			if (input.LA(1)==64||input.LA(1)==67||input.LA(1)==71||input.LA(1)==74||input.LA(1)==78||input.LA(1)==84||input.LA(1)==91||input.LA(1)==93||input.LA(1)==99||input.LA(1)==104||input.LA(1)==125)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set202));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 38);
			LeaveRule("modify_expr_op", 38);
			LeaveRule_modify_expr_op();
			if (state.backtracking > 0) { Memoize(input, 38, modify_expr_op_StartIndex); }

		}
		DebugLocation(333, 92);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:334:1: modify_expr : cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 39);
		TraceIn("modify_expr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr205 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set204_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(334, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// SugarCpp.g:335:2: ( cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:335:4: cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(335, 4);
			PushFollow(Follow._cond_expr_in_modify_expr1850);
			cond_expr203=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr203.Tree);
			DebugLocation(335, 14);
			// SugarCpp.g:335:14: ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==64||LA67_0==67||LA67_0==71||LA67_0==74||LA67_0==78||LA67_0==84||LA67_0==87||LA67_0==91||LA67_0==93||LA67_0==99||LA67_0==104||LA67_0==125))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:335:15: ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr
				{
				DebugLocation(335, 99);

				set204=(IToken)input.LT(1);
				set204=(IToken)input.LT(1);
				if (input.LA(1)==64||input.LA(1)==67||input.LA(1)==71||input.LA(1)==74||input.LA(1)==78||input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==93||input.LA(1)==99||input.LA(1)==104||input.LA(1)==125)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set204), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(335, 101);
				PushFollow(Follow._modify_expr_in_modify_expr1902);
				modify_expr205=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr205.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 39);
			LeaveRule("modify_expr", 39);
			LeaveRule_modify_expr();
			if (state.backtracking > 0) { Memoize(input, 39, modify_expr_StartIndex); }

		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:338:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 40);
		TraceIn("cond_expr_item", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr206 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(338, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// SugarCpp.g:338:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:338:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(338, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item1913);
			cond_expr206=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr206.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 40);
			LeaveRule("cond_expr_item", 40);
			LeaveRule_cond_expr_item();
			if (state.backtracking > 0) { Memoize(input, 40, cond_expr_item_StartIndex); }

		}
		DebugLocation(338, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:339:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 41);
		TraceIn("cond_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal207 = default(IToken);
		IToken string_literal208 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal207_tree = default(CommonTree);
		CommonTree string_literal208_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(339, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// SugarCpp.g:340:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:340:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(340, 4);
			// SugarCpp.g:340:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:340:5: a= or_expr
			{
			DebugLocation(340, 6);
			PushFollow(Follow._or_expr_in_cond_expr1925);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 340:15: -> $a
			{
				DebugLocation(340, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(340, 22);
			// SugarCpp.g:340:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==112))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:340:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(340, 23);
				string_literal207=(IToken)Match(input,112,Follow._112_in_cond_expr1934); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(string_literal207);

				DebugLocation(340, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr1938);
				a=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
				DebugLocation(340, 45);
				string_literal208=(IToken)Match(input,108,Follow._108_in_cond_expr1940); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_108.Add(string_literal208);

				DebugLocation(340, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr1944);
				b=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cond_expr, b, a
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 340:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(340, 72);
					// SugarCpp.g:340:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(340, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(340, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(340, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(340, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 41);
			LeaveRule("cond_expr", 41);
			LeaveRule_cond_expr();
			if (state.backtracking > 0) { Memoize(input, 41, cond_expr_StartIndex); }

		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:343:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 42);
		TraceIn("or_expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int or_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal209 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal209_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(343, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// SugarCpp.g:344:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:344:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(344, 4);
			// SugarCpp.g:344:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:344:5: a= and_expr
			{
			DebugLocation(344, 6);
			PushFollow(Follow._and_expr_in_or_expr1975);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 344:16: -> $a
			{
				DebugLocation(344, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(344, 23);
			// SugarCpp.g:344:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==126))
				{
					alt69 = 1;
				}


				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:344:24: '||' b= and_expr
					{
					DebugLocation(344, 24);
					string_literal209=(IToken)Match(input,126,Follow._126_in_or_expr1984); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_126.Add(string_literal209);

					DebugLocation(344, 30);
					PushFollow(Follow._and_expr_in_or_expr1988);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, 126
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 344:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(344, 43);
						// SugarCpp.g:344:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(344, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(344, 54);
						adaptor.AddChild(root_1, stream_126.NextNode());
						DebugLocation(344, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(344, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 42);
			LeaveRule("or_expr", 42);
			LeaveRule_or_expr();
			if (state.backtracking > 0) { Memoize(input, 42, or_expr_StartIndex); }

		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:347:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 43);
		TraceIn("and_expr", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int and_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal210 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal210_tree = default(CommonTree);
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(347, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// SugarCpp.g:348:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:348:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(348, 4);
			// SugarCpp.g:348:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:348:5: a= bit_or
			{
			DebugLocation(348, 6);
			PushFollow(Follow._bit_or_in_and_expr2018);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 348:14: -> $a
			{
				DebugLocation(348, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(348, 21);
			// SugarCpp.g:348:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==65))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:348:22: '&&' b= bit_or
					{
					DebugLocation(348, 22);
					string_literal210=(IToken)Match(input,65,Follow._65_in_and_expr2027); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_65.Add(string_literal210);

					DebugLocation(348, 28);
					PushFollow(Follow._bit_or_in_and_expr2031);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, and_expr, 65
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 348:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(348, 39);
						// SugarCpp.g:348:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(348, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(348, 50);
						adaptor.AddChild(root_1, stream_65.NextNode());
						DebugLocation(348, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(348, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 43);
			LeaveRule("and_expr", 43);
			LeaveRule_and_expr();
			if (state.backtracking > 0) { Memoize(input, 43, and_expr_StartIndex); }

		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:351:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 44);
		TraceIn("bit_or", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_or_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal211 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(351, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// SugarCpp.g:352:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:352:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(352, 4);
			// SugarCpp.g:352:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:352:5: a= bit_xor
			{
			DebugLocation(352, 6);
			PushFollow(Follow._bit_xor_in_bit_or2061);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 352:15: -> $a
			{
				DebugLocation(352, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(352, 22);
			// SugarCpp.g:352:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==124))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:352:23: '|' b= bit_xor
					{
					DebugLocation(352, 23);
					char_literal211=(IToken)Match(input,124,Follow._124_in_bit_or2070); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_124.Add(char_literal211);

					DebugLocation(352, 28);
					PushFollow(Follow._bit_xor_in_bit_or2074);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_or, b, 124
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 352:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(352, 40);
						// SugarCpp.g:352:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(352, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(352, 51);
						adaptor.AddChild(root_1, stream_124.NextNode());
						DebugLocation(352, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(352, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 44);
			LeaveRule("bit_or", 44);
			LeaveRule_bit_or();
			if (state.backtracking > 0) { Memoize(input, 44, bit_or_StartIndex); }

		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:355:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 45);
		TraceIn("bit_xor", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_xor_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal212 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal212_tree = default(CommonTree);
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(355, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// SugarCpp.g:356:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:356:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(356, 4);
			// SugarCpp.g:356:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:356:5: a= bit_and
			{
			DebugLocation(356, 6);
			PushFollow(Follow._bit_and_in_bit_xor2104);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 356:15: -> $a
			{
				DebugLocation(356, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(356, 22);
			// SugarCpp.g:356:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==103))
				{
					alt72 = 1;
				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:356:23: '^' b= bit_and
					{
					DebugLocation(356, 23);
					char_literal212=(IToken)Match(input,103,Follow._103_in_bit_xor2113); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(char_literal212);

					DebugLocation(356, 28);
					PushFollow(Follow._bit_and_in_bit_xor2117);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 103, bit_xor, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 356:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(356, 40);
						// SugarCpp.g:356:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(356, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(356, 51);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(356, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(356, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 45);
			LeaveRule("bit_xor", 45);
			LeaveRule_bit_xor();
			if (state.backtracking > 0) { Memoize(input, 45, bit_xor_StartIndex); }

		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:359:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 46);
		TraceIn("bit_and", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_and_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal213 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal213_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(359, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// SugarCpp.g:360:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:360:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(360, 4);
			// SugarCpp.g:360:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:360:5: a= cmp_equ_expr
			{
			DebugLocation(360, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and2147);
			a=cmp_equ_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 360:20: -> $a
			{
				DebugLocation(360, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(360, 27);
			// SugarCpp.g:360:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==66))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:360:28: '&' b= cmp_equ_expr
					{
					DebugLocation(360, 28);
					char_literal213=(IToken)Match(input,66,Follow._66_in_bit_and2156); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_66.Add(char_literal213);

					DebugLocation(360, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and2160);
					b=cmp_equ_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 66, bit_and, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 360:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(360, 50);
						// SugarCpp.g:360:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(360, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(360, 61);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(360, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(360, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 46);
			LeaveRule("bit_and", 46);
			LeaveRule_bit_and();
			if (state.backtracking > 0) { Memoize(input, 46, bit_and_StartIndex); }

		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:363:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 47);
		TraceIn("cmp_equ_expr_op", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set214 = default(IToken);

		CommonTree set214_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(363, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// SugarCpp.g:363:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(363, 16);

			set214=(IToken)input.LT(1);
			if (input.LA(1)==62||input.LA(1)==94)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set214));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 47);
			LeaveRule("cmp_equ_expr_op", 47);
			LeaveRule_cmp_equ_expr_op();
			if (state.backtracking > 0) { Memoize(input, 47, cmp_equ_expr_op_StartIndex); }

		}
		DebugLocation(363, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:364:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 48);
		TraceIn("cmp_equ_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op215 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(364, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// SugarCpp.g:365:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:365:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			{
			DebugLocation(365, 4);
			// SugarCpp.g:365:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:365:5: a= cmp_expr
			{
			DebugLocation(365, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr2201);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 365:16: -> $a
			{
				DebugLocation(365, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(365, 23);
			// SugarCpp.g:365:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==62||LA74_0==94))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:365:24: cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(365, 24);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr2210);
				cmp_equ_expr_op215=cmp_equ_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_equ_expr_op.Add(cmp_equ_expr_op215.Tree);
				DebugLocation(365, 41);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr2214);
				b=cmp_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_equ_expr_op, cmp_equ_expr
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 365:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
				{
					DebugLocation(365, 54);
					// SugarCpp.g:365:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(365, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(365, 65);
					adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
					DebugLocation(365, 82);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(365, 96);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 48);
			LeaveRule("cmp_equ_expr", 48);
			LeaveRule_cmp_equ_expr();
			if (state.backtracking > 0) { Memoize(input, 48, cmp_equ_expr_StartIndex); }

		}
		DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr_op();
	partial void LeaveRule_cmp_expr_op();

	// $ANTLR start "cmp_expr_op"
	// SugarCpp.g:368:1: cmp_expr_op : ( '<' | '<=' | '>' | '>=' );
	[GrammarRule("cmp_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op()
	{
		EnterRule_cmp_expr_op();
		EnterRule("cmp_expr_op", 49);
		TraceIn("cmp_expr_op", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set216 = default(IToken);

		CommonTree set216_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_expr_op");
		DebugLocation(368, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// SugarCpp.g:368:12: ( '<' | '<=' | '>' | '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(368, 12);

			set216=(IToken)input.LT(1);
			if (input.LA(1)==89||input.LA(1)==92||(input.LA(1)>=96 && input.LA(1)<=97))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set216));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr_op", 49);
			LeaveRule("cmp_expr_op", 49);
			LeaveRule_cmp_expr_op();
			if (state.backtracking > 0) { Memoize(input, 49, cmp_expr_op_StartIndex); }

		}
		DebugLocation(368, 37);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_expr_op"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:369:1: cmp_expr : (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 50);
		TraceIn("cmp_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(369, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// SugarCpp.g:370:2: ( (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:370:4: (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			{
			DebugLocation(370, 4);
			// SugarCpp.g:370:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:370:5: a= shift_expr
			{
			DebugLocation(370, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr2264);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 370:18: -> $a
			{
				DebugLocation(370, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(370, 25);
			// SugarCpp.g:370:25: ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==89||LA75_0==92||(LA75_0>=96 && LA75_0<=97)))
			{
				alt75 = 1;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:26: cmp_expr_op b= shift_expr
				{
				DebugLocation(370, 26);
				PushFollow(Follow._cmp_expr_op_in_cmp_expr2273);
				cmp_expr_op217=cmp_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr_op.Add(cmp_expr_op217.Tree);
				DebugLocation(370, 39);
				PushFollow(Follow._shift_expr_in_cmp_expr2277);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_expr, cmp_expr_op
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 370:51: -> ^( Expr_Bin cmp_expr_op $cmp_expr $b)
				{
					DebugLocation(370, 54);
					// SugarCpp.g:370:54: ^( Expr_Bin cmp_expr_op $cmp_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(370, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(370, 65);
					adaptor.AddChild(root_1, stream_cmp_expr_op.NextTree());
					DebugLocation(370, 78);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(370, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 50);
			LeaveRule("cmp_expr", 50);
			LeaveRule_cmp_expr();
			if (state.backtracking > 0) { Memoize(input, 50, cmp_expr_StartIndex); }

		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:373:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 51);
		TraceIn("shift_expr_op", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set218 = default(IToken);

		CommonTree set218_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(373, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// SugarCpp.g:373:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(373, 14);

			set218=(IToken)input.LT(1);
			if (input.LA(1)==90||input.LA(1)==98)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set218));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 51);
			LeaveRule("shift_expr_op", 51);
			LeaveRule_shift_expr_op();
			if (state.backtracking > 0) { Memoize(input, 51, shift_expr_op_StartIndex); }

		}
		DebugLocation(373, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:374:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 52);
		TraceIn("shift_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op219 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(374, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// SugarCpp.g:375:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:375:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(375, 4);
			// SugarCpp.g:375:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:375:5: a= add_expr
			{
			DebugLocation(375, 6);
			PushFollow(Follow._add_expr_in_shift_expr2318);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 375:16: -> $a
			{
				DebugLocation(375, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(375, 23);
			// SugarCpp.g:375:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==90||LA76_0==98))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:375:24: shift_expr_op b= add_expr
					{
					DebugLocation(375, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr2327);
					shift_expr_op219=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op219.Tree);
					DebugLocation(375, 39);
					PushFollow(Follow._add_expr_in_shift_expr2331);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr_op, b, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 375:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(375, 52);
						// SugarCpp.g:375:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(375, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(375, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(375, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 52);
			LeaveRule("shift_expr", 52);
			LeaveRule_shift_expr();
			if (state.backtracking > 0) { Memoize(input, 52, shift_expr_StartIndex); }

		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:378:1: add_expr : (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 53);
		TraceIn("add_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int add_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal220 = default(IToken);
		IToken char_literal221 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal220_tree = default(CommonTree);
		CommonTree char_literal221_tree = default(CommonTree);
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(378, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// SugarCpp.g:379:2: ( (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:379:4: (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(379, 4);
			// SugarCpp.g:379:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:379:5: a= infix_expr
			{
			DebugLocation(379, 6);
			PushFollow(Follow._infix_expr_in_add_expr2361);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 379:18: -> $a
			{
				DebugLocation(379, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(379, 25);
			// SugarCpp.g:379:25: ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=3;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==72))
				{
					alt77 = 1;
				}
				else if ((LA77_0==76))
				{
					alt77 = 2;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:379:27: '+' b= infix_expr
					{
					DebugLocation(379, 27);
					char_literal220=(IToken)Match(input,72,Follow._72_in_add_expr2371); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(char_literal220);

					DebugLocation(379, 32);
					PushFollow(Follow._infix_expr_in_add_expr2375);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 72
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 379:44: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(379, 47);
						// SugarCpp.g:379:47: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(379, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(379, 58);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(379, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(379, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:380:12: '-' b= infix_expr
					{
					DebugLocation(380, 12);
					char_literal221=(IToken)Match(input,76,Follow._76_in_add_expr2402); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_76.Add(char_literal221);

					DebugLocation(380, 17);
					PushFollow(Follow._infix_expr_in_add_expr2406);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 76
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 380:29: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(380, 32);
						// SugarCpp.g:380:32: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(380, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(380, 43);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(380, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(380, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 53);
			LeaveRule("add_expr", 53);
			LeaveRule_add_expr();
			if (state.backtracking > 0) { Memoize(input, 53, add_expr_StartIndex); }

		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:384:1: infix_expr : (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 54);
		TraceIn("infix_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func222 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(384, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// SugarCpp.g:385:2: ( (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:385:4: (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(385, 4);
			// SugarCpp.g:385:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:385:5: a= mul_expr
			{
			DebugLocation(385, 6);
			PushFollow(Follow._mul_expr_in_infix_expr2446);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 385:16: -> $a
			{
				DebugLocation(385, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(385, 23);
			// SugarCpp.g:385:23: ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==105))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:385:25: infix_func b= mul_expr
					{
					DebugLocation(385, 25);
					PushFollow(Follow._infix_func_in_infix_expr2456);
					infix_func222=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func222.Tree);
					DebugLocation(385, 37);
					PushFollow(Follow._mul_expr_in_infix_expr2460);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, infix_func, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 385:48: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(385, 51);
						// SugarCpp.g:385:51: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(385, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(385, 64);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(385, 76);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(385, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 54);
			LeaveRule("infix_expr", 54);
			LeaveRule_infix_expr();
			if (state.backtracking > 0) { Memoize(input, 54, infix_expr_StartIndex); }

		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:388:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 55);
		TraceIn("mul_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int mul_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal223 = default(IToken);
		IToken char_literal224 = default(IToken);
		IToken char_literal225 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal223_tree = default(CommonTree);
		CommonTree char_literal224_tree = default(CommonTree);
		CommonTree char_literal225_tree = default(CommonTree);
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(388, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// SugarCpp.g:389:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:389:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(389, 4);
			// SugarCpp.g:389:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:389:5: a= selector_expr
			{
			DebugLocation(389, 6);
			PushFollow(Follow._selector_expr_in_mul_expr2492);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 389:21: -> $a
			{
				DebugLocation(389, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(389, 28);
			// SugarCpp.g:389:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=4;
				try { DebugEnterDecision(79, false);
				switch (input.LA(1))
				{
				case 70:
					{
					alt79 = 1;
					}
					break;
				case 83:
					{
					alt79 = 2;
					}
					break;
				case 63:
					{
					alt79 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:389:30: '*' b= selector_expr
					{
					DebugLocation(389, 30);
					char_literal223=(IToken)Match(input,70,Follow._70_in_mul_expr2502); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(char_literal223);

					DebugLocation(389, 35);
					PushFollow(Follow._selector_expr_in_mul_expr2506);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 70
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 389:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(389, 53);
						// SugarCpp.g:389:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(389, 64);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(389, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(389, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:390:15: '/' b= selector_expr
					{
					DebugLocation(390, 15);
					char_literal224=(IToken)Match(input,83,Follow._83_in_mul_expr2536); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_83.Add(char_literal224);

					DebugLocation(390, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2540);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 83, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 390:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(390, 38);
						// SugarCpp.g:390:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(390, 49);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(390, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(390, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:391:15: '%' b= selector_expr
					{
					DebugLocation(391, 15);
					char_literal225=(IToken)Match(input,63,Follow._63_in_mul_expr2570); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_63.Add(char_literal225);

					DebugLocation(391, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2574);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 63, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 391:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(391, 38);
						// SugarCpp.g:391:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(391, 49);
						adaptor.AddChild(root_1, stream_63.NextNode());
						DebugLocation(391, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(391, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 55);
			LeaveRule("mul_expr", 55);
			LeaveRule_mul_expr();
			if (state.backtracking > 0) { Memoize(input, 55, mul_expr_StartIndex); }

		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:395:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 56);
		TraceIn("selector_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int selector_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal226 = default(IToken);
		IToken string_literal227 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal226_tree = default(CommonTree);
		CommonTree string_literal227_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(395, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// SugarCpp.g:396:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:396:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(396, 4);
			// SugarCpp.g:396:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:396:5: a= prefix_expr
			{
			DebugLocation(396, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr2617);
			a=prefix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 396:19: -> $a
			{
				DebugLocation(396, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(396, 26);
			// SugarCpp.g:396:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=3;
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==80))
				{
					alt80 = 1;
				}
				else if ((LA80_0==82))
				{
					alt80 = 2;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:396:28: '->*' b= ident
					{
					DebugLocation(396, 28);
					string_literal226=(IToken)Match(input,80,Follow._80_in_selector_expr2627); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_80.Add(string_literal226);

					DebugLocation(396, 35);
					PushFollow(Follow._ident_in_selector_expr2631);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 80
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 396:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(396, 45);
						// SugarCpp.g:396:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(396, 59);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(396, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(396, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:397:13: '.*' b= ident
					{
					DebugLocation(397, 13);
					string_literal227=(IToken)Match(input,82,Follow._82_in_selector_expr2659); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_82.Add(string_literal227);

					DebugLocation(397, 20);
					PushFollow(Follow._ident_in_selector_expr2664);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 82
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 397:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(397, 30);
						// SugarCpp.g:397:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(397, 44);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(397, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(397, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 56);
			LeaveRule("selector_expr", 56);
			LeaveRule_selector_expr();
			if (state.backtracking > 0) { Memoize(input, 56, selector_expr_StartIndex); }

		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:401:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 57);
		TraceIn("prefix_expr_op", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set228 = default(IToken);

		CommonTree set228_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(401, 64);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// SugarCpp.g:401:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(401, 15);

			set228=(IToken)input.LT(1);
			if (input.LA(1)==61||input.LA(1)==66||input.LA(1)==70||(input.LA(1)>=72 && input.LA(1)<=73)||(input.LA(1)>=76 && input.LA(1)<=77)||input.LA(1)==127)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set228));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 57);
			LeaveRule("prefix_expr_op", 57);
			LeaveRule_prefix_expr_op();
			if (state.backtracking > 0) { Memoize(input, 57, prefix_expr_op_StartIndex); }

		}
		DebugLocation(401, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:402:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 58);
		TraceIn("prefix_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal231 = default(IToken);
		IToken char_literal233 = default(IToken);
		IToken char_literal235 = default(IToken);
		IToken char_literal236 = default(IToken);
		IToken char_literal238 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree char_literal233_tree = default(CommonTree);
		CommonTree char_literal235_tree = default(CommonTree);
		CommonTree char_literal236_tree = default(CommonTree);
		CommonTree char_literal238_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(402, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// SugarCpp.g:403:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt83=3;
			try { DebugEnterDecision(83, false);
			switch (input.LA(1))
			{
			case 61:
			case 66:
			case 70:
			case 72:
			case 73:
			case 76:
			case 77:
			case 127:
				{
				alt83 = 1;
				}
				break;
			case 117:
				{
				alt83 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 68:
				{
				alt83 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:403:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(403, 4);
				// SugarCpp.g:403:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:403:5: prefix_expr_op prefix_expr
				{
				DebugLocation(403, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr2739);
				prefix_expr_op229=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op229.Tree);
				DebugLocation(403, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr2741);
				prefix_expr230=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr230.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 403:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(403, 36);
					// SugarCpp.g:403:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(403, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(403, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(403, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:404:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(404, 4);
				string_literal231=(IToken)Match(input,117,Follow._117_in_prefix_expr2757); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_117.Add(string_literal231);

				DebugLocation(404, 10);
				PushFollow(Follow._type_name_in_prefix_expr2759);
				type_name232=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name232.Tree);
				DebugLocation(404, 20);
				// SugarCpp.g:404:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==68))
				{
					alt82 = 1;
				}
				else if ((LA82_0==100))
				{
					alt82 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:404:22: '(' ( expr_list )? ')'
					{
					DebugLocation(404, 22);
					char_literal233=(IToken)Match(input,68,Follow._68_in_prefix_expr2763); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(char_literal233);

					DebugLocation(404, 26);
					// SugarCpp.g:404:26: ( expr_list )?
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, false);
					int LA81_0 = input.LA(1);

					if ((LA81_0==IDENT||LA81_0==NUMBER||LA81_0==STRING||LA81_0==61||LA81_0==66||LA81_0==68||LA81_0==70||(LA81_0>=72 && LA81_0<=73)||(LA81_0>=76 && LA81_0<=77)||LA81_0==101||LA81_0==117||LA81_0==127))
					{
						alt81 = 1;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:404:26: expr_list
						{
						DebugLocation(404, 26);
						PushFollow(Follow._expr_list_in_prefix_expr2765);
						expr_list234=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list234.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(81); }

					DebugLocation(404, 37);
					char_literal235=(IToken)Match(input,69,Follow._69_in_prefix_expr2768); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_69.Add(char_literal235);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 404:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(404, 44);
						// SugarCpp.g:404:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(404, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(404, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(404, 70);
						// SugarCpp.g:404:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(404, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:405:10: '[' expr_list ']'
					{
					DebugLocation(405, 10);
					char_literal236=(IToken)Match(input,100,Follow._100_in_prefix_expr2790); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal236);

					DebugLocation(405, 14);
					PushFollow(Follow._expr_list_in_prefix_expr2792);
					expr_list237=expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr_list.Add(expr_list237.Tree);
					DebugLocation(405, 24);
					char_literal238=(IToken)Match(input,102,Follow._102_in_prefix_expr2794); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(char_literal238);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 405:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(405, 31);
						// SugarCpp.g:405:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(405, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(405, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(405, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(82); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:406:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(406, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr2810);
				suffix_expr239=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr239.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 58);
			LeaveRule("prefix_expr", 58);
			LeaveRule_prefix_expr();
			if (state.backtracking > 0) { Memoize(input, 58, prefix_expr_StartIndex); }

		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:409:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 59);
		TraceIn("expr_list", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal241 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr240 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr242 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal241_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(409, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// SugarCpp.g:410:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:410:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(410, 4);
			PushFollow(Follow._expr_in_expr_list2822);
			expr240=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr240.Tree);
			DebugLocation(410, 9);
			// SugarCpp.g:410:9: ( ',' ! expr )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==75))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:410:10: ',' ! expr
					{
					DebugLocation(410, 13);
					char_literal241=(IToken)Match(input,75,Follow._75_in_expr_list2825); if (state.failed) return retval;
					DebugLocation(410, 15);
					PushFollow(Follow._expr_in_expr_list2828);
					expr242=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr242.Tree);

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 59);
			LeaveRule("expr_list", 59);
			LeaveRule_expr_list();
			if (state.backtracking > 0) { Memoize(input, 59, expr_list_StartIndex); }

		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:413:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 60);
		TraceIn("suffix_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int suffix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal243 = default(IToken);
		IToken string_literal244 = default(IToken);
		IToken char_literal245 = default(IToken);
		IToken string_literal247 = default(IToken);
		IToken char_literal250 = default(IToken);
		IToken char_literal252 = default(IToken);
		IToken char_literal253 = default(IToken);
		IToken char_literal255 = default(IToken);
		IToken char_literal256 = default(IToken);
		IToken char_literal258 = default(IToken);
		IToken char_literal260 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident246 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident257 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list259 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal243_tree = default(CommonTree);
		CommonTree string_literal244_tree = default(CommonTree);
		CommonTree char_literal245_tree = default(CommonTree);
		CommonTree string_literal247_tree = default(CommonTree);
		CommonTree char_literal250_tree = default(CommonTree);
		CommonTree char_literal252_tree = default(CommonTree);
		CommonTree char_literal253_tree = default(CommonTree);
		CommonTree char_literal255_tree = default(CommonTree);
		CommonTree char_literal256_tree = default(CommonTree);
		CommonTree char_literal258_tree = default(CommonTree);
		CommonTree char_literal260_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(413, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// SugarCpp.g:414:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:414:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			{
			DebugLocation(414, 4);
			// SugarCpp.g:414:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:414:5: a= atom_expr
			{
			DebugLocation(414, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr2844);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 414:17: -> $a
			{
				DebugLocation(414, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(414, 24);
			// SugarCpp.g:414:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=8;
				try { DebugEnterDecision(89, false);
				switch (input.LA(1))
				{
				case 89:
					{
					int LA89_10 = input.LA(2);

					if ((EvaluatePredicate(synpred145_SugarCpp_fragment)))
					{
						alt89 = 5;
					}


					}
					break;
				case 73:
					{
					alt89 = 1;
					}
					break;
				case 77:
					{
					alt89 = 2;
					}
					break;
				case 81:
					{
					alt89 = 3;
					}
					break;
				case 79:
					{
					alt89 = 4;
					}
					break;
				case 68:
					{
					alt89 = 5;
					}
					break;
				case 100:
					{
					alt89 = 6;
					}
					break;
				case 85:
					{
					alt89 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:26: '++'
					{
					DebugLocation(414, 26);
					string_literal243=(IToken)Match(input,73,Follow._73_in_suffix_expr2854); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_73.Add(string_literal243);



					{
					// AST REWRITE
					// elements: suffix_expr, 73
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 414:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(414, 34);
						// SugarCpp.g:414:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(414, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(414, 48);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(414, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:415:14: '--'
					{
					DebugLocation(415, 14);
					string_literal244=(IToken)Match(input,77,Follow._77_in_suffix_expr2880); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_77.Add(string_literal244);



					{
					// AST REWRITE
					// elements: 77, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 415:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(415, 22);
						// SugarCpp.g:415:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(415, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(415, 36);
						adaptor.AddChild(root_1, stream_77.NextNode());
						DebugLocation(415, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:416:11: '.' ident
					{
					DebugLocation(416, 11);
					char_literal245=(IToken)Match(input,81,Follow._81_in_suffix_expr2903); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_81.Add(char_literal245);

					DebugLocation(416, 15);
					PushFollow(Follow._ident_in_suffix_expr2905);
					ident246=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident246.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 81
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 416:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(416, 24);
						// SugarCpp.g:416:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(416, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(416, 38);
						adaptor.AddChild(root_1, stream_81.NextNode());
						DebugLocation(416, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(416, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:417:11: '->' ident
					{
					DebugLocation(417, 11);
					string_literal247=(IToken)Match(input,79,Follow._79_in_suffix_expr2930); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_79.Add(string_literal247);

					DebugLocation(417, 16);
					PushFollow(Follow._ident_in_suffix_expr2932);
					ident248=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident248.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, 79, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 417:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(417, 25);
						// SugarCpp.g:417:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(417, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(417, 39);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(417, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(417, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:418:11: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(418, 11);
					// SugarCpp.g:418:11: ( generic_parameter )?
					int alt85=2;
					try { DebugEnterSubRule(85);
					try { DebugEnterDecision(85, false);
					int LA85_0 = input.LA(1);

					if ((LA85_0==89))
					{
						alt85 = 1;
					}
					} finally { DebugExitDecision(85); }
					switch (alt85)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:418:11: generic_parameter
						{
						DebugLocation(418, 11);
						PushFollow(Follow._generic_parameter_in_suffix_expr2957);
						generic_parameter249=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter249.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(85); }

					DebugLocation(418, 30);
					char_literal250=(IToken)Match(input,68,Follow._68_in_suffix_expr2960); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(char_literal250);

					DebugLocation(418, 34);
					// SugarCpp.g:418:34: ( expr_list )?
					int alt86=2;
					try { DebugEnterSubRule(86);
					try { DebugEnterDecision(86, false);
					int LA86_0 = input.LA(1);

					if ((LA86_0==IDENT||LA86_0==NUMBER||LA86_0==STRING||LA86_0==61||LA86_0==66||LA86_0==68||LA86_0==70||(LA86_0>=72 && LA86_0<=73)||(LA86_0>=76 && LA86_0<=77)||LA86_0==101||LA86_0==117||LA86_0==127))
					{
						alt86 = 1;
					}
					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:418:34: expr_list
						{
						DebugLocation(418, 34);
						PushFollow(Follow._expr_list_in_suffix_expr2962);
						expr_list251=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list251.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(86); }

					DebugLocation(418, 45);
					char_literal252=(IToken)Match(input,69,Follow._69_in_suffix_expr2965); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_69.Add(char_literal252);



					{
					// AST REWRITE
					// elements: generic_parameter, expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 418:49: -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(418, 52);
						// SugarCpp.g:418:52: ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(418, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(418, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(418, 77);
						// SugarCpp.g:418:77: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(418, 77);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(418, 96);
						// SugarCpp.g:418:96: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(418, 96);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:419:11: '[' ( expr_list )? ']'
					{
					DebugLocation(419, 11);
					char_literal253=(IToken)Match(input,100,Follow._100_in_suffix_expr2992); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal253);

					DebugLocation(419, 15);
					// SugarCpp.g:419:15: ( expr_list )?
					int alt87=2;
					try { DebugEnterSubRule(87);
					try { DebugEnterDecision(87, false);
					int LA87_0 = input.LA(1);

					if ((LA87_0==IDENT||LA87_0==NUMBER||LA87_0==STRING||LA87_0==61||LA87_0==66||LA87_0==68||LA87_0==70||(LA87_0>=72 && LA87_0<=73)||(LA87_0>=76 && LA87_0<=77)||LA87_0==101||LA87_0==117||LA87_0==127))
					{
						alt87 = 1;
					}
					} finally { DebugExitDecision(87); }
					switch (alt87)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:419:15: expr_list
						{
						DebugLocation(419, 15);
						PushFollow(Follow._expr_list_in_suffix_expr2994);
						expr_list254=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list254.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(87); }

					DebugLocation(419, 26);
					char_literal255=(IToken)Match(input,102,Follow._102_in_suffix_expr2997); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(char_literal255);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 419:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(419, 33);
						// SugarCpp.g:419:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(419, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(419, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(419, 58);
						// SugarCpp.g:419:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(419, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:420:11: ':' ident '(' ( expr_list )? ')'
					{
					DebugLocation(420, 11);
					char_literal256=(IToken)Match(input,85,Follow._85_in_suffix_expr3021); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_85.Add(char_literal256);

					DebugLocation(420, 15);
					PushFollow(Follow._ident_in_suffix_expr3023);
					ident257=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident257.Tree);
					DebugLocation(420, 21);
					char_literal258=(IToken)Match(input,68,Follow._68_in_suffix_expr3025); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(char_literal258);

					DebugLocation(420, 25);
					// SugarCpp.g:420:25: ( expr_list )?
					int alt88=2;
					try { DebugEnterSubRule(88);
					try { DebugEnterDecision(88, false);
					int LA88_0 = input.LA(1);

					if ((LA88_0==IDENT||LA88_0==NUMBER||LA88_0==STRING||LA88_0==61||LA88_0==66||LA88_0==68||LA88_0==70||(LA88_0>=72 && LA88_0<=73)||(LA88_0>=76 && LA88_0<=77)||LA88_0==101||LA88_0==117||LA88_0==127))
					{
						alt88 = 1;
					}
					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:420:25: expr_list
						{
						DebugLocation(420, 25);
						PushFollow(Follow._expr_list_in_suffix_expr3027);
						expr_list259=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list259.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(88); }

					DebugLocation(420, 36);
					char_literal260=(IToken)Match(input,69,Follow._69_in_suffix_expr3030); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_69.Add(char_literal260);



					{
					// AST REWRITE
					// elements: suffix_expr, ident, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 420:40: -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
					{
						DebugLocation(420, 43);
						// SugarCpp.g:420:43: ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(420, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(420, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(420, 73);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(420, 79);
						// SugarCpp.g:420:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(420, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 60);
			LeaveRule("suffix_expr", 60);
			LeaveRule_suffix_expr();
			if (state.backtracking > 0) { Memoize(input, 60, suffix_expr_StartIndex); }

		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:424:1: atom_expr : ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 61);
		TraceIn("atom_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atom_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER261 = default(IToken);
		IToken STRING263 = default(IToken);
		IToken char_literal264 = default(IToken);
		IToken char_literal266 = default(IToken);
		IToken char_literal268 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr267 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER261_tree = default(CommonTree);
		CommonTree STRING263_tree = default(CommonTree);
		CommonTree char_literal264_tree = default(CommonTree);
		CommonTree char_literal266_tree = default(CommonTree);
		CommonTree char_literal268_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			bool more_than_one = false;

		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(424, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// SugarCpp.g:429:2: ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) )
			int alt91=4;
			try { DebugEnterDecision(91, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt91 = 1;
				}
				break;
			case IDENT:
				{
				alt91 = 2;
				}
				break;
			case STRING:
				{
				alt91 = 3;
				}
				break;
			case 68:
				{
				alt91 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:429:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(429, 4);
				NUMBER261=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr3074); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER261_tree = (CommonTree)adaptor.Create(NUMBER261);
				adaptor.AddChild(root_0, NUMBER261_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:430:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(430, 4);
				PushFollow(Follow._ident_in_atom_expr3079);
				ident262=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident262.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:431:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(431, 4);
				STRING263=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr3084); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING263_tree = (CommonTree)adaptor.Create(STRING263);
				adaptor.AddChild(root_0, STRING263_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:432:4: '(' expr ( ',' expr )* ')'
				{
				DebugLocation(432, 4);
				char_literal264=(IToken)Match(input,68,Follow._68_in_atom_expr3089); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_68.Add(char_literal264);

				DebugLocation(432, 8);
				PushFollow(Follow._expr_in_atom_expr3091);
				expr265=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr265.Tree);
				DebugLocation(432, 13);
				// SugarCpp.g:432:13: ( ',' expr )*
				try { DebugEnterSubRule(90);
				while (true)
				{
					int alt90=2;
					try { DebugEnterDecision(90, false);
					int LA90_0 = input.LA(1);

					if ((LA90_0==75))
					{
						alt90 = 1;
					}


					} finally { DebugExitDecision(90); }
					switch ( alt90 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:432:14: ',' expr
						{
						DebugLocation(432, 14);
						char_literal266=(IToken)Match(input,75,Follow._75_in_atom_expr3094); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_75.Add(char_literal266);

						DebugLocation(432, 18);
						PushFollow(Follow._expr_in_atom_expr3096);
						expr267=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr267.Tree);
						DebugLocation(432, 23);
						if (state.backtracking == 0)
						{
							 more_than_one = true; 
						}

						}
						break;

					default:
						goto loop90;
					}
				}

				loop90:
					;

				} finally { DebugExitSubRule(90); }

				DebugLocation(432, 52);
				char_literal268=(IToken)Match(input,69,Follow._69_in_atom_expr3103); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal268);



				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 433:3: -> { more_than_one }? ^( Expr_Tuple ( expr )+ )
				if ( more_than_one )
				{
					DebugLocation(433, 25);
					// SugarCpp.g:433:25: ^( Expr_Tuple ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(433, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

					DebugLocation(433, 38);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(433, 38);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 434:3: -> ^( Expr_Bracket expr )
				{
					DebugLocation(434, 6);
					// SugarCpp.g:434:6: ^( Expr_Bracket expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(434, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

					DebugLocation(434, 21);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 61);
			LeaveRule("atom_expr", 61);
			LeaveRule_atom_expr();
			if (state.backtracking > 0) { Memoize(input, 61, atom_expr_StartIndex); }

		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:437:1: lvalue : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* ;
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 62);
		TraceIn("lvalue", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal269 = default(IToken);
		IToken string_literal270 = default(IToken);
		IToken char_literal271 = default(IToken);
		IToken string_literal273 = default(IToken);
		IToken char_literal276 = default(IToken);
		IToken char_literal278 = default(IToken);
		IToken char_literal279 = default(IToken);
		IToken char_literal281 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list280 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal269_tree = default(CommonTree);
		CommonTree string_literal270_tree = default(CommonTree);
		CommonTree char_literal271_tree = default(CommonTree);
		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree char_literal276_tree = default(CommonTree);
		CommonTree char_literal278_tree = default(CommonTree);
		CommonTree char_literal279_tree = default(CommonTree);
		CommonTree char_literal281_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(437, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// SugarCpp.g:438:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:438:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			{
			DebugLocation(438, 4);
			// SugarCpp.g:438:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:438:5: a= lvalue_atom
			{
			DebugLocation(438, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue3140);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 438:19: -> $a
			{
				DebugLocation(438, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(438, 26);
			// SugarCpp.g:438:26: ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=7;
				try { DebugEnterDecision(95, false);
				switch (input.LA(1))
				{
				case 73:
					{
					alt95 = 1;
					}
					break;
				case 77:
					{
					alt95 = 2;
					}
					break;
				case 81:
					{
					alt95 = 3;
					}
					break;
				case 79:
					{
					alt95 = 4;
					}
					break;
				case 68:
				case 89:
					{
					alt95 = 5;
					}
					break;
				case 100:
					{
					alt95 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:438:28: '++'
					{
					DebugLocation(438, 28);
					string_literal269=(IToken)Match(input,73,Follow._73_in_lvalue3150); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_73.Add(string_literal269);



					{
					// AST REWRITE
					// elements: 73, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 438:33: -> ^( Expr_Suffix '++' $lvalue)
					{
						DebugLocation(438, 36);
						// SugarCpp.g:438:36: ^( Expr_Suffix '++' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(438, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(438, 50);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(438, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:439:16: '--'
					{
					DebugLocation(439, 16);
					string_literal270=(IToken)Match(input,77,Follow._77_in_lvalue3178); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_77.Add(string_literal270);



					{
					// AST REWRITE
					// elements: 77, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 439:21: -> ^( Expr_Suffix '--' $lvalue)
					{
						DebugLocation(439, 24);
						// SugarCpp.g:439:24: ^( Expr_Suffix '--' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(439, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(439, 38);
						adaptor.AddChild(root_1, stream_77.NextNode());
						DebugLocation(439, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:440:13: '.' ident
					{
					DebugLocation(440, 13);
					char_literal271=(IToken)Match(input,81,Follow._81_in_lvalue3203); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_81.Add(char_literal271);

					DebugLocation(440, 17);
					PushFollow(Follow._ident_in_lvalue3205);
					ident272=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident272.Tree);


					{
					// AST REWRITE
					// elements: lvalue, ident, 81
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 440:23: -> ^( Expr_Access '.' $lvalue ident )
					{
						DebugLocation(440, 26);
						// SugarCpp.g:440:26: ^( Expr_Access '.' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(440, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(440, 40);
						adaptor.AddChild(root_1, stream_81.NextNode());
						DebugLocation(440, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(440, 52);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:441:13: '->' ident
					{
					DebugLocation(441, 13);
					string_literal273=(IToken)Match(input,79,Follow._79_in_lvalue3232); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_79.Add(string_literal273);

					DebugLocation(441, 18);
					PushFollow(Follow._ident_in_lvalue3234);
					ident274=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident274.Tree);


					{
					// AST REWRITE
					// elements: lvalue, 79, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:24: -> ^( Expr_Access '->' $lvalue ident )
					{
						DebugLocation(441, 27);
						// SugarCpp.g:441:27: ^( Expr_Access '->' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(441, 41);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(441, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(441, 54);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:442:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(442, 13);
					// SugarCpp.g:442:13: ( generic_parameter )?
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, false);
					int LA92_0 = input.LA(1);

					if ((LA92_0==89))
					{
						alt92 = 1;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:442:13: generic_parameter
						{
						DebugLocation(442, 13);
						PushFollow(Follow._generic_parameter_in_lvalue3261);
						generic_parameter275=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter275.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(92); }

					DebugLocation(442, 32);
					char_literal276=(IToken)Match(input,68,Follow._68_in_lvalue3264); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(char_literal276);

					DebugLocation(442, 36);
					// SugarCpp.g:442:36: ( expr_list )?
					int alt93=2;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, false);
					int LA93_0 = input.LA(1);

					if ((LA93_0==IDENT||LA93_0==NUMBER||LA93_0==STRING||LA93_0==61||LA93_0==66||LA93_0==68||LA93_0==70||(LA93_0>=72 && LA93_0<=73)||(LA93_0>=76 && LA93_0<=77)||LA93_0==101||LA93_0==117||LA93_0==127))
					{
						alt93 = 1;
					}
					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:442:36: expr_list
						{
						DebugLocation(442, 36);
						PushFollow(Follow._expr_list_in_lvalue3266);
						expr_list277=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list277.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(93); }

					DebugLocation(442, 47);
					char_literal278=(IToken)Match(input,69,Follow._69_in_lvalue3269); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_69.Add(char_literal278);



					{
					// AST REWRITE
					// elements: expr_list, lvalue, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 442:51: -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(442, 54);
						// SugarCpp.g:442:54: ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(442, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(442, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(442, 74);
						// SugarCpp.g:442:74: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(442, 74);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(442, 93);
						// SugarCpp.g:442:93: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(442, 93);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:443:13: '[' ( expr_list )? ']'
					{
					DebugLocation(443, 13);
					char_literal279=(IToken)Match(input,100,Follow._100_in_lvalue3298); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal279);

					DebugLocation(443, 17);
					// SugarCpp.g:443:17: ( expr_list )?
					int alt94=2;
					try { DebugEnterSubRule(94);
					try { DebugEnterDecision(94, false);
					int LA94_0 = input.LA(1);

					if ((LA94_0==IDENT||LA94_0==NUMBER||LA94_0==STRING||LA94_0==61||LA94_0==66||LA94_0==68||LA94_0==70||(LA94_0>=72 && LA94_0<=73)||(LA94_0>=76 && LA94_0<=77)||LA94_0==101||LA94_0==117||LA94_0==127))
					{
						alt94 = 1;
					}
					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:443:17: expr_list
						{
						DebugLocation(443, 17);
						PushFollow(Follow._expr_list_in_lvalue3300);
						expr_list280=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list280.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(94); }

					DebugLocation(443, 28);
					char_literal281=(IToken)Match(input,102,Follow._102_in_lvalue3303); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(char_literal281);



					{
					// AST REWRITE
					// elements: lvalue, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 443:32: -> ^( Expr_Dict $lvalue ( expr_list )? )
					{
						DebugLocation(443, 35);
						// SugarCpp.g:443:35: ^( Expr_Dict $lvalue ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(443, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(443, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(443, 55);
						// SugarCpp.g:443:55: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(443, 55);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 62);
			LeaveRule("lvalue", 62);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 62, lvalue_StartIndex); }

		}
		DebugLocation(445, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:447:1: lvalue_atom : ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 63);
		TraceIn("lvalue_atom", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_atom_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal282 = default(IToken);
		IToken char_literal284 = default(IToken);
		IToken char_literal286 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident287 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal282_tree = default(CommonTree);
		CommonTree char_literal284_tree = default(CommonTree);
		CommonTree char_literal286_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(447, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// SugarCpp.g:448:2: ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident )
			int alt98=2;
			try { DebugEnterDecision(98, false);
			int LA98_0 = input.LA(1);

			if ((LA98_0==68))
			{
				alt98 = 1;
			}
			else if ((LA98_0==IDENT))
			{
				alt98 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:448:4: '(' ( lvalue ( ',' lvalue )* )? ')'
				{
				DebugLocation(448, 4);
				char_literal282=(IToken)Match(input,68,Follow._68_in_lvalue_atom3342); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_68.Add(char_literal282);

				DebugLocation(448, 8);
				// SugarCpp.g:448:8: ( lvalue ( ',' lvalue )* )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==IDENT||LA97_0==68))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:448:9: lvalue ( ',' lvalue )*
					{
					DebugLocation(448, 9);
					PushFollow(Follow._lvalue_in_lvalue_atom3345);
					lvalue283=lvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lvalue.Add(lvalue283.Tree);
					DebugLocation(448, 16);
					// SugarCpp.g:448:16: ( ',' lvalue )*
					try { DebugEnterSubRule(96);
					while (true)
					{
						int alt96=2;
						try { DebugEnterDecision(96, false);
						int LA96_0 = input.LA(1);

						if ((LA96_0==75))
						{
							alt96 = 1;
						}


						} finally { DebugExitDecision(96); }
						switch ( alt96 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:448:17: ',' lvalue
							{
							DebugLocation(448, 17);
							char_literal284=(IToken)Match(input,75,Follow._75_in_lvalue_atom3348); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_75.Add(char_literal284);

							DebugLocation(448, 21);
							PushFollow(Follow._lvalue_in_lvalue_atom3350);
							lvalue285=lvalue();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_lvalue.Add(lvalue285.Tree);

							}
							break;

						default:
							goto loop96;
						}
					}

					loop96:
						;

					} finally { DebugExitSubRule(96); }


					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(448, 32);
				char_literal286=(IToken)Match(input,69,Follow._69_in_lvalue_atom3356); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_69.Add(char_literal286);



				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 448:36: -> ^( Match_Tuple ( lvalue )* )
				{
					DebugLocation(448, 39);
					// SugarCpp.g:448:39: ^( Match_Tuple ( lvalue )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(448, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(448, 53);
					// SugarCpp.g:448:53: ( lvalue )*
					while ( stream_lvalue.HasNext )
					{
						DebugLocation(448, 53);
						adaptor.AddChild(root_1, stream_lvalue.NextTree());

					}
					stream_lvalue.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:449:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(449, 4);
				PushFollow(Follow._ident_in_lvalue_atom3370);
				ident287=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident287.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 63);
			LeaveRule("lvalue_atom", 63);
			LeaveRule_lvalue_atom();
			if (state.backtracking > 0) { Memoize(input, 63, lvalue_atom_StartIndex); }

		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:452:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 64);
		TraceIn("ident", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT288 = default(IToken);
		IToken string_literal289 = default(IToken);
		IToken IDENT290 = default(IToken);

		CommonTree IDENT288_tree = default(CommonTree);
		CommonTree string_literal289_tree = default(CommonTree);
		CommonTree IDENT290_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(452, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// SugarCpp.g:453:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:453:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(453, 4);
			IDENT288=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3381); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT288_tree = (CommonTree)adaptor.Create(IDENT288);
			adaptor.AddChild(root_0, IDENT288_tree);
			}
			DebugLocation(453, 10);
			// SugarCpp.g:453:10: ( '::' IDENT )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==86))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:453:11: '::' IDENT
					{
					DebugLocation(453, 11);
					string_literal289=(IToken)Match(input,86,Follow._86_in_ident3384); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal289_tree = (CommonTree)adaptor.Create(string_literal289);
					adaptor.AddChild(root_0, string_literal289_tree);
					}
					DebugLocation(453, 16);
					IDENT290=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3386); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT290_tree = (CommonTree)adaptor.Create(IDENT290);
					adaptor.AddChild(root_0, IDENT290_tree);
					}

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 64);
			LeaveRule("ident", 64);
			LeaveRule_ident();
			if (state.backtracking > 0) { Memoize(input, 64, ident_StartIndex); }

		}
		DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:456:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 65);
		TraceIn("infix_func", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_func_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal291 = default(IToken);
		IToken char_literal293 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident292 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal291_tree = default(CommonTree);
		CommonTree char_literal293_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(456, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// SugarCpp.g:457:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:457:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(457, 7);
			char_literal291=(IToken)Match(input,105,Follow._105_in_infix_func3399); if (state.failed) return retval;
			DebugLocation(457, 9);
			PushFollow(Follow._ident_in_infix_func3402);
			ident292=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident292.Tree);
			DebugLocation(457, 18);
			char_literal293=(IToken)Match(input,105,Follow._105_in_infix_func3404); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 65);
			LeaveRule("infix_func", 65);
			LeaveRule_infix_func();
			if (state.backtracking > 0) { Memoize(input, 65, infix_func_StartIndex); }

		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred145_SugarCpp_fragment();
	partial void LeaveRule_synpred145_SugarCpp_fragment();

	// $ANTLR start synpred145_SugarCpp
	public void synpred145_SugarCpp_fragment()
	{
		EnterRule_synpred145_SugarCpp_fragment();
		EnterRule("synpred145_SugarCpp_fragment", 210);
		TraceIn("synpred145_SugarCpp_fragment", 210);
		try
		{
			// SugarCpp.g:418:11: ( ( generic_parameter )? '(' ( expr_list )? ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:418:11: ( generic_parameter )? '(' ( expr_list )? ')'
			{
			DebugLocation(418, 11);
			// SugarCpp.g:418:11: ( generic_parameter )?
			int alt126=2;
			try { DebugEnterSubRule(126);
			try { DebugEnterDecision(126, false);
			int LA126_0 = input.LA(1);

			if ((LA126_0==89))
			{
				alt126 = 1;
			}
			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:418:11: generic_parameter
				{
				DebugLocation(418, 11);
				PushFollow(Follow._generic_parameter_in_synpred145_SugarCpp2957);
				generic_parameter();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(126); }

			DebugLocation(418, 30);
			Match(input,68,Follow._68_in_synpred145_SugarCpp2960); if (state.failed) return;
			DebugLocation(418, 34);
			// SugarCpp.g:418:34: ( expr_list )?
			int alt127=2;
			try { DebugEnterSubRule(127);
			try { DebugEnterDecision(127, false);
			int LA127_0 = input.LA(1);

			if ((LA127_0==IDENT||LA127_0==NUMBER||LA127_0==STRING||LA127_0==61||LA127_0==66||LA127_0==68||LA127_0==70||(LA127_0>=72 && LA127_0<=73)||(LA127_0>=76 && LA127_0<=77)||LA127_0==101||LA127_0==117||LA127_0==127))
			{
				alt127 = 1;
			}
			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:418:34: expr_list
				{
				DebugLocation(418, 34);
				PushFollow(Follow._expr_list_in_synpred145_SugarCpp2962);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(127); }

			DebugLocation(418, 45);
			Match(input,69,Follow._69_in_synpred145_SugarCpp2965); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred145_SugarCpp_fragment", 210);
			LeaveRule("synpred145_SugarCpp_fragment", 210);
			LeaveRule_synpred145_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred145_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA14 dfa14;
	private DFA20 dfa20;
	private DFA33 dfa33;
	private DFA42 dfa42;
	private DFA52 dfa52;
	private DFA63 dfa63;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa14 = new DFA14( this );
		dfa20 = new DFA20( this );
		dfa33 = new DFA33( this );
		dfa42 = new DFA42( this );
		dfa52 = new DFA52( this );
		dfa63 = new DFA63( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x30\xFFFF";
		private const string DFA4_eofS =
			"\x30\xFFFF";
		private const string DFA4_minS =
			"\x3\x1F\x7\xFFFF\x1\x44\x1\x1F\x1\xFFFF\x3\x1F\x1\x2A\x1\x1F\x1\x44\x3"+
			"\x45\x1\x44\x2\x1F\x1\x4B\x3\x1F\x4\x45\x1\x44\x3\x45\x2\x1F\x1\x4B\x1"+
			"\x1F\x5\x45\x1\x1F\x1\x45";
		private const string DFA4_maxS =
			"\x1\x7F\x1\x1F\x1\x7F\x7\xFFFF\x1\x66\x1\x1F\x1\xFFFF\x1\x1F\x1\x30\x1"+
			"\x1F\x1\x2A\x1\x7F\x1\x66\x2\x4B\x1\x56\x1\x66\x1\x7F\x1\x30\x1\x66\x2"+
			"\x1F\x1\x30\x2\x4B\x2\x56\x1\x66\x2\x4B\x1\x56\x1\x1F\x1\x30\x1\x66\x1"+
			"\x1F\x1\x56\x2\x4B\x2\x56\x1\x1F\x1\x56";
		private const string DFA4_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x2\xFFFF\x1\x4\x23"+
			"\xFFFF";
		private const string DFA4_specialS =
			"\x30\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x2\x44\xFFFF\x1\x1\x6\xFFFF\x1\x4\x1\xFFFF\x1\x5\x3\xFFFF\x1\x8"+
				"\x2\xFFFF\x1\x9\x3\xFFFF\x1\x7\x1\x6\x5\xFFFF\x1\x3",
				"\x1\xA",
				"\x1\x3\x22\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\xC"+
				"\x9\xFFFF\x1\xC\x1\xB\x1\xC\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x1A\xFFFF"+
				"\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xE\x6\xFFFF\x1\xF\xA\xFFFF\x1\xD\xF\xFFFF\x1\x10",
				"\x1\x11",
				"",
				"\x1\x12",
				"\x1\x15\xB\xFFFF\x1\x13\x4\xFFFF\x1\x14",
				"\x1\x16",
				"\x1\x17",
				"\x1\x3\x22\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\xC"+
				"\x9\xFFFF\x1\xC\x1\xB\x1\xC\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x1A\xFFFF"+
				"\x1\x3",
				"\x1\xE\x6\xFFFF\x1\xF\xA\xFFFF\x1\xD\xF\xFFFF\x1\x10",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x1A",
				"\x1\x1C\x6\xFFFF\x1\xF\xA\xFFFF\x1\x1B\xF\xFFFF\x1\x10",
				"\x1\x2\xA\xFFFF\x1\x17\x39\xFFFF\x1\x1\x6\xFFFF\x1\x4\x1\xFFFF\x1\x5"+
				"\x11\xFFFF\x1\x3",
				"\x1\x1F\xB\xFFFF\x1\x1D\x4\xFFFF\x1\x1E",
				"\x1\xF\x1A\xFFFF\x1\x10",
				"\x1\x20",
				"\x1\x21",
				"\x1\x24\xB\xFFFF\x1\x22\x4\xFFFF\x1\x23",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x25",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x1A",
				"\x1\x1C\x6\xFFFF\x1\xF\xA\xFFFF\x1\x1B\xF\xFFFF\x1\x10",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x28",
				"\x1\x29",
				"\x1\x2C\xB\xFFFF\x1\x2A\x4\xFFFF\x1\x2B",
				"\x1\xF\x1A\xFFFF\x1\x10",
				"\x1\x2D",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x25",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x2E",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x28",
				"\x1\x2F",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x2E"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "169:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA14 : DFA
	{
		private const string DFA14_eotS =
			"\x2A\xFFFF";
		private const string DFA14_eofS =
			"\x2A\xFFFF";
		private const string DFA14_minS =
			"\x2\x1F\x1\x4B\x1\x44\x1\x1F\x2\xFFFF\x3\x1F\x1\x2A\x1\x4B\x1\x44\x3"+
			"\x45\x1\x44\x2\x1F\x1\x4B\x3\x1F\x4\x45\x1\x44\x3\x45\x2\x1F\x1\x4B\x1"+
			"\x1F\x5\x45\x1\x1F\x1\x45";
		private const string DFA14_maxS =
			"\x1\x64\x1\x1F\x1\x57\x1\x66\x1\x1F\x2\xFFFF\x1\x1F\x1\x30\x1\x1F\x1"+
			"\x2A\x1\x57\x1\x66\x2\x4B\x1\x56\x1\x66\x1\x64\x1\x30\x1\x66\x2\x1F\x1"+
			"\x30\x2\x4B\x2\x56\x1\x66\x2\x4B\x1\x56\x1\x1F\x1\x30\x1\x66\x1\x1F\x1"+
			"\x56\x2\x4B\x2\x56\x1\x1F\x1\x56";
		private const string DFA14_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2\x23\xFFFF";
		private const string DFA14_specialS =
			"\x2A\xFFFF}>";
		private static readonly string[] DFA14_transitionS =
			{
				"\x1\x2\x44\xFFFF\x1\x1",
				"\x1\x3",
				"\x1\x5\x9\xFFFF\x1\x5\x1\x4\x1\x6",
				"\x1\x8\x6\xFFFF\x1\x9\xA\xFFFF\x1\x7\xF\xFFFF\x1\xA",
				"\x1\xB",
				"",
				"",
				"\x1\xC",
				"\x1\xF\xB\xFFFF\x1\xD\x4\xFFFF\x1\xE",
				"\x1\x10",
				"\x1\x11",
				"\x1\x5\x9\xFFFF\x1\x5\x1\x4\x1\x6",
				"\x1\x8\x6\xFFFF\x1\x9\xA\xFFFF\x1\x7\xF\xFFFF\x1\xA",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x14",
				"\x1\x16\x6\xFFFF\x1\x9\xA\xFFFF\x1\x15\xF\xFFFF\x1\xA",
				"\x1\x2\xA\xFFFF\x1\x11\x39\xFFFF\x1\x1",
				"\x1\x19\xB\xFFFF\x1\x17\x4\xFFFF\x1\x18",
				"\x1\x9\x1A\xFFFF\x1\xA",
				"\x1\x1A",
				"\x1\x1B",
				"\x1\x1E\xB\xFFFF\x1\x1C\x4\xFFFF\x1\x1D",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x1F",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x14",
				"\x1\x16\x6\xFFFF\x1\x9\xA\xFFFF\x1\x15\xF\xFFFF\x1\xA",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x22",
				"\x1\x23",
				"\x1\x26\xB\xFFFF\x1\x24\x4\xFFFF\x1\x25",
				"\x1\x9\x1A\xFFFF\x1\xA",
				"\x1\x27",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x1F",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x28",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x22",
				"\x1\x29",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x28"
			};

		private static readonly short[] DFA14_eot = DFA.UnpackEncodedString(DFA14_eotS);
		private static readonly short[] DFA14_eof = DFA.UnpackEncodedString(DFA14_eofS);
		private static readonly char[] DFA14_min = DFA.UnpackEncodedStringToUnsignedChars(DFA14_minS);
		private static readonly char[] DFA14_max = DFA.UnpackEncodedStringToUnsignedChars(DFA14_maxS);
		private static readonly short[] DFA14_accept = DFA.UnpackEncodedString(DFA14_acceptS);
		private static readonly short[] DFA14_special = DFA.UnpackEncodedString(DFA14_specialS);
		private static readonly short[][] DFA14_transition;

		static DFA14()
		{
			int numStates = DFA14_transitionS.Length;
			DFA14_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA14_transition[i] = DFA.UnpackEncodedString(DFA14_transitionS[i]);
			}
		}

		public DFA14( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 14;
			this.eot = DFA14_eot;
			this.eof = DFA14_eof;
			this.min = DFA14_min;
			this.max = DFA14_max;
			this.accept = DFA14_accept;
			this.special = DFA14_special;
			this.transition = DFA14_transition;
		}

		public override string Description { get { return "194:1: global_alloc : ( ( attribute )? ident_list ':' type_name ( ':=' expr )? -> ^( Expr_Alloc ( attribute )? type_name ident_list ( expr )? ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x4\xFFFF";
		private const string DFA20_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA20_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA20_maxS =
			"\x1\x2A\x1\x7F\x2\xFFFF";
		private const string DFA20_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA20_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x1\x1",
				"\x1\x2\x16\xFFFF\x1\x2\x1\x3\x9\xFFFF\x1\x1\x39\xFFFF\x1\x2\x6\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x2\x2\x5"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "208:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA33 : DFA
	{
		private const string DFA33_eotS =
			"\x4\xFFFF";
		private const string DFA33_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA33_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA33_maxS =
			"\x1\x2A\x1\x7F\x2\xFFFF";
		private const string DFA33_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA33_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA33_transitionS =
			{
				"\x1\x1",
				"\x1\x2\x16\xFFFF\x1\x2\x1\x3\x9\xFFFF\x1\x1\x39\xFFFF\x1\x2\x6\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3\xFFFF\x2\x2\x5"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA33_eot = DFA.UnpackEncodedString(DFA33_eotS);
		private static readonly short[] DFA33_eof = DFA.UnpackEncodedString(DFA33_eofS);
		private static readonly char[] DFA33_min = DFA.UnpackEncodedStringToUnsignedChars(DFA33_minS);
		private static readonly char[] DFA33_max = DFA.UnpackEncodedStringToUnsignedChars(DFA33_maxS);
		private static readonly short[] DFA33_accept = DFA.UnpackEncodedString(DFA33_acceptS);
		private static readonly short[] DFA33_special = DFA.UnpackEncodedString(DFA33_specialS);
		private static readonly short[][] DFA33_transition;

		static DFA33()
		{
			int numStates = DFA33_transitionS.Length;
			DFA33_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA33_transition[i] = DFA.UnpackEncodedString(DFA33_transitionS[i]);
			}
		}

		public DFA33( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 33;
			this.eot = DFA33_eot;
			this.eof = DFA33_eof;
			this.min = DFA33_min;
			this.max = DFA33_max;
			this.accept = DFA33_accept;
			this.special = DFA33_special;
			this.transition = DFA33_transition;
		}

		public override string Description { get { return "220:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA42 : DFA
	{
		private const string DFA42_eotS =
			"\xF\xFFFF";
		private const string DFA42_eofS =
			"\xF\xFFFF";
		private const string DFA42_minS =
			"\x2\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x1\x1F\x1\x42\x3\x1F\x2\x42\x1\x1F\x1"+
			"\x42";
		private const string DFA42_maxS =
			"\x2\x7F\x1\xFFFF\x1\x1F\x1\x60\x1\xFFFF\x1\x7F\x1\x64\x2\x1F\x1\x7F\x2"+
			"\x64\x1\x1F\x1\x64";
		private const string DFA42_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x1\x9\xFFFF";
		private const string DFA42_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA42_transitionS =
			{
				"\x1\x1\x5F\xFFFF\x1\x2",
				"\x1\x5\x22\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\xF\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x4\xA\xFFFF\x1\x5\x1A\xFFFF\x1\x5",
				"",
				"\x1\x6",
				"\x1\x7\x40\xFFFF\x1\x5",
				"",
				"\x1\x5\x22\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\xF\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x4\xA\xFFFF\x1\x5\x1A\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\xB",
				"\x1\xC",
				"\x1\x5\x22\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\x1D\xFFFF\x1\x5"+
				"\x1A\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\xE",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5"
			};

		private static readonly short[] DFA42_eot = DFA.UnpackEncodedString(DFA42_eotS);
		private static readonly short[] DFA42_eof = DFA.UnpackEncodedString(DFA42_eofS);
		private static readonly char[] DFA42_min = DFA.UnpackEncodedStringToUnsignedChars(DFA42_minS);
		private static readonly char[] DFA42_max = DFA.UnpackEncodedStringToUnsignedChars(DFA42_maxS);
		private static readonly short[] DFA42_accept = DFA.UnpackEncodedString(DFA42_acceptS);
		private static readonly short[] DFA42_special = DFA.UnpackEncodedString(DFA42_specialS);
		private static readonly short[][] DFA42_transition;

		static DFA42()
		{
			int numStates = DFA42_transitionS.Length;
			DFA42_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA42_transition[i] = DFA.UnpackEncodedString(DFA42_transitionS[i]);
			}
		}

		public DFA42( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 42;
			this.eot = DFA42_eot;
			this.eof = DFA42_eof;
			this.min = DFA42_min;
			this.max = DFA42_max;
			this.accept = DFA42_accept;
			this.special = DFA42_special;
			this.transition = DFA42_transition;
		}

		public override string Description { get { return "237:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA52 : DFA
	{
		private const string DFA52_eotS =
			"\x9\xFFFF";
		private const string DFA52_eofS =
			"\x1\xFFFF\x1\x5\x6\xFFFF\x1\x5";
		private const string DFA52_minS =
			"\x1\x1F\x1\x2A\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x2A";
		private const string DFA52_maxS =
			"\x1\x79\x1\x7D\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x7D";
		private const string DFA52_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA52_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA52_transitionS =
			{
				"\x1\x1\x24\xFFFF\x1\x5\x31\xFFFF\x1\x2\x1\xFFFF\x1\x4\x1\x3",
				"\x1\x5\x15\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x2\x5\x3\xFFFF"+
				"\x1\x5\x14\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x15\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x2\x5\x3\xFFFF"+
				"\x1\x5\x14\xFFFF\x1\x5"
			};

		private static readonly short[] DFA52_eot = DFA.UnpackEncodedString(DFA52_eotS);
		private static readonly short[] DFA52_eof = DFA.UnpackEncodedString(DFA52_eofS);
		private static readonly char[] DFA52_min = DFA.UnpackEncodedStringToUnsignedChars(DFA52_minS);
		private static readonly char[] DFA52_max = DFA.UnpackEncodedStringToUnsignedChars(DFA52_maxS);
		private static readonly short[] DFA52_accept = DFA.UnpackEncodedString(DFA52_acceptS);
		private static readonly short[] DFA52_special = DFA.UnpackEncodedString(DFA52_specialS);
		private static readonly short[][] DFA52_transition;

		static DFA52()
		{
			int numStates = DFA52_transitionS.Length;
			DFA52_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA52_transition[i] = DFA.UnpackEncodedString(DFA52_transitionS[i]);
			}
		}

		public DFA52( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 52;
			this.eot = DFA52_eot;
			this.eof = DFA52_eof;
			this.min = DFA52_min;
			this.max = DFA52_max;
			this.accept = DFA52_accept;
			this.special = DFA52_special;
			this.transition = DFA52_transition;
		}

		public override string Description { get { return "254:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA63 : DFA
	{
		private const string DFA63_eotS =
			"\x6\xFFFF";
		private const string DFA63_eofS =
			"\x6\xFFFF";
		private const string DFA63_minS =
			"\x1\x1F\x1\x4B\x1\x1F\x2\xFFFF\x1\x4B";
		private const string DFA63_maxS =
			"\x1\x1F\x1\x57\x1\x1F\x2\xFFFF\x1\x57";
		private const string DFA63_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA63_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA63_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x9\xFFFF\x1\x3\x1\x2\x1\x4",
				"\x1\x5",
				"",
				"",
				"\x1\x3\x9\xFFFF\x1\x3\x1\x2\x1\x4"
			};

		private static readonly short[] DFA63_eot = DFA.UnpackEncodedString(DFA63_eotS);
		private static readonly short[] DFA63_eof = DFA.UnpackEncodedString(DFA63_eofS);
		private static readonly char[] DFA63_min = DFA.UnpackEncodedStringToUnsignedChars(DFA63_minS);
		private static readonly char[] DFA63_max = DFA.UnpackEncodedStringToUnsignedChars(DFA63_maxS);
		private static readonly short[] DFA63_accept = DFA.UnpackEncodedString(DFA63_acceptS);
		private static readonly short[] DFA63_special = DFA.UnpackEncodedString(DFA63_specialS);
		private static readonly short[][] DFA63_transition;

		static DFA63()
		{
			int numStates = DFA63_transitionS.Length;
			DFA63_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA63_transition[i] = DFA.UnpackEncodedString(DFA63_transitionS[i]);
			}
		}

		public DFA63( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 63;
			this.eot = DFA63_eot;
			this.eof = DFA63_eof;
			this.min = DFA63_min;
			this.max = DFA63_max;
			this.accept = DFA63_accept;
			this.special = DFA63_special;
			this.transition = DFA63_transition;
		}

		public override string Description { get { return "315:1: stmt_alloc : ( ident_list ':' type_name ( ':=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) | ident ':=' ^ modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root444 = new BitSet(new ulong[]{0x40080000000UL,0x8312281000000000UL});
		public static readonly BitSet _global_block_in_root447 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block469 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block471 = new BitSet(new ulong[]{0x40080000002UL,0x8312281000000000UL});
		public static readonly BitSet _func_def_in_node494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args541 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item562 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _68_in_attribute_item565 = new BitSet(new ulong[]{0x1080080000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item567 = new BitSet(new ulong[]{0x0UL,0x820UL});
		public static readonly BitSet _75_in_attribute_item570 = new BitSet(new ulong[]{0x1080080000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item572 = new BitSet(new ulong[]{0x0UL,0x820UL});
		public static readonly BitSet _69_in_attribute_item576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_attribute601 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _attribute_item_in_attribute603 = new BitSet(new ulong[]{0x0UL,0x4000000800UL});
		public static readonly BitSet _75_in_attribute606 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _attribute_item_in_attribute608 = new BitSet(new ulong[]{0x0UL,0x4000000800UL});
		public static readonly BitSet _102_in_attribute612 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute614 = new BitSet(new ulong[]{0x40000000002UL,0x1000000000UL});
		public static readonly BitSet _attribute_in_global_alloc633 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_list_in_global_alloc636 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_global_alloc638 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_global_alloc640 = new BitSet(new ulong[]{0x2UL,0x800000UL});
		public static readonly BitSet _87_in_global_alloc643 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_global_alloc645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_global_alloc668 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_global_alloc671 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_global_alloc673 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _modify_expr_in_global_alloc675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_import_def721 = new BitSet(new ulong[]{0x1040000000002UL});
		public static readonly BitSet _STRING_in_import_def723 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def727 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_import_def730 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def732 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _STRING_in_import_def737 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def739 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _DEDENT_in_import_def744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def766 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_enum_def769 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def771 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_enum_def773 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _ident_in_enum_def776 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_enum_def779 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def781 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _116_in_namespace_def814 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_namespace_def816 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def818 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_namespace_def821 = new BitSet(new ulong[]{0x40080000100UL,0x8312281000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def823 = new BitSet(new ulong[]{0x40080000100UL,0x8312281000000000UL});
		public static readonly BitSet _global_block_in_namespace_def826 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def850 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_class_def853 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def855 = new BitSet(new ulong[]{0x40000000002UL,0x2200010UL});
		public static readonly BitSet _generic_parameter_in_class_def858 = new BitSet(new ulong[]{0x40000000002UL,0x200010UL});
		public static readonly BitSet _68_in_class_def863 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _func_args_in_class_def865 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_class_def867 = new BitSet(new ulong[]{0x40000000002UL,0x200000UL});
		public static readonly BitSet _85_in_class_def872 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def874 = new BitSet(new ulong[]{0x40000000002UL,0x800UL});
		public static readonly BitSet _75_in_class_def877 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def879 = new BitSet(new ulong[]{0x40000000002UL,0x800UL});
		public static readonly BitSet _NEWLINE_in_class_def886 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_class_def889 = new BitSet(new ulong[]{0x40080000100UL,0x8312281000000000UL});
		public static readonly BitSet _NEWLINE_in_class_def891 = new BitSet(new ulong[]{0x40080000100UL,0x8312281000000000UL});
		public static readonly BitSet _global_block_in_class_def894 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_type_name_op937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_type_name_op941 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_type_name_op943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_type_name_op947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_type_name956 = new BitSet(new ulong[]{0x2UL,0x1002000044UL});
		public static readonly BitSet _89_in_type_name959 = new BitSet(new ulong[]{0x80000000UL,0x100000000UL});
		public static readonly BitSet _type_name_in_type_name962 = new BitSet(new ulong[]{0x0UL,0x100000800UL});
		public static readonly BitSet _75_in_type_name965 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_type_name967 = new BitSet(new ulong[]{0x0UL,0x100000800UL});
		public static readonly BitSet _96_in_type_name973 = new BitSet(new ulong[]{0x2UL,0x1000000044UL});
		public static readonly BitSet _type_name_op_in_type_name977 = new BitSet(new ulong[]{0x2UL,0x1000000044UL});
		public static readonly BitSet _89_in_generic_parameter1011 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_generic_parameter1013 = new BitSet(new ulong[]{0x0UL,0x100000800UL});
		public static readonly BitSet _75_in_generic_parameter1016 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_generic_parameter1018 = new BitSet(new ulong[]{0x0UL,0x100000800UL});
		public static readonly BitSet _96_in_generic_parameter1022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_func_args1042 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _75_in_func_args1045 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args1047 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _attribute_in_func_def1069 = new BitSet(new ulong[]{0x80000000UL,0x8000000000000000UL});
		public static readonly BitSet _type_name_in_func_def1072 = new BitSet(new ulong[]{0x80000000UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_func_def1075 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_func_def1078 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _generic_parameter_in_func_def1080 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_func_def1083 = new BitSet(new ulong[]{0x80000000UL,0x20UL});
		public static readonly BitSet _func_args_in_func_def1085 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_func_def1088 = new BitSet(new ulong[]{0x40000000000UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1091 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _stmt_block_in_func_def1094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_func_def1143 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_func_def1145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1186 = new BitSet(new ulong[]{0x40080000100UL,0xFC9C00000000010UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1188 = new BitSet(new ulong[]{0x40080000100UL,0xFC9C00000000010UL});
		public static readonly BitSet _stmt_in_stmt_block1193 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1195 = new BitSet(new ulong[]{0x40080000100UL,0xFC9C00000000010UL});
		public static readonly BitSet _DEDENT_in_stmt_block1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr1256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr1261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr1276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_stmt_typedef1287 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1289 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_stmt_typedef1291 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_using_item1316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_stmt_using1324 = new BitSet(new ulong[]{0x80000002UL,0x10000000000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1326 = new BitSet(new ulong[]{0x80000002UL,0x10000000000000UL});
		public static readonly BitSet _118_in_stmt_return1347 = new BitSet(new ulong[]{0x2001080080000002UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_stmt_return1349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_if1370 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_stmt_if1372 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_stmt_if1374 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_stmt_if1376 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1378 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_stmt_if1381 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_stmt_while1409 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_stmt_while1411 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_stmt_while1413 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_stmt_while1415 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_stmt_for1443 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_stmt_for1445 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_stmt_for1447 = new BitSet(new ulong[]{0x0UL,0x4000001000000UL});
		public static readonly BitSet _88_in_stmt_for1450 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_stmt_for1452 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_stmt_for1454 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_stmt_for1456 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _114_in_stmt_for1462 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_stmt_for1464 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_stmt_for1469 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_stmt_try1516 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1518 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_stmt_try1520 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_stmt_try1522 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_stmt_try1524 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_stmt_try1526 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_linq_item1551 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_linq_item1553 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_linq_item1555 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_linq_item1557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_linq_item1572 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_linq_item1574 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_linq_item1576 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_linq_item1578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_linq_item1593 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_linq_item1595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _linq_item_in_linq_prefix1615 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix1617 = new BitSet(new ulong[]{0x40000000002UL,0x408800000000000UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq1640 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq1642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list1663 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _75_in_ident_list1666 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_ident_list1668 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _ident_list_in_stmt_alloc1690 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_stmt_alloc1692 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_stmt_alloc1694 = new BitSet(new ulong[]{0x2UL,0x800000UL});
		public static readonly BitSet _87_in_stmt_alloc1697 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_stmt_alloc1699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_alloc1719 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_stmt_alloc1721 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc1724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify1735 = new BitSet(new ulong[]{0x2UL,0x2000010828104489UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify1738 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _cond_expr_in_stmt_modify1741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_lambda_expr1765 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_lambda_expr1767 = new BitSet(new ulong[]{0x80000000UL,0x20UL});
		public static readonly BitSet _func_args_in_lambda_expr1769 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_lambda_expr1772 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_lambda_expr1774 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _lambda_expr_in_lambda_expr1776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr1850 = new BitSet(new ulong[]{0x2UL,0x2000010828904489UL});
		public static readonly BitSet _set_in_modify_expr1853 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _modify_expr_in_modify_expr1902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item1913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr1925 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_cond_expr1934 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1938 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_cond_expr1940 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr1975 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_or_expr1984 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _and_expr_in_or_expr1988 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _bit_or_in_and_expr2018 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _65_in_and_expr2027 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _bit_or_in_and_expr2031 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _bit_xor_in_bit_or2061 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_bit_or2070 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _bit_xor_in_bit_or2074 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor2104 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_bit_xor2113 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _bit_and_in_bit_xor2117 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2147 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _66_in_bit_and2156 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2160 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2201 = new BitSet(new ulong[]{0x4000000000000002UL,0x40000000UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr2210 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_cmp_expr2264 = new BitSet(new ulong[]{0x2UL,0x312000000UL});
		public static readonly BitSet _cmp_expr_op_in_cmp_expr2273 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _shift_expr_in_cmp_expr2277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr2318 = new BitSet(new ulong[]{0x2UL,0x404000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr2327 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _add_expr_in_shift_expr2331 = new BitSet(new ulong[]{0x2UL,0x404000000UL});
		public static readonly BitSet _infix_expr_in_add_expr2361 = new BitSet(new ulong[]{0x2UL,0x1100UL});
		public static readonly BitSet _72_in_add_expr2371 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _infix_expr_in_add_expr2375 = new BitSet(new ulong[]{0x2UL,0x1100UL});
		public static readonly BitSet _76_in_add_expr2402 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _infix_expr_in_add_expr2406 = new BitSet(new ulong[]{0x2UL,0x1100UL});
		public static readonly BitSet _mul_expr_in_infix_expr2446 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr2456 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _mul_expr_in_infix_expr2460 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _selector_expr_in_mul_expr2492 = new BitSet(new ulong[]{0x8000000000000002UL,0x80040UL});
		public static readonly BitSet _70_in_mul_expr2502 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _selector_expr_in_mul_expr2506 = new BitSet(new ulong[]{0x8000000000000002UL,0x80040UL});
		public static readonly BitSet _83_in_mul_expr2536 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _selector_expr_in_mul_expr2540 = new BitSet(new ulong[]{0x8000000000000002UL,0x80040UL});
		public static readonly BitSet _63_in_mul_expr2570 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _selector_expr_in_mul_expr2574 = new BitSet(new ulong[]{0x8000000000000002UL,0x80040UL});
		public static readonly BitSet _prefix_expr_in_selector_expr2617 = new BitSet(new ulong[]{0x2UL,0x50000UL});
		public static readonly BitSet _80_in_selector_expr2627 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_selector_expr2631 = new BitSet(new ulong[]{0x2UL,0x50000UL});
		public static readonly BitSet _82_in_selector_expr2659 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_selector_expr2664 = new BitSet(new ulong[]{0x2UL,0x50000UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr2739 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020000000003354UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr2741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_prefix_expr2757 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_prefix_expr2759 = new BitSet(new ulong[]{0x0UL,0x1000000010UL});
		public static readonly BitSet _68_in_prefix_expr2763 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003374UL});
		public static readonly BitSet _expr_list_in_prefix_expr2765 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_prefix_expr2768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_prefix_expr2790 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_list_in_prefix_expr2792 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_prefix_expr2794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr2810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list2822 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _75_in_expr_list2825 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_expr_list2828 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _atom_expr_in_suffix_expr2844 = new BitSet(new ulong[]{0x2UL,0x100222A210UL});
		public static readonly BitSet _73_in_suffix_expr2854 = new BitSet(new ulong[]{0x2UL,0x100222A210UL});
		public static readonly BitSet _77_in_suffix_expr2880 = new BitSet(new ulong[]{0x2UL,0x100222A210UL});
		public static readonly BitSet _81_in_suffix_expr2903 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr2905 = new BitSet(new ulong[]{0x2UL,0x100222A210UL});
		public static readonly BitSet _79_in_suffix_expr2930 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr2932 = new BitSet(new ulong[]{0x2UL,0x100222A210UL});
		public static readonly BitSet _generic_parameter_in_suffix_expr2957 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_suffix_expr2960 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003374UL});
		public static readonly BitSet _expr_list_in_suffix_expr2962 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_suffix_expr2965 = new BitSet(new ulong[]{0x2UL,0x100222A210UL});
		public static readonly BitSet _100_in_suffix_expr2992 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020006000003354UL});
		public static readonly BitSet _expr_list_in_suffix_expr2994 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_suffix_expr2997 = new BitSet(new ulong[]{0x2UL,0x100222A210UL});
		public static readonly BitSet _85_in_suffix_expr3021 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr3023 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_suffix_expr3025 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003374UL});
		public static readonly BitSet _expr_list_in_suffix_expr3027 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_suffix_expr3030 = new BitSet(new ulong[]{0x2UL,0x100222A210UL});
		public static readonly BitSet _NUMBER_in_atom_expr3074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr3079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr3084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_atom_expr3089 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_atom_expr3091 = new BitSet(new ulong[]{0x0UL,0x820UL});
		public static readonly BitSet _75_in_atom_expr3094 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003354UL});
		public static readonly BitSet _expr_in_atom_expr3096 = new BitSet(new ulong[]{0x0UL,0x820UL});
		public static readonly BitSet _69_in_atom_expr3103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue3140 = new BitSet(new ulong[]{0x2UL,0x100202A210UL});
		public static readonly BitSet _73_in_lvalue3150 = new BitSet(new ulong[]{0x2UL,0x100202A210UL});
		public static readonly BitSet _77_in_lvalue3178 = new BitSet(new ulong[]{0x2UL,0x100202A210UL});
		public static readonly BitSet _81_in_lvalue3203 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_lvalue3205 = new BitSet(new ulong[]{0x2UL,0x100202A210UL});
		public static readonly BitSet _79_in_lvalue3232 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_lvalue3234 = new BitSet(new ulong[]{0x2UL,0x100202A210UL});
		public static readonly BitSet _generic_parameter_in_lvalue3261 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_lvalue3264 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003374UL});
		public static readonly BitSet _expr_list_in_lvalue3266 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_lvalue3269 = new BitSet(new ulong[]{0x2UL,0x100202A210UL});
		public static readonly BitSet _100_in_lvalue3298 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020006000003354UL});
		public static readonly BitSet _expr_list_in_lvalue3300 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_lvalue3303 = new BitSet(new ulong[]{0x2UL,0x100202A210UL});
		public static readonly BitSet _68_in_lvalue_atom3342 = new BitSet(new ulong[]{0x80000000UL,0x30UL});
		public static readonly BitSet _lvalue_in_lvalue_atom3345 = new BitSet(new ulong[]{0x0UL,0x820UL});
		public static readonly BitSet _75_in_lvalue_atom3348 = new BitSet(new ulong[]{0x80000000UL,0x10UL});
		public static readonly BitSet _lvalue_in_lvalue_atom3350 = new BitSet(new ulong[]{0x0UL,0x820UL});
		public static readonly BitSet _69_in_lvalue_atom3356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_lvalue_atom3370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident3381 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_ident3384 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident3386 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _105_in_infix_func3399 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_infix_func3402 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_infix_func3404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_parameter_in_synpred145_SugarCpp2957 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_synpred145_SugarCpp2960 = new BitSet(new ulong[]{0x2001080080000000UL,0x8020002000003374UL});
		public static readonly BitSet _expr_list_in_synpred145_SugarCpp2962 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_synpred145_SugarCpp2965 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
