//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-09 14:36:23

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_ForEach", "Stmt_For_Down_To", "Stmt_For_To", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'do'", "'downto'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'then'", "'to'", "'try'", "'typedef'", "'unsigned'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cond=19;
	public const int Expr_Cond_Not_Null=20;
	public const int Expr_Dict=21;
	public const int Expr_Infix=22;
	public const int Expr_Lambda=23;
	public const int Expr_New_Array=24;
	public const int Expr_New_Type=25;
	public const int Expr_Not_Null=26;
	public const int Expr_Prefix=27;
	public const int Expr_Suffix=28;
	public const int Expr_Tuple=29;
	public const int Func_Args=30;
	public const int Func_Def=31;
	public const int Generic_Patameters=32;
	public const int Global_Block=33;
	public const int IDENT=34;
	public const int INDENT=35;
	public const int Ident_List=36;
	public const int Import=37;
	public const int Left_Bracket=38;
	public const int LineComment=39;
	public const int Linq_From=40;
	public const int Linq_Let=41;
	public const int Linq_Prefix=42;
	public const int Linq_Where=43;
	public const int Match_Tuple=44;
	public const int NEWLINE=45;
	public const int NUMBER=46;
	public const int Namespace=47;
	public const int Right_Bracket=48;
	public const int Root=49;
	public const int SP=50;
	public const int STRING=51;
	public const int Stmt_Block=52;
	public const int Stmt_Defer=53;
	public const int Stmt_ForEach=54;
	public const int Stmt_For_Down_To=55;
	public const int Stmt_For_To=56;
	public const int Stmt_If=57;
	public const int Stmt_Linq=58;
	public const int Stmt_Loop=59;
	public const int Stmt_Return=60;
	public const int Stmt_Try=61;
	public const int Stmt_Typedef=62;
	public const int Stmt_Using=63;
	public const int Stmt_While=64;
	public const int Type_IDENT=65;
	public const int Type_Ref=66;
	public const int Type_Tuple=67;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:168:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(168, 1);
		try
		{
			// SugarCpp.g:169:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:169:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(169, 4);
			// SugarCpp.g:169:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:169:4: NEWLINE
					{
					DebugLocation(169, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root474);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(169, 13);
			PushFollow(Follow._global_block_in_root477);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(169, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root479);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 169:30: -> ^( Root global_block )
			{
				DebugLocation(169, 33);
				// SugarCpp.g:169:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(169, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(169, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:172:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(172, 1);
		try
		{
			// SugarCpp.g:173:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:173:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(173, 4);
			// SugarCpp.g:173:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==110||(LA3_0>=118 && LA3_0<=119)||LA3_0==124||LA3_0==128||LA3_0==134||(LA3_0>=141 && LA3_0<=143)||LA3_0==149))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:173:5: node ( NEWLINE )+
					{
					DebugLocation(173, 5);
					PushFollow(Follow._node_in_global_block499);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(173, 10);
					// SugarCpp.g:173:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:173:10: NEWLINE
							{
							DebugLocation(173, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block501);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 173:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(173, 24);
				// SugarCpp.g:173:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(173, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(173, 39);
				// SugarCpp.g:173:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(173, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:176:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(176, 1);
		try
		{
			// SugarCpp.g:177:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:177:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 4);
				PushFollow(Follow._func_def_in_node524);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:178:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(178, 4);
				PushFollow(Follow._class_def_in_node529);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:179:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(179, 4);
				PushFollow(Follow._enum_def_in_node534);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:180:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 4);
				PushFollow(Follow._global_alloc_in_node539);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:181:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._global_using_in_node544);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:182:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 4);
				PushFollow(Follow._global_typedef_in_node549);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:183:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(183, 4);
				PushFollow(Follow._import_def_in_node554);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:184:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				PushFollow(Follow._namespace_def_in_node559);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:187:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(187, 1);
		try
		{
			// SugarCpp.g:188:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:188:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args571); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:189:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args576); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:190:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(190, 4);
				PushFollow(Follow._ident_in_attribute_args581);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:193:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(193, 1);
		try
		{
			// SugarCpp.g:194:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==119))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:194:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(194, 4);
				PushFollow(Follow._ident_in_attribute_item592);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(194, 10);
				// SugarCpp.g:194:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==75))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:194:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(194, 11);
					char_literal18=(IToken)Match(input,75,Follow._75_in_attribute_item595);  
					stream_75.Add(char_literal18);

					DebugLocation(194, 15);
					PushFollow(Follow._attribute_args_in_attribute_item597);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(194, 30);
					// SugarCpp.g:194:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==82))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:194:31: ',' attribute_args
							{
							DebugLocation(194, 31);
							char_literal20=(IToken)Match(input,82,Follow._82_in_attribute_item600);  
							stream_82.Add(char_literal20);

							DebugLocation(194, 35);
							PushFollow(Follow._attribute_args_in_attribute_item602);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(194, 52);
					char_literal22=(IToken)Match(input,76,Follow._76_in_attribute_item606);  
					stream_76.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 194:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(194, 61);
					// SugarCpp.g:194:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(194, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(194, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(194, 79);
					// SugarCpp.g:194:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(194, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:195:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(195, 4);
				string_literal23=(IToken)Match(input,119,Follow._119_in_attribute_item624);  
				stream_119.Add(string_literal23);

				DebugLocation(195, 12);
				// SugarCpp.g:195:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==75))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:195:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(195, 13);
					char_literal24=(IToken)Match(input,75,Follow._75_in_attribute_item627);  
					stream_75.Add(char_literal24);

					DebugLocation(195, 17);
					PushFollow(Follow._attribute_args_in_attribute_item629);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(195, 32);
					// SugarCpp.g:195:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==82))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:195:33: ',' attribute_args
							{
							DebugLocation(195, 33);
							char_literal26=(IToken)Match(input,82,Follow._82_in_attribute_item632);  
							stream_82.Add(char_literal26);

							DebugLocation(195, 37);
							PushFollow(Follow._attribute_args_in_attribute_item634);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(195, 54);
					char_literal28=(IToken)Match(input,76,Follow._76_in_attribute_item638);  
					stream_76.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 119, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 195:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(195, 63);
					// SugarCpp.g:195:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(195, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(195, 75);
					adaptor.AddChild(root_1, stream_119.NextNode());
					DebugLocation(195, 83);
					// SugarCpp.g:195:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(195, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:198:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(198, 1);
		try
		{
			// SugarCpp.g:199:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:199:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(199, 4);
			// SugarCpp.g:199:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==110))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:199:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(199, 5);
					char_literal29=(IToken)Match(input,110,Follow._110_in_attribute663);  
					stream_110.Add(char_literal29);

					DebugLocation(199, 9);
					PushFollow(Follow._attribute_item_in_attribute665);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(199, 24);
					// SugarCpp.g:199:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==82))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:199:25: ',' attribute_item
							{
							DebugLocation(199, 25);
							char_literal31=(IToken)Match(input,82,Follow._82_in_attribute668);  
							stream_82.Add(char_literal31);

							DebugLocation(199, 29);
							PushFollow(Follow._attribute_item_in_attribute670);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(199, 46);
					char_literal33=(IToken)Match(input,111,Follow._111_in_attribute674);  
					stream_111.Add(char_literal33);

					DebugLocation(199, 50);
					// SugarCpp.g:199:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:199:50: NEWLINE
							{
							DebugLocation(199, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute676);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 199:61: -> ( attribute_item )+
			{
				DebugLocation(199, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(199, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:202:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(202, 1);
		try
		{
			// SugarCpp.g:203:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:203:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) )
			{
			DebugLocation(203, 4);
			// SugarCpp.g:203:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==110))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:203:4: attribute
				{
				DebugLocation(203, 4);
				PushFollow(Follow._attribute_in_global_alloc695);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(203, 15);
			PushFollow(Follow._ident_list_in_global_alloc698);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(203, 26);
			// SugarCpp.g:203:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==92))
			{
				alt19 = 1;
			}
			else if ((LA19_0==94))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:203:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(203, 28);
				char_literal37=(IToken)Match(input,92,Follow._92_in_global_alloc702);  
				stream_92.Add(char_literal37);

				DebugLocation(203, 32);
				PushFollow(Follow._type_name_in_global_alloc704);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(203, 42);
				// SugarCpp.g:203:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 94:
				case 100:
					{
					alt17 = 1;
					}
					break;
				case 75:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:203:44: ( '=' | ':=' ) expr
					{
					DebugLocation(203, 44);
					// SugarCpp.g:203:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==100))
					{
						alt15 = 1;
					}
					else if ((LA15_0==94))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:203:45: '='
						{
						DebugLocation(203, 45);
						char_literal39=(IToken)Match(input,100,Follow._100_in_global_alloc709);  
						stream_100.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:203:51: ':='
						{
						DebugLocation(203, 51);
						string_literal40=(IToken)Match(input,94,Follow._94_in_global_alloc713);  
						stream_94.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(203, 57);
					PushFollow(Follow._expr_in_global_alloc716);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: attribute, expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 203:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(203, 65);
						// SugarCpp.g:203:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(203, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(203, 84);
						// SugarCpp.g:203:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(203, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(203, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(203, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(203, 116);
						// SugarCpp.g:203:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(203, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:204:43: '(' ( expr_list )? ')'
					{
					DebugLocation(204, 43);
					char_literal42=(IToken)Match(input,75,Follow._75_in_global_alloc776);  
					stream_75.Add(char_literal42);

					DebugLocation(204, 47);
					// SugarCpp.g:204:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==68||LA16_0==73||LA16_0==75||LA16_0==77||(LA16_0>=79 && LA16_0<=80)||(LA16_0>=83 && LA16_0<=84)||LA16_0==109||LA16_0==135||LA16_0==149))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:204:47: expr_list
						{
						DebugLocation(204, 47);
						PushFollow(Follow._expr_list_in_global_alloc778);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(204, 58);
					char_literal44=(IToken)Match(input,76,Follow._76_in_global_alloc781);  
					stream_76.Add(char_literal44);



					{
					// AST REWRITE
					// elements: attribute, expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 204:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(204, 65);
						// SugarCpp.g:204:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(204, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(204, 86);
						// SugarCpp.g:204:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(204, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(204, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(204, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(204, 118);
						// SugarCpp.g:204:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(204, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:205:17: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 205:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(205, 20);
						// SugarCpp.g:205:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(205, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(205, 39);
						// SugarCpp.g:205:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(205, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(205, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(205, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:207:10: ':=' ( modify_expr ( ',' modify_expr )* )
				{
				DebugLocation(207, 10);
				string_literal45=(IToken)Match(input,94,Follow._94_in_global_alloc854);  
				stream_94.Add(string_literal45);

				DebugLocation(207, 15);
				// SugarCpp.g:207:15: ( modify_expr ( ',' modify_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:207:16: modify_expr ( ',' modify_expr )*
				{
				DebugLocation(207, 16);
				PushFollow(Follow._modify_expr_in_global_alloc857);
				modify_expr46=modify_expr();
				PopFollow();

				stream_modify_expr.Add(modify_expr46.Tree);
				DebugLocation(207, 28);
				// SugarCpp.g:207:28: ( ',' modify_expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==82))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:207:29: ',' modify_expr
						{
						DebugLocation(207, 29);
						char_literal47=(IToken)Match(input,82,Follow._82_in_global_alloc860);  
						stream_82.Add(char_literal47);

						DebugLocation(207, 33);
						PushFollow(Follow._modify_expr_in_global_alloc862);
						modify_expr48=modify_expr();
						PopFollow();

						stream_modify_expr.Add(modify_expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, modify_expr, ident_list, 94
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 207:48: -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ )
				{
					DebugLocation(207, 51);
					// SugarCpp.g:207:51: ^( ':=' ( attribute )? ident_list ( modify_expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(207, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_94.NextNode(), root_1);

					DebugLocation(207, 58);
					// SugarCpp.g:207:58: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(207, 58);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(207, 69);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(207, 80);
					if (!(stream_modify_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_modify_expr.HasNext )
					{
						DebugLocation(207, 80);
						adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					}
					stream_modify_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:211:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(211, 1);
		try
		{
			// SugarCpp.g:212:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:212:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(212, 4);
			PushFollow(Follow._stmt_using_in_global_using899);
			stmt_using49=stmt_using();
			PopFollow();

			adaptor.AddChild(root_0, stmt_using49.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:215:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(215, 1);
		try
		{
			// SugarCpp.g:216:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:216:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(216, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef910);
			stmt_typedef50=stmt_typedef();
			PopFollow();

			adaptor.AddChild(root_0, stmt_typedef50.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:219:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken STRING52 = default(IToken);
		IToken NEWLINE53 = default(IToken);
		IToken INDENT54 = default(IToken);
		IToken NEWLINE55 = default(IToken);
		IToken STRING56 = default(IToken);
		IToken NEWLINE57 = default(IToken);
		IToken DEDENT58 = default(IToken);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree STRING52_tree = default(CommonTree);
		CommonTree NEWLINE53_tree = default(CommonTree);
		CommonTree INDENT54_tree = default(CommonTree);
		CommonTree NEWLINE55_tree = default(CommonTree);
		CommonTree STRING56_tree = default(CommonTree);
		CommonTree NEWLINE57_tree = default(CommonTree);
		CommonTree DEDENT58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(219, 1);
		try
		{
			// SugarCpp.g:220:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:220:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(220, 4);
			string_literal51=(IToken)Match(input,128,Follow._128_in_import_def921);  
			stream_128.Add(string_literal51);

			DebugLocation(220, 13);
			// SugarCpp.g:220:13: ( STRING )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==STRING))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:13: STRING
				{
				DebugLocation(220, 13);
				STRING52=(IToken)Match(input,STRING,Follow._STRING_in_import_def923);  
				stream_STRING.Add(STRING52);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(220, 21);
			// SugarCpp.g:220:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			try
			{
				alt25 = dfa25.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(220, 22);
				// SugarCpp.g:220:22: ( NEWLINE )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==NEWLINE))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:220:22: NEWLINE
						{
						DebugLocation(220, 22);
						NEWLINE53=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def927);  
						stream_NEWLINE.Add(NEWLINE53);


						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(220, 31);
				INDENT54=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def930);  
				stream_INDENT.Add(INDENT54);

				DebugLocation(220, 38);
				// SugarCpp.g:220:38: ( NEWLINE )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==NEWLINE))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:220:38: NEWLINE
						{
						DebugLocation(220, 38);
						NEWLINE55=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def932);  
						stream_NEWLINE.Add(NEWLINE55);


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(220, 48);
				// SugarCpp.g:220:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==STRING))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:220:49: STRING ( NEWLINE )+
						{
						DebugLocation(220, 49);
						STRING56=(IToken)Match(input,STRING,Follow._STRING_in_import_def937);  
						stream_STRING.Add(STRING56);

						DebugLocation(220, 56);
						// SugarCpp.g:220:56: ( NEWLINE )+
						int cnt23=0;
						try { DebugEnterSubRule(23);
						while (true)
						{
							int alt23=2;
							try { DebugEnterDecision(23, false);
							int LA23_0 = input.LA(1);

							if ((LA23_0==NEWLINE))
							{
								alt23 = 1;
							}


							} finally { DebugExitDecision(23); }
							switch (alt23)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:220:56: NEWLINE
								{
								DebugLocation(220, 56);
								NEWLINE57=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def939);  
								stream_NEWLINE.Add(NEWLINE57);


								}
								break;

							default:
								if (cnt23 >= 1)
									goto loop23;

								EarlyExitException eee23 = new EarlyExitException( 23, input );
								DebugRecognitionException(eee23);
								throw eee23;
							}
							cnt23++;
						}
						loop23:
							;

						} finally { DebugExitSubRule(23); }


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(220, 67);
				DEDENT58=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def944);  
				stream_DEDENT.Add(DEDENT58);


				}
				break;

			}
			} finally { DebugExitSubRule(25); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 220:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(220, 79);
				// SugarCpp.g:220:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(220, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(220, 88);
				// SugarCpp.g:220:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(220, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:223:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(223, 1);
		try
		{
			// SugarCpp.g:224:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:224:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(224, 4);
			// SugarCpp.g:224:4: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==110))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:224:4: attribute
				{
				DebugLocation(224, 4);
				PushFollow(Follow._attribute_in_enum_def966);
				attribute59=attribute();
				PopFollow();

				stream_attribute.Add(attribute59.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(224, 15);
			string_literal60=(IToken)Match(input,124,Follow._124_in_enum_def969);  
			stream_124.Add(string_literal60);

			DebugLocation(224, 22);
			PushFollow(Follow._ident_in_enum_def971);
			ident61=ident();
			PopFollow();

			stream_ident.Add(ident61.Tree);
			DebugLocation(224, 28);
			char_literal62=(IToken)Match(input,100,Follow._100_in_enum_def973);  
			stream_100.Add(char_literal62);

			DebugLocation(224, 32);
			// SugarCpp.g:224:32: ( ident ( '|' ident )* )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==IDENT))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:224:33: ident ( '|' ident )*
				{
				DebugLocation(224, 33);
				PushFollow(Follow._ident_in_enum_def976);
				ident63=ident();
				PopFollow();

				stream_ident.Add(ident63.Tree);
				DebugLocation(224, 39);
				// SugarCpp.g:224:39: ( '|' ident )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==146))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:224:40: '|' ident
						{
						DebugLocation(224, 40);
						char_literal64=(IToken)Match(input,146,Follow._146_in_enum_def979);  
						stream_146.Add(char_literal64);

						DebugLocation(224, 44);
						PushFollow(Follow._ident_in_enum_def981);
						ident65=ident();
						PopFollow();

						stream_ident.Add(ident65.Tree);

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 224:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(224, 57);
				// SugarCpp.g:224:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(224, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(224, 64);
				// SugarCpp.g:224:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(224, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(224, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(224, 81);
				// SugarCpp.g:224:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(224, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(224, 94);
				// SugarCpp.g:224:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(224, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:227:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken INDENT69 = default(IToken);
		IToken NEWLINE70 = default(IToken);
		IToken DEDENT72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block71 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree INDENT69_tree = default(CommonTree);
		CommonTree NEWLINE70_tree = default(CommonTree);
		CommonTree DEDENT72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(227, 1);
		try
		{
			// SugarCpp.g:228:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:228:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(228, 4);
			string_literal66=(IToken)Match(input,134,Follow._134_in_namespace_def1014);  
			stream_134.Add(string_literal66);

			DebugLocation(228, 16);
			PushFollow(Follow._ident_in_namespace_def1016);
			ident67=ident();
			PopFollow();

			stream_ident.Add(ident67.Tree);
			DebugLocation(228, 22);
			// SugarCpp.g:228:22: ( NEWLINE )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:228:22: NEWLINE
					{
					DebugLocation(228, 22);
					NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1018);  
					stream_NEWLINE.Add(NEWLINE68);


					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(228, 31);
			INDENT69=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1021);  
			stream_INDENT.Add(INDENT69);

			DebugLocation(228, 38);
			// SugarCpp.g:228:38: ( NEWLINE )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==NEWLINE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:228:38: NEWLINE
					{
					DebugLocation(228, 38);
					NEWLINE70=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1023);  
					stream_NEWLINE.Add(NEWLINE70);


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(228, 47);
			PushFollow(Follow._global_block_in_namespace_def1026);
			global_block71=global_block();
			PopFollow();

			stream_global_block.Add(global_block71.Tree);
			DebugLocation(228, 60);
			DEDENT72=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1028);  
			stream_DEDENT.Add(DEDENT72);



			{
			// AST REWRITE
			// elements: global_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 228:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(228, 70);
				// SugarCpp.g:228:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(228, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(228, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(228, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:231:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken NEWLINE84 = default(IToken);
		IToken INDENT85 = default(IToken);
		IToken NEWLINE86 = default(IToken);
		IToken DEDENT88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		CommonTree char_literal79_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree NEWLINE84_tree = default(CommonTree);
		CommonTree INDENT85_tree = default(CommonTree);
		CommonTree NEWLINE86_tree = default(CommonTree);
		CommonTree DEDENT88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:232:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(232, 5);
			// SugarCpp.g:232:5: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==110))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:5: attribute
				{
				DebugLocation(232, 5);
				PushFollow(Follow._attribute_in_class_def1050);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(232, 16);
			string_literal74=(IToken)Match(input,118,Follow._118_in_class_def1053);  
			stream_118.Add(string_literal74);

			DebugLocation(232, 24);
			PushFollow(Follow._ident_in_class_def1055);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(232, 30);
			// SugarCpp.g:232:30: ( generic_parameter )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==95))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:31: generic_parameter
				{
				DebugLocation(232, 31);
				PushFollow(Follow._generic_parameter_in_class_def1058);
				generic_parameter76=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(232, 51);
			// SugarCpp.g:232:51: ( '(' func_args ')' )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==75))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:52: '(' func_args ')'
				{
				DebugLocation(232, 52);
				char_literal77=(IToken)Match(input,75,Follow._75_in_class_def1063);  
				stream_75.Add(char_literal77);

				DebugLocation(232, 56);
				PushFollow(Follow._func_args_in_class_def1065);
				func_args78=func_args();
				PopFollow();

				stream_func_args.Add(func_args78.Tree);
				DebugLocation(232, 66);
				char_literal79=(IToken)Match(input,76,Follow._76_in_class_def1067);  
				stream_76.Add(char_literal79);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(232, 72);
			// SugarCpp.g:232:72: ( ':' ident ( ',' ident )* )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==92))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:73: ':' ident ( ',' ident )*
				{
				DebugLocation(232, 73);
				char_literal80=(IToken)Match(input,92,Follow._92_in_class_def1072);  
				stream_92.Add(char_literal80);

				DebugLocation(232, 77);
				PushFollow(Follow._ident_in_class_def1074);
				ident81=ident();
				PopFollow();

				stream_ident.Add(ident81.Tree);
				DebugLocation(232, 83);
				// SugarCpp.g:232:83: ( ',' ident )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==82))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:232:84: ',' ident
						{
						DebugLocation(232, 84);
						char_literal82=(IToken)Match(input,82,Follow._82_in_class_def1077);  
						stream_82.Add(char_literal82);

						DebugLocation(232, 88);
						PushFollow(Follow._ident_in_class_def1079);
						ident83=ident();
						PopFollow();

						stream_ident.Add(ident83.Tree);

						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(232, 98);
			// SugarCpp.g:232:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			try
			{
				alt38 = dfa38.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(232, 99);
				// SugarCpp.g:232:99: ( NEWLINE )+
				int cnt36=0;
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==NEWLINE))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:232:99: NEWLINE
						{
						DebugLocation(232, 99);
						NEWLINE84=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1086);  
						stream_NEWLINE.Add(NEWLINE84);


						}
						break;

					default:
						if (cnt36 >= 1)
							goto loop36;

						EarlyExitException eee36 = new EarlyExitException( 36, input );
						DebugRecognitionException(eee36);
						throw eee36;
					}
					cnt36++;
				}
				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(232, 108);
				INDENT85=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1089);  
				stream_INDENT.Add(INDENT85);

				DebugLocation(232, 115);
				// SugarCpp.g:232:115: ( NEWLINE )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==NEWLINE))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:232:115: NEWLINE
						{
						DebugLocation(232, 115);
						NEWLINE86=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1091);  
						stream_NEWLINE.Add(NEWLINE86);


						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(232, 124);
				PushFollow(Follow._global_block_in_class_def1094);
				global_block87=global_block();
				PopFollow();

				stream_global_block.Add(global_block87.Tree);
				DebugLocation(232, 137);
				DEDENT88=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1096);  
				stream_DEDENT.Add(DEDENT88);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: ident, func_args, ident, global_block, generic_parameter, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 232:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(232, 149);
				// SugarCpp.g:232:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(232, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(232, 157);
				// SugarCpp.g:232:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(232, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(232, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(232, 174);
				// SugarCpp.g:232:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(232, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(232, 193);
				// SugarCpp.g:232:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(232, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(232, 204);
				// SugarCpp.g:232:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(232, 205);
					// SugarCpp.g:232:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(232, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(232, 218);
					// SugarCpp.g:232:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(232, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(232, 228);
				// SugarCpp.g:232:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(232, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:235:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);

		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(235, 34);
		try
		{
			// SugarCpp.g:235:13: ( '*' | '[' ']' | '&' )
			int alt39=3;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case 77:
				{
				alt39 = 1;
				}
				break;
			case 110:
				{
				alt39 = 2;
				}
				break;
			case 73:
				{
				alt39 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 15);
				char_literal89=(IToken)Match(input,77,Follow._77_in_type_name_op1137); 
				char_literal89_tree = (CommonTree)adaptor.Create(char_literal89);
				adaptor.AddChild(root_0, char_literal89_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:235:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 21);
				char_literal90=(IToken)Match(input,110,Follow._110_in_type_name_op1141); 
				char_literal90_tree = (CommonTree)adaptor.Create(char_literal90);
				adaptor.AddChild(root_0, char_literal90_tree);
				DebugLocation(235, 25);
				char_literal91=(IToken)Match(input,111,Follow._111_in_type_name_op1143); 
				char_literal91_tree = (CommonTree)adaptor.Create(char_literal91);
				adaptor.AddChild(root_0, char_literal91_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:235:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 31);
				char_literal92=(IToken)Match(input,73,Follow._73_in_type_name_op1147); 
				char_literal92_tree = (CommonTree)adaptor.Create(char_literal92);
				adaptor.AddChild(root_0, char_literal92_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
		}
		DebugLocation(235, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:236:1: type_name : ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal93 = default(IToken);
		IToken string_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(236, 1);
		try
		{
			// SugarCpp.g:237:2: ( ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:237:4: ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(237, 4);
			// SugarCpp.g:237:4: ( 'const' )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==119))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:4: 'const'
				{
				DebugLocation(237, 4);
				string_literal93=(IToken)Match(input,119,Follow._119_in_type_name1156);  
				stream_119.Add(string_literal93);


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(237, 13);
			// SugarCpp.g:237:13: ( 'unsigned' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==142))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:13: 'unsigned'
				{
				DebugLocation(237, 13);
				string_literal94=(IToken)Match(input,142,Follow._142_in_type_name1159);  
				stream_142.Add(string_literal94);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(237, 25);
			PushFollow(Follow._ident_in_type_name1162);
			ident95=ident();
			PopFollow();

			stream_ident.Add(ident95.Tree);
			DebugLocation(237, 31);
			// SugarCpp.g:237:31: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==95))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:32: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(237, 32);
				char_literal96=(IToken)Match(input,95,Follow._95_in_type_name1165);  
				stream_95.Add(char_literal96);

				DebugLocation(237, 36);
				// SugarCpp.g:237:36: ( type_name ( ',' type_name )* )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==IDENT||LA43_0==119||LA43_0==142))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:237:37: type_name ( ',' type_name )*
					{
					DebugLocation(237, 37);
					PushFollow(Follow._type_name_in_type_name1168);
					type_name97=type_name();
					PopFollow();

					stream_type_name.Add(type_name97.Tree);
					DebugLocation(237, 47);
					// SugarCpp.g:237:47: ( ',' type_name )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==82))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:48: ',' type_name
							{
							DebugLocation(237, 48);
							char_literal98=(IToken)Match(input,82,Follow._82_in_type_name1171);  
							stream_82.Add(char_literal98);

							DebugLocation(237, 52);
							PushFollow(Follow._type_name_in_type_name1173);
							type_name99=type_name();
							PopFollow();

							stream_type_name.Add(type_name99.Tree);

							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(237, 66);
				char_literal100=(IToken)Match(input,103,Follow._103_in_type_name1179);  
				stream_103.Add(char_literal100);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(237, 72);
			// SugarCpp.g:237:72: ( type_name_op )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==110))
				{
					int LA45_2 = input.LA(2);

					if ((LA45_2==111))
					{
						alt45 = 1;
					}


				}
				else if ((LA45_0==73||LA45_0==77))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:237:72: type_name_op
					{
					DebugLocation(237, 72);
					PushFollow(Follow._type_name_op_in_type_name1183);
					type_name_op101=type_name_op();
					PopFollow();

					stream_type_name_op.Add(type_name_op101.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: ident, type_name_op, 142, 119, 95, type_name, 103
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 237:86: -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(237, 89);
				// SugarCpp.g:237:89: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(237, 91);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(237, 102);
				// SugarCpp.g:237:102: ( 'const' )?
				if (stream_119.HasNext)
				{
					DebugLocation(237, 102);
					adaptor.AddChild(root_1, stream_119.NextNode());

				}
				stream_119.Reset();
				DebugLocation(237, 111);
				// SugarCpp.g:237:111: ( 'unsigned' )?
				if (stream_142.HasNext)
				{
					DebugLocation(237, 111);
					adaptor.AddChild(root_1, stream_142.NextNode());

				}
				stream_142.Reset();
				DebugLocation(237, 123);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(237, 129);
				// SugarCpp.g:237:129: ( '<' ( type_name )* '>' )?
				if (stream_95.HasNext||stream_type_name.HasNext||stream_103.HasNext)
				{
					DebugLocation(237, 130);
					adaptor.AddChild(root_1, stream_95.NextNode());
					DebugLocation(237, 134);
					// SugarCpp.g:237:134: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(237, 134);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(237, 145);
					adaptor.AddChild(root_1, stream_103.NextNode());

				}
				stream_95.Reset();
				stream_type_name.Reset();
				stream_103.Reset();
				DebugLocation(237, 152);
				// SugarCpp.g:237:152: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(237, 152);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:240:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 16);
		TraceIn("generic_parameter_inside", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(240, 1);
		try
		{
			// SugarCpp.g:241:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: ident ( ',' ident )*
			{
			DebugLocation(241, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1223);
			ident102=ident();
			PopFollow();

			stream_ident.Add(ident102.Tree);
			DebugLocation(241, 10);
			// SugarCpp.g:241:10: ( ',' ident )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==82))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:11: ',' ident
					{
					DebugLocation(241, 11);
					char_literal103=(IToken)Match(input,82,Follow._82_in_generic_parameter_inside1226);  
					stream_82.Add(char_literal103);

					DebugLocation(241, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1228);
					ident104=ident();
					PopFollow();

					stream_ident.Add(ident104.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 241:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(241, 26);
				// SugarCpp.g:241:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(241, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(241, 47);
				// SugarCpp.g:241:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(241, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 16);
			LeaveRule("generic_parameter_inside", 16);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:244:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 17);
		TraceIn("generic_parameter", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(244, 1);
		try
		{
			// SugarCpp.g:245:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:245:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(245, 4);
			char_literal105=(IToken)Match(input,95,Follow._95_in_generic_parameter1250);  
			stream_95.Add(char_literal105);

			DebugLocation(245, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1252);
			generic_parameter_inside106=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside106.Tree);
			DebugLocation(245, 33);
			char_literal107=(IToken)Match(input,103,Follow._103_in_generic_parameter1254);  
			stream_103.Add(char_literal107);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 245:37: -> generic_parameter_inside
			{
				DebugLocation(245, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 17);
			LeaveRule("generic_parameter", 17);
			LeaveRule_generic_parameter();
		}
		DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:248:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 18);
		TraceIn("func_args", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(248, 1);
		try
		{
			// SugarCpp.g:249:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:249:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(249, 4);
			PushFollow(Follow._func_args_item_in_func_args1269);
			func_args_item108=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item108.Tree);
			DebugLocation(249, 19);
			// SugarCpp.g:249:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==82))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:249:20: ',' func_args_item
					{
					DebugLocation(249, 20);
					char_literal109=(IToken)Match(input,82,Follow._82_in_func_args1272);  
					stream_82.Add(char_literal109);

					DebugLocation(249, 24);
					PushFollow(Follow._func_args_item_in_func_args1274);
					func_args_item110=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item110.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 249:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(249, 44);
				// SugarCpp.g:249:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(249, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(249, 56);
				// SugarCpp.g:249:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(249, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 18);
			LeaveRule("func_args", 18);
			LeaveRule_func_args();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:252:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 19);
		TraceIn("func_args_item", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken string_literal115 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken string_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree string_literal115_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree string_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(252, 1);
		try
		{
			// SugarCpp.g:253:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt51=2;
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==IDENT))
			{
				alt51 = 1;
			}
			else if ((LA51_0==94))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:253:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(253, 4);
				PushFollow(Follow._ident_list_in_func_args_item1296);
				ident_list111=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list111.Tree);
				DebugLocation(253, 15);
				char_literal112=(IToken)Match(input,92,Follow._92_in_func_args_item1298);  
				stream_92.Add(char_literal112);

				DebugLocation(253, 19);
				PushFollow(Follow._type_name_in_func_args_item1300);
				type_name113=type_name();
				PopFollow();

				stream_type_name.Add(type_name113.Tree);
				DebugLocation(253, 29);
				// SugarCpp.g:253:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt50=3;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				switch (input.LA(1))
				{
				case 94:
				case 100:
					{
					alt50 = 1;
					}
					break;
				case 75:
					{
					alt50 = 2;
					}
					break;
				case 76:
				case 82:
					{
					alt50 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:253:31: ( '=' | ':=' ) expr
					{
					DebugLocation(253, 31);
					// SugarCpp.g:253:31: ( '=' | ':=' )
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==100))
					{
						alt48 = 1;
					}
					else if ((LA48_0==94))
					{
						alt48 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:253:32: '='
						{
						DebugLocation(253, 32);
						char_literal114=(IToken)Match(input,100,Follow._100_in_func_args_item1305);  
						stream_100.Add(char_literal114);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:253:38: ':='
						{
						DebugLocation(253, 38);
						string_literal115=(IToken)Match(input,94,Follow._94_in_func_args_item1309);  
						stream_94.Add(string_literal115);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(253, 44);
					PushFollow(Follow._expr_in_func_args_item1312);
					expr116=expr();
					PopFollow();

					stream_expr.Add(expr116.Tree);


					{
					// AST REWRITE
					// elements: expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 253:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(253, 53);
						// SugarCpp.g:253:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(253, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(253, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(253, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(253, 93);
						// SugarCpp.g:253:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(253, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:254:33: '(' ( expr_list )? ')'
					{
					DebugLocation(254, 33);
					char_literal117=(IToken)Match(input,75,Follow._75_in_func_args_item1360);  
					stream_75.Add(char_literal117);

					DebugLocation(254, 37);
					// SugarCpp.g:254:37: ( expr_list )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, false);
					int LA49_0 = input.LA(1);

					if ((LA49_0==IDENT||LA49_0==NUMBER||LA49_0==STRING||LA49_0==68||LA49_0==73||LA49_0==75||LA49_0==77||(LA49_0>=79 && LA49_0<=80)||(LA49_0>=83 && LA49_0<=84)||LA49_0==109||LA49_0==135||LA49_0==149))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:254:37: expr_list
						{
						DebugLocation(254, 37);
						PushFollow(Follow._expr_list_in_func_args_item1362);
						expr_list118=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list118.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(254, 48);
					char_literal119=(IToken)Match(input,76,Follow._76_in_func_args_item1365);  
					stream_76.Add(char_literal119);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 254:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(254, 56);
						// SugarCpp.g:254:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(254, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(254, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(254, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(254, 98);
						// SugarCpp.g:254:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(254, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:255:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 255:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(255, 18);
						// SugarCpp.g:255:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(255, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(255, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(255, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:257:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(257, 8);
				string_literal120=(IToken)Match(input,94,Follow._94_in_func_args_item1422); 
				string_literal120_tree = (CommonTree)adaptor.Create(string_literal120);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal120_tree, root_0);
				DebugLocation(257, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1426);
				modify_expr121=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr121.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 19);
			LeaveRule("func_args_item", 19);
			LeaveRule_func_args_item();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:260:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 20);
		TraceIn("func_def", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken NEWLINE130 = default(IToken);
		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree NEWLINE130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(260, 4);
		try
		{
			// SugarCpp.g:261:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:261:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(261, 4);
			// SugarCpp.g:261:4: ( attribute )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==110))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:4: attribute
				{
				DebugLocation(261, 4);
				PushFollow(Follow._attribute_in_func_def1437);
				attribute122=attribute();
				PopFollow();

				stream_attribute.Add(attribute122.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(261, 15);
			// SugarCpp.g:261:15: ( type_name )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:15: type_name
				{
				DebugLocation(261, 15);
				PushFollow(Follow._type_name_in_func_def1440);
				type_name123=type_name();
				PopFollow();

				stream_type_name.Add(type_name123.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(261, 26);
			// SugarCpp.g:261:26: ( '~' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==149))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:26: '~'
				{
				DebugLocation(261, 26);
				char_literal124=(IToken)Match(input,149,Follow._149_in_func_def1443);  
				stream_149.Add(char_literal124);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(261, 31);
			PushFollow(Follow._ident_in_func_def1446);
			ident125=ident();
			PopFollow();

			stream_ident.Add(ident125.Tree);
			DebugLocation(261, 37);
			// SugarCpp.g:261:37: ( generic_parameter )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==95))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:37: generic_parameter
				{
				DebugLocation(261, 37);
				PushFollow(Follow._generic_parameter_in_func_def1448);
				generic_parameter126=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(261, 56);
			char_literal127=(IToken)Match(input,75,Follow._75_in_func_def1451);  
			stream_75.Add(char_literal127);

			DebugLocation(261, 60);
			// SugarCpp.g:261:60: ( func_args )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==94))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:60: func_args
				{
				DebugLocation(261, 60);
				PushFollow(Follow._func_args_in_func_def1453);
				func_args128=func_args();
				PopFollow();

				stream_func_args.Add(func_args128.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(261, 71);
			char_literal129=(IToken)Match(input,76,Follow._76_in_func_def1456);  
			stream_76.Add(char_literal129);

			DebugLocation(261, 75);
			// SugarCpp.g:261:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==NEWLINE))
			{
				alt58 = 1;
			}
			else if ((LA58_0==100))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(261, 76);
				// SugarCpp.g:261:76: ( NEWLINE )+
				int cnt57=0;
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==NEWLINE))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:261:76: NEWLINE
						{
						DebugLocation(261, 76);
						NEWLINE130=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1459);  
						stream_NEWLINE.Add(NEWLINE130);


						}
						break;

					default:
						if (cnt57 >= 1)
							goto loop57;

						EarlyExitException eee57 = new EarlyExitException( 57, input );
						DebugRecognitionException(eee57);
						throw eee57;
					}
					cnt57++;
				}
				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(261, 85);
				PushFollow(Follow._stmt_block_in_func_def1462);
				stmt_block131=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block131.Tree);


				{
				// AST REWRITE
				// elements: attribute, type_name, stmt_block, generic_parameter, 149, ident, func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 261:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(261, 99);
					// SugarCpp.g:261:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(261, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(261, 110);
					// SugarCpp.g:261:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(261, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(261, 121);
					// SugarCpp.g:261:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(261, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(261, 132);
					// SugarCpp.g:261:132: ( '~' )?
					if (stream_149.HasNext)
					{
						DebugLocation(261, 132);
						adaptor.AddChild(root_1, stream_149.NextNode());

					}
					stream_149.Reset();
					DebugLocation(261, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(261, 143);
					// SugarCpp.g:261:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(261, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(261, 162);
					// SugarCpp.g:261:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(261, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(261, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:262:23: '=' expr
				{
				DebugLocation(262, 23);
				char_literal132=(IToken)Match(input,100,Follow._100_in_func_def1511);  
				stream_100.Add(char_literal132);

				DebugLocation(262, 27);
				PushFollow(Follow._expr_in_func_def1513);
				expr133=expr();
				PopFollow();

				stream_expr.Add(expr133.Tree);


				{
				// AST REWRITE
				// elements: generic_parameter, func_args, expr, 149, attribute, type_name, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 262:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(262, 36);
					// SugarCpp.g:262:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(262, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(262, 47);
					// SugarCpp.g:262:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(262, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(262, 58);
					// SugarCpp.g:262:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(262, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(262, 69);
					// SugarCpp.g:262:69: ( '~' )?
					if (stream_149.HasNext)
					{
						DebugLocation(262, 69);
						adaptor.AddChild(root_1, stream_149.NextNode());

					}
					stream_149.Reset();
					DebugLocation(262, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(262, 80);
					// SugarCpp.g:262:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(262, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(262, 99);
					// SugarCpp.g:262:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(262, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(262, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 20);
			LeaveRule("func_def", 20);
			LeaveRule_func_def();
		}
		DebugLocation(263, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:265:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 21);
		TraceIn("stmt_block", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT134 = default(IToken);
		IToken NEWLINE135 = default(IToken);
		IToken NEWLINE137 = default(IToken);
		IToken DEDENT138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT134_tree = default(CommonTree);
		CommonTree NEWLINE135_tree = default(CommonTree);
		CommonTree NEWLINE137_tree = default(CommonTree);
		CommonTree DEDENT138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(265, 1);
		try
		{
			// SugarCpp.g:266:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:266:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(266, 4);
			INDENT134=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1554);  
			stream_INDENT.Add(INDENT134);

			DebugLocation(266, 11);
			// SugarCpp.g:266:11: ( NEWLINE )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==NEWLINE))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:266:11: NEWLINE
					{
					DebugLocation(266, 11);
					NEWLINE135=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1556);  
					stream_NEWLINE.Add(NEWLINE135);


					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(266, 21);
			// SugarCpp.g:266:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==75||LA61_0==109||LA61_0==120||(LA61_0>=125 && LA61_0<=127)||(LA61_0>=132 && LA61_0<=133)||LA61_0==137||(LA61_0>=140 && LA61_0<=141)||(LA61_0>=143 && LA61_0<=145)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:266:22: stmt ( NEWLINE )+
					{
					DebugLocation(266, 22);
					PushFollow(Follow._stmt_in_stmt_block1561);
					stmt136=stmt();
					PopFollow();

					stream_stmt.Add(stmt136.Tree);
					DebugLocation(266, 27);
					// SugarCpp.g:266:27: ( NEWLINE )+
					int cnt60=0;
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==NEWLINE))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:266:27: NEWLINE
							{
							DebugLocation(266, 27);
							NEWLINE137=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1563);  
							stream_NEWLINE.Add(NEWLINE137);


							}
							break;

						default:
							if (cnt60 >= 1)
								goto loop60;

							EarlyExitException eee60 = new EarlyExitException( 60, input );
							DebugRecognitionException(eee60);
							throw eee60;
						}
						cnt60++;
					}
					loop60:
						;

					} finally { DebugExitSubRule(60); }


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(266, 38);
			DEDENT138=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1568);  
			stream_DEDENT.Add(DEDENT138);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 266:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(266, 48);
				// SugarCpp.g:266:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(266, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(266, 61);
				// SugarCpp.g:266:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(266, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 21);
			LeaveRule("stmt_block", 21);
			LeaveRule_stmt_block();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:269:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 22);
		TraceIn("stmt", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_linq144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(269, 1);
		try
		{
			// SugarCpp.g:270:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer )
			int alt62=7;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 75:
			case 109:
			case 137:
			case 141:
			case 143:
				{
				alt62 = 1;
				}
				break;
			case 127:
				{
				alt62 = 2;
				}
				break;
			case 125:
				{
				alt62 = 3;
				}
				break;
			case 133:
			case 145:
				{
				alt62 = 4;
				}
				break;
			case 140:
				{
				alt62 = 5;
				}
				break;
			case 126:
			case 132:
			case 144:
				{
				alt62 = 6;
				}
				break;
			case 120:
				{
				alt62 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(270, 4);
				PushFollow(Follow._stmt_expr_in_stmt1588);
				stmt_expr139=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr139.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:271:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(271, 4);
				PushFollow(Follow._stmt_if_in_stmt1593);
				stmt_if140=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if140.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:272:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(272, 4);
				PushFollow(Follow._stmt_for_in_stmt1598);
				stmt_for141=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for141.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:273:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(273, 4);
				PushFollow(Follow._stmt_while_in_stmt1603);
				stmt_while142=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while142.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:274:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(274, 4);
				PushFollow(Follow._stmt_try_in_stmt1608);
				stmt_try143=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try143.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:275:4: stmt_linq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(275, 4);
				PushFollow(Follow._stmt_linq_in_stmt1613);
				stmt_linq144=stmt_linq();
				PopFollow();

				adaptor.AddChild(root_0, stmt_linq144.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:276:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(276, 4);
				PushFollow(Follow._stmt_defer_in_stmt1618);
				stmt_defer145=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer145.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 22);
			LeaveRule("stmt", 22);
			LeaveRule_stmt();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:279:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )? ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 23);
		TraceIn("stmt_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal146 = default(IToken);
		IToken string_literal148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal146_tree = default(CommonTree);
		CommonTree string_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(279, 1);
		try
		{
			// SugarCpp.g:280:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:280:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )?
			{
			DebugLocation(280, 4);
			// SugarCpp.g:280:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:280:5: a= stmt_expr_item
			{
			DebugLocation(280, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1632);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 280:22: -> $a
			{
				DebugLocation(280, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(280, 29);
			// SugarCpp.g:280:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )?
			int alt63=3;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==127))
			{
				alt63 = 1;
			}
			else if ((LA63_0==145))
			{
				alt63 = 2;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:280:31: 'if' expr
				{
				DebugLocation(280, 31);
				string_literal146=(IToken)Match(input,127,Follow._127_in_stmt_expr1642);  
				stream_127.Add(string_literal146);

				DebugLocation(280, 36);
				PushFollow(Follow._expr_in_stmt_expr1644);
				expr147=expr();
				PopFollow();

				stream_expr.Add(expr147.Tree);


				{
				// AST REWRITE
				// elements: stmt_expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 280:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
				{
					DebugLocation(280, 44);
					// SugarCpp.g:280:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(280, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

					DebugLocation(280, 54);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(280, 59);
					// SugarCpp.g:280:59: ^( Stmt_Block $stmt_expr)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(280, 61);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(280, 73);
					adaptor.AddChild(root_2, stream_retval.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:281:13: 'while' expr
				{
				DebugLocation(281, 13);
				string_literal148=(IToken)Match(input,145,Follow._145_in_stmt_expr1673);  
				stream_145.Add(string_literal148);

				DebugLocation(281, 21);
				PushFollow(Follow._expr_in_stmt_expr1675);
				expr149=expr();
				PopFollow();

				stream_expr.Add(expr149.Tree);


				{
				// AST REWRITE
				// elements: stmt_expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
				{
					DebugLocation(281, 29);
					// SugarCpp.g:281:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(281, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

					DebugLocation(281, 42);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(281, 47);
					// SugarCpp.g:281:47: ^( Stmt_Block $stmt_expr)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(281, 49);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(281, 61);
					adaptor.AddChild(root_2, stream_retval.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 23);
			LeaveRule("stmt_expr", 23);
			LeaveRule_stmt_expr();
		}
		DebugLocation(283, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:285:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 24);
		TraceIn("stmt_expr_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(285, 1);
		try
		{
			// SugarCpp.g:286:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt64=5;
			try { DebugEnterDecision(64, false);
			try
			{
				alt64 = dfa64.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:286:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(286, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item1714);
				stmt_alloc150=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc150.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:287:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(287, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item1719);
				stmt_return151=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return151.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:288:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(288, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item1724);
				stmt_using152=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using152.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:289:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(289, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item1729);
				stmt_typedef153=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef153.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:290:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(290, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item1734);
				stmt_modify154=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify154.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 24);
			LeaveRule("stmt_expr_item", 24);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:293:1: stmt_defer : 'defer' stmt -> ^( Stmt_Defer stmt ) ;
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 25);
		TraceIn("stmt_defer", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal155_tree = default(CommonTree);
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(293, 1);
		try
		{
			// SugarCpp.g:294:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) )
			DebugEnterAlt(1);
			// SugarCpp.g:294:4: 'defer' stmt
			{
			DebugLocation(294, 4);
			string_literal155=(IToken)Match(input,120,Follow._120_in_stmt_defer1745);  
			stream_120.Add(string_literal155);

			DebugLocation(294, 12);
			PushFollow(Follow._stmt_in_stmt_defer1747);
			stmt156=stmt();
			PopFollow();

			stream_stmt.Add(stmt156.Tree);


			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 294:17: -> ^( Stmt_Defer stmt )
			{
				DebugLocation(294, 20);
				// SugarCpp.g:294:20: ^( Stmt_Defer stmt )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(294, 22);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

				DebugLocation(294, 33);
				adaptor.AddChild(root_1, stream_stmt.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 25);
			LeaveRule("stmt_defer", 25);
			LeaveRule_stmt_defer();
		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:297:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 26);
		TraceIn("stmt_typedef", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal157 = default(IToken);
		IToken char_literal159 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name160 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal157_tree = default(CommonTree);
		CommonTree char_literal159_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(297, 1);
		try
		{
			// SugarCpp.g:298:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:298:4: 'typedef' ident '=' type_name
			{
			DebugLocation(298, 4);
			string_literal157=(IToken)Match(input,141,Follow._141_in_stmt_typedef1766);  
			stream_141.Add(string_literal157);

			DebugLocation(298, 14);
			PushFollow(Follow._ident_in_stmt_typedef1768);
			ident158=ident();
			PopFollow();

			stream_ident.Add(ident158.Tree);
			DebugLocation(298, 20);
			char_literal159=(IToken)Match(input,100,Follow._100_in_stmt_typedef1770);  
			stream_100.Add(char_literal159);

			DebugLocation(298, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1772);
			type_name160=type_name();
			PopFollow();

			stream_type_name.Add(type_name160.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 298:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(298, 37);
				// SugarCpp.g:298:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(298, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(298, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(298, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 26);
			LeaveRule("stmt_typedef", 26);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:301:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 27);
		TraceIn("stmt_using_item", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal162 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident161 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal162_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(301, 36);
		try
		{
			// SugarCpp.g:301:16: ( ident | 'namespace' )
			int alt65=2;
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==IDENT))
			{
				alt65 = 1;
			}
			else if ((LA65_0==134))
			{
				alt65 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:301:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(301, 18);
				PushFollow(Follow._ident_in_stmt_using_item1791);
				ident161=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident161.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:301:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(301, 26);
				string_literal162=(IToken)Match(input,134,Follow._134_in_stmt_using_item1795); 
				string_literal162_tree = (CommonTree)adaptor.Create(string_literal162);
				adaptor.AddChild(root_0, string_literal162_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 27);
			LeaveRule("stmt_using_item", 27);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(301, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:302:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 28);
		TraceIn("stmt_using", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal163 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item164 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal163_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(302, 1);
		try
		{
			// SugarCpp.g:303:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:303:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(303, 4);
			string_literal163=(IToken)Match(input,143,Follow._143_in_stmt_using1803);  
			stream_143.Add(string_literal163);

			DebugLocation(303, 12);
			// SugarCpp.g:303:12: ( stmt_using_item )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==IDENT||LA66_0==134))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:303:12: stmt_using_item
					{
					DebugLocation(303, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1805);
					stmt_using_item164=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item164.Tree);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 303:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(303, 32);
				// SugarCpp.g:303:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(303, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(303, 45);
				// SugarCpp.g:303:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(303, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 28);
			LeaveRule("stmt_using", 28);
			LeaveRule_stmt_using();
		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:306:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 29);
		TraceIn("stmt_return", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal165 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr166 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal165_tree = default(CommonTree);
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(306, 1);
		try
		{
			// SugarCpp.g:307:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:307:4: 'return' ( expr )?
			{
			DebugLocation(307, 4);
			string_literal165=(IToken)Match(input,137,Follow._137_in_stmt_return1826);  
			stream_137.Add(string_literal165);

			DebugLocation(307, 13);
			// SugarCpp.g:307:13: ( expr )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==IDENT||LA67_0==NUMBER||LA67_0==STRING||LA67_0==68||LA67_0==73||LA67_0==75||LA67_0==77||(LA67_0>=79 && LA67_0<=80)||(LA67_0>=83 && LA67_0<=84)||LA67_0==109||LA67_0==135||LA67_0==149))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:307:13: expr
				{
				DebugLocation(307, 13);
				PushFollow(Follow._expr_in_stmt_return1828);
				expr166=expr();
				PopFollow();

				stream_expr.Add(expr166.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(67); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 307:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(307, 22);
				// SugarCpp.g:307:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(307, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(307, 36);
				// SugarCpp.g:307:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(307, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 29);
			LeaveRule("stmt_return", 29);
			LeaveRule_stmt_return();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:310:1: stmt_if : 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 30);
		TraceIn("stmt_if", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal167 = default(IToken);
		IToken NEWLINE169 = default(IToken);
		IToken NEWLINE171 = default(IToken);
		IToken string_literal172 = default(IToken);
		IToken string_literal174 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt175 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal167_tree = default(CommonTree);
		CommonTree NEWLINE169_tree = default(CommonTree);
		CommonTree NEWLINE171_tree = default(CommonTree);
		CommonTree string_literal172_tree = default(CommonTree);
		CommonTree string_literal174_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(310, 1);
		try
		{
			// SugarCpp.g:311:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
			{
			DebugLocation(311, 4);
			string_literal167=(IToken)Match(input,127,Follow._127_in_stmt_if1849);  
			stream_127.Add(string_literal167);

			DebugLocation(311, 9);
			PushFollow(Follow._expr_in_stmt_if1851);
			expr168=expr();
			PopFollow();

			stream_expr.Add(expr168.Tree);
			DebugLocation(311, 14);
			// SugarCpp.g:311:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==NEWLINE))
			{
				alt71 = 1;
			}
			else if ((LA71_0==138))
			{
				alt71 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )?
				{
				DebugLocation(311, 15);
				// SugarCpp.g:311:15: ( NEWLINE )+
				int cnt68=0;
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==NEWLINE))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:311:15: NEWLINE
						{
						DebugLocation(311, 15);
						NEWLINE169=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1854);  
						stream_NEWLINE.Add(NEWLINE169);


						}
						break;

					default:
						if (cnt68 >= 1)
							goto loop68;

						EarlyExitException eee68 = new EarlyExitException( 68, input );
						DebugRecognitionException(eee68);
						throw eee68;
					}
					cnt68++;
				}
				loop68:
					;

				} finally { DebugExitSubRule(68); }

				DebugLocation(311, 24);
				PushFollow(Follow._stmt_block_in_stmt_if1857);
				stmt_block170=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block170.Tree);
				DebugLocation(311, 35);
				// SugarCpp.g:311:35: ( ( NEWLINE )* 'else' stmt_block )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				try
				{
					alt70 = dfa70.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:311:36: ( NEWLINE )* 'else' stmt_block
					{
					DebugLocation(311, 36);
					// SugarCpp.g:311:36: ( NEWLINE )*
					try { DebugEnterSubRule(69);
					while (true)
					{
						int alt69=2;
						try { DebugEnterDecision(69, false);
						int LA69_0 = input.LA(1);

						if ((LA69_0==NEWLINE))
						{
							alt69 = 1;
						}


						} finally { DebugExitDecision(69); }
						switch ( alt69 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:311:36: NEWLINE
							{
							DebugLocation(311, 36);
							NEWLINE171=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1860);  
							stream_NEWLINE.Add(NEWLINE171);


							}
							break;

						default:
							goto loop69;
						}
					}

					loop69:
						;

					} finally { DebugExitSubRule(69); }

					DebugLocation(311, 45);
					string_literal172=(IToken)Match(input,123,Follow._123_in_stmt_if1863);  
					stream_123.Add(string_literal172);

					DebugLocation(311, 52);
					PushFollow(Follow._stmt_block_in_stmt_if1865);
					stmt_block173=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block173.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(70); }



				{
				// AST REWRITE
				// elements: expr, stmt_block, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:65: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
					DebugLocation(311, 68);
					// SugarCpp.g:311:68: ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 70);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

					DebugLocation(311, 78);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(311, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());
					DebugLocation(311, 94);
					// SugarCpp.g:311:94: ( stmt_block )?
					if (stream_stmt_block.HasNext)
					{
						DebugLocation(311, 94);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					}
					stream_stmt_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:16: 'then' stmt
				{
				DebugLocation(312, 16);
				string_literal174=(IToken)Match(input,138,Follow._138_in_stmt_if1897);  
				stream_138.Add(string_literal174);

				DebugLocation(312, 23);
				PushFollow(Follow._stmt_in_stmt_if1899);
				stmt175=stmt();
				PopFollow();

				stream_stmt.Add(stmt175.Tree);


				{
				// AST REWRITE
				// elements: stmt, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:28: -> ^( Stmt_If expr ^( Stmt_Block stmt ) )
				{
					DebugLocation(312, 31);
					// SugarCpp.g:312:31: ^( Stmt_If expr ^( Stmt_Block stmt ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(312, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

					DebugLocation(312, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(312, 46);
					// SugarCpp.g:312:46: ^( Stmt_Block stmt )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(312, 48);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(312, 59);
					adaptor.AddChild(root_2, stream_stmt.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 30);
			LeaveRule("stmt_if", 30);
			LeaveRule_stmt_if();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:316:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'loop' ( NEWLINE )+ stmt_block -> ^( Stmt_Loop stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 31);
		TraceIn("stmt_while", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal176 = default(IToken);
		IToken NEWLINE178 = default(IToken);
		IToken string_literal180 = default(IToken);
		IToken string_literal182 = default(IToken);
		IToken NEWLINE183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block184 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal176_tree = default(CommonTree);
		CommonTree NEWLINE178_tree = default(CommonTree);
		CommonTree string_literal180_tree = default(CommonTree);
		CommonTree string_literal182_tree = default(CommonTree);
		CommonTree NEWLINE183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(316, 1);
		try
		{
			// SugarCpp.g:317:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'loop' ( NEWLINE )+ stmt_block -> ^( Stmt_Loop stmt_block ) )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==145))
			{
				alt75 = 1;
			}
			else if ((LA75_0==133))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(317, 4);
				string_literal176=(IToken)Match(input,145,Follow._145_in_stmt_while1930);  
				stream_145.Add(string_literal176);

				DebugLocation(317, 12);
				PushFollow(Follow._expr_in_stmt_while1932);
				expr177=expr();
				PopFollow();

				stream_expr.Add(expr177.Tree);
				DebugLocation(317, 17);
				// SugarCpp.g:317:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==NEWLINE))
				{
					alt73 = 1;
				}
				else if ((LA73_0==121))
				{
					alt73 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:317:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(317, 19);
					// SugarCpp.g:317:19: ( NEWLINE )+
					int cnt72=0;
					try { DebugEnterSubRule(72);
					while (true)
					{
						int alt72=2;
						try { DebugEnterDecision(72, false);
						int LA72_0 = input.LA(1);

						if ((LA72_0==NEWLINE))
						{
							alt72 = 1;
						}


						} finally { DebugExitDecision(72); }
						switch (alt72)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:317:19: NEWLINE
							{
							DebugLocation(317, 19);
							NEWLINE178=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while1936);  
							stream_NEWLINE.Add(NEWLINE178);


							}
							break;

						default:
							if (cnt72 >= 1)
								goto loop72;

							EarlyExitException eee72 = new EarlyExitException( 72, input );
							DebugRecognitionException(eee72);
							throw eee72;
						}
						cnt72++;
					}
					loop72:
						;

					} finally { DebugExitSubRule(72); }

					DebugLocation(317, 28);
					PushFollow(Follow._stmt_block_in_stmt_while1939);
					stmt_block179=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block179.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 317:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(317, 42);
						// SugarCpp.g:317:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(317, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(317, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(317, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:318:13: 'do' stmt
					{
					DebugLocation(318, 13);
					string_literal180=(IToken)Match(input,121,Follow._121_in_stmt_while1963);  
					stream_121.Add(string_literal180);

					DebugLocation(318, 18);
					PushFollow(Follow._stmt_in_stmt_while1965);
					stmt181=stmt();
					PopFollow();

					stream_stmt.Add(stmt181.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 318:23: -> ^( Stmt_While expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(318, 26);
						// SugarCpp.g:318:26: ^( Stmt_While expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(318, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(318, 39);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(318, 44);
						// SugarCpp.g:318:44: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(318, 46);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(318, 57);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(73); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:320:4: 'loop' ( NEWLINE )+ stmt_block
				{
				DebugLocation(320, 4);
				string_literal182=(IToken)Match(input,133,Follow._133_in_stmt_while1993);  
				stream_133.Add(string_literal182);

				DebugLocation(320, 11);
				// SugarCpp.g:320:11: ( NEWLINE )+
				int cnt74=0;
				try { DebugEnterSubRule(74);
				while (true)
				{
					int alt74=2;
					try { DebugEnterDecision(74, false);
					int LA74_0 = input.LA(1);

					if ((LA74_0==NEWLINE))
					{
						alt74 = 1;
					}


					} finally { DebugExitDecision(74); }
					switch (alt74)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:320:11: NEWLINE
						{
						DebugLocation(320, 11);
						NEWLINE183=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while1995);  
						stream_NEWLINE.Add(NEWLINE183);


						}
						break;

					default:
						if (cnt74 >= 1)
							goto loop74;

						EarlyExitException eee74 = new EarlyExitException( 74, input );
						DebugRecognitionException(eee74);
						throw eee74;
					}
					cnt74++;
				}
				loop74:
					;

				} finally { DebugExitSubRule(74); }

				DebugLocation(320, 20);
				PushFollow(Follow._stmt_block_in_stmt_while1998);
				stmt_block184=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block184.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 320:31: -> ^( Stmt_Loop stmt_block )
				{
					DebugLocation(320, 34);
					// SugarCpp.g:320:34: ^( Stmt_Loop stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(320, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(320, 46);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 31);
			LeaveRule("stmt_while", 31);
			LeaveRule_stmt_while();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:323:1: stmt_for : 'for' ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 32);
		TraceIn("stmt_for", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal185 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken string_literal188 = default(IToken);
		IToken string_literal190 = default(IToken);
		IToken string_literal192 = default(IToken);
		IToken NEWLINE194 = default(IToken);
		IToken string_literal196 = default(IToken);
		IToken string_literal198 = default(IToken);
		IToken NEWLINE200 = default(IToken);
		IToken NEWLINE202 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident187 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr189 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr193 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block203 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal185_tree = default(CommonTree);
		CommonTree char_literal186_tree = default(CommonTree);
		CommonTree string_literal188_tree = default(CommonTree);
		CommonTree string_literal190_tree = default(CommonTree);
		CommonTree string_literal192_tree = default(CommonTree);
		CommonTree NEWLINE194_tree = default(CommonTree);
		CommonTree string_literal196_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		CommonTree NEWLINE200_tree = default(CommonTree);
		CommonTree NEWLINE202_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(323, 1);
		try
		{
			// SugarCpp.g:324:2: ( 'for' ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:324:4: 'for' ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) )
			{
			DebugLocation(324, 4);
			string_literal185=(IToken)Match(input,125,Follow._125_in_stmt_for2017);  
			stream_125.Add(string_literal185);

			DebugLocation(324, 10);
			// SugarCpp.g:324:10: ( '&' )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==73))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:324:10: '&'
				{
				DebugLocation(324, 10);
				char_literal186=(IToken)Match(input,73,Follow._73_in_stmt_for2019);  
				stream_73.Add(char_literal186);


				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(324, 15);
			PushFollow(Follow._ident_in_stmt_for2022);
			ident187=ident();
			PopFollow();

			stream_ident.Add(ident187.Tree);
			DebugLocation(324, 21);
			string_literal188=(IToken)Match(input,96,Follow._96_in_stmt_for2024);  
			stream_96.Add(string_literal188);

			DebugLocation(324, 26);
			PushFollow(Follow._expr_in_stmt_for2026);
			expr189=expr();
			PopFollow();

			stream_expr.Add(expr189.Tree);
			DebugLocation(324, 31);
			// SugarCpp.g:324:31: ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) )
			int alt82=3;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			switch (input.LA(1))
			{
			case 139:
				{
				alt82 = 1;
				}
				break;
			case 122:
				{
				alt82 = 2;
				}
				break;
			case NEWLINE:
				{
				alt82 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:324:33: 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(324, 33);
				string_literal190=(IToken)Match(input,139,Follow._139_in_stmt_for2030);  
				stream_139.Add(string_literal190);

				DebugLocation(324, 38);
				PushFollow(Follow._expr_in_stmt_for2032);
				expr191=expr();
				PopFollow();

				stream_expr.Add(expr191.Tree);
				DebugLocation(324, 43);
				// SugarCpp.g:324:43: ( 'by' expr )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==116))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:324:44: 'by' expr
					{
					DebugLocation(324, 44);
					string_literal192=(IToken)Match(input,116,Follow._116_in_stmt_for2035);  
					stream_116.Add(string_literal192);

					DebugLocation(324, 49);
					PushFollow(Follow._expr_in_stmt_for2037);
					expr193=expr();
					PopFollow();

					stream_expr.Add(expr193.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(324, 56);
				// SugarCpp.g:324:56: ( NEWLINE )+
				int cnt78=0;
				try { DebugEnterSubRule(78);
				while (true)
				{
					int alt78=2;
					try { DebugEnterDecision(78, false);
					int LA78_0 = input.LA(1);

					if ((LA78_0==NEWLINE))
					{
						alt78 = 1;
					}


					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:324:56: NEWLINE
						{
						DebugLocation(324, 56);
						NEWLINE194=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2041);  
						stream_NEWLINE.Add(NEWLINE194);


						}
						break;

					default:
						if (cnt78 >= 1)
							goto loop78;

						EarlyExitException eee78 = new EarlyExitException( 78, input );
						DebugRecognitionException(eee78);
						throw eee78;
					}
					cnt78++;
				}
				loop78:
					;

				} finally { DebugExitSubRule(78); }

				DebugLocation(324, 65);
				PushFollow(Follow._stmt_block_in_stmt_for2044);
				stmt_block195=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block195.Tree);


				{
				// AST REWRITE
				// elements: expr, expr, ident, expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 324:76: -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block )
				{
					DebugLocation(324, 79);
					// SugarCpp.g:324:79: ^( Stmt_For_To ident expr expr ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(324, 81);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For_To, "Stmt_For_To"), root_1);

					DebugLocation(324, 93);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(324, 99);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(324, 104);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(324, 109);
					// SugarCpp.g:324:109: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(324, 109);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(324, 115);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:325:33: 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(325, 33);
				string_literal196=(IToken)Match(input,122,Follow._122_in_stmt_for2095);  
				stream_122.Add(string_literal196);

				DebugLocation(325, 42);
				PushFollow(Follow._expr_in_stmt_for2097);
				expr197=expr();
				PopFollow();

				stream_expr.Add(expr197.Tree);
				DebugLocation(325, 47);
				// SugarCpp.g:325:47: ( 'by' expr )?
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==116))
				{
					alt79 = 1;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:325:48: 'by' expr
					{
					DebugLocation(325, 48);
					string_literal198=(IToken)Match(input,116,Follow._116_in_stmt_for2100);  
					stream_116.Add(string_literal198);

					DebugLocation(325, 53);
					PushFollow(Follow._expr_in_stmt_for2102);
					expr199=expr();
					PopFollow();

					stream_expr.Add(expr199.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(79); }

				DebugLocation(325, 60);
				// SugarCpp.g:325:60: ( NEWLINE )+
				int cnt80=0;
				try { DebugEnterSubRule(80);
				while (true)
				{
					int alt80=2;
					try { DebugEnterDecision(80, false);
					int LA80_0 = input.LA(1);

					if ((LA80_0==NEWLINE))
					{
						alt80 = 1;
					}


					} finally { DebugExitDecision(80); }
					switch (alt80)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:325:60: NEWLINE
						{
						DebugLocation(325, 60);
						NEWLINE200=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2106);  
						stream_NEWLINE.Add(NEWLINE200);


						}
						break;

					default:
						if (cnt80 >= 1)
							goto loop80;

						EarlyExitException eee80 = new EarlyExitException( 80, input );
						DebugRecognitionException(eee80);
						throw eee80;
					}
					cnt80++;
				}
				loop80:
					;

				} finally { DebugExitSubRule(80); }

				DebugLocation(325, 69);
				PushFollow(Follow._stmt_block_in_stmt_for2109);
				stmt_block201=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block201.Tree);


				{
				// AST REWRITE
				// elements: expr, expr, expr, ident, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 325:80: -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block )
				{
					DebugLocation(325, 83);
					// SugarCpp.g:325:83: ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(325, 85);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For_Down_To, "Stmt_For_Down_To"), root_1);

					DebugLocation(325, 102);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(325, 108);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(325, 113);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(325, 118);
					// SugarCpp.g:325:118: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(325, 118);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(325, 124);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:326:33: ( NEWLINE )+ stmt_block
				{
				DebugLocation(326, 33);
				// SugarCpp.g:326:33: ( NEWLINE )+
				int cnt81=0;
				try { DebugEnterSubRule(81);
				while (true)
				{
					int alt81=2;
					try { DebugEnterDecision(81, false);
					int LA81_0 = input.LA(1);

					if ((LA81_0==NEWLINE))
					{
						alt81 = 1;
					}


					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:326:33: NEWLINE
						{
						DebugLocation(326, 33);
						NEWLINE202=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2160);  
						stream_NEWLINE.Add(NEWLINE202);


						}
						break;

					default:
						if (cnt81 >= 1)
							goto loop81;

						EarlyExitException eee81 = new EarlyExitException( 81, input );
						DebugRecognitionException(eee81);
						throw eee81;
					}
					cnt81++;
				}
				loop81:
					;

				} finally { DebugExitSubRule(81); }

				DebugLocation(326, 42);
				PushFollow(Follow._stmt_block_in_stmt_for2163);
				stmt_block203=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block203.Tree);


				{
				// AST REWRITE
				// elements: 73, stmt_block, expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 326:53: -> ^( Stmt_ForEach '&' ident expr stmt_block )
				{
					DebugLocation(326, 56);
					// SugarCpp.g:326:56: ^( Stmt_ForEach '&' ident expr stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(326, 58);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

					DebugLocation(326, 71);
					adaptor.AddChild(root_1, stream_73.NextNode());
					DebugLocation(326, 75);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(326, 81);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(326, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 32);
			LeaveRule("stmt_for", 32);
			LeaveRule_stmt_for();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:330:1: stmt_try : 'try' stmt_block 'catch' expr stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 33);
		TraceIn("stmt_try", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal204 = default(IToken);
		IToken string_literal206 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block208 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal204_tree = default(CommonTree);
		CommonTree string_literal206_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(330, 1);
		try
		{
			// SugarCpp.g:331:2: ( 'try' stmt_block 'catch' expr stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:331:4: 'try' stmt_block 'catch' expr stmt_block
			{
			DebugLocation(331, 4);
			string_literal204=(IToken)Match(input,140,Follow._140_in_stmt_try2202);  
			stream_140.Add(string_literal204);

			DebugLocation(331, 10);
			PushFollow(Follow._stmt_block_in_stmt_try2204);
			stmt_block205=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block205.Tree);
			DebugLocation(331, 21);
			string_literal206=(IToken)Match(input,117,Follow._117_in_stmt_try2206);  
			stream_117.Add(string_literal206);

			DebugLocation(331, 29);
			PushFollow(Follow._expr_in_stmt_try2208);
			expr207=expr();
			PopFollow();

			stream_expr.Add(expr207.Tree);
			DebugLocation(331, 34);
			PushFollow(Follow._stmt_block_in_stmt_try2210);
			stmt_block208=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block208.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 331:45: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(331, 48);
				// SugarCpp.g:331:48: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(331, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(331, 59);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(331, 70);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(331, 75);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 33);
			LeaveRule("stmt_try", 33);
			LeaveRule_stmt_try();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarCpp.g:334:1: linq_item : ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) );
	[GrammarRule("linq_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 34);
		TraceIn("linq_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal209 = default(IToken);
		IToken string_literal211 = default(IToken);
		IToken string_literal213 = default(IToken);
		IToken char_literal215 = default(IToken);
		IToken string_literal217 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr218 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal209_tree = default(CommonTree);
		CommonTree string_literal211_tree = default(CommonTree);
		CommonTree string_literal213_tree = default(CommonTree);
		CommonTree char_literal215_tree = default(CommonTree);
		CommonTree string_literal217_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(334, 1);
		try
		{
			// SugarCpp.g:335:2: ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) )
			int alt83=3;
			try { DebugEnterDecision(83, false);
			switch (input.LA(1))
			{
			case 126:
				{
				alt83 = 1;
				}
				break;
			case 132:
				{
				alt83 = 2;
				}
				break;
			case 144:
				{
				alt83 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:335:4: 'from' expr 'in' expr
				{
				DebugLocation(335, 4);
				string_literal209=(IToken)Match(input,126,Follow._126_in_linq_item2233);  
				stream_126.Add(string_literal209);

				DebugLocation(335, 11);
				PushFollow(Follow._expr_in_linq_item2235);
				expr210=expr();
				PopFollow();

				stream_expr.Add(expr210.Tree);
				DebugLocation(335, 16);
				string_literal211=(IToken)Match(input,129,Follow._129_in_linq_item2237);  
				stream_129.Add(string_literal211);

				DebugLocation(335, 21);
				PushFollow(Follow._expr_in_linq_item2239);
				expr212=expr();
				PopFollow();

				stream_expr.Add(expr212.Tree);


				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 335:26: -> ^( Linq_From expr expr )
				{
					DebugLocation(335, 29);
					// SugarCpp.g:335:29: ^( Linq_From expr expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(335, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_From, "Linq_From"), root_1);

					DebugLocation(335, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(335, 46);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:336:4: 'let' ident '=' expr
				{
				DebugLocation(336, 4);
				string_literal213=(IToken)Match(input,132,Follow._132_in_linq_item2254);  
				stream_132.Add(string_literal213);

				DebugLocation(336, 10);
				PushFollow(Follow._ident_in_linq_item2256);
				ident214=ident();
				PopFollow();

				stream_ident.Add(ident214.Tree);
				DebugLocation(336, 16);
				char_literal215=(IToken)Match(input,100,Follow._100_in_linq_item2258);  
				stream_100.Add(char_literal215);

				DebugLocation(336, 20);
				PushFollow(Follow._expr_in_linq_item2260);
				expr216=expr();
				PopFollow();

				stream_expr.Add(expr216.Tree);


				{
				// AST REWRITE
				// elements: ident, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 336:25: -> ^( Linq_Let ident expr )
				{
					DebugLocation(336, 28);
					// SugarCpp.g:336:28: ^( Linq_Let ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(336, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Let, "Linq_Let"), root_1);

					DebugLocation(336, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(336, 45);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:337:4: 'where' expr
				{
				DebugLocation(337, 4);
				string_literal217=(IToken)Match(input,144,Follow._144_in_linq_item2275);  
				stream_144.Add(string_literal217);

				DebugLocation(337, 12);
				PushFollow(Follow._expr_in_linq_item2277);
				expr218=expr();
				PopFollow();

				stream_expr.Add(expr218.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 337:17: -> ^( Linq_Where expr )
				{
					DebugLocation(337, 20);
					// SugarCpp.g:337:20: ^( Linq_Where expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(337, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Where, "Linq_Where"), root_1);

					DebugLocation(337, 33);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_item", 34);
			LeaveRule("linq_item", 34);
			LeaveRule_linq_item();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return retval;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarCpp.g:340:1: linq_prefix : ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 35);
		TraceIn("linq_prefix", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE221 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE221_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_linq_item=new RewriteRuleSubtreeStream(adaptor,"rule linq_item");
		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(340, 1);
		try
		{
			// SugarCpp.g:341:2: ( ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:341:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			{
			DebugLocation(341, 4);
			// SugarCpp.g:341:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			int cnt86=0;
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==126||LA86_0==132||LA86_0==144))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:341:5: linq_item ( linq_item )* ( NEWLINE )+
					{
					DebugLocation(341, 5);
					PushFollow(Follow._linq_item_in_linq_prefix2297);
					linq_item219=linq_item();
					PopFollow();

					stream_linq_item.Add(linq_item219.Tree);
					DebugLocation(341, 15);
					// SugarCpp.g:341:15: ( linq_item )*
					try { DebugEnterSubRule(84);
					while (true)
					{
						int alt84=2;
						try { DebugEnterDecision(84, false);
						int LA84_0 = input.LA(1);

						if ((LA84_0==126||LA84_0==132||LA84_0==144))
						{
							alt84 = 1;
						}


						} finally { DebugExitDecision(84); }
						switch ( alt84 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:341:15: linq_item
							{
							DebugLocation(341, 15);
							PushFollow(Follow._linq_item_in_linq_prefix2299);
							linq_item220=linq_item();
							PopFollow();

							stream_linq_item.Add(linq_item220.Tree);

							}
							break;

						default:
							goto loop84;
						}
					}

					loop84:
						;

					} finally { DebugExitSubRule(84); }

					DebugLocation(341, 26);
					// SugarCpp.g:341:26: ( NEWLINE )+
					int cnt85=0;
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==NEWLINE))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch (alt85)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:341:26: NEWLINE
							{
							DebugLocation(341, 26);
							NEWLINE221=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix2302);  
							stream_NEWLINE.Add(NEWLINE221);


							}
							break;

						default:
							if (cnt85 >= 1)
								goto loop85;

							EarlyExitException eee85 = new EarlyExitException( 85, input );
							DebugRecognitionException(eee85);
							throw eee85;
						}
						cnt85++;
					}
					loop85:
						;

					} finally { DebugExitSubRule(85); }


					}
					break;

				default:
					if (cnt86 >= 1)
						goto loop86;

					EarlyExitException eee86 = new EarlyExitException( 86, input );
					DebugRecognitionException(eee86);
					throw eee86;
				}
				cnt86++;
			}
			loop86:
				;

			} finally { DebugExitSubRule(86); }



			{
			// AST REWRITE
			// elements: linq_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 341:37: -> ^( Linq_Prefix ( linq_item )+ )
			{
				DebugLocation(341, 40);
				// SugarCpp.g:341:40: ^( Linq_Prefix ( linq_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(341, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Prefix, "Linq_Prefix"), root_1);

				DebugLocation(341, 54);
				if (!(stream_linq_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_linq_item.HasNext )
				{
					DebugLocation(341, 54);
					adaptor.AddChild(root_1, stream_linq_item.NextTree());

				}
				stream_linq_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_prefix", 35);
			LeaveRule("linq_prefix", 35);
			LeaveRule_linq_prefix();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return retval;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarCpp.g:344:1: stmt_linq : linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 36);
		TraceIn("stmt_linq", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> linq_prefix222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block223 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_linq_prefix=new RewriteRuleSubtreeStream(adaptor,"rule linq_prefix");
		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(344, 1);
		try
		{
			// SugarCpp.g:345:2: ( linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:345:4: linq_prefix stmt_block
			{
			DebugLocation(345, 4);
			PushFollow(Follow._linq_prefix_in_stmt_linq2325);
			linq_prefix222=linq_prefix();
			PopFollow();

			stream_linq_prefix.Add(linq_prefix222.Tree);
			DebugLocation(345, 16);
			PushFollow(Follow._stmt_block_in_stmt_linq2327);
			stmt_block223=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block223.Tree);


			{
			// AST REWRITE
			// elements: linq_prefix, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 345:27: -> ^( Stmt_Linq linq_prefix stmt_block )
			{
				DebugLocation(345, 30);
				// SugarCpp.g:345:30: ^( Stmt_Linq linq_prefix stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(345, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Linq, "Stmt_Linq"), root_1);

				DebugLocation(345, 42);
				adaptor.AddChild(root_1, stream_linq_prefix.NextTree());
				DebugLocation(345, 54);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_linq", 36);
			LeaveRule("stmt_linq", 36);
			LeaveRule_stmt_linq();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return retval;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:348:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 37);
		TraceIn("ident_list", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal225 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident226 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal225_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(348, 1);
		try
		{
			// SugarCpp.g:349:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:349:4: ident ( ',' ident )*
			{
			DebugLocation(349, 4);
			PushFollow(Follow._ident_in_ident_list2348);
			ident224=ident();
			PopFollow();

			stream_ident.Add(ident224.Tree);
			DebugLocation(349, 10);
			// SugarCpp.g:349:10: ( ',' ident )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==82))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:349:11: ',' ident
					{
					DebugLocation(349, 11);
					char_literal225=(IToken)Match(input,82,Follow._82_in_ident_list2351);  
					stream_82.Add(char_literal225);

					DebugLocation(349, 15);
					PushFollow(Follow._ident_in_ident_list2353);
					ident226=ident();
					PopFollow();

					stream_ident.Add(ident226.Tree);

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 349:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(349, 26);
				// SugarCpp.g:349:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(349, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(349, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(349, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 37);
			LeaveRule("ident_list", 37);
			LeaveRule_ident_list();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:352:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 38);
		TraceIn("stmt_alloc", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal228 = default(IToken);
		IToken char_literal230 = default(IToken);
		IToken string_literal231 = default(IToken);
		IToken char_literal233 = default(IToken);
		IToken char_literal235 = default(IToken);
		IToken string_literal236 = default(IToken);
		IToken char_literal238 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal228_tree = default(CommonTree);
		CommonTree char_literal230_tree = default(CommonTree);
		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree char_literal233_tree = default(CommonTree);
		CommonTree char_literal235_tree = default(CommonTree);
		CommonTree string_literal236_tree = default(CommonTree);
		CommonTree char_literal238_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(352, 1);
		try
		{
			// SugarCpp.g:353:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:353:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) )
			{
			DebugLocation(353, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2375);
			ident_list227=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list227.Tree);
			DebugLocation(353, 15);
			// SugarCpp.g:353:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) )
			int alt92=2;
			try { DebugEnterSubRule(92);
			try { DebugEnterDecision(92, false);
			int LA92_0 = input.LA(1);

			if ((LA92_0==92))
			{
				alt92 = 1;
			}
			else if ((LA92_0==94))
			{
				alt92 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:353:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(353, 17);
				char_literal228=(IToken)Match(input,92,Follow._92_in_stmt_alloc2379);  
				stream_92.Add(char_literal228);

				DebugLocation(353, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2381);
				type_name229=type_name();
				PopFollow();

				stream_type_name.Add(type_name229.Tree);
				DebugLocation(353, 31);
				// SugarCpp.g:353:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt90=3;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				switch (input.LA(1))
				{
				case 94:
				case 100:
					{
					alt90 = 1;
					}
					break;
				case 75:
					{
					alt90 = 2;
					}
					break;
				case NEWLINE:
				case 127:
				case 145:
					{
					alt90 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:353:33: ( '=' | ':=' ) expr
					{
					DebugLocation(353, 33);
					// SugarCpp.g:353:33: ( '=' | ':=' )
					int alt88=2;
					try { DebugEnterSubRule(88);
					try { DebugEnterDecision(88, false);
					int LA88_0 = input.LA(1);

					if ((LA88_0==100))
					{
						alt88 = 1;
					}
					else if ((LA88_0==94))
					{
						alt88 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:353:34: '='
						{
						DebugLocation(353, 34);
						char_literal230=(IToken)Match(input,100,Follow._100_in_stmt_alloc2386);  
						stream_100.Add(char_literal230);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:353:40: ':='
						{
						DebugLocation(353, 40);
						string_literal231=(IToken)Match(input,94,Follow._94_in_stmt_alloc2390);  
						stream_94.Add(string_literal231);


						}
						break;

					}
					} finally { DebugExitSubRule(88); }

					DebugLocation(353, 46);
					PushFollow(Follow._expr_in_stmt_alloc2393);
					expr232=expr();
					PopFollow();

					stream_expr.Add(expr232.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 353:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(353, 55);
						// SugarCpp.g:353:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(353, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(353, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(353, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(353, 95);
						// SugarCpp.g:353:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(353, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:354:33: '(' ( expr_list )? ')'
					{
					DebugLocation(354, 33);
					char_literal233=(IToken)Match(input,75,Follow._75_in_stmt_alloc2441);  
					stream_75.Add(char_literal233);

					DebugLocation(354, 37);
					// SugarCpp.g:354:37: ( expr_list )?
					int alt89=2;
					try { DebugEnterSubRule(89);
					try { DebugEnterDecision(89, false);
					int LA89_0 = input.LA(1);

					if ((LA89_0==IDENT||LA89_0==NUMBER||LA89_0==STRING||LA89_0==68||LA89_0==73||LA89_0==75||LA89_0==77||(LA89_0>=79 && LA89_0<=80)||(LA89_0>=83 && LA89_0<=84)||LA89_0==109||LA89_0==135||LA89_0==149))
					{
						alt89 = 1;
					}
					} finally { DebugExitDecision(89); }
					switch (alt89)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:354:37: expr_list
						{
						DebugLocation(354, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc2443);
						expr_list234=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list234.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(89); }

					DebugLocation(354, 48);
					char_literal235=(IToken)Match(input,76,Follow._76_in_stmt_alloc2446);  
					stream_76.Add(char_literal235);



					{
					// AST REWRITE
					// elements: expr_list, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 354:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(354, 56);
						// SugarCpp.g:354:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(354, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(354, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(354, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(354, 98);
						// SugarCpp.g:354:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(354, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:355:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 355:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(355, 18);
						// SugarCpp.g:355:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(355, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(355, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(355, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(90); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:357:8: ':=' ( expr ( ',' modify_expr )* )
				{
				DebugLocation(357, 8);
				string_literal236=(IToken)Match(input,94,Follow._94_in_stmt_alloc2507);  
				stream_94.Add(string_literal236);

				DebugLocation(357, 14);
				// SugarCpp.g:357:14: ( expr ( ',' modify_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:357:15: expr ( ',' modify_expr )*
				{
				DebugLocation(357, 15);
				PushFollow(Follow._expr_in_stmt_alloc2511);
				expr237=expr();
				PopFollow();

				stream_expr.Add(expr237.Tree);
				DebugLocation(357, 20);
				// SugarCpp.g:357:20: ( ',' modify_expr )*
				try { DebugEnterSubRule(91);
				while (true)
				{
					int alt91=2;
					try { DebugEnterDecision(91, false);
					int LA91_0 = input.LA(1);

					if ((LA91_0==82))
					{
						alt91 = 1;
					}


					} finally { DebugExitDecision(91); }
					switch ( alt91 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:357:21: ',' modify_expr
						{
						DebugLocation(357, 21);
						char_literal238=(IToken)Match(input,82,Follow._82_in_stmt_alloc2514);  
						stream_82.Add(char_literal238);

						DebugLocation(357, 25);
						PushFollow(Follow._modify_expr_in_stmt_alloc2516);
						modify_expr239=modify_expr();
						PopFollow();

						stream_modify_expr.Add(modify_expr239.Tree);

						}
						break;

					default:
						goto loop91;
					}
				}

				loop91:
					;

				} finally { DebugExitSubRule(91); }


				}



				{
				// AST REWRITE
				// elements: 94, expr, ident_list, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 357:40: -> ^( ':=' ident_list expr ( modify_expr )* )
				{
					DebugLocation(357, 43);
					// SugarCpp.g:357:43: ^( ':=' ident_list expr ( modify_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(357, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_94.NextNode(), root_1);

					DebugLocation(357, 50);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(357, 61);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(357, 66);
					// SugarCpp.g:357:66: ( modify_expr )*
					while ( stream_modify_expr.HasNext )
					{
						DebugLocation(357, 66);
						adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					}
					stream_modify_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 38);
			LeaveRule("stmt_alloc", 38);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:360:1: stmt_modify : lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 39);
		TraceIn("stmt_modify", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal243 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue240 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op241 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal243_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(360, 1);
		try
		{
			// SugarCpp.g:361:2: ( lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:361:4: lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(361, 4);
			PushFollow(Follow._lvalue_in_stmt_modify2544);
			lvalue240=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue240.Tree);
			DebugLocation(361, 11);
			// SugarCpp.g:361:11: ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )?
			int alt93=3;
			try { DebugEnterSubRule(93);
			try { DebugEnterDecision(93, false);
			int LA93_0 = input.LA(1);

			if ((LA93_0==71||LA93_0==74||LA93_0==78||LA93_0==81||LA93_0==85||LA93_0==91||LA93_0==98||LA93_0==100||LA93_0==106||LA93_0==113||LA93_0==147))
			{
				alt93 = 1;
			}
			else if ((LA93_0==108))
			{
				alt93 = 2;
			}
			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:361:13: modify_expr_op ^ modify_expr
				{
				DebugLocation(361, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify2548);
				modify_expr_op241=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op241.Tree, root_0);
				DebugLocation(361, 29);
				PushFollow(Follow._modify_expr_in_stmt_modify2551);
				modify_expr242=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr242.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:362:13: '?=' ^ modify_expr
				{
				DebugLocation(362, 17);
				string_literal243=(IToken)Match(input,108,Follow._108_in_stmt_modify2565); 
				string_literal243_tree = (CommonTree)adaptor.Create(string_literal243);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal243_tree, root_0);
				DebugLocation(362, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify2568);
				modify_expr244=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr244.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 39);
			LeaveRule("stmt_modify", 39);
			LeaveRule_stmt_modify();
		}
		DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:365:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 40);
		TraceIn("expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr245 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(365, 1);
		try
		{
			// SugarCpp.g:366:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:366:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(366, 4);
			PushFollow(Follow._lambda_expr_in_expr2581);
			lambda_expr245=lambda_expr();
			PopFollow();

			adaptor.AddChild(root_0, lambda_expr245.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 40);
			LeaveRule("expr", 40);
			LeaveRule_expr();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:369:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 41);
		TraceIn("lambda_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal246 = default(IToken);
		IToken char_literal248 = default(IToken);
		IToken string_literal249 = default(IToken);
		IToken string_literal251 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args247 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr250 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr253 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal246_tree = default(CommonTree);
		CommonTree char_literal248_tree = default(CommonTree);
		CommonTree string_literal249_tree = default(CommonTree);
		CommonTree string_literal251_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(369, 1);
		try
		{
			// SugarCpp.g:370:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt96=2;
			try { DebugEnterDecision(96, false);
			try
			{
				alt96 = dfa96.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(370, 4);
				char_literal246=(IToken)Match(input,75,Follow._75_in_lambda_expr2592);  
				stream_75.Add(char_literal246);

				DebugLocation(370, 8);
				// SugarCpp.g:370:8: ( func_args )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==IDENT||LA94_0==94))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:370:8: func_args
					{
					DebugLocation(370, 8);
					PushFollow(Follow._func_args_in_lambda_expr2594);
					func_args247=func_args();
					PopFollow();

					stream_func_args.Add(func_args247.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(370, 19);
				char_literal248=(IToken)Match(input,76,Follow._76_in_lambda_expr2597);  
				stream_76.Add(char_literal248);

				DebugLocation(370, 23);
				// SugarCpp.g:370:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_0 = input.LA(1);

				if ((LA95_0==86))
				{
					alt95 = 1;
				}
				else if ((LA95_0==102))
				{
					alt95 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:370:25: '->' expr
					{
					DebugLocation(370, 25);
					string_literal249=(IToken)Match(input,86,Follow._86_in_lambda_expr2601);  
					stream_86.Add(string_literal249);

					DebugLocation(370, 30);
					PushFollow(Follow._expr_in_lambda_expr2603);
					expr250=expr();
					PopFollow();

					stream_expr.Add(expr250.Tree);


					{
					// AST REWRITE
					// elements: func_args, 86, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 370:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(370, 39);
						// SugarCpp.g:370:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(370, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(370, 53);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(370, 58);
						// SugarCpp.g:370:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(370, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(370, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:371:25: '=>' expr
					{
					DebugLocation(371, 25);
					string_literal251=(IToken)Match(input,102,Follow._102_in_lambda_expr2643);  
					stream_102.Add(string_literal251);

					DebugLocation(371, 30);
					PushFollow(Follow._expr_in_lambda_expr2645);
					expr252=expr();
					PopFollow();

					stream_expr.Add(expr252.Tree);


					{
					// AST REWRITE
					// elements: 102, expr, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 371:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(371, 39);
						// SugarCpp.g:371:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(371, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(371, 53);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(371, 58);
						// SugarCpp.g:371:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(371, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(371, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(95); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:372:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(372, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr2665);
				modify_expr253=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr253.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 41);
			LeaveRule("lambda_expr", 41);
			LeaveRule_lambda_expr();
		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:375:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 42);
		TraceIn("modify_expr_op", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set254 = default(IToken);

		CommonTree set254_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(375, 91);
		try
		{
			// SugarCpp.g:375:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(375, 15);

			set254=(IToken)input.LT(1);
			if (input.LA(1)==71||input.LA(1)==74||input.LA(1)==78||input.LA(1)==81||input.LA(1)==85||input.LA(1)==91||input.LA(1)==98||input.LA(1)==100||input.LA(1)==106||input.LA(1)==113||input.LA(1)==147)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set254));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 42);
			LeaveRule("modify_expr_op", 42);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(375, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:376:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 43);
		TraceIn("modify_expr", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set256 = default(IToken);
		IToken char_literal258 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr257 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr259 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set256_tree = default(CommonTree);
		CommonTree char_literal258_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(376, 1);
		try
		{
			// SugarCpp.g:377:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:377:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(377, 4);
			PushFollow(Follow._cond_expr_in_modify_expr2722);
			cond_expr255=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr255.Tree);
			DebugLocation(377, 14);
			// SugarCpp.g:377:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt98=3;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			int LA98_0 = input.LA(1);

			if ((LA98_0==71||LA98_0==74||LA98_0==78||LA98_0==81||LA98_0==85||LA98_0==91||LA98_0==94||LA98_0==98||LA98_0==106||LA98_0==113||LA98_0==147))
			{
				alt98 = 1;
			}
			else if ((LA98_0==100))
			{
				alt98 = 2;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:377:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(377, 94);

				set256=(IToken)input.LT(1);
				set256=(IToken)input.LT(1);
				if (input.LA(1)==71||input.LA(1)==74||input.LA(1)==78||input.LA(1)==81||input.LA(1)==85||input.LA(1)==91||input.LA(1)==94||input.LA(1)==98||input.LA(1)==106||input.LA(1)==113||input.LA(1)==147)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set256), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(377, 96);
				PushFollow(Follow._cond_expr_in_modify_expr2771);
				cond_expr257=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr257.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:378:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(378, 7);
				// SugarCpp.g:378:7: ( '=' ^ cond_expr )+
				int cnt97=0;
				try { DebugEnterSubRule(97);
				while (true)
				{
					int alt97=2;
					try { DebugEnterDecision(97, false);
					int LA97_0 = input.LA(1);

					if ((LA97_0==100))
					{
						alt97 = 1;
					}


					} finally { DebugExitDecision(97); }
					switch (alt97)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:378:8: '=' ^ cond_expr
						{
						DebugLocation(378, 11);
						char_literal258=(IToken)Match(input,100,Follow._100_in_modify_expr2780); 
						char_literal258_tree = (CommonTree)adaptor.Create(char_literal258);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal258_tree, root_0);
						DebugLocation(378, 13);
						PushFollow(Follow._cond_expr_in_modify_expr2783);
						cond_expr259=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr259.Tree);

						}
						break;

					default:
						if (cnt97 >= 1)
							goto loop97;

						EarlyExitException eee97 = new EarlyExitException( 97, input );
						DebugRecognitionException(eee97);
						throw eee97;
					}
					cnt97++;
				}
				loop97:
					;

				} finally { DebugExitSubRule(97); }


				}
				break;

			}
			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 43);
			LeaveRule("modify_expr", 43);
			LeaveRule_modify_expr();
		}
		DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:381:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 44);
		TraceIn("cond_expr_item", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr260 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(381, 24);
		try
		{
			// SugarCpp.g:381:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:381:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(381, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item2796);
			or_expr260=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr260.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 44);
			LeaveRule("cond_expr_item", 44);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(381, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:382:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 45);
		TraceIn("cond_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal261 = default(IToken);
		IToken char_literal262 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal261_tree = default(CommonTree);
		CommonTree char_literal262_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(382, 1);
		try
		{
			// SugarCpp.g:383:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:383:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(383, 4);
			// SugarCpp.g:383:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:383:5: a= or_expr
			{
			DebugLocation(383, 6);
			PushFollow(Follow._or_expr_in_cond_expr2808);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 383:15: -> $a
			{
				DebugLocation(383, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(383, 22);
			// SugarCpp.g:383:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt101=2;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, false);
			int LA101_0 = input.LA(1);

			if ((LA101_0==107))
			{
				alt101 = 1;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:383:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(383, 23);
				char_literal261=(IToken)Match(input,107,Follow._107_in_cond_expr2817);  
				stream_107.Add(char_literal261);

				DebugLocation(383, 27);
				// SugarCpp.g:383:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==IDENT||LA100_0==NUMBER||LA100_0==STRING||LA100_0==68||LA100_0==73||LA100_0==75||LA100_0==77||(LA100_0>=79 && LA100_0<=80)||(LA100_0>=83 && LA100_0<=84)||LA100_0==109||LA100_0==135||LA100_0==149))
				{
					alt100 = 1;
				}
				else if ((LA100_0==INDENT||LA100_0==NEWLINE||LA100_0==71||LA100_0==74||LA100_0==76||LA100_0==78||(LA100_0>=81 && LA100_0<=82)||LA100_0==85||LA100_0==91||LA100_0==94||LA100_0==98||LA100_0==100||LA100_0==106||LA100_0==111||LA100_0==113||LA100_0==116||(LA100_0>=121 && LA100_0<=122)||(LA100_0>=126 && LA100_0<=127)||LA100_0==129||LA100_0==132||(LA100_0>=138 && LA100_0<=139)||(LA100_0>=144 && LA100_0<=145)||LA100_0==147))
				{
					alt100 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:383:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(383, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr2823);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(383, 46);
					// SugarCpp.g:383:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt99=2;
					try { DebugEnterSubRule(99);
					try { DebugEnterDecision(99, false);
					int LA99_0 = input.LA(1);

					if ((LA99_0==92))
					{
						alt99 = 1;
					}
					else if ((LA99_0==INDENT||LA99_0==NEWLINE||LA99_0==71||LA99_0==74||LA99_0==76||LA99_0==78||(LA99_0>=81 && LA99_0<=82)||LA99_0==85||LA99_0==91||LA99_0==94||LA99_0==98||LA99_0==100||LA99_0==106||LA99_0==111||LA99_0==113||LA99_0==116||(LA99_0>=121 && LA99_0<=122)||(LA99_0>=126 && LA99_0<=127)||LA99_0==129||LA99_0==132||(LA99_0>=138 && LA99_0<=139)||(LA99_0>=144 && LA99_0<=145)||LA99_0==147))
					{
						alt99 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(99); }
					switch (alt99)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:383:48: ':' b= cond_expr_item
						{
						DebugLocation(383, 48);
						char_literal262=(IToken)Match(input,92,Follow._92_in_cond_expr2827);  
						stream_92.Add(char_literal262);

						DebugLocation(383, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr2831);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: a, b, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 383:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(383, 72);
							// SugarCpp.g:383:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(383, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(383, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(383, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(383, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:384:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 384:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(384, 20);
							// SugarCpp.g:384:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(384, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(384, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(384, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(99); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:386:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 386:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(386, 14);
						// SugarCpp.g:386:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(386, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(386, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(100); }


				}
				break;

			}
			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 45);
			LeaveRule("cond_expr", 45);
			LeaveRule_cond_expr();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:390:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 46);
		TraceIn("or_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal263 = default(IToken);
		IToken string_literal264 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal263_tree = default(CommonTree);
		CommonTree string_literal264_tree = default(CommonTree);
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(390, 1);
		try
		{
			// SugarCpp.g:391:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:391:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )*
			{
			DebugLocation(391, 4);
			// SugarCpp.g:391:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:391:5: a= and_expr
			{
			DebugLocation(391, 6);
			PushFollow(Follow._and_expr_in_or_expr2934);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 391:16: -> $a
			{
				DebugLocation(391, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(391, 23);
			// SugarCpp.g:391:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=3;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==148))
				{
					alt102 = 1;
				}
				else if ((LA102_0==136))
				{
					alt102 = 2;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:391:25: '||' b= and_expr
					{
					DebugLocation(391, 25);
					string_literal263=(IToken)Match(input,148,Follow._148_in_or_expr2944);  
					stream_148.Add(string_literal263);

					DebugLocation(391, 31);
					PushFollow(Follow._and_expr_in_or_expr2948);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, 148
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 391:41: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(391, 44);
						// SugarCpp.g:391:44: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(391, 55);
						adaptor.AddChild(root_1, stream_148.NextNode());
						DebugLocation(391, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(391, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:392:25: 'or' b= and_expr
					{
					DebugLocation(392, 25);
					string_literal264=(IToken)Match(input,136,Follow._136_in_or_expr2988);  
					stream_136.Add(string_literal264);

					DebugLocation(392, 31);
					PushFollow(Follow._and_expr_in_or_expr2992);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 136, or_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 392:41: -> ^( 'or' $or_expr $b)
					{
						DebugLocation(392, 44);
						// SugarCpp.g:392:44: ^( 'or' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_136.NextNode(), root_1);

						DebugLocation(392, 52);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(392, 61);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 46);
			LeaveRule("or_expr", 46);
			LeaveRule_or_expr();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:395:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 47);
		TraceIn("and_expr", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal265 = default(IToken);
		IToken string_literal266 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(395, 1);
		try
		{
			// SugarCpp.g:396:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:396:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )*
			{
			DebugLocation(396, 4);
			// SugarCpp.g:396:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:396:5: a= bit_or
			{
			DebugLocation(396, 6);
			PushFollow(Follow._bit_or_in_and_expr3020);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 396:14: -> $a
			{
				DebugLocation(396, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(396, 21);
			// SugarCpp.g:396:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=3;
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==72))
				{
					alt103 = 1;
				}
				else if ((LA103_0==115))
				{
					alt103 = 2;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:396:23: '&&' b= bit_or
					{
					DebugLocation(396, 23);
					string_literal265=(IToken)Match(input,72,Follow._72_in_and_expr3030);  
					stream_72.Add(string_literal265);

					DebugLocation(396, 29);
					PushFollow(Follow._bit_or_in_and_expr3034);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 72, and_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 396:37: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(396, 40);
						// SugarCpp.g:396:40: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(396, 51);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(396, 57);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(396, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:397:11: 'and' b= bit_or
					{
					DebugLocation(397, 11);
					string_literal266=(IToken)Match(input,115,Follow._115_in_and_expr3060);  
					stream_115.Add(string_literal266);

					DebugLocation(397, 18);
					PushFollow(Follow._bit_or_in_and_expr3064);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 115, and_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 397:26: -> ^( 'and' $and_expr $b)
					{
						DebugLocation(397, 29);
						// SugarCpp.g:397:29: ^( 'and' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_115.NextNode(), root_1);

						DebugLocation(397, 38);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(397, 48);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 47);
			LeaveRule("and_expr", 47);
			LeaveRule_and_expr();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:400:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 48);
		TraceIn("bit_or", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal267 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal267_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(400, 1);
		try
		{
			// SugarCpp.g:401:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:401:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(401, 4);
			// SugarCpp.g:401:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:401:5: a= bit_xor
			{
			DebugLocation(401, 6);
			PushFollow(Follow._bit_xor_in_bit_or3092);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 401:15: -> $a
			{
				DebugLocation(401, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(401, 22);
			// SugarCpp.g:401:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==146))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:401:23: '|' b= bit_xor
					{
					DebugLocation(401, 23);
					char_literal267=(IToken)Match(input,146,Follow._146_in_bit_or3101);  
					stream_146.Add(char_literal267);

					DebugLocation(401, 28);
					PushFollow(Follow._bit_xor_in_bit_or3105);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_or, 146, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 401:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(401, 40);
						// SugarCpp.g:401:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(401, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(401, 51);
						adaptor.AddChild(root_1, stream_146.NextNode());
						DebugLocation(401, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(401, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 48);
			LeaveRule("bit_or", 48);
			LeaveRule_bit_or();
		}
		DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:404:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 49);
		TraceIn("bit_xor", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal268 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal268_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(404, 1);
		try
		{
			// SugarCpp.g:405:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:405:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(405, 4);
			// SugarCpp.g:405:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:405:5: a= bit_and
			{
			DebugLocation(405, 6);
			PushFollow(Follow._bit_and_in_bit_xor3135);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 405:15: -> $a
			{
				DebugLocation(405, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(405, 22);
			// SugarCpp.g:405:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==112))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:405:23: '^' b= bit_and
					{
					DebugLocation(405, 23);
					char_literal268=(IToken)Match(input,112,Follow._112_in_bit_xor3144);  
					stream_112.Add(char_literal268);

					DebugLocation(405, 28);
					PushFollow(Follow._bit_and_in_bit_xor3148);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_xor, 112
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 405:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(405, 40);
						// SugarCpp.g:405:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(405, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(405, 51);
						adaptor.AddChild(root_1, stream_112.NextNode());
						DebugLocation(405, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(405, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 49);
			LeaveRule("bit_xor", 49);
			LeaveRule_bit_xor();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:408:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 50);
		TraceIn("bit_and", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal269 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal269_tree = default(CommonTree);
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(408, 1);
		try
		{
			// SugarCpp.g:409:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:409:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(409, 4);
			// SugarCpp.g:409:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:409:5: a= cmp_equ_expr
			{
			DebugLocation(409, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and3178);
			a=cmp_equ_expr();
			PopFollow();

			stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 409:20: -> $a
			{
				DebugLocation(409, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(409, 27);
			// SugarCpp.g:409:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==73))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:409:28: '&' b= cmp_equ_expr
					{
					DebugLocation(409, 28);
					char_literal269=(IToken)Match(input,73,Follow._73_in_bit_and3187);  
					stream_73.Add(char_literal269);

					DebugLocation(409, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and3191);
					b=cmp_equ_expr();
					PopFollow();

					stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 73, bit_and
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 409:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(409, 50);
						// SugarCpp.g:409:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(409, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(409, 61);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(409, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(409, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 50);
			LeaveRule("bit_and", 50);
			LeaveRule_bit_and();
		}
		DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:412:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 51);
		TraceIn("cmp_equ_expr_op", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set270 = default(IToken);

		CommonTree set270_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(412, 29);
		try
		{
			// SugarCpp.g:412:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(412, 16);

			set270=(IToken)input.LT(1);
			if (input.LA(1)==69||input.LA(1)==101)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set270));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 51);
			LeaveRule("cmp_equ_expr_op", 51);
			LeaveRule_cmp_equ_expr_op();
		}
		DebugLocation(412, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:413:1: cmp_equ_expr : (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 52);
		TraceIn("cmp_equ_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal271 = default(IToken);
		IToken string_literal272 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal271_tree = default(CommonTree);
		CommonTree string_literal272_tree = default(CommonTree);
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(413, 1);
		try
		{
			// SugarCpp.g:414:2: ( (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:414:4: (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )?
			{
			DebugLocation(414, 4);
			// SugarCpp.g:414:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:414:5: a= cmp_expr
			{
			DebugLocation(414, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr3232);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 414:16: -> $a
			{
				DebugLocation(414, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(414, 23);
			// SugarCpp.g:414:23: (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )?
			int alt107=4;
			try { DebugEnterSubRule(107);
			try { DebugEnterDecision(107, false);
			switch (input.LA(1))
			{
			case 69:
			case 101:
				{
				alt107 = 1;
				}
				break;
			case 130:
				{
				alt107 = 2;
				}
				break;
			case 131:
				{
				alt107 = 3;
				}
				break;
			}

			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:414:25: op= cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(414, 27);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr3244);
				op=cmp_equ_expr_op();
				PopFollow();

				stream_cmp_equ_expr_op.Add(op.Tree);
				DebugLocation(414, 45);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr3248);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_equ_expr, op
				// token labels: 
				// rule labels: retval, op, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 414:55: -> ^( Expr_Bin $op $cmp_equ_expr $b)
				{
					DebugLocation(414, 58);
					// SugarCpp.g:414:58: ^( Expr_Bin $op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(414, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(414, 70);
					adaptor.AddChild(root_1, stream_op.NextTree());
					DebugLocation(414, 74);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(414, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:415:25: 'is' b= cmp_expr
				{
				DebugLocation(415, 25);
				string_literal271=(IToken)Match(input,130,Follow._130_in_cmp_equ_expr3289);  
				stream_130.Add(string_literal271);

				DebugLocation(415, 31);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr3293);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: 130, cmp_equ_expr, b
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 415:41: -> ^( 'is' $cmp_equ_expr $b)
				{
					DebugLocation(415, 44);
					// SugarCpp.g:415:44: ^( 'is' $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(415, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

					DebugLocation(415, 52);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(415, 66);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:416:25: 'isnt' b= cmp_expr
				{
				DebugLocation(416, 25);
				string_literal272=(IToken)Match(input,131,Follow._131_in_cmp_equ_expr3332);  
				stream_131.Add(string_literal272);

				DebugLocation(416, 33);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr3336);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_equ_expr, 131, b
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 416:43: -> ^( 'isnt' $cmp_equ_expr $b)
				{
					DebugLocation(416, 46);
					// SugarCpp.g:416:46: ^( 'isnt' $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(416, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_131.NextNode(), root_1);

					DebugLocation(416, 56);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(416, 70);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(107); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 52);
			LeaveRule("cmp_equ_expr", 52);
			LeaveRule_cmp_equ_expr();
		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:420:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 53);
		TraceIn("cmp_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal273 = default(IToken);
		IToken char_literal275 = default(IToken);
		IToken char_literal276 = default(IToken);
		IToken char_literal278 = default(IToken);
		IToken string_literal279 = default(IToken);
		IToken char_literal280 = default(IToken);
		IToken string_literal281 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list277 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal273_tree = default(CommonTree);
		CommonTree char_literal275_tree = default(CommonTree);
		CommonTree char_literal276_tree = default(CommonTree);
		CommonTree char_literal278_tree = default(CommonTree);
		CommonTree string_literal279_tree = default(CommonTree);
		CommonTree char_literal280_tree = default(CommonTree);
		CommonTree string_literal281_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(420, 1);
		try
		{
			// SugarCpp.g:421:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:421:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			{
			DebugLocation(421, 4);
			// SugarCpp.g:421:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:421:5: a= infix_expr
			{
			DebugLocation(421, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr3374);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 421:18: -> $a
			{
				DebugLocation(421, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(421, 25);
			// SugarCpp.g:421:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=5;
				try { DebugEnterDecision(111, false);
				switch (input.LA(1))
				{
				case 95:
					{
					alt111 = 1;
					}
					break;
				case 99:
					{
					alt111 = 2;
					}
					break;
				case 103:
					{
					alt111 = 3;
					}
					break;
				case 104:
					{
					alt111 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:421:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					{
					DebugLocation(421, 27);
					char_literal273=(IToken)Match(input,95,Follow._95_in_cmp_expr3384);  
					stream_95.Add(char_literal273);

					DebugLocation(421, 32);
					PushFollow(Follow._infix_expr_in_cmp_expr3388);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);
					DebugLocation(421, 44);
					// SugarCpp.g:421:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					int alt110=2;
					try { DebugEnterSubRule(110);
					try { DebugEnterDecision(110, false);
					switch (input.LA(1))
					{
					case IDENT:
						{
						alt110 = 1;
						}
						break;
					case 103:
						{
						int LA110_2 = input.LA(2);

						if (((b.Tree.Token.Type == IDENT)))
						{
							alt110 = 1;
						}
						else if ((true))
						{
							alt110 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 110, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case INDENT:
					case NEWLINE:
					case 69:
					case 71:
					case 72:
					case 73:
					case 74:
					case 76:
					case 78:
					case 81:
					case 82:
					case 85:
					case 91:
					case 92:
					case 94:
					case 95:
					case 98:
					case 99:
					case 100:
					case 101:
					case 104:
					case 106:
					case 107:
					case 111:
					case 112:
					case 113:
					case 115:
					case 116:
					case 121:
					case 122:
					case 126:
					case 127:
					case 129:
					case 130:
					case 131:
					case 132:
					case 136:
					case 138:
					case 139:
					case 144:
					case 145:
					case 146:
					case 147:
					case 148:
						{
						alt110 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(110); }
					switch (alt110)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:421:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
						{
						DebugLocation(421, 46);
						if (!((b.Tree.Token.Type == IDENT)))
						{
							throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
						}
						DebugLocation(421, 76);
						// SugarCpp.g:421:76: ( ident )*
						try { DebugEnterSubRule(108);
						while (true)
						{
							int alt108=2;
							try { DebugEnterDecision(108, false);
							int LA108_0 = input.LA(1);

							if ((LA108_0==IDENT))
							{
								alt108 = 1;
							}


							} finally { DebugExitDecision(108); }
							switch ( alt108 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:421:76: ident
								{
								DebugLocation(421, 76);
								PushFollow(Follow._ident_in_cmp_expr3394);
								ident274=ident();
								PopFollow();

								stream_ident.Add(ident274.Tree);

								}
								break;

							default:
								goto loop108;
							}
						}

						loop108:
							;

						} finally { DebugExitSubRule(108); }

						DebugLocation(421, 83);
						char_literal275=(IToken)Match(input,103,Follow._103_in_cmp_expr3397);  
						stream_103.Add(char_literal275);

						DebugLocation(421, 87);
						char_literal276=(IToken)Match(input,75,Follow._75_in_cmp_expr3399);  
						stream_75.Add(char_literal276);

						DebugLocation(421, 91);
						// SugarCpp.g:421:91: ( expr_list )?
						int alt109=2;
						try { DebugEnterSubRule(109);
						try { DebugEnterDecision(109, false);
						int LA109_0 = input.LA(1);

						if ((LA109_0==IDENT||LA109_0==NUMBER||LA109_0==STRING||LA109_0==68||LA109_0==73||LA109_0==75||LA109_0==77||(LA109_0>=79 && LA109_0<=80)||(LA109_0>=83 && LA109_0<=84)||LA109_0==109||LA109_0==135||LA109_0==149))
						{
							alt109 = 1;
						}
						} finally { DebugExitDecision(109); }
						switch (alt109)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:421:91: expr_list
							{
							DebugLocation(421, 91);
							PushFollow(Follow._expr_list_in_cmp_expr3401);
							expr_list277=expr_list();
							PopFollow();

							stream_expr_list.Add(expr_list277.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(109); }

						DebugLocation(421, 102);
						char_literal278=(IToken)Match(input,76,Follow._76_in_cmp_expr3404);  
						stream_76.Add(char_literal278);



						{
						// AST REWRITE
						// elements: expr_list, b, cmp_expr, ident
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 421:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
							DebugLocation(421, 109);
							// SugarCpp.g:421:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(421, 111);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(421, 122);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(421, 131);
							// SugarCpp.g:421:131: ^( Generic_Patameters $b ( ident )* )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(421, 133);
							root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

							DebugLocation(421, 153);
							adaptor.AddChild(root_2, stream_b.NextTree());
							DebugLocation(421, 155);
							// SugarCpp.g:421:155: ( ident )*
							while ( stream_ident.HasNext )
							{
								DebugLocation(421, 155);
								adaptor.AddChild(root_2, stream_ident.NextTree());

							}
							stream_ident.Reset();

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(421, 163);
							// SugarCpp.g:421:163: ( expr_list )?
							if (stream_expr_list.HasNext)
							{
								DebugLocation(421, 163);
								adaptor.AddChild(root_1, stream_expr_list.NextTree());

							}
							stream_expr_list.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:422:46: 
						{

						{
						// AST REWRITE
						// elements: cmp_expr, b, 95
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 422:46: -> ^( Expr_Bin '<' $cmp_expr $b)
						{
							DebugLocation(422, 49);
							// SugarCpp.g:422:49: ^( Expr_Bin '<' $cmp_expr $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(422, 51);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

							DebugLocation(422, 60);
							adaptor.AddChild(root_1, stream_95.NextNode());
							DebugLocation(422, 65);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(422, 75);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(110); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:423:27: '<=' b= infix_expr
					{
					DebugLocation(423, 27);
					string_literal279=(IToken)Match(input,99,Follow._99_in_cmp_expr3514);  
					stream_99.Add(string_literal279);

					DebugLocation(423, 33);
					PushFollow(Follow._infix_expr_in_cmp_expr3518);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, 99, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 423:45: -> ^( Expr_Bin '<=' $cmp_expr $b)
					{
						DebugLocation(423, 48);
						// SugarCpp.g:423:48: ^( Expr_Bin '<=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(423, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(423, 59);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(423, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(423, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:424:12: '>' b= infix_expr
					{
					DebugLocation(424, 12);
					char_literal280=(IToken)Match(input,103,Follow._103_in_cmp_expr3545);  
					stream_103.Add(char_literal280);

					DebugLocation(424, 17);
					PushFollow(Follow._infix_expr_in_cmp_expr3549);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 103, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 424:29: -> ^( Expr_Bin '>' $cmp_expr $b)
					{
						DebugLocation(424, 32);
						// SugarCpp.g:424:32: ^( Expr_Bin '>' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(424, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(424, 43);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(424, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(424, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:425:12: '>=' b= infix_expr
					{
					DebugLocation(425, 12);
					string_literal281=(IToken)Match(input,104,Follow._104_in_cmp_expr3576);  
					stream_104.Add(string_literal281);

					DebugLocation(425, 18);
					PushFollow(Follow._infix_expr_in_cmp_expr3580);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr, 104
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 425:30: -> ^( Expr_Bin '>=' $cmp_expr $b)
					{
						DebugLocation(425, 33);
						// SugarCpp.g:425:33: ^( Expr_Bin '>=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(425, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(425, 44);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(425, 50);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(425, 60);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 53);
			LeaveRule("cmp_expr", 53);
			LeaveRule_cmp_expr();
		}
		DebugLocation(426, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:428:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 54);
		TraceIn("infix_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func282 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(428, 1);
		try
		{
			// SugarCpp.g:429:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:429:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(429, 4);
			// SugarCpp.g:429:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:429:5: a= shift_expr
			{
			DebugLocation(429, 6);
			PushFollow(Follow._shift_expr_in_infix_expr3610);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 429:18: -> $a
			{
				DebugLocation(429, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(429, 25);
			// SugarCpp.g:429:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==114))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:429:27: infix_func b= shift_expr
					{
					DebugLocation(429, 27);
					PushFollow(Follow._infix_func_in_infix_expr3620);
					infix_func282=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func282.Tree);
					DebugLocation(429, 39);
					PushFollow(Follow._shift_expr_in_infix_expr3624);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, infix_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 429:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(429, 55);
						// SugarCpp.g:429:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(429, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(429, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(429, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(429, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 54);
			LeaveRule("infix_expr", 54);
			LeaveRule_infix_expr();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:432:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 55);
		TraceIn("shift_expr_op", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set283 = default(IToken);

		CommonTree set283_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(432, 27);
		try
		{
			// SugarCpp.g:432:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(432, 14);

			set283=(IToken)input.LT(1);
			if (input.LA(1)==97||input.LA(1)==105)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set283));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 55);
			LeaveRule("shift_expr_op", 55);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(432, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:433:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 56);
		TraceIn("shift_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op284 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(433, 1);
		try
		{
			// SugarCpp.g:434:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:434:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(434, 4);
			// SugarCpp.g:434:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:434:5: a= add_expr
			{
			DebugLocation(434, 6);
			PushFollow(Follow._add_expr_in_shift_expr3667);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 434:16: -> $a
			{
				DebugLocation(434, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(434, 23);
			// SugarCpp.g:434:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_0 = input.LA(1);

				if ((LA113_0==97||LA113_0==105))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:24: shift_expr_op b= add_expr
					{
					DebugLocation(434, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr3676);
					shift_expr_op284=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op284.Tree);
					DebugLocation(434, 39);
					PushFollow(Follow._add_expr_in_shift_expr3680);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, b, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 434:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(434, 52);
						// SugarCpp.g:434:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(434, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(434, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(434, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(434, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 56);
			LeaveRule("shift_expr", 56);
			LeaveRule_shift_expr();
		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:437:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 57);
		TraceIn("add_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal285 = default(IToken);
		IToken char_literal286 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal285_tree = default(CommonTree);
		CommonTree char_literal286_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(437, 1);
		try
		{
			// SugarCpp.g:438:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:438:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(438, 4);
			// SugarCpp.g:438:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:438:5: a= mul_expr
			{
			DebugLocation(438, 6);
			PushFollow(Follow._mul_expr_in_add_expr3710);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 438:16: -> $a
			{
				DebugLocation(438, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(438, 23);
			// SugarCpp.g:438:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=3;
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==79))
				{
					alt114 = 1;
				}
				else if ((LA114_0==83))
				{
					alt114 = 2;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:438:25: '+' b= mul_expr
					{
					DebugLocation(438, 25);
					char_literal285=(IToken)Match(input,79,Follow._79_in_add_expr3720);  
					stream_79.Add(char_literal285);

					DebugLocation(438, 30);
					PushFollow(Follow._mul_expr_in_add_expr3724);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 79, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 438:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(438, 43);
						// SugarCpp.g:438:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(438, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(438, 54);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(438, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(438, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:439:10: '-' b= mul_expr
					{
					DebugLocation(439, 10);
					char_literal286=(IToken)Match(input,83,Follow._83_in_add_expr3749);  
					stream_83.Add(char_literal286);

					DebugLocation(439, 15);
					PushFollow(Follow._mul_expr_in_add_expr3753);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, 83, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 439:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(439, 28);
						// SugarCpp.g:439:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(439, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(439, 39);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(439, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(439, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 57);
			LeaveRule("add_expr", 57);
			LeaveRule_add_expr();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:443:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 58);
		TraceIn("mul_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal287 = default(IToken);
		IToken char_literal288 = default(IToken);
		IToken char_literal289 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal287_tree = default(CommonTree);
		CommonTree char_literal288_tree = default(CommonTree);
		CommonTree char_literal289_tree = default(CommonTree);
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(443, 1);
		try
		{
			// SugarCpp.g:444:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:444:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(444, 4);
			// SugarCpp.g:444:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:444:5: a= selector_expr
			{
			DebugLocation(444, 6);
			PushFollow(Follow._selector_expr_in_mul_expr3791);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 444:21: -> $a
			{
				DebugLocation(444, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(444, 28);
			// SugarCpp.g:444:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=4;
				try { DebugEnterDecision(115, false);
				switch (input.LA(1))
				{
				case 77:
					{
					alt115 = 1;
					}
					break;
				case 90:
					{
					alt115 = 2;
					}
					break;
				case 70:
					{
					alt115 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:444:30: '*' b= selector_expr
					{
					DebugLocation(444, 30);
					char_literal287=(IToken)Match(input,77,Follow._77_in_mul_expr3801);  
					stream_77.Add(char_literal287);

					DebugLocation(444, 35);
					PushFollow(Follow._selector_expr_in_mul_expr3805);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 77, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 444:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(444, 53);
						// SugarCpp.g:444:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(444, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(444, 64);
						adaptor.AddChild(root_1, stream_77.NextNode());
						DebugLocation(444, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(444, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:445:15: '/' b= selector_expr
					{
					DebugLocation(445, 15);
					char_literal288=(IToken)Match(input,90,Follow._90_in_mul_expr3835);  
					stream_90.Add(char_literal288);

					DebugLocation(445, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3839);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 90, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 445:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(445, 38);
						// SugarCpp.g:445:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(445, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(445, 49);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(445, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(445, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:446:15: '%' b= selector_expr
					{
					DebugLocation(446, 15);
					char_literal289=(IToken)Match(input,70,Follow._70_in_mul_expr3869);  
					stream_70.Add(char_literal289);

					DebugLocation(446, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3873);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 70
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 446:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(446, 38);
						// SugarCpp.g:446:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(446, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(446, 49);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(446, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(446, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 58);
			LeaveRule("mul_expr", 58);
			LeaveRule_mul_expr();
		}
		DebugLocation(448, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:450:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 59);
		TraceIn("selector_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal290 = default(IToken);
		IToken string_literal291 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree string_literal291_tree = default(CommonTree);
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(450, 1);
		try
		{
			// SugarCpp.g:451:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:451:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(451, 4);
			// SugarCpp.g:451:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:451:5: a= prefix_expr
			{
			DebugLocation(451, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr3916);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 451:19: -> $a
			{
				DebugLocation(451, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(451, 26);
			// SugarCpp.g:451:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=3;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==87))
				{
					alt116 = 1;
				}
				else if ((LA116_0==89))
				{
					alt116 = 2;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:451:28: '->*' b= ident
					{
					DebugLocation(451, 28);
					string_literal290=(IToken)Match(input,87,Follow._87_in_selector_expr3926);  
					stream_87.Add(string_literal290);

					DebugLocation(451, 35);
					PushFollow(Follow._ident_in_selector_expr3930);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 87, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 451:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(451, 45);
						// SugarCpp.g:451:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(451, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(451, 59);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(451, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(451, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:452:13: '.*' b= ident
					{
					DebugLocation(452, 13);
					string_literal291=(IToken)Match(input,89,Follow._89_in_selector_expr3958);  
					stream_89.Add(string_literal291);

					DebugLocation(452, 20);
					PushFollow(Follow._ident_in_selector_expr3963);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 89, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 452:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(452, 30);
						// SugarCpp.g:452:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(452, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(452, 44);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(452, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(452, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 59);
			LeaveRule("selector_expr", 59);
			LeaveRule_selector_expr();
		}
		DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:456:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 60);
		TraceIn("prefix_expr_op", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set292 = default(IToken);

		CommonTree set292_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(456, 63);
		try
		{
			// SugarCpp.g:456:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(456, 15);

			set292=(IToken)input.LT(1);
			if (input.LA(1)==68||input.LA(1)==73||input.LA(1)==77||(input.LA(1)>=79 && input.LA(1)<=80)||(input.LA(1)>=83 && input.LA(1)<=84)||input.LA(1)==149)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set292));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 60);
			LeaveRule("prefix_expr_op", 60);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(456, 63);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:457:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 61);
		TraceIn("prefix_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal295 = default(IToken);
		IToken char_literal297 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken char_literal300 = default(IToken);
		IToken char_literal302 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr294 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name296 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr303 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal295_tree = default(CommonTree);
		CommonTree char_literal297_tree = default(CommonTree);
		CommonTree char_literal299_tree = default(CommonTree);
		CommonTree char_literal300_tree = default(CommonTree);
		CommonTree char_literal302_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(457, 1);
		try
		{
			// SugarCpp.g:458:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt119=3;
			try { DebugEnterDecision(119, false);
			switch (input.LA(1))
			{
			case 68:
			case 73:
			case 77:
			case 79:
			case 80:
			case 83:
			case 84:
			case 149:
				{
				alt119 = 1;
				}
				break;
			case 135:
				{
				alt119 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 75:
			case 109:
				{
				alt119 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:458:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(458, 4);
				// SugarCpp.g:458:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:458:5: prefix_expr_op prefix_expr
				{
				DebugLocation(458, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr4037);
				prefix_expr_op293=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op293.Tree);
				DebugLocation(458, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr4039);
				prefix_expr294=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr294.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 458:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(458, 36);
					// SugarCpp.g:458:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(458, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(458, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(458, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:459:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(459, 4);
				string_literal295=(IToken)Match(input,135,Follow._135_in_prefix_expr4055);  
				stream_135.Add(string_literal295);

				DebugLocation(459, 10);
				PushFollow(Follow._type_name_in_prefix_expr4057);
				type_name296=type_name();
				PopFollow();

				stream_type_name.Add(type_name296.Tree);
				DebugLocation(459, 20);
				// SugarCpp.g:459:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==75))
				{
					alt118 = 1;
				}
				else if ((LA118_0==110))
				{
					alt118 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 118, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:459:22: '(' ( expr_list )? ')'
					{
					DebugLocation(459, 22);
					char_literal297=(IToken)Match(input,75,Follow._75_in_prefix_expr4061);  
					stream_75.Add(char_literal297);

					DebugLocation(459, 26);
					// SugarCpp.g:459:26: ( expr_list )?
					int alt117=2;
					try { DebugEnterSubRule(117);
					try { DebugEnterDecision(117, false);
					int LA117_0 = input.LA(1);

					if ((LA117_0==IDENT||LA117_0==NUMBER||LA117_0==STRING||LA117_0==68||LA117_0==73||LA117_0==75||LA117_0==77||(LA117_0>=79 && LA117_0<=80)||(LA117_0>=83 && LA117_0<=84)||LA117_0==109||LA117_0==135||LA117_0==149))
					{
						alt117 = 1;
					}
					} finally { DebugExitDecision(117); }
					switch (alt117)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:459:26: expr_list
						{
						DebugLocation(459, 26);
						PushFollow(Follow._expr_list_in_prefix_expr4063);
						expr_list298=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list298.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(117); }

					DebugLocation(459, 37);
					char_literal299=(IToken)Match(input,76,Follow._76_in_prefix_expr4066);  
					stream_76.Add(char_literal299);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 459:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(459, 44);
						// SugarCpp.g:459:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(459, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(459, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(459, 70);
						// SugarCpp.g:459:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(459, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:460:10: '[' expr_list ']'
					{
					DebugLocation(460, 10);
					char_literal300=(IToken)Match(input,110,Follow._110_in_prefix_expr4088);  
					stream_110.Add(char_literal300);

					DebugLocation(460, 14);
					PushFollow(Follow._expr_list_in_prefix_expr4090);
					expr_list301=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list301.Tree);
					DebugLocation(460, 24);
					char_literal302=(IToken)Match(input,111,Follow._111_in_prefix_expr4092);  
					stream_111.Add(char_literal302);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 460:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(460, 31);
						// SugarCpp.g:460:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(460, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(460, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(460, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(118); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:461:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(461, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr4108);
				suffix_expr303=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr303.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 61);
			LeaveRule("prefix_expr", 61);
			LeaveRule_prefix_expr();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:464:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 62);
		TraceIn("expr_list", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal305 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr304 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr306 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal305_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(464, 1);
		try
		{
			// SugarCpp.g:465:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:465:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(465, 4);
			PushFollow(Follow._expr_in_expr_list4120);
			expr304=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr304.Tree);
			DebugLocation(465, 9);
			// SugarCpp.g:465:9: ( ',' ! expr )*
			try { DebugEnterSubRule(120);
			while (true)
			{
				int alt120=2;
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==82))
				{
					alt120 = 1;
				}


				} finally { DebugExitDecision(120); }
				switch ( alt120 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:465:10: ',' ! expr
					{
					DebugLocation(465, 13);
					char_literal305=(IToken)Match(input,82,Follow._82_in_expr_list4123); 
					DebugLocation(465, 15);
					PushFollow(Follow._expr_in_expr_list4126);
					expr306=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr306.Tree);

					}
					break;

				default:
					goto loop120;
				}
			}

			loop120:
				;

			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 62);
			LeaveRule("expr_list", 62);
			LeaveRule_expr_list();
		}
		DebugLocation(466, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:468:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 63);
		TraceIn("suffix_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal307 = default(IToken);
		IToken string_literal308 = default(IToken);
		IToken char_literal309 = default(IToken);
		IToken string_literal311 = default(IToken);
		IToken char_literal313 = default(IToken);
		IToken char_literal315 = default(IToken);
		IToken char_literal316 = default(IToken);
		IToken char_literal318 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident310 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident312 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list314 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list317 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal307_tree = default(CommonTree);
		CommonTree string_literal308_tree = default(CommonTree);
		CommonTree char_literal309_tree = default(CommonTree);
		CommonTree string_literal311_tree = default(CommonTree);
		CommonTree char_literal313_tree = default(CommonTree);
		CommonTree char_literal315_tree = default(CommonTree);
		CommonTree char_literal316_tree = default(CommonTree);
		CommonTree char_literal318_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(468, 1);
		try
		{
			// SugarCpp.g:469:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:469:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			{
			DebugLocation(469, 4);
			// SugarCpp.g:469:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:469:5: a= atom_expr
			{
			DebugLocation(469, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr4142);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 469:17: -> $a
			{
				DebugLocation(469, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(469, 24);
			// SugarCpp.g:469:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=7;
				try { DebugEnterDecision(123, false);
				switch (input.LA(1))
				{
				case 80:
					{
					alt123 = 1;
					}
					break;
				case 84:
					{
					alt123 = 2;
					}
					break;
				case 88:
					{
					alt123 = 3;
					}
					break;
				case 86:
					{
					alt123 = 4;
					}
					break;
				case 75:
					{
					alt123 = 5;
					}
					break;
				case 110:
					{
					alt123 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:469:26: '++'
					{
					DebugLocation(469, 26);
					string_literal307=(IToken)Match(input,80,Follow._80_in_suffix_expr4152);  
					stream_80.Add(string_literal307);



					{
					// AST REWRITE
					// elements: 80, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 469:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(469, 34);
						// SugarCpp.g:469:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(469, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(469, 48);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(469, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:470:14: '--'
					{
					DebugLocation(470, 14);
					string_literal308=(IToken)Match(input,84,Follow._84_in_suffix_expr4178);  
					stream_84.Add(string_literal308);



					{
					// AST REWRITE
					// elements: 84, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 470:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(470, 22);
						// SugarCpp.g:470:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(470, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(470, 36);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(470, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:471:11: '.' ident
					{
					DebugLocation(471, 11);
					char_literal309=(IToken)Match(input,88,Follow._88_in_suffix_expr4201);  
					stream_88.Add(char_literal309);

					DebugLocation(471, 15);
					PushFollow(Follow._ident_in_suffix_expr4203);
					ident310=ident();
					PopFollow();

					stream_ident.Add(ident310.Tree);


					{
					// AST REWRITE
					// elements: ident, 88, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 471:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(471, 24);
						// SugarCpp.g:471:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(471, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(471, 38);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(471, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(471, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:472:11: '->' ident
					{
					DebugLocation(472, 11);
					string_literal311=(IToken)Match(input,86,Follow._86_in_suffix_expr4228);  
					stream_86.Add(string_literal311);

					DebugLocation(472, 16);
					PushFollow(Follow._ident_in_suffix_expr4230);
					ident312=ident();
					PopFollow();

					stream_ident.Add(ident312.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 86
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 472:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(472, 25);
						// SugarCpp.g:472:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(472, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(472, 39);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(472, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(472, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:473:11: '(' ( expr_list )? ')'
					{
					DebugLocation(473, 11);
					char_literal313=(IToken)Match(input,75,Follow._75_in_suffix_expr4255);  
					stream_75.Add(char_literal313);

					DebugLocation(473, 15);
					// SugarCpp.g:473:15: ( expr_list )?
					int alt121=2;
					try { DebugEnterSubRule(121);
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==IDENT||LA121_0==NUMBER||LA121_0==STRING||LA121_0==68||LA121_0==73||LA121_0==75||LA121_0==77||(LA121_0>=79 && LA121_0<=80)||(LA121_0>=83 && LA121_0<=84)||LA121_0==109||LA121_0==135||LA121_0==149))
					{
						alt121 = 1;
					}
					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:473:15: expr_list
						{
						DebugLocation(473, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4257);
						expr_list314=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list314.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(121); }

					DebugLocation(473, 26);
					char_literal315=(IToken)Match(input,76,Follow._76_in_suffix_expr4260);  
					stream_76.Add(char_literal315);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 473:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(473, 33);
						// SugarCpp.g:473:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(473, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(473, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(473, 58);
						// SugarCpp.g:473:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(473, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:474:11: '[' ( expr_list )? ']'
					{
					DebugLocation(474, 11);
					char_literal316=(IToken)Match(input,110,Follow._110_in_suffix_expr4284);  
					stream_110.Add(char_literal316);

					DebugLocation(474, 15);
					// SugarCpp.g:474:15: ( expr_list )?
					int alt122=2;
					try { DebugEnterSubRule(122);
					try { DebugEnterDecision(122, false);
					int LA122_0 = input.LA(1);

					if ((LA122_0==IDENT||LA122_0==NUMBER||LA122_0==STRING||LA122_0==68||LA122_0==73||LA122_0==75||LA122_0==77||(LA122_0>=79 && LA122_0<=80)||(LA122_0>=83 && LA122_0<=84)||LA122_0==109||LA122_0==135||LA122_0==149))
					{
						alt122 = 1;
					}
					} finally { DebugExitDecision(122); }
					switch (alt122)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:474:15: expr_list
						{
						DebugLocation(474, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4286);
						expr_list317=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list317.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(122); }

					DebugLocation(474, 26);
					char_literal318=(IToken)Match(input,111,Follow._111_in_suffix_expr4289);  
					stream_111.Add(char_literal318);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 474:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(474, 33);
						// SugarCpp.g:474:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(474, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(474, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(474, 58);
						// SugarCpp.g:474:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(474, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 63);
			LeaveRule("suffix_expr", 63);
			LeaveRule_suffix_expr();
		}
		DebugLocation(477, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:479:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 64);
		TraceIn("atom_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER319 = default(IToken);
		IToken STRING321 = default(IToken);
		IToken char_literal322 = default(IToken);
		IToken char_literal324 = default(IToken);
		IToken char_literal326 = default(IToken);
		IToken char_literal328 = default(IToken);
		IToken char_literal329 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident320 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident323 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr325 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr327 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER319_tree = default(CommonTree);
		CommonTree STRING321_tree = default(CommonTree);
		CommonTree char_literal322_tree = default(CommonTree);
		CommonTree char_literal324_tree = default(CommonTree);
		CommonTree char_literal326_tree = default(CommonTree);
		CommonTree char_literal328_tree = default(CommonTree);
		CommonTree char_literal329_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(479, 1);
		try
		{
			// SugarCpp.g:480:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt126=5;
			try { DebugEnterDecision(126, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt126 = 1;
				}
				break;
			case IDENT:
				{
				alt126 = 2;
				}
				break;
			case STRING:
				{
				alt126 = 3;
				}
				break;
			case 109:
				{
				alt126 = 4;
				}
				break;
			case 75:
				{
				alt126 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 126, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:480:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(480, 4);
				NUMBER319=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr4335); 
				NUMBER319_tree = (CommonTree)adaptor.Create(NUMBER319);
				adaptor.AddChild(root_0, NUMBER319_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:481:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(481, 4);
				PushFollow(Follow._ident_in_atom_expr4340);
				ident320=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident320.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:482:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(482, 4);
				STRING321=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr4345); 
				STRING321_tree = (CommonTree)adaptor.Create(STRING321);
				adaptor.AddChild(root_0, STRING321_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:483:4: '@' ident
				{
				DebugLocation(483, 4);
				char_literal322=(IToken)Match(input,109,Follow._109_in_atom_expr4350);  
				stream_109.Add(char_literal322);

				DebugLocation(483, 8);
				PushFollow(Follow._ident_in_atom_expr4352);
				ident323=ident();
				PopFollow();

				stream_ident.Add(ident323.Tree);


				{
				// AST REWRITE
				// elements: 109, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 483:14: -> ^( '@' ident )
				{
					DebugLocation(483, 17);
					// SugarCpp.g:483:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(483, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_109.NextNode(), root_1);

					DebugLocation(483, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:484:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(484, 4);
				char_literal324=(IToken)Match(input,75,Follow._75_in_atom_expr4365);  
				stream_75.Add(char_literal324);

				DebugLocation(484, 8);
				PushFollow(Follow._expr_in_atom_expr4367);
				expr325=expr();
				PopFollow();

				stream_expr.Add(expr325.Tree);
				DebugLocation(484, 13);
				// SugarCpp.g:484:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==82))
				{
					alt125 = 1;
				}
				else if ((LA125_0==76))
				{
					alt125 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 125, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:484:15: ( ',' expr )+ ')'
					{
					DebugLocation(484, 15);
					// SugarCpp.g:484:15: ( ',' expr )+
					int cnt124=0;
					try { DebugEnterSubRule(124);
					while (true)
					{
						int alt124=2;
						try { DebugEnterDecision(124, false);
						int LA124_0 = input.LA(1);

						if ((LA124_0==82))
						{
							alt124 = 1;
						}


						} finally { DebugExitDecision(124); }
						switch (alt124)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:484:16: ',' expr
							{
							DebugLocation(484, 16);
							char_literal326=(IToken)Match(input,82,Follow._82_in_atom_expr4372);  
							stream_82.Add(char_literal326);

							DebugLocation(484, 20);
							PushFollow(Follow._expr_in_atom_expr4374);
							expr327=expr();
							PopFollow();

							stream_expr.Add(expr327.Tree);

							}
							break;

						default:
							if (cnt124 >= 1)
								goto loop124;

							EarlyExitException eee124 = new EarlyExitException( 124, input );
							DebugRecognitionException(eee124);
							throw eee124;
						}
						cnt124++;
					}
					loop124:
						;

					} finally { DebugExitSubRule(124); }

					DebugLocation(484, 27);
					char_literal328=(IToken)Match(input,76,Follow._76_in_atom_expr4378);  
					stream_76.Add(char_literal328);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 484:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(484, 34);
						// SugarCpp.g:484:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(484, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(484, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(484, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:485:15: ')'
					{
					DebugLocation(485, 15);
					char_literal329=(IToken)Match(input,76,Follow._76_in_atom_expr4403);  
					stream_76.Add(char_literal329);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 485:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(485, 22);
						// SugarCpp.g:485:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(485, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(485, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(125); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 64);
			LeaveRule("atom_expr", 64);
			LeaveRule_atom_expr();
		}
		DebugLocation(487, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:489:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 65);
		TraceIn("lvalue_item", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal330 = default(IToken);
		IToken string_literal331 = default(IToken);
		IToken char_literal332 = default(IToken);
		IToken string_literal334 = default(IToken);
		IToken char_literal337 = default(IToken);
		IToken char_literal339 = default(IToken);
		IToken char_literal340 = default(IToken);
		IToken char_literal342 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter336 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list341 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal330_tree = default(CommonTree);
		CommonTree string_literal331_tree = default(CommonTree);
		CommonTree char_literal332_tree = default(CommonTree);
		CommonTree string_literal334_tree = default(CommonTree);
		CommonTree char_literal337_tree = default(CommonTree);
		CommonTree char_literal339_tree = default(CommonTree);
		CommonTree char_literal340_tree = default(CommonTree);
		CommonTree char_literal342_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(489, 1);
		try
		{
			// SugarCpp.g:490:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:490:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(490, 4);
			// SugarCpp.g:490:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:490:5: a= lvalue_atom
			{
			DebugLocation(490, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item4433);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 490:19: -> $a
			{
				DebugLocation(490, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(490, 26);
			// SugarCpp.g:490:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=7;
				try { DebugEnterDecision(130, false);
				switch (input.LA(1))
				{
				case 80:
					{
					alt130 = 1;
					}
					break;
				case 84:
					{
					alt130 = 2;
					}
					break;
				case 88:
					{
					alt130 = 3;
					}
					break;
				case 86:
					{
					alt130 = 4;
					}
					break;
				case 75:
				case 95:
					{
					alt130 = 5;
					}
					break;
				case 110:
					{
					alt130 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:490:28: '++'
					{
					DebugLocation(490, 28);
					string_literal330=(IToken)Match(input,80,Follow._80_in_lvalue_item4443);  
					stream_80.Add(string_literal330);



					{
					// AST REWRITE
					// elements: 80, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 490:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(490, 36);
						// SugarCpp.g:490:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(490, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(490, 50);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(490, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:491:16: '--'
					{
					DebugLocation(491, 16);
					string_literal331=(IToken)Match(input,84,Follow._84_in_lvalue_item4471);  
					stream_84.Add(string_literal331);



					{
					// AST REWRITE
					// elements: lvalue_item, 84
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 491:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(491, 24);
						// SugarCpp.g:491:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(491, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(491, 38);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(491, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:492:13: '.' ident
					{
					DebugLocation(492, 13);
					char_literal332=(IToken)Match(input,88,Follow._88_in_lvalue_item4496);  
					stream_88.Add(char_literal332);

					DebugLocation(492, 17);
					PushFollow(Follow._ident_in_lvalue_item4498);
					ident333=ident();
					PopFollow();

					stream_ident.Add(ident333.Tree);


					{
					// AST REWRITE
					// elements: lvalue_item, 88, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 492:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(492, 26);
						// SugarCpp.g:492:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(492, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(492, 40);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(492, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(492, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:493:13: '->' ident
					{
					DebugLocation(493, 13);
					string_literal334=(IToken)Match(input,86,Follow._86_in_lvalue_item4525);  
					stream_86.Add(string_literal334);

					DebugLocation(493, 18);
					PushFollow(Follow._ident_in_lvalue_item4527);
					ident335=ident();
					PopFollow();

					stream_ident.Add(ident335.Tree);


					{
					// AST REWRITE
					// elements: lvalue_item, 86, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 493:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(493, 27);
						// SugarCpp.g:493:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(493, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(493, 41);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(493, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(493, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:494:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(494, 13);
					// SugarCpp.g:494:13: ( generic_parameter )?
					int alt127=2;
					try { DebugEnterSubRule(127);
					try { DebugEnterDecision(127, false);
					int LA127_0 = input.LA(1);

					if ((LA127_0==95))
					{
						alt127 = 1;
					}
					} finally { DebugExitDecision(127); }
					switch (alt127)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:494:13: generic_parameter
						{
						DebugLocation(494, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item4554);
						generic_parameter336=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter336.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(127); }

					DebugLocation(494, 32);
					char_literal337=(IToken)Match(input,75,Follow._75_in_lvalue_item4557);  
					stream_75.Add(char_literal337);

					DebugLocation(494, 36);
					// SugarCpp.g:494:36: ( expr_list )?
					int alt128=2;
					try { DebugEnterSubRule(128);
					try { DebugEnterDecision(128, false);
					int LA128_0 = input.LA(1);

					if ((LA128_0==IDENT||LA128_0==NUMBER||LA128_0==STRING||LA128_0==68||LA128_0==73||LA128_0==75||LA128_0==77||(LA128_0>=79 && LA128_0<=80)||(LA128_0>=83 && LA128_0<=84)||LA128_0==109||LA128_0==135||LA128_0==149))
					{
						alt128 = 1;
					}
					} finally { DebugExitDecision(128); }
					switch (alt128)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:494:36: expr_list
						{
						DebugLocation(494, 36);
						PushFollow(Follow._expr_list_in_lvalue_item4559);
						expr_list338=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list338.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(128); }

					DebugLocation(494, 47);
					char_literal339=(IToken)Match(input,76,Follow._76_in_lvalue_item4562);  
					stream_76.Add(char_literal339);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 494:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(494, 54);
						// SugarCpp.g:494:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(494, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(494, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(494, 79);
						// SugarCpp.g:494:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(494, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(494, 98);
						// SugarCpp.g:494:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(494, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:495:13: '[' ( expr_list )? ']'
					{
					DebugLocation(495, 13);
					char_literal340=(IToken)Match(input,110,Follow._110_in_lvalue_item4591);  
					stream_110.Add(char_literal340);

					DebugLocation(495, 17);
					// SugarCpp.g:495:17: ( expr_list )?
					int alt129=2;
					try { DebugEnterSubRule(129);
					try { DebugEnterDecision(129, false);
					int LA129_0 = input.LA(1);

					if ((LA129_0==IDENT||LA129_0==NUMBER||LA129_0==STRING||LA129_0==68||LA129_0==73||LA129_0==75||LA129_0==77||(LA129_0>=79 && LA129_0<=80)||(LA129_0>=83 && LA129_0<=84)||LA129_0==109||LA129_0==135||LA129_0==149))
					{
						alt129 = 1;
					}
					} finally { DebugExitDecision(129); }
					switch (alt129)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:495:17: expr_list
						{
						DebugLocation(495, 17);
						PushFollow(Follow._expr_list_in_lvalue_item4593);
						expr_list341=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list341.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(129); }

					DebugLocation(495, 28);
					char_literal342=(IToken)Match(input,111,Follow._111_in_lvalue_item4596);  
					stream_111.Add(char_literal342);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 495:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(495, 35);
						// SugarCpp.g:495:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(495, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(495, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(495, 60);
						// SugarCpp.g:495:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(495, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 65);
			LeaveRule("lvalue_item", 65);
			LeaveRule_lvalue_item();
		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:499:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 66);
		TraceIn("lvalue_atom", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal344 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident343 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident345 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal344_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(499, 1);
		try
		{
			// SugarCpp.g:500:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt131=2;
			try { DebugEnterDecision(131, false);
			int LA131_0 = input.LA(1);

			if ((LA131_0==IDENT))
			{
				alt131 = 1;
			}
			else if ((LA131_0==109))
			{
				alt131 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 131, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:500:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(500, 4);
				PushFollow(Follow._ident_in_lvalue_atom4635);
				ident343=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident343.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:501:4: '@' ident
				{
				DebugLocation(501, 4);
				char_literal344=(IToken)Match(input,109,Follow._109_in_lvalue_atom4640);  
				stream_109.Add(char_literal344);

				DebugLocation(501, 8);
				PushFollow(Follow._ident_in_lvalue_atom4642);
				ident345=ident();
				PopFollow();

				stream_ident.Add(ident345.Tree);


				{
				// AST REWRITE
				// elements: ident, 109
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 501:14: -> ^( '@' ident )
				{
					DebugLocation(501, 17);
					// SugarCpp.g:501:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(501, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_109.NextNode(), root_1);

					DebugLocation(501, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 66);
			LeaveRule("lvalue_atom", 66);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(502, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:504:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 67);
		TraceIn("lvalue", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal346 = default(IToken);
		IToken char_literal348 = default(IToken);
		IToken char_literal350 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item349 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item351 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal346_tree = default(CommonTree);
		CommonTree char_literal348_tree = default(CommonTree);
		CommonTree char_literal350_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(504, 1);
		try
		{
			// SugarCpp.g:505:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt133=2;
			try { DebugEnterDecision(133, false);
			int LA133_0 = input.LA(1);

			if ((LA133_0==75))
			{
				alt133 = 1;
			}
			else if ((LA133_0==IDENT||LA133_0==109))
			{
				alt133 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 133, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:505:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(505, 4);
				char_literal346=(IToken)Match(input,75,Follow._75_in_lvalue4661);  
				stream_75.Add(char_literal346);

				DebugLocation(505, 8);
				PushFollow(Follow._lvalue_item_in_lvalue4663);
				lvalue_item347=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item347.Tree);
				DebugLocation(505, 20);
				// SugarCpp.g:505:20: ( ',' lvalue_item )+
				int cnt132=0;
				try { DebugEnterSubRule(132);
				while (true)
				{
					int alt132=2;
					try { DebugEnterDecision(132, false);
					int LA132_0 = input.LA(1);

					if ((LA132_0==82))
					{
						alt132 = 1;
					}


					} finally { DebugExitDecision(132); }
					switch (alt132)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:505:21: ',' lvalue_item
						{
						DebugLocation(505, 21);
						char_literal348=(IToken)Match(input,82,Follow._82_in_lvalue4666);  
						stream_82.Add(char_literal348);

						DebugLocation(505, 25);
						PushFollow(Follow._lvalue_item_in_lvalue4668);
						lvalue_item349=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item349.Tree);

						}
						break;

					default:
						if (cnt132 >= 1)
							goto loop132;

						EarlyExitException eee132 = new EarlyExitException( 132, input );
						DebugRecognitionException(eee132);
						throw eee132;
					}
					cnt132++;
				}
				loop132:
					;

				} finally { DebugExitSubRule(132); }

				DebugLocation(505, 39);
				char_literal350=(IToken)Match(input,76,Follow._76_in_lvalue4672);  
				stream_76.Add(char_literal350);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 505:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(505, 46);
					// SugarCpp.g:505:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(505, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(505, 60);
					// SugarCpp.g:505:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(505, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:506:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(506, 4);
				PushFollow(Follow._lvalue_item_in_lvalue4686);
				lvalue_item351=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item351.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 67);
			LeaveRule("lvalue", 67);
			LeaveRule_lvalue();
		}
		DebugLocation(507, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:509:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 68);
		TraceIn("ident", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT352 = default(IToken);
		IToken string_literal353 = default(IToken);
		IToken IDENT354 = default(IToken);

		CommonTree IDENT352_tree = default(CommonTree);
		CommonTree string_literal353_tree = default(CommonTree);
		CommonTree IDENT354_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(509, 1);
		try
		{
			// SugarCpp.g:510:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:510:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(510, 4);
			IDENT352=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4697); 
			IDENT352_tree = (CommonTree)adaptor.Create(IDENT352);
			adaptor.AddChild(root_0, IDENT352_tree);
			DebugLocation(510, 10);
			// SugarCpp.g:510:10: ( '::' IDENT )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==93))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:510:11: '::' IDENT
					{
					DebugLocation(510, 11);
					string_literal353=(IToken)Match(input,93,Follow._93_in_ident4700); 
					string_literal353_tree = (CommonTree)adaptor.Create(string_literal353);
					adaptor.AddChild(root_0, string_literal353_tree);
					DebugLocation(510, 16);
					IDENT354=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4702); 
					IDENT354_tree = (CommonTree)adaptor.Create(IDENT354);
					adaptor.AddChild(root_0, IDENT354_tree);

					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 68);
			LeaveRule("ident", 68);
			LeaveRule_ident();
		}
		DebugLocation(511, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:513:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 69);
		TraceIn("infix_func", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal355 = default(IToken);
		IToken char_literal357 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident356 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal355_tree = default(CommonTree);
		CommonTree char_literal357_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(513, 1);
		try
		{
			// SugarCpp.g:514:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:514:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(514, 7);
			char_literal355=(IToken)Match(input,114,Follow._114_in_infix_func4715); 
			DebugLocation(514, 9);
			PushFollow(Follow._ident_in_infix_func4718);
			ident356=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident356.Tree);
			DebugLocation(514, 18);
			char_literal357=(IToken)Match(input,114,Follow._114_in_infix_func4720); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 69);
			LeaveRule("infix_func", 69);
			LeaveRule_infix_func();
		}
		DebugLocation(515, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA25 dfa25;
	private DFA38 dfa38;
	private DFA53 dfa53;
	private DFA64 dfa64;
	private DFA70 dfa70;
	private DFA96 dfa96;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa25 = new DFA25( this );
		dfa38 = new DFA38( this );
		dfa53 = new DFA53( this );
		dfa64 = new DFA64( this );
		dfa70 = new DFA70( this );
		dfa96 = new DFA96( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x22\x1\xFFFF\x1\x22\x6\xFFFF\x2\x4B\x1\x22\x1\xFFFF\x3\x22\x1\x2D"+
			"\x2\x22\x1\x4B\x3\x4C\x2\x4B\x1\x22\x3\x4C\x1\x22\x1\x52\x5\x22\x1\x52"+
			"\x1\x22\x4\x4C\x1\x4B\xA\x4C\x2\x22\x1\x52\x2\x22\x1\x52\x2\x22\xA\x4C"+
			"\x2\x22\x2\x4C";
		private const string DFA4_maxS =
			"\x1\x95\x1\x77\x1\xFFFF\x1\x95\x6\xFFFF\x2\x6F\x1\x22\x1\xFFFF\x1\x22"+
			"\x1\x33\x1\x77\x1\x2D\x1\x33\x1\x95\x1\x6F\x2\x52\x1\x5D\x2\x6F\x1\x95"+
			"\x2\x52\x1\x5D\x1\x33\x1\x6F\x2\x22\x3\x33\x1\x6F\x1\x22\x2\x52\x2\x5D"+
			"\x1\x6F\x2\x52\x1\x5D\x2\x52\x1\x5D\x2\x52\x2\x5D\x1\x22\x1\x33\x1\x6F"+
			"\x1\x22\x1\x33\x1\x6F\x2\x22\x1\x5D\x2\x52\x2\x5D\x2\x52\x3\x5D\x2\x22"+
			"\x2\x5D";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x4B\xFFFF\x1\x1\x7\xFFFF\x1\x4\x1\x2\x4\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x8\x5\xFFFF\x1\x9\x6\xFFFF\x1\x7\x1\x2\x1\x6\x5\xFFFF\x1\x2",
				"\x1\xA\x54\xFFFF\x1\xB",
				"",
				"\x1\x2\x26\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x26\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\xB\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x54\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\xB\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x26\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x26\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x3\xA\xFFFF\x1\x1A\x40\xFFFF\x1\x1\x7\xFFFF\x1\x4\x1\x2\x4\xFFFF"+
				"\x1\x5\x11\xFFFF\x1\x2\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\xB\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\xB\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\xB\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\xB\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\xB\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\xB\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "176:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x4\xFFFF";
		private const string DFA25_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA25_minS =
			"\x1\x2D\x1\x8\x2\xFFFF";
		private const string DFA25_maxS =
			"\x1\x2D\x1\x95\x2\xFFFF";
		private const string DFA25_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA25_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x19\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x40\xFFFF\x1\x3\x7\xFFFF"+
				"\x2\x3\x4\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x6\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "220:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\x4\xFFFF";
		private const string DFA38_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA38_minS =
			"\x1\x2D\x1\x8\x2\xFFFF";
		private const string DFA38_maxS =
			"\x1\x2D\x1\x95\x2\xFFFF";
		private const string DFA38_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA38_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x19\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x40\xFFFF\x1\x3\x7\xFFFF"+
				"\x2\x3\x4\xFFFF\x1\x3\x3\xFFFF\x1\x3\x5\xFFFF\x1\x3\x6\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "232:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\xF\xFFFF";
		private const string DFA53_eofS =
			"\xF\xFFFF";
		private const string DFA53_minS =
			"\x1\x22\x1\xFFFF\x1\x22\x1\xFFFF\x3\x22\x1\x49\x3\x22\x2\x49\x1\x22\x1"+
			"\x49";
		private const string DFA53_maxS =
			"\x1\x95\x1\xFFFF\x1\x95\x1\xFFFF\x1\x22\x1\x8E\x1\x95\x1\x6E\x1\x22\x1"+
			"\x8E\x1\x95\x2\x6E\x1\x22\x1\x6E";
		private const string DFA53_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA53_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x2\x54\xFFFF\x1\x1\x16\xFFFF\x1\x1\x6\xFFFF\x1\x3",
				"",
				"\x1\x1\x26\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x26\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x44\xFFFF\x1\x1\xF\xFFFF\x1\x1\x16\xFFFF\x1\x1",
				"\x1\x1\x26\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x26\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x54\xFFFF\x1\x1\x16\xFFFF\x1\x1",
				"\x1\x1\x26\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x20\xFFFF\x1\x1"+
				"\x26\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "261:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA64 : DFA
	{
		private const string DFA64_eotS =
			"\x9\xFFFF";
		private const string DFA64_eofS =
			"\x9\xFFFF";
		private const string DFA64_minS =
			"\x1\x22\x1\x2D\x4\xFFFF\x1\x22\x1\xFFFF\x1\x2D";
		private const string DFA64_maxS =
			"\x1\x8F\x1\x93\x4\xFFFF\x1\x22\x1\xFFFF\x1\x93";
		private const string DFA64_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA64_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA64_transitionS =
			{
				"\x1\x1\x28\xFFFF\x1\x5\x21\xFFFF\x1\x5\x1B\xFFFF\x1\x2\x3\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x3",
				"\x1\x5\x19\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x1\x5\x11\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x19\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x1\x5\x11\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5"
			};

		private static readonly short[] DFA64_eot = DFA.UnpackEncodedString(DFA64_eotS);
		private static readonly short[] DFA64_eof = DFA.UnpackEncodedString(DFA64_eofS);
		private static readonly char[] DFA64_min = DFA.UnpackEncodedStringToUnsignedChars(DFA64_minS);
		private static readonly char[] DFA64_max = DFA.UnpackEncodedStringToUnsignedChars(DFA64_maxS);
		private static readonly short[] DFA64_accept = DFA.UnpackEncodedString(DFA64_acceptS);
		private static readonly short[] DFA64_special = DFA.UnpackEncodedString(DFA64_specialS);
		private static readonly short[][] DFA64_transition;

		static DFA64()
		{
			int numStates = DFA64_transitionS.Length;
			DFA64_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA64_transition[i] = DFA.UnpackEncodedString(DFA64_transitionS[i]);
			}
		}

		public DFA64( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 64;
			this.eot = DFA64_eot;
			this.eof = DFA64_eof;
			this.min = DFA64_min;
			this.max = DFA64_max;
			this.accept = DFA64_accept;
			this.special = DFA64_special;
			this.transition = DFA64_transition;
		}

		public override string Description { get { return "285:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA70 : DFA
	{
		private const string DFA70_eotS =
			"\x4\xFFFF";
		private const string DFA70_eofS =
			"\x4\xFFFF";
		private const string DFA70_minS =
			"\x1\x2D\x1\x8\x2\xFFFF";
		private const string DFA70_maxS =
			"\x1\x7B\x1\x91\x2\xFFFF";
		private const string DFA70_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA70_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA70_transitionS =
			{
				"\x1\x1\x4D\xFFFF\x1\x2",
				"\x1\x3\x19\xFFFF\x1\x3\xA\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xA\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\xFFFF\x3\x3\x4\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x2\x3\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA70_eot = DFA.UnpackEncodedString(DFA70_eotS);
		private static readonly short[] DFA70_eof = DFA.UnpackEncodedString(DFA70_eofS);
		private static readonly char[] DFA70_min = DFA.UnpackEncodedStringToUnsignedChars(DFA70_minS);
		private static readonly char[] DFA70_max = DFA.UnpackEncodedStringToUnsignedChars(DFA70_maxS);
		private static readonly short[] DFA70_accept = DFA.UnpackEncodedString(DFA70_acceptS);
		private static readonly short[] DFA70_special = DFA.UnpackEncodedString(DFA70_specialS);
		private static readonly short[][] DFA70_transition;

		static DFA70()
		{
			int numStates = DFA70_transitionS.Length;
			DFA70_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA70_transition[i] = DFA.UnpackEncodedString(DFA70_transitionS[i]);
			}
		}

		public DFA70( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 70;
			this.eot = DFA70_eot;
			this.eof = DFA70_eof;
			this.min = DFA70_min;
			this.max = DFA70_max;
			this.accept = DFA70_accept;
			this.special = DFA70_special;
			this.transition = DFA70_transition;
		}

		public override string Description { get { return "311:35: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA96 : DFA
	{
		private const string DFA96_eotS =
			"\xB\xFFFF";
		private const string DFA96_eofS =
			"\xB\xFFFF";
		private const string DFA96_minS =
			"\x2\x22\x1\xFFFF\x1\x45\x1\xFFFF\x2\x22\x2\x45\x1\x22\x1\x45";
		private const string DFA96_maxS =
			"\x2\x95\x1\xFFFF\x1\x94\x1\xFFFF\x1\x22\x1\x95\x2\x94\x1\x22\x1\x94";
		private const string DFA96_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA96_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA96_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x10\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2\x19\xFFFF\x1\x2\xD\xFFFF\x1\x2",
				"\x1\x3\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x10\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xE\xFFFF\x1\x2\x19\xFFFF\x1\x2\xD\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x4\x2\xE\xFFFF\x2\x2\x4\xFFFF\x1\x2\x9\xFFFF"+
				"\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x10\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2\x19\xFFFF\x1\x2\xD\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x4\x2\xE\xFFFF\x2\x2\x4\xFFFF\x1\x2\x9\xFFFF"+
				"\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x4\x2\xE\xFFFF\x2\x2\x4\xFFFF\x1\x2\x9\xFFFF"+
				"\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x4\x2\xE\xFFFF\x2\x2\x4\xFFFF\x1\x2\x9\xFFFF"+
				"\x3\x2"
			};

		private static readonly short[] DFA96_eot = DFA.UnpackEncodedString(DFA96_eotS);
		private static readonly short[] DFA96_eof = DFA.UnpackEncodedString(DFA96_eofS);
		private static readonly char[] DFA96_min = DFA.UnpackEncodedStringToUnsignedChars(DFA96_minS);
		private static readonly char[] DFA96_max = DFA.UnpackEncodedStringToUnsignedChars(DFA96_maxS);
		private static readonly short[] DFA96_accept = DFA.UnpackEncodedString(DFA96_acceptS);
		private static readonly short[] DFA96_special = DFA.UnpackEncodedString(DFA96_specialS);
		private static readonly short[][] DFA96_transition;

		static DFA96()
		{
			int numStates = DFA96_transitionS.Length;
			DFA96_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA96_transition[i] = DFA.UnpackEncodedString(DFA96_transitionS[i]);
			}
		}

		public DFA96( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 96;
			this.eot = DFA96_eot;
			this.eof = DFA96_eof;
			this.min = DFA96_min;
			this.max = DFA96_max;
			this.accept = DFA96_accept;
			this.special = DFA96_special;
			this.transition = DFA96_transition;
		}

		public override string Description { get { return "369:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root474 = new BitSet(new ulong[]{0x200400000000UL,0x10C0400000000000UL,0x20E041UL});
		public static readonly BitSet _global_block_in_root477 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block499 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block501 = new BitSet(new ulong[]{0x200400000002UL,0x10C0400000000000UL,0x20E041UL});
		public static readonly BitSet _func_def_in_node524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node534 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item592 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _75_in_attribute_item595 = new BitSet(new ulong[]{0x8400400000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item597 = new BitSet(new ulong[]{0x0UL,0x41000UL});
		public static readonly BitSet _82_in_attribute_item600 = new BitSet(new ulong[]{0x8400400000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item602 = new BitSet(new ulong[]{0x0UL,0x41000UL});
		public static readonly BitSet _76_in_attribute_item606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_attribute_item624 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _75_in_attribute_item627 = new BitSet(new ulong[]{0x8400400000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item629 = new BitSet(new ulong[]{0x0UL,0x41000UL});
		public static readonly BitSet _82_in_attribute_item632 = new BitSet(new ulong[]{0x8400400000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item634 = new BitSet(new ulong[]{0x0UL,0x41000UL});
		public static readonly BitSet _76_in_attribute_item638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_attribute663 = new BitSet(new ulong[]{0x400000000UL,0x80000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute665 = new BitSet(new ulong[]{0x0UL,0x800000040000UL});
		public static readonly BitSet _82_in_attribute668 = new BitSet(new ulong[]{0x400000000UL,0x80000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute670 = new BitSet(new ulong[]{0x0UL,0x800000040000UL});
		public static readonly BitSet _111_in_attribute674 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute676 = new BitSet(new ulong[]{0x200000000002UL,0x400000000000UL});
		public static readonly BitSet _attribute_in_global_alloc695 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_list_in_global_alloc698 = new BitSet(new ulong[]{0x0UL,0x50000000UL});
		public static readonly BitSet _92_in_global_alloc702 = new BitSet(new ulong[]{0x400000000UL,0x80000000000000UL,0x4000UL});
		public static readonly BitSet _type_name_in_global_alloc704 = new BitSet(new ulong[]{0x2UL,0x1040000800UL});
		public static readonly BitSet _100_in_global_alloc709 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _94_in_global_alloc713 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_global_alloc716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_global_alloc776 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019BA10UL,0x200080UL});
		public static readonly BitSet _expr_list_in_global_alloc778 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_global_alloc781 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_global_alloc854 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _modify_expr_in_global_alloc857 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_global_alloc860 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _modify_expr_in_global_alloc862 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _stmt_using_in_global_using899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_import_def921 = new BitSet(new ulong[]{0x8200000000002UL});
		public static readonly BitSet _STRING_in_import_def923 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def927 = new BitSet(new ulong[]{0x200800000000UL});
		public static readonly BitSet _INDENT_in_import_def930 = new BitSet(new ulong[]{0x8200000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def932 = new BitSet(new ulong[]{0x8200000000100UL});
		public static readonly BitSet _STRING_in_import_def937 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def939 = new BitSet(new ulong[]{0x8200000000100UL});
		public static readonly BitSet _DEDENT_in_import_def944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def966 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_enum_def969 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_enum_def971 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_enum_def973 = new BitSet(new ulong[]{0x400000002UL});
		public static readonly BitSet _ident_in_enum_def976 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_enum_def979 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_enum_def981 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _134_in_namespace_def1014 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_namespace_def1016 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1018 = new BitSet(new ulong[]{0x200800000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1021 = new BitSet(new ulong[]{0x200400000100UL,0x10C0400000000000UL,0x20E041UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1023 = new BitSet(new ulong[]{0x200400000100UL,0x10C0400000000000UL,0x20E041UL});
		public static readonly BitSet _global_block_in_namespace_def1026 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1050 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_class_def1053 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_class_def1055 = new BitSet(new ulong[]{0x200000000002UL,0x90000800UL});
		public static readonly BitSet _generic_parameter_in_class_def1058 = new BitSet(new ulong[]{0x200000000002UL,0x10000800UL});
		public static readonly BitSet _75_in_class_def1063 = new BitSet(new ulong[]{0x400000000UL,0x40000000UL});
		public static readonly BitSet _func_args_in_class_def1065 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_class_def1067 = new BitSet(new ulong[]{0x200000000002UL,0x10000000UL});
		public static readonly BitSet _92_in_class_def1072 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_class_def1074 = new BitSet(new ulong[]{0x200000000002UL,0x40000UL});
		public static readonly BitSet _82_in_class_def1077 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_class_def1079 = new BitSet(new ulong[]{0x200000000002UL,0x40000UL});
		public static readonly BitSet _NEWLINE_in_class_def1086 = new BitSet(new ulong[]{0x200800000000UL});
		public static readonly BitSet _INDENT_in_class_def1089 = new BitSet(new ulong[]{0x200400000100UL,0x10C0400000000000UL,0x20E041UL});
		public static readonly BitSet _NEWLINE_in_class_def1091 = new BitSet(new ulong[]{0x200400000100UL,0x10C0400000000000UL,0x20E041UL});
		public static readonly BitSet _global_block_in_class_def1094 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_type_name_op1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_type_name_op1141 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_type_name_op1143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_type_name_op1147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_type_name1156 = new BitSet(new ulong[]{0x400000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _142_in_type_name1159 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_type_name1162 = new BitSet(new ulong[]{0x2UL,0x400080002200UL});
		public static readonly BitSet _95_in_type_name1165 = new BitSet(new ulong[]{0x400000000UL,0x80008000000000UL,0x4000UL});
		public static readonly BitSet _type_name_in_type_name1168 = new BitSet(new ulong[]{0x0UL,0x8000040000UL});
		public static readonly BitSet _82_in_type_name1171 = new BitSet(new ulong[]{0x400000000UL,0x80000000000000UL,0x4000UL});
		public static readonly BitSet _type_name_in_type_name1173 = new BitSet(new ulong[]{0x0UL,0x8000040000UL});
		public static readonly BitSet _103_in_type_name1179 = new BitSet(new ulong[]{0x2UL,0x400000002200UL});
		public static readonly BitSet _type_name_op_in_type_name1183 = new BitSet(new ulong[]{0x2UL,0x400000002200UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1223 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_generic_parameter_inside1226 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1228 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _95_in_generic_parameter1250 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1252 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _103_in_generic_parameter1254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1269 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_func_args1272 = new BitSet(new ulong[]{0x400000000UL,0x40000000UL});
		public static readonly BitSet _func_args_item_in_func_args1274 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _ident_list_in_func_args_item1296 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_func_args_item1298 = new BitSet(new ulong[]{0x400000000UL,0x80000000000000UL,0x4000UL});
		public static readonly BitSet _type_name_in_func_args_item1300 = new BitSet(new ulong[]{0x2UL,0x1040000800UL});
		public static readonly BitSet _100_in_func_args_item1305 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _94_in_func_args_item1309 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_func_args_item1312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_func_args_item1360 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019BA10UL,0x200080UL});
		public static readonly BitSet _expr_list_in_func_args_item1362 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_func_args_item1365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_func_args_item1422 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _modify_expr_in_func_args_item1426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1437 = new BitSet(new ulong[]{0x400000000UL,0x80000000000000UL,0x204000UL});
		public static readonly BitSet _type_name_in_func_def1440 = new BitSet(new ulong[]{0x400000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_func_def1443 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_func_def1446 = new BitSet(new ulong[]{0x0UL,0x80000800UL});
		public static readonly BitSet _generic_parameter_in_func_def1448 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_func_def1451 = new BitSet(new ulong[]{0x400000000UL,0x40001000UL});
		public static readonly BitSet _func_args_in_func_def1453 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_func_def1456 = new BitSet(new ulong[]{0x200000000000UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1459 = new BitSet(new ulong[]{0x200800000000UL});
		public static readonly BitSet _stmt_block_in_func_def1462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_func_def1511 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_func_def1513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1554 = new BitSet(new ulong[]{0x200400000100UL,0xE100200000000800UL,0x3B230UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1556 = new BitSet(new ulong[]{0x200400000100UL,0xE100200000000800UL,0x3B230UL});
		public static readonly BitSet _stmt_in_stmt_block1561 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1563 = new BitSet(new ulong[]{0x200400000100UL,0xE100200000000800UL,0x3B230UL});
		public static readonly BitSet _DEDENT_in_stmt_block1568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1632 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL,0x20000UL});
		public static readonly BitSet _127_in_stmt_expr1642 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_expr1644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_expr1673 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_expr1675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item1714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item1719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item1724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item1729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item1734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_stmt_defer1745 = new BitSet(new ulong[]{0x400000000UL,0xE100200000000800UL,0x3B230UL});
		public static readonly BitSet _stmt_in_stmt_defer1747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_stmt_typedef1766 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1768 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_stmt_typedef1770 = new BitSet(new ulong[]{0x400000000UL,0x80000000000000UL,0x4000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_stmt_using_item1795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_stmt_using1803 = new BitSet(new ulong[]{0x400000002UL,0x0UL,0x40UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1805 = new BitSet(new ulong[]{0x400000002UL,0x0UL,0x40UL});
		public static readonly BitSet _137_in_stmt_return1826 = new BitSet(new ulong[]{0x8400400000002UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_return1828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_stmt_if1849 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_if1851 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1854 = new BitSet(new ulong[]{0x200800000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1857 = new BitSet(new ulong[]{0x200000000002UL,0x800000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1860 = new BitSet(new ulong[]{0x200000000000UL,0x800000000000000UL});
		public static readonly BitSet _123_in_stmt_if1863 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_stmt_if1897 = new BitSet(new ulong[]{0x400000000UL,0xE100200000000800UL,0x3B230UL});
		public static readonly BitSet _stmt_in_stmt_if1899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_while1930 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_while1932 = new BitSet(new ulong[]{0x200000000000UL,0x200000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while1936 = new BitSet(new ulong[]{0x200800000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_stmt_while1963 = new BitSet(new ulong[]{0x400000000UL,0xE100200000000800UL,0x3B230UL});
		public static readonly BitSet _stmt_in_stmt_while1965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_stmt_while1993 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while1995 = new BitSet(new ulong[]{0x200800000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_stmt_for2017 = new BitSet(new ulong[]{0x400000000UL,0x200UL});
		public static readonly BitSet _73_in_stmt_for2019 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_stmt_for2022 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_stmt_for2024 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_for2026 = new BitSet(new ulong[]{0x200000000000UL,0x400000000000000UL,0x800UL});
		public static readonly BitSet _139_in_stmt_for2030 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_for2032 = new BitSet(new ulong[]{0x200000000000UL,0x10000000000000UL});
		public static readonly BitSet _116_in_stmt_for2035 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_for2037 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2041 = new BitSet(new ulong[]{0x200800000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_stmt_for2095 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_for2097 = new BitSet(new ulong[]{0x200000000000UL,0x10000000000000UL});
		public static readonly BitSet _116_in_stmt_for2100 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_for2102 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2106 = new BitSet(new ulong[]{0x200800000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2160 = new BitSet(new ulong[]{0x200800000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_try2202 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2204 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_stmt_try2206 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_try2208 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_linq_item2233 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_linq_item2235 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_linq_item2237 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_linq_item2239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_linq_item2254 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_linq_item2256 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_linq_item2258 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_linq_item2260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_linq_item2275 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_linq_item2277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _linq_item_in_linq_prefix2297 = new BitSet(new ulong[]{0x200000000000UL,0x4000000000000000UL,0x10010UL});
		public static readonly BitSet _linq_item_in_linq_prefix2299 = new BitSet(new ulong[]{0x200000000000UL,0x4000000000000000UL,0x10010UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix2302 = new BitSet(new ulong[]{0x200000000002UL,0x4000000000000000UL,0x10010UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq2325 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq2327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2348 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_ident_list2351 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_ident_list2353 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2375 = new BitSet(new ulong[]{0x0UL,0x50000000UL});
		public static readonly BitSet _92_in_stmt_alloc2379 = new BitSet(new ulong[]{0x400000000UL,0x80000000000000UL,0x4000UL});
		public static readonly BitSet _type_name_in_stmt_alloc2381 = new BitSet(new ulong[]{0x2UL,0x1040000800UL});
		public static readonly BitSet _100_in_stmt_alloc2386 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _94_in_stmt_alloc2390 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_alloc2393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_stmt_alloc2441 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019BA10UL,0x200080UL});
		public static readonly BitSet _expr_list_in_stmt_alloc2443 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_stmt_alloc2446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_stmt_alloc2507 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_stmt_alloc2511 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_stmt_alloc2514 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc2516 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _lvalue_in_stmt_modify2544 = new BitSet(new ulong[]{0x2UL,0x2141408224480UL,0x80000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify2548 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_stmt_modify2565 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_lambda_expr2592 = new BitSet(new ulong[]{0x400000000UL,0x40001000UL});
		public static readonly BitSet _func_args_in_lambda_expr2594 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_lambda_expr2597 = new BitSet(new ulong[]{0x0UL,0x4000400000UL});
		public static readonly BitSet _86_in_lambda_expr2601 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_lambda_expr2603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_lambda_expr2643 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_lambda_expr2645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr2665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr2722 = new BitSet(new ulong[]{0x2UL,0x2041448224480UL,0x80000UL});
		public static readonly BitSet _set_in_modify_expr2726 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _cond_expr_in_modify_expr2771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_modify_expr2780 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _cond_expr_in_modify_expr2783 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item2796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr2808 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _107_in_cond_expr2817 = new BitSet(new ulong[]{0x8400400000002UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2823 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_cond_expr2827 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr2934 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100100UL});
		public static readonly BitSet _148_in_or_expr2944 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _and_expr_in_or_expr2948 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100100UL});
		public static readonly BitSet _136_in_or_expr2988 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _and_expr_in_or_expr2992 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100100UL});
		public static readonly BitSet _bit_or_in_and_expr3020 = new BitSet(new ulong[]{0x2UL,0x8000000000100UL});
		public static readonly BitSet _72_in_and_expr3030 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _bit_or_in_and_expr3034 = new BitSet(new ulong[]{0x2UL,0x8000000000100UL});
		public static readonly BitSet _115_in_and_expr3060 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _bit_or_in_and_expr3064 = new BitSet(new ulong[]{0x2UL,0x8000000000100UL});
		public static readonly BitSet _bit_xor_in_bit_or3092 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_bit_or3101 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _bit_xor_in_bit_or3105 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _bit_and_in_bit_xor3135 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_bit_xor3144 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _bit_and_in_bit_xor3148 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and3178 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _73_in_bit_and3187 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and3191 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3232 = new BitSet(new ulong[]{0x2UL,0x2000000020UL,0xCUL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr3244 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_cmp_equ_expr3289 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_cmp_equ_expr3332 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3374 = new BitSet(new ulong[]{0x2UL,0x18880000000UL});
		public static readonly BitSet _95_in_cmp_expr3384 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3388 = new BitSet(new ulong[]{0x400000002UL,0x18880000000UL});
		public static readonly BitSet _ident_in_cmp_expr3394 = new BitSet(new ulong[]{0x400000000UL,0x8000000000UL});
		public static readonly BitSet _103_in_cmp_expr3397 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_cmp_expr3399 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019BA10UL,0x200080UL});
		public static readonly BitSet _expr_list_in_cmp_expr3401 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_cmp_expr3404 = new BitSet(new ulong[]{0x2UL,0x18880000000UL});
		public static readonly BitSet _99_in_cmp_expr3514 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3518 = new BitSet(new ulong[]{0x2UL,0x18880000000UL});
		public static readonly BitSet _103_in_cmp_expr3545 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3549 = new BitSet(new ulong[]{0x2UL,0x18880000000UL});
		public static readonly BitSet _104_in_cmp_expr3576 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3580 = new BitSet(new ulong[]{0x2UL,0x18880000000UL});
		public static readonly BitSet _shift_expr_in_infix_expr3610 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr3620 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _shift_expr_in_infix_expr3624 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr3667 = new BitSet(new ulong[]{0x2UL,0x20200000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr3676 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _add_expr_in_shift_expr3680 = new BitSet(new ulong[]{0x2UL,0x20200000000UL});
		public static readonly BitSet _mul_expr_in_add_expr3710 = new BitSet(new ulong[]{0x2UL,0x88000UL});
		public static readonly BitSet _79_in_add_expr3720 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _mul_expr_in_add_expr3724 = new BitSet(new ulong[]{0x2UL,0x88000UL});
		public static readonly BitSet _83_in_add_expr3749 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _mul_expr_in_add_expr3753 = new BitSet(new ulong[]{0x2UL,0x88000UL});
		public static readonly BitSet _selector_expr_in_mul_expr3791 = new BitSet(new ulong[]{0x2UL,0x4002040UL});
		public static readonly BitSet _77_in_mul_expr3801 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _selector_expr_in_mul_expr3805 = new BitSet(new ulong[]{0x2UL,0x4002040UL});
		public static readonly BitSet _90_in_mul_expr3835 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _selector_expr_in_mul_expr3839 = new BitSet(new ulong[]{0x2UL,0x4002040UL});
		public static readonly BitSet _70_in_mul_expr3869 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _selector_expr_in_mul_expr3873 = new BitSet(new ulong[]{0x2UL,0x4002040UL});
		public static readonly BitSet _prefix_expr_in_selector_expr3916 = new BitSet(new ulong[]{0x2UL,0x2800000UL});
		public static readonly BitSet _87_in_selector_expr3926 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_selector_expr3930 = new BitSet(new ulong[]{0x2UL,0x2800000UL});
		public static readonly BitSet _89_in_selector_expr3958 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_selector_expr3963 = new BitSet(new ulong[]{0x2UL,0x2800000UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr4037 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr4039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_prefix_expr4055 = new BitSet(new ulong[]{0x400000000UL,0x80000000000000UL,0x4000UL});
		public static readonly BitSet _type_name_in_prefix_expr4057 = new BitSet(new ulong[]{0x0UL,0x400000000800UL});
		public static readonly BitSet _75_in_prefix_expr4061 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019BA10UL,0x200080UL});
		public static readonly BitSet _expr_list_in_prefix_expr4063 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_prefix_expr4066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_prefix_expr4088 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_list_in_prefix_expr4090 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_prefix_expr4092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr4108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list4120 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_expr_list4123 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_expr_list4126 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr4142 = new BitSet(new ulong[]{0x2UL,0x400001510800UL});
		public static readonly BitSet _80_in_suffix_expr4152 = new BitSet(new ulong[]{0x2UL,0x400001510800UL});
		public static readonly BitSet _84_in_suffix_expr4178 = new BitSet(new ulong[]{0x2UL,0x400001510800UL});
		public static readonly BitSet _88_in_suffix_expr4201 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_suffix_expr4203 = new BitSet(new ulong[]{0x2UL,0x400001510800UL});
		public static readonly BitSet _86_in_suffix_expr4228 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_suffix_expr4230 = new BitSet(new ulong[]{0x2UL,0x400001510800UL});
		public static readonly BitSet _75_in_suffix_expr4255 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019BA10UL,0x200080UL});
		public static readonly BitSet _expr_list_in_suffix_expr4257 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_suffix_expr4260 = new BitSet(new ulong[]{0x2UL,0x400001510800UL});
		public static readonly BitSet _110_in_suffix_expr4284 = new BitSet(new ulong[]{0x8400400000000UL,0xA0000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_list_in_suffix_expr4286 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_suffix_expr4289 = new BitSet(new ulong[]{0x2UL,0x400001510800UL});
		public static readonly BitSet _NUMBER_in_atom_expr4335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr4340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr4345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_atom_expr4350 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_atom_expr4352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_atom_expr4365 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_atom_expr4367 = new BitSet(new ulong[]{0x0UL,0x41000UL});
		public static readonly BitSet _82_in_atom_expr4372 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_in_atom_expr4374 = new BitSet(new ulong[]{0x0UL,0x41000UL});
		public static readonly BitSet _76_in_atom_expr4378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_atom_expr4403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item4433 = new BitSet(new ulong[]{0x2UL,0x400081510800UL});
		public static readonly BitSet _80_in_lvalue_item4443 = new BitSet(new ulong[]{0x2UL,0x400081510800UL});
		public static readonly BitSet _84_in_lvalue_item4471 = new BitSet(new ulong[]{0x2UL,0x400081510800UL});
		public static readonly BitSet _88_in_lvalue_item4496 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_lvalue_item4498 = new BitSet(new ulong[]{0x2UL,0x400081510800UL});
		public static readonly BitSet _86_in_lvalue_item4525 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_lvalue_item4527 = new BitSet(new ulong[]{0x2UL,0x400081510800UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item4554 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _75_in_lvalue_item4557 = new BitSet(new ulong[]{0x8400400000000UL,0x20000019BA10UL,0x200080UL});
		public static readonly BitSet _expr_list_in_lvalue_item4559 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_lvalue_item4562 = new BitSet(new ulong[]{0x2UL,0x400081510800UL});
		public static readonly BitSet _110_in_lvalue_item4591 = new BitSet(new ulong[]{0x8400400000000UL,0xA0000019AA10UL,0x200080UL});
		public static readonly BitSet _expr_list_in_lvalue_item4593 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_lvalue_item4596 = new BitSet(new ulong[]{0x2UL,0x400081510800UL});
		public static readonly BitSet _ident_in_lvalue_atom4635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_lvalue_atom4640 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_lvalue_atom4642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_lvalue4661 = new BitSet(new ulong[]{0x400000000UL,0x200000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4663 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_lvalue4666 = new BitSet(new ulong[]{0x400000000UL,0x200000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4668 = new BitSet(new ulong[]{0x0UL,0x41000UL});
		public static readonly BitSet _76_in_lvalue4672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue4686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident4697 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_ident4700 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _IDENT_in_ident4702 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _114_in_infix_func4715 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _ident_in_infix_func4718 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_infix_func4720 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
