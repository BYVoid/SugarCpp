//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-04-30 14:01:47

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "Ident_List", "Import", "Infix_Func", "Left_Bracket", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Struct", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "']'", "'^'", "'^='", "'catch'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'in'", "'namespace'", "'new'", "'return'", "'struct'", "'try'", "'typedef'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int Attribute=4;
	public const int Block=5;
	public const int DEDENT=6;
	public const int EXPONENT=7;
	public const int Enum=8;
	public const int Expr_Access=9;
	public const int Expr_Alloc=10;
	public const int Expr_Bin=11;
	public const int Expr_Block=12;
	public const int Expr_Call=13;
	public const int Expr_Call_With=14;
	public const int Expr_Cond=15;
	public const int Expr_Dict=16;
	public const int Expr_Infix=17;
	public const int Expr_Lambda=18;
	public const int Expr_New_Array=19;
	public const int Expr_New_Type=20;
	public const int Expr_Prefix=21;
	public const int Expr_Return=22;
	public const int Expr_Suffix=23;
	public const int Expr_Tuple=24;
	public const int Func_Args=25;
	public const int Func_Def=26;
	public const int IDENT=27;
	public const int INDENT=28;
	public const int Ident_List=29;
	public const int Import=30;
	public const int Infix_Func=31;
	public const int Left_Bracket=32;
	public const int Match_Tuple=33;
	public const int NEWLINE=34;
	public const int NUMBER=35;
	public const int Namespace=36;
	public const int Right_Bracket=37;
	public const int Root=38;
	public const int SP=39;
	public const int STRING=40;
	public const int Stmt_Block=41;
	public const int Stmt_For=42;
	public const int Stmt_ForEach=43;
	public const int Stmt_If=44;
	public const int Stmt_Try=45;
	public const int Stmt_Typedef=46;
	public const int Stmt_Using=47;
	public const int Stmt_While=48;
	public const int Struct=49;
	public const int Type_IDENT=50;
	public const int Type_Ref=51;
	public const int Type_Tuple=52;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[183+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:145:8: public root : overall_block ( NEWLINE )* EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int root_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE2 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE2_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(145, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// SugarCpp.g:146:2: ( overall_block ( NEWLINE )* EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:146:4: overall_block ( NEWLINE )* EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(146, 4);
			PushFollow(Follow._overall_block_in_root396);
			overall_block1=overall_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, overall_block1.Tree);
			DebugLocation(146, 19);
			// SugarCpp.g:146:19: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:146:19: NEWLINE
					{
					DebugLocation(146, 19);
					NEWLINE2=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root399); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NEWLINE2_tree = (CommonTree)adaptor.Create(NEWLINE2);
					adaptor.AddChild(root_0, NEWLINE2_tree);
					}

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(146, 28);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root402); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF3_tree = (CommonTree)adaptor.Create(EOF3);
			adaptor.AddChild(root_0, EOF3_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
			if (state.backtracking > 0) { Memoize(input, 1, root_StartIndex); }

		}
		DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_overall_block();
	partial void LeaveRule_overall_block();

	// $ANTLR start "overall_block"
	// SugarCpp.g:149:1: overall_block : ( ( NEWLINE )* node )+ ;
	[GrammarRule("overall_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> overall_block()
	{
		EnterRule_overall_block();
		EnterRule("overall_block", 2);
		TraceIn("overall_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int overall_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE4 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE4_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "overall_block");
		DebugLocation(149, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// SugarCpp.g:150:2: ( ( ( NEWLINE )* node )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:150:4: ( ( NEWLINE )* node )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(150, 4);
			// SugarCpp.g:150:4: ( ( NEWLINE )* node )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:150:5: ( NEWLINE )* node
					{
					DebugLocation(150, 5);
					// SugarCpp.g:150:5: ( NEWLINE )*
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch ( alt2 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:150:5: NEWLINE
							{
							DebugLocation(150, 5);
							NEWLINE4=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_overall_block414); if (state.failed) return retval;
							if (state.backtracking == 0) {
							NEWLINE4_tree = (CommonTree)adaptor.Create(NEWLINE4);
							adaptor.AddChild(root_0, NEWLINE4_tree);
							}

							}
							break;

						default:
							goto loop2;
						}
					}

					loop2:
						;

					} finally { DebugExitSubRule(2); }

					DebugLocation(150, 14);
					PushFollow(Follow._node_in_overall_block417);
					node5=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, node5.Tree);

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overall_block", 2);
			LeaveRule("overall_block", 2);
			LeaveRule_overall_block();
			if (state.backtracking > 0) { Memoize(input, 2, overall_block_StartIndex); }

		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "overall_block"); }
		return retval;

	}
	// $ANTLR end "overall_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:153:1: node : ( func_def | import_def | enum_def | struct_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> struct_def9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(153, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// SugarCpp.g:154:2: ( func_def | import_def | enum_def | struct_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				int LA4_1 = input.LA(2);

				if ((LA4_1==IDENT||LA4_1==58||LA4_1==62||LA4_1==81||LA4_1==92))
				{
					alt4 = 1;
				}
				else if ((LA4_1==67||LA4_1==77))
				{
					alt4 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 4, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 101:
				{
				alt4 = 2;
				}
				break;
			case 98:
				{
				alt4 = 3;
				}
				break;
			case 106:
				{
				alt4 = 4;
				}
				break;
			case 103:
				{
				alt4 = 5;
				}
				break;
			case 109:
				{
				alt4 = 7;
				}
				break;
			case 108:
				{
				alt4 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:154:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(154, 4);
				PushFollow(Follow._func_def_in_node430);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:155:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(155, 4);
				PushFollow(Follow._import_def_in_node435);
				import_def7=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:156:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(156, 4);
				PushFollow(Follow._enum_def_in_node440);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:157:4: struct_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 4);
				PushFollow(Follow._struct_def_in_node445);
				struct_def9=struct_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_def9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:158:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(158, 4);
				PushFollow(Follow._namespace_def_in_node450);
				namespace_def10=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:159:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._stmt_alloc_in_node455);
				stmt_alloc11=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:160:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._stmt_using_in_node460);
				stmt_using12=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:161:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._stmt_typedef_in_node465);
				stmt_typedef13=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
			if (state.backtracking > 0) { Memoize(input, 3, node_StartIndex); }

		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:164:1: import_def : 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 4);
		TraceIn("import_def", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int import_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal14 = default(IToken);
		IToken STRING15 = default(IToken);
		IToken INDENT16 = default(IToken);
		IToken NEWLINE17 = default(IToken);
		IToken STRING18 = default(IToken);
		IToken NEWLINE19 = default(IToken);
		IToken DEDENT20 = default(IToken);

		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		CommonTree INDENT16_tree = default(CommonTree);
		CommonTree NEWLINE17_tree = default(CommonTree);
		CommonTree STRING18_tree = default(CommonTree);
		CommonTree NEWLINE19_tree = default(CommonTree);
		CommonTree DEDENT20_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(164, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// SugarCpp.g:165:2: ( 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:165:4: 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			{
			DebugLocation(165, 4);
			string_literal14=(IToken)Match(input,101,Follow._101_in_import_def476); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(string_literal14);

			DebugLocation(165, 13);
			// SugarCpp.g:165:13: ( STRING )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==STRING))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:165:13: STRING
				{
				DebugLocation(165, 13);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_import_def478); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING15);


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(165, 21);
			// SugarCpp.g:165:21: ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==INDENT))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:165:22: INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT
				{
				DebugLocation(165, 22);
				INDENT16=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def482); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT16);

				DebugLocation(165, 29);
				// SugarCpp.g:165:29: ( ( NEWLINE )+ STRING )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					try
					{
						alt7 = dfa7.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:165:30: ( NEWLINE )+ STRING
						{
						DebugLocation(165, 30);
						// SugarCpp.g:165:30: ( NEWLINE )+
						int cnt6=0;
						try { DebugEnterSubRule(6);
						while (true)
						{
							int alt6=2;
							try { DebugEnterDecision(6, false);
							int LA6_0 = input.LA(1);

							if ((LA6_0==NEWLINE))
							{
								alt6 = 1;
							}


							} finally { DebugExitDecision(6); }
							switch (alt6)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:165:30: NEWLINE
								{
								DebugLocation(165, 30);
								NEWLINE17=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def485); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE17);


								}
								break;

							default:
								if (cnt6 >= 1)
									goto loop6;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee6 = new EarlyExitException( 6, input );
								DebugRecognitionException(eee6);
								throw eee6;
							}
							cnt6++;
						}
						loop6:
							;

						} finally { DebugExitSubRule(6); }

						DebugLocation(165, 39);
						STRING18=(IToken)Match(input,STRING,Follow._STRING_in_import_def488); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING18);


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(165, 48);
				// SugarCpp.g:165:48: ( NEWLINE )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0==NEWLINE))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:165:48: NEWLINE
						{
						DebugLocation(165, 48);
						NEWLINE19=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def492); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE19);


						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(165, 57);
				DEDENT20=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def495); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT20);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 165:66: -> ^( Import ( STRING )* )
			{
				DebugLocation(165, 69);
				// SugarCpp.g:165:69: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(165, 71);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(165, 78);
				// SugarCpp.g:165:78: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(165, 78);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 4);
			LeaveRule("import_def", 4);
			LeaveRule_import_def();
			if (state.backtracking > 0) { Memoize(input, 4, import_def_StartIndex); }

		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:168:1: enum_def : 'enum' IDENT '=' IDENT ( '|' IDENT )* -> ^( Enum ( IDENT )+ ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 5);
		TraceIn("enum_def", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enum_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal21 = default(IToken);
		IToken IDENT22 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken IDENT24 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken IDENT26 = default(IToken);

		CommonTree string_literal21_tree = default(CommonTree);
		CommonTree IDENT22_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree IDENT24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree IDENT26_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(168, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// SugarCpp.g:169:2: ( 'enum' IDENT '=' IDENT ( '|' IDENT )* -> ^( Enum ( IDENT )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:169:4: 'enum' IDENT '=' IDENT ( '|' IDENT )*
			{
			DebugLocation(169, 4);
			string_literal21=(IToken)Match(input,98,Follow._98_in_enum_def517); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_98.Add(string_literal21);

			DebugLocation(169, 11);
			IDENT22=(IToken)Match(input,IDENT,Follow._IDENT_in_enum_def519); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT22);

			DebugLocation(169, 17);
			char_literal23=(IToken)Match(input,85,Follow._85_in_enum_def521); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_85.Add(char_literal23);

			DebugLocation(169, 21);
			IDENT24=(IToken)Match(input,IDENT,Follow._IDENT_in_enum_def523); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT24);

			DebugLocation(169, 27);
			// SugarCpp.g:169:27: ( '|' IDENT )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==111))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:169:28: '|' IDENT
					{
					DebugLocation(169, 28);
					char_literal25=(IToken)Match(input,111,Follow._111_in_enum_def526); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_111.Add(char_literal25);

					DebugLocation(169, 32);
					IDENT26=(IToken)Match(input,IDENT,Follow._IDENT_in_enum_def528); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT26);


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 169:40: -> ^( Enum ( IDENT )+ )
			{
				DebugLocation(169, 43);
				// SugarCpp.g:169:43: ^( Enum ( IDENT )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(169, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(169, 50);
				if (!(stream_IDENT.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_IDENT.HasNext )
				{
					DebugLocation(169, 50);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

				}
				stream_IDENT.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 5);
			LeaveRule("enum_def", 5);
			LeaveRule_enum_def();
			if (state.backtracking > 0) { Memoize(input, 5, enum_def_StartIndex); }

		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:172:1: namespace_def : 'namespace' IDENT INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace IDENT overall_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 6);
		TraceIn("namespace_def", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int namespace_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal27 = default(IToken);
		IToken IDENT28 = default(IToken);
		IToken INDENT29 = default(IToken);
		IToken NEWLINE31 = default(IToken);
		IToken DEDENT32 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal27_tree = default(CommonTree);
		CommonTree IDENT28_tree = default(CommonTree);
		CommonTree INDENT29_tree = default(CommonTree);
		CommonTree NEWLINE31_tree = default(CommonTree);
		CommonTree DEDENT32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_overall_block=new RewriteRuleSubtreeStream(adaptor,"rule overall_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(172, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// SugarCpp.g:173:2: ( 'namespace' IDENT INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace IDENT overall_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:173:4: 'namespace' IDENT INDENT overall_block ( NEWLINE )* DEDENT
			{
			DebugLocation(173, 4);
			string_literal27=(IToken)Match(input,103,Follow._103_in_namespace_def550); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_103.Add(string_literal27);

			DebugLocation(173, 16);
			IDENT28=(IToken)Match(input,IDENT,Follow._IDENT_in_namespace_def552); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT28);

			DebugLocation(173, 22);
			INDENT29=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def554); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT29);

			DebugLocation(173, 29);
			PushFollow(Follow._overall_block_in_namespace_def556);
			overall_block30=overall_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_overall_block.Add(overall_block30.Tree);
			DebugLocation(173, 43);
			// SugarCpp.g:173:43: ( NEWLINE )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:173:43: NEWLINE
					{
					DebugLocation(173, 43);
					NEWLINE31=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def558); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE31);


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(173, 52);
			DEDENT32=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def561); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT32);



			{
			// AST REWRITE
			// elements: IDENT, overall_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 173:59: -> ^( Namespace IDENT overall_block )
			{
				DebugLocation(173, 62);
				// SugarCpp.g:173:62: ^( Namespace IDENT overall_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(173, 64);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(173, 74);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(173, 80);
				adaptor.AddChild(root_1, stream_overall_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 6);
			LeaveRule("namespace_def", 6);
			LeaveRule_namespace_def();
			if (state.backtracking > 0) { Memoize(input, 6, namespace_def_StartIndex); }

		}
		DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_struct_def();
	partial void LeaveRule_struct_def();

	// $ANTLR start "struct_def"
	// SugarCpp.g:176:1: struct_def : 'struct' IDENT INDENT struct_block ( NEWLINE )* DEDENT -> ^( Struct IDENT struct_block ) ;
	[GrammarRule("struct_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> struct_def()
	{
		EnterRule_struct_def();
		EnterRule("struct_def", 7);
		TraceIn("struct_def", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int struct_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal33 = default(IToken);
		IToken IDENT34 = default(IToken);
		IToken INDENT35 = default(IToken);
		IToken NEWLINE37 = default(IToken);
		IToken DEDENT38 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> struct_block36 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal33_tree = default(CommonTree);
		CommonTree IDENT34_tree = default(CommonTree);
		CommonTree INDENT35_tree = default(CommonTree);
		CommonTree NEWLINE37_tree = default(CommonTree);
		CommonTree DEDENT38_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_struct_block=new RewriteRuleSubtreeStream(adaptor,"rule struct_block");
		try { DebugEnterRule(GrammarFileName, "struct_def");
		DebugLocation(176, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// SugarCpp.g:177:2: ( 'struct' IDENT INDENT struct_block ( NEWLINE )* DEDENT -> ^( Struct IDENT struct_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:177:4: 'struct' IDENT INDENT struct_block ( NEWLINE )* DEDENT
			{
			DebugLocation(177, 4);
			string_literal33=(IToken)Match(input,106,Follow._106_in_struct_def582); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_106.Add(string_literal33);

			DebugLocation(177, 13);
			IDENT34=(IToken)Match(input,IDENT,Follow._IDENT_in_struct_def584); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT34);

			DebugLocation(177, 19);
			INDENT35=(IToken)Match(input,INDENT,Follow._INDENT_in_struct_def586); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT35);

			DebugLocation(177, 26);
			PushFollow(Follow._struct_block_in_struct_def588);
			struct_block36=struct_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_struct_block.Add(struct_block36.Tree);
			DebugLocation(177, 39);
			// SugarCpp.g:177:39: ( NEWLINE )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==NEWLINE))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:177:39: NEWLINE
					{
					DebugLocation(177, 39);
					NEWLINE37=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_struct_def590); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE37);


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(177, 48);
			DEDENT38=(IToken)Match(input,DEDENT,Follow._DEDENT_in_struct_def593); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT38);



			{
			// AST REWRITE
			// elements: struct_block, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 177:55: -> ^( Struct IDENT struct_block )
			{
				DebugLocation(177, 58);
				// SugarCpp.g:177:58: ^( Struct IDENT struct_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(177, 60);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Struct, "Struct"), root_1);

				DebugLocation(177, 67);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(177, 73);
				adaptor.AddChild(root_1, stream_struct_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_def", 7);
			LeaveRule("struct_def", 7);
			LeaveRule_struct_def();
			if (state.backtracking > 0) { Memoize(input, 7, struct_def_StartIndex); }

		}
		DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_def"); }
		return retval;

	}
	// $ANTLR end "struct_def"

	partial void EnterRule_struct_block();
	partial void LeaveRule_struct_block();

	// $ANTLR start "struct_block"
	// SugarCpp.g:180:1: struct_block : ( ( NEWLINE )* struct_node )+ ;
	[GrammarRule("struct_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> struct_block()
	{
		EnterRule_struct_block();
		EnterRule("struct_block", 8);
		TraceIn("struct_block", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int struct_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE39 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> struct_node40 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE39_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "struct_block");
		DebugLocation(180, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// SugarCpp.g:181:2: ( ( ( NEWLINE )* struct_node )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:181:4: ( ( NEWLINE )* struct_node )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(181, 4);
			// SugarCpp.g:181:4: ( ( NEWLINE )* struct_node )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				try
				{
					alt14 = dfa14.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:181:5: ( NEWLINE )* struct_node
					{
					DebugLocation(181, 5);
					// SugarCpp.g:181:5: ( NEWLINE )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if ((LA13_0==NEWLINE))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:181:5: NEWLINE
							{
							DebugLocation(181, 5);
							NEWLINE39=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_struct_block615); if (state.failed) return retval;
							if (state.backtracking == 0) {
							NEWLINE39_tree = (CommonTree)adaptor.Create(NEWLINE39);
							adaptor.AddChild(root_0, NEWLINE39_tree);
							}

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }

					DebugLocation(181, 14);
					PushFollow(Follow._struct_node_in_struct_block618);
					struct_node40=struct_node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_node40.Tree);

					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_block", 8);
			LeaveRule("struct_block", 8);
			LeaveRule_struct_block();
			if (state.backtracking > 0) { Memoize(input, 8, struct_block_StartIndex); }

		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_block"); }
		return retval;

	}
	// $ANTLR end "struct_block"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:184:1: attribute : '[' IDENT ']' -> ^( Attribute IDENT ) ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal41 = default(IToken);
		IToken IDENT42 = default(IToken);
		IToken char_literal43 = default(IToken);

		CommonTree char_literal41_tree = default(CommonTree);
		CommonTree IDENT42_tree = default(CommonTree);
		CommonTree char_literal43_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(184, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// SugarCpp.g:185:2: ( '[' IDENT ']' -> ^( Attribute IDENT ) )
			DebugEnterAlt(1);
			// SugarCpp.g:185:3: '[' IDENT ']'
			{
			DebugLocation(185, 3);
			char_literal41=(IToken)Match(input,92,Follow._92_in_attribute630); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal41);

			DebugLocation(185, 7);
			IDENT42=(IToken)Match(input,IDENT,Follow._IDENT_in_attribute632); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT42);

			DebugLocation(185, 13);
			char_literal43=(IToken)Match(input,93,Follow._93_in_attribute634); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal43);



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 185:17: -> ^( Attribute IDENT )
			{
				DebugLocation(185, 20);
				// SugarCpp.g:185:20: ^( Attribute IDENT )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(185, 22);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

				DebugLocation(185, 32);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
			if (state.backtracking > 0) { Memoize(input, 9, attribute_StartIndex); }

		}
		DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_struct_node();
	partial void LeaveRule_struct_node();

	// $ANTLR start "struct_node"
	// SugarCpp.g:188:1: struct_node : ( attribute ( NEWLINE )+ )* node ;
	[GrammarRule("struct_node")]
	private AstParserRuleReturnScope<CommonTree, IToken> struct_node()
	{
		EnterRule_struct_node();
		EnterRule("struct_node", 10);
		TraceIn("struct_node", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int struct_node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE45 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> node46 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE45_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "struct_node");
		DebugLocation(188, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// SugarCpp.g:189:2: ( ( attribute ( NEWLINE )+ )* node )
			DebugEnterAlt(1);
			// SugarCpp.g:189:4: ( attribute ( NEWLINE )+ )* node
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(189, 4);
			// SugarCpp.g:189:4: ( attribute ( NEWLINE )+ )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==92))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:189:5: attribute ( NEWLINE )+
					{
					DebugLocation(189, 5);
					PushFollow(Follow._attribute_in_struct_node654);
					attribute44=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attribute44.Tree);
					DebugLocation(189, 15);
					// SugarCpp.g:189:15: ( NEWLINE )+
					int cnt15=0;
					try { DebugEnterSubRule(15);
					while (true)
					{
						int alt15=2;
						try { DebugEnterDecision(15, false);
						int LA15_0 = input.LA(1);

						if ((LA15_0==NEWLINE))
						{
							alt15 = 1;
						}


						} finally { DebugExitDecision(15); }
						switch (alt15)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:189:15: NEWLINE
							{
							DebugLocation(189, 15);
							NEWLINE45=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_struct_node656); if (state.failed) return retval;
							if (state.backtracking == 0) {
							NEWLINE45_tree = (CommonTree)adaptor.Create(NEWLINE45);
							adaptor.AddChild(root_0, NEWLINE45_tree);
							}

							}
							break;

						default:
							if (cnt15 >= 1)
								goto loop15;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee15 = new EarlyExitException( 15, input );
							DebugRecognitionException(eee15);
							throw eee15;
						}
						cnt15++;
					}
					loop15:
						;

					} finally { DebugExitSubRule(15); }


					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(189, 27);
			PushFollow(Follow._node_in_struct_node662);
			node46=node();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, node46.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_node", 10);
			LeaveRule("struct_node", 10);
			LeaveRule_struct_node();
			if (state.backtracking > 0) { Memoize(input, 10, struct_node_StartIndex); }

		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_node"); }
		return retval;

	}
	// $ANTLR end "struct_node"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:192:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 11);
		TraceIn("type_name_op", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal47 = default(IToken);
		IToken char_literal48 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken char_literal50 = default(IToken);

		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree char_literal48_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree char_literal50_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(192, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// SugarCpp.g:192:13: ( '*' | '[' ']' | '&' )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case 62:
				{
				alt17 = 1;
				}
				break;
			case 92:
				{
				alt17 = 2;
				}
				break;
			case 58:
				{
				alt17 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:192:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 15);
				char_literal47=(IToken)Match(input,62,Follow._62_in_type_name_op671); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal47_tree = (CommonTree)adaptor.Create(char_literal47);
				adaptor.AddChild(root_0, char_literal47_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:192:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 21);
				char_literal48=(IToken)Match(input,92,Follow._92_in_type_name_op675); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal48_tree = (CommonTree)adaptor.Create(char_literal48);
				adaptor.AddChild(root_0, char_literal48_tree);
				}
				DebugLocation(192, 25);
				char_literal49=(IToken)Match(input,93,Follow._93_in_type_name_op677); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal49_tree = (CommonTree)adaptor.Create(char_literal49);
				adaptor.AddChild(root_0, char_literal49_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:192:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 31);
				char_literal50=(IToken)Match(input,58,Follow._58_in_type_name_op681); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal50_tree = (CommonTree)adaptor.Create(char_literal50);
				adaptor.AddChild(root_0, char_literal50_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 11);
			LeaveRule("type_name_op", 11);
			LeaveRule_type_name_op();
			if (state.backtracking > 0) { Memoize(input, 11, type_name_op_StartIndex); }

		}
		DebugLocation(192, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:193:1: type_name : IDENT ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 12);
		TraceIn("type_name", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT51 = default(IToken);
		IToken char_literal52 = default(IToken);
		IToken char_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name55 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT51_tree = default(CommonTree);
		CommonTree char_literal52_tree = default(CommonTree);
		CommonTree char_literal54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(193, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// SugarCpp.g:194:2: ( IDENT ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:194:4: IDENT ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(194, 4);
			IDENT51=(IToken)Match(input,IDENT,Follow._IDENT_in_type_name690); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT51);

			DebugLocation(194, 10);
			// SugarCpp.g:194:10: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==81))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:194:11: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(194, 11);
				char_literal52=(IToken)Match(input,81,Follow._81_in_type_name693); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_81.Add(char_literal52);

				DebugLocation(194, 15);
				// SugarCpp.g:194:15: ( type_name ( ',' type_name )* )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==IDENT))
				{
					alt19 = 1;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:194:16: type_name ( ',' type_name )*
					{
					DebugLocation(194, 16);
					PushFollow(Follow._type_name_in_type_name696);
					type_name53=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name53.Tree);
					DebugLocation(194, 26);
					// SugarCpp.g:194:26: ( ',' type_name )*
					try { DebugEnterSubRule(18);
					while (true)
					{
						int alt18=2;
						try { DebugEnterDecision(18, false);
						int LA18_0 = input.LA(1);

						if ((LA18_0==67))
						{
							alt18 = 1;
						}


						} finally { DebugExitDecision(18); }
						switch ( alt18 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:194:27: ',' type_name
							{
							DebugLocation(194, 27);
							char_literal54=(IToken)Match(input,67,Follow._67_in_type_name699); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_67.Add(char_literal54);

							DebugLocation(194, 31);
							PushFollow(Follow._type_name_in_type_name701);
							type_name55=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name55.Tree);

							}
							break;

						default:
							goto loop18;
						}
					}

					loop18:
						;

					} finally { DebugExitSubRule(18); }


					}
					break;

				}
				} finally { DebugExitSubRule(19); }

				DebugLocation(194, 45);
				char_literal56=(IToken)Match(input,88,Follow._88_in_type_name707); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal56);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(194, 51);
			// SugarCpp.g:194:51: ( type_name_op )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==92))
				{
					int LA21_2 = input.LA(2);

					if ((LA21_2==93))
					{
						alt21 = 1;
					}


				}
				else if ((LA21_0==58||LA21_0==62))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:194:51: type_name_op
					{
					DebugLocation(194, 51);
					PushFollow(Follow._type_name_op_in_type_name711);
					type_name_op57=type_name_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name_op.Add(type_name_op57.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: 81, 88, type_name_op, IDENT, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 194:65: -> ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(194, 68);
				// SugarCpp.g:194:68: ^( Type_IDENT IDENT ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(194, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(194, 81);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(194, 87);
				// SugarCpp.g:194:87: ( '<' ( type_name )* '>' )?
				if (stream_81.HasNext||stream_88.HasNext||stream_type_name.HasNext)
				{
					DebugLocation(194, 88);
					adaptor.AddChild(root_1, stream_81.NextNode());
					DebugLocation(194, 92);
					// SugarCpp.g:194:92: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(194, 92);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(194, 103);
					adaptor.AddChild(root_1, stream_88.NextNode());

				}
				stream_81.Reset();
				stream_88.Reset();
				stream_type_name.Reset();
				DebugLocation(194, 110);
				// SugarCpp.g:194:110: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(194, 110);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 12);
			LeaveRule("type_name", 12);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 12, type_name_StartIndex); }

		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:197:1: generic_parameter : '<' IDENT ( ',' ! IDENT )* '>' ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 13);
		TraceIn("generic_parameter", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int generic_parameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal58 = default(IToken);
		IToken IDENT59 = default(IToken);
		IToken char_literal60 = default(IToken);
		IToken IDENT61 = default(IToken);
		IToken char_literal62 = default(IToken);

		CommonTree char_literal58_tree = default(CommonTree);
		CommonTree IDENT59_tree = default(CommonTree);
		CommonTree char_literal60_tree = default(CommonTree);
		CommonTree IDENT61_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(197, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// SugarCpp.g:198:2: ( '<' IDENT ( ',' ! IDENT )* '>' )
			DebugEnterAlt(1);
			// SugarCpp.g:198:4: '<' IDENT ( ',' ! IDENT )* '>'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(198, 4);
			char_literal58=(IToken)Match(input,81,Follow._81_in_generic_parameter745); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal58_tree = (CommonTree)adaptor.Create(char_literal58);
			adaptor.AddChild(root_0, char_literal58_tree);
			}
			DebugLocation(198, 8);
			IDENT59=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter747); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT59_tree = (CommonTree)adaptor.Create(IDENT59);
			adaptor.AddChild(root_0, IDENT59_tree);
			}
			DebugLocation(198, 14);
			// SugarCpp.g:198:14: ( ',' ! IDENT )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==67))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:198:15: ',' ! IDENT
					{
					DebugLocation(198, 18);
					char_literal60=(IToken)Match(input,67,Follow._67_in_generic_parameter750); if (state.failed) return retval;
					DebugLocation(198, 20);
					IDENT61=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter753); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT61_tree = (CommonTree)adaptor.Create(IDENT61);
					adaptor.AddChild(root_0, IDENT61_tree);
					}

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }

			DebugLocation(198, 28);
			char_literal62=(IToken)Match(input,88,Follow._88_in_generic_parameter757); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal62_tree = (CommonTree)adaptor.Create(char_literal62);
			adaptor.AddChild(root_0, char_literal62_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 13);
			LeaveRule("generic_parameter", 13);
			LeaveRule_generic_parameter();
			if (state.backtracking > 0) { Memoize(input, 13, generic_parameter_StartIndex); }

		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:201:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 14);
		TraceIn("func_args", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(201, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// SugarCpp.g:202:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:202:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(202, 4);
			PushFollow(Follow._stmt_alloc_in_func_args768);
			stmt_alloc63=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc63.Tree);
			DebugLocation(202, 15);
			// SugarCpp.g:202:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==67))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:202:16: ',' stmt_alloc
					{
					DebugLocation(202, 16);
					char_literal64=(IToken)Match(input,67,Follow._67_in_func_args771); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_67.Add(char_literal64);

					DebugLocation(202, 20);
					PushFollow(Follow._stmt_alloc_in_func_args773);
					stmt_alloc65=stmt_alloc();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc65.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 202:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(202, 36);
				// SugarCpp.g:202:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(202, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(202, 48);
				// SugarCpp.g:202:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(202, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 14);
			LeaveRule("func_args", 14);
			LeaveRule_func_args();
			if (state.backtracking > 0) { Memoize(input, 14, func_args_StartIndex); }

		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:205:1: func_def : type_name IDENT ( generic_parameter )? '(' ( func_args )? ')' stmt_block ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 15);
		TraceIn("func_def", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(205, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// SugarCpp.g:206:2: ( type_name IDENT ( generic_parameter )? '(' ( func_args )? ')' stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:206:4: type_name IDENT ( generic_parameter )? '(' ( func_args )? ')' stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(206, 4);
			PushFollow(Follow._type_name_in_func_def795);
			type_name66=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name66.Tree);
			DebugLocation(206, 14);
			IDENT67=(IToken)Match(input,IDENT,Follow._IDENT_in_func_def797); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT67_tree = (CommonTree)adaptor.Create(IDENT67);
			adaptor.AddChild(root_0, IDENT67_tree);
			}
			DebugLocation(206, 20);
			// SugarCpp.g:206:20: ( generic_parameter )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==81))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:206:20: generic_parameter
				{
				DebugLocation(206, 20);
				PushFollow(Follow._generic_parameter_in_func_def799);
				generic_parameter68=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_parameter68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(206, 39);
			char_literal69=(IToken)Match(input,60,Follow._60_in_func_def802); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal69_tree = (CommonTree)adaptor.Create(char_literal69);
			adaptor.AddChild(root_0, char_literal69_tree);
			}
			DebugLocation(206, 43);
			// SugarCpp.g:206:43: ( func_args )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==IDENT))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:206:43: func_args
				{
				DebugLocation(206, 43);
				PushFollow(Follow._func_args_in_func_def804);
				func_args70=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_args70.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(206, 54);
			char_literal71=(IToken)Match(input,61,Follow._61_in_func_def807); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal71_tree = (CommonTree)adaptor.Create(char_literal71);
			adaptor.AddChild(root_0, char_literal71_tree);
			}
			DebugLocation(206, 58);
			PushFollow(Follow._stmt_block_in_func_def809);
			stmt_block72=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_block72.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 15);
			LeaveRule("func_def", 15);
			LeaveRule_func_def();
			if (state.backtracking > 0) { Memoize(input, 15, func_def_StartIndex); }

		}
		DebugLocation(207, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:209:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 16);
		TraceIn("stmt_block", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INDENT73 = default(IToken);
		IToken NEWLINE74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken DEDENT77 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt75 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT73_tree = default(CommonTree);
		CommonTree NEWLINE74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree DEDENT77_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(209, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// SugarCpp.g:210:2: ( INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:210:4: INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(210, 4);
			INDENT73=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block823); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT73);

			DebugLocation(210, 11);
			// SugarCpp.g:210:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				try
				{
					alt27 = dfa27.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:210:12: ( NEWLINE )+ stmt
					{
					DebugLocation(210, 12);
					// SugarCpp.g:210:12: ( NEWLINE )+
					int cnt26=0;
					try { DebugEnterSubRule(26);
					while (true)
					{
						int alt26=2;
						try { DebugEnterDecision(26, false);
						int LA26_0 = input.LA(1);

						if ((LA26_0==NEWLINE))
						{
							alt26 = 1;
						}


						} finally { DebugExitDecision(26); }
						switch (alt26)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:210:12: NEWLINE
							{
							DebugLocation(210, 12);
							NEWLINE74=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block826); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE74);


							}
							break;

						default:
							if (cnt26 >= 1)
								goto loop26;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee26 = new EarlyExitException( 26, input );
							DebugRecognitionException(eee26);
							throw eee26;
						}
						cnt26++;
					}
					loop26:
						;

					} finally { DebugExitSubRule(26); }

					DebugLocation(210, 21);
					PushFollow(Follow._stmt_in_stmt_block829);
					stmt75=stmt();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt.Add(stmt75.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }

			DebugLocation(210, 28);
			// SugarCpp.g:210:28: ( NEWLINE )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==NEWLINE))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:210:28: NEWLINE
					{
					DebugLocation(210, 28);
					NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block833); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE76);


					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }

			DebugLocation(210, 37);
			DEDENT77=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block836); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT77);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 210:44: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(210, 47);
				// SugarCpp.g:210:47: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(210, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(210, 60);
				// SugarCpp.g:210:60: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(210, 60);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 16);
			LeaveRule("stmt_block", 16);
			LeaveRule_stmt_block();
			if (state.backtracking > 0) { Memoize(input, 16, stmt_block_StartIndex); }

		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:213:1: stmt : stmt_expr ;
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 17);
		TraceIn("stmt", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr78 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(213, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// SugarCpp.g:214:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:214:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(214, 4);
			PushFollow(Follow._stmt_expr_in_stmt856);
			stmt_expr78=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr78.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 17);
			LeaveRule("stmt", 17);
			LeaveRule_stmt();
			if (state.backtracking > 0) { Memoize(input, 17, stmt_StartIndex); }

		}
		DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:217:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_if | stmt_while | stmt_for | stmt_try | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 18);
		TraceIn("stmt_expr", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(217, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// SugarCpp.g:218:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_if | stmt_while | stmt_for | stmt_try | stmt_modify )
			int alt29=9;
			try { DebugEnterDecision(29, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				int LA29_1 = input.LA(2);

				if ((LA29_1==67||LA29_1==77))
				{
					alt29 = 1;
				}
				else if ((LA29_1==EOF||LA29_1==DEDENT||LA29_1==NEWLINE||LA29_1==56||(LA29_1>=59 && LA29_1<=60)||LA29_1==63||(LA29_1>=65 && LA29_1<=66)||(LA29_1>=69 && LA29_1<=71)||LA29_1==73||LA29_1==76||(LA29_1>=78 && LA29_1<=79)||LA29_1==81||LA29_1==83||LA29_1==85||(LA29_1>=91 && LA29_1<=92)||LA29_1==95||LA29_1==112))
				{
					alt29 = 9;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 105:
				{
				alt29 = 2;
				}
				break;
			case 109:
				{
				alt29 = 3;
				}
				break;
			case 108:
				{
				alt29 = 4;
				}
				break;
			case 100:
				{
				alt29 = 5;
				}
				break;
			case 110:
				{
				alt29 = 6;
				}
				break;
			case 99:
				{
				alt29 = 7;
				}
				break;
			case 107:
				{
				alt29 = 8;
				}
				break;
			case 60:
				{
				alt29 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:218:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr867);
				stmt_alloc79=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc79.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:219:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr872);
				stmt_return80=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return80.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:220:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr877);
				stmt_using81=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using81.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:221:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr882);
				stmt_typedef82=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef82.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:222:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._stmt_if_in_stmt_expr887);
				stmt_if83=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if83.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:223:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._stmt_while_in_stmt_expr892);
				stmt_while84=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while84.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:224:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._stmt_for_in_stmt_expr897);
				stmt_for85=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for85.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:225:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._stmt_try_in_stmt_expr902);
				stmt_try86=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try86.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// SugarCpp.g:226:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr907);
				stmt_modify87=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify87.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 18);
			LeaveRule("stmt_expr", 18);
			LeaveRule_stmt_expr();
			if (state.backtracking > 0) { Memoize(input, 18, stmt_expr_StartIndex); }

		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:229:1: stmt_typedef : 'typedef' IDENT '=' type_name -> ^( Stmt_Typedef type_name IDENT ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 19);
		TraceIn("stmt_typedef", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_typedef_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal88 = default(IToken);
		IToken IDENT89 = default(IToken);
		IToken char_literal90 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name91 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal88_tree = default(CommonTree);
		CommonTree IDENT89_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(229, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// SugarCpp.g:230:2: ( 'typedef' IDENT '=' type_name -> ^( Stmt_Typedef type_name IDENT ) )
			DebugEnterAlt(1);
			// SugarCpp.g:230:4: 'typedef' IDENT '=' type_name
			{
			DebugLocation(230, 4);
			string_literal88=(IToken)Match(input,108,Follow._108_in_stmt_typedef918); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_108.Add(string_literal88);

			DebugLocation(230, 14);
			IDENT89=(IToken)Match(input,IDENT,Follow._IDENT_in_stmt_typedef920); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT89);

			DebugLocation(230, 20);
			char_literal90=(IToken)Match(input,85,Follow._85_in_stmt_typedef922); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_85.Add(char_literal90);

			DebugLocation(230, 24);
			PushFollow(Follow._type_name_in_stmt_typedef924);
			type_name91=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name91.Tree);


			{
			// AST REWRITE
			// elements: IDENT, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 230:34: -> ^( Stmt_Typedef type_name IDENT )
			{
				DebugLocation(230, 37);
				// SugarCpp.g:230:37: ^( Stmt_Typedef type_name IDENT )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(230, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(230, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(230, 62);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 19);
			LeaveRule("stmt_typedef", 19);
			LeaveRule_stmt_typedef();
			if (state.backtracking > 0) { Memoize(input, 19, stmt_typedef_StartIndex); }

		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:233:1: stmt_using_item : ( IDENT | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 20);
		TraceIn("stmt_using_item", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set92 = default(IToken);

		CommonTree set92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(233, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// SugarCpp.g:233:16: ( IDENT | 'namespace' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(233, 16);

			set92=(IToken)input.LT(1);
			if (input.LA(1)==IDENT||input.LA(1)==103)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set92));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 20);
			LeaveRule("stmt_using_item", 20);
			LeaveRule_stmt_using_item();
			if (state.backtracking > 0) { Memoize(input, 20, stmt_using_item_StartIndex); }

		}
		DebugLocation(233, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:234:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 21);
		TraceIn("stmt_using", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal93 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item94 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal93_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(234, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// SugarCpp.g:235:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:235:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(235, 4);
			string_literal93=(IToken)Match(input,109,Follow._109_in_stmt_using955); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_109.Add(string_literal93);

			DebugLocation(235, 12);
			// SugarCpp.g:235:12: ( stmt_using_item )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				try
				{
					alt30 = dfa30.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:235:12: stmt_using_item
					{
					DebugLocation(235, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using957);
					stmt_using_item94=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item94.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 235:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(235, 32);
				// SugarCpp.g:235:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(235, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(235, 45);
				// SugarCpp.g:235:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(235, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 21);
			LeaveRule("stmt_using", 21);
			LeaveRule_stmt_using();
			if (state.backtracking > 0) { Memoize(input, 21, stmt_using_StartIndex); }

		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:238:1: stmt_return : 'return' ( expr )? -> ^( Expr_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 22);
		TraceIn("stmt_return", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_return_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal95 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr96 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal95_tree = default(CommonTree);
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(238, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// SugarCpp.g:239:2: ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:239:4: 'return' ( expr )?
			{
			DebugLocation(239, 4);
			string_literal95=(IToken)Match(input,105,Follow._105_in_stmt_return978); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_105.Add(string_literal95);

			DebugLocation(239, 13);
			// SugarCpp.g:239:13: ( expr )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==IDENT||LA31_0==NUMBER||LA31_0==STRING||LA31_0==53||LA31_0==58||LA31_0==60||LA31_0==62||(LA31_0>=64 && LA31_0<=65)||(LA31_0>=68 && LA31_0<=69)||LA31_0==104||LA31_0==114))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:239:13: expr
				{
				DebugLocation(239, 13);
				PushFollow(Follow._expr_in_stmt_return980);
				expr96=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr96.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 239:19: -> ^( Expr_Return ( expr )? )
			{
				DebugLocation(239, 22);
				// SugarCpp.g:239:22: ^( Expr_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(239, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Return, "Expr_Return"), root_1);

				DebugLocation(239, 36);
				// SugarCpp.g:239:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(239, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 22);
			LeaveRule("stmt_return", 22);
			LeaveRule_stmt_return();
			if (state.backtracking > 0) { Memoize(input, 22, stmt_return_StartIndex); }

		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:242:1: stmt_if : 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 23);
		TraceIn("stmt_if", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_if_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal97 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken string_literal102 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block103 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal97_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree string_literal102_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(242, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// SugarCpp.g:243:2: ( 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:243:4: 'if' '(' expr ')' stmt_block ( 'else' stmt_block )?
			{
			DebugLocation(243, 4);
			string_literal97=(IToken)Match(input,100,Follow._100_in_stmt_if1001); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_100.Add(string_literal97);

			DebugLocation(243, 9);
			char_literal98=(IToken)Match(input,60,Follow._60_in_stmt_if1003); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(char_literal98);

			DebugLocation(243, 13);
			PushFollow(Follow._expr_in_stmt_if1005);
			expr99=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr99.Tree);
			DebugLocation(243, 18);
			char_literal100=(IToken)Match(input,61,Follow._61_in_stmt_if1007); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal100);

			DebugLocation(243, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1009);
			stmt_block101=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block101.Tree);
			DebugLocation(243, 33);
			// SugarCpp.g:243:33: ( 'else' stmt_block )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==97))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:243:34: 'else' stmt_block
				{
				DebugLocation(243, 34);
				string_literal102=(IToken)Match(input,97,Follow._97_in_stmt_if1012); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_97.Add(string_literal102);

				DebugLocation(243, 41);
				PushFollow(Follow._stmt_block_in_stmt_if1014);
				stmt_block103=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block103.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: stmt_block, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 243:54: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(243, 57);
				// SugarCpp.g:243:57: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(243, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(243, 67);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(243, 72);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(243, 83);
				// SugarCpp.g:243:83: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(243, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 23);
			LeaveRule("stmt_if", 23);
			LeaveRule_stmt_if();
			if (state.backtracking > 0) { Memoize(input, 23, stmt_if_StartIndex); }

		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:246:1: stmt_while : 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 24);
		TraceIn("stmt_while", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_while_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal104 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block108 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal104_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(246, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// SugarCpp.g:247:2: ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:247:4: 'while' '(' expr ')' stmt_block
			{
			DebugLocation(247, 4);
			string_literal104=(IToken)Match(input,110,Follow._110_in_stmt_while1040); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_110.Add(string_literal104);

			DebugLocation(247, 12);
			char_literal105=(IToken)Match(input,60,Follow._60_in_stmt_while1042); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(char_literal105);

			DebugLocation(247, 16);
			PushFollow(Follow._expr_in_stmt_while1044);
			expr106=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr106.Tree);
			DebugLocation(247, 21);
			char_literal107=(IToken)Match(input,61,Follow._61_in_stmt_while1046); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal107);

			DebugLocation(247, 25);
			PushFollow(Follow._stmt_block_in_stmt_while1048);
			stmt_block108=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block108.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 247:36: -> ^( Stmt_While expr stmt_block )
			{
				DebugLocation(247, 39);
				// SugarCpp.g:247:39: ^( Stmt_While expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(247, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

				DebugLocation(247, 52);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(247, 57);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 24);
			LeaveRule("stmt_while", 24);
			LeaveRule_stmt_while();
			if (state.backtracking > 0) { Memoize(input, 24, stmt_while_StartIndex); }

		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:250:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 25);
		TraceIn("stmt_for", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_for_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal109 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken char_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken string_literal116 = default(IToken);
		IToken char_literal118 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block119 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal109_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree char_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree string_literal116_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(250, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// SugarCpp.g:255:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:255:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(255, 4);
			string_literal109=(IToken)Match(input,99,Follow._99_in_stmt_for1074); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_99.Add(string_literal109);

			DebugLocation(255, 10);
			char_literal110=(IToken)Match(input,60,Follow._60_in_stmt_for1076); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(char_literal110);

			DebugLocation(255, 14);
			PushFollow(Follow._expr_in_stmt_for1078);
			expr111=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr111.Tree);
			DebugLocation(255, 19);
			// SugarCpp.g:255:19: ( ';' expr ';' expr | 'in' expr )
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==80))
			{
				alt33 = 1;
			}
			else if ((LA33_0==102))
			{
				alt33 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:20: ';' expr ';' expr
				{
				DebugLocation(255, 20);
				char_literal112=(IToken)Match(input,80,Follow._80_in_stmt_for1081); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_80.Add(char_literal112);

				DebugLocation(255, 24);
				PushFollow(Follow._expr_in_stmt_for1083);
				expr113=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr113.Tree);
				DebugLocation(255, 29);
				char_literal114=(IToken)Match(input,80,Follow._80_in_stmt_for1085); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_80.Add(char_literal114);

				DebugLocation(255, 33);
				PushFollow(Follow._expr_in_stmt_for1087);
				expr115=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr115.Tree);
				DebugLocation(255, 38);
				if (state.backtracking == 0)
				{
					type=0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:255:50: 'in' expr
				{
				DebugLocation(255, 50);
				string_literal116=(IToken)Match(input,102,Follow._102_in_stmt_for1093); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_102.Add(string_literal116);

				DebugLocation(255, 55);
				PushFollow(Follow._expr_in_stmt_for1095);
				expr117=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr117.Tree);
				DebugLocation(255, 60);
				if (state.backtracking == 0)
				{
					type=1;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(255, 71);
			char_literal118=(IToken)Match(input,61,Follow._61_in_stmt_for1100); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal118);

			DebugLocation(255, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1102);
			stmt_block119=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block119.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, expr, stmt_block, expr, expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 256:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(256, 18);
				// SugarCpp.g:256:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(256, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(256, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(256, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(256, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(256, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 257:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(257, 7);
				// SugarCpp.g:257:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(257, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(257, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(257, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(257, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 25);
			LeaveRule("stmt_for", 25);
			LeaveRule_stmt_for();
			if (state.backtracking > 0) { Memoize(input, 25, stmt_for_StartIndex); }

		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:260:1: stmt_try : 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 26);
		TraceIn("stmt_try", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_try_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal120 = default(IToken);
		IToken string_literal122 = default(IToken);
		IToken char_literal123 = default(IToken);
		IToken char_literal125 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block126 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal120_tree = default(CommonTree);
		CommonTree string_literal122_tree = default(CommonTree);
		CommonTree char_literal123_tree = default(CommonTree);
		CommonTree char_literal125_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(260, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// SugarCpp.g:261:2: ( 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:261:4: 'try' stmt_block 'catch' '(' expr ')' stmt_block
			{
			DebugLocation(261, 4);
			string_literal120=(IToken)Match(input,107,Follow._107_in_stmt_try1147); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_107.Add(string_literal120);

			DebugLocation(261, 10);
			PushFollow(Follow._stmt_block_in_stmt_try1149);
			stmt_block121=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block121.Tree);
			DebugLocation(261, 21);
			string_literal122=(IToken)Match(input,96,Follow._96_in_stmt_try1151); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_96.Add(string_literal122);

			DebugLocation(261, 29);
			char_literal123=(IToken)Match(input,60,Follow._60_in_stmt_try1153); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(char_literal123);

			DebugLocation(261, 33);
			PushFollow(Follow._expr_in_stmt_try1155);
			expr124=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr124.Tree);
			DebugLocation(261, 38);
			char_literal125=(IToken)Match(input,61,Follow._61_in_stmt_try1157); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal125);

			DebugLocation(261, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1159);
			stmt_block126=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block126.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:53: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(261, 56);
				// SugarCpp.g:261:56: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(261, 67);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(261, 78);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(261, 83);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 26);
			LeaveRule("stmt_try", 26);
			LeaveRule_stmt_try();
			if (state.backtracking > 0) { Memoize(input, 26, stmt_try_StartIndex); }

		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:264:1: ident_list : IDENT ( ',' IDENT )* -> ^( Ident_List ( IDENT )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 27);
		TraceIn("ident_list", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT127 = default(IToken);
		IToken char_literal128 = default(IToken);
		IToken IDENT129 = default(IToken);

		CommonTree IDENT127_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree IDENT129_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(264, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// SugarCpp.g:265:2: ( IDENT ( ',' IDENT )* -> ^( Ident_List ( IDENT )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: IDENT ( ',' IDENT )*
			{
			DebugLocation(265, 4);
			IDENT127=(IToken)Match(input,IDENT,Follow._IDENT_in_ident_list1182); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IDENT.Add(IDENT127);

			DebugLocation(265, 10);
			// SugarCpp.g:265:10: ( ',' IDENT )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==67))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:265:11: ',' IDENT
					{
					DebugLocation(265, 11);
					char_literal128=(IToken)Match(input,67,Follow._67_in_ident_list1185); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_67.Add(char_literal128);

					DebugLocation(265, 15);
					IDENT129=(IToken)Match(input,IDENT,Follow._IDENT_in_ident_list1187); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT129);


					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }



			{
			// AST REWRITE
			// elements: IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:23: -> ^( Ident_List ( IDENT )+ )
			{
				DebugLocation(265, 26);
				// SugarCpp.g:265:26: ^( Ident_List ( IDENT )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(265, 39);
				if (!(stream_IDENT.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_IDENT.HasNext )
				{
					DebugLocation(265, 39);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());

				}
				stream_IDENT.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 27);
			LeaveRule("ident_list", 27);
			LeaveRule_ident_list();
			if (state.backtracking > 0) { Memoize(input, 27, ident_list_StartIndex); }

		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:268:1: stmt_alloc : ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 28);
		TraceIn("stmt_alloc", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_alloc_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal131 = default(IToken);
		IToken char_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(268, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// SugarCpp.g:269:2: ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:269:4: ident_list ':' type_name ( '=' expr )?
			{
			DebugLocation(269, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc1209);
			ident_list130=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list130.Tree);
			DebugLocation(269, 15);
			char_literal131=(IToken)Match(input,77,Follow._77_in_stmt_alloc1211); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_77.Add(char_literal131);

			DebugLocation(269, 19);
			PushFollow(Follow._type_name_in_stmt_alloc1213);
			type_name132=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name132.Tree);
			DebugLocation(269, 29);
			// SugarCpp.g:269:29: ( '=' expr )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==85))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:30: '=' expr
				{
				DebugLocation(269, 30);
				char_literal133=(IToken)Match(input,85,Follow._85_in_stmt_alloc1216); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_85.Add(char_literal133);

				DebugLocation(269, 34);
				PushFollow(Follow._expr_in_stmt_alloc1218);
				expr134=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr134.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: type_name, ident_list, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:41: -> ^( Expr_Alloc type_name ident_list ( expr )? )
			{
				DebugLocation(269, 44);
				// SugarCpp.g:269:44: ^( Expr_Alloc type_name ident_list ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

				DebugLocation(269, 57);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(269, 67);
				adaptor.AddChild(root_1, stream_ident_list.NextTree());
				DebugLocation(269, 78);
				// SugarCpp.g:269:78: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(269, 78);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 28);
			LeaveRule("stmt_alloc", 28);
			LeaveRule_stmt_alloc();
			if (state.backtracking > 0) { Memoize(input, 28, stmt_alloc_StartIndex); }

		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:272:1: stmt_modify : lvalue ( modify_expr_op ^ cond_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 29);
		TraceIn("stmt_modify", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_modify_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue135 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr137 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(272, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// SugarCpp.g:273:2: ( lvalue ( modify_expr_op ^ cond_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:273:4: lvalue ( modify_expr_op ^ cond_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(273, 4);
			PushFollow(Follow._lvalue_in_stmt_modify1244);
			lvalue135=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue135.Tree);
			DebugLocation(273, 11);
			// SugarCpp.g:273:11: ( modify_expr_op ^ cond_expr )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==56||LA36_0==59||LA36_0==63||LA36_0==66||LA36_0==70||LA36_0==76||LA36_0==79||LA36_0==83||LA36_0==85||LA36_0==91||LA36_0==95||LA36_0==112))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:12: modify_expr_op ^ cond_expr
				{
				DebugLocation(273, 26);
				PushFollow(Follow._modify_expr_op_in_stmt_modify1247);
				modify_expr_op136=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op136.Tree, root_0);
				DebugLocation(273, 28);
				PushFollow(Follow._cond_expr_in_stmt_modify1250);
				cond_expr137=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr137.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 29);
			LeaveRule("stmt_modify", 29);
			LeaveRule_stmt_modify();
			if (state.backtracking > 0) { Memoize(input, 29, stmt_modify_StartIndex); }

		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:276:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 30);
		TraceIn("expr", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr138 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(276, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// SugarCpp.g:277:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:277:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(277, 4);
			PushFollow(Follow._lambda_expr_in_expr1263);
			lambda_expr138=lambda_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr138.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 30);
			LeaveRule("expr", 30);
			LeaveRule_expr();
			if (state.backtracking > 0) { Memoize(input, 30, expr_StartIndex); }

		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:280:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 31);
		TraceIn("lambda_expr", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lambda_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal139 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken string_literal142 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr144 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree string_literal142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(280, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// SugarCpp.g:281:2: ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr )
			int alt37=2;
			try { DebugEnterDecision(37, false);
			try
			{
				alt37 = dfa37.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:281:4: '(' func_args ')' '=>' modify_expr
				{
				DebugLocation(281, 4);
				char_literal139=(IToken)Match(input,60,Follow._60_in_lambda_expr1274); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal139);

				DebugLocation(281, 8);
				PushFollow(Follow._func_args_in_lambda_expr1276);
				func_args140=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args140.Tree);
				DebugLocation(281, 18);
				char_literal141=(IToken)Match(input,61,Follow._61_in_lambda_expr1278); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal141);

				DebugLocation(281, 22);
				string_literal142=(IToken)Match(input,87,Follow._87_in_lambda_expr1280); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_87.Add(string_literal142);

				DebugLocation(281, 27);
				PushFollow(Follow._modify_expr_in_lambda_expr1282);
				modify_expr143=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(modify_expr143.Tree);


				{
				// AST REWRITE
				// elements: func_args, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:39: -> ^( Expr_Lambda func_args modify_expr )
				{
					DebugLocation(281, 42);
					// SugarCpp.g:281:42: ^( Expr_Lambda func_args modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(281, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(281, 56);
					adaptor.AddChild(root_1, stream_func_args.NextTree());
					DebugLocation(281, 66);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:282:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(282, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr1297);
				modify_expr144=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr144.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 31);
			LeaveRule("lambda_expr", 31);
			LeaveRule_lambda_expr();
			if (state.backtracking > 0) { Memoize(input, 31, lambda_expr_StartIndex); }

		}
		DebugLocation(283, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:285:1: modify_expr_op : ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 32);
		TraceIn("modify_expr_op", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set145 = default(IToken);

		CommonTree set145_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(285, 99);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// SugarCpp.g:285:15: ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(285, 15);

			set145=(IToken)input.LT(1);
			if (input.LA(1)==56||input.LA(1)==59||input.LA(1)==63||input.LA(1)==66||input.LA(1)==70||input.LA(1)==76||input.LA(1)==79||input.LA(1)==83||input.LA(1)==85||input.LA(1)==91||input.LA(1)==95||input.LA(1)==112)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set145));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 32);
			LeaveRule("modify_expr_op", 32);
			LeaveRule_modify_expr_op();
			if (state.backtracking > 0) { Memoize(input, 32, modify_expr_op_StartIndex); }

		}
		DebugLocation(285, 99);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:286:1: modify_expr : cond_expr ( modify_expr_op ^ modify_expr )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 33);
		TraceIn("modify_expr", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr148 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(286, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// SugarCpp.g:287:2: ( cond_expr ( modify_expr_op ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:287:4: cond_expr ( modify_expr_op ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(287, 4);
			PushFollow(Follow._cond_expr_in_modify_expr1359);
			cond_expr146=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr146.Tree);
			DebugLocation(287, 14);
			// SugarCpp.g:287:14: ( modify_expr_op ^ modify_expr )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==56||LA38_0==59||LA38_0==63||LA38_0==66||LA38_0==70||LA38_0==76||LA38_0==79||LA38_0==83||LA38_0==85||LA38_0==91||LA38_0==95||LA38_0==112))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:15: modify_expr_op ^ modify_expr
				{
				DebugLocation(287, 29);
				PushFollow(Follow._modify_expr_op_in_modify_expr1362);
				modify_expr_op147=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op147.Tree, root_0);
				DebugLocation(287, 31);
				PushFollow(Follow._modify_expr_in_modify_expr1365);
				modify_expr148=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr148.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 33);
			LeaveRule("modify_expr", 33);
			LeaveRule_modify_expr();
			if (state.backtracking > 0) { Memoize(input, 33, modify_expr_StartIndex); }

		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:290:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 34);
		TraceIn("cond_expr_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(290, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// SugarCpp.g:290:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:290:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(290, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item1376);
			cond_expr149=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr149.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 34);
			LeaveRule("cond_expr_item", 34);
			LeaveRule_cond_expr_item();
			if (state.backtracking > 0) { Memoize(input, 34, cond_expr_item_StartIndex); }

		}
		DebugLocation(290, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:291:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 35);
		TraceIn("cond_expr", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal150 = default(IToken);
		IToken string_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal150_tree = default(CommonTree);
		CommonTree string_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(291, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// SugarCpp.g:292:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:292:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(292, 4);
			// SugarCpp.g:292:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:292:5: a= or_expr
			{
			DebugLocation(292, 6);
			PushFollow(Follow._or_expr_in_cond_expr1388);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 292:15: -> $a
			{
				DebugLocation(292, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(292, 22);
			// SugarCpp.g:292:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==100))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:292:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(292, 23);
				string_literal150=(IToken)Match(input,100,Follow._100_in_cond_expr1397); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_100.Add(string_literal150);

				DebugLocation(292, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr1401);
				a=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
				DebugLocation(292, 45);
				string_literal151=(IToken)Match(input,97,Follow._97_in_cond_expr1403); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_97.Add(string_literal151);

				DebugLocation(292, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr1407);
				b=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, a, cond_expr
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(292, 72);
					// SugarCpp.g:292:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(292, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(292, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(292, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 35);
			LeaveRule("cond_expr", 35);
			LeaveRule_cond_expr();
			if (state.backtracking > 0) { Memoize(input, 35, cond_expr_StartIndex); }

		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:295:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 36);
		TraceIn("or_expr", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int or_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal152 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal152_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(295, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// SugarCpp.g:296:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:296:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(296, 4);
			// SugarCpp.g:296:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:296:5: a= and_expr
			{
			DebugLocation(296, 6);
			PushFollow(Follow._and_expr_in_or_expr1438);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 296:16: -> $a
			{
				DebugLocation(296, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(296, 23);
			// SugarCpp.g:296:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==113))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:296:24: '||' b= and_expr
					{
					DebugLocation(296, 24);
					string_literal152=(IToken)Match(input,113,Follow._113_in_or_expr1447); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(string_literal152);

					DebugLocation(296, 30);
					PushFollow(Follow._and_expr_in_or_expr1451);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, 113
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 296:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(296, 43);
						// SugarCpp.g:296:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(296, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(296, 54);
						adaptor.AddChild(root_1, stream_113.NextNode());
						DebugLocation(296, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(296, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 36);
			LeaveRule("or_expr", 36);
			LeaveRule_or_expr();
			if (state.backtracking > 0) { Memoize(input, 36, or_expr_StartIndex); }

		}
		DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:299:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 37);
		TraceIn("and_expr", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int and_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal153 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(299, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// SugarCpp.g:300:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:300:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(300, 4);
			// SugarCpp.g:300:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:300:5: a= bit_or
			{
			DebugLocation(300, 6);
			PushFollow(Follow._bit_or_in_and_expr1481);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 300:14: -> $a
			{
				DebugLocation(300, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(300, 21);
			// SugarCpp.g:300:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==57))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:300:22: '&&' b= bit_or
					{
					DebugLocation(300, 22);
					string_literal153=(IToken)Match(input,57,Follow._57_in_and_expr1490); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_57.Add(string_literal153);

					DebugLocation(300, 28);
					PushFollow(Follow._bit_or_in_and_expr1494);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, b, 57
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 300:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(300, 39);
						// SugarCpp.g:300:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(300, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(300, 50);
						adaptor.AddChild(root_1, stream_57.NextNode());
						DebugLocation(300, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(300, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 37);
			LeaveRule("and_expr", 37);
			LeaveRule_and_expr();
			if (state.backtracking > 0) { Memoize(input, 37, and_expr_StartIndex); }

		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:303:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 38);
		TraceIn("bit_or", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_or_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal154 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal154_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(303, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// SugarCpp.g:304:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:304:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(304, 4);
			// SugarCpp.g:304:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:304:5: a= bit_xor
			{
			DebugLocation(304, 6);
			PushFollow(Follow._bit_xor_in_bit_or1524);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 304:15: -> $a
			{
				DebugLocation(304, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(304, 22);
			// SugarCpp.g:304:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==111))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:304:23: '|' b= bit_xor
					{
					DebugLocation(304, 23);
					char_literal154=(IToken)Match(input,111,Follow._111_in_bit_or1533); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_111.Add(char_literal154);

					DebugLocation(304, 28);
					PushFollow(Follow._bit_xor_in_bit_or1537);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 111, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 304:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(304, 40);
						// SugarCpp.g:304:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(304, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(304, 51);
						adaptor.AddChild(root_1, stream_111.NextNode());
						DebugLocation(304, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(304, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 38);
			LeaveRule("bit_or", 38);
			LeaveRule_bit_or();
			if (state.backtracking > 0) { Memoize(input, 38, bit_or_StartIndex); }

		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:307:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 39);
		TraceIn("bit_xor", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_xor_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal155_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(307, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// SugarCpp.g:308:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:308:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(308, 4);
			// SugarCpp.g:308:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:308:5: a= bit_and
			{
			DebugLocation(308, 6);
			PushFollow(Follow._bit_and_in_bit_xor1567);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 308:15: -> $a
			{
				DebugLocation(308, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(308, 22);
			// SugarCpp.g:308:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==94))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:308:23: '^' b= bit_and
					{
					DebugLocation(308, 23);
					char_literal155=(IToken)Match(input,94,Follow._94_in_bit_xor1576); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal155);

					DebugLocation(308, 28);
					PushFollow(Follow._bit_and_in_bit_xor1580);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_xor, 94
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 308:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(308, 40);
						// SugarCpp.g:308:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(308, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(308, 51);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(308, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(308, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 39);
			LeaveRule("bit_xor", 39);
			LeaveRule_bit_xor();
			if (state.backtracking > 0) { Memoize(input, 39, bit_xor_StartIndex); }

		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:311:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 40);
		TraceIn("bit_and", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_and_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal156 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal156_tree = default(CommonTree);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(311, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// SugarCpp.g:312:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:312:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(312, 4);
			// SugarCpp.g:312:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:312:5: a= cmp_equ_expr
			{
			DebugLocation(312, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and1610);
			a=cmp_equ_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 312:20: -> $a
			{
				DebugLocation(312, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(312, 27);
			// SugarCpp.g:312:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==58))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:312:28: '&' b= cmp_equ_expr
					{
					DebugLocation(312, 28);
					char_literal156=(IToken)Match(input,58,Follow._58_in_bit_and1619); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_58.Add(char_literal156);

					DebugLocation(312, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and1623);
					b=cmp_equ_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, 58, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 312:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(312, 50);
						// SugarCpp.g:312:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(312, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(312, 61);
						adaptor.AddChild(root_1, stream_58.NextNode());
						DebugLocation(312, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(312, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 40);
			LeaveRule("bit_and", 40);
			LeaveRule_bit_and();
			if (state.backtracking > 0) { Memoize(input, 40, bit_and_StartIndex); }

		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:315:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 41);
		TraceIn("cmp_equ_expr_op", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set157 = default(IToken);

		CommonTree set157_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(315, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// SugarCpp.g:315:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(315, 16);

			set157=(IToken)input.LT(1);
			if (input.LA(1)==54||input.LA(1)==86)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set157));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 41);
			LeaveRule("cmp_equ_expr_op", 41);
			LeaveRule_cmp_equ_expr_op();
			if (state.backtracking > 0) { Memoize(input, 41, cmp_equ_expr_op_StartIndex); }

		}
		DebugLocation(315, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:316:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 42);
		TraceIn("cmp_equ_expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op158 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(316, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// SugarCpp.g:317:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:317:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			{
			DebugLocation(317, 4);
			// SugarCpp.g:317:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:317:5: a= cmp_expr
			{
			DebugLocation(317, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr1664);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 317:16: -> $a
			{
				DebugLocation(317, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(317, 23);
			// SugarCpp.g:317:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==54||LA45_0==86))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:24: cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(317, 24);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr1673);
				cmp_equ_expr_op158=cmp_equ_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_equ_expr_op.Add(cmp_equ_expr_op158.Tree);
				DebugLocation(317, 41);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr1677);
				b=cmp_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_equ_expr_op, cmp_equ_expr, b
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 317:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
				{
					DebugLocation(317, 54);
					// SugarCpp.g:317:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(317, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(317, 65);
					adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
					DebugLocation(317, 82);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(317, 96);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 42);
			LeaveRule("cmp_equ_expr", 42);
			LeaveRule_cmp_equ_expr();
			if (state.backtracking > 0) { Memoize(input, 42, cmp_equ_expr_StartIndex); }

		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr_op();
	partial void LeaveRule_cmp_expr_op();

	// $ANTLR start "cmp_expr_op"
	// SugarCpp.g:320:1: cmp_expr_op : ( '<' | '<=' | '>' | '>=' );
	[GrammarRule("cmp_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op()
	{
		EnterRule_cmp_expr_op();
		EnterRule("cmp_expr_op", 43);
		TraceIn("cmp_expr_op", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set159 = default(IToken);

		CommonTree set159_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_expr_op");
		DebugLocation(320, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// SugarCpp.g:320:12: ( '<' | '<=' | '>' | '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(320, 12);

			set159=(IToken)input.LT(1);
			if (input.LA(1)==81||input.LA(1)==84||(input.LA(1)>=88 && input.LA(1)<=89))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set159));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr_op", 43);
			LeaveRule("cmp_expr_op", 43);
			LeaveRule_cmp_expr_op();
			if (state.backtracking > 0) { Memoize(input, 43, cmp_expr_op_StartIndex); }

		}
		DebugLocation(320, 37);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_expr_op"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:321:1: cmp_expr : (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 44);
		TraceIn("cmp_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op160 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(321, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// SugarCpp.g:322:2: ( (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:322:4: (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			{
			DebugLocation(322, 4);
			// SugarCpp.g:322:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:322:5: a= shift_expr
			{
			DebugLocation(322, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr1727);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 322:18: -> $a
			{
				DebugLocation(322, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(322, 25);
			// SugarCpp.g:322:25: ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==81||LA46_0==84||(LA46_0>=88 && LA46_0<=89)))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:322:26: cmp_expr_op b= shift_expr
				{
				DebugLocation(322, 26);
				PushFollow(Follow._cmp_expr_op_in_cmp_expr1736);
				cmp_expr_op160=cmp_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr_op.Add(cmp_expr_op160.Tree);
				DebugLocation(322, 39);
				PushFollow(Follow._shift_expr_in_cmp_expr1740);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_expr, b, cmp_expr_op
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 322:51: -> ^( Expr_Bin cmp_expr_op $cmp_expr $b)
				{
					DebugLocation(322, 54);
					// SugarCpp.g:322:54: ^( Expr_Bin cmp_expr_op $cmp_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(322, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(322, 65);
					adaptor.AddChild(root_1, stream_cmp_expr_op.NextTree());
					DebugLocation(322, 78);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(322, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 44);
			LeaveRule("cmp_expr", 44);
			LeaveRule_cmp_expr();
			if (state.backtracking > 0) { Memoize(input, 44, cmp_expr_StartIndex); }

		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:325:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 45);
		TraceIn("shift_expr_op", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set161 = default(IToken);

		CommonTree set161_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(325, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// SugarCpp.g:325:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(325, 14);

			set161=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==90)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set161));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 45);
			LeaveRule("shift_expr_op", 45);
			LeaveRule_shift_expr_op();
			if (state.backtracking > 0) { Memoize(input, 45, shift_expr_op_StartIndex); }

		}
		DebugLocation(325, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:326:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 46);
		TraceIn("shift_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op162 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(326, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// SugarCpp.g:327:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:327:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(327, 4);
			// SugarCpp.g:327:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:327:5: a= add_expr
			{
			DebugLocation(327, 6);
			PushFollow(Follow._add_expr_in_shift_expr1781);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 327:16: -> $a
			{
				DebugLocation(327, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(327, 23);
			// SugarCpp.g:327:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==82||LA47_0==90))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:327:24: shift_expr_op b= add_expr
					{
					DebugLocation(327, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr1790);
					shift_expr_op162=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op162.Tree);
					DebugLocation(327, 39);
					PushFollow(Follow._add_expr_in_shift_expr1794);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr_op, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 327:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(327, 52);
						// SugarCpp.g:327:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(327, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(327, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(327, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(327, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 46);
			LeaveRule("shift_expr", 46);
			LeaveRule_shift_expr();
			if (state.backtracking > 0) { Memoize(input, 46, shift_expr_StartIndex); }

		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:330:1: add_expr : (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 47);
		TraceIn("add_expr", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int add_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal163 = default(IToken);
		IToken char_literal164 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree char_literal164_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(330, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// SugarCpp.g:331:2: ( (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:331:4: (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(331, 4);
			// SugarCpp.g:331:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:331:5: a= infix_expr
			{
			DebugLocation(331, 6);
			PushFollow(Follow._infix_expr_in_add_expr1824);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 331:18: -> $a
			{
				DebugLocation(331, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(331, 25);
			// SugarCpp.g:331:25: ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=3;
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==64))
				{
					alt48 = 1;
				}
				else if ((LA48_0==68))
				{
					alt48 = 2;
				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:331:27: '+' b= infix_expr
					{
					DebugLocation(331, 27);
					char_literal163=(IToken)Match(input,64,Follow._64_in_add_expr1834); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_64.Add(char_literal163);

					DebugLocation(331, 32);
					PushFollow(Follow._infix_expr_in_add_expr1838);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 64
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 331:44: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(331, 47);
						// SugarCpp.g:331:47: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(331, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(331, 58);
						adaptor.AddChild(root_1, stream_64.NextNode());
						DebugLocation(331, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(331, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:332:12: '-' b= infix_expr
					{
					DebugLocation(332, 12);
					char_literal164=(IToken)Match(input,68,Follow._68_in_add_expr1865); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(char_literal164);

					DebugLocation(332, 17);
					PushFollow(Follow._infix_expr_in_add_expr1869);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 68
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 332:29: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(332, 32);
						// SugarCpp.g:332:32: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(332, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(332, 43);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(332, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(332, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 47);
			LeaveRule("add_expr", 47);
			LeaveRule_add_expr();
			if (state.backtracking > 0) { Memoize(input, 47, add_expr_StartIndex); }

		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:336:1: infix_expr : (a= mul_expr -> $a) ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 48);
		TraceIn("infix_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken Infix_Func165 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree Infix_Func165_tree = default(CommonTree);
		RewriteRuleITokenStream stream_Infix_Func=new RewriteRuleITokenStream(adaptor,"token Infix_Func");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(336, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// SugarCpp.g:337:2: ( (a= mul_expr -> $a) ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:337:4: (a= mul_expr -> $a) ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )*
			{
			DebugLocation(337, 4);
			// SugarCpp.g:337:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:337:5: a= mul_expr
			{
			DebugLocation(337, 6);
			PushFollow(Follow._mul_expr_in_infix_expr1909);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 337:16: -> $a
			{
				DebugLocation(337, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(337, 23);
			// SugarCpp.g:337:23: ( Infix_Func b= mul_expr -> ^( Expr_Infix Infix_Func $infix_expr $b) )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==Infix_Func))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:337:25: Infix_Func b= mul_expr
					{
					DebugLocation(337, 25);
					Infix_Func165=(IToken)Match(input,Infix_Func,Follow._Infix_Func_in_infix_expr1919); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_Infix_Func.Add(Infix_Func165);

					DebugLocation(337, 37);
					PushFollow(Follow._mul_expr_in_infix_expr1923);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_expr, Infix_Func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 337:48: -> ^( Expr_Infix Infix_Func $infix_expr $b)
					{
						DebugLocation(337, 51);
						// SugarCpp.g:337:51: ^( Expr_Infix Infix_Func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(337, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(337, 64);
						adaptor.AddChild(root_1, stream_Infix_Func.NextNode());
						DebugLocation(337, 76);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(337, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 48);
			LeaveRule("infix_expr", 48);
			LeaveRule_infix_expr();
			if (state.backtracking > 0) { Memoize(input, 48, infix_expr_StartIndex); }

		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:340:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 49);
		TraceIn("mul_expr", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int mul_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal166 = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken char_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal166_tree = default(CommonTree);
		CommonTree char_literal167_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(340, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// SugarCpp.g:341:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:341:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(341, 4);
			// SugarCpp.g:341:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:341:5: a= selector_expr
			{
			DebugLocation(341, 6);
			PushFollow(Follow._selector_expr_in_mul_expr1955);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 341:21: -> $a
			{
				DebugLocation(341, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(341, 28);
			// SugarCpp.g:341:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=4;
				try { DebugEnterDecision(50, false);
				switch (input.LA(1))
				{
				case 62:
					{
					alt50 = 1;
					}
					break;
				case 75:
					{
					alt50 = 2;
					}
					break;
				case 55:
					{
					alt50 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:341:30: '*' b= selector_expr
					{
					DebugLocation(341, 30);
					char_literal166=(IToken)Match(input,62,Follow._62_in_mul_expr1965); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal166);

					DebugLocation(341, 35);
					PushFollow(Follow._selector_expr_in_mul_expr1969);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 62
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 341:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(341, 53);
						// SugarCpp.g:341:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(341, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(341, 64);
						adaptor.AddChild(root_1, stream_62.NextNode());
						DebugLocation(341, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(341, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:342:15: '/' b= selector_expr
					{
					DebugLocation(342, 15);
					char_literal167=(IToken)Match(input,75,Follow._75_in_mul_expr1999); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_75.Add(char_literal167);

					DebugLocation(342, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2003);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 75
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 342:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(342, 38);
						// SugarCpp.g:342:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(342, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(342, 49);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(342, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(342, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:343:15: '%' b= selector_expr
					{
					DebugLocation(343, 15);
					char_literal168=(IToken)Match(input,55,Follow._55_in_mul_expr2033); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_55.Add(char_literal168);

					DebugLocation(343, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2037);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 55
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 343:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(343, 38);
						// SugarCpp.g:343:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(343, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(343, 49);
						adaptor.AddChild(root_1, stream_55.NextNode());
						DebugLocation(343, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(343, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 49);
			LeaveRule("mul_expr", 49);
			LeaveRule_mul_expr();
			if (state.backtracking > 0) { Memoize(input, 49, mul_expr_StartIndex); }

		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:347:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 50);
		TraceIn("selector_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int selector_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken b = default(IToken);
		IToken string_literal169 = default(IToken);
		IToken string_literal170 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree b_tree = default(CommonTree);
		CommonTree string_literal169_tree = default(CommonTree);
		CommonTree string_literal170_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(347, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// SugarCpp.g:348:2: ( (a= prefix_expr -> $a) ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:348:4: (a= prefix_expr -> $a) ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(348, 4);
			// SugarCpp.g:348:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:348:5: a= prefix_expr
			{
			DebugLocation(348, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr2080);
			a=prefix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 348:19: -> $a
			{
				DebugLocation(348, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(348, 26);
			// SugarCpp.g:348:26: ( '->*' b= IDENT -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= IDENT -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=3;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==72))
				{
					alt51 = 1;
				}
				else if ((LA51_0==74))
				{
					alt51 = 2;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:348:28: '->*' b= IDENT
					{
					DebugLocation(348, 28);
					string_literal169=(IToken)Match(input,72,Follow._72_in_selector_expr2090); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(string_literal169);

					DebugLocation(348, 35);
					b=(IToken)Match(input,IDENT,Follow._IDENT_in_selector_expr2094); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(b);



					{
					// AST REWRITE
					// elements: b, selector_expr, 72
					// token labels: b
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_b=new RewriteRuleITokenStream(adaptor,"token b",b);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 348:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(348, 45);
						// SugarCpp.g:348:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(348, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(348, 59);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(348, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(348, 81);
						adaptor.AddChild(root_1, stream_b.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:349:13: '.*' b= IDENT
					{
					DebugLocation(349, 13);
					string_literal170=(IToken)Match(input,74,Follow._74_in_selector_expr2122); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_74.Add(string_literal170);

					DebugLocation(349, 20);
					b=(IToken)Match(input,IDENT,Follow._IDENT_in_selector_expr2127); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(b);



					{
					// AST REWRITE
					// elements: 74, selector_expr, b
					// token labels: b
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleITokenStream stream_b=new RewriteRuleITokenStream(adaptor,"token b",b);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 349:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(349, 30);
						// SugarCpp.g:349:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(349, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(349, 44);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(349, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(349, 66);
						adaptor.AddChild(root_1, stream_b.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 50);
			LeaveRule("selector_expr", 50);
			LeaveRule_selector_expr();
			if (state.backtracking > 0) { Memoize(input, 50, selector_expr_StartIndex); }

		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:353:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 51);
		TraceIn("prefix_expr_op", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set171 = default(IToken);

		CommonTree set171_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(353, 64);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// SugarCpp.g:353:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(353, 15);

			set171=(IToken)input.LT(1);
			if (input.LA(1)==53||input.LA(1)==58||input.LA(1)==62||(input.LA(1)>=64 && input.LA(1)<=65)||(input.LA(1)>=68 && input.LA(1)<=69)||input.LA(1)==114)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set171));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 51);
			LeaveRule("prefix_expr_op", 51);
			LeaveRule_prefix_expr_op();
			if (state.backtracking > 0) { Memoize(input, 51, prefix_expr_op_StartIndex); }

		}
		DebugLocation(353, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:354:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 52);
		TraceIn("prefix_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal174 = default(IToken);
		IToken char_literal176 = default(IToken);
		IToken char_literal178 = default(IToken);
		IToken char_literal179 = default(IToken);
		IToken char_literal181 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr182 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree char_literal176_tree = default(CommonTree);
		CommonTree char_literal178_tree = default(CommonTree);
		CommonTree char_literal179_tree = default(CommonTree);
		CommonTree char_literal181_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(354, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// SugarCpp.g:355:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt54=3;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case 53:
			case 58:
			case 62:
			case 64:
			case 65:
			case 68:
			case 69:
			case 114:
				{
				alt54 = 1;
				}
				break;
			case 104:
				{
				alt54 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 60:
				{
				alt54 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:355:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(355, 4);
				// SugarCpp.g:355:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:355:5: prefix_expr_op prefix_expr
				{
				DebugLocation(355, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr2202);
				prefix_expr_op172=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op172.Tree);
				DebugLocation(355, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr2204);
				prefix_expr173=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr173.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 355:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(355, 36);
					// SugarCpp.g:355:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(355, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(355, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(355, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:356:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(356, 4);
				string_literal174=(IToken)Match(input,104,Follow._104_in_prefix_expr2220); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_104.Add(string_literal174);

				DebugLocation(356, 10);
				PushFollow(Follow._type_name_in_prefix_expr2222);
				type_name175=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name175.Tree);
				DebugLocation(356, 20);
				// SugarCpp.g:356:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==60))
				{
					alt53 = 1;
				}
				else if ((LA53_0==92))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:356:22: '(' ( expr_list )? ')'
					{
					DebugLocation(356, 22);
					char_literal176=(IToken)Match(input,60,Follow._60_in_prefix_expr2226); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_60.Add(char_literal176);

					DebugLocation(356, 26);
					// SugarCpp.g:356:26: ( expr_list )?
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, false);
					int LA52_0 = input.LA(1);

					if ((LA52_0==IDENT||LA52_0==NUMBER||LA52_0==STRING||LA52_0==53||LA52_0==58||LA52_0==60||LA52_0==62||(LA52_0>=64 && LA52_0<=65)||(LA52_0>=68 && LA52_0<=69)||LA52_0==104||LA52_0==114))
					{
						alt52 = 1;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:356:26: expr_list
						{
						DebugLocation(356, 26);
						PushFollow(Follow._expr_list_in_prefix_expr2228);
						expr_list177=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list177.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(52); }

					DebugLocation(356, 37);
					char_literal178=(IToken)Match(input,61,Follow._61_in_prefix_expr2231); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal178);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 356:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(356, 44);
						// SugarCpp.g:356:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(356, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(356, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(356, 70);
						// SugarCpp.g:356:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(356, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:357:10: '[' expr_list ']'
					{
					DebugLocation(357, 10);
					char_literal179=(IToken)Match(input,92,Follow._92_in_prefix_expr2253); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal179);

					DebugLocation(357, 14);
					PushFollow(Follow._expr_list_in_prefix_expr2255);
					expr_list180=expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr_list.Add(expr_list180.Tree);
					DebugLocation(357, 24);
					char_literal181=(IToken)Match(input,93,Follow._93_in_prefix_expr2257); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal181);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 357:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(357, 31);
						// SugarCpp.g:357:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(357, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(357, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(357, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:358:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(358, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr2273);
				suffix_expr182=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr182.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 52);
			LeaveRule("prefix_expr", 52);
			LeaveRule_prefix_expr();
			if (state.backtracking > 0) { Memoize(input, 52, prefix_expr_StartIndex); }

		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:361:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 53);
		TraceIn("expr_list", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal184 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr185 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal184_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(361, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// SugarCpp.g:362:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:362:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(362, 4);
			PushFollow(Follow._expr_in_expr_list2285);
			expr183=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr183.Tree);
			DebugLocation(362, 9);
			// SugarCpp.g:362:9: ( ',' ! expr )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==67))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:362:10: ',' ! expr
					{
					DebugLocation(362, 13);
					char_literal184=(IToken)Match(input,67,Follow._67_in_expr_list2288); if (state.failed) return retval;
					DebugLocation(362, 15);
					PushFollow(Follow._expr_in_expr_list2291);
					expr185=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr185.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 53);
			LeaveRule("expr_list", 53);
			LeaveRule_expr_list();
			if (state.backtracking > 0) { Memoize(input, 53, expr_list_StartIndex); }

		}
		DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:365:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 54);
		TraceIn("suffix_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int suffix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal186 = default(IToken);
		IToken string_literal187 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken IDENT189 = default(IToken);
		IToken string_literal190 = default(IToken);
		IToken IDENT191 = default(IToken);
		IToken string_literal192 = default(IToken);
		IToken IDENT193 = default(IToken);
		IToken char_literal195 = default(IToken);
		IToken char_literal197 = default(IToken);
		IToken char_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken char_literal201 = default(IToken);
		IToken IDENT202 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken char_literal205 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list204 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal186_tree = default(CommonTree);
		CommonTree string_literal187_tree = default(CommonTree);
		CommonTree char_literal188_tree = default(CommonTree);
		CommonTree IDENT189_tree = default(CommonTree);
		CommonTree string_literal190_tree = default(CommonTree);
		CommonTree IDENT191_tree = default(CommonTree);
		CommonTree string_literal192_tree = default(CommonTree);
		CommonTree IDENT193_tree = default(CommonTree);
		CommonTree char_literal195_tree = default(CommonTree);
		CommonTree char_literal197_tree = default(CommonTree);
		CommonTree char_literal198_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree char_literal201_tree = default(CommonTree);
		CommonTree IDENT202_tree = default(CommonTree);
		CommonTree char_literal203_tree = default(CommonTree);
		CommonTree char_literal205_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(365, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// SugarCpp.g:366:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:366:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )*
			{
			DebugLocation(366, 4);
			// SugarCpp.g:366:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:366:5: a= atom_expr
			{
			DebugLocation(366, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr2307);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 366:17: -> $a
			{
				DebugLocation(366, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(366, 24);
			// SugarCpp.g:366:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' IDENT -> ^( Expr_Access '.' $suffix_expr IDENT ) | '->' IDENT -> ^( Expr_Access '->' $suffix_expr IDENT ) | '::' IDENT -> ^( Expr_Access '::' $suffix_expr IDENT ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' IDENT '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? ) )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=9;
				try { DebugEnterDecision(60, false);
				switch (input.LA(1))
				{
				case 81:
					{
					int LA60_10 = input.LA(2);

					if ((EvaluatePredicate(synpred106_SugarCpp_fragment)))
					{
						alt60 = 6;
					}


					}
					break;
				case 92:
					{
					int LA60_32 = input.LA(2);

					if ((EvaluatePredicate(synpred108_SugarCpp_fragment)))
					{
						alt60 = 7;
					}


					}
					break;
				case 65:
					{
					alt60 = 1;
					}
					break;
				case 69:
					{
					alt60 = 2;
					}
					break;
				case 73:
					{
					alt60 = 3;
					}
					break;
				case 71:
					{
					alt60 = 4;
					}
					break;
				case 78:
					{
					alt60 = 5;
					}
					break;
				case 60:
					{
					alt60 = 6;
					}
					break;
				case 77:
					{
					alt60 = 8;
					}
					break;
				}

				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:366:26: '++'
					{
					DebugLocation(366, 26);
					string_literal186=(IToken)Match(input,65,Follow._65_in_suffix_expr2317); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_65.Add(string_literal186);



					{
					// AST REWRITE
					// elements: suffix_expr, 65
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 366:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(366, 34);
						// SugarCpp.g:366:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(366, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(366, 48);
						adaptor.AddChild(root_1, stream_65.NextNode());
						DebugLocation(366, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:367:14: '--'
					{
					DebugLocation(367, 14);
					string_literal187=(IToken)Match(input,69,Follow._69_in_suffix_expr2343); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_69.Add(string_literal187);



					{
					// AST REWRITE
					// elements: suffix_expr, 69
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 367:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(367, 22);
						// SugarCpp.g:367:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(367, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(367, 36);
						adaptor.AddChild(root_1, stream_69.NextNode());
						DebugLocation(367, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:368:11: '.' IDENT
					{
					DebugLocation(368, 11);
					char_literal188=(IToken)Match(input,73,Follow._73_in_suffix_expr2366); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_73.Add(char_literal188);

					DebugLocation(368, 15);
					IDENT189=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2368); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT189);



					{
					// AST REWRITE
					// elements: suffix_expr, IDENT, 73
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 368:21: -> ^( Expr_Access '.' $suffix_expr IDENT )
					{
						DebugLocation(368, 24);
						// SugarCpp.g:368:24: ^( Expr_Access '.' $suffix_expr IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(368, 38);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(368, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(368, 55);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:369:11: '->' IDENT
					{
					DebugLocation(369, 11);
					string_literal190=(IToken)Match(input,71,Follow._71_in_suffix_expr2393); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(string_literal190);

					DebugLocation(369, 16);
					IDENT191=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2395); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT191);



					{
					// AST REWRITE
					// elements: IDENT, suffix_expr, 71
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 369:22: -> ^( Expr_Access '->' $suffix_expr IDENT )
					{
						DebugLocation(369, 25);
						// SugarCpp.g:369:25: ^( Expr_Access '->' $suffix_expr IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(369, 39);
						adaptor.AddChild(root_1, stream_71.NextNode());
						DebugLocation(369, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(369, 57);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:370:11: '::' IDENT
					{
					DebugLocation(370, 11);
					string_literal192=(IToken)Match(input,78,Follow._78_in_suffix_expr2420); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_78.Add(string_literal192);

					DebugLocation(370, 16);
					IDENT193=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2422); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT193);



					{
					// AST REWRITE
					// elements: IDENT, 78, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 370:22: -> ^( Expr_Access '::' $suffix_expr IDENT )
					{
						DebugLocation(370, 25);
						// SugarCpp.g:370:25: ^( Expr_Access '::' $suffix_expr IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(370, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(370, 39);
						adaptor.AddChild(root_1, stream_78.NextNode());
						DebugLocation(370, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(370, 57);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:371:11: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(371, 11);
					// SugarCpp.g:371:11: ( generic_parameter )?
					int alt56=2;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, false);
					int LA56_0 = input.LA(1);

					if ((LA56_0==81))
					{
						alt56 = 1;
					}
					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:371:11: generic_parameter
						{
						DebugLocation(371, 11);
						PushFollow(Follow._generic_parameter_in_suffix_expr2447);
						generic_parameter194=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter194.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(56); }

					DebugLocation(371, 30);
					char_literal195=(IToken)Match(input,60,Follow._60_in_suffix_expr2450); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_60.Add(char_literal195);

					DebugLocation(371, 34);
					// SugarCpp.g:371:34: ( expr_list )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==IDENT||LA57_0==NUMBER||LA57_0==STRING||LA57_0==53||LA57_0==58||LA57_0==60||LA57_0==62||(LA57_0>=64 && LA57_0<=65)||(LA57_0>=68 && LA57_0<=69)||LA57_0==104||LA57_0==114))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:371:34: expr_list
						{
						DebugLocation(371, 34);
						PushFollow(Follow._expr_list_in_suffix_expr2452);
						expr_list196=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list196.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(371, 45);
					char_literal197=(IToken)Match(input,61,Follow._61_in_suffix_expr2455); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal197);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 371:49: -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(371, 52);
						// SugarCpp.g:371:52: ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(371, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(371, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(371, 77);
						// SugarCpp.g:371:77: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(371, 77);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(371, 96);
						// SugarCpp.g:371:96: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(371, 96);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:372:11: '[' ( expr_list )? ']'
					{
					DebugLocation(372, 11);
					char_literal198=(IToken)Match(input,92,Follow._92_in_suffix_expr2482); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal198);

					DebugLocation(372, 15);
					// SugarCpp.g:372:15: ( expr_list )?
					int alt58=2;
					try { DebugEnterSubRule(58);
					try { DebugEnterDecision(58, false);
					int LA58_0 = input.LA(1);

					if ((LA58_0==IDENT||LA58_0==NUMBER||LA58_0==STRING||LA58_0==53||LA58_0==58||LA58_0==60||LA58_0==62||(LA58_0>=64 && LA58_0<=65)||(LA58_0>=68 && LA58_0<=69)||LA58_0==104||LA58_0==114))
					{
						alt58 = 1;
					}
					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:372:15: expr_list
						{
						DebugLocation(372, 15);
						PushFollow(Follow._expr_list_in_suffix_expr2484);
						expr_list199=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list199.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(58); }

					DebugLocation(372, 26);
					char_literal200=(IToken)Match(input,93,Follow._93_in_suffix_expr2487); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal200);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 372:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(372, 33);
						// SugarCpp.g:372:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(372, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(372, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(372, 58);
						// SugarCpp.g:372:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(372, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// SugarCpp.g:373:11: ':' IDENT '(' ( expr_list )? ')'
					{
					DebugLocation(373, 11);
					char_literal201=(IToken)Match(input,77,Follow._77_in_suffix_expr2511); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_77.Add(char_literal201);

					DebugLocation(373, 15);
					IDENT202=(IToken)Match(input,IDENT,Follow._IDENT_in_suffix_expr2513); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT202);

					DebugLocation(373, 21);
					char_literal203=(IToken)Match(input,60,Follow._60_in_suffix_expr2515); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_60.Add(char_literal203);

					DebugLocation(373, 25);
					// SugarCpp.g:373:25: ( expr_list )?
					int alt59=2;
					try { DebugEnterSubRule(59);
					try { DebugEnterDecision(59, false);
					int LA59_0 = input.LA(1);

					if ((LA59_0==IDENT||LA59_0==NUMBER||LA59_0==STRING||LA59_0==53||LA59_0==58||LA59_0==60||LA59_0==62||(LA59_0>=64 && LA59_0<=65)||(LA59_0>=68 && LA59_0<=69)||LA59_0==104||LA59_0==114))
					{
						alt59 = 1;
					}
					} finally { DebugExitDecision(59); }
					switch (alt59)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:373:25: expr_list
						{
						DebugLocation(373, 25);
						PushFollow(Follow._expr_list_in_suffix_expr2517);
						expr_list204=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list204.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(59); }

					DebugLocation(373, 36);
					char_literal205=(IToken)Match(input,61,Follow._61_in_suffix_expr2520); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal205);



					{
					// AST REWRITE
					// elements: suffix_expr, IDENT, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 373:40: -> ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? )
					{
						DebugLocation(373, 43);
						// SugarCpp.g:373:43: ^( Expr_Call_With $suffix_expr IDENT ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(373, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(373, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(373, 73);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());
						DebugLocation(373, 79);
						// SugarCpp.g:373:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(373, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 54);
			LeaveRule("suffix_expr", 54);
			LeaveRule_suffix_expr();
			if (state.backtracking > 0) { Memoize(input, 54, suffix_expr_StartIndex); }

		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:377:1: atom_expr : ( NUMBER | IDENT | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> expr );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 55);
		TraceIn("atom_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atom_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER206 = default(IToken);
		IToken IDENT207 = default(IToken);
		IToken STRING208 = default(IToken);
		IToken char_literal209 = default(IToken);
		IToken char_literal211 = default(IToken);
		IToken char_literal213 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER206_tree = default(CommonTree);
		CommonTree IDENT207_tree = default(CommonTree);
		CommonTree STRING208_tree = default(CommonTree);
		CommonTree char_literal209_tree = default(CommonTree);
		CommonTree char_literal211_tree = default(CommonTree);
		CommonTree char_literal213_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			bool more_than_one = false;

		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(377, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// SugarCpp.g:382:2: ( NUMBER | IDENT | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> expr )
			int alt62=4;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt62 = 1;
				}
				break;
			case IDENT:
				{
				alt62 = 2;
				}
				break;
			case STRING:
				{
				alt62 = 3;
				}
				break;
			case 60:
				{
				alt62 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:382:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(382, 4);
				NUMBER206=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr2564); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER206_tree = (CommonTree)adaptor.Create(NUMBER206);
				adaptor.AddChild(root_0, NUMBER206_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:383:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(383, 4);
				IDENT207=(IToken)Match(input,IDENT,Follow._IDENT_in_atom_expr2569); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT207_tree = (CommonTree)adaptor.Create(IDENT207);
				adaptor.AddChild(root_0, IDENT207_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:384:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(384, 4);
				STRING208=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr2574); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING208_tree = (CommonTree)adaptor.Create(STRING208);
				adaptor.AddChild(root_0, STRING208_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:385:4: '(' expr ( ',' expr )* ')'
				{
				DebugLocation(385, 4);
				char_literal209=(IToken)Match(input,60,Follow._60_in_atom_expr2579); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal209);

				DebugLocation(385, 8);
				PushFollow(Follow._expr_in_atom_expr2581);
				expr210=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr210.Tree);
				DebugLocation(385, 13);
				// SugarCpp.g:385:13: ( ',' expr )*
				try { DebugEnterSubRule(61);
				while (true)
				{
					int alt61=2;
					try { DebugEnterDecision(61, false);
					int LA61_0 = input.LA(1);

					if ((LA61_0==67))
					{
						alt61 = 1;
					}


					} finally { DebugExitDecision(61); }
					switch ( alt61 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:385:14: ',' expr
						{
						DebugLocation(385, 14);
						char_literal211=(IToken)Match(input,67,Follow._67_in_atom_expr2584); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_67.Add(char_literal211);

						DebugLocation(385, 18);
						PushFollow(Follow._expr_in_atom_expr2586);
						expr212=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr212.Tree);
						DebugLocation(385, 23);
						if (state.backtracking == 0)
						{
							 more_than_one = true; 
						}

						}
						break;

					default:
						goto loop61;
					}
				}

				loop61:
					;

				} finally { DebugExitSubRule(61); }

				DebugLocation(385, 52);
				char_literal213=(IToken)Match(input,61,Follow._61_in_atom_expr2593); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal213);



				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 386:3: -> { more_than_one }? ^( Expr_Tuple ( expr )+ )
				if ( more_than_one )
				{
					DebugLocation(386, 25);
					// SugarCpp.g:386:25: ^( Expr_Tuple ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(386, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

					DebugLocation(386, 38);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(386, 38);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 387:3: -> expr
				{
					DebugLocation(387, 6);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 55);
			LeaveRule("atom_expr", 55);
			LeaveRule_atom_expr();
			if (state.backtracking > 0) { Memoize(input, 55, atom_expr_StartIndex); }

		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:390:1: lvalue : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' IDENT -> ^( Expr_Access '.' $lvalue IDENT ) | '->' IDENT -> ^( Expr_Access '->' $lvalue IDENT ) | '::' IDENT -> ^( Expr_Access '::' $lvalue IDENT ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $lvalue expr ) )* ;
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 56);
		TraceIn("lvalue", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal214 = default(IToken);
		IToken string_literal215 = default(IToken);
		IToken char_literal216 = default(IToken);
		IToken IDENT217 = default(IToken);
		IToken string_literal218 = default(IToken);
		IToken IDENT219 = default(IToken);
		IToken string_literal220 = default(IToken);
		IToken IDENT221 = default(IToken);
		IToken char_literal223 = default(IToken);
		IToken char_literal225 = default(IToken);
		IToken char_literal226 = default(IToken);
		IToken char_literal228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal214_tree = default(CommonTree);
		CommonTree string_literal215_tree = default(CommonTree);
		CommonTree char_literal216_tree = default(CommonTree);
		CommonTree IDENT217_tree = default(CommonTree);
		CommonTree string_literal218_tree = default(CommonTree);
		CommonTree IDENT219_tree = default(CommonTree);
		CommonTree string_literal220_tree = default(CommonTree);
		CommonTree IDENT221_tree = default(CommonTree);
		CommonTree char_literal223_tree = default(CommonTree);
		CommonTree char_literal225_tree = default(CommonTree);
		CommonTree char_literal226_tree = default(CommonTree);
		CommonTree char_literal228_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(390, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// SugarCpp.g:391:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' IDENT -> ^( Expr_Access '.' $lvalue IDENT ) | '->' IDENT -> ^( Expr_Access '->' $lvalue IDENT ) | '::' IDENT -> ^( Expr_Access '::' $lvalue IDENT ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $lvalue expr ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:391:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' IDENT -> ^( Expr_Access '.' $lvalue IDENT ) | '->' IDENT -> ^( Expr_Access '->' $lvalue IDENT ) | '::' IDENT -> ^( Expr_Access '::' $lvalue IDENT ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $lvalue expr ) )*
			{
			DebugLocation(391, 4);
			// SugarCpp.g:391:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:391:5: a= lvalue_atom
			{
			DebugLocation(391, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue2626);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 391:19: -> $a
			{
				DebugLocation(391, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(391, 26);
			// SugarCpp.g:391:26: ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' IDENT -> ^( Expr_Access '.' $lvalue IDENT ) | '->' IDENT -> ^( Expr_Access '->' $lvalue IDENT ) | '::' IDENT -> ^( Expr_Access '::' $lvalue IDENT ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' expr ']' -> ^( Expr_Dict $lvalue expr ) )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=8;
				try { DebugEnterDecision(65, false);
				switch (input.LA(1))
				{
				case 65:
					{
					alt65 = 1;
					}
					break;
				case 69:
					{
					alt65 = 2;
					}
					break;
				case 73:
					{
					alt65 = 3;
					}
					break;
				case 71:
					{
					alt65 = 4;
					}
					break;
				case 78:
					{
					alt65 = 5;
					}
					break;
				case 60:
				case 81:
					{
					alt65 = 6;
					}
					break;
				case 92:
					{
					alt65 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:391:28: '++'
					{
					DebugLocation(391, 28);
					string_literal214=(IToken)Match(input,65,Follow._65_in_lvalue2636); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_65.Add(string_literal214);



					{
					// AST REWRITE
					// elements: lvalue, 65
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 391:33: -> ^( Expr_Suffix '++' $lvalue)
					{
						DebugLocation(391, 36);
						// SugarCpp.g:391:36: ^( Expr_Suffix '++' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(391, 50);
						adaptor.AddChild(root_1, stream_65.NextNode());
						DebugLocation(391, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:392:16: '--'
					{
					DebugLocation(392, 16);
					string_literal215=(IToken)Match(input,69,Follow._69_in_lvalue2664); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_69.Add(string_literal215);



					{
					// AST REWRITE
					// elements: lvalue, 69
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 392:21: -> ^( Expr_Suffix '--' $lvalue)
					{
						DebugLocation(392, 24);
						// SugarCpp.g:392:24: ^( Expr_Suffix '--' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(392, 38);
						adaptor.AddChild(root_1, stream_69.NextNode());
						DebugLocation(392, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:393:13: '.' IDENT
					{
					DebugLocation(393, 13);
					char_literal216=(IToken)Match(input,73,Follow._73_in_lvalue2689); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_73.Add(char_literal216);

					DebugLocation(393, 17);
					IDENT217=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue2691); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT217);



					{
					// AST REWRITE
					// elements: 73, IDENT, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 393:23: -> ^( Expr_Access '.' $lvalue IDENT )
					{
						DebugLocation(393, 26);
						// SugarCpp.g:393:26: ^( Expr_Access '.' $lvalue IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(393, 40);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(393, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(393, 52);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:394:13: '->' IDENT
					{
					DebugLocation(394, 13);
					string_literal218=(IToken)Match(input,71,Follow._71_in_lvalue2718); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(string_literal218);

					DebugLocation(394, 18);
					IDENT219=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue2720); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT219);



					{
					// AST REWRITE
					// elements: 71, IDENT, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:24: -> ^( Expr_Access '->' $lvalue IDENT )
					{
						DebugLocation(394, 27);
						// SugarCpp.g:394:27: ^( Expr_Access '->' $lvalue IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(394, 41);
						adaptor.AddChild(root_1, stream_71.NextNode());
						DebugLocation(394, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(394, 54);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:395:13: '::' IDENT
					{
					DebugLocation(395, 13);
					string_literal220=(IToken)Match(input,78,Follow._78_in_lvalue2747); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_78.Add(string_literal220);

					DebugLocation(395, 18);
					IDENT221=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue2749); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_IDENT.Add(IDENT221);



					{
					// AST REWRITE
					// elements: lvalue, 78, IDENT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:24: -> ^( Expr_Access '::' $lvalue IDENT )
					{
						DebugLocation(395, 27);
						// SugarCpp.g:395:27: ^( Expr_Access '::' $lvalue IDENT )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(395, 41);
						adaptor.AddChild(root_1, stream_78.NextNode());
						DebugLocation(395, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(395, 54);
						adaptor.AddChild(root_1, stream_IDENT.NextNode());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:396:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(396, 13);
					// SugarCpp.g:396:13: ( generic_parameter )?
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==81))
					{
						alt63 = 1;
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:396:13: generic_parameter
						{
						DebugLocation(396, 13);
						PushFollow(Follow._generic_parameter_in_lvalue2776);
						generic_parameter222=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter222.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(63); }

					DebugLocation(396, 32);
					char_literal223=(IToken)Match(input,60,Follow._60_in_lvalue2779); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_60.Add(char_literal223);

					DebugLocation(396, 36);
					// SugarCpp.g:396:36: ( expr_list )?
					int alt64=2;
					try { DebugEnterSubRule(64);
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==IDENT||LA64_0==NUMBER||LA64_0==STRING||LA64_0==53||LA64_0==58||LA64_0==60||LA64_0==62||(LA64_0>=64 && LA64_0<=65)||(LA64_0>=68 && LA64_0<=69)||LA64_0==104||LA64_0==114))
					{
						alt64 = 1;
					}
					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:396:36: expr_list
						{
						DebugLocation(396, 36);
						PushFollow(Follow._expr_list_in_lvalue2781);
						expr_list224=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list224.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(64); }

					DebugLocation(396, 47);
					char_literal225=(IToken)Match(input,61,Follow._61_in_lvalue2784); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal225);



					{
					// AST REWRITE
					// elements: lvalue, expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 396:51: -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(396, 54);
						// SugarCpp.g:396:54: ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(396, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(396, 74);
						// SugarCpp.g:396:74: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(396, 74);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(396, 93);
						// SugarCpp.g:396:93: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(396, 93);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:397:13: '[' expr ']'
					{
					DebugLocation(397, 13);
					char_literal226=(IToken)Match(input,92,Follow._92_in_lvalue2813); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal226);

					DebugLocation(397, 17);
					PushFollow(Follow._expr_in_lvalue2815);
					expr227=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr227.Tree);
					DebugLocation(397, 22);
					char_literal228=(IToken)Match(input,93,Follow._93_in_lvalue2817); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal228);



					{
					// AST REWRITE
					// elements: expr, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 397:26: -> ^( Expr_Dict $lvalue expr )
					{
						DebugLocation(397, 29);
						// SugarCpp.g:397:29: ^( Expr_Dict $lvalue expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(397, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(397, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 56);
			LeaveRule("lvalue", 56);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 56, lvalue_StartIndex); }

		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:401:1: lvalue_atom : ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | IDENT );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 57);
		TraceIn("lvalue_atom", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_atom_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal229 = default(IToken);
		IToken char_literal231 = default(IToken);
		IToken char_literal233 = default(IToken);
		IToken IDENT234 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal229_tree = default(CommonTree);
		CommonTree char_literal231_tree = default(CommonTree);
		CommonTree char_literal233_tree = default(CommonTree);
		CommonTree IDENT234_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(401, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// SugarCpp.g:402:2: ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | IDENT )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==60))
			{
				alt68 = 1;
			}
			else if ((LA68_0==IDENT))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:402:4: '(' ( lvalue ( ',' lvalue )* )? ')'
				{
				DebugLocation(402, 4);
				char_literal229=(IToken)Match(input,60,Follow._60_in_lvalue_atom2855); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal229);

				DebugLocation(402, 8);
				// SugarCpp.g:402:8: ( lvalue ( ',' lvalue )* )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==IDENT||LA67_0==60))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:402:9: lvalue ( ',' lvalue )*
					{
					DebugLocation(402, 9);
					PushFollow(Follow._lvalue_in_lvalue_atom2858);
					lvalue230=lvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lvalue.Add(lvalue230.Tree);
					DebugLocation(402, 16);
					// SugarCpp.g:402:16: ( ',' lvalue )*
					try { DebugEnterSubRule(66);
					while (true)
					{
						int alt66=2;
						try { DebugEnterDecision(66, false);
						int LA66_0 = input.LA(1);

						if ((LA66_0==67))
						{
							alt66 = 1;
						}


						} finally { DebugExitDecision(66); }
						switch ( alt66 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:402:17: ',' lvalue
							{
							DebugLocation(402, 17);
							char_literal231=(IToken)Match(input,67,Follow._67_in_lvalue_atom2861); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_67.Add(char_literal231);

							DebugLocation(402, 21);
							PushFollow(Follow._lvalue_in_lvalue_atom2863);
							lvalue232=lvalue();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_lvalue.Add(lvalue232.Tree);

							}
							break;

						default:
							goto loop66;
						}
					}

					loop66:
						;

					} finally { DebugExitSubRule(66); }


					}
					break;

				}
				} finally { DebugExitSubRule(67); }

				DebugLocation(402, 32);
				char_literal233=(IToken)Match(input,61,Follow._61_in_lvalue_atom2869); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal233);



				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 402:36: -> ^( Match_Tuple ( lvalue )* )
				{
					DebugLocation(402, 39);
					// SugarCpp.g:402:39: ^( Match_Tuple ( lvalue )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(402, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(402, 53);
					// SugarCpp.g:402:53: ( lvalue )*
					while ( stream_lvalue.HasNext )
					{
						DebugLocation(402, 53);
						adaptor.AddChild(root_1, stream_lvalue.NextTree());

					}
					stream_lvalue.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:403:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(403, 4);
				IDENT234=(IToken)Match(input,IDENT,Follow._IDENT_in_lvalue_atom2883); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT234_tree = (CommonTree)adaptor.Create(IDENT234);
				adaptor.AddChild(root_0, IDENT234_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 57);
			LeaveRule("lvalue_atom", 57);
			LeaveRule_lvalue_atom();
			if (state.backtracking > 0) { Memoize(input, 57, lvalue_atom_StartIndex); }

		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_synpred106_SugarCpp_fragment();
	partial void LeaveRule_synpred106_SugarCpp_fragment();

	// $ANTLR start synpred106_SugarCpp
	public void synpred106_SugarCpp_fragment()
	{
		EnterRule_synpred106_SugarCpp_fragment();
		EnterRule("synpred106_SugarCpp_fragment", 163);
		TraceIn("synpred106_SugarCpp_fragment", 163);
		try
		{
			// SugarCpp.g:371:11: ( ( generic_parameter )? '(' ( expr_list )? ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:371:11: ( generic_parameter )? '(' ( expr_list )? ')'
			{
			DebugLocation(371, 11);
			// SugarCpp.g:371:11: ( generic_parameter )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==81))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:371:11: generic_parameter
				{
				DebugLocation(371, 11);
				PushFollow(Follow._generic_parameter_in_synpred106_SugarCpp2447);
				generic_parameter();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(371, 30);
			Match(input,60,Follow._60_in_synpred106_SugarCpp2450); if (state.failed) return;
			DebugLocation(371, 34);
			// SugarCpp.g:371:34: ( expr_list )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==IDENT||LA84_0==NUMBER||LA84_0==STRING||LA84_0==53||LA84_0==58||LA84_0==60||LA84_0==62||(LA84_0>=64 && LA84_0<=65)||(LA84_0>=68 && LA84_0<=69)||LA84_0==104||LA84_0==114))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:371:34: expr_list
				{
				DebugLocation(371, 34);
				PushFollow(Follow._expr_list_in_synpred106_SugarCpp2452);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(371, 45);
			Match(input,61,Follow._61_in_synpred106_SugarCpp2455); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred106_SugarCpp_fragment", 163);
			LeaveRule("synpred106_SugarCpp_fragment", 163);
			LeaveRule_synpred106_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred106_SugarCpp

	partial void EnterRule_synpred108_SugarCpp_fragment();
	partial void LeaveRule_synpred108_SugarCpp_fragment();

	// $ANTLR start synpred108_SugarCpp
	public void synpred108_SugarCpp_fragment()
	{
		EnterRule_synpred108_SugarCpp_fragment();
		EnterRule("synpred108_SugarCpp_fragment", 165);
		TraceIn("synpred108_SugarCpp_fragment", 165);
		try
		{
			// SugarCpp.g:372:11: ( '[' ( expr_list )? ']' )
			DebugEnterAlt(1);
			// SugarCpp.g:372:11: '[' ( expr_list )? ']'
			{
			DebugLocation(372, 11);
			Match(input,92,Follow._92_in_synpred108_SugarCpp2482); if (state.failed) return;
			DebugLocation(372, 15);
			// SugarCpp.g:372:15: ( expr_list )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==IDENT||LA85_0==NUMBER||LA85_0==STRING||LA85_0==53||LA85_0==58||LA85_0==60||LA85_0==62||(LA85_0>=64 && LA85_0<=65)||(LA85_0>=68 && LA85_0<=69)||LA85_0==104||LA85_0==114))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:372:15: expr_list
				{
				DebugLocation(372, 15);
				PushFollow(Follow._expr_list_in_synpred108_SugarCpp2484);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(372, 26);
			Match(input,93,Follow._93_in_synpred108_SugarCpp2487); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred108_SugarCpp_fragment", 165);
			LeaveRule("synpred108_SugarCpp_fragment", 165);
			LeaveRule_synpred108_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred108_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA3 dfa3;
	private DFA7 dfa7;
	private DFA14 dfa14;
	private DFA27 dfa27;
	private DFA30 dfa30;
	private DFA37 dfa37;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa7 = new DFA7( this );
		dfa14 = new DFA14( this );
		dfa27 = new DFA27( this );
		dfa30 = new DFA30( this );
		dfa37 = new DFA37( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA3_maxS =
			"\x2\x6D\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x3F\xFFFF\x1\x3\x2\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x3F\xFFFF\x1\x3\x2\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()+ loopback of 150:4: ( ( NEWLINE )* node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x4\xFFFF";
		private const string DFA7_eofS =
			"\x4\xFFFF";
		private const string DFA7_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA7_maxS =
			"\x1\x22\x1\x28\x2\xFFFF";
		private const string DFA7_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA7_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x1B\xFFFF\x1\x1\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "()* loopback of 165:29: ( ( NEWLINE )+ STRING )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA14 : DFA
	{
		private const string DFA14_eotS =
			"\x4\xFFFF";
		private const string DFA14_eofS =
			"\x4\xFFFF";
		private const string DFA14_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA14_maxS =
			"\x2\x6D\x2\xFFFF";
		private const string DFA14_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA14_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA14_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x39\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x39\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA14_eot = DFA.UnpackEncodedString(DFA14_eotS);
		private static readonly short[] DFA14_eof = DFA.UnpackEncodedString(DFA14_eofS);
		private static readonly char[] DFA14_min = DFA.UnpackEncodedStringToUnsignedChars(DFA14_minS);
		private static readonly char[] DFA14_max = DFA.UnpackEncodedStringToUnsignedChars(DFA14_maxS);
		private static readonly short[] DFA14_accept = DFA.UnpackEncodedString(DFA14_acceptS);
		private static readonly short[] DFA14_special = DFA.UnpackEncodedString(DFA14_specialS);
		private static readonly short[][] DFA14_transition;

		static DFA14()
		{
			int numStates = DFA14_transitionS.Length;
			DFA14_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA14_transition[i] = DFA.UnpackEncodedString(DFA14_transitionS[i]);
			}
		}

		public DFA14( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 14;
			this.eot = DFA14_eot;
			this.eof = DFA14_eof;
			this.min = DFA14_min;
			this.max = DFA14_max;
			this.accept = DFA14_accept;
			this.special = DFA14_special;
			this.transition = DFA14_transition;
		}

		public override string Description { get { return "()+ loopback of 181:4: ( ( NEWLINE )* struct_node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA27 : DFA
	{
		private const string DFA27_eotS =
			"\x4\xFFFF";
		private const string DFA27_eofS =
			"\x4\xFFFF";
		private const string DFA27_minS =
			"\x2\x6\x2\xFFFF";
		private const string DFA27_maxS =
			"\x1\x22\x1\x6E\x2\xFFFF";
		private const string DFA27_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA27_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA27_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x19\xFFFF\x1\x3\x26\xFFFF\x2"+
				"\x3\x4\xFFFF\x1\x3\x1\xFFFF\x4\x3",
				"",
				""
			};

		private static readonly short[] DFA27_eot = DFA.UnpackEncodedString(DFA27_eotS);
		private static readonly short[] DFA27_eof = DFA.UnpackEncodedString(DFA27_eofS);
		private static readonly char[] DFA27_min = DFA.UnpackEncodedStringToUnsignedChars(DFA27_minS);
		private static readonly char[] DFA27_max = DFA.UnpackEncodedStringToUnsignedChars(DFA27_maxS);
		private static readonly short[] DFA27_accept = DFA.UnpackEncodedString(DFA27_acceptS);
		private static readonly short[] DFA27_special = DFA.UnpackEncodedString(DFA27_specialS);
		private static readonly short[][] DFA27_transition;

		static DFA27()
		{
			int numStates = DFA27_transitionS.Length;
			DFA27_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA27_transition[i] = DFA.UnpackEncodedString(DFA27_transitionS[i]);
			}
		}

		public DFA27( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 27;
			this.eot = DFA27_eot;
			this.eof = DFA27_eof;
			this.min = DFA27_min;
			this.max = DFA27_max;
			this.accept = DFA27_accept;
			this.special = DFA27_special;
			this.transition = DFA27_transition;
		}

		public override string Description { get { return "()* loopback of 210:11: ( ( NEWLINE )+ stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA30 : DFA
	{
		private const string DFA30_eotS =
			"\xD\xFFFF";
		private const string DFA30_eofS =
			"\x1\x1\x1\xFFFF\x2\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x5\xFFFF";
		private const string DFA30_minS =
			"\x1\x6\x1\xFFFF\x2\x6\x1\x1B\x1\x6\x1\xFFFF\x1\x6\x1\x1B\x1\x3A\x2\x1B"+
			"\x1\x3A";
		private const string DFA30_maxS =
			"\x1\x6D\x1\xFFFF\x2\x6D\x1\x5D\x1\x6D\x1\xFFFF\x1\x6D\x1\x58\x1\x5C\x1"+
			"\x1B\x2\x5C";
		private const string DFA30_acceptS =
			"\x1\xFFFF\x1\x2\x4\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA30_specialS =
			"\xD\xFFFF}>";
		private static readonly string[] DFA30_transitionS =
			{
				"\x1\x1\x14\xFFFF\x1\x2\x6\xFFFF\x1\x1\x39\xFFFF\x1\x1\x5\xFFFF\x1\x1"+
				"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x3\x2\xFFFF\x1\x1\x1\xFFFF\x2\x1",
				"",
				"\x1\x6\x14\xFFFF\x1\x5\x6\xFFFF\x1\x6\x17\xFFFF\x1\x1\x3\xFFFF\x1\x1"+
				"\x4\xFFFF\x1\x1\x9\xFFFF\x1\x1\x3\xFFFF\x1\x1\xA\xFFFF\x1\x4\x5\xFFFF"+
				"\x1\x6\x2\xFFFF\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\xFFFF\x2\x6",
				"\x1\x6\x14\xFFFF\x1\x7\x6\xFFFF\x1\x6\x39\xFFFF\x1\x6\x5\xFFFF\x1\x6"+
				"\x2\xFFFF\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\xFFFF\x2\x6",
				"\x1\x6\x41\xFFFF\x1\x1",
				"\x1\x6\x14\xFFFF\x1\x6\x6\xFFFF\x1\x6\x17\xFFFF\x1\x6\x1\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x6\x4\xFFFF\x1\x6\x9\xFFFF\x1\x6\x3\xFFFF\x1\x8\xA\xFFFF"+
				"\x1\x6\x5\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1"+
				"\xFFFF\x2\x6",
				"",
				"\x1\x6\x14\xFFFF\x1\x6\x1\x1\x5\xFFFF\x1\x6\x17\xFFFF\x1\x6\x3\xFFFF"+
				"\x1\x6\x4\xFFFF\x1\x6\x9\xFFFF\x1\x6\x3\xFFFF\x1\x6\xA\xFFFF\x1\x6\x5"+
				"\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\xFFFF\x1\x6\x2\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6",
				"\x1\x9\x3C\xFFFF\x1\x6",
				"\x1\x6\x3\xFFFF\x1\x6\x4\xFFFF\x1\xA\xD\xFFFF\x1\x6\x6\xFFFF\x1\xB"+
				"\x3\xFFFF\x1\x6",
				"\x1\xC",
				"\x1\x6\x1E\xFFFF\x1\x6\x1\xFFFF\x1\x1\x1\xFFFF\x1\x6\x1D\xFFFF\x1\x6",
				"\x1\x6\x3\xFFFF\x1\x6\x4\xFFFF\x1\xA\xD\xFFFF\x1\x6\x6\xFFFF\x1\xB"+
				"\x3\xFFFF\x1\x6"
			};

		private static readonly short[] DFA30_eot = DFA.UnpackEncodedString(DFA30_eotS);
		private static readonly short[] DFA30_eof = DFA.UnpackEncodedString(DFA30_eofS);
		private static readonly char[] DFA30_min = DFA.UnpackEncodedStringToUnsignedChars(DFA30_minS);
		private static readonly char[] DFA30_max = DFA.UnpackEncodedStringToUnsignedChars(DFA30_maxS);
		private static readonly short[] DFA30_accept = DFA.UnpackEncodedString(DFA30_acceptS);
		private static readonly short[] DFA30_special = DFA.UnpackEncodedString(DFA30_specialS);
		private static readonly short[][] DFA30_transition;

		static DFA30()
		{
			int numStates = DFA30_transitionS.Length;
			DFA30_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA30_transition[i] = DFA.UnpackEncodedString(DFA30_transitionS[i]);
			}
		}

		public DFA30( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}

		public override string Description { get { return "()* loopback of 235:12: ( stmt_using_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\xB\xFFFF";
		private const string DFA37_eofS =
			"\xB\xFFFF";
		private const string DFA37_minS =
			"\x2\x1B\x1\xFFFF\x1\x1F\x2\x1B\x1\x1F\x1\x3A\x1\x1B\x1\xFFFF\x1\x3A";
		private const string DFA37_maxS =
			"\x2\x72\x1\xFFFF\x1\x71\x1\x72\x1\x1B\x1\x71\x1\x5C\x1\x1B\x1\xFFFF\x1"+
			"\x5C";
		private const string DFA37_acceptS =
			"\x2\xFFFF\x1\x2\x6\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA37_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x22\xFFFF"+
				"\x1\x2\x9\xFFFF\x1\x2",
				"\x1\x3\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x22\xFFFF"+
				"\x1\x2\x9\xFFFF\x1\x2",
				"",
				"\x1\x2\x16\xFFFF\xD\x2\x1\x4\x9\x2\x1\x5\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF"+
				"\x5\x2\x1\xFFFF\x2\x2\x4\xFFFF\x1\x2\xA\xFFFF\x3\x2",
				"\x1\x6\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\xC\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x22\xFFFF"+
				"\x1\x2\x9\xFFFF\x1\x2",
				"\x1\x7",
				"\x1\x2\x16\xFFFF\xD\x2\x1\x4\x9\x2\x1\x8\x2\x2\x1\xFFFF\x6\x2\x1\xFFFF"+
				"\x5\x2\x1\xFFFF\x2\x2\x4\xFFFF\x1\x2\xA\xFFFF\x3\x2",
				"\x1\x9\x1\xFFFF\x1\x2\x2\x9\x4\xFFFF\x1\x9\xD\xFFFF\x1\x9\x3\xFFFF"+
				"\x1\x9\x6\xFFFF\x1\x9",
				"\x1\xA",
				"",
				"\x1\x9\x1\xFFFF\x1\x2\x2\x9\x4\xFFFF\x1\x9\xD\xFFFF\x1\x9\x3\xFFFF"+
				"\x1\x9\x6\xFFFF\x1\x9"
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "280:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _overall_block_in_root396 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _NEWLINE_in_root399 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _EOF_in_root402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_overall_block414 = new BitSet(new ulong[]{0x408000000UL,0x34A400000000UL});
		public static readonly BitSet _node_in_overall_block417 = new BitSet(new ulong[]{0x408000002UL,0x34A400000000UL});
		public static readonly BitSet _func_def_in_node430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_def_in_node445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_node455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_node460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_node465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_import_def476 = new BitSet(new ulong[]{0x10010000002UL});
		public static readonly BitSet _STRING_in_import_def478 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _INDENT_in_import_def482 = new BitSet(new ulong[]{0x400000040UL});
		public static readonly BitSet _NEWLINE_in_import_def485 = new BitSet(new ulong[]{0x10400000000UL});
		public static readonly BitSet _STRING_in_import_def488 = new BitSet(new ulong[]{0x400000040UL});
		public static readonly BitSet _NEWLINE_in_import_def492 = new BitSet(new ulong[]{0x400000040UL});
		public static readonly BitSet _DEDENT_in_import_def495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_enum_def517 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_enum_def519 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_enum_def521 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_enum_def523 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_enum_def526 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_enum_def528 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _103_in_namespace_def550 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_namespace_def552 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _INDENT_in_namespace_def554 = new BitSet(new ulong[]{0x408000000UL,0x34A400000000UL});
		public static readonly BitSet _overall_block_in_namespace_def556 = new BitSet(new ulong[]{0x400000040UL});
		public static readonly BitSet _NEWLINE_in_namespace_def558 = new BitSet(new ulong[]{0x400000040UL});
		public static readonly BitSet _DEDENT_in_namespace_def561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_struct_def582 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_struct_def584 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _INDENT_in_struct_def586 = new BitSet(new ulong[]{0x408000000UL,0x34A410000000UL});
		public static readonly BitSet _struct_block_in_struct_def588 = new BitSet(new ulong[]{0x400000040UL});
		public static readonly BitSet _NEWLINE_in_struct_def590 = new BitSet(new ulong[]{0x400000040UL});
		public static readonly BitSet _DEDENT_in_struct_def593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_struct_block615 = new BitSet(new ulong[]{0x408000000UL,0x34A410000000UL});
		public static readonly BitSet _struct_node_in_struct_block618 = new BitSet(new ulong[]{0x408000002UL,0x34A410000000UL});
		public static readonly BitSet _92_in_attribute630 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_attribute632 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_struct_node654 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _NEWLINE_in_struct_node656 = new BitSet(new ulong[]{0x408000000UL,0x34A410000000UL});
		public static readonly BitSet _node_in_struct_node662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _62_in_type_name_op671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_name_op675 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name_op677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_type_name_op681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_type_name690 = new BitSet(new ulong[]{0x4400000000000002UL,0x10020000UL});
		public static readonly BitSet _81_in_type_name693 = new BitSet(new ulong[]{0x8000000UL,0x1000000UL});
		public static readonly BitSet _type_name_in_type_name696 = new BitSet(new ulong[]{0x0UL,0x1000008UL});
		public static readonly BitSet _67_in_type_name699 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _type_name_in_type_name701 = new BitSet(new ulong[]{0x0UL,0x1000008UL});
		public static readonly BitSet _88_in_type_name707 = new BitSet(new ulong[]{0x4400000000000002UL,0x10000000UL});
		public static readonly BitSet _type_name_op_in_type_name711 = new BitSet(new ulong[]{0x4400000000000002UL,0x10000000UL});
		public static readonly BitSet _81_in_generic_parameter745 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_generic_parameter747 = new BitSet(new ulong[]{0x0UL,0x1000008UL});
		public static readonly BitSet _67_in_generic_parameter750 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_generic_parameter753 = new BitSet(new ulong[]{0x0UL,0x1000008UL});
		public static readonly BitSet _88_in_generic_parameter757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_func_args768 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _67_in_func_args771 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args773 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _type_name_in_func_def795 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_func_def797 = new BitSet(new ulong[]{0x1000000000000000UL,0x20000UL});
		public static readonly BitSet _generic_parameter_in_func_def799 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_func_def802 = new BitSet(new ulong[]{0x2000000008000000UL});
		public static readonly BitSet _func_args_in_func_def804 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_func_def807 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _stmt_block_in_func_def809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block823 = new BitSet(new ulong[]{0x400000040UL});
		public static readonly BitSet _NEWLINE_in_stmt_block826 = new BitSet(new ulong[]{0x1000000408000000UL,0x7A1800000000UL});
		public static readonly BitSet _stmt_in_stmt_block829 = new BitSet(new ulong[]{0x400000040UL});
		public static readonly BitSet _NEWLINE_in_stmt_block833 = new BitSet(new ulong[]{0x400000040UL});
		public static readonly BitSet _DEDENT_in_stmt_block836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_expr887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_expr892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_expr897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_expr902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_stmt_typedef918 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_stmt_typedef920 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_stmt_typedef922 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _type_name_in_stmt_typedef924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_stmt_using955 = new BitSet(new ulong[]{0x8000002UL,0x8000000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using957 = new BitSet(new ulong[]{0x8000002UL,0x8000000000UL});
		public static readonly BitSet _105_in_stmt_return978 = new BitSet(new ulong[]{0x5420010808000002UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_stmt_return980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_stmt_if1001 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stmt_if1003 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_stmt_if1005 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_if1007 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1009 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_stmt_if1012 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_stmt_while1040 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stmt_while1042 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_stmt_while1044 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_while1046 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_stmt_for1074 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stmt_for1076 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_stmt_for1078 = new BitSet(new ulong[]{0x0UL,0x4000010000UL});
		public static readonly BitSet _80_in_stmt_for1081 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_stmt_for1083 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_for1085 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_stmt_for1087 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _102_in_stmt_for1093 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_stmt_for1095 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_for1100 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_stmt_try1147 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1149 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_stmt_try1151 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stmt_try1153 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_stmt_try1155 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_try1157 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident_list1182 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _67_in_ident_list1185 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_ident_list1187 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _ident_list_in_stmt_alloc1209 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_stmt_alloc1211 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _type_name_in_stmt_alloc1213 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_stmt_alloc1216 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_stmt_alloc1218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify1244 = new BitSet(new ulong[]{0x8900000000000002UL,0x1000088289044UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify1247 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _cond_expr_in_stmt_modify1250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _60_in_lambda_expr1274 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _func_args_in_lambda_expr1276 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_lambda_expr1278 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_lambda_expr1280 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr1359 = new BitSet(new ulong[]{0x8900000000000002UL,0x1000088289044UL});
		public static readonly BitSet _modify_expr_op_in_modify_expr1362 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _modify_expr_in_modify_expr1365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item1376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr1388 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_cond_expr1397 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1401 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_cond_expr1403 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr1438 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_or_expr1447 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _and_expr_in_or_expr1451 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _bit_or_in_and_expr1481 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _57_in_and_expr1490 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _bit_or_in_and_expr1494 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _bit_xor_in_bit_or1524 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_bit_or1533 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _bit_xor_in_bit_or1537 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor1567 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _94_in_bit_xor1576 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _bit_and_in_bit_xor1580 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1610 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_bit_and1619 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1623 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1664 = new BitSet(new ulong[]{0x40000000000002UL,0x400000UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr1673 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1727 = new BitSet(new ulong[]{0x2UL,0x3120000UL});
		public static readonly BitSet _cmp_expr_op_in_cmp_expr1736 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr1781 = new BitSet(new ulong[]{0x2UL,0x4040000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr1790 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _add_expr_in_shift_expr1794 = new BitSet(new ulong[]{0x2UL,0x4040000UL});
		public static readonly BitSet _infix_expr_in_add_expr1824 = new BitSet(new ulong[]{0x2UL,0x11UL});
		public static readonly BitSet _64_in_add_expr1834 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _infix_expr_in_add_expr1838 = new BitSet(new ulong[]{0x2UL,0x11UL});
		public static readonly BitSet _68_in_add_expr1865 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _infix_expr_in_add_expr1869 = new BitSet(new ulong[]{0x2UL,0x11UL});
		public static readonly BitSet _mul_expr_in_infix_expr1909 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _Infix_Func_in_infix_expr1919 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _mul_expr_in_infix_expr1923 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _selector_expr_in_mul_expr1955 = new BitSet(new ulong[]{0x4080000000000002UL,0x800UL});
		public static readonly BitSet _62_in_mul_expr1965 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _selector_expr_in_mul_expr1969 = new BitSet(new ulong[]{0x4080000000000002UL,0x800UL});
		public static readonly BitSet _75_in_mul_expr1999 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _selector_expr_in_mul_expr2003 = new BitSet(new ulong[]{0x4080000000000002UL,0x800UL});
		public static readonly BitSet _55_in_mul_expr2033 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _selector_expr_in_mul_expr2037 = new BitSet(new ulong[]{0x4080000000000002UL,0x800UL});
		public static readonly BitSet _prefix_expr_in_selector_expr2080 = new BitSet(new ulong[]{0x2UL,0x500UL});
		public static readonly BitSet _72_in_selector_expr2090 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_selector_expr2094 = new BitSet(new ulong[]{0x2UL,0x500UL});
		public static readonly BitSet _74_in_selector_expr2122 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_selector_expr2127 = new BitSet(new ulong[]{0x2UL,0x500UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr2202 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr2204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_prefix_expr2220 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _type_name_in_prefix_expr2222 = new BitSet(new ulong[]{0x1000000000000000UL,0x10000000UL});
		public static readonly BitSet _60_in_prefix_expr2226 = new BitSet(new ulong[]{0x7420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_list_in_prefix_expr2228 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_prefix_expr2231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_prefix_expr2253 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_list_in_prefix_expr2255 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_prefix_expr2257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr2273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list2285 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _67_in_expr_list2288 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_expr_list2291 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _atom_expr_in_suffix_expr2307 = new BitSet(new ulong[]{0x1000000000000002UL,0x100262A2UL});
		public static readonly BitSet _65_in_suffix_expr2317 = new BitSet(new ulong[]{0x1000000000000002UL,0x100262A2UL});
		public static readonly BitSet _69_in_suffix_expr2343 = new BitSet(new ulong[]{0x1000000000000002UL,0x100262A2UL});
		public static readonly BitSet _73_in_suffix_expr2366 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2368 = new BitSet(new ulong[]{0x1000000000000002UL,0x100262A2UL});
		public static readonly BitSet _71_in_suffix_expr2393 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2395 = new BitSet(new ulong[]{0x1000000000000002UL,0x100262A2UL});
		public static readonly BitSet _78_in_suffix_expr2420 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2422 = new BitSet(new ulong[]{0x1000000000000002UL,0x100262A2UL});
		public static readonly BitSet _generic_parameter_in_suffix_expr2447 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_suffix_expr2450 = new BitSet(new ulong[]{0x7420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_list_in_suffix_expr2452 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_suffix_expr2455 = new BitSet(new ulong[]{0x1000000000000002UL,0x100262A2UL});
		public static readonly BitSet _92_in_suffix_expr2482 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010020000033UL});
		public static readonly BitSet _expr_list_in_suffix_expr2484 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_suffix_expr2487 = new BitSet(new ulong[]{0x1000000000000002UL,0x100262A2UL});
		public static readonly BitSet _77_in_suffix_expr2511 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_suffix_expr2513 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_suffix_expr2515 = new BitSet(new ulong[]{0x7420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_list_in_suffix_expr2517 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_suffix_expr2520 = new BitSet(new ulong[]{0x1000000000000002UL,0x100262A2UL});
		public static readonly BitSet _NUMBER_in_atom_expr2564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_atom_expr2569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr2574 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _60_in_atom_expr2579 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_atom_expr2581 = new BitSet(new ulong[]{0x2000000000000000UL,0x8UL});
		public static readonly BitSet _67_in_atom_expr2584 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_atom_expr2586 = new BitSet(new ulong[]{0x2000000000000000UL,0x8UL});
		public static readonly BitSet _61_in_atom_expr2593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue2626 = new BitSet(new ulong[]{0x1000000000000002UL,0x100242A2UL});
		public static readonly BitSet _65_in_lvalue2636 = new BitSet(new ulong[]{0x1000000000000002UL,0x100242A2UL});
		public static readonly BitSet _69_in_lvalue2664 = new BitSet(new ulong[]{0x1000000000000002UL,0x100242A2UL});
		public static readonly BitSet _73_in_lvalue2689 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_lvalue2691 = new BitSet(new ulong[]{0x1000000000000002UL,0x100242A2UL});
		public static readonly BitSet _71_in_lvalue2718 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_lvalue2720 = new BitSet(new ulong[]{0x1000000000000002UL,0x100242A2UL});
		public static readonly BitSet _78_in_lvalue2747 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _IDENT_in_lvalue2749 = new BitSet(new ulong[]{0x1000000000000002UL,0x100242A2UL});
		public static readonly BitSet _generic_parameter_in_lvalue2776 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_lvalue2779 = new BitSet(new ulong[]{0x7420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_list_in_lvalue2781 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_lvalue2784 = new BitSet(new ulong[]{0x1000000000000002UL,0x100242A2UL});
		public static readonly BitSet _92_in_lvalue2813 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_in_lvalue2815 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_lvalue2817 = new BitSet(new ulong[]{0x1000000000000002UL,0x100242A2UL});
		public static readonly BitSet _60_in_lvalue_atom2855 = new BitSet(new ulong[]{0x3000000008000000UL});
		public static readonly BitSet _lvalue_in_lvalue_atom2858 = new BitSet(new ulong[]{0x2000000000000000UL,0x8UL});
		public static readonly BitSet _67_in_lvalue_atom2861 = new BitSet(new ulong[]{0x1000000008000000UL});
		public static readonly BitSet _lvalue_in_lvalue_atom2863 = new BitSet(new ulong[]{0x2000000000000000UL,0x8UL});
		public static readonly BitSet _61_in_lvalue_atom2869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_lvalue_atom2883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_parameter_in_synpred106_SugarCpp2447 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_synpred106_SugarCpp2450 = new BitSet(new ulong[]{0x7420010808000000UL,0x4010000000033UL});
		public static readonly BitSet _expr_list_in_synpred106_SugarCpp2452 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_synpred106_SugarCpp2455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_synpred108_SugarCpp2482 = new BitSet(new ulong[]{0x5420010808000000UL,0x4010020000033UL});
		public static readonly BitSet _expr_list_in_synpred108_SugarCpp2484 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_synpred108_SugarCpp2487 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
