//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-04-20 16:03:58

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "DOUBLE", "EXPONENT", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_For", "Stmt_If", "Stmt_While", "'!='", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'else'", "'for'", "'if'", "'import'", "'while'"
	};
	public const int EOF=-1;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int Block=4;
	public const int DEDENT=5;
	public const int DOUBLE=6;
	public const int EXPONENT=7;
	public const int Expr_Alloc=8;
	public const int Expr_Bin=9;
	public const int Expr_Block=10;
	public const int Expr_Call=11;
	public const int Func_Def=12;
	public const int IDENT=13;
	public const int INDENT=14;
	public const int INT=15;
	public const int Left_Bracket=16;
	public const int NEWLINE=17;
	public const int Right_Bracket=18;
	public const int Root=19;
	public const int SP=20;
	public const int STRING=21;
	public const int Stmt_For=22;
	public const int Stmt_If=23;
	public const int Stmt_While=24;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:102:8: public root : ( node )+ EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EOF2 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EOF2_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(102, 1);
		try
		{
			// SugarCpp.g:103:2: ( ( node )+ EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:103:4: ( node )+ EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(103, 4);
			// SugarCpp.g:103:4: ( node )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENT||LA1_0==42))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:103:4: node
					{
					DebugLocation(103, 4);
					PushFollow(Follow._node_in_root199);
					node1=node();
					PopFollow();

					adaptor.AddChild(root_0, node1.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(103, 10);
			EOF2=(IToken)Match(input,EOF,Follow._EOF_in_root202); 
			EOF2_tree = (CommonTree)adaptor.Create(EOF2);
			adaptor.AddChild(root_0, EOF2_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:106:1: node : ( imports | func_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> imports3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_def4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(106, 1);
		try
		{
			// SugarCpp.g:107:2: ( imports | func_def )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==42))
			{
				alt2 = 1;
			}
			else if ((LA2_0==IDENT))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:107:4: imports
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(107, 4);
				PushFollow(Follow._imports_in_node213);
				imports3=imports();
				PopFollow();

				adaptor.AddChild(root_0, imports3.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:108:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(108, 4);
				PushFollow(Follow._func_def_in_node218);
				func_def4=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def4.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_imports();
	partial void LeaveRule_imports();

	// $ANTLR start "imports"
	// SugarCpp.g:111:1: imports : 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )* ;
	[GrammarRule("imports")]
	private AstParserRuleReturnScope<CommonTree, IToken> imports()
	{
		EnterRule_imports();
		EnterRule("imports", 3);
		TraceIn("imports", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal5 = default(IToken);
		IToken STRING6 = default(IToken);
		IToken INDENT7 = default(IToken);
		IToken NEWLINE8 = default(IToken);
		IToken STRING9 = default(IToken);
		IToken NEWLINE10 = default(IToken);
		IToken DEDENT11 = default(IToken);
		IToken NEWLINE12 = default(IToken);

		CommonTree string_literal5_tree = default(CommonTree);
		CommonTree STRING6_tree = default(CommonTree);
		CommonTree INDENT7_tree = default(CommonTree);
		CommonTree NEWLINE8_tree = default(CommonTree);
		CommonTree STRING9_tree = default(CommonTree);
		CommonTree NEWLINE10_tree = default(CommonTree);
		CommonTree DEDENT11_tree = default(CommonTree);
		CommonTree NEWLINE12_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(111, 1);
		try
		{
			// SugarCpp.g:112:2: ( 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarCpp.g:112:4: 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(112, 4);
			string_literal5=(IToken)Match(input,42,Follow._42_in_imports229); 
			string_literal5_tree = (CommonTree)adaptor.Create(string_literal5);
			adaptor.AddChild(root_0, string_literal5_tree);
			DebugLocation(112, 13);
			// SugarCpp.g:112:13: ( STRING )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==STRING))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:112:13: STRING
				{
				DebugLocation(112, 13);
				STRING6=(IToken)Match(input,STRING,Follow._STRING_in_imports231); 
				STRING6_tree = (CommonTree)adaptor.Create(STRING6);
				adaptor.AddChild(root_0, STRING6_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(112, 21);
			// SugarCpp.g:112:21: ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==INDENT))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:112:22: INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT
				{
				DebugLocation(112, 22);
				INDENT7=(IToken)Match(input,INDENT,Follow._INDENT_in_imports235); 
				INDENT7_tree = (CommonTree)adaptor.Create(INDENT7);
				adaptor.AddChild(root_0, INDENT7_tree);
				DebugLocation(112, 29);
				// SugarCpp.g:112:29: ( ( NEWLINE )+ STRING )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					try
					{
						alt5 = dfa5.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:112:30: ( NEWLINE )+ STRING
						{
						DebugLocation(112, 30);
						// SugarCpp.g:112:30: ( NEWLINE )+
						int cnt4=0;
						try { DebugEnterSubRule(4);
						while (true)
						{
							int alt4=2;
							try { DebugEnterDecision(4, false);
							int LA4_0 = input.LA(1);

							if ((LA4_0==NEWLINE))
							{
								alt4 = 1;
							}


							} finally { DebugExitDecision(4); }
							switch (alt4)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:112:30: NEWLINE
								{
								DebugLocation(112, 30);
								NEWLINE8=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports238); 
								NEWLINE8_tree = (CommonTree)adaptor.Create(NEWLINE8);
								adaptor.AddChild(root_0, NEWLINE8_tree);

								}
								break;

							default:
								if (cnt4 >= 1)
									goto loop4;

								EarlyExitException eee4 = new EarlyExitException( 4, input );
								DebugRecognitionException(eee4);
								throw eee4;
							}
							cnt4++;
						}
						loop4:
							;

						} finally { DebugExitSubRule(4); }

						DebugLocation(112, 39);
						STRING9=(IToken)Match(input,STRING,Follow._STRING_in_imports241); 
						STRING9_tree = (CommonTree)adaptor.Create(STRING9);
						adaptor.AddChild(root_0, STRING9_tree);

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(112, 48);
				// SugarCpp.g:112:48: ( NEWLINE )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==NEWLINE))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:112:48: NEWLINE
						{
						DebugLocation(112, 48);
						NEWLINE10=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports245); 
						NEWLINE10_tree = (CommonTree)adaptor.Create(NEWLINE10);
						adaptor.AddChild(root_0, NEWLINE10_tree);

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(112, 57);
				DEDENT11=(IToken)Match(input,DEDENT,Follow._DEDENT_in_imports248); 
				DEDENT11_tree = (CommonTree)adaptor.Create(DEDENT11);
				adaptor.AddChild(root_0, DEDENT11_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(112, 66);
			// SugarCpp.g:112:66: ( NEWLINE )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==NEWLINE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:112:66: NEWLINE
					{
					DebugLocation(112, 66);
					NEWLINE12=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports252); 
					NEWLINE12_tree = (CommonTree)adaptor.Create(NEWLINE12);
					adaptor.AddChild(root_0, NEWLINE12_tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("imports", 3);
			LeaveRule("imports", 3);
			LeaveRule_imports();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return retval;

	}
	// $ANTLR end "imports"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:115:1: type_name : IDENT ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 4);
		TraceIn("type_name", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT13 = default(IToken);

		CommonTree IDENT13_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(115, 1);
		try
		{
			// SugarCpp.g:116:2: ( IDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:116:4: IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(116, 4);
			IDENT13=(IToken)Match(input,IDENT,Follow._IDENT_in_type_name264); 
			IDENT13_tree = (CommonTree)adaptor.Create(IDENT13);
			adaptor.AddChild(root_0, IDENT13_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 4);
			LeaveRule("type_name", 4);
			LeaveRule_type_name();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:119:1: func_def : type_name IDENT '(' ')' stmt_block ( NEWLINE )* ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 5);
		TraceIn("func_def", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT15 = default(IToken);
		IToken char_literal16 = default(IToken);
		IToken char_literal17 = default(IToken);
		IToken NEWLINE19 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name14 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block18 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT15_tree = default(CommonTree);
		CommonTree char_literal16_tree = default(CommonTree);
		CommonTree char_literal17_tree = default(CommonTree);
		CommonTree NEWLINE19_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(119, 4);
		try
		{
			// SugarCpp.g:120:2: ( type_name IDENT '(' ')' stmt_block ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarCpp.g:120:4: type_name IDENT '(' ')' stmt_block ( NEWLINE )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(120, 4);
			PushFollow(Follow._type_name_in_func_def275);
			type_name14=type_name();
			PopFollow();

			adaptor.AddChild(root_0, type_name14.Tree);
			DebugLocation(120, 14);
			IDENT15=(IToken)Match(input,IDENT,Follow._IDENT_in_func_def277); 
			IDENT15_tree = (CommonTree)adaptor.Create(IDENT15);
			adaptor.AddChild(root_0, IDENT15_tree);
			DebugLocation(120, 20);
			char_literal16=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_func_def279); 
			char_literal16_tree = (CommonTree)adaptor.Create(char_literal16);
			adaptor.AddChild(root_0, char_literal16_tree);
			DebugLocation(120, 24);
			char_literal17=(IToken)Match(input,26,Follow._26_in_func_def281); 
			char_literal17_tree = (CommonTree)adaptor.Create(char_literal17);
			adaptor.AddChild(root_0, char_literal17_tree);
			DebugLocation(120, 28);
			PushFollow(Follow._stmt_block_in_func_def283);
			stmt_block18=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block18.Tree);
			DebugLocation(120, 39);
			// SugarCpp.g:120:39: ( NEWLINE )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==NEWLINE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:120:39: NEWLINE
					{
					DebugLocation(120, 39);
					NEWLINE19=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def285); 
					NEWLINE19_tree = (CommonTree)adaptor.Create(NEWLINE19);
					adaptor.AddChild(root_0, NEWLINE19_tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 5);
			LeaveRule("func_def", 5);
			LeaveRule_func_def();
		}
		DebugLocation(121, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:123:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )+ DEDENT ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 6);
		TraceIn("stmt_block", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT20 = default(IToken);
		IToken NEWLINE21 = default(IToken);
		IToken DEDENT23 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt22 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT20_tree = default(CommonTree);
		CommonTree NEWLINE21_tree = default(CommonTree);
		CommonTree DEDENT23_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(123, 1);
		try
		{
			// SugarCpp.g:124:2: ( INDENT ( ( NEWLINE )+ stmt )+ DEDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:124:4: INDENT ( ( NEWLINE )+ stmt )+ DEDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(124, 4);
			INDENT20=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block300); 
			INDENT20_tree = (CommonTree)adaptor.Create(INDENT20);
			adaptor.AddChild(root_0, INDENT20_tree);
			DebugLocation(124, 11);
			// SugarCpp.g:124:11: ( ( NEWLINE )+ stmt )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:124:12: ( NEWLINE )+ stmt
					{
					DebugLocation(124, 12);
					// SugarCpp.g:124:12: ( NEWLINE )+
					int cnt10=0;
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==NEWLINE))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch (alt10)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:124:12: NEWLINE
							{
							DebugLocation(124, 12);
							NEWLINE21=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block303); 
							NEWLINE21_tree = (CommonTree)adaptor.Create(NEWLINE21);
							adaptor.AddChild(root_0, NEWLINE21_tree);

							}
							break;

						default:
							if (cnt10 >= 1)
								goto loop10;

							EarlyExitException eee10 = new EarlyExitException( 10, input );
							DebugRecognitionException(eee10);
							throw eee10;
						}
						cnt10++;
					}
					loop10:
						;

					} finally { DebugExitSubRule(10); }

					DebugLocation(124, 21);
					PushFollow(Follow._stmt_in_stmt_block306);
					stmt22=stmt();
					PopFollow();

					adaptor.AddChild(root_0, stmt22.Tree);

					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(124, 28);
			DEDENT23=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block310); 
			DEDENT23_tree = (CommonTree)adaptor.Create(DEDENT23);
			adaptor.AddChild(root_0, DEDENT23_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 6);
			LeaveRule("stmt_block", 6);
			LeaveRule_stmt_block();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:127:1: stmt : ( stmt_if | stmt_while | stmt_for | expr );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 7);
		TraceIn("stmt", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for26 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(127, 1);
		try
		{
			// SugarCpp.g:128:2: ( stmt_if | stmt_while | stmt_for | expr )
			int alt12=4;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case 41:
				{
				alt12 = 1;
				}
				break;
			case 43:
				{
				alt12 = 2;
				}
				break;
			case 40:
				{
				alt12 = 3;
				}
				break;
			case DOUBLE:
			case Expr_Call:
			case IDENT:
			case INT:
			case STRING:
				{
				alt12 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:128:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(128, 4);
				PushFollow(Follow._stmt_if_in_stmt321);
				stmt_if24=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if24.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:129:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(129, 4);
				PushFollow(Follow._stmt_while_in_stmt326);
				stmt_while25=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while25.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:130:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(130, 4);
				PushFollow(Follow._stmt_for_in_stmt331);
				stmt_for26=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for26.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:131:4: expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(131, 4);
				PushFollow(Follow._expr_in_stmt336);
				expr27=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr27.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 7);
			LeaveRule("stmt", 7);
			LeaveRule_stmt();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:134:1: stmt_if : 'if' expr stmt_block ( 'else' stmt_block )? ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 8);
		TraceIn("stmt_if", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal28 = default(IToken);
		IToken string_literal31 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr29 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal28_tree = default(CommonTree);
		CommonTree string_literal31_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(134, 1);
		try
		{
			// SugarCpp.g:135:2: ( 'if' expr stmt_block ( 'else' stmt_block )? )
			DebugEnterAlt(1);
			// SugarCpp.g:135:4: 'if' expr stmt_block ( 'else' stmt_block )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(135, 4);
			string_literal28=(IToken)Match(input,41,Follow._41_in_stmt_if347); 
			string_literal28_tree = (CommonTree)adaptor.Create(string_literal28);
			adaptor.AddChild(root_0, string_literal28_tree);
			DebugLocation(135, 9);
			PushFollow(Follow._expr_in_stmt_if349);
			expr29=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr29.Tree);
			DebugLocation(135, 14);
			PushFollow(Follow._stmt_block_in_stmt_if351);
			stmt_block30=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block30.Tree);
			DebugLocation(135, 25);
			// SugarCpp.g:135:25: ( 'else' stmt_block )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0==39))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:135:26: 'else' stmt_block
				{
				DebugLocation(135, 26);
				string_literal31=(IToken)Match(input,39,Follow._39_in_stmt_if354); 
				string_literal31_tree = (CommonTree)adaptor.Create(string_literal31);
				adaptor.AddChild(root_0, string_literal31_tree);
				DebugLocation(135, 33);
				PushFollow(Follow._stmt_block_in_stmt_if356);
				stmt_block32=stmt_block();
				PopFollow();

				adaptor.AddChild(root_0, stmt_block32.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 8);
			LeaveRule("stmt_if", 8);
			LeaveRule_stmt_if();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:138:1: stmt_while : 'while' expr stmt_block ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 9);
		TraceIn("stmt_while", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal33 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block35 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal33_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(138, 1);
		try
		{
			// SugarCpp.g:139:2: ( 'while' expr stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:139:4: 'while' expr stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(139, 4);
			string_literal33=(IToken)Match(input,43,Follow._43_in_stmt_while370); 
			string_literal33_tree = (CommonTree)adaptor.Create(string_literal33);
			adaptor.AddChild(root_0, string_literal33_tree);
			DebugLocation(139, 12);
			PushFollow(Follow._expr_in_stmt_while372);
			expr34=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr34.Tree);
			DebugLocation(139, 17);
			PushFollow(Follow._stmt_block_in_stmt_while374);
			stmt_block35=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block35.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 9);
			LeaveRule("stmt_while", 9);
			LeaveRule_stmt_while();
		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:142:1: stmt_for : 'for' '(' expr ';' expr ';' expr ')' stmt_block ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 10);
		TraceIn("stmt_for", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal36 = default(IToken);
		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken char_literal41 = default(IToken);
		IToken char_literal43 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr40 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block44 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal36_tree = default(CommonTree);
		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree char_literal41_tree = default(CommonTree);
		CommonTree char_literal43_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(142, 1);
		try
		{
			// SugarCpp.g:143:2: ( 'for' '(' expr ';' expr ';' expr ')' stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:143:4: 'for' '(' expr ';' expr ';' expr ')' stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(143, 4);
			string_literal36=(IToken)Match(input,40,Follow._40_in_stmt_for385); 
			string_literal36_tree = (CommonTree)adaptor.Create(string_literal36);
			adaptor.AddChild(root_0, string_literal36_tree);
			DebugLocation(143, 10);
			char_literal37=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_stmt_for387); 
			char_literal37_tree = (CommonTree)adaptor.Create(char_literal37);
			adaptor.AddChild(root_0, char_literal37_tree);
			DebugLocation(143, 14);
			PushFollow(Follow._expr_in_stmt_for389);
			expr38=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr38.Tree);
			DebugLocation(143, 19);
			char_literal39=(IToken)Match(input,32,Follow._32_in_stmt_for391); 
			char_literal39_tree = (CommonTree)adaptor.Create(char_literal39);
			adaptor.AddChild(root_0, char_literal39_tree);
			DebugLocation(143, 23);
			PushFollow(Follow._expr_in_stmt_for393);
			expr40=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr40.Tree);
			DebugLocation(143, 28);
			char_literal41=(IToken)Match(input,32,Follow._32_in_stmt_for395); 
			char_literal41_tree = (CommonTree)adaptor.Create(char_literal41);
			adaptor.AddChild(root_0, char_literal41_tree);
			DebugLocation(143, 32);
			PushFollow(Follow._expr_in_stmt_for397);
			expr42=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr42.Tree);
			DebugLocation(143, 37);
			char_literal43=(IToken)Match(input,26,Follow._26_in_stmt_for399); 
			char_literal43_tree = (CommonTree)adaptor.Create(char_literal43);
			adaptor.AddChild(root_0, char_literal43_tree);
			DebugLocation(143, 41);
			PushFollow(Follow._stmt_block_in_stmt_for401);
			stmt_block44=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block44.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 10);
			LeaveRule("stmt_for", 10);
			LeaveRule_stmt_for();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:146:1: expr : alloc_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 11);
		TraceIn("expr", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> alloc_expr45 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(146, 1);
		try
		{
			// SugarCpp.g:147:2: ( alloc_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:147:4: alloc_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(147, 4);
			PushFollow(Follow._alloc_expr_in_expr412);
			alloc_expr45=alloc_expr();
			PopFollow();

			adaptor.AddChild(root_0, alloc_expr45.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 11);
			LeaveRule("expr", 11);
			LeaveRule_expr();
		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarCpp.g:150:1: alloc_expr : ( type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) | logic_expr );
	[GrammarRule("alloc_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 12);
		TraceIn("alloc_expr", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT47 = default(IToken);
		IToken char_literal48 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> logic_expr50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT47_tree = default(CommonTree);
		CommonTree char_literal48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_35=new RewriteRuleITokenStream(adaptor,"token 35");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(150, 1);
		try
		{
			// SugarCpp.g:151:2: ( type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) | logic_expr )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==IDENT))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==IDENT))
				{
					alt15 = 1;
				}
				else if ((LA15_1==DEDENT||LA15_1==Expr_Call||LA15_1==INDENT||LA15_1==NEWLINE||(LA15_1>=25 && LA15_1<=38)))
				{
					alt15 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA15_0==DOUBLE||LA15_0==Expr_Call||LA15_0==INT||LA15_0==STRING))
			{
				alt15 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:151:4: type_name IDENT ( '=' expr )?
				{
				DebugLocation(151, 4);
				PushFollow(Follow._type_name_in_alloc_expr423);
				type_name46=type_name();
				PopFollow();

				stream_type_name.Add(type_name46.Tree);
				DebugLocation(151, 14);
				IDENT47=(IToken)Match(input,IDENT,Follow._IDENT_in_alloc_expr425);  
				stream_IDENT.Add(IDENT47);

				DebugLocation(151, 20);
				// SugarCpp.g:151:20: ( '=' expr )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==35))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:151:21: '=' expr
					{
					DebugLocation(151, 21);
					char_literal48=(IToken)Match(input,35,Follow._35_in_alloc_expr428);  
					stream_35.Add(char_literal48);

					DebugLocation(151, 25);
					PushFollow(Follow._expr_in_alloc_expr430);
					expr49=expr();
					PopFollow();

					stream_expr.Add(expr49.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }



				{
				// AST REWRITE
				// elements: type_name, expr, IDENT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 151:32: -> ^( Expr_Alloc type_name IDENT ( expr )? )
				{
					DebugLocation(151, 35);
					// SugarCpp.g:151:35: ^( Expr_Alloc type_name IDENT ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(151, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(151, 48);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(151, 58);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(151, 64);
					// SugarCpp.g:151:64: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(151, 64);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:152:4: logic_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(152, 4);
				PushFollow(Follow._logic_expr_in_alloc_expr450);
				logic_expr50=logic_expr();
				PopFollow();

				adaptor.AddChild(root_0, logic_expr50.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("alloc_expr", 12);
			LeaveRule("alloc_expr", 12);
			LeaveRule_alloc_expr();
		}
		DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return retval;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_logic_expr();
	partial void LeaveRule_logic_expr();

	// $ANTLR start "logic_expr"
	// SugarCpp.g:155:1: logic_expr : assign_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )* ;
	[GrammarRule("logic_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> logic_expr()
	{
		EnterRule_logic_expr();
		EnterRule("logic_expr", 13);
		TraceIn("logic_expr", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set52 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> assign_expr51 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assign_expr53 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set52_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logic_expr");
		DebugLocation(155, 1);
		try
		{
			// SugarCpp.g:156:2: ( assign_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:156:4: assign_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(156, 4);
			PushFollow(Follow._assign_expr_in_logic_expr461);
			assign_expr51=assign_expr();
			PopFollow();

			adaptor.AddChild(root_0, assign_expr51.Tree);
			DebugLocation(156, 16);
			// SugarCpp.g:156:16: ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==25||(LA16_0>=33 && LA16_0<=34)||(LA16_0>=36 && LA16_0<=38)))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:156:17: ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr
					{
					DebugLocation(156, 56);

					set52=(IToken)input.LT(1);
					set52=(IToken)input.LT(1);
					if (input.LA(1)==25||(input.LA(1)>=33 && input.LA(1)<=34)||(input.LA(1)>=36 && input.LA(1)<=38))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set52), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(156, 58);
					PushFollow(Follow._assign_expr_in_logic_expr489);
					assign_expr53=assign_expr();
					PopFollow();

					adaptor.AddChild(root_0, assign_expr53.Tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logic_expr", 13);
			LeaveRule("logic_expr", 13);
			LeaveRule_logic_expr();
		}
		DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_expr"); }
		return retval;

	}
	// $ANTLR end "logic_expr"

	partial void EnterRule_assign_expr();
	partial void LeaveRule_assign_expr();

	// $ANTLR start "assign_expr"
	// SugarCpp.g:159:1: assign_expr : add_expr ( '=' ^ add_expr )* ;
	[GrammarRule("assign_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> assign_expr()
	{
		EnterRule_assign_expr();
		EnterRule("assign_expr", 14);
		TraceIn("assign_expr", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> add_expr54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> add_expr56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal55_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assign_expr");
		DebugLocation(159, 1);
		try
		{
			// SugarCpp.g:160:2: ( add_expr ( '=' ^ add_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:160:4: add_expr ( '=' ^ add_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(160, 4);
			PushFollow(Follow._add_expr_in_assign_expr502);
			add_expr54=add_expr();
			PopFollow();

			adaptor.AddChild(root_0, add_expr54.Tree);
			DebugLocation(160, 13);
			// SugarCpp.g:160:13: ( '=' ^ add_expr )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==35))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:160:14: '=' ^ add_expr
					{
					DebugLocation(160, 17);
					char_literal55=(IToken)Match(input,35,Follow._35_in_assign_expr505); 
					char_literal55_tree = (CommonTree)adaptor.Create(char_literal55);
					root_0 = (CommonTree)adaptor.BecomeRoot(char_literal55_tree, root_0);
					DebugLocation(160, 19);
					PushFollow(Follow._add_expr_in_assign_expr508);
					add_expr56=add_expr();
					PopFollow();

					adaptor.AddChild(root_0, add_expr56.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assign_expr", 14);
			LeaveRule("assign_expr", 14);
			LeaveRule_assign_expr();
		}
		DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "assign_expr"); }
		return retval;

	}
	// $ANTLR end "assign_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:163:1: add_expr : mul_expr ( ( '+' | '-' ) ^ mul_expr )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 15);
		TraceIn("add_expr", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set58 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> mul_expr57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> mul_expr59 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set58_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(163, 1);
		try
		{
			// SugarCpp.g:164:2: ( mul_expr ( ( '+' | '-' ) ^ mul_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:164:4: mul_expr ( ( '+' | '-' ) ^ mul_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(164, 4);
			PushFollow(Follow._mul_expr_in_add_expr521);
			mul_expr57=mul_expr();
			PopFollow();

			adaptor.AddChild(root_0, mul_expr57.Tree);
			DebugLocation(164, 13);
			// SugarCpp.g:164:13: ( ( '+' | '-' ) ^ mul_expr )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==28||LA18_0==30))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:164:14: ( '+' | '-' ) ^ mul_expr
					{
					DebugLocation(164, 25);

					set58=(IToken)input.LT(1);
					set58=(IToken)input.LT(1);
					if (input.LA(1)==28||input.LA(1)==30)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set58), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(164, 27);
					PushFollow(Follow._mul_expr_in_add_expr533);
					mul_expr59=mul_expr();
					PopFollow();

					adaptor.AddChild(root_0, mul_expr59.Tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 15);
			LeaveRule("add_expr", 15);
			LeaveRule_add_expr();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:167:1: mul_expr : call_expr ( ( '*' | '/' ) ^ call_expr )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 16);
		TraceIn("mul_expr", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set61 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> call_expr60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> call_expr62 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set61_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(167, 1);
		try
		{
			// SugarCpp.g:168:2: ( call_expr ( ( '*' | '/' ) ^ call_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:168:4: call_expr ( ( '*' | '/' ) ^ call_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(168, 4);
			PushFollow(Follow._call_expr_in_mul_expr546);
			call_expr60=call_expr();
			PopFollow();

			adaptor.AddChild(root_0, call_expr60.Tree);
			DebugLocation(168, 14);
			// SugarCpp.g:168:14: ( ( '*' | '/' ) ^ call_expr )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==27||LA19_0==31))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:168:15: ( '*' | '/' ) ^ call_expr
					{
					DebugLocation(168, 26);

					set61=(IToken)input.LT(1);
					set61=(IToken)input.LT(1);
					if (input.LA(1)==27||input.LA(1)==31)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set61), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(168, 28);
					PushFollow(Follow._call_expr_in_mul_expr558);
					call_expr62=call_expr();
					PopFollow();

					adaptor.AddChild(root_0, call_expr62.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 16);
			LeaveRule("mul_expr", 16);
			LeaveRule_mul_expr();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_args_list();
	partial void LeaveRule_args_list();

	// $ANTLR start "args_list"
	// SugarCpp.g:175:1: args_list : ( expr )? ( ',' expr )* -> ( expr )* ;
	[GrammarRule("args_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> args_list()
	{
		EnterRule_args_list();
		EnterRule("args_list", 17);
		TraceIn("args_list", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_29=new RewriteRuleITokenStream(adaptor,"token 29");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "args_list");
		DebugLocation(175, 1);
		try
		{
			// SugarCpp.g:176:2: ( ( expr )? ( ',' expr )* -> ( expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:176:4: ( expr )? ( ',' expr )*
			{
			DebugLocation(176, 4);
			// SugarCpp.g:176:4: ( expr )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==DOUBLE||LA20_0==Expr_Call||LA20_0==IDENT||LA20_0==INT||LA20_0==STRING))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:176:4: expr
				{
				DebugLocation(176, 4);
				PushFollow(Follow._expr_in_args_list582);
				expr63=expr();
				PopFollow();

				stream_expr.Add(expr63.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(176, 10);
			// SugarCpp.g:176:10: ( ',' expr )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==29))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:176:11: ',' expr
					{
					DebugLocation(176, 11);
					char_literal64=(IToken)Match(input,29,Follow._29_in_args_list586);  
					stream_29.Add(char_literal64);

					DebugLocation(176, 15);
					PushFollow(Follow._expr_in_args_list588);
					expr65=expr();
					PopFollow();

					stream_expr.Add(expr65.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 176:22: -> ( expr )*
			{
				DebugLocation(176, 25);
				// SugarCpp.g:176:25: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(176, 25);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}
				stream_expr.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args_list", 17);
			LeaveRule("args_list", 17);
			LeaveRule_args_list();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "args_list"); }
		return retval;

	}
	// $ANTLR end "args_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarCpp.g:179:1: call_expr : atom_expr ( Expr_Call ^ args_list ')' !)* ;
	[GrammarRule("call_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 18);
		TraceIn("call_expr", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken Expr_Call67 = default(IToken);
		IToken char_literal69 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> atom_expr66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> args_list68 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree Expr_Call67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(179, 1);
		try
		{
			// SugarCpp.g:180:2: ( atom_expr ( Expr_Call ^ args_list ')' !)* )
			DebugEnterAlt(1);
			// SugarCpp.g:180:4: atom_expr ( Expr_Call ^ args_list ')' !)*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(180, 4);
			PushFollow(Follow._atom_expr_in_call_expr606);
			atom_expr66=atom_expr();
			PopFollow();

			adaptor.AddChild(root_0, atom_expr66.Tree);
			DebugLocation(180, 14);
			// SugarCpp.g:180:14: ( Expr_Call ^ args_list ')' !)*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==Expr_Call))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:180:15: Expr_Call ^ args_list ')' !
					{
					DebugLocation(180, 24);
					Expr_Call67=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_call_expr609); 
					Expr_Call67_tree = (CommonTree)adaptor.Create(Expr_Call67);
					root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Call67_tree, root_0);
					DebugLocation(180, 26);
					PushFollow(Follow._args_list_in_call_expr612);
					args_list68=args_list();
					PopFollow();

					adaptor.AddChild(root_0, args_list68.Tree);
					DebugLocation(180, 39);
					char_literal69=(IToken)Match(input,26,Follow._26_in_call_expr614); 

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("call_expr", 18);
			LeaveRule("call_expr", 18);
			LeaveRule_call_expr();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return retval;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:183:1: atom_expr : ( INT | DOUBLE | IDENT | STRING | '(' ! expr ')' !);
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 19);
		TraceIn("atom_expr", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INT70 = default(IToken);
		IToken DOUBLE71 = default(IToken);
		IToken IDENT72 = default(IToken);
		IToken STRING73 = default(IToken);
		IToken char_literal74 = default(IToken);
		IToken char_literal76 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr75 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INT70_tree = default(CommonTree);
		CommonTree DOUBLE71_tree = default(CommonTree);
		CommonTree IDENT72_tree = default(CommonTree);
		CommonTree STRING73_tree = default(CommonTree);
		CommonTree char_literal74_tree = default(CommonTree);
		CommonTree char_literal76_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(183, 1);
		try
		{
			// SugarCpp.g:184:2: ( INT | DOUBLE | IDENT | STRING | '(' ! expr ')' !)
			int alt23=5;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt23 = 1;
				}
				break;
			case DOUBLE:
				{
				alt23 = 2;
				}
				break;
			case IDENT:
				{
				alt23 = 3;
				}
				break;
			case STRING:
				{
				alt23 = 4;
				}
				break;
			case Expr_Call:
				{
				alt23 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:184:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				INT70=(IToken)Match(input,INT,Follow._INT_in_atom_expr628); 
				INT70_tree = (CommonTree)adaptor.Create(INT70);
				adaptor.AddChild(root_0, INT70_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:185:4: DOUBLE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 4);
				DOUBLE71=(IToken)Match(input,DOUBLE,Follow._DOUBLE_in_atom_expr633); 
				DOUBLE71_tree = (CommonTree)adaptor.Create(DOUBLE71);
				adaptor.AddChild(root_0, DOUBLE71_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:186:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				IDENT72=(IToken)Match(input,IDENT,Follow._IDENT_in_atom_expr638); 
				IDENT72_tree = (CommonTree)adaptor.Create(IDENT72);
				adaptor.AddChild(root_0, IDENT72_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:187:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				STRING73=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr643); 
				STRING73_tree = (CommonTree)adaptor.Create(STRING73);
				adaptor.AddChild(root_0, STRING73_tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:188:4: '(' ! expr ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 7);
				char_literal74=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_atom_expr648); 
				DebugLocation(188, 9);
				PushFollow(Follow._expr_in_atom_expr651);
				expr75=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr75.Tree);
				DebugLocation(188, 17);
				char_literal76=(IToken)Match(input,26,Follow._26_in_atom_expr653); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 19);
			LeaveRule("atom_expr", 19);
			LeaveRule_atom_expr();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"
	#endregion Rules


	#region DFA
	private DFA5 dfa5;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x4\xFFFF";
		private const string DFA5_eofS =
			"\x4\xFFFF";
		private const string DFA5_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA5_maxS =
			"\x1\x11\x1\x15\x2\xFFFF";
		private const string DFA5_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA5_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x1",
				"\x1\x2\xB\xFFFF\x1\x1\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "()+ loopback of 112:29: ( ( NEWLINE )+ STRING )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root199 = new BitSet(new ulong[]{0x40000002000UL});
		public static readonly BitSet _EOF_in_root202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _imports_in_node213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_def_in_node218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_imports229 = new BitSet(new ulong[]{0x224002UL});
		public static readonly BitSet _STRING_in_imports231 = new BitSet(new ulong[]{0x24002UL});
		public static readonly BitSet _INDENT_in_imports235 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _NEWLINE_in_imports238 = new BitSet(new ulong[]{0x220000UL});
		public static readonly BitSet _STRING_in_imports241 = new BitSet(new ulong[]{0x20020UL});
		public static readonly BitSet _NEWLINE_in_imports245 = new BitSet(new ulong[]{0x20020UL});
		public static readonly BitSet _DEDENT_in_imports248 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _NEWLINE_in_imports252 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _IDENT_in_type_name264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_def275 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENT_in_func_def277 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _Expr_Call_in_func_def279 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_func_def281 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_func_def283 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _NEWLINE_in_func_def285 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _INDENT_in_stmt_block300 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block303 = new BitSet(new ulong[]{0xB000022A840UL});
		public static readonly BitSet _stmt_in_stmt_block306 = new BitSet(new ulong[]{0x20020UL});
		public static readonly BitSet _DEDENT_in_stmt_block310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_stmt_if347 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_stmt_if349 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_stmt_if351 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _39_in_stmt_if354 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_stmt_if356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_stmt_while370 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_stmt_while372 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_stmt_while374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_stmt_for385 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _Expr_Call_in_stmt_for387 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_stmt_for389 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_stmt_for391 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_stmt_for393 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_stmt_for395 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_stmt_for397 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_stmt_for399 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_stmt_for401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_alloc_expr423 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENT_in_alloc_expr425 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _35_in_alloc_expr428 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_alloc_expr430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logic_expr_in_alloc_expr450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_expr_in_logic_expr461 = new BitSet(new ulong[]{0x7602000002UL});
		public static readonly BitSet _set_in_logic_expr464 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _assign_expr_in_logic_expr489 = new BitSet(new ulong[]{0x7602000002UL});
		public static readonly BitSet _add_expr_in_assign_expr502 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _35_in_assign_expr505 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _add_expr_in_assign_expr508 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _mul_expr_in_add_expr521 = new BitSet(new ulong[]{0x50000002UL});
		public static readonly BitSet _set_in_add_expr524 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _mul_expr_in_add_expr533 = new BitSet(new ulong[]{0x50000002UL});
		public static readonly BitSet _call_expr_in_mul_expr546 = new BitSet(new ulong[]{0x88000002UL});
		public static readonly BitSet _set_in_mul_expr549 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _call_expr_in_mul_expr558 = new BitSet(new ulong[]{0x88000002UL});
		public static readonly BitSet _expr_in_args_list582 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _29_in_args_list586 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_args_list588 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _atom_expr_in_call_expr606 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _Expr_Call_in_call_expr609 = new BitSet(new ulong[]{0x2420A840UL});
		public static readonly BitSet _args_list_in_call_expr612 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_call_expr614 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _INT_in_atom_expr628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_atom_expr633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_atom_expr638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Call_in_atom_expr648 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_atom_expr651 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_atom_expr653 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
