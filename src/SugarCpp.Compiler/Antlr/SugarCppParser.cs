//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-04-20 16:29:35

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "DOUBLE", "EXPONENT", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_For", "Stmt_If", "Stmt_While", "'!='", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'else'", "'for'", "'if'", "'import'", "'struct'", "'while'"
	};
	public const int EOF=-1;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int Block=4;
	public const int DEDENT=5;
	public const int DOUBLE=6;
	public const int EXPONENT=7;
	public const int Expr_Alloc=8;
	public const int Expr_Bin=9;
	public const int Expr_Block=10;
	public const int Expr_Call=11;
	public const int Func_Def=12;
	public const int IDENT=13;
	public const int INDENT=14;
	public const int INT=15;
	public const int Left_Bracket=16;
	public const int NEWLINE=17;
	public const int Right_Bracket=18;
	public const int Root=19;
	public const int SP=20;
	public const int STRING=21;
	public const int Stmt_For=22;
	public const int Stmt_If=23;
	public const int Stmt_While=24;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:102:8: public root : ( node )+ EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EOF2 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EOF2_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(102, 1);
		try
		{
			// SugarCpp.g:103:2: ( ( node )+ EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:103:4: ( node )+ EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(103, 4);
			// SugarCpp.g:103:4: ( node )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENT||(LA1_0>=42 && LA1_0<=43)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:103:4: node
					{
					DebugLocation(103, 4);
					PushFollow(Follow._node_in_root199);
					node1=node();
					PopFollow();

					adaptor.AddChild(root_0, node1.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(103, 10);
			EOF2=(IToken)Match(input,EOF,Follow._EOF_in_root202); 
			EOF2_tree = (CommonTree)adaptor.Create(EOF2);
			adaptor.AddChild(root_0, EOF2_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:106:1: node : ( imports | func_def | struct );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> imports3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_def4 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> struct5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(106, 1);
		try
		{
			// SugarCpp.g:107:2: ( imports | func_def | struct )
			int alt2=3;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case 42:
				{
				alt2 = 1;
				}
				break;
			case IDENT:
				{
				alt2 = 2;
				}
				break;
			case 43:
				{
				alt2 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:107:4: imports
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(107, 4);
				PushFollow(Follow._imports_in_node213);
				imports3=imports();
				PopFollow();

				adaptor.AddChild(root_0, imports3.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:108:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(108, 4);
				PushFollow(Follow._func_def_in_node218);
				func_def4=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def4.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:109:4: struct
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(109, 4);
				PushFollow(Follow._struct_in_node223);
				struct5=@struct();
				PopFollow();

				adaptor.AddChild(root_0, struct5.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_imports();
	partial void LeaveRule_imports();

	// $ANTLR start "imports"
	// SugarCpp.g:112:1: imports : 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )* ;
	[GrammarRule("imports")]
	private AstParserRuleReturnScope<CommonTree, IToken> imports()
	{
		EnterRule_imports();
		EnterRule("imports", 3);
		TraceIn("imports", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal6 = default(IToken);
		IToken STRING7 = default(IToken);
		IToken INDENT8 = default(IToken);
		IToken NEWLINE9 = default(IToken);
		IToken STRING10 = default(IToken);
		IToken NEWLINE11 = default(IToken);
		IToken DEDENT12 = default(IToken);
		IToken NEWLINE13 = default(IToken);

		CommonTree string_literal6_tree = default(CommonTree);
		CommonTree STRING7_tree = default(CommonTree);
		CommonTree INDENT8_tree = default(CommonTree);
		CommonTree NEWLINE9_tree = default(CommonTree);
		CommonTree STRING10_tree = default(CommonTree);
		CommonTree NEWLINE11_tree = default(CommonTree);
		CommonTree DEDENT12_tree = default(CommonTree);
		CommonTree NEWLINE13_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(112, 1);
		try
		{
			// SugarCpp.g:113:2: ( 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarCpp.g:113:4: 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(113, 4);
			string_literal6=(IToken)Match(input,42,Follow._42_in_imports234); 
			string_literal6_tree = (CommonTree)adaptor.Create(string_literal6);
			adaptor.AddChild(root_0, string_literal6_tree);
			DebugLocation(113, 13);
			// SugarCpp.g:113:13: ( STRING )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==STRING))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:113:13: STRING
				{
				DebugLocation(113, 13);
				STRING7=(IToken)Match(input,STRING,Follow._STRING_in_imports236); 
				STRING7_tree = (CommonTree)adaptor.Create(STRING7);
				adaptor.AddChild(root_0, STRING7_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(113, 21);
			// SugarCpp.g:113:21: ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==INDENT))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:113:22: INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT
				{
				DebugLocation(113, 22);
				INDENT8=(IToken)Match(input,INDENT,Follow._INDENT_in_imports240); 
				INDENT8_tree = (CommonTree)adaptor.Create(INDENT8);
				adaptor.AddChild(root_0, INDENT8_tree);
				DebugLocation(113, 29);
				// SugarCpp.g:113:29: ( ( NEWLINE )+ STRING )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					try
					{
						alt5 = dfa5.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:113:30: ( NEWLINE )+ STRING
						{
						DebugLocation(113, 30);
						// SugarCpp.g:113:30: ( NEWLINE )+
						int cnt4=0;
						try { DebugEnterSubRule(4);
						while (true)
						{
							int alt4=2;
							try { DebugEnterDecision(4, false);
							int LA4_0 = input.LA(1);

							if ((LA4_0==NEWLINE))
							{
								alt4 = 1;
							}


							} finally { DebugExitDecision(4); }
							switch (alt4)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:113:30: NEWLINE
								{
								DebugLocation(113, 30);
								NEWLINE9=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports243); 
								NEWLINE9_tree = (CommonTree)adaptor.Create(NEWLINE9);
								adaptor.AddChild(root_0, NEWLINE9_tree);

								}
								break;

							default:
								if (cnt4 >= 1)
									goto loop4;

								EarlyExitException eee4 = new EarlyExitException( 4, input );
								DebugRecognitionException(eee4);
								throw eee4;
							}
							cnt4++;
						}
						loop4:
							;

						} finally { DebugExitSubRule(4); }

						DebugLocation(113, 39);
						STRING10=(IToken)Match(input,STRING,Follow._STRING_in_imports246); 
						STRING10_tree = (CommonTree)adaptor.Create(STRING10);
						adaptor.AddChild(root_0, STRING10_tree);

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(113, 48);
				// SugarCpp.g:113:48: ( NEWLINE )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==NEWLINE))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:113:48: NEWLINE
						{
						DebugLocation(113, 48);
						NEWLINE11=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports250); 
						NEWLINE11_tree = (CommonTree)adaptor.Create(NEWLINE11);
						adaptor.AddChild(root_0, NEWLINE11_tree);

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(113, 57);
				DEDENT12=(IToken)Match(input,DEDENT,Follow._DEDENT_in_imports253); 
				DEDENT12_tree = (CommonTree)adaptor.Create(DEDENT12);
				adaptor.AddChild(root_0, DEDENT12_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(113, 66);
			// SugarCpp.g:113:66: ( NEWLINE )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==NEWLINE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:113:66: NEWLINE
					{
					DebugLocation(113, 66);
					NEWLINE13=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports257); 
					NEWLINE13_tree = (CommonTree)adaptor.Create(NEWLINE13);
					adaptor.AddChild(root_0, NEWLINE13_tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("imports", 3);
			LeaveRule("imports", 3);
			LeaveRule_imports();
		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return retval;

	}
	// $ANTLR end "imports"

	partial void EnterRule_struct();
	partial void LeaveRule_struct();

	// $ANTLR start "struct"
	// SugarCpp.g:116:1: struct : 'struct' IDENT ( INDENT ( ( NEWLINE )+ stmt )+ DEDENT ) ( NEWLINE )* ;
	[GrammarRule("struct")]
	private AstParserRuleReturnScope<CommonTree, IToken> @struct()
	{
		EnterRule_struct();
		EnterRule("struct", 4);
		TraceIn("struct", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal14 = default(IToken);
		IToken IDENT15 = default(IToken);
		IToken INDENT16 = default(IToken);
		IToken NEWLINE17 = default(IToken);
		IToken DEDENT19 = default(IToken);
		IToken NEWLINE20 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt18 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree IDENT15_tree = default(CommonTree);
		CommonTree INDENT16_tree = default(CommonTree);
		CommonTree NEWLINE17_tree = default(CommonTree);
		CommonTree DEDENT19_tree = default(CommonTree);
		CommonTree NEWLINE20_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "struct");
		DebugLocation(116, 1);
		try
		{
			// SugarCpp.g:117:2: ( 'struct' IDENT ( INDENT ( ( NEWLINE )+ stmt )+ DEDENT ) ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarCpp.g:117:4: 'struct' IDENT ( INDENT ( ( NEWLINE )+ stmt )+ DEDENT ) ( NEWLINE )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(117, 4);
			string_literal14=(IToken)Match(input,43,Follow._43_in_struct269); 
			string_literal14_tree = (CommonTree)adaptor.Create(string_literal14);
			adaptor.AddChild(root_0, string_literal14_tree);
			DebugLocation(117, 13);
			IDENT15=(IToken)Match(input,IDENT,Follow._IDENT_in_struct271); 
			IDENT15_tree = (CommonTree)adaptor.Create(IDENT15);
			adaptor.AddChild(root_0, IDENT15_tree);
			DebugLocation(117, 19);
			// SugarCpp.g:117:19: ( INDENT ( ( NEWLINE )+ stmt )+ DEDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:117:20: INDENT ( ( NEWLINE )+ stmt )+ DEDENT
			{
			DebugLocation(117, 20);
			INDENT16=(IToken)Match(input,INDENT,Follow._INDENT_in_struct274); 
			INDENT16_tree = (CommonTree)adaptor.Create(INDENT16);
			adaptor.AddChild(root_0, INDENT16_tree);
			DebugLocation(117, 27);
			// SugarCpp.g:117:27: ( ( NEWLINE )+ stmt )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==NEWLINE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:117:28: ( NEWLINE )+ stmt
					{
					DebugLocation(117, 28);
					// SugarCpp.g:117:28: ( NEWLINE )+
					int cnt9=0;
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0==NEWLINE))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:117:28: NEWLINE
							{
							DebugLocation(117, 28);
							NEWLINE17=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_struct277); 
							NEWLINE17_tree = (CommonTree)adaptor.Create(NEWLINE17);
							adaptor.AddChild(root_0, NEWLINE17_tree);

							}
							break;

						default:
							if (cnt9 >= 1)
								goto loop9;

							EarlyExitException eee9 = new EarlyExitException( 9, input );
							DebugRecognitionException(eee9);
							throw eee9;
						}
						cnt9++;
					}
					loop9:
						;

					} finally { DebugExitSubRule(9); }

					DebugLocation(117, 37);
					PushFollow(Follow._stmt_in_struct280);
					stmt18=stmt();
					PopFollow();

					adaptor.AddChild(root_0, stmt18.Tree);

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(117, 44);
			DEDENT19=(IToken)Match(input,DEDENT,Follow._DEDENT_in_struct284); 
			DEDENT19_tree = (CommonTree)adaptor.Create(DEDENT19);
			adaptor.AddChild(root_0, DEDENT19_tree);

			}

			DebugLocation(117, 52);
			// SugarCpp.g:117:52: ( NEWLINE )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:117:52: NEWLINE
					{
					DebugLocation(117, 52);
					NEWLINE20=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_struct287); 
					NEWLINE20_tree = (CommonTree)adaptor.Create(NEWLINE20);
					adaptor.AddChild(root_0, NEWLINE20_tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct", 4);
			LeaveRule("struct", 4);
			LeaveRule_struct();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "struct"); }
		return retval;

	}
	// $ANTLR end "struct"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:120:1: type_name : IDENT ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 5);
		TraceIn("type_name", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT21 = default(IToken);

		CommonTree IDENT21_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(120, 1);
		try
		{
			// SugarCpp.g:121:2: ( IDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:121:4: IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(121, 4);
			IDENT21=(IToken)Match(input,IDENT,Follow._IDENT_in_type_name299); 
			IDENT21_tree = (CommonTree)adaptor.Create(IDENT21);
			adaptor.AddChild(root_0, IDENT21_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 5);
			LeaveRule("type_name", 5);
			LeaveRule_type_name();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:124:1: func_def : type_name IDENT '(' ')' stmt_block ( NEWLINE )* ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 6);
		TraceIn("func_def", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken NEWLINE27 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name22 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree NEWLINE27_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(124, 4);
		try
		{
			// SugarCpp.g:125:2: ( type_name IDENT '(' ')' stmt_block ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarCpp.g:125:4: type_name IDENT '(' ')' stmt_block ( NEWLINE )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(125, 4);
			PushFollow(Follow._type_name_in_func_def310);
			type_name22=type_name();
			PopFollow();

			adaptor.AddChild(root_0, type_name22.Tree);
			DebugLocation(125, 14);
			IDENT23=(IToken)Match(input,IDENT,Follow._IDENT_in_func_def312); 
			IDENT23_tree = (CommonTree)adaptor.Create(IDENT23);
			adaptor.AddChild(root_0, IDENT23_tree);
			DebugLocation(125, 20);
			char_literal24=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_func_def314); 
			char_literal24_tree = (CommonTree)adaptor.Create(char_literal24);
			adaptor.AddChild(root_0, char_literal24_tree);
			DebugLocation(125, 24);
			char_literal25=(IToken)Match(input,26,Follow._26_in_func_def316); 
			char_literal25_tree = (CommonTree)adaptor.Create(char_literal25);
			adaptor.AddChild(root_0, char_literal25_tree);
			DebugLocation(125, 28);
			PushFollow(Follow._stmt_block_in_func_def318);
			stmt_block26=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block26.Tree);
			DebugLocation(125, 39);
			// SugarCpp.g:125:39: ( NEWLINE )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==NEWLINE))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:125:39: NEWLINE
					{
					DebugLocation(125, 39);
					NEWLINE27=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def320); 
					NEWLINE27_tree = (CommonTree)adaptor.Create(NEWLINE27);
					adaptor.AddChild(root_0, NEWLINE27_tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 6);
			LeaveRule("func_def", 6);
			LeaveRule_func_def();
		}
		DebugLocation(126, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:128:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )+ DEDENT ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 7);
		TraceIn("stmt_block", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT28 = default(IToken);
		IToken NEWLINE29 = default(IToken);
		IToken DEDENT31 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT28_tree = default(CommonTree);
		CommonTree NEWLINE29_tree = default(CommonTree);
		CommonTree DEDENT31_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(128, 1);
		try
		{
			// SugarCpp.g:129:2: ( INDENT ( ( NEWLINE )+ stmt )+ DEDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:129:4: INDENT ( ( NEWLINE )+ stmt )+ DEDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(129, 4);
			INDENT28=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block335); 
			INDENT28_tree = (CommonTree)adaptor.Create(INDENT28);
			adaptor.AddChild(root_0, INDENT28_tree);
			DebugLocation(129, 11);
			// SugarCpp.g:129:11: ( ( NEWLINE )+ stmt )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==NEWLINE))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:129:12: ( NEWLINE )+ stmt
					{
					DebugLocation(129, 12);
					// SugarCpp.g:129:12: ( NEWLINE )+
					int cnt13=0;
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if ((LA13_0==NEWLINE))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch (alt13)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:129:12: NEWLINE
							{
							DebugLocation(129, 12);
							NEWLINE29=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block338); 
							NEWLINE29_tree = (CommonTree)adaptor.Create(NEWLINE29);
							adaptor.AddChild(root_0, NEWLINE29_tree);

							}
							break;

						default:
							if (cnt13 >= 1)
								goto loop13;

							EarlyExitException eee13 = new EarlyExitException( 13, input );
							DebugRecognitionException(eee13);
							throw eee13;
						}
						cnt13++;
					}
					loop13:
						;

					} finally { DebugExitSubRule(13); }

					DebugLocation(129, 21);
					PushFollow(Follow._stmt_in_stmt_block341);
					stmt30=stmt();
					PopFollow();

					adaptor.AddChild(root_0, stmt30.Tree);

					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(129, 28);
			DEDENT31=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block345); 
			DEDENT31_tree = (CommonTree)adaptor.Create(DEDENT31);
			adaptor.AddChild(root_0, DEDENT31_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 7);
			LeaveRule("stmt_block", 7);
			LeaveRule_stmt_block();
		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:132:1: stmt : ( stmt_if | stmt_while | stmt_for | expr );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 8);
		TraceIn("stmt", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if32 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while33 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr35 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(132, 1);
		try
		{
			// SugarCpp.g:133:2: ( stmt_if | stmt_while | stmt_for | expr )
			int alt15=4;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case 41:
				{
				alt15 = 1;
				}
				break;
			case 44:
				{
				alt15 = 2;
				}
				break;
			case 40:
				{
				alt15 = 3;
				}
				break;
			case DOUBLE:
			case Expr_Call:
			case IDENT:
			case INT:
			case STRING:
				{
				alt15 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:133:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(133, 4);
				PushFollow(Follow._stmt_if_in_stmt356);
				stmt_if32=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if32.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:134:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(134, 4);
				PushFollow(Follow._stmt_while_in_stmt361);
				stmt_while33=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while33.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:135:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(135, 4);
				PushFollow(Follow._stmt_for_in_stmt366);
				stmt_for34=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for34.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:136:4: expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(136, 4);
				PushFollow(Follow._expr_in_stmt371);
				expr35=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr35.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 8);
			LeaveRule("stmt", 8);
			LeaveRule_stmt();
		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:139:1: stmt_if : 'if' expr stmt_block ( 'else' stmt_block )? ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 9);
		TraceIn("stmt_if", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal36 = default(IToken);
		IToken string_literal39 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block40 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal36_tree = default(CommonTree);
		CommonTree string_literal39_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(139, 1);
		try
		{
			// SugarCpp.g:140:2: ( 'if' expr stmt_block ( 'else' stmt_block )? )
			DebugEnterAlt(1);
			// SugarCpp.g:140:4: 'if' expr stmt_block ( 'else' stmt_block )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(140, 4);
			string_literal36=(IToken)Match(input,41,Follow._41_in_stmt_if382); 
			string_literal36_tree = (CommonTree)adaptor.Create(string_literal36);
			adaptor.AddChild(root_0, string_literal36_tree);
			DebugLocation(140, 9);
			PushFollow(Follow._expr_in_stmt_if384);
			expr37=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr37.Tree);
			DebugLocation(140, 14);
			PushFollow(Follow._stmt_block_in_stmt_if386);
			stmt_block38=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block38.Tree);
			DebugLocation(140, 25);
			// SugarCpp.g:140:25: ( 'else' stmt_block )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==39))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:140:26: 'else' stmt_block
				{
				DebugLocation(140, 26);
				string_literal39=(IToken)Match(input,39,Follow._39_in_stmt_if389); 
				string_literal39_tree = (CommonTree)adaptor.Create(string_literal39);
				adaptor.AddChild(root_0, string_literal39_tree);
				DebugLocation(140, 33);
				PushFollow(Follow._stmt_block_in_stmt_if391);
				stmt_block40=stmt_block();
				PopFollow();

				adaptor.AddChild(root_0, stmt_block40.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 9);
			LeaveRule("stmt_if", 9);
			LeaveRule_stmt_if();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:143:1: stmt_while : 'while' expr stmt_block ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 10);
		TraceIn("stmt_while", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal41 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block43 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal41_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(143, 1);
		try
		{
			// SugarCpp.g:144:2: ( 'while' expr stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:144:4: 'while' expr stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(144, 4);
			string_literal41=(IToken)Match(input,44,Follow._44_in_stmt_while405); 
			string_literal41_tree = (CommonTree)adaptor.Create(string_literal41);
			adaptor.AddChild(root_0, string_literal41_tree);
			DebugLocation(144, 12);
			PushFollow(Follow._expr_in_stmt_while407);
			expr42=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr42.Tree);
			DebugLocation(144, 17);
			PushFollow(Follow._stmt_block_in_stmt_while409);
			stmt_block43=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block43.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 10);
			LeaveRule("stmt_while", 10);
			LeaveRule_stmt_while();
		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:147:1: stmt_for : 'for' '(' expr ';' expr ';' expr ')' stmt_block ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 11);
		TraceIn("stmt_for", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal44 = default(IToken);
		IToken char_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken char_literal51 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal44_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(147, 1);
		try
		{
			// SugarCpp.g:148:2: ( 'for' '(' expr ';' expr ';' expr ')' stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:148:4: 'for' '(' expr ';' expr ';' expr ')' stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(148, 4);
			string_literal44=(IToken)Match(input,40,Follow._40_in_stmt_for420); 
			string_literal44_tree = (CommonTree)adaptor.Create(string_literal44);
			adaptor.AddChild(root_0, string_literal44_tree);
			DebugLocation(148, 10);
			char_literal45=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_stmt_for422); 
			char_literal45_tree = (CommonTree)adaptor.Create(char_literal45);
			adaptor.AddChild(root_0, char_literal45_tree);
			DebugLocation(148, 14);
			PushFollow(Follow._expr_in_stmt_for424);
			expr46=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr46.Tree);
			DebugLocation(148, 19);
			char_literal47=(IToken)Match(input,32,Follow._32_in_stmt_for426); 
			char_literal47_tree = (CommonTree)adaptor.Create(char_literal47);
			adaptor.AddChild(root_0, char_literal47_tree);
			DebugLocation(148, 23);
			PushFollow(Follow._expr_in_stmt_for428);
			expr48=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr48.Tree);
			DebugLocation(148, 28);
			char_literal49=(IToken)Match(input,32,Follow._32_in_stmt_for430); 
			char_literal49_tree = (CommonTree)adaptor.Create(char_literal49);
			adaptor.AddChild(root_0, char_literal49_tree);
			DebugLocation(148, 32);
			PushFollow(Follow._expr_in_stmt_for432);
			expr50=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr50.Tree);
			DebugLocation(148, 37);
			char_literal51=(IToken)Match(input,26,Follow._26_in_stmt_for434); 
			char_literal51_tree = (CommonTree)adaptor.Create(char_literal51);
			adaptor.AddChild(root_0, char_literal51_tree);
			DebugLocation(148, 41);
			PushFollow(Follow._stmt_block_in_stmt_for436);
			stmt_block52=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block52.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 11);
			LeaveRule("stmt_for", 11);
			LeaveRule_stmt_for();
		}
		DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:151:1: expr : alloc_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 12);
		TraceIn("expr", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> alloc_expr53 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(151, 1);
		try
		{
			// SugarCpp.g:152:2: ( alloc_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:152:4: alloc_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(152, 4);
			PushFollow(Follow._alloc_expr_in_expr447);
			alloc_expr53=alloc_expr();
			PopFollow();

			adaptor.AddChild(root_0, alloc_expr53.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 12);
			LeaveRule("expr", 12);
			LeaveRule_expr();
		}
		DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarCpp.g:155:1: alloc_expr : ( type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) | logic_expr );
	[GrammarRule("alloc_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 13);
		TraceIn("alloc_expr", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT55 = default(IToken);
		IToken char_literal56 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> logic_expr58 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT55_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_35=new RewriteRuleITokenStream(adaptor,"token 35");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(155, 1);
		try
		{
			// SugarCpp.g:156:2: ( type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) | logic_expr )
			int alt18=2;
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==IDENT))
			{
				int LA18_1 = input.LA(2);

				if ((LA18_1==IDENT))
				{
					alt18 = 1;
				}
				else if ((LA18_1==DEDENT||LA18_1==Expr_Call||LA18_1==INDENT||LA18_1==NEWLINE||(LA18_1>=25 && LA18_1<=38)))
				{
					alt18 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA18_0==DOUBLE||LA18_0==Expr_Call||LA18_0==INT||LA18_0==STRING))
			{
				alt18 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:156:4: type_name IDENT ( '=' expr )?
				{
				DebugLocation(156, 4);
				PushFollow(Follow._type_name_in_alloc_expr458);
				type_name54=type_name();
				PopFollow();

				stream_type_name.Add(type_name54.Tree);
				DebugLocation(156, 14);
				IDENT55=(IToken)Match(input,IDENT,Follow._IDENT_in_alloc_expr460);  
				stream_IDENT.Add(IDENT55);

				DebugLocation(156, 20);
				// SugarCpp.g:156:20: ( '=' expr )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==35))
				{
					alt17 = 1;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:156:21: '=' expr
					{
					DebugLocation(156, 21);
					char_literal56=(IToken)Match(input,35,Follow._35_in_alloc_expr463);  
					stream_35.Add(char_literal56);

					DebugLocation(156, 25);
					PushFollow(Follow._expr_in_alloc_expr465);
					expr57=expr();
					PopFollow();

					stream_expr.Add(expr57.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(17); }



				{
				// AST REWRITE
				// elements: type_name, IDENT, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 156:32: -> ^( Expr_Alloc type_name IDENT ( expr )? )
				{
					DebugLocation(156, 35);
					// SugarCpp.g:156:35: ^( Expr_Alloc type_name IDENT ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(156, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(156, 48);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(156, 58);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(156, 64);
					// SugarCpp.g:156:64: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(156, 64);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:157:4: logic_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 4);
				PushFollow(Follow._logic_expr_in_alloc_expr485);
				logic_expr58=logic_expr();
				PopFollow();

				adaptor.AddChild(root_0, logic_expr58.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("alloc_expr", 13);
			LeaveRule("alloc_expr", 13);
			LeaveRule_alloc_expr();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return retval;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_logic_expr();
	partial void LeaveRule_logic_expr();

	// $ANTLR start "logic_expr"
	// SugarCpp.g:160:1: logic_expr : assign_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )* ;
	[GrammarRule("logic_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> logic_expr()
	{
		EnterRule_logic_expr();
		EnterRule("logic_expr", 14);
		TraceIn("logic_expr", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set60 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> assign_expr59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assign_expr61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set60_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logic_expr");
		DebugLocation(160, 1);
		try
		{
			// SugarCpp.g:161:2: ( assign_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:161:4: assign_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(161, 4);
			PushFollow(Follow._assign_expr_in_logic_expr496);
			assign_expr59=assign_expr();
			PopFollow();

			adaptor.AddChild(root_0, assign_expr59.Tree);
			DebugLocation(161, 16);
			// SugarCpp.g:161:16: ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==25||(LA19_0>=33 && LA19_0<=34)||(LA19_0>=36 && LA19_0<=38)))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:161:17: ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr
					{
					DebugLocation(161, 56);

					set60=(IToken)input.LT(1);
					set60=(IToken)input.LT(1);
					if (input.LA(1)==25||(input.LA(1)>=33 && input.LA(1)<=34)||(input.LA(1)>=36 && input.LA(1)<=38))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set60), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(161, 58);
					PushFollow(Follow._assign_expr_in_logic_expr524);
					assign_expr61=assign_expr();
					PopFollow();

					adaptor.AddChild(root_0, assign_expr61.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logic_expr", 14);
			LeaveRule("logic_expr", 14);
			LeaveRule_logic_expr();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_expr"); }
		return retval;

	}
	// $ANTLR end "logic_expr"

	partial void EnterRule_assign_expr();
	partial void LeaveRule_assign_expr();

	// $ANTLR start "assign_expr"
	// SugarCpp.g:164:1: assign_expr : add_expr ( '=' ^ add_expr )* ;
	[GrammarRule("assign_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> assign_expr()
	{
		EnterRule_assign_expr();
		EnterRule("assign_expr", 15);
		TraceIn("assign_expr", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> add_expr62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> add_expr64 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal63_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assign_expr");
		DebugLocation(164, 1);
		try
		{
			// SugarCpp.g:165:2: ( add_expr ( '=' ^ add_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:165:4: add_expr ( '=' ^ add_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(165, 4);
			PushFollow(Follow._add_expr_in_assign_expr537);
			add_expr62=add_expr();
			PopFollow();

			adaptor.AddChild(root_0, add_expr62.Tree);
			DebugLocation(165, 13);
			// SugarCpp.g:165:13: ( '=' ^ add_expr )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==35))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:165:14: '=' ^ add_expr
					{
					DebugLocation(165, 17);
					char_literal63=(IToken)Match(input,35,Follow._35_in_assign_expr540); 
					char_literal63_tree = (CommonTree)adaptor.Create(char_literal63);
					root_0 = (CommonTree)adaptor.BecomeRoot(char_literal63_tree, root_0);
					DebugLocation(165, 19);
					PushFollow(Follow._add_expr_in_assign_expr543);
					add_expr64=add_expr();
					PopFollow();

					adaptor.AddChild(root_0, add_expr64.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assign_expr", 15);
			LeaveRule("assign_expr", 15);
			LeaveRule_assign_expr();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "assign_expr"); }
		return retval;

	}
	// $ANTLR end "assign_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:168:1: add_expr : mul_expr ( ( '+' | '-' ) ^ mul_expr )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 16);
		TraceIn("add_expr", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set66 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> mul_expr65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> mul_expr67 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set66_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(168, 1);
		try
		{
			// SugarCpp.g:169:2: ( mul_expr ( ( '+' | '-' ) ^ mul_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:169:4: mul_expr ( ( '+' | '-' ) ^ mul_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(169, 4);
			PushFollow(Follow._mul_expr_in_add_expr556);
			mul_expr65=mul_expr();
			PopFollow();

			adaptor.AddChild(root_0, mul_expr65.Tree);
			DebugLocation(169, 13);
			// SugarCpp.g:169:13: ( ( '+' | '-' ) ^ mul_expr )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==28||LA21_0==30))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:169:14: ( '+' | '-' ) ^ mul_expr
					{
					DebugLocation(169, 25);

					set66=(IToken)input.LT(1);
					set66=(IToken)input.LT(1);
					if (input.LA(1)==28||input.LA(1)==30)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set66), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(169, 27);
					PushFollow(Follow._mul_expr_in_add_expr568);
					mul_expr67=mul_expr();
					PopFollow();

					adaptor.AddChild(root_0, mul_expr67.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 16);
			LeaveRule("add_expr", 16);
			LeaveRule_add_expr();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:172:1: mul_expr : call_expr ( ( '*' | '/' ) ^ call_expr )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 17);
		TraceIn("mul_expr", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set69 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> call_expr68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> call_expr70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set69_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(172, 1);
		try
		{
			// SugarCpp.g:173:2: ( call_expr ( ( '*' | '/' ) ^ call_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:173:4: call_expr ( ( '*' | '/' ) ^ call_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(173, 4);
			PushFollow(Follow._call_expr_in_mul_expr581);
			call_expr68=call_expr();
			PopFollow();

			adaptor.AddChild(root_0, call_expr68.Tree);
			DebugLocation(173, 14);
			// SugarCpp.g:173:14: ( ( '*' | '/' ) ^ call_expr )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==27||LA22_0==31))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:173:15: ( '*' | '/' ) ^ call_expr
					{
					DebugLocation(173, 26);

					set69=(IToken)input.LT(1);
					set69=(IToken)input.LT(1);
					if (input.LA(1)==27||input.LA(1)==31)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set69), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(173, 28);
					PushFollow(Follow._call_expr_in_mul_expr593);
					call_expr70=call_expr();
					PopFollow();

					adaptor.AddChild(root_0, call_expr70.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 17);
			LeaveRule("mul_expr", 17);
			LeaveRule_mul_expr();
		}
		DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_args_list();
	partial void LeaveRule_args_list();

	// $ANTLR start "args_list"
	// SugarCpp.g:180:1: args_list : ( expr )? ( ',' expr )* -> ( expr )* ;
	[GrammarRule("args_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> args_list()
	{
		EnterRule_args_list();
		EnterRule("args_list", 18);
		TraceIn("args_list", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_29=new RewriteRuleITokenStream(adaptor,"token 29");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "args_list");
		DebugLocation(180, 1);
		try
		{
			// SugarCpp.g:181:2: ( ( expr )? ( ',' expr )* -> ( expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:181:4: ( expr )? ( ',' expr )*
			{
			DebugLocation(181, 4);
			// SugarCpp.g:181:4: ( expr )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==DOUBLE||LA23_0==Expr_Call||LA23_0==IDENT||LA23_0==INT||LA23_0==STRING))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:181:4: expr
				{
				DebugLocation(181, 4);
				PushFollow(Follow._expr_in_args_list617);
				expr71=expr();
				PopFollow();

				stream_expr.Add(expr71.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(181, 10);
			// SugarCpp.g:181:10: ( ',' expr )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==29))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:181:11: ',' expr
					{
					DebugLocation(181, 11);
					char_literal72=(IToken)Match(input,29,Follow._29_in_args_list621);  
					stream_29.Add(char_literal72);

					DebugLocation(181, 15);
					PushFollow(Follow._expr_in_args_list623);
					expr73=expr();
					PopFollow();

					stream_expr.Add(expr73.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 181:22: -> ( expr )*
			{
				DebugLocation(181, 25);
				// SugarCpp.g:181:25: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(181, 25);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}
				stream_expr.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args_list", 18);
			LeaveRule("args_list", 18);
			LeaveRule_args_list();
		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "args_list"); }
		return retval;

	}
	// $ANTLR end "args_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarCpp.g:184:1: call_expr : atom_expr ( Expr_Call ^ args_list ')' !)* ;
	[GrammarRule("call_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 19);
		TraceIn("call_expr", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken Expr_Call75 = default(IToken);
		IToken char_literal77 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> atom_expr74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> args_list76 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree Expr_Call75_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(184, 1);
		try
		{
			// SugarCpp.g:185:2: ( atom_expr ( Expr_Call ^ args_list ')' !)* )
			DebugEnterAlt(1);
			// SugarCpp.g:185:4: atom_expr ( Expr_Call ^ args_list ')' !)*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(185, 4);
			PushFollow(Follow._atom_expr_in_call_expr641);
			atom_expr74=atom_expr();
			PopFollow();

			adaptor.AddChild(root_0, atom_expr74.Tree);
			DebugLocation(185, 14);
			// SugarCpp.g:185:14: ( Expr_Call ^ args_list ')' !)*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==Expr_Call))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:185:15: Expr_Call ^ args_list ')' !
					{
					DebugLocation(185, 24);
					Expr_Call75=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_call_expr644); 
					Expr_Call75_tree = (CommonTree)adaptor.Create(Expr_Call75);
					root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Call75_tree, root_0);
					DebugLocation(185, 26);
					PushFollow(Follow._args_list_in_call_expr647);
					args_list76=args_list();
					PopFollow();

					adaptor.AddChild(root_0, args_list76.Tree);
					DebugLocation(185, 39);
					char_literal77=(IToken)Match(input,26,Follow._26_in_call_expr649); 

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("call_expr", 19);
			LeaveRule("call_expr", 19);
			LeaveRule_call_expr();
		}
		DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return retval;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:188:1: atom_expr : ( INT | DOUBLE | IDENT | STRING | '(' ! expr ')' !);
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 20);
		TraceIn("atom_expr", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INT78 = default(IToken);
		IToken DOUBLE79 = default(IToken);
		IToken IDENT80 = default(IToken);
		IToken STRING81 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken char_literal84 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr83 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INT78_tree = default(CommonTree);
		CommonTree DOUBLE79_tree = default(CommonTree);
		CommonTree IDENT80_tree = default(CommonTree);
		CommonTree STRING81_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree char_literal84_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(188, 1);
		try
		{
			// SugarCpp.g:189:2: ( INT | DOUBLE | IDENT | STRING | '(' ! expr ')' !)
			int alt26=5;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt26 = 1;
				}
				break;
			case DOUBLE:
				{
				alt26 = 2;
				}
				break;
			case IDENT:
				{
				alt26 = 3;
				}
				break;
			case STRING:
				{
				alt26 = 4;
				}
				break;
			case Expr_Call:
				{
				alt26 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:189:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 4);
				INT78=(IToken)Match(input,INT,Follow._INT_in_atom_expr663); 
				INT78_tree = (CommonTree)adaptor.Create(INT78);
				adaptor.AddChild(root_0, INT78_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:190:4: DOUBLE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(190, 4);
				DOUBLE79=(IToken)Match(input,DOUBLE,Follow._DOUBLE_in_atom_expr668); 
				DOUBLE79_tree = (CommonTree)adaptor.Create(DOUBLE79);
				adaptor.AddChild(root_0, DOUBLE79_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:191:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(191, 4);
				IDENT80=(IToken)Match(input,IDENT,Follow._IDENT_in_atom_expr673); 
				IDENT80_tree = (CommonTree)adaptor.Create(IDENT80);
				adaptor.AddChild(root_0, IDENT80_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:192:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 4);
				STRING81=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr678); 
				STRING81_tree = (CommonTree)adaptor.Create(STRING81);
				adaptor.AddChild(root_0, STRING81_tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:193:4: '(' ! expr ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 7);
				char_literal82=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_atom_expr683); 
				DebugLocation(193, 9);
				PushFollow(Follow._expr_in_atom_expr686);
				expr83=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr83.Tree);
				DebugLocation(193, 17);
				char_literal84=(IToken)Match(input,26,Follow._26_in_atom_expr688); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 20);
			LeaveRule("atom_expr", 20);
			LeaveRule_atom_expr();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"
	#endregion Rules


	#region DFA
	private DFA5 dfa5;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x4\xFFFF";
		private const string DFA5_eofS =
			"\x4\xFFFF";
		private const string DFA5_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA5_maxS =
			"\x1\x11\x1\x15\x2\xFFFF";
		private const string DFA5_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA5_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x1",
				"\x1\x2\xB\xFFFF\x1\x1\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "()+ loopback of 113:29: ( ( NEWLINE )+ STRING )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root199 = new BitSet(new ulong[]{0xC0000002000UL});
		public static readonly BitSet _EOF_in_root202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _imports_in_node213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_def_in_node218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_in_node223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_imports234 = new BitSet(new ulong[]{0x224002UL});
		public static readonly BitSet _STRING_in_imports236 = new BitSet(new ulong[]{0x24002UL});
		public static readonly BitSet _INDENT_in_imports240 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _NEWLINE_in_imports243 = new BitSet(new ulong[]{0x220000UL});
		public static readonly BitSet _STRING_in_imports246 = new BitSet(new ulong[]{0x20020UL});
		public static readonly BitSet _NEWLINE_in_imports250 = new BitSet(new ulong[]{0x20020UL});
		public static readonly BitSet _DEDENT_in_imports253 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _NEWLINE_in_imports257 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _43_in_struct269 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENT_in_struct271 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _INDENT_in_struct274 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _NEWLINE_in_struct277 = new BitSet(new ulong[]{0x13000022A840UL});
		public static readonly BitSet _stmt_in_struct280 = new BitSet(new ulong[]{0x20020UL});
		public static readonly BitSet _DEDENT_in_struct284 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _NEWLINE_in_struct287 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _IDENT_in_type_name299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_def310 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENT_in_func_def312 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _Expr_Call_in_func_def314 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_func_def316 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_func_def318 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _NEWLINE_in_func_def320 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _INDENT_in_stmt_block335 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block338 = new BitSet(new ulong[]{0x13000022A840UL});
		public static readonly BitSet _stmt_in_stmt_block341 = new BitSet(new ulong[]{0x20020UL});
		public static readonly BitSet _DEDENT_in_stmt_block345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_stmt_if382 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_stmt_if384 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_stmt_if386 = new BitSet(new ulong[]{0x8000000002UL});
		public static readonly BitSet _39_in_stmt_if389 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_stmt_if391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_stmt_while405 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_stmt_while407 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_stmt_while409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_stmt_for420 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _Expr_Call_in_stmt_for422 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_stmt_for424 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_stmt_for426 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_stmt_for428 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _32_in_stmt_for430 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_stmt_for432 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_stmt_for434 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _stmt_block_in_stmt_for436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_expr447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_alloc_expr458 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENT_in_alloc_expr460 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _35_in_alloc_expr463 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_alloc_expr465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logic_expr_in_alloc_expr485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_expr_in_logic_expr496 = new BitSet(new ulong[]{0x7602000002UL});
		public static readonly BitSet _set_in_logic_expr499 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _assign_expr_in_logic_expr524 = new BitSet(new ulong[]{0x7602000002UL});
		public static readonly BitSet _add_expr_in_assign_expr537 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _35_in_assign_expr540 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _add_expr_in_assign_expr543 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _mul_expr_in_add_expr556 = new BitSet(new ulong[]{0x50000002UL});
		public static readonly BitSet _set_in_add_expr559 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _mul_expr_in_add_expr568 = new BitSet(new ulong[]{0x50000002UL});
		public static readonly BitSet _call_expr_in_mul_expr581 = new BitSet(new ulong[]{0x88000002UL});
		public static readonly BitSet _set_in_mul_expr584 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _call_expr_in_mul_expr593 = new BitSet(new ulong[]{0x88000002UL});
		public static readonly BitSet _expr_in_args_list617 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _29_in_args_list621 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_args_list623 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _atom_expr_in_call_expr641 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _Expr_Call_in_call_expr644 = new BitSet(new ulong[]{0x2420A840UL});
		public static readonly BitSet _args_list_in_call_expr647 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_call_expr649 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _INT_in_atom_expr663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOUBLE_in_atom_expr668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_atom_expr673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Call_in_atom_expr683 = new BitSet(new ulong[]{0x20A840UL});
		public static readonly BitSet _expr_in_atom_expr686 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _26_in_atom_expr688 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
