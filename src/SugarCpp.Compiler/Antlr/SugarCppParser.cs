//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-04-22 10:17:18

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Block", "DEDENT", "EXPONENT", "Expr_Alloc", "Expr_Bin", "Expr_Block", "Expr_Call", "Expr_Dict", "Expr_Dot", "Expr_New", "Func_Def", "IDENT", "INDENT", "INT", "Left_Bracket", "NEWLINE", "Right_Bracket", "Root", "SP", "STRING", "Stmt_For", "Stmt_If", "Stmt_While", "'!'", "'!='", "')'", "'*'", "'+'", "'++'", "','", "'-'", "'--'", "'/'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "']'", "'by'", "'else'", "'for'", "'if'", "'import'", "'new'", "'return'", "'struct'", "'to'", "'while'"
	};
	public const int EOF=-1;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int Block=4;
	public const int DEDENT=5;
	public const int EXPONENT=6;
	public const int Expr_Alloc=7;
	public const int Expr_Bin=8;
	public const int Expr_Block=9;
	public const int Expr_Call=10;
	public const int Expr_Dict=11;
	public const int Expr_Dot=12;
	public const int Expr_New=13;
	public const int Func_Def=14;
	public const int IDENT=15;
	public const int INDENT=16;
	public const int INT=17;
	public const int Left_Bracket=18;
	public const int NEWLINE=19;
	public const int Right_Bracket=20;
	public const int Root=21;
	public const int SP=22;
	public const int STRING=23;
	public const int Stmt_For=24;
	public const int Stmt_If=25;
	public const int Stmt_While=26;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:102:8: public root : ( node )+ EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken EOF2 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree EOF2_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(102, 1);
		try
		{
			// SugarCpp.g:103:2: ( ( node )+ EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:103:4: ( node )+ EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(103, 4);
			// SugarCpp.g:103:4: ( node )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENT||LA1_0==49||LA1_0==52))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:103:4: node
					{
					DebugLocation(103, 4);
					PushFollow(Follow._node_in_root195);
					node1=node();
					PopFollow();

					adaptor.AddChild(root_0, node1.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(103, 10);
			EOF2=(IToken)Match(input,EOF,Follow._EOF_in_root198); 
			EOF2_tree = (CommonTree)adaptor.Create(EOF2);
			adaptor.AddChild(root_0, EOF2_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:106:1: node : ( imports | func_def | struct );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 2);
		TraceIn("node", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> imports3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_def4 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> struct5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(106, 1);
		try
		{
			// SugarCpp.g:107:2: ( imports | func_def | struct )
			int alt2=3;
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case 49:
				{
				alt2 = 1;
				}
				break;
			case IDENT:
				{
				alt2 = 2;
				}
				break;
			case 52:
				{
				alt2 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:107:4: imports
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(107, 4);
				PushFollow(Follow._imports_in_node209);
				imports3=imports();
				PopFollow();

				adaptor.AddChild(root_0, imports3.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:108:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(108, 4);
				PushFollow(Follow._func_def_in_node214);
				func_def4=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def4.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:109:4: struct
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(109, 4);
				PushFollow(Follow._struct_in_node219);
				struct5=@struct();
				PopFollow();

				adaptor.AddChild(root_0, struct5.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 2);
			LeaveRule("node", 2);
			LeaveRule_node();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_imports();
	partial void LeaveRule_imports();

	// $ANTLR start "imports"
	// SugarCpp.g:112:1: imports : 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )* ;
	[GrammarRule("imports")]
	private AstParserRuleReturnScope<CommonTree, IToken> imports()
	{
		EnterRule_imports();
		EnterRule("imports", 3);
		TraceIn("imports", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal6 = default(IToken);
		IToken STRING7 = default(IToken);
		IToken INDENT8 = default(IToken);
		IToken NEWLINE9 = default(IToken);
		IToken STRING10 = default(IToken);
		IToken NEWLINE11 = default(IToken);
		IToken DEDENT12 = default(IToken);
		IToken NEWLINE13 = default(IToken);

		CommonTree string_literal6_tree = default(CommonTree);
		CommonTree STRING7_tree = default(CommonTree);
		CommonTree INDENT8_tree = default(CommonTree);
		CommonTree NEWLINE9_tree = default(CommonTree);
		CommonTree STRING10_tree = default(CommonTree);
		CommonTree NEWLINE11_tree = default(CommonTree);
		CommonTree DEDENT12_tree = default(CommonTree);
		CommonTree NEWLINE13_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(112, 1);
		try
		{
			// SugarCpp.g:113:2: ( 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarCpp.g:113:4: 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )? ( NEWLINE )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(113, 4);
			string_literal6=(IToken)Match(input,49,Follow._49_in_imports230); 
			string_literal6_tree = (CommonTree)adaptor.Create(string_literal6);
			adaptor.AddChild(root_0, string_literal6_tree);
			DebugLocation(113, 13);
			// SugarCpp.g:113:13: ( STRING )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==STRING))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:113:13: STRING
				{
				DebugLocation(113, 13);
				STRING7=(IToken)Match(input,STRING,Follow._STRING_in_imports232); 
				STRING7_tree = (CommonTree)adaptor.Create(STRING7);
				adaptor.AddChild(root_0, STRING7_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(113, 21);
			// SugarCpp.g:113:21: ( INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==INDENT))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:113:22: INDENT ( ( NEWLINE )+ STRING )+ ( NEWLINE )* DEDENT
				{
				DebugLocation(113, 22);
				INDENT8=(IToken)Match(input,INDENT,Follow._INDENT_in_imports236); 
				INDENT8_tree = (CommonTree)adaptor.Create(INDENT8);
				adaptor.AddChild(root_0, INDENT8_tree);
				DebugLocation(113, 29);
				// SugarCpp.g:113:29: ( ( NEWLINE )+ STRING )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					try
					{
						alt5 = dfa5.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:113:30: ( NEWLINE )+ STRING
						{
						DebugLocation(113, 30);
						// SugarCpp.g:113:30: ( NEWLINE )+
						int cnt4=0;
						try { DebugEnterSubRule(4);
						while (true)
						{
							int alt4=2;
							try { DebugEnterDecision(4, false);
							int LA4_0 = input.LA(1);

							if ((LA4_0==NEWLINE))
							{
								alt4 = 1;
							}


							} finally { DebugExitDecision(4); }
							switch (alt4)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:113:30: NEWLINE
								{
								DebugLocation(113, 30);
								NEWLINE9=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports239); 
								NEWLINE9_tree = (CommonTree)adaptor.Create(NEWLINE9);
								adaptor.AddChild(root_0, NEWLINE9_tree);

								}
								break;

							default:
								if (cnt4 >= 1)
									goto loop4;

								EarlyExitException eee4 = new EarlyExitException( 4, input );
								DebugRecognitionException(eee4);
								throw eee4;
							}
							cnt4++;
						}
						loop4:
							;

						} finally { DebugExitSubRule(4); }

						DebugLocation(113, 39);
						STRING10=(IToken)Match(input,STRING,Follow._STRING_in_imports242); 
						STRING10_tree = (CommonTree)adaptor.Create(STRING10);
						adaptor.AddChild(root_0, STRING10_tree);

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(113, 48);
				// SugarCpp.g:113:48: ( NEWLINE )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==NEWLINE))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:113:48: NEWLINE
						{
						DebugLocation(113, 48);
						NEWLINE11=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports246); 
						NEWLINE11_tree = (CommonTree)adaptor.Create(NEWLINE11);
						adaptor.AddChild(root_0, NEWLINE11_tree);

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(113, 57);
				DEDENT12=(IToken)Match(input,DEDENT,Follow._DEDENT_in_imports249); 
				DEDENT12_tree = (CommonTree)adaptor.Create(DEDENT12);
				adaptor.AddChild(root_0, DEDENT12_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(113, 66);
			// SugarCpp.g:113:66: ( NEWLINE )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==NEWLINE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:113:66: NEWLINE
					{
					DebugLocation(113, 66);
					NEWLINE13=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_imports253); 
					NEWLINE13_tree = (CommonTree)adaptor.Create(NEWLINE13);
					adaptor.AddChild(root_0, NEWLINE13_tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("imports", 3);
			LeaveRule("imports", 3);
			LeaveRule_imports();
		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return retval;

	}
	// $ANTLR end "imports"

	partial void EnterRule_struct();
	partial void LeaveRule_struct();

	// $ANTLR start "struct"
	// SugarCpp.g:116:1: struct : 'struct' IDENT ( INDENT ( ( NEWLINE )+ stmt )+ DEDENT ) ( NEWLINE )* ;
	[GrammarRule("struct")]
	private AstParserRuleReturnScope<CommonTree, IToken> @struct()
	{
		EnterRule_struct();
		EnterRule("struct", 4);
		TraceIn("struct", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal14 = default(IToken);
		IToken IDENT15 = default(IToken);
		IToken INDENT16 = default(IToken);
		IToken NEWLINE17 = default(IToken);
		IToken DEDENT19 = default(IToken);
		IToken NEWLINE20 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt18 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree IDENT15_tree = default(CommonTree);
		CommonTree INDENT16_tree = default(CommonTree);
		CommonTree NEWLINE17_tree = default(CommonTree);
		CommonTree DEDENT19_tree = default(CommonTree);
		CommonTree NEWLINE20_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "struct");
		DebugLocation(116, 1);
		try
		{
			// SugarCpp.g:117:2: ( 'struct' IDENT ( INDENT ( ( NEWLINE )+ stmt )+ DEDENT ) ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarCpp.g:117:4: 'struct' IDENT ( INDENT ( ( NEWLINE )+ stmt )+ DEDENT ) ( NEWLINE )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(117, 4);
			string_literal14=(IToken)Match(input,52,Follow._52_in_struct265); 
			string_literal14_tree = (CommonTree)adaptor.Create(string_literal14);
			adaptor.AddChild(root_0, string_literal14_tree);
			DebugLocation(117, 13);
			IDENT15=(IToken)Match(input,IDENT,Follow._IDENT_in_struct267); 
			IDENT15_tree = (CommonTree)adaptor.Create(IDENT15);
			adaptor.AddChild(root_0, IDENT15_tree);
			DebugLocation(117, 19);
			// SugarCpp.g:117:19: ( INDENT ( ( NEWLINE )+ stmt )+ DEDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:117:20: INDENT ( ( NEWLINE )+ stmt )+ DEDENT
			{
			DebugLocation(117, 20);
			INDENT16=(IToken)Match(input,INDENT,Follow._INDENT_in_struct270); 
			INDENT16_tree = (CommonTree)adaptor.Create(INDENT16);
			adaptor.AddChild(root_0, INDENT16_tree);
			DebugLocation(117, 27);
			// SugarCpp.g:117:27: ( ( NEWLINE )+ stmt )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==NEWLINE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:117:28: ( NEWLINE )+ stmt
					{
					DebugLocation(117, 28);
					// SugarCpp.g:117:28: ( NEWLINE )+
					int cnt9=0;
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0==NEWLINE))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:117:28: NEWLINE
							{
							DebugLocation(117, 28);
							NEWLINE17=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_struct273); 
							NEWLINE17_tree = (CommonTree)adaptor.Create(NEWLINE17);
							adaptor.AddChild(root_0, NEWLINE17_tree);

							}
							break;

						default:
							if (cnt9 >= 1)
								goto loop9;

							EarlyExitException eee9 = new EarlyExitException( 9, input );
							DebugRecognitionException(eee9);
							throw eee9;
						}
						cnt9++;
					}
					loop9:
						;

					} finally { DebugExitSubRule(9); }

					DebugLocation(117, 37);
					PushFollow(Follow._stmt_in_struct276);
					stmt18=stmt();
					PopFollow();

					adaptor.AddChild(root_0, stmt18.Tree);

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(117, 44);
			DEDENT19=(IToken)Match(input,DEDENT,Follow._DEDENT_in_struct280); 
			DEDENT19_tree = (CommonTree)adaptor.Create(DEDENT19);
			adaptor.AddChild(root_0, DEDENT19_tree);

			}

			DebugLocation(117, 52);
			// SugarCpp.g:117:52: ( NEWLINE )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:117:52: NEWLINE
					{
					DebugLocation(117, 52);
					NEWLINE20=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_struct283); 
					NEWLINE20_tree = (CommonTree)adaptor.Create(NEWLINE20);
					adaptor.AddChild(root_0, NEWLINE20_tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct", 4);
			LeaveRule("struct", 4);
			LeaveRule_struct();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "struct"); }
		return retval;

	}
	// $ANTLR end "struct"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:120:1: type_name : IDENT ( '[' ']' )* ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 5);
		TraceIn("type_name", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT21 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken char_literal23 = default(IToken);

		CommonTree IDENT21_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(120, 1);
		try
		{
			// SugarCpp.g:121:2: ( IDENT ( '[' ']' )* )
			DebugEnterAlt(1);
			// SugarCpp.g:121:4: IDENT ( '[' ']' )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(121, 4);
			IDENT21=(IToken)Match(input,IDENT,Follow._IDENT_in_type_name295); 
			IDENT21_tree = (CommonTree)adaptor.Create(IDENT21);
			adaptor.AddChild(root_0, IDENT21_tree);
			DebugLocation(121, 10);
			// SugarCpp.g:121:10: ( '[' ']' )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==Expr_Dict))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:121:11: '[' ']'
					{
					DebugLocation(121, 11);
					char_literal22=(IToken)Match(input,Expr_Dict,Follow._Expr_Dict_in_type_name298); 
					char_literal22_tree = (CommonTree)adaptor.Create(char_literal22);
					adaptor.AddChild(root_0, char_literal22_tree);
					DebugLocation(121, 15);
					char_literal23=(IToken)Match(input,44,Follow._44_in_type_name300); 
					char_literal23_tree = (CommonTree)adaptor.Create(char_literal23);
					adaptor.AddChild(root_0, char_literal23_tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 5);
			LeaveRule("type_name", 5);
			LeaveRule_type_name();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:124:1: generic_parameter : IDENT ( ',' ! IDENT )* ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 6);
		TraceIn("generic_parameter", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT24 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken IDENT26 = default(IToken);

		CommonTree IDENT24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree IDENT26_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(124, 1);
		try
		{
			// SugarCpp.g:125:2: ( IDENT ( ',' ! IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:125:4: IDENT ( ',' ! IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(125, 4);
			IDENT24=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter313); 
			IDENT24_tree = (CommonTree)adaptor.Create(IDENT24);
			adaptor.AddChild(root_0, IDENT24_tree);
			DebugLocation(125, 10);
			// SugarCpp.g:125:10: ( ',' ! IDENT )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==33))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:125:11: ',' ! IDENT
					{
					DebugLocation(125, 14);
					char_literal25=(IToken)Match(input,33,Follow._33_in_generic_parameter316); 
					DebugLocation(125, 16);
					IDENT26=(IToken)Match(input,IDENT,Follow._IDENT_in_generic_parameter319); 
					IDENT26_tree = (CommonTree)adaptor.Create(IDENT26);
					adaptor.AddChild(root_0, IDENT26_tree);

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 6);
			LeaveRule("generic_parameter", 6);
			LeaveRule_generic_parameter();
		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:128:1: func_args : stmt_alloc ( ',' stmt_alloc IDENT )* ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 7);
		TraceIn("func_args", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal28 = default(IToken);
		IToken IDENT30 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc29 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree IDENT30_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(128, 1);
		try
		{
			// SugarCpp.g:129:2: ( stmt_alloc ( ',' stmt_alloc IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:129:4: stmt_alloc ( ',' stmt_alloc IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(129, 4);
			PushFollow(Follow._stmt_alloc_in_func_args332);
			stmt_alloc27=stmt_alloc();
			PopFollow();

			adaptor.AddChild(root_0, stmt_alloc27.Tree);
			DebugLocation(129, 15);
			// SugarCpp.g:129:15: ( ',' stmt_alloc IDENT )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==33))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:129:16: ',' stmt_alloc IDENT
					{
					DebugLocation(129, 16);
					char_literal28=(IToken)Match(input,33,Follow._33_in_func_args335); 
					char_literal28_tree = (CommonTree)adaptor.Create(char_literal28);
					adaptor.AddChild(root_0, char_literal28_tree);
					DebugLocation(129, 20);
					PushFollow(Follow._stmt_alloc_in_func_args337);
					stmt_alloc29=stmt_alloc();
					PopFollow();

					adaptor.AddChild(root_0, stmt_alloc29.Tree);
					DebugLocation(129, 31);
					IDENT30=(IToken)Match(input,IDENT,Follow._IDENT_in_func_args339); 
					IDENT30_tree = (CommonTree)adaptor.Create(IDENT30);
					adaptor.AddChild(root_0, IDENT30_tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 7);
			LeaveRule("func_args", 7);
			LeaveRule_func_args();
		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:132:1: func_def : type_name IDENT ( '[' generic_parameter ']' )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) ( NEWLINE )* ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 8);
		TraceIn("func_def", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT32 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken char_literal35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken NEWLINE42 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT32_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree char_literal35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree NEWLINE42_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(132, 4);
		try
		{
			// SugarCpp.g:133:2: ( type_name IDENT ( '[' generic_parameter ']' )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) ( NEWLINE )* )
			DebugEnterAlt(1);
			// SugarCpp.g:133:4: type_name IDENT ( '[' generic_parameter ']' )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) ( NEWLINE )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(133, 4);
			PushFollow(Follow._type_name_in_func_def352);
			type_name31=type_name();
			PopFollow();

			adaptor.AddChild(root_0, type_name31.Tree);
			DebugLocation(133, 14);
			IDENT32=(IToken)Match(input,IDENT,Follow._IDENT_in_func_def354); 
			IDENT32_tree = (CommonTree)adaptor.Create(IDENT32);
			adaptor.AddChild(root_0, IDENT32_tree);
			DebugLocation(133, 20);
			// SugarCpp.g:133:20: ( '[' generic_parameter ']' )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==Expr_Dict))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:133:21: '[' generic_parameter ']'
				{
				DebugLocation(133, 21);
				char_literal33=(IToken)Match(input,Expr_Dict,Follow._Expr_Dict_in_func_def357); 
				char_literal33_tree = (CommonTree)adaptor.Create(char_literal33);
				adaptor.AddChild(root_0, char_literal33_tree);
				DebugLocation(133, 25);
				PushFollow(Follow._generic_parameter_in_func_def359);
				generic_parameter34=generic_parameter();
				PopFollow();

				adaptor.AddChild(root_0, generic_parameter34.Tree);
				DebugLocation(133, 43);
				char_literal35=(IToken)Match(input,44,Follow._44_in_func_def361); 
				char_literal35_tree = (CommonTree)adaptor.Create(char_literal35);
				adaptor.AddChild(root_0, char_literal35_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(133, 49);
			char_literal36=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_func_def365); 
			char_literal36_tree = (CommonTree)adaptor.Create(char_literal36);
			adaptor.AddChild(root_0, char_literal36_tree);
			DebugLocation(133, 53);
			// SugarCpp.g:133:53: ( func_args )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==IDENT))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:133:53: func_args
				{
				DebugLocation(133, 53);
				PushFollow(Follow._func_args_in_func_def367);
				func_args37=func_args();
				PopFollow();

				adaptor.AddChild(root_0, func_args37.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(133, 64);
			char_literal38=(IToken)Match(input,29,Follow._29_in_func_def370); 
			char_literal38_tree = (CommonTree)adaptor.Create(char_literal38);
			adaptor.AddChild(root_0, char_literal38_tree);
			DebugLocation(133, 68);
			// SugarCpp.g:133:68: ( stmt_block | '=' expr )
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==INDENT))
			{
				alt17 = 1;
			}
			else if ((LA17_0==40))
			{
				alt17 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:133:70: stmt_block
				{
				DebugLocation(133, 70);
				PushFollow(Follow._stmt_block_in_func_def374);
				stmt_block39=stmt_block();
				PopFollow();

				adaptor.AddChild(root_0, stmt_block39.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:133:83: '=' expr
				{
				DebugLocation(133, 83);
				char_literal40=(IToken)Match(input,40,Follow._40_in_func_def378); 
				char_literal40_tree = (CommonTree)adaptor.Create(char_literal40);
				adaptor.AddChild(root_0, char_literal40_tree);
				DebugLocation(133, 87);
				PushFollow(Follow._expr_in_func_def380);
				expr41=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr41.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(133, 94);
			// SugarCpp.g:133:94: ( NEWLINE )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==NEWLINE))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:133:94: NEWLINE
					{
					DebugLocation(133, 94);
					NEWLINE42=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def384); 
					NEWLINE42_tree = (CommonTree)adaptor.Create(NEWLINE42);
					adaptor.AddChild(root_0, NEWLINE42_tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 8);
			LeaveRule("func_def", 8);
			LeaveRule_func_def();
		}
		DebugLocation(134, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:136:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )* DEDENT ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 9);
		TraceIn("stmt_block", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT43 = default(IToken);
		IToken NEWLINE44 = default(IToken);
		IToken DEDENT46 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt45 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT43_tree = default(CommonTree);
		CommonTree NEWLINE44_tree = default(CommonTree);
		CommonTree DEDENT46_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(136, 1);
		try
		{
			// SugarCpp.g:137:2: ( INDENT ( ( NEWLINE )+ stmt )* DEDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:137:4: INDENT ( ( NEWLINE )+ stmt )* DEDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(137, 4);
			INDENT43=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block399); 
			INDENT43_tree = (CommonTree)adaptor.Create(INDENT43);
			adaptor.AddChild(root_0, INDENT43_tree);
			DebugLocation(137, 11);
			// SugarCpp.g:137:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==NEWLINE))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:137:12: ( NEWLINE )+ stmt
					{
					DebugLocation(137, 12);
					// SugarCpp.g:137:12: ( NEWLINE )+
					int cnt19=0;
					try { DebugEnterSubRule(19);
					while (true)
					{
						int alt19=2;
						try { DebugEnterDecision(19, false);
						int LA19_0 = input.LA(1);

						if ((LA19_0==NEWLINE))
						{
							alt19 = 1;
						}


						} finally { DebugExitDecision(19); }
						switch (alt19)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:137:12: NEWLINE
							{
							DebugLocation(137, 12);
							NEWLINE44=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block402); 
							NEWLINE44_tree = (CommonTree)adaptor.Create(NEWLINE44);
							adaptor.AddChild(root_0, NEWLINE44_tree);

							}
							break;

						default:
							if (cnt19 >= 1)
								goto loop19;

							EarlyExitException eee19 = new EarlyExitException( 19, input );
							DebugRecognitionException(eee19);
							throw eee19;
						}
						cnt19++;
					}
					loop19:
						;

					} finally { DebugExitSubRule(19); }

					DebugLocation(137, 21);
					PushFollow(Follow._stmt_in_stmt_block405);
					stmt45=stmt();
					PopFollow();

					adaptor.AddChild(root_0, stmt45.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }

			DebugLocation(137, 28);
			DEDENT46=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block409); 
			DEDENT46_tree = (CommonTree)adaptor.Create(DEDENT46);
			adaptor.AddChild(root_0, DEDENT46_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 9);
			LeaveRule("stmt_block", 9);
			LeaveRule_stmt_block();
		}
		DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:140:1: stmt : ( stmt_if | stmt_while | stmt_for | expr );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 10);
		TraceIn("stmt", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(140, 1);
		try
		{
			// SugarCpp.g:141:2: ( stmt_if | stmt_while | stmt_for | expr )
			int alt21=4;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case 48:
				{
				alt21 = 1;
				}
				break;
			case 54:
				{
				alt21 = 2;
				}
				break;
			case 47:
				{
				alt21 = 3;
				}
				break;
			case Expr_Call:
			case IDENT:
			case INDENT:
			case INT:
			case STRING:
			case 27:
			case 32:
			case 34:
			case 35:
			case 50:
			case 51:
				{
				alt21 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:141:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(141, 4);
				PushFollow(Follow._stmt_if_in_stmt420);
				stmt_if47=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if47.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:142:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(142, 4);
				PushFollow(Follow._stmt_while_in_stmt425);
				stmt_while48=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while48.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:143:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(143, 4);
				PushFollow(Follow._stmt_for_in_stmt430);
				stmt_for49=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for49.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:144:4: expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(144, 4);
				PushFollow(Follow._expr_in_stmt435);
				expr50=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr50.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 10);
			LeaveRule("stmt", 10);
			LeaveRule_stmt();
		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:147:1: stmt_alloc : type_name IDENT ( '=' atom_expr )? -> ^( Expr_Alloc type_name IDENT ( atom_expr )? ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 11);
		TraceIn("stmt_alloc", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT52 = default(IToken);
		IToken char_literal53 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name51 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> atom_expr54 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT52_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(147, 1);
		try
		{
			// SugarCpp.g:148:2: ( type_name IDENT ( '=' atom_expr )? -> ^( Expr_Alloc type_name IDENT ( atom_expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:148:4: type_name IDENT ( '=' atom_expr )?
			{
			DebugLocation(148, 4);
			PushFollow(Follow._type_name_in_stmt_alloc446);
			type_name51=type_name();
			PopFollow();

			stream_type_name.Add(type_name51.Tree);
			DebugLocation(148, 14);
			IDENT52=(IToken)Match(input,IDENT,Follow._IDENT_in_stmt_alloc448);  
			stream_IDENT.Add(IDENT52);

			DebugLocation(148, 20);
			// SugarCpp.g:148:20: ( '=' atom_expr )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==40))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:148:21: '=' atom_expr
				{
				DebugLocation(148, 21);
				char_literal53=(IToken)Match(input,40,Follow._40_in_stmt_alloc451);  
				stream_40.Add(char_literal53);

				DebugLocation(148, 25);
				PushFollow(Follow._atom_expr_in_stmt_alloc453);
				atom_expr54=atom_expr();
				PopFollow();

				stream_atom_expr.Add(atom_expr54.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }



			{
			// AST REWRITE
			// elements: atom_expr, type_name, IDENT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 148:37: -> ^( Expr_Alloc type_name IDENT ( atom_expr )? )
			{
				DebugLocation(148, 40);
				// SugarCpp.g:148:40: ^( Expr_Alloc type_name IDENT ( atom_expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(148, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

				DebugLocation(148, 53);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(148, 63);
				adaptor.AddChild(root_1, stream_IDENT.NextNode());
				DebugLocation(148, 69);
				// SugarCpp.g:148:69: ( atom_expr )?
				if (stream_atom_expr.HasNext)
				{
					DebugLocation(148, 69);
					adaptor.AddChild(root_1, stream_atom_expr.NextTree());

				}
				stream_atom_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 11);
			LeaveRule("stmt_alloc", 11);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(149, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:151:1: stmt_if : 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )? ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 12);
		TraceIn("stmt_if", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal55 = default(IToken);
		IToken NEWLINE58 = default(IToken);
		IToken string_literal59 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block60 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal55_tree = default(CommonTree);
		CommonTree NEWLINE58_tree = default(CommonTree);
		CommonTree string_literal59_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(151, 1);
		try
		{
			// SugarCpp.g:152:2: ( 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )? )
			DebugEnterAlt(1);
			// SugarCpp.g:152:4: 'if' expr stmt_block ( ( NEWLINE )* 'else' stmt_block )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(152, 4);
			string_literal55=(IToken)Match(input,48,Follow._48_in_stmt_if479); 
			string_literal55_tree = (CommonTree)adaptor.Create(string_literal55);
			adaptor.AddChild(root_0, string_literal55_tree);
			DebugLocation(152, 9);
			PushFollow(Follow._expr_in_stmt_if481);
			expr56=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr56.Tree);
			DebugLocation(152, 14);
			PushFollow(Follow._stmt_block_in_stmt_if483);
			stmt_block57=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block57.Tree);
			DebugLocation(152, 25);
			// SugarCpp.g:152:25: ( ( NEWLINE )* 'else' stmt_block )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			try
			{
				alt24 = dfa24.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:152:26: ( NEWLINE )* 'else' stmt_block
				{
				DebugLocation(152, 26);
				// SugarCpp.g:152:26: ( NEWLINE )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==NEWLINE))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:152:26: NEWLINE
						{
						DebugLocation(152, 26);
						NEWLINE58=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if486); 
						NEWLINE58_tree = (CommonTree)adaptor.Create(NEWLINE58);
						adaptor.AddChild(root_0, NEWLINE58_tree);

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }

				DebugLocation(152, 35);
				string_literal59=(IToken)Match(input,46,Follow._46_in_stmt_if489); 
				string_literal59_tree = (CommonTree)adaptor.Create(string_literal59);
				adaptor.AddChild(root_0, string_literal59_tree);
				DebugLocation(152, 42);
				PushFollow(Follow._stmt_block_in_stmt_if491);
				stmt_block60=stmt_block();
				PopFollow();

				adaptor.AddChild(root_0, stmt_block60.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 12);
			LeaveRule("stmt_if", 12);
			LeaveRule_stmt_if();
		}
		DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:155:1: stmt_while : 'while' expr stmt_block ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 13);
		TraceIn("stmt_while", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal61 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block63 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal61_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(155, 1);
		try
		{
			// SugarCpp.g:156:2: ( 'while' expr stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:156:4: 'while' expr stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(156, 4);
			string_literal61=(IToken)Match(input,54,Follow._54_in_stmt_while505); 
			string_literal61_tree = (CommonTree)adaptor.Create(string_literal61);
			adaptor.AddChild(root_0, string_literal61_tree);
			DebugLocation(156, 12);
			PushFollow(Follow._expr_in_stmt_while507);
			expr62=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr62.Tree);
			DebugLocation(156, 17);
			PushFollow(Follow._stmt_block_in_stmt_while509);
			stmt_block63=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block63.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 13);
			LeaveRule("stmt_while", 13);
			LeaveRule_stmt_while();
		}
		DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:159:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'to' expr ( 'by' expr )? ) ')' stmt_block ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 14);
		TraceIn("stmt_for", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal64 = default(IToken);
		IToken char_literal65 = default(IToken);
		IToken char_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken string_literal71 = default(IToken);
		IToken string_literal73 = default(IToken);
		IToken char_literal75 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block76 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal64_tree = default(CommonTree);
		CommonTree char_literal65_tree = default(CommonTree);
		CommonTree char_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree string_literal71_tree = default(CommonTree);
		CommonTree string_literal73_tree = default(CommonTree);
		CommonTree char_literal75_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(159, 1);
		try
		{
			// SugarCpp.g:160:2: ( 'for' '(' expr ( ';' expr ';' expr | 'to' expr ( 'by' expr )? ) ')' stmt_block )
			DebugEnterAlt(1);
			// SugarCpp.g:160:4: 'for' '(' expr ( ';' expr ';' expr | 'to' expr ( 'by' expr )? ) ')' stmt_block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(160, 4);
			string_literal64=(IToken)Match(input,47,Follow._47_in_stmt_for520); 
			string_literal64_tree = (CommonTree)adaptor.Create(string_literal64);
			adaptor.AddChild(root_0, string_literal64_tree);
			DebugLocation(160, 10);
			char_literal65=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_stmt_for522); 
			char_literal65_tree = (CommonTree)adaptor.Create(char_literal65);
			adaptor.AddChild(root_0, char_literal65_tree);
			DebugLocation(160, 14);
			PushFollow(Follow._expr_in_stmt_for524);
			expr66=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr66.Tree);
			DebugLocation(160, 19);
			// SugarCpp.g:160:19: ( ';' expr ';' expr | 'to' expr ( 'by' expr )? )
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==37))
			{
				alt26 = 1;
			}
			else if ((LA26_0==53))
			{
				alt26 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:160:20: ';' expr ';' expr
				{
				DebugLocation(160, 20);
				char_literal67=(IToken)Match(input,37,Follow._37_in_stmt_for527); 
				char_literal67_tree = (CommonTree)adaptor.Create(char_literal67);
				adaptor.AddChild(root_0, char_literal67_tree);
				DebugLocation(160, 24);
				PushFollow(Follow._expr_in_stmt_for529);
				expr68=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr68.Tree);
				DebugLocation(160, 29);
				char_literal69=(IToken)Match(input,37,Follow._37_in_stmt_for531); 
				char_literal69_tree = (CommonTree)adaptor.Create(char_literal69);
				adaptor.AddChild(root_0, char_literal69_tree);
				DebugLocation(160, 33);
				PushFollow(Follow._expr_in_stmt_for533);
				expr70=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr70.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:160:40: 'to' expr ( 'by' expr )?
				{
				DebugLocation(160, 40);
				string_literal71=(IToken)Match(input,53,Follow._53_in_stmt_for537); 
				string_literal71_tree = (CommonTree)adaptor.Create(string_literal71);
				adaptor.AddChild(root_0, string_literal71_tree);
				DebugLocation(160, 45);
				PushFollow(Follow._expr_in_stmt_for539);
				expr72=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr72.Tree);
				DebugLocation(160, 50);
				// SugarCpp.g:160:50: ( 'by' expr )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==45))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:160:51: 'by' expr
					{
					DebugLocation(160, 51);
					string_literal73=(IToken)Match(input,45,Follow._45_in_stmt_for542); 
					string_literal73_tree = (CommonTree)adaptor.Create(string_literal73);
					adaptor.AddChild(root_0, string_literal73_tree);
					DebugLocation(160, 56);
					PushFollow(Follow._expr_in_stmt_for544);
					expr74=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr74.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(25); }


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(160, 64);
			char_literal75=(IToken)Match(input,29,Follow._29_in_stmt_for549); 
			char_literal75_tree = (CommonTree)adaptor.Create(char_literal75);
			adaptor.AddChild(root_0, char_literal75_tree);
			DebugLocation(160, 68);
			PushFollow(Follow._stmt_block_in_stmt_for551);
			stmt_block76=stmt_block();
			PopFollow();

			adaptor.AddChild(root_0, stmt_block76.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 14);
			LeaveRule("stmt_for", 14);
			LeaveRule_stmt_for();
		}
		DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:163:1: expr : return_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 15);
		TraceIn("expr", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> return_expr77 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(163, 1);
		try
		{
			// SugarCpp.g:164:2: ( return_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:164:4: return_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(164, 4);
			PushFollow(Follow._return_expr_in_expr562);
			return_expr77=return_expr();
			PopFollow();

			adaptor.AddChild(root_0, return_expr77.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 15);
			LeaveRule("expr", 15);
			LeaveRule_expr();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_return_expr();
	partial void LeaveRule_return_expr();

	// $ANTLR start "return_expr"
	// SugarCpp.g:167:1: return_expr : ( 'return' expr | alloc_expr );
	[GrammarRule("return_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> return_expr()
	{
		EnterRule_return_expr();
		EnterRule("return_expr", 16);
		TraceIn("return_expr", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal78 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> alloc_expr80 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal78_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "return_expr");
		DebugLocation(167, 1);
		try
		{
			// SugarCpp.g:168:2: ( 'return' expr | alloc_expr )
			int alt27=2;
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==51))
			{
				alt27 = 1;
			}
			else if ((LA27_0==Expr_Call||(LA27_0>=IDENT && LA27_0<=INT)||LA27_0==STRING||LA27_0==27||LA27_0==32||(LA27_0>=34 && LA27_0<=35)||LA27_0==50))
			{
				alt27 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:168:4: 'return' expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(168, 4);
				string_literal78=(IToken)Match(input,51,Follow._51_in_return_expr573); 
				string_literal78_tree = (CommonTree)adaptor.Create(string_literal78);
				adaptor.AddChild(root_0, string_literal78_tree);
				DebugLocation(168, 13);
				PushFollow(Follow._expr_in_return_expr575);
				expr79=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr79.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:169:4: alloc_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(169, 4);
				PushFollow(Follow._alloc_expr_in_return_expr580);
				alloc_expr80=alloc_expr();
				PopFollow();

				adaptor.AddChild(root_0, alloc_expr80.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("return_expr", 16);
			LeaveRule("return_expr", 16);
			LeaveRule_return_expr();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "return_expr"); }
		return retval;

	}
	// $ANTLR end "return_expr"

	partial void EnterRule_alloc_expr();
	partial void LeaveRule_alloc_expr();

	// $ANTLR start "alloc_expr"
	// SugarCpp.g:172:1: alloc_expr : ( type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) | logic_expr );
	[GrammarRule("alloc_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> alloc_expr()
	{
		EnterRule_alloc_expr();
		EnterRule("alloc_expr", 17);
		TraceIn("alloc_expr", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT82 = default(IToken);
		IToken char_literal83 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> logic_expr85 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree IDENT82_tree = default(CommonTree);
		CommonTree char_literal83_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "alloc_expr");
		DebugLocation(172, 1);
		try
		{
			// SugarCpp.g:173:2: ( type_name IDENT ( '=' expr )? -> ^( Expr_Alloc type_name IDENT ( expr )? ) | logic_expr )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==IDENT))
			{
				switch (input.LA(2))
				{
				case Expr_Dict:
					{
					int LA29_3 = input.LA(3);

					if ((LA29_3==44))
					{
						alt29 = 1;
					}
					else if ((LA29_3==Expr_Call||(LA29_3>=IDENT && LA29_3<=INT)||LA29_3==STRING||LA29_3==27||LA29_3==32||(LA29_3>=34 && LA29_3<=35)||(LA29_3>=50 && LA29_3<=51)))
					{
						alt29 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 29, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENT:
					{
					switch (input.LA(3))
					{
					case EOF:
					case DEDENT:
					case INDENT:
					case NEWLINE:
					case 29:
					case 33:
					case 37:
					case 40:
					case 44:
					case 45:
					case 49:
					case 52:
					case 53:
						{
						alt29 = 1;
						}
						break;
					case IDENT:
						{
						switch (input.LA(4))
						{
						case Expr_Dict:
							{
							int LA29_7 = input.LA(5);

							if ((LA29_7==44))
							{
								alt29 = 1;
							}
							else if ((LA29_7==IDENT))
							{
								alt29 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 29, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case IDENT:
							{
							alt29 = 1;
							}
							break;
						case Expr_Call:
							{
							alt29 = 2;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 29, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case Expr_Dict:
						{
						alt29 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 29, 4, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					}
					break;
				case EOF:
				case DEDENT:
				case Expr_Call:
				case Expr_Dot:
				case INDENT:
				case NEWLINE:
				case 28:
				case 29:
				case 30:
				case 31:
				case 33:
				case 34:
				case 36:
				case 37:
				case 38:
				case 39:
				case 40:
				case 41:
				case 42:
				case 43:
				case 44:
				case 45:
				case 49:
				case 52:
				case 53:
					{
					alt29 = 2;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 29, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA29_0==Expr_Call||(LA29_0>=INDENT && LA29_0<=INT)||LA29_0==STRING||LA29_0==27||LA29_0==32||(LA29_0>=34 && LA29_0<=35)||LA29_0==50))
			{
				alt29 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:173:4: type_name IDENT ( '=' expr )?
				{
				DebugLocation(173, 4);
				PushFollow(Follow._type_name_in_alloc_expr591);
				type_name81=type_name();
				PopFollow();

				stream_type_name.Add(type_name81.Tree);
				DebugLocation(173, 14);
				IDENT82=(IToken)Match(input,IDENT,Follow._IDENT_in_alloc_expr593);  
				stream_IDENT.Add(IDENT82);

				DebugLocation(173, 20);
				// SugarCpp.g:173:20: ( '=' expr )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==40))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:173:21: '=' expr
					{
					DebugLocation(173, 21);
					char_literal83=(IToken)Match(input,40,Follow._40_in_alloc_expr596);  
					stream_40.Add(char_literal83);

					DebugLocation(173, 25);
					PushFollow(Follow._expr_in_alloc_expr598);
					expr84=expr();
					PopFollow();

					stream_expr.Add(expr84.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(28); }



				{
				// AST REWRITE
				// elements: IDENT, expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 173:32: -> ^( Expr_Alloc type_name IDENT ( expr )? )
				{
					DebugLocation(173, 35);
					// SugarCpp.g:173:35: ^( Expr_Alloc type_name IDENT ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(173, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(173, 48);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(173, 58);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(173, 64);
					// SugarCpp.g:173:64: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(173, 64);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:174:4: logic_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(174, 4);
				PushFollow(Follow._logic_expr_in_alloc_expr618);
				logic_expr85=logic_expr();
				PopFollow();

				adaptor.AddChild(root_0, logic_expr85.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("alloc_expr", 17);
			LeaveRule("alloc_expr", 17);
			LeaveRule_alloc_expr();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "alloc_expr"); }
		return retval;

	}
	// $ANTLR end "alloc_expr"

	partial void EnterRule_logic_expr();
	partial void LeaveRule_logic_expr();

	// $ANTLR start "logic_expr"
	// SugarCpp.g:177:1: logic_expr : assign_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )* ;
	[GrammarRule("logic_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> logic_expr()
	{
		EnterRule_logic_expr();
		EnterRule("logic_expr", 18);
		TraceIn("logic_expr", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set87 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> assign_expr86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> assign_expr88 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set87_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "logic_expr");
		DebugLocation(177, 1);
		try
		{
			// SugarCpp.g:178:2: ( assign_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:178:4: assign_expr ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(178, 4);
			PushFollow(Follow._assign_expr_in_logic_expr629);
			assign_expr86=assign_expr();
			PopFollow();

			adaptor.AddChild(root_0, assign_expr86.Tree);
			DebugLocation(178, 16);
			// SugarCpp.g:178:16: ( ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==28||(LA30_0>=38 && LA30_0<=39)||(LA30_0>=41 && LA30_0<=43)))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:178:17: ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) ^ assign_expr
					{
					DebugLocation(178, 56);

					set87=(IToken)input.LT(1);
					set87=(IToken)input.LT(1);
					if (input.LA(1)==28||(input.LA(1)>=38 && input.LA(1)<=39)||(input.LA(1)>=41 && input.LA(1)<=43))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set87), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(178, 58);
					PushFollow(Follow._assign_expr_in_logic_expr657);
					assign_expr88=assign_expr();
					PopFollow();

					adaptor.AddChild(root_0, assign_expr88.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logic_expr", 18);
			LeaveRule("logic_expr", 18);
			LeaveRule_logic_expr();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "logic_expr"); }
		return retval;

	}
	// $ANTLR end "logic_expr"

	partial void EnterRule_assign_expr();
	partial void LeaveRule_assign_expr();

	// $ANTLR start "assign_expr"
	// SugarCpp.g:181:1: assign_expr : add_expr ( '=' ^ add_expr )* ;
	[GrammarRule("assign_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> assign_expr()
	{
		EnterRule_assign_expr();
		EnterRule("assign_expr", 19);
		TraceIn("assign_expr", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal90 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> add_expr89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> add_expr91 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal90_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assign_expr");
		DebugLocation(181, 1);
		try
		{
			// SugarCpp.g:182:2: ( add_expr ( '=' ^ add_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:182:4: add_expr ( '=' ^ add_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(182, 4);
			PushFollow(Follow._add_expr_in_assign_expr670);
			add_expr89=add_expr();
			PopFollow();

			adaptor.AddChild(root_0, add_expr89.Tree);
			DebugLocation(182, 13);
			// SugarCpp.g:182:13: ( '=' ^ add_expr )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==40))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:182:14: '=' ^ add_expr
					{
					DebugLocation(182, 17);
					char_literal90=(IToken)Match(input,40,Follow._40_in_assign_expr673); 
					char_literal90_tree = (CommonTree)adaptor.Create(char_literal90);
					root_0 = (CommonTree)adaptor.BecomeRoot(char_literal90_tree, root_0);
					DebugLocation(182, 19);
					PushFollow(Follow._add_expr_in_assign_expr676);
					add_expr91=add_expr();
					PopFollow();

					adaptor.AddChild(root_0, add_expr91.Tree);

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assign_expr", 19);
			LeaveRule("assign_expr", 19);
			LeaveRule_assign_expr();
		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "assign_expr"); }
		return retval;

	}
	// $ANTLR end "assign_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:185:1: add_expr : mul_expr ( ( '+' | '-' ) ^ mul_expr )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 20);
		TraceIn("add_expr", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set93 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> mul_expr92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> mul_expr94 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set93_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(185, 1);
		try
		{
			// SugarCpp.g:186:2: ( mul_expr ( ( '+' | '-' ) ^ mul_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:186:4: mul_expr ( ( '+' | '-' ) ^ mul_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(186, 4);
			PushFollow(Follow._mul_expr_in_add_expr689);
			mul_expr92=mul_expr();
			PopFollow();

			adaptor.AddChild(root_0, mul_expr92.Tree);
			DebugLocation(186, 13);
			// SugarCpp.g:186:13: ( ( '+' | '-' ) ^ mul_expr )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==31||LA32_0==34))
				{
					alt32 = 1;
				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:186:14: ( '+' | '-' ) ^ mul_expr
					{
					DebugLocation(186, 25);

					set93=(IToken)input.LT(1);
					set93=(IToken)input.LT(1);
					if (input.LA(1)==31||input.LA(1)==34)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set93), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(186, 27);
					PushFollow(Follow._mul_expr_in_add_expr701);
					mul_expr94=mul_expr();
					PopFollow();

					adaptor.AddChild(root_0, mul_expr94.Tree);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 20);
			LeaveRule("add_expr", 20);
			LeaveRule_add_expr();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:189:1: mul_expr : new_expr ( ( '*' | '/' ) ^ new_expr )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 21);
		TraceIn("mul_expr", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> new_expr95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> new_expr97 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set96_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(189, 1);
		try
		{
			// SugarCpp.g:190:2: ( new_expr ( ( '*' | '/' ) ^ new_expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:190:4: new_expr ( ( '*' | '/' ) ^ new_expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(190, 4);
			PushFollow(Follow._new_expr_in_mul_expr714);
			new_expr95=new_expr();
			PopFollow();

			adaptor.AddChild(root_0, new_expr95.Tree);
			DebugLocation(190, 13);
			// SugarCpp.g:190:13: ( ( '*' | '/' ) ^ new_expr )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==30||LA33_0==36))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:190:14: ( '*' | '/' ) ^ new_expr
					{
					DebugLocation(190, 25);

					set96=(IToken)input.LT(1);
					set96=(IToken)input.LT(1);
					if (input.LA(1)==30||input.LA(1)==36)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set96), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(190, 27);
					PushFollow(Follow._new_expr_in_mul_expr726);
					new_expr97=new_expr();
					PopFollow();

					adaptor.AddChild(root_0, new_expr97.Tree);

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 21);
			LeaveRule("mul_expr", 21);
			LeaveRule_mul_expr();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_new_expr();
	partial void LeaveRule_new_expr();

	// $ANTLR start "new_expr"
	// SugarCpp.g:193:1: new_expr : ( 'new' IDENT ( '[' expr ']' )+ -> ^( Expr_New IDENT ( expr )+ ) | prefix_expr );
	[GrammarRule("new_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> new_expr()
	{
		EnterRule_new_expr();
		EnterRule("new_expr", 22);
		TraceIn("new_expr", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal98 = default(IToken);
		IToken IDENT99 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken char_literal102 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr103 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal98_tree = default(CommonTree);
		CommonTree IDENT99_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree char_literal102_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IDENT=new RewriteRuleITokenStream(adaptor,"token IDENT");
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_Expr_Dict=new RewriteRuleITokenStream(adaptor,"token Expr_Dict");
		RewriteRuleITokenStream stream_50=new RewriteRuleITokenStream(adaptor,"token 50");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "new_expr");
		DebugLocation(193, 1);
		try
		{
			// SugarCpp.g:194:2: ( 'new' IDENT ( '[' expr ']' )+ -> ^( Expr_New IDENT ( expr )+ ) | prefix_expr )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==50))
			{
				alt35 = 1;
			}
			else if ((LA35_0==Expr_Call||(LA35_0>=IDENT && LA35_0<=INT)||LA35_0==STRING||LA35_0==27||LA35_0==32||(LA35_0>=34 && LA35_0<=35)))
			{
				alt35 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:194:4: 'new' IDENT ( '[' expr ']' )+
				{
				DebugLocation(194, 4);
				string_literal98=(IToken)Match(input,50,Follow._50_in_new_expr739);  
				stream_50.Add(string_literal98);

				DebugLocation(194, 10);
				IDENT99=(IToken)Match(input,IDENT,Follow._IDENT_in_new_expr741);  
				stream_IDENT.Add(IDENT99);

				DebugLocation(194, 16);
				// SugarCpp.g:194:16: ( '[' expr ']' )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==Expr_Dict))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:194:17: '[' expr ']'
						{
						DebugLocation(194, 17);
						char_literal100=(IToken)Match(input,Expr_Dict,Follow._Expr_Dict_in_new_expr744);  
						stream_Expr_Dict.Add(char_literal100);

						DebugLocation(194, 21);
						PushFollow(Follow._expr_in_new_expr746);
						expr101=expr();
						PopFollow();

						stream_expr.Add(expr101.Tree);
						DebugLocation(194, 26);
						char_literal102=(IToken)Match(input,44,Follow._44_in_new_expr748);  
						stream_44.Add(char_literal102);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }



				{
				// AST REWRITE
				// elements: IDENT, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 194:32: -> ^( Expr_New IDENT ( expr )+ )
				{
					DebugLocation(194, 35);
					// SugarCpp.g:194:35: ^( Expr_New IDENT ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(194, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New, "Expr_New"), root_1);

					DebugLocation(194, 46);
					adaptor.AddChild(root_1, stream_IDENT.NextNode());
					DebugLocation(194, 52);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(194, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:195:4: prefix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(195, 4);
				PushFollow(Follow._prefix_expr_in_new_expr766);
				prefix_expr103=prefix_expr();
				PopFollow();

				adaptor.AddChild(root_0, prefix_expr103.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("new_expr", 22);
			LeaveRule("new_expr", 22);
			LeaveRule_new_expr();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "new_expr"); }
		return retval;

	}
	// $ANTLR end "new_expr"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:198:1: prefix_expr : ( ( '!' | '++' | '--' | '-' ) ^)* call_expr ;
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 23);
		TraceIn("prefix_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set104 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> call_expr105 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set104_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(198, 1);
		try
		{
			// SugarCpp.g:199:2: ( ( ( '!' | '++' | '--' | '-' ) ^)* call_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:199:4: ( ( '!' | '++' | '--' | '-' ) ^)* call_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(199, 4);
			// SugarCpp.g:199:4: ( ( '!' | '++' | '--' | '-' ) ^)*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==27||LA36_0==32||(LA36_0>=34 && LA36_0<=35)))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:199:5: ( '!' | '++' | '--' | '-' ) ^
					{
					DebugLocation(199, 30);

					set104=(IToken)input.LT(1);
					set104=(IToken)input.LT(1);
					if (input.LA(1)==27||input.LA(1)==32||(input.LA(1)>=34 && input.LA(1)<=35))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set104), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }

			DebugLocation(199, 34);
			PushFollow(Follow._call_expr_in_prefix_expr797);
			call_expr105=call_expr();
			PopFollow();

			adaptor.AddChild(root_0, call_expr105.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 23);
			LeaveRule("prefix_expr", 23);
			LeaveRule_prefix_expr();
		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_args_list();
	partial void LeaveRule_args_list();

	// $ANTLR start "args_list"
	// SugarCpp.g:205:1: args_list : ( expr )? ( ',' expr )* -> ( expr )* ;
	[GrammarRule("args_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> args_list()
	{
		EnterRule_args_list();
		EnterRule("args_list", 24);
		TraceIn("args_list", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr108 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "args_list");
		DebugLocation(205, 1);
		try
		{
			// SugarCpp.g:206:2: ( ( expr )? ( ',' expr )* -> ( expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:206:4: ( expr )? ( ',' expr )*
			{
			DebugLocation(206, 4);
			// SugarCpp.g:206:4: ( expr )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==Expr_Call||(LA37_0>=IDENT && LA37_0<=INT)||LA37_0==STRING||LA37_0==27||LA37_0==32||(LA37_0>=34 && LA37_0<=35)||(LA37_0>=50 && LA37_0<=51)))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:206:4: expr
				{
				DebugLocation(206, 4);
				PushFollow(Follow._expr_in_args_list824);
				expr106=expr();
				PopFollow();

				stream_expr.Add(expr106.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(206, 10);
			// SugarCpp.g:206:10: ( ',' expr )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==33))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:206:11: ',' expr
					{
					DebugLocation(206, 11);
					char_literal107=(IToken)Match(input,33,Follow._33_in_args_list828);  
					stream_33.Add(char_literal107);

					DebugLocation(206, 15);
					PushFollow(Follow._expr_in_args_list830);
					expr108=expr();
					PopFollow();

					stream_expr.Add(expr108.Tree);

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 206:22: -> ( expr )*
			{
				DebugLocation(206, 25);
				// SugarCpp.g:206:25: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(206, 25);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}
				stream_expr.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args_list", 24);
			LeaveRule("args_list", 24);
			LeaveRule_args_list();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "args_list"); }
		return retval;

	}
	// $ANTLR end "args_list"

	partial void EnterRule_call_expr();
	partial void LeaveRule_call_expr();

	// $ANTLR start "call_expr"
	// SugarCpp.g:209:1: call_expr : dot_expr ( Expr_Call ^ args_list ')' !| Expr_Dict ^ expr ']' !)* ;
	[GrammarRule("call_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> call_expr()
	{
		EnterRule_call_expr();
		EnterRule("call_expr", 25);
		TraceIn("call_expr", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken Expr_Call110 = default(IToken);
		IToken char_literal112 = default(IToken);
		IToken Expr_Dict113 = default(IToken);
		IToken char_literal115 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> dot_expr109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> args_list111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr114 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree Expr_Call110_tree = default(CommonTree);
		CommonTree char_literal112_tree = default(CommonTree);
		CommonTree Expr_Dict113_tree = default(CommonTree);
		CommonTree char_literal115_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "call_expr");
		DebugLocation(209, 1);
		try
		{
			// SugarCpp.g:210:2: ( dot_expr ( Expr_Call ^ args_list ')' !| Expr_Dict ^ expr ']' !)* )
			DebugEnterAlt(1);
			// SugarCpp.g:210:4: dot_expr ( Expr_Call ^ args_list ')' !| Expr_Dict ^ expr ']' !)*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(210, 4);
			PushFollow(Follow._dot_expr_in_call_expr848);
			dot_expr109=dot_expr();
			PopFollow();

			adaptor.AddChild(root_0, dot_expr109.Tree);
			DebugLocation(210, 13);
			// SugarCpp.g:210:13: ( Expr_Call ^ args_list ')' !| Expr_Dict ^ expr ']' !)*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=3;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==Expr_Call))
				{
					alt39 = 1;
				}
				else if ((LA39_0==Expr_Dict))
				{
					alt39 = 2;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:210:14: Expr_Call ^ args_list ')' !
					{
					DebugLocation(210, 23);
					Expr_Call110=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_call_expr851); 
					Expr_Call110_tree = (CommonTree)adaptor.Create(Expr_Call110);
					root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Call110_tree, root_0);
					DebugLocation(210, 25);
					PushFollow(Follow._args_list_in_call_expr854);
					args_list111=args_list();
					PopFollow();

					adaptor.AddChild(root_0, args_list111.Tree);
					DebugLocation(210, 38);
					char_literal112=(IToken)Match(input,29,Follow._29_in_call_expr856); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:211:8: Expr_Dict ^ expr ']' !
					{
					DebugLocation(211, 17);
					Expr_Dict113=(IToken)Match(input,Expr_Dict,Follow._Expr_Dict_in_call_expr866); 
					Expr_Dict113_tree = (CommonTree)adaptor.Create(Expr_Dict113);
					root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Dict113_tree, root_0);
					DebugLocation(211, 19);
					PushFollow(Follow._expr_in_call_expr869);
					expr114=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr114.Tree);
					DebugLocation(211, 27);
					char_literal115=(IToken)Match(input,44,Follow._44_in_call_expr871); 

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("call_expr", 25);
			LeaveRule("call_expr", 25);
			LeaveRule_call_expr();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "call_expr"); }
		return retval;

	}
	// $ANTLR end "call_expr"

	partial void EnterRule_dot_expr();
	partial void LeaveRule_dot_expr();

	// $ANTLR start "dot_expr"
	// SugarCpp.g:218:1: dot_expr : atom_expr ( Expr_Dot ^ IDENT )* ;
	[GrammarRule("dot_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> dot_expr()
	{
		EnterRule_dot_expr();
		EnterRule("dot_expr", 26);
		TraceIn("dot_expr", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken Expr_Dot117 = default(IToken);
		IToken IDENT118 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> atom_expr116 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree Expr_Dot117_tree = default(CommonTree);
		CommonTree IDENT118_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dot_expr");
		DebugLocation(218, 1);
		try
		{
			// SugarCpp.g:219:2: ( atom_expr ( Expr_Dot ^ IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: atom_expr ( Expr_Dot ^ IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(219, 4);
			PushFollow(Follow._atom_expr_in_dot_expr896);
			atom_expr116=atom_expr();
			PopFollow();

			adaptor.AddChild(root_0, atom_expr116.Tree);
			DebugLocation(219, 14);
			// SugarCpp.g:219:14: ( Expr_Dot ^ IDENT )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==Expr_Dot))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:219:15: Expr_Dot ^ IDENT
					{
					DebugLocation(219, 23);
					Expr_Dot117=(IToken)Match(input,Expr_Dot,Follow._Expr_Dot_in_dot_expr899); 
					Expr_Dot117_tree = (CommonTree)adaptor.Create(Expr_Dot117);
					root_0 = (CommonTree)adaptor.BecomeRoot(Expr_Dot117_tree, root_0);
					DebugLocation(219, 25);
					IDENT118=(IToken)Match(input,IDENT,Follow._IDENT_in_dot_expr902); 
					IDENT118_tree = (CommonTree)adaptor.Create(IDENT118);
					adaptor.AddChild(root_0, IDENT118_tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dot_expr", 26);
			LeaveRule("dot_expr", 26);
			LeaveRule_dot_expr();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "dot_expr"); }
		return retval;

	}
	// $ANTLR end "dot_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:222:1: atom_expr : ( INT | IDENT | STRING | '(' ! expr ')' !| block_expr );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 27);
		TraceIn("atom_expr", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INT119 = default(IToken);
		IToken IDENT120 = default(IToken);
		IToken STRING121 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken char_literal124 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> block_expr125 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INT119_tree = default(CommonTree);
		CommonTree IDENT120_tree = default(CommonTree);
		CommonTree STRING121_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( INT | IDENT | STRING | '(' ! expr ')' !| block_expr )
			int alt41=5;
			try { DebugEnterDecision(41, false);
			switch (input.LA(1))
			{
			case INT:
				{
				alt41 = 1;
				}
				break;
			case IDENT:
				{
				alt41 = 2;
				}
				break;
			case STRING:
				{
				alt41 = 3;
				}
				break;
			case Expr_Call:
				{
				alt41 = 4;
				}
				break;
			case INDENT:
				{
				alt41 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				INT119=(IToken)Match(input,INT,Follow._INT_in_atom_expr915); 
				INT119_tree = (CommonTree)adaptor.Create(INT119);
				adaptor.AddChild(root_0, INT119_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:224:4: IDENT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				IDENT120=(IToken)Match(input,IDENT,Follow._IDENT_in_atom_expr920); 
				IDENT120_tree = (CommonTree)adaptor.Create(IDENT120);
				adaptor.AddChild(root_0, IDENT120_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:225:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				STRING121=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr925); 
				STRING121_tree = (CommonTree)adaptor.Create(STRING121);
				adaptor.AddChild(root_0, STRING121_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:226:4: '(' ! expr ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 7);
				char_literal122=(IToken)Match(input,Expr_Call,Follow._Expr_Call_in_atom_expr930); 
				DebugLocation(226, 9);
				PushFollow(Follow._expr_in_atom_expr933);
				expr123=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr123.Tree);
				DebugLocation(226, 17);
				char_literal124=(IToken)Match(input,29,Follow._29_in_atom_expr935); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:227:4: block_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._block_expr_in_atom_expr941);
				block_expr125=block_expr();
				PopFollow();

				adaptor.AddChild(root_0, block_expr125.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 27);
			LeaveRule("atom_expr", 27);
			LeaveRule_atom_expr();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_block_expr();
	partial void LeaveRule_block_expr();

	// $ANTLR start "block_expr"
	// SugarCpp.g:230:1: block_expr : INDENT ( ( NEWLINE )+ stmt )* DEDENT ;
	[GrammarRule("block_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> block_expr()
	{
		EnterRule_block_expr();
		EnterRule("block_expr", 28);
		TraceIn("block_expr", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT126 = default(IToken);
		IToken NEWLINE127 = default(IToken);
		IToken DEDENT129 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt128 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT126_tree = default(CommonTree);
		CommonTree NEWLINE127_tree = default(CommonTree);
		CommonTree DEDENT129_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "block_expr");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( INDENT ( ( NEWLINE )+ stmt )* DEDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:231:4: INDENT ( ( NEWLINE )+ stmt )* DEDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(231, 4);
			INDENT126=(IToken)Match(input,INDENT,Follow._INDENT_in_block_expr952); 
			INDENT126_tree = (CommonTree)adaptor.Create(INDENT126);
			adaptor.AddChild(root_0, INDENT126_tree);
			DebugLocation(231, 11);
			// SugarCpp.g:231:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==NEWLINE))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:231:12: ( NEWLINE )+ stmt
					{
					DebugLocation(231, 12);
					// SugarCpp.g:231:12: ( NEWLINE )+
					int cnt42=0;
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==NEWLINE))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch (alt42)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:231:12: NEWLINE
							{
							DebugLocation(231, 12);
							NEWLINE127=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_block_expr955); 
							NEWLINE127_tree = (CommonTree)adaptor.Create(NEWLINE127);
							adaptor.AddChild(root_0, NEWLINE127_tree);

							}
							break;

						default:
							if (cnt42 >= 1)
								goto loop42;

							EarlyExitException eee42 = new EarlyExitException( 42, input );
							DebugRecognitionException(eee42);
							throw eee42;
						}
						cnt42++;
					}
					loop42:
						;

					} finally { DebugExitSubRule(42); }

					DebugLocation(231, 21);
					PushFollow(Follow._stmt_in_block_expr958);
					stmt128=stmt();
					PopFollow();

					adaptor.AddChild(root_0, stmt128.Tree);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }

			DebugLocation(231, 28);
			DEDENT129=(IToken)Match(input,DEDENT,Follow._DEDENT_in_block_expr962); 
			DEDENT129_tree = (CommonTree)adaptor.Create(DEDENT129);
			adaptor.AddChild(root_0, DEDENT129_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block_expr", 28);
			LeaveRule("block_expr", 28);
			LeaveRule_block_expr();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "block_expr"); }
		return retval;

	}
	// $ANTLR end "block_expr"
	#endregion Rules


	#region DFA
	private DFA5 dfa5;
	private DFA24 dfa24;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this );
		dfa24 = new DFA24( this );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x4\xFFFF";
		private const string DFA5_eofS =
			"\x4\xFFFF";
		private const string DFA5_minS =
			"\x2\x5\x2\xFFFF";
		private const string DFA5_maxS =
			"\x1\x13\x1\x17\x2\xFFFF";
		private const string DFA5_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA5_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x2\xD\xFFFF\x1\x1",
				"\x1\x2\xD\xFFFF\x1\x1\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "()+ loopback of 113:29: ( ( NEWLINE )+ STRING )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA24 : DFA
	{
		private const string DFA24_eotS =
			"\x4\xFFFF";
		private const string DFA24_eofS =
			"\x4\xFFFF";
		private const string DFA24_minS =
			"\x1\x5\x1\xA\x2\xFFFF";
		private const string DFA24_maxS =
			"\x1\x2E\x1\x36\x2\xFFFF";
		private const string DFA24_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA24_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA24_transitionS =
			{
				"\x1\x3\xD\xFFFF\x1\x1\x1A\xFFFF\x1\x2",
				"\x1\x3\x4\xFFFF\x3\x3\x1\xFFFF\x1\x1\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3"+
				"\x4\xFFFF\x1\x3\x1\xFFFF\x2\x3\xA\xFFFF\x1\x2\x2\x3\x1\xFFFF\x2\x3\x2"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA24_eot = DFA.UnpackEncodedString(DFA24_eotS);
		private static readonly short[] DFA24_eof = DFA.UnpackEncodedString(DFA24_eofS);
		private static readonly char[] DFA24_min = DFA.UnpackEncodedStringToUnsignedChars(DFA24_minS);
		private static readonly char[] DFA24_max = DFA.UnpackEncodedStringToUnsignedChars(DFA24_maxS);
		private static readonly short[] DFA24_accept = DFA.UnpackEncodedString(DFA24_acceptS);
		private static readonly short[] DFA24_special = DFA.UnpackEncodedString(DFA24_specialS);
		private static readonly short[][] DFA24_transition;

		static DFA24()
		{
			int numStates = DFA24_transitionS.Length;
			DFA24_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA24_transition[i] = DFA.UnpackEncodedString(DFA24_transitionS[i]);
			}
		}

		public DFA24( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 24;
			this.eot = DFA24_eot;
			this.eof = DFA24_eof;
			this.min = DFA24_min;
			this.max = DFA24_max;
			this.accept = DFA24_accept;
			this.special = DFA24_special;
			this.transition = DFA24_transition;
		}

		public override string Description { get { return "152:25: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _node_in_root195 = new BitSet(new ulong[]{0x12000000008000UL});
		public static readonly BitSet _EOF_in_root198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _imports_in_node209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_def_in_node214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_in_node219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_imports230 = new BitSet(new ulong[]{0x890002UL});
		public static readonly BitSet _STRING_in_imports232 = new BitSet(new ulong[]{0x90002UL});
		public static readonly BitSet _INDENT_in_imports236 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NEWLINE_in_imports239 = new BitSet(new ulong[]{0x880000UL});
		public static readonly BitSet _STRING_in_imports242 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _NEWLINE_in_imports246 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _DEDENT_in_imports249 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _NEWLINE_in_imports253 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _52_in_struct265 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_struct267 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _INDENT_in_struct270 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _NEWLINE_in_struct273 = new BitSet(new ulong[]{0x4D800D088B8400UL});
		public static readonly BitSet _stmt_in_struct276 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _DEDENT_in_struct280 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _NEWLINE_in_struct283 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _IDENT_in_type_name295 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _Expr_Dict_in_type_name298 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_type_name300 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _IDENT_in_generic_parameter313 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _33_in_generic_parameter316 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_generic_parameter319 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _stmt_alloc_in_func_args332 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _33_in_func_args335 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _stmt_alloc_in_func_args337 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_func_args339 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _type_name_in_func_def352 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_func_def354 = new BitSet(new ulong[]{0xC00UL});
		public static readonly BitSet _Expr_Dict_in_func_def357 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _generic_parameter_in_func_def359 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_func_def361 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_func_def365 = new BitSet(new ulong[]{0x20008000UL});
		public static readonly BitSet _func_args_in_func_def367 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_func_def370 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _stmt_block_in_func_def374 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _40_in_func_def378 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_func_def380 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _NEWLINE_in_func_def384 = new BitSet(new ulong[]{0x80002UL});
		public static readonly BitSet _INDENT_in_stmt_block399 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _NEWLINE_in_stmt_block402 = new BitSet(new ulong[]{0x4D800D088B8400UL});
		public static readonly BitSet _stmt_in_stmt_block405 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _DEDENT_in_stmt_block409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_stmt435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_stmt_alloc446 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_stmt_alloc448 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _40_in_stmt_alloc451 = new BitSet(new ulong[]{0x838400UL});
		public static readonly BitSet _atom_expr_in_stmt_alloc453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_stmt_if479 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_stmt_if481 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _stmt_block_in_stmt_if483 = new BitSet(new ulong[]{0x400000080002UL});
		public static readonly BitSet _NEWLINE_in_stmt_if486 = new BitSet(new ulong[]{0x400000080000UL});
		public static readonly BitSet _46_in_stmt_if489 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _stmt_block_in_stmt_if491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_stmt_while505 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_stmt_while507 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _stmt_block_in_stmt_while509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_stmt_for520 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _Expr_Call_in_stmt_for522 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_stmt_for524 = new BitSet(new ulong[]{0x20002000000000UL});
		public static readonly BitSet _37_in_stmt_for527 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_stmt_for529 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_stmt_for531 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_stmt_for533 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _53_in_stmt_for537 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_stmt_for539 = new BitSet(new ulong[]{0x200020000000UL});
		public static readonly BitSet _45_in_stmt_for542 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_stmt_for544 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_stmt_for549 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _stmt_block_in_stmt_for551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_expr_in_expr562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_return_expr573 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_return_expr575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _alloc_expr_in_return_expr580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_alloc_expr591 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_alloc_expr593 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _40_in_alloc_expr596 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_alloc_expr598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logic_expr_in_alloc_expr618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_expr_in_logic_expr629 = new BitSet(new ulong[]{0xEC010000002UL});
		public static readonly BitSet _set_in_logic_expr632 = new BitSet(new ulong[]{0x4000D08838400UL});
		public static readonly BitSet _assign_expr_in_logic_expr657 = new BitSet(new ulong[]{0xEC010000002UL});
		public static readonly BitSet _add_expr_in_assign_expr670 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _40_in_assign_expr673 = new BitSet(new ulong[]{0x4000D08838400UL});
		public static readonly BitSet _add_expr_in_assign_expr676 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _mul_expr_in_add_expr689 = new BitSet(new ulong[]{0x480000002UL});
		public static readonly BitSet _set_in_add_expr692 = new BitSet(new ulong[]{0x4000D08838400UL});
		public static readonly BitSet _mul_expr_in_add_expr701 = new BitSet(new ulong[]{0x480000002UL});
		public static readonly BitSet _new_expr_in_mul_expr714 = new BitSet(new ulong[]{0x1040000002UL});
		public static readonly BitSet _set_in_mul_expr717 = new BitSet(new ulong[]{0x4000D08838400UL});
		public static readonly BitSet _new_expr_in_mul_expr726 = new BitSet(new ulong[]{0x1040000002UL});
		public static readonly BitSet _50_in_new_expr739 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_new_expr741 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _Expr_Dict_in_new_expr744 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_new_expr746 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_new_expr748 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _prefix_expr_in_new_expr766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_prefix_expr778 = new BitSet(new ulong[]{0xD08838400UL});
		public static readonly BitSet _call_expr_in_prefix_expr797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_args_list824 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _33_in_args_list828 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_args_list830 = new BitSet(new ulong[]{0x200000002UL});
		public static readonly BitSet _dot_expr_in_call_expr848 = new BitSet(new ulong[]{0xC02UL});
		public static readonly BitSet _Expr_Call_in_call_expr851 = new BitSet(new ulong[]{0xC000F28838400UL});
		public static readonly BitSet _args_list_in_call_expr854 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_call_expr856 = new BitSet(new ulong[]{0xC02UL});
		public static readonly BitSet _Expr_Dict_in_call_expr866 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_call_expr869 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_call_expr871 = new BitSet(new ulong[]{0xC02UL});
		public static readonly BitSet _atom_expr_in_dot_expr896 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _Expr_Dot_in_dot_expr899 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _IDENT_in_dot_expr902 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _INT_in_atom_expr915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_atom_expr920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Expr_Call_in_atom_expr930 = new BitSet(new ulong[]{0xC000D08838400UL});
		public static readonly BitSet _expr_in_atom_expr933 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_atom_expr935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_expr_in_atom_expr941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_block_expr952 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _NEWLINE_in_block_expr955 = new BitSet(new ulong[]{0x4D800D088B8400UL});
		public static readonly BitSet _stmt_in_block_expr958 = new BitSet(new ulong[]{0x80020UL});
		public static readonly BitSet _DEDENT_in_block_expr962 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
