//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-06 19:49:01

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "'\\\\'", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'defer'", "'else'", "'enum'", "'for'", "'from'", "'if'", "'import'", "'in'", "'let'", "'loop'", "'namespace'", "'new'", "'return'", "'select'", "'try'", "'typedef'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc_Bracket=12;
	public const int Expr_Alloc_Equal=13;
	public const int Expr_Bin=14;
	public const int Expr_Bracket=15;
	public const int Expr_Call=16;
	public const int Expr_Call_With=17;
	public const int Expr_Cond=18;
	public const int Expr_Dict=19;
	public const int Expr_Infix=20;
	public const int Expr_Lambda=21;
	public const int Expr_New_Array=22;
	public const int Expr_New_Type=23;
	public const int Expr_Prefix=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int Generic_Patameters=29;
	public const int Global_Block=30;
	public const int IDENT=31;
	public const int INDENT=32;
	public const int Ident_List=33;
	public const int Import=34;
	public const int Left_Bracket=35;
	public const int LineComment=36;
	public const int Linq_From=37;
	public const int Linq_Let=38;
	public const int Linq_Prefix=39;
	public const int Linq_Where=40;
	public const int Match_Tuple=41;
	public const int NEWLINE=42;
	public const int NUMBER=43;
	public const int Namespace=44;
	public const int Right_Bracket=45;
	public const int Root=46;
	public const int SP=47;
	public const int STRING=48;
	public const int Stmt_Block=49;
	public const int Stmt_Defer=50;
	public const int Stmt_For=51;
	public const int Stmt_ForEach=52;
	public const int Stmt_If=53;
	public const int Stmt_Linq=54;
	public const int Stmt_Loop=55;
	public const int Stmt_Return=56;
	public const int Stmt_Try=57;
	public const int Stmt_Typedef=58;
	public const int Stmt_Using=59;
	public const int Stmt_While=60;
	public const int Type_IDENT=61;
	public const int Type_Ref=62;
	public const int Type_Tuple=63;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:164:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(164, 1);
		try
		{
			// SugarCpp.g:165:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:165:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(165, 4);
			// SugarCpp.g:165:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:165:4: NEWLINE
					{
					DebugLocation(165, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root455);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(165, 13);
			PushFollow(Follow._global_block_in_root458);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(165, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root460);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 165:30: -> ^( Root global_block )
			{
				DebugLocation(165, 33);
				// SugarCpp.g:165:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(165, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(165, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:168:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(168, 1);
		try
		{
			// SugarCpp.g:169:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:169:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(169, 4);
			// SugarCpp.g:169:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==103||LA3_0==110||LA3_0==113||LA3_0==117||LA3_0==121||(LA3_0>=126 && LA3_0<=127)||LA3_0==133))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:169:5: node ( NEWLINE )+
					{
					DebugLocation(169, 5);
					PushFollow(Follow._node_in_global_block480);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(169, 10);
					// SugarCpp.g:169:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:169:10: NEWLINE
							{
							DebugLocation(169, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block482);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 169:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(169, 24);
				// SugarCpp.g:169:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(169, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(169, 39);
				// SugarCpp.g:169:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(169, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:172:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(172, 1);
		try
		{
			// SugarCpp.g:173:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:173:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(173, 4);
				PushFollow(Follow._func_def_in_node505);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:174:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(174, 4);
				PushFollow(Follow._class_def_in_node510);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:175:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(175, 4);
				PushFollow(Follow._enum_def_in_node515);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:176:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				PushFollow(Follow._global_alloc_in_node520);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:177:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 4);
				PushFollow(Follow._global_using_in_node525);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:178:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(178, 4);
				PushFollow(Follow._global_typedef_in_node530);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:179:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(179, 4);
				PushFollow(Follow._import_def_in_node535);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:180:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 4);
				PushFollow(Follow._namespace_def_in_node540);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:183:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(183, 1);
		try
		{
			// SugarCpp.g:184:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:184:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args552); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:185:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args557); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:186:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				PushFollow(Follow._ident_in_attribute_args562);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:189:1: attribute_item : ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(189, 1);
		try
		{
			// SugarCpp.g:190:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:190:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
			{
			DebugLocation(190, 4);
			PushFollow(Follow._ident_in_attribute_item573);
			ident17=ident();
			PopFollow();

			stream_ident.Add(ident17.Tree);
			DebugLocation(190, 10);
			// SugarCpp.g:190:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==71))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:190:11: '(' attribute_args ( ',' attribute_args )* ')'
				{
				DebugLocation(190, 11);
				char_literal18=(IToken)Match(input,71,Follow._71_in_attribute_item576);  
				stream_71.Add(char_literal18);

				DebugLocation(190, 15);
				PushFollow(Follow._attribute_args_in_attribute_item578);
				attribute_args19=attribute_args();
				PopFollow();

				stream_attribute_args.Add(attribute_args19.Tree);
				DebugLocation(190, 30);
				// SugarCpp.g:190:30: ( ',' attribute_args )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==78))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:190:31: ',' attribute_args
						{
						DebugLocation(190, 31);
						char_literal20=(IToken)Match(input,78,Follow._78_in_attribute_item581);  
						stream_78.Add(char_literal20);

						DebugLocation(190, 35);
						PushFollow(Follow._attribute_args_in_attribute_item583);
						attribute_args21=attribute_args();
						PopFollow();

						stream_attribute_args.Add(attribute_args21.Tree);

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(190, 52);
				char_literal22=(IToken)Match(input,72,Follow._72_in_attribute_item587);  
				stream_72.Add(char_literal22);


				}
				break;

			}
			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: ident, attribute_args
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 190:58: -> ^( Attribute ident ( attribute_args )* )
			{
				DebugLocation(190, 61);
				// SugarCpp.g:190:61: ^( Attribute ident ( attribute_args )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(190, 63);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

				DebugLocation(190, 73);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(190, 79);
				// SugarCpp.g:190:79: ( attribute_args )*
				while ( stream_attribute_args.HasNext )
				{
					DebugLocation(190, 79);
					adaptor.AddChild(root_1, stream_attribute_args.NextTree());

				}
				stream_attribute_args.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:193:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal23 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken char_literal27 = default(IToken);
		IToken NEWLINE28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree char_literal27_tree = default(CommonTree);
		CommonTree NEWLINE28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(193, 1);
		try
		{
			// SugarCpp.g:194:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:194:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(194, 4);
			// SugarCpp.g:194:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==103))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:194:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(194, 5);
					char_literal23=(IToken)Match(input,103,Follow._103_in_attribute612);  
					stream_103.Add(char_literal23);

					DebugLocation(194, 9);
					PushFollow(Follow._attribute_item_in_attribute614);
					attribute_item24=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item24.Tree);
					DebugLocation(194, 24);
					// SugarCpp.g:194:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==78))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:194:25: ',' attribute_item
							{
							DebugLocation(194, 25);
							char_literal25=(IToken)Match(input,78,Follow._78_in_attribute617);  
							stream_78.Add(char_literal25);

							DebugLocation(194, 29);
							PushFollow(Follow._attribute_item_in_attribute619);
							attribute_item26=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item26.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(194, 46);
					char_literal27=(IToken)Match(input,105,Follow._105_in_attribute623);  
					stream_105.Add(char_literal27);

					DebugLocation(194, 50);
					// SugarCpp.g:194:50: ( NEWLINE )+
					int cnt9=0;
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0==NEWLINE))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:194:50: NEWLINE
							{
							DebugLocation(194, 50);
							NEWLINE28=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute625);  
							stream_NEWLINE.Add(NEWLINE28);


							}
							break;

						default:
							if (cnt9 >= 1)
								goto loop9;

							EarlyExitException eee9 = new EarlyExitException( 9, input );
							DebugRecognitionException(eee9);
							throw eee9;
						}
						cnt9++;
					}
					loop9:
						;

					} finally { DebugExitSubRule(9); }


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 194:61: -> ( attribute_item )+
			{
				DebugLocation(194, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(194, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:197:1: global_alloc : ( ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) );
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken string_literal41 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute29 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name32 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident40 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr42 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree string_literal34_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree string_literal41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(197, 1);
		try
		{
			// SugarCpp.g:198:2: ( ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			try
			{
				alt15 = dfa15.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:198:4: ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(198, 4);
				// SugarCpp.g:198:4: ( attribute )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==103))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:198:4: attribute
					{
					DebugLocation(198, 4);
					PushFollow(Follow._attribute_in_global_alloc644);
					attribute29=attribute();
					PopFollow();

					stream_attribute.Add(attribute29.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(198, 15);
				PushFollow(Follow._ident_list_in_global_alloc647);
				ident_list30=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list30.Tree);
				DebugLocation(198, 26);
				char_literal31=(IToken)Match(input,88,Follow._88_in_global_alloc649);  
				stream_88.Add(char_literal31);

				DebugLocation(198, 30);
				PushFollow(Follow._type_name_in_global_alloc651);
				type_name32=type_name();
				PopFollow();

				stream_type_name.Add(type_name32.Tree);
				DebugLocation(198, 40);
				// SugarCpp.g:198:40: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt13=3;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case 90:
				case 96:
					{
					alt13 = 1;
					}
					break;
				case 71:
					{
					alt13 = 2;
					}
					break;
				case NEWLINE:
					{
					alt13 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:198:42: ( '=' | ':=' ) expr
					{
					DebugLocation(198, 42);
					// SugarCpp.g:198:42: ( '=' | ':=' )
					int alt12=2;
					try { DebugEnterSubRule(12);
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0==96))
					{
						alt12 = 1;
					}
					else if ((LA12_0==90))
					{
						alt12 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:198:43: '='
						{
						DebugLocation(198, 43);
						char_literal33=(IToken)Match(input,96,Follow._96_in_global_alloc656);  
						stream_96.Add(char_literal33);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:198:49: ':='
						{
						DebugLocation(198, 49);
						string_literal34=(IToken)Match(input,90,Follow._90_in_global_alloc660);  
						stream_90.Add(string_literal34);


						}
						break;

					}
					} finally { DebugExitSubRule(12); }

					DebugLocation(198, 55);
					PushFollow(Follow._expr_in_global_alloc663);
					expr35=expr();
					PopFollow();

					stream_expr.Add(expr35.Tree);


					{
					// AST REWRITE
					// elements: type_name, attribute, ident_list, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 198:60: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(198, 63);
						// SugarCpp.g:198:63: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(198, 65);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(198, 82);
						// SugarCpp.g:198:82: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(198, 82);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(198, 93);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(198, 103);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(198, 114);
						// SugarCpp.g:198:114: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(198, 114);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:199:42: '(' expr ')'
					{
					DebugLocation(199, 42);
					char_literal36=(IToken)Match(input,71,Follow._71_in_global_alloc722);  
					stream_71.Add(char_literal36);

					DebugLocation(199, 46);
					PushFollow(Follow._expr_in_global_alloc724);
					expr37=expr();
					PopFollow();

					stream_expr.Add(expr37.Tree);
					DebugLocation(199, 51);
					char_literal38=(IToken)Match(input,72,Follow._72_in_global_alloc726);  
					stream_72.Add(char_literal38);



					{
					// AST REWRITE
					// elements: type_name, expr, ident_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 199:55: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(199, 58);
						// SugarCpp.g:199:58: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(199, 60);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(199, 79);
						// SugarCpp.g:199:79: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(199, 79);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(199, 90);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(199, 100);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(199, 111);
						// SugarCpp.g:199:111: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(199, 111);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:200:15: 
					{

					{
					// AST REWRITE
					// elements: attribute, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 200:15: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(200, 18);
						// SugarCpp.g:200:18: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(200, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(200, 37);
						// SugarCpp.g:200:37: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(200, 37);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(200, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(200, 58);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:202:4: ( attribute )? ident ':=' modify_expr
				{
				DebugLocation(202, 4);
				// SugarCpp.g:202:4: ( attribute )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==103))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:202:4: attribute
					{
					DebugLocation(202, 4);
					PushFollow(Follow._attribute_in_global_alloc788);
					attribute39=attribute();
					PopFollow();

					stream_attribute.Add(attribute39.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(202, 15);
				PushFollow(Follow._ident_in_global_alloc791);
				ident40=ident();
				PopFollow();

				stream_ident.Add(ident40.Tree);
				DebugLocation(202, 21);
				string_literal41=(IToken)Match(input,90,Follow._90_in_global_alloc793);  
				stream_90.Add(string_literal41);

				DebugLocation(202, 26);
				PushFollow(Follow._modify_expr_in_global_alloc795);
				modify_expr42=modify_expr();
				PopFollow();

				stream_modify_expr.Add(modify_expr42.Tree);


				{
				// AST REWRITE
				// elements: attribute, modify_expr, ident, 90
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 202:38: -> ^( ':=' ( attribute )? ident modify_expr )
				{
					DebugLocation(202, 41);
					// SugarCpp.g:202:41: ^( ':=' ( attribute )? ident modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(202, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_90.NextNode(), root_1);

					DebugLocation(202, 48);
					// SugarCpp.g:202:48: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(202, 48);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(202, 59);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(202, 65);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:205:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using43 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(205, 1);
		try
		{
			// SugarCpp.g:206:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:206:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(206, 4);
			PushFollow(Follow._stmt_using_in_global_using819);
			stmt_using43=stmt_using();
			PopFollow();

			adaptor.AddChild(root_0, stmt_using43.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:209:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef44 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(209, 1);
		try
		{
			// SugarCpp.g:210:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:210:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(210, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef830);
			stmt_typedef44=stmt_typedef();
			PopFollow();

			adaptor.AddChild(root_0, stmt_typedef44.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:213:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal45 = default(IToken);
		IToken STRING46 = default(IToken);
		IToken NEWLINE47 = default(IToken);
		IToken INDENT48 = default(IToken);
		IToken NEWLINE49 = default(IToken);
		IToken STRING50 = default(IToken);
		IToken NEWLINE51 = default(IToken);
		IToken DEDENT52 = default(IToken);

		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree STRING46_tree = default(CommonTree);
		CommonTree NEWLINE47_tree = default(CommonTree);
		CommonTree INDENT48_tree = default(CommonTree);
		CommonTree NEWLINE49_tree = default(CommonTree);
		CommonTree STRING50_tree = default(CommonTree);
		CommonTree NEWLINE51_tree = default(CommonTree);
		CommonTree DEDENT52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(213, 1);
		try
		{
			// SugarCpp.g:214:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:214:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(214, 4);
			string_literal45=(IToken)Match(input,117,Follow._117_in_import_def841);  
			stream_117.Add(string_literal45);

			DebugLocation(214, 13);
			// SugarCpp.g:214:13: ( STRING )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==STRING))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:214:13: STRING
				{
				DebugLocation(214, 13);
				STRING46=(IToken)Match(input,STRING,Follow._STRING_in_import_def843);  
				stream_STRING.Add(STRING46);


				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(214, 21);
			// SugarCpp.g:214:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			try
			{
				alt21 = dfa21.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:214:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(214, 22);
				// SugarCpp.g:214:22: ( NEWLINE )+
				int cnt17=0;
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==NEWLINE))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:214:22: NEWLINE
						{
						DebugLocation(214, 22);
						NEWLINE47=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def847);  
						stream_NEWLINE.Add(NEWLINE47);


						}
						break;

					default:
						if (cnt17 >= 1)
							goto loop17;

						EarlyExitException eee17 = new EarlyExitException( 17, input );
						DebugRecognitionException(eee17);
						throw eee17;
					}
					cnt17++;
				}
				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(214, 31);
				INDENT48=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def850);  
				stream_INDENT.Add(INDENT48);

				DebugLocation(214, 38);
				// SugarCpp.g:214:38: ( NEWLINE )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==NEWLINE))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:214:38: NEWLINE
						{
						DebugLocation(214, 38);
						NEWLINE49=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def852);  
						stream_NEWLINE.Add(NEWLINE49);


						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(214, 48);
				// SugarCpp.g:214:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if ((LA20_0==STRING))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:214:49: STRING ( NEWLINE )+
						{
						DebugLocation(214, 49);
						STRING50=(IToken)Match(input,STRING,Follow._STRING_in_import_def857);  
						stream_STRING.Add(STRING50);

						DebugLocation(214, 56);
						// SugarCpp.g:214:56: ( NEWLINE )+
						int cnt19=0;
						try { DebugEnterSubRule(19);
						while (true)
						{
							int alt19=2;
							try { DebugEnterDecision(19, false);
							int LA19_0 = input.LA(1);

							if ((LA19_0==NEWLINE))
							{
								alt19 = 1;
							}


							} finally { DebugExitDecision(19); }
							switch (alt19)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:214:56: NEWLINE
								{
								DebugLocation(214, 56);
								NEWLINE51=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def859);  
								stream_NEWLINE.Add(NEWLINE51);


								}
								break;

							default:
								if (cnt19 >= 1)
									goto loop19;

								EarlyExitException eee19 = new EarlyExitException( 19, input );
								DebugRecognitionException(eee19);
								throw eee19;
							}
							cnt19++;
						}
						loop19:
							;

						} finally { DebugExitSubRule(19); }


						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }

				DebugLocation(214, 67);
				DEDENT52=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def864);  
				stream_DEDENT.Add(DEDENT52);


				}
				break;

			}
			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 214:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(214, 79);
				// SugarCpp.g:214:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(214, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(214, 88);
				// SugarCpp.g:214:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(214, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:217:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken char_literal58 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident55 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident59 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(217, 1);
		try
		{
			// SugarCpp.g:218:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:218:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(218, 4);
			// SugarCpp.g:218:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==103))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:218:4: attribute
				{
				DebugLocation(218, 4);
				PushFollow(Follow._attribute_in_enum_def886);
				attribute53=attribute();
				PopFollow();

				stream_attribute.Add(attribute53.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(218, 15);
			string_literal54=(IToken)Match(input,113,Follow._113_in_enum_def889);  
			stream_113.Add(string_literal54);

			DebugLocation(218, 22);
			PushFollow(Follow._ident_in_enum_def891);
			ident55=ident();
			PopFollow();

			stream_ident.Add(ident55.Tree);
			DebugLocation(218, 28);
			char_literal56=(IToken)Match(input,96,Follow._96_in_enum_def893);  
			stream_96.Add(char_literal56);

			DebugLocation(218, 32);
			// SugarCpp.g:218:32: ( ident ( '|' ident )* )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==IDENT))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:218:33: ident ( '|' ident )*
				{
				DebugLocation(218, 33);
				PushFollow(Follow._ident_in_enum_def896);
				ident57=ident();
				PopFollow();

				stream_ident.Add(ident57.Tree);
				DebugLocation(218, 39);
				// SugarCpp.g:218:39: ( '|' ident )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==130))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:218:40: '|' ident
						{
						DebugLocation(218, 40);
						char_literal58=(IToken)Match(input,130,Follow._130_in_enum_def899);  
						stream_130.Add(char_literal58);

						DebugLocation(218, 44);
						PushFollow(Follow._ident_in_enum_def901);
						ident59=ident();
						PopFollow();

						stream_ident.Add(ident59.Tree);

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }


				}
				break;

			}
			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 218:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(218, 57);
				// SugarCpp.g:218:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(218, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(218, 64);
				// SugarCpp.g:218:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(218, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(218, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(218, 81);
				// SugarCpp.g:218:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(218, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(218, 94);
				// SugarCpp.g:218:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(218, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:221:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal60 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken INDENT63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT66 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree INDENT63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(221, 1);
		try
		{
			// SugarCpp.g:222:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:222:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(222, 4);
			string_literal60=(IToken)Match(input,121,Follow._121_in_namespace_def934);  
			stream_121.Add(string_literal60);

			DebugLocation(222, 16);
			PushFollow(Follow._ident_in_namespace_def936);
			ident61=ident();
			PopFollow();

			stream_ident.Add(ident61.Tree);
			DebugLocation(222, 22);
			// SugarCpp.g:222:22: ( NEWLINE )+
			int cnt25=0;
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==NEWLINE))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:222:22: NEWLINE
					{
					DebugLocation(222, 22);
					NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def938);  
					stream_NEWLINE.Add(NEWLINE62);


					}
					break;

				default:
					if (cnt25 >= 1)
						goto loop25;

					EarlyExitException eee25 = new EarlyExitException( 25, input );
					DebugRecognitionException(eee25);
					throw eee25;
				}
				cnt25++;
			}
			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(222, 31);
			INDENT63=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def941);  
			stream_INDENT.Add(INDENT63);

			DebugLocation(222, 38);
			// SugarCpp.g:222:38: ( NEWLINE )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==NEWLINE))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:222:38: NEWLINE
					{
					DebugLocation(222, 38);
					NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def943);  
					stream_NEWLINE.Add(NEWLINE64);


					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(222, 47);
			PushFollow(Follow._global_block_in_namespace_def946);
			global_block65=global_block();
			PopFollow();

			stream_global_block.Add(global_block65.Tree);
			DebugLocation(222, 60);
			DEDENT66=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def948);  
			stream_DEDENT.Add(DEDENT66);



			{
			// AST REWRITE
			// elements: global_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 222:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(222, 70);
				// SugarCpp.g:222:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(222, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(222, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(222, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:225:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal68 = default(IToken);
		IToken char_literal71 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken char_literal74 = default(IToken);
		IToken char_literal76 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken INDENT79 = default(IToken);
		IToken NEWLINE80 = default(IToken);
		IToken DEDENT82 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident77 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block81 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal68_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		CommonTree char_literal73_tree = default(CommonTree);
		CommonTree char_literal74_tree = default(CommonTree);
		CommonTree char_literal76_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree INDENT79_tree = default(CommonTree);
		CommonTree NEWLINE80_tree = default(CommonTree);
		CommonTree DEDENT82_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:226:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(226, 5);
			// SugarCpp.g:226:5: ( attribute )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==103))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:5: attribute
				{
				DebugLocation(226, 5);
				PushFollow(Follow._attribute_in_class_def970);
				attribute67=attribute();
				PopFollow();

				stream_attribute.Add(attribute67.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(226, 16);
			string_literal68=(IToken)Match(input,110,Follow._110_in_class_def973);  
			stream_110.Add(string_literal68);

			DebugLocation(226, 24);
			PushFollow(Follow._ident_in_class_def975);
			ident69=ident();
			PopFollow();

			stream_ident.Add(ident69.Tree);
			DebugLocation(226, 30);
			// SugarCpp.g:226:30: ( generic_parameter )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==92))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:31: generic_parameter
				{
				DebugLocation(226, 31);
				PushFollow(Follow._generic_parameter_in_class_def978);
				generic_parameter70=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter70.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(226, 51);
			// SugarCpp.g:226:51: ( '(' func_args ')' )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==71))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:52: '(' func_args ')'
				{
				DebugLocation(226, 52);
				char_literal71=(IToken)Match(input,71,Follow._71_in_class_def983);  
				stream_71.Add(char_literal71);

				DebugLocation(226, 56);
				PushFollow(Follow._func_args_in_class_def985);
				func_args72=func_args();
				PopFollow();

				stream_func_args.Add(func_args72.Tree);
				DebugLocation(226, 66);
				char_literal73=(IToken)Match(input,72,Follow._72_in_class_def987);  
				stream_72.Add(char_literal73);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(226, 72);
			// SugarCpp.g:226:72: ( ':' ident ( ',' ident )* )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==88))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:73: ':' ident ( ',' ident )*
				{
				DebugLocation(226, 73);
				char_literal74=(IToken)Match(input,88,Follow._88_in_class_def992);  
				stream_88.Add(char_literal74);

				DebugLocation(226, 77);
				PushFollow(Follow._ident_in_class_def994);
				ident75=ident();
				PopFollow();

				stream_ident.Add(ident75.Tree);
				DebugLocation(226, 83);
				// SugarCpp.g:226:83: ( ',' ident )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if ((LA30_0==78))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:226:84: ',' ident
						{
						DebugLocation(226, 84);
						char_literal76=(IToken)Match(input,78,Follow._78_in_class_def997);  
						stream_78.Add(char_literal76);

						DebugLocation(226, 88);
						PushFollow(Follow._ident_in_class_def999);
						ident77=ident();
						PopFollow();

						stream_ident.Add(ident77.Tree);

						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }


				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(226, 98);
			// SugarCpp.g:226:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			try
			{
				alt34 = dfa34.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(226, 99);
				// SugarCpp.g:226:99: ( NEWLINE )+
				int cnt32=0;
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if ((LA32_0==NEWLINE))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:226:99: NEWLINE
						{
						DebugLocation(226, 99);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1006);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						if (cnt32 >= 1)
							goto loop32;

						EarlyExitException eee32 = new EarlyExitException( 32, input );
						DebugRecognitionException(eee32);
						throw eee32;
					}
					cnt32++;
				}
				loop32:
					;

				} finally { DebugExitSubRule(32); }

				DebugLocation(226, 108);
				INDENT79=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1009);  
				stream_INDENT.Add(INDENT79);

				DebugLocation(226, 115);
				// SugarCpp.g:226:115: ( NEWLINE )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==NEWLINE))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:226:115: NEWLINE
						{
						DebugLocation(226, 115);
						NEWLINE80=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1011);  
						stream_NEWLINE.Add(NEWLINE80);


						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(226, 124);
				PushFollow(Follow._global_block_in_class_def1014);
				global_block81=global_block();
				PopFollow();

				stream_global_block.Add(global_block81.Tree);
				DebugLocation(226, 137);
				DEDENT82=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1016);  
				stream_DEDENT.Add(DEDENT82);


				}
				break;

			}
			} finally { DebugExitSubRule(34); }



			{
			// AST REWRITE
			// elements: ident, func_args, ident, global_block, generic_parameter, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 226:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(226, 149);
				// SugarCpp.g:226:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(226, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(226, 157);
				// SugarCpp.g:226:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(226, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(226, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(226, 174);
				// SugarCpp.g:226:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(226, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(226, 193);
				// SugarCpp.g:226:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(226, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(226, 204);
				// SugarCpp.g:226:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(226, 205);
					// SugarCpp.g:226:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(226, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(226, 218);
					// SugarCpp.g:226:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(226, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(226, 228);
				// SugarCpp.g:226:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(226, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:229:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal83 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal86 = default(IToken);

		CommonTree char_literal83_tree = default(CommonTree);
		CommonTree char_literal84_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal86_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(229, 34);
		try
		{
			// SugarCpp.g:229:13: ( '*' | '[' ']' | '&' )
			int alt35=3;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case 73:
				{
				alt35 = 1;
				}
				break;
			case 103:
				{
				alt35 = 2;
				}
				break;
			case 69:
				{
				alt35 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:229:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 15);
				char_literal83=(IToken)Match(input,73,Follow._73_in_type_name_op1057); 
				char_literal83_tree = (CommonTree)adaptor.Create(char_literal83);
				adaptor.AddChild(root_0, char_literal83_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:229:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 21);
				char_literal84=(IToken)Match(input,103,Follow._103_in_type_name_op1061); 
				char_literal84_tree = (CommonTree)adaptor.Create(char_literal84);
				adaptor.AddChild(root_0, char_literal84_tree);
				DebugLocation(229, 25);
				char_literal85=(IToken)Match(input,105,Follow._105_in_type_name_op1063); 
				char_literal85_tree = (CommonTree)adaptor.Create(char_literal85);
				adaptor.AddChild(root_0, char_literal85_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:229:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 31);
				char_literal86=(IToken)Match(input,69,Follow._69_in_type_name_op1067); 
				char_literal86_tree = (CommonTree)adaptor.Create(char_literal86);
				adaptor.AddChild(root_0, char_literal86_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
		}
		DebugLocation(229, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:230:1: type_name : ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal92 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op93 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:231:4: ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(231, 4);
			PushFollow(Follow._ident_in_type_name1076);
			ident87=ident();
			PopFollow();

			stream_ident.Add(ident87.Tree);
			DebugLocation(231, 10);
			// SugarCpp.g:231:10: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==92))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:11: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(231, 11);
				char_literal88=(IToken)Match(input,92,Follow._92_in_type_name1079);  
				stream_92.Add(char_literal88);

				DebugLocation(231, 15);
				// SugarCpp.g:231:15: ( type_name ( ',' type_name )* )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==IDENT))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:231:16: type_name ( ',' type_name )*
					{
					DebugLocation(231, 16);
					PushFollow(Follow._type_name_in_type_name1082);
					type_name89=type_name();
					PopFollow();

					stream_type_name.Add(type_name89.Tree);
					DebugLocation(231, 26);
					// SugarCpp.g:231:26: ( ',' type_name )*
					try { DebugEnterSubRule(36);
					while (true)
					{
						int alt36=2;
						try { DebugEnterDecision(36, false);
						int LA36_0 = input.LA(1);

						if ((LA36_0==78))
						{
							alt36 = 1;
						}


						} finally { DebugExitDecision(36); }
						switch ( alt36 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:231:27: ',' type_name
							{
							DebugLocation(231, 27);
							char_literal90=(IToken)Match(input,78,Follow._78_in_type_name1085);  
							stream_78.Add(char_literal90);

							DebugLocation(231, 31);
							PushFollow(Follow._type_name_in_type_name1087);
							type_name91=type_name();
							PopFollow();

							stream_type_name.Add(type_name91.Tree);

							}
							break;

						default:
							goto loop36;
						}
					}

					loop36:
						;

					} finally { DebugExitSubRule(36); }


					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(231, 45);
				char_literal92=(IToken)Match(input,99,Follow._99_in_type_name1093);  
				stream_99.Add(char_literal92);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(231, 51);
			// SugarCpp.g:231:51: ( type_name_op )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==103))
				{
					int LA39_2 = input.LA(2);

					if ((LA39_2==105))
					{
						alt39 = 1;
					}


				}
				else if ((LA39_0==69||LA39_0==73))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:231:51: type_name_op
					{
					DebugLocation(231, 51);
					PushFollow(Follow._type_name_op_in_type_name1097);
					type_name_op93=type_name_op();
					PopFollow();

					stream_type_name_op.Add(type_name_op93.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: type_name, 92, ident, 99, type_name_op
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 231:65: -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(231, 68);
				// SugarCpp.g:231:68: ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(231, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(231, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(231, 87);
				// SugarCpp.g:231:87: ( '<' ( type_name )* '>' )?
				if (stream_type_name.HasNext||stream_92.HasNext||stream_99.HasNext)
				{
					DebugLocation(231, 88);
					adaptor.AddChild(root_1, stream_92.NextNode());
					DebugLocation(231, 92);
					// SugarCpp.g:231:92: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(231, 92);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(231, 103);
					adaptor.AddChild(root_1, stream_99.NextNode());

				}
				stream_type_name.Reset();
				stream_92.Reset();
				stream_99.Reset();
				DebugLocation(231, 110);
				// SugarCpp.g:231:110: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(231, 110);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:234:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 16);
		TraceIn("generic_parameter_inside", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal95 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident96 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal95_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(234, 1);
		try
		{
			// SugarCpp.g:235:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:235:4: ident ( ',' ident )*
			{
			DebugLocation(235, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1131);
			ident94=ident();
			PopFollow();

			stream_ident.Add(ident94.Tree);
			DebugLocation(235, 10);
			// SugarCpp.g:235:10: ( ',' ident )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==78))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:235:11: ',' ident
					{
					DebugLocation(235, 11);
					char_literal95=(IToken)Match(input,78,Follow._78_in_generic_parameter_inside1134);  
					stream_78.Add(char_literal95);

					DebugLocation(235, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1136);
					ident96=ident();
					PopFollow();

					stream_ident.Add(ident96.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 235:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(235, 26);
				// SugarCpp.g:235:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(235, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(235, 47);
				// SugarCpp.g:235:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(235, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 16);
			LeaveRule("generic_parameter_inside", 16);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:238:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 17);
		TraceIn("generic_parameter", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal97 = default(IToken);
		IToken char_literal99 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside98 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal97_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(238, 1);
		try
		{
			// SugarCpp.g:239:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:239:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(239, 4);
			char_literal97=(IToken)Match(input,92,Follow._92_in_generic_parameter1158);  
			stream_92.Add(char_literal97);

			DebugLocation(239, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1160);
			generic_parameter_inside98=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside98.Tree);
			DebugLocation(239, 33);
			char_literal99=(IToken)Match(input,99,Follow._99_in_generic_parameter1162);  
			stream_99.Add(char_literal99);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 239:37: -> generic_parameter_inside
			{
				DebugLocation(239, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 17);
			LeaveRule("generic_parameter", 17);
			LeaveRule_generic_parameter();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:242:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 18);
		TraceIn("func_args", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal101 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc102 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal101_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(242, 1);
		try
		{
			// SugarCpp.g:243:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:243:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(243, 4);
			PushFollow(Follow._stmt_alloc_in_func_args1177);
			stmt_alloc100=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc100.Tree);
			DebugLocation(243, 15);
			// SugarCpp.g:243:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==78))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:243:16: ',' stmt_alloc
					{
					DebugLocation(243, 16);
					char_literal101=(IToken)Match(input,78,Follow._78_in_func_args1180);  
					stream_78.Add(char_literal101);

					DebugLocation(243, 20);
					PushFollow(Follow._stmt_alloc_in_func_args1182);
					stmt_alloc102=stmt_alloc();
					PopFollow();

					stream_stmt_alloc.Add(stmt_alloc102.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 243:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(243, 36);
				// SugarCpp.g:243:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(243, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(243, 48);
				// SugarCpp.g:243:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(243, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 18);
			LeaveRule("func_args", 18);
			LeaveRule_func_args();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:246:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 19);
		TraceIn("func_def", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		IToken char_literal108 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken NEWLINE111 = default(IToken);
		IToken char_literal113 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block112 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr114 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal108_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree NEWLINE111_tree = default(CommonTree);
		CommonTree char_literal113_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(246, 4);
		try
		{
			// SugarCpp.g:247:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:247:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(247, 4);
			// SugarCpp.g:247:4: ( attribute )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==103))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:4: attribute
				{
				DebugLocation(247, 4);
				PushFollow(Follow._attribute_in_func_def1204);
				attribute103=attribute();
				PopFollow();

				stream_attribute.Add(attribute103.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(247, 15);
			// SugarCpp.g:247:15: ( type_name )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			try
			{
				alt43 = dfa43.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:15: type_name
				{
				DebugLocation(247, 15);
				PushFollow(Follow._type_name_in_func_def1207);
				type_name104=type_name();
				PopFollow();

				stream_type_name.Add(type_name104.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(247, 26);
			// SugarCpp.g:247:26: ( '~' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==133))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:26: '~'
				{
				DebugLocation(247, 26);
				char_literal105=(IToken)Match(input,133,Follow._133_in_func_def1210);  
				stream_133.Add(char_literal105);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(247, 31);
			PushFollow(Follow._ident_in_func_def1213);
			ident106=ident();
			PopFollow();

			stream_ident.Add(ident106.Tree);
			DebugLocation(247, 37);
			// SugarCpp.g:247:37: ( generic_parameter )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==92))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:37: generic_parameter
				{
				DebugLocation(247, 37);
				PushFollow(Follow._generic_parameter_in_func_def1215);
				generic_parameter107=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter107.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(247, 56);
			char_literal108=(IToken)Match(input,71,Follow._71_in_func_def1218);  
			stream_71.Add(char_literal108);

			DebugLocation(247, 60);
			// SugarCpp.g:247:60: ( func_args )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==IDENT))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:60: func_args
				{
				DebugLocation(247, 60);
				PushFollow(Follow._func_args_in_func_def1220);
				func_args109=func_args();
				PopFollow();

				stream_func_args.Add(func_args109.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(247, 71);
			char_literal110=(IToken)Match(input,72,Follow._72_in_func_def1223);  
			stream_72.Add(char_literal110);

			DebugLocation(247, 75);
			// SugarCpp.g:247:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==NEWLINE))
			{
				alt48 = 1;
			}
			else if ((LA48_0==96))
			{
				alt48 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(247, 76);
				// SugarCpp.g:247:76: ( NEWLINE )+
				int cnt47=0;
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==NEWLINE))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:247:76: NEWLINE
						{
						DebugLocation(247, 76);
						NEWLINE111=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1226);  
						stream_NEWLINE.Add(NEWLINE111);


						}
						break;

					default:
						if (cnt47 >= 1)
							goto loop47;

						EarlyExitException eee47 = new EarlyExitException( 47, input );
						DebugRecognitionException(eee47);
						throw eee47;
					}
					cnt47++;
				}
				loop47:
					;

				} finally { DebugExitSubRule(47); }

				DebugLocation(247, 85);
				PushFollow(Follow._stmt_block_in_func_def1229);
				stmt_block112=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block112.Tree);


				{
				// AST REWRITE
				// elements: func_args, attribute, ident, 133, type_name, generic_parameter, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 247:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(247, 99);
					// SugarCpp.g:247:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(247, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(247, 110);
					// SugarCpp.g:247:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(247, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(247, 121);
					// SugarCpp.g:247:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(247, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(247, 132);
					// SugarCpp.g:247:132: ( '~' )?
					if (stream_133.HasNext)
					{
						DebugLocation(247, 132);
						adaptor.AddChild(root_1, stream_133.NextNode());

					}
					stream_133.Reset();
					DebugLocation(247, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(247, 143);
					// SugarCpp.g:247:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(247, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(247, 162);
					// SugarCpp.g:247:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(247, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(247, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:248:23: '=' expr
				{
				DebugLocation(248, 23);
				char_literal113=(IToken)Match(input,96,Follow._96_in_func_def1278);  
				stream_96.Add(char_literal113);

				DebugLocation(248, 27);
				PushFollow(Follow._expr_in_func_def1280);
				expr114=expr();
				PopFollow();

				stream_expr.Add(expr114.Tree);


				{
				// AST REWRITE
				// elements: ident, type_name, func_args, generic_parameter, 133, expr, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 248:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(248, 36);
					// SugarCpp.g:248:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(248, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(248, 47);
					// SugarCpp.g:248:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(248, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(248, 58);
					// SugarCpp.g:248:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(248, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(248, 69);
					// SugarCpp.g:248:69: ( '~' )?
					if (stream_133.HasNext)
					{
						DebugLocation(248, 69);
						adaptor.AddChild(root_1, stream_133.NextNode());

					}
					stream_133.Reset();
					DebugLocation(248, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(248, 80);
					// SugarCpp.g:248:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(248, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(248, 99);
					// SugarCpp.g:248:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(248, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(248, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 19);
			LeaveRule("func_def", 19);
			LeaveRule_func_def();
		}
		DebugLocation(249, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:251:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 20);
		TraceIn("stmt_block", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT115 = default(IToken);
		IToken NEWLINE116 = default(IToken);
		IToken NEWLINE118 = default(IToken);
		IToken DEDENT119 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt117 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT115_tree = default(CommonTree);
		CommonTree NEWLINE116_tree = default(CommonTree);
		CommonTree NEWLINE118_tree = default(CommonTree);
		CommonTree DEDENT119_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(251, 1);
		try
		{
			// SugarCpp.g:252:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:252:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(252, 4);
			INDENT115=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1321);  
			stream_INDENT.Add(INDENT115);

			DebugLocation(252, 11);
			// SugarCpp.g:252:11: ( NEWLINE )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==NEWLINE))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:252:11: NEWLINE
					{
					DebugLocation(252, 11);
					NEWLINE116=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1323);  
					stream_NEWLINE.Add(NEWLINE116);


					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }

			DebugLocation(252, 21);
			// SugarCpp.g:252:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==IDENT||LA51_0==71||LA51_0==111||LA51_0==114||LA51_0==116||(LA51_0>=119 && LA51_0<=120)||(LA51_0>=123 && LA51_0<=129)))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:252:22: stmt ( NEWLINE )+
					{
					DebugLocation(252, 22);
					PushFollow(Follow._stmt_in_stmt_block1328);
					stmt117=stmt();
					PopFollow();

					stream_stmt.Add(stmt117.Tree);
					DebugLocation(252, 27);
					// SugarCpp.g:252:27: ( NEWLINE )+
					int cnt50=0;
					try { DebugEnterSubRule(50);
					while (true)
					{
						int alt50=2;
						try { DebugEnterDecision(50, false);
						int LA50_0 = input.LA(1);

						if ((LA50_0==NEWLINE))
						{
							alt50 = 1;
						}


						} finally { DebugExitDecision(50); }
						switch (alt50)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:252:27: NEWLINE
							{
							DebugLocation(252, 27);
							NEWLINE118=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1330);  
							stream_NEWLINE.Add(NEWLINE118);


							}
							break;

						default:
							if (cnt50 >= 1)
								goto loop50;

							EarlyExitException eee50 = new EarlyExitException( 50, input );
							DebugRecognitionException(eee50);
							throw eee50;
						}
						cnt50++;
					}
					loop50:
						;

					} finally { DebugExitSubRule(50); }


					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(252, 38);
			DEDENT119=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1335);  
			stream_DEDENT.Add(DEDENT119);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 252:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(252, 48);
				// SugarCpp.g:252:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(252, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(252, 61);
				// SugarCpp.g:252:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(252, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 20);
			LeaveRule("stmt_block", 20);
			LeaveRule_stmt_block();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:255:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 21);
		TraceIn("stmt", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_linq125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer126 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(255, 1);
		try
		{
			// SugarCpp.g:256:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer )
			int alt52=7;
			try { DebugEnterDecision(52, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 71:
			case 123:
			case 126:
			case 127:
				{
				alt52 = 1;
				}
				break;
			case 116:
				{
				alt52 = 2;
				}
				break;
			case 114:
				{
				alt52 = 3;
				}
				break;
			case 120:
			case 129:
				{
				alt52 = 4;
				}
				break;
			case 125:
				{
				alt52 = 5;
				}
				break;
			case 119:
			case 124:
			case 128:
				{
				alt52 = 6;
				}
				break;
			case 111:
				{
				alt52 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(256, 4);
				PushFollow(Follow._stmt_expr_in_stmt1355);
				stmt_expr120=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr120.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:257:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(257, 4);
				PushFollow(Follow._stmt_if_in_stmt1360);
				stmt_if121=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if121.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:258:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(258, 4);
				PushFollow(Follow._stmt_for_in_stmt1365);
				stmt_for122=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for122.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:259:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(259, 4);
				PushFollow(Follow._stmt_while_in_stmt1370);
				stmt_while123=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while123.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:260:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(260, 4);
				PushFollow(Follow._stmt_try_in_stmt1375);
				stmt_try124=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try124.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:261:4: stmt_linq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(261, 4);
				PushFollow(Follow._stmt_linq_in_stmt1380);
				stmt_linq125=stmt_linq();
				PopFollow();

				adaptor.AddChild(root_0, stmt_linq125.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:262:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(262, 4);
				PushFollow(Follow._stmt_defer_in_stmt1385);
				stmt_defer126=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer126.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 21);
			LeaveRule("stmt", 21);
			LeaveRule_stmt();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:265:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 22);
		TraceIn("stmt_expr", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify131 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(265, 1);
		try
		{
			// SugarCpp.g:266:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt53=5;
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(266, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr1396);
				stmt_alloc127=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc127.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:267:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(267, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr1401);
				stmt_return128=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return128.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:268:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(268, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr1406);
				stmt_using129=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using129.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:269:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(269, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1411);
				stmt_typedef130=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef130.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:270:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(270, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr1416);
				stmt_modify131=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify131.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 22);
			LeaveRule("stmt_expr", 22);
			LeaveRule_stmt_expr();
		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:273:1: stmt_defer : 'defer' stmt -> ^( Stmt_Defer stmt ) ;
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 23);
		TraceIn("stmt_defer", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(273, 1);
		try
		{
			// SugarCpp.g:274:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) )
			DebugEnterAlt(1);
			// SugarCpp.g:274:4: 'defer' stmt
			{
			DebugLocation(274, 4);
			string_literal132=(IToken)Match(input,111,Follow._111_in_stmt_defer1427);  
			stream_111.Add(string_literal132);

			DebugLocation(274, 12);
			PushFollow(Follow._stmt_in_stmt_defer1429);
			stmt133=stmt();
			PopFollow();

			stream_stmt.Add(stmt133.Tree);


			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 274:17: -> ^( Stmt_Defer stmt )
			{
				DebugLocation(274, 20);
				// SugarCpp.g:274:20: ^( Stmt_Defer stmt )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(274, 22);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

				DebugLocation(274, 33);
				adaptor.AddChild(root_1, stream_stmt.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 23);
			LeaveRule("stmt_defer", 23);
			LeaveRule_stmt_defer();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:277:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 24);
		TraceIn("stmt_typedef", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal134 = default(IToken);
		IToken char_literal136 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident135 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name137 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal134_tree = default(CommonTree);
		CommonTree char_literal136_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(277, 1);
		try
		{
			// SugarCpp.g:278:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:278:4: 'typedef' ident '=' type_name
			{
			DebugLocation(278, 4);
			string_literal134=(IToken)Match(input,126,Follow._126_in_stmt_typedef1448);  
			stream_126.Add(string_literal134);

			DebugLocation(278, 14);
			PushFollow(Follow._ident_in_stmt_typedef1450);
			ident135=ident();
			PopFollow();

			stream_ident.Add(ident135.Tree);
			DebugLocation(278, 20);
			char_literal136=(IToken)Match(input,96,Follow._96_in_stmt_typedef1452);  
			stream_96.Add(char_literal136);

			DebugLocation(278, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1454);
			type_name137=type_name();
			PopFollow();

			stream_type_name.Add(type_name137.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 278:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(278, 37);
				// SugarCpp.g:278:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(278, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(278, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(278, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 24);
			LeaveRule("stmt_typedef", 24);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:281:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 25);
		TraceIn("stmt_using_item", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal139 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident138 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal139_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(281, 36);
		try
		{
			// SugarCpp.g:281:16: ( ident | 'namespace' )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==IDENT))
			{
				alt54 = 1;
			}
			else if ((LA54_0==121))
			{
				alt54 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:281:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(281, 18);
				PushFollow(Follow._ident_in_stmt_using_item1473);
				ident138=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident138.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:281:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(281, 26);
				string_literal139=(IToken)Match(input,121,Follow._121_in_stmt_using_item1477); 
				string_literal139_tree = (CommonTree)adaptor.Create(string_literal139);
				adaptor.AddChild(root_0, string_literal139_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 25);
			LeaveRule("stmt_using_item", 25);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(281, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:282:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 26);
		TraceIn("stmt_using", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal140_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(282, 1);
		try
		{
			// SugarCpp.g:283:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:283:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(283, 4);
			string_literal140=(IToken)Match(input,127,Follow._127_in_stmt_using1485);  
			stream_127.Add(string_literal140);

			DebugLocation(283, 12);
			// SugarCpp.g:283:12: ( stmt_using_item )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==IDENT||LA55_0==121))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:283:12: stmt_using_item
					{
					DebugLocation(283, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1487);
					stmt_using_item141=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item141.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 283:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(283, 32);
				// SugarCpp.g:283:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(283, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(283, 45);
				// SugarCpp.g:283:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(283, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 26);
			LeaveRule("stmt_using", 26);
			LeaveRule_stmt_using();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:286:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 27);
		TraceIn("stmt_return", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal142 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr143 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(286, 1);
		try
		{
			// SugarCpp.g:287:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:287:4: 'return' ( expr )?
			{
			DebugLocation(287, 4);
			string_literal142=(IToken)Match(input,123,Follow._123_in_stmt_return1508);  
			stream_123.Add(string_literal142);

			DebugLocation(287, 13);
			// SugarCpp.g:287:13: ( expr )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==NUMBER||LA56_0==STRING||LA56_0==64||LA56_0==69||LA56_0==71||LA56_0==73||(LA56_0>=75 && LA56_0<=76)||(LA56_0>=79 && LA56_0<=80)||LA56_0==104||LA56_0==122||LA56_0==133))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:13: expr
				{
				DebugLocation(287, 13);
				PushFollow(Follow._expr_in_stmt_return1510);
				expr143=expr();
				PopFollow();

				stream_expr.Add(expr143.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(287, 22);
				// SugarCpp.g:287:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(287, 36);
				// SugarCpp.g:287:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(287, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 27);
			LeaveRule("stmt_return", 27);
			LeaveRule_stmt_return();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:290:1: stmt_if : 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 28);
		TraceIn("stmt_if", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal144 = default(IToken);
		IToken char_literal145 = default(IToken);
		IToken char_literal147 = default(IToken);
		IToken string_literal149 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal144_tree = default(CommonTree);
		CommonTree char_literal145_tree = default(CommonTree);
		CommonTree char_literal147_tree = default(CommonTree);
		CommonTree string_literal149_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(290, 1);
		try
		{
			// SugarCpp.g:291:2: ( 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:291:4: 'if' '(' expr ')' stmt_block ( 'else' stmt_block )?
			{
			DebugLocation(291, 4);
			string_literal144=(IToken)Match(input,116,Follow._116_in_stmt_if1531);  
			stream_116.Add(string_literal144);

			DebugLocation(291, 9);
			char_literal145=(IToken)Match(input,71,Follow._71_in_stmt_if1533);  
			stream_71.Add(char_literal145);

			DebugLocation(291, 13);
			PushFollow(Follow._expr_in_stmt_if1535);
			expr146=expr();
			PopFollow();

			stream_expr.Add(expr146.Tree);
			DebugLocation(291, 18);
			char_literal147=(IToken)Match(input,72,Follow._72_in_stmt_if1537);  
			stream_72.Add(char_literal147);

			DebugLocation(291, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1539);
			stmt_block148=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block148.Tree);
			DebugLocation(291, 33);
			// SugarCpp.g:291:33: ( 'else' stmt_block )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==112))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:291:34: 'else' stmt_block
				{
				DebugLocation(291, 34);
				string_literal149=(IToken)Match(input,112,Follow._112_in_stmt_if1542);  
				stream_112.Add(string_literal149);

				DebugLocation(291, 41);
				PushFollow(Follow._stmt_block_in_stmt_if1544);
				stmt_block150=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block150.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }



			{
			// AST REWRITE
			// elements: stmt_block, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 291:54: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(291, 57);
				// SugarCpp.g:291:57: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(291, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(291, 67);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(291, 72);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(291, 83);
				// SugarCpp.g:291:83: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(291, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 28);
			LeaveRule("stmt_if", 28);
			LeaveRule_stmt_if();
		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:294:1: stmt_while : ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) | 'loop' stmt_block -> ^( Stmt_Loop stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 29);
		TraceIn("stmt_while", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal151 = default(IToken);
		IToken char_literal152 = default(IToken);
		IToken char_literal154 = default(IToken);
		IToken string_literal156 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal151_tree = default(CommonTree);
		CommonTree char_literal152_tree = default(CommonTree);
		CommonTree char_literal154_tree = default(CommonTree);
		CommonTree string_literal156_tree = default(CommonTree);
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(294, 1);
		try
		{
			// SugarCpp.g:295:2: ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) | 'loop' stmt_block -> ^( Stmt_Loop stmt_block ) )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==129))
			{
				alt58 = 1;
			}
			else if ((LA58_0==120))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:295:4: 'while' '(' expr ')' stmt_block
				{
				DebugLocation(295, 4);
				string_literal151=(IToken)Match(input,129,Follow._129_in_stmt_while1570);  
				stream_129.Add(string_literal151);

				DebugLocation(295, 12);
				char_literal152=(IToken)Match(input,71,Follow._71_in_stmt_while1572);  
				stream_71.Add(char_literal152);

				DebugLocation(295, 16);
				PushFollow(Follow._expr_in_stmt_while1574);
				expr153=expr();
				PopFollow();

				stream_expr.Add(expr153.Tree);
				DebugLocation(295, 21);
				char_literal154=(IToken)Match(input,72,Follow._72_in_stmt_while1576);  
				stream_72.Add(char_literal154);

				DebugLocation(295, 25);
				PushFollow(Follow._stmt_block_in_stmt_while1578);
				stmt_block155=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block155.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 295:36: -> ^( Stmt_While expr stmt_block )
				{
					DebugLocation(295, 39);
					// SugarCpp.g:295:39: ^( Stmt_While expr stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(295, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

					DebugLocation(295, 52);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(295, 57);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:296:4: 'loop' stmt_block
				{
				DebugLocation(296, 4);
				string_literal156=(IToken)Match(input,120,Follow._120_in_stmt_while1593);  
				stream_120.Add(string_literal156);

				DebugLocation(296, 11);
				PushFollow(Follow._stmt_block_in_stmt_while1595);
				stmt_block157=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block157.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 296:22: -> ^( Stmt_Loop stmt_block )
				{
					DebugLocation(296, 25);
					// SugarCpp.g:296:25: ^( Stmt_Loop stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(296, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(296, 37);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 29);
			LeaveRule("stmt_while", 29);
			LeaveRule_stmt_while();
		}
		DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:299:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 30);
		TraceIn("stmt_for", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal158 = default(IToken);
		IToken char_literal159 = default(IToken);
		IToken char_literal161 = default(IToken);
		IToken char_literal163 = default(IToken);
		IToken string_literal165 = default(IToken);
		IToken char_literal167 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block168 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal158_tree = default(CommonTree);
		CommonTree char_literal159_tree = default(CommonTree);
		CommonTree char_literal161_tree = default(CommonTree);
		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree string_literal165_tree = default(CommonTree);
		CommonTree char_literal167_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(299, 1);
		try
		{
			// SugarCpp.g:304:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:304:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(304, 4);
			string_literal158=(IToken)Match(input,114,Follow._114_in_stmt_for1619);  
			stream_114.Add(string_literal158);

			DebugLocation(304, 10);
			char_literal159=(IToken)Match(input,71,Follow._71_in_stmt_for1621);  
			stream_71.Add(char_literal159);

			DebugLocation(304, 14);
			PushFollow(Follow._expr_in_stmt_for1623);
			expr160=expr();
			PopFollow();

			stream_expr.Add(expr160.Tree);
			DebugLocation(304, 19);
			// SugarCpp.g:304:19: ( ';' expr ';' expr | 'in' expr )
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==91))
			{
				alt59 = 1;
			}
			else if ((LA59_0==118))
			{
				alt59 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:304:20: ';' expr ';' expr
				{
				DebugLocation(304, 20);
				char_literal161=(IToken)Match(input,91,Follow._91_in_stmt_for1626);  
				stream_91.Add(char_literal161);

				DebugLocation(304, 24);
				PushFollow(Follow._expr_in_stmt_for1628);
				expr162=expr();
				PopFollow();

				stream_expr.Add(expr162.Tree);
				DebugLocation(304, 29);
				char_literal163=(IToken)Match(input,91,Follow._91_in_stmt_for1630);  
				stream_91.Add(char_literal163);

				DebugLocation(304, 33);
				PushFollow(Follow._expr_in_stmt_for1632);
				expr164=expr();
				PopFollow();

				stream_expr.Add(expr164.Tree);
				DebugLocation(304, 38);
				type=0;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:304:50: 'in' expr
				{
				DebugLocation(304, 50);
				string_literal165=(IToken)Match(input,118,Follow._118_in_stmt_for1638);  
				stream_118.Add(string_literal165);

				DebugLocation(304, 55);
				PushFollow(Follow._expr_in_stmt_for1640);
				expr166=expr();
				PopFollow();

				stream_expr.Add(expr166.Tree);
				DebugLocation(304, 60);
				type=1;

				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(304, 71);
			char_literal167=(IToken)Match(input,72,Follow._72_in_stmt_for1645);  
			stream_72.Add(char_literal167);

			DebugLocation(304, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1647);
			stmt_block168=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block168.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block, expr, expr, expr, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 305:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(305, 18);
				// SugarCpp.g:305:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(305, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(305, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(305, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(305, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(305, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 306:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(306, 7);
				// SugarCpp.g:306:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(306, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(306, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(306, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(306, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 30);
			LeaveRule("stmt_for", 30);
			LeaveRule_stmt_for();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:309:1: stmt_try : 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 31);
		TraceIn("stmt_try", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal169 = default(IToken);
		IToken string_literal171 = default(IToken);
		IToken char_literal172 = default(IToken);
		IToken char_literal174 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block175 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal169_tree = default(CommonTree);
		CommonTree string_literal171_tree = default(CommonTree);
		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree char_literal174_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(309, 1);
		try
		{
			// SugarCpp.g:310:2: ( 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:310:4: 'try' stmt_block 'catch' '(' expr ')' stmt_block
			{
			DebugLocation(310, 4);
			string_literal169=(IToken)Match(input,125,Follow._125_in_stmt_try1692);  
			stream_125.Add(string_literal169);

			DebugLocation(310, 10);
			PushFollow(Follow._stmt_block_in_stmt_try1694);
			stmt_block170=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block170.Tree);
			DebugLocation(310, 21);
			string_literal171=(IToken)Match(input,109,Follow._109_in_stmt_try1696);  
			stream_109.Add(string_literal171);

			DebugLocation(310, 29);
			char_literal172=(IToken)Match(input,71,Follow._71_in_stmt_try1698);  
			stream_71.Add(char_literal172);

			DebugLocation(310, 33);
			PushFollow(Follow._expr_in_stmt_try1700);
			expr173=expr();
			PopFollow();

			stream_expr.Add(expr173.Tree);
			DebugLocation(310, 38);
			char_literal174=(IToken)Match(input,72,Follow._72_in_stmt_try1702);  
			stream_72.Add(char_literal174);

			DebugLocation(310, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1704);
			stmt_block175=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block175.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 310:53: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(310, 56);
				// SugarCpp.g:310:56: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(310, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(310, 67);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(310, 78);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(310, 83);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 31);
			LeaveRule("stmt_try", 31);
			LeaveRule_stmt_try();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarCpp.g:313:1: linq_item : ( 'select' ident 'from' expr -> ^( Linq_From ident expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) );
	[GrammarRule("linq_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 32);
		TraceIn("linq_item", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal176 = default(IToken);
		IToken string_literal178 = default(IToken);
		IToken string_literal180 = default(IToken);
		IToken char_literal182 = default(IToken);
		IToken string_literal184 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr185 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal176_tree = default(CommonTree);
		CommonTree string_literal178_tree = default(CommonTree);
		CommonTree string_literal180_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree string_literal184_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(313, 1);
		try
		{
			// SugarCpp.g:314:2: ( 'select' ident 'from' expr -> ^( Linq_From ident expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) )
			int alt60=3;
			try { DebugEnterDecision(60, false);
			switch (input.LA(1))
			{
			case 124:
				{
				alt60 = 1;
				}
				break;
			case 119:
				{
				alt60 = 2;
				}
				break;
			case 128:
				{
				alt60 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:4: 'select' ident 'from' expr
				{
				DebugLocation(314, 4);
				string_literal176=(IToken)Match(input,124,Follow._124_in_linq_item1727);  
				stream_124.Add(string_literal176);

				DebugLocation(314, 13);
				PushFollow(Follow._ident_in_linq_item1729);
				ident177=ident();
				PopFollow();

				stream_ident.Add(ident177.Tree);
				DebugLocation(314, 19);
				string_literal178=(IToken)Match(input,115,Follow._115_in_linq_item1731);  
				stream_115.Add(string_literal178);

				DebugLocation(314, 26);
				PushFollow(Follow._expr_in_linq_item1733);
				expr179=expr();
				PopFollow();

				stream_expr.Add(expr179.Tree);


				{
				// AST REWRITE
				// elements: expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 314:31: -> ^( Linq_From ident expr )
				{
					DebugLocation(314, 34);
					// SugarCpp.g:314:34: ^( Linq_From ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(314, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_From, "Linq_From"), root_1);

					DebugLocation(314, 46);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(314, 52);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:315:4: 'let' ident '=' expr
				{
				DebugLocation(315, 4);
				string_literal180=(IToken)Match(input,119,Follow._119_in_linq_item1748);  
				stream_119.Add(string_literal180);

				DebugLocation(315, 10);
				PushFollow(Follow._ident_in_linq_item1750);
				ident181=ident();
				PopFollow();

				stream_ident.Add(ident181.Tree);
				DebugLocation(315, 16);
				char_literal182=(IToken)Match(input,96,Follow._96_in_linq_item1752);  
				stream_96.Add(char_literal182);

				DebugLocation(315, 20);
				PushFollow(Follow._expr_in_linq_item1754);
				expr183=expr();
				PopFollow();

				stream_expr.Add(expr183.Tree);


				{
				// AST REWRITE
				// elements: expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 315:25: -> ^( Linq_Let ident expr )
				{
					DebugLocation(315, 28);
					// SugarCpp.g:315:28: ^( Linq_Let ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(315, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Let, "Linq_Let"), root_1);

					DebugLocation(315, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(315, 45);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:316:4: 'where' expr
				{
				DebugLocation(316, 4);
				string_literal184=(IToken)Match(input,128,Follow._128_in_linq_item1769);  
				stream_128.Add(string_literal184);

				DebugLocation(316, 12);
				PushFollow(Follow._expr_in_linq_item1771);
				expr185=expr();
				PopFollow();

				stream_expr.Add(expr185.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 316:17: -> ^( Linq_Where expr )
				{
					DebugLocation(316, 20);
					// SugarCpp.g:316:20: ^( Linq_Where expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(316, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Where, "Linq_Where"), root_1);

					DebugLocation(316, 33);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_item", 32);
			LeaveRule("linq_item", 32);
			LeaveRule_linq_item();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return retval;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarCpp.g:319:1: linq_prefix : ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 33);
		TraceIn("linq_prefix", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE188 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item187 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_linq_item=new RewriteRuleSubtreeStream(adaptor,"rule linq_item");
		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(319, 1);
		try
		{
			// SugarCpp.g:320:2: ( ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:320:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			{
			DebugLocation(320, 4);
			// SugarCpp.g:320:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			int cnt63=0;
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==119||LA63_0==124||LA63_0==128))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:320:5: linq_item ( linq_item )* ( NEWLINE )+
					{
					DebugLocation(320, 5);
					PushFollow(Follow._linq_item_in_linq_prefix1791);
					linq_item186=linq_item();
					PopFollow();

					stream_linq_item.Add(linq_item186.Tree);
					DebugLocation(320, 15);
					// SugarCpp.g:320:15: ( linq_item )*
					try { DebugEnterSubRule(61);
					while (true)
					{
						int alt61=2;
						try { DebugEnterDecision(61, false);
						int LA61_0 = input.LA(1);

						if ((LA61_0==119||LA61_0==124||LA61_0==128))
						{
							alt61 = 1;
						}


						} finally { DebugExitDecision(61); }
						switch ( alt61 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:320:15: linq_item
							{
							DebugLocation(320, 15);
							PushFollow(Follow._linq_item_in_linq_prefix1793);
							linq_item187=linq_item();
							PopFollow();

							stream_linq_item.Add(linq_item187.Tree);

							}
							break;

						default:
							goto loop61;
						}
					}

					loop61:
						;

					} finally { DebugExitSubRule(61); }

					DebugLocation(320, 26);
					// SugarCpp.g:320:26: ( NEWLINE )+
					int cnt62=0;
					try { DebugEnterSubRule(62);
					while (true)
					{
						int alt62=2;
						try { DebugEnterDecision(62, false);
						int LA62_0 = input.LA(1);

						if ((LA62_0==NEWLINE))
						{
							alt62 = 1;
						}


						} finally { DebugExitDecision(62); }
						switch (alt62)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:320:26: NEWLINE
							{
							DebugLocation(320, 26);
							NEWLINE188=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix1796);  
							stream_NEWLINE.Add(NEWLINE188);


							}
							break;

						default:
							if (cnt62 >= 1)
								goto loop62;

							EarlyExitException eee62 = new EarlyExitException( 62, input );
							DebugRecognitionException(eee62);
							throw eee62;
						}
						cnt62++;
					}
					loop62:
						;

					} finally { DebugExitSubRule(62); }


					}
					break;

				default:
					if (cnt63 >= 1)
						goto loop63;

					EarlyExitException eee63 = new EarlyExitException( 63, input );
					DebugRecognitionException(eee63);
					throw eee63;
				}
				cnt63++;
			}
			loop63:
				;

			} finally { DebugExitSubRule(63); }



			{
			// AST REWRITE
			// elements: linq_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 320:37: -> ^( Linq_Prefix ( linq_item )+ )
			{
				DebugLocation(320, 40);
				// SugarCpp.g:320:40: ^( Linq_Prefix ( linq_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(320, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Prefix, "Linq_Prefix"), root_1);

				DebugLocation(320, 54);
				if (!(stream_linq_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_linq_item.HasNext )
				{
					DebugLocation(320, 54);
					adaptor.AddChild(root_1, stream_linq_item.NextTree());

				}
				stream_linq_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_prefix", 33);
			LeaveRule("linq_prefix", 33);
			LeaveRule_linq_prefix();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return retval;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarCpp.g:323:1: stmt_linq : linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 34);
		TraceIn("stmt_linq", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> linq_prefix189 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_linq_prefix=new RewriteRuleSubtreeStream(adaptor,"rule linq_prefix");
		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(323, 1);
		try
		{
			// SugarCpp.g:324:2: ( linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:324:4: linq_prefix stmt_block
			{
			DebugLocation(324, 4);
			PushFollow(Follow._linq_prefix_in_stmt_linq1819);
			linq_prefix189=linq_prefix();
			PopFollow();

			stream_linq_prefix.Add(linq_prefix189.Tree);
			DebugLocation(324, 16);
			PushFollow(Follow._stmt_block_in_stmt_linq1821);
			stmt_block190=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block190.Tree);


			{
			// AST REWRITE
			// elements: linq_prefix, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 324:27: -> ^( Stmt_Linq linq_prefix stmt_block )
			{
				DebugLocation(324, 30);
				// SugarCpp.g:324:30: ^( Stmt_Linq linq_prefix stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(324, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Linq, "Stmt_Linq"), root_1);

				DebugLocation(324, 42);
				adaptor.AddChild(root_1, stream_linq_prefix.NextTree());
				DebugLocation(324, 54);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_linq", 34);
			LeaveRule("stmt_linq", 34);
			LeaveRule_stmt_linq();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return retval;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:327:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 35);
		TraceIn("ident_list", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal192 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident193 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal192_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(327, 1);
		try
		{
			// SugarCpp.g:328:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:328:4: ident ( ',' ident )*
			{
			DebugLocation(328, 4);
			PushFollow(Follow._ident_in_ident_list1842);
			ident191=ident();
			PopFollow();

			stream_ident.Add(ident191.Tree);
			DebugLocation(328, 10);
			// SugarCpp.g:328:10: ( ',' ident )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==78))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:328:11: ',' ident
					{
					DebugLocation(328, 11);
					char_literal192=(IToken)Match(input,78,Follow._78_in_ident_list1845);  
					stream_78.Add(char_literal192);

					DebugLocation(328, 15);
					PushFollow(Follow._ident_in_ident_list1847);
					ident193=ident();
					PopFollow();

					stream_ident.Add(ident193.Tree);

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 328:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(328, 26);
				// SugarCpp.g:328:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(328, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(328, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(328, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 35);
			LeaveRule("ident_list", 35);
			LeaveRule_ident_list();
		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:331:1: stmt_alloc : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ident ':=' ^ modify_expr );
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 36);
		TraceIn("stmt_alloc", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal195 = default(IToken);
		IToken char_literal197 = default(IToken);
		IToken string_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken char_literal202 = default(IToken);
		IToken string_literal204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr205 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal195_tree = default(CommonTree);
		CommonTree char_literal197_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree char_literal202_tree = default(CommonTree);
		CommonTree string_literal204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(331, 1);
		try
		{
			// SugarCpp.g:332:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ident ':=' ^ modify_expr )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			try
			{
				alt67 = dfa67.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:332:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(332, 4);
				PushFollow(Follow._ident_list_in_stmt_alloc1869);
				ident_list194=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list194.Tree);
				DebugLocation(332, 15);
				char_literal195=(IToken)Match(input,88,Follow._88_in_stmt_alloc1871);  
				stream_88.Add(char_literal195);

				DebugLocation(332, 19);
				PushFollow(Follow._type_name_in_stmt_alloc1873);
				type_name196=type_name();
				PopFollow();

				stream_type_name.Add(type_name196.Tree);
				DebugLocation(332, 29);
				// SugarCpp.g:332:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt66=3;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				switch (input.LA(1))
				{
				case 90:
				case 96:
					{
					alt66 = 1;
					}
					break;
				case 71:
					{
					alt66 = 2;
					}
					break;
				case NEWLINE:
				case 72:
				case 78:
					{
					alt66 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:332:31: ( '=' | ':=' ) expr
					{
					DebugLocation(332, 31);
					// SugarCpp.g:332:31: ( '=' | ':=' )
					int alt65=2;
					try { DebugEnterSubRule(65);
					try { DebugEnterDecision(65, false);
					int LA65_0 = input.LA(1);

					if ((LA65_0==96))
					{
						alt65 = 1;
					}
					else if ((LA65_0==90))
					{
						alt65 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:332:32: '='
						{
						DebugLocation(332, 32);
						char_literal197=(IToken)Match(input,96,Follow._96_in_stmt_alloc1878);  
						stream_96.Add(char_literal197);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:332:38: ':='
						{
						DebugLocation(332, 38);
						string_literal198=(IToken)Match(input,90,Follow._90_in_stmt_alloc1882);  
						stream_90.Add(string_literal198);


						}
						break;

					}
					} finally { DebugExitSubRule(65); }

					DebugLocation(332, 44);
					PushFollow(Follow._expr_in_stmt_alloc1885);
					expr199=expr();
					PopFollow();

					stream_expr.Add(expr199.Tree);


					{
					// AST REWRITE
					// elements: type_name, ident_list, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 332:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(332, 53);
						// SugarCpp.g:332:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(332, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(332, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(332, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(332, 93);
						// SugarCpp.g:332:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(332, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:333:31: '(' expr ')'
					{
					DebugLocation(333, 31);
					char_literal200=(IToken)Match(input,71,Follow._71_in_stmt_alloc1931);  
					stream_71.Add(char_literal200);

					DebugLocation(333, 35);
					PushFollow(Follow._expr_in_stmt_alloc1933);
					expr201=expr();
					PopFollow();

					stream_expr.Add(expr201.Tree);
					DebugLocation(333, 40);
					char_literal202=(IToken)Match(input,72,Follow._72_in_stmt_alloc1935);  
					stream_72.Add(char_literal202);



					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 333:45: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? )
					{
						DebugLocation(333, 48);
						// SugarCpp.g:333:48: ^( Expr_Alloc_Bracket type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(333, 69);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(333, 79);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(333, 90);
						// SugarCpp.g:333:90: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(333, 90);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:334:13: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 334:13: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(334, 16);
						// SugarCpp.g:334:16: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(334, 18);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(334, 35);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(334, 45);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(66); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:336:4: ident ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(336, 4);
				PushFollow(Follow._ident_in_stmt_alloc1988);
				ident203=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident203.Tree);
				DebugLocation(336, 14);
				string_literal204=(IToken)Match(input,90,Follow._90_in_stmt_alloc1990); 
				string_literal204_tree = (CommonTree)adaptor.Create(string_literal204);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal204_tree, root_0);
				DebugLocation(336, 16);
				PushFollow(Follow._modify_expr_in_stmt_alloc1993);
				modify_expr205=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr205.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 36);
			LeaveRule("stmt_alloc", 36);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:339:1: stmt_modify : lvalue ( modify_expr_op ^ cond_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 37);
		TraceIn("stmt_modify", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue206 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr208 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(339, 1);
		try
		{
			// SugarCpp.g:340:2: ( lvalue ( modify_expr_op ^ cond_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:340:4: lvalue ( modify_expr_op ^ cond_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(340, 4);
			PushFollow(Follow._lvalue_in_stmt_modify2004);
			lvalue206=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue206.Tree);
			DebugLocation(340, 11);
			// SugarCpp.g:340:11: ( modify_expr_op ^ cond_expr )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==67||LA68_0==70||LA68_0==74||LA68_0==77||LA68_0==81||LA68_0==87||LA68_0==94||LA68_0==96||LA68_0==102||LA68_0==107||LA68_0==131))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:340:12: modify_expr_op ^ cond_expr
				{
				DebugLocation(340, 26);
				PushFollow(Follow._modify_expr_op_in_stmt_modify2007);
				modify_expr_op207=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op207.Tree, root_0);
				DebugLocation(340, 28);
				PushFollow(Follow._cond_expr_in_stmt_modify2010);
				cond_expr208=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr208.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 37);
			LeaveRule("stmt_modify", 37);
			LeaveRule_stmt_modify();
		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:343:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 38);
		TraceIn("expr", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr209 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(343, 1);
		try
		{
			// SugarCpp.g:344:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:344:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(344, 4);
			PushFollow(Follow._lambda_expr_in_expr2023);
			lambda_expr209=lambda_expr();
			PopFollow();

			adaptor.AddChild(root_0, lambda_expr209.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 38);
			LeaveRule("expr", 38);
			LeaveRule_expr();
		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:347:1: lambda_expr : ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 39);
		TraceIn("lambda_expr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal210 = default(IToken);
		IToken char_literal211 = default(IToken);
		IToken char_literal213 = default(IToken);
		IToken string_literal214 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr216 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal210_tree = default(CommonTree);
		CommonTree char_literal211_tree = default(CommonTree);
		CommonTree char_literal213_tree = default(CommonTree);
		CommonTree string_literal214_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(347, 1);
		try
		{
			// SugarCpp.g:348:2: ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr )
			int alt70=2;
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==104))
			{
				alt70 = 1;
			}
			else if ((LA70_0==IDENT||LA70_0==NUMBER||LA70_0==STRING||LA70_0==64||LA70_0==69||LA70_0==71||LA70_0==73||(LA70_0>=75 && LA70_0<=76)||(LA70_0>=79 && LA70_0<=80)||LA70_0==122||LA70_0==133))
			{
				alt70 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:348:4: '\\\\' '(' ( func_args )? ')' '=>' lambda_expr
				{
				DebugLocation(348, 4);
				char_literal210=(IToken)Match(input,104,Follow._104_in_lambda_expr2034);  
				stream_104.Add(char_literal210);

				DebugLocation(348, 9);
				char_literal211=(IToken)Match(input,71,Follow._71_in_lambda_expr2036);  
				stream_71.Add(char_literal211);

				DebugLocation(348, 13);
				// SugarCpp.g:348:13: ( func_args )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==IDENT))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:348:13: func_args
					{
					DebugLocation(348, 13);
					PushFollow(Follow._func_args_in_lambda_expr2038);
					func_args212=func_args();
					PopFollow();

					stream_func_args.Add(func_args212.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(69); }

				DebugLocation(348, 24);
				char_literal213=(IToken)Match(input,72,Follow._72_in_lambda_expr2041);  
				stream_72.Add(char_literal213);

				DebugLocation(348, 28);
				string_literal214=(IToken)Match(input,98,Follow._98_in_lambda_expr2043);  
				stream_98.Add(string_literal214);

				DebugLocation(348, 33);
				PushFollow(Follow._lambda_expr_in_lambda_expr2045);
				lambda_expr215=lambda_expr();
				PopFollow();

				stream_lambda_expr.Add(lambda_expr215.Tree);


				{
				// AST REWRITE
				// elements: func_args, lambda_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 348:45: -> ^( Expr_Lambda ( func_args )? lambda_expr )
				{
					DebugLocation(348, 48);
					// SugarCpp.g:348:48: ^( Expr_Lambda ( func_args )? lambda_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(348, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(348, 62);
					// SugarCpp.g:348:62: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(348, 62);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(348, 73);
					adaptor.AddChild(root_1, stream_lambda_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:349:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(349, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr2061);
				modify_expr216=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr216.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 39);
			LeaveRule("lambda_expr", 39);
			LeaveRule_lambda_expr();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:352:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 40);
		TraceIn("modify_expr_op", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set217 = default(IToken);

		CommonTree set217_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(352, 92);
		try
		{
			// SugarCpp.g:352:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(352, 15);

			set217=(IToken)input.LT(1);
			if (input.LA(1)==67||input.LA(1)==70||input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==87||input.LA(1)==94||input.LA(1)==96||input.LA(1)==102||input.LA(1)==107||input.LA(1)==131)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set217));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 40);
			LeaveRule("modify_expr_op", 40);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(352, 92);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:353:1: modify_expr : cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 41);
		TraceIn("modify_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set219 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set219_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(353, 1);
		try
		{
			// SugarCpp.g:354:2: ( cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:354:4: cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(354, 4);
			PushFollow(Follow._cond_expr_in_modify_expr2119);
			cond_expr218=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr218.Tree);
			DebugLocation(354, 14);
			// SugarCpp.g:354:14: ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==67||LA71_0==70||LA71_0==74||LA71_0==77||LA71_0==81||LA71_0==87||LA71_0==90||LA71_0==94||LA71_0==96||LA71_0==102||LA71_0==107||LA71_0==131))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:15: ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr
				{
				DebugLocation(354, 99);

				set219=(IToken)input.LT(1);
				set219=(IToken)input.LT(1);
				if (input.LA(1)==67||input.LA(1)==70||input.LA(1)==74||input.LA(1)==77||input.LA(1)==81||input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==96||input.LA(1)==102||input.LA(1)==107||input.LA(1)==131)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set219), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(354, 101);
				PushFollow(Follow._modify_expr_in_modify_expr2171);
				modify_expr220=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr220.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 41);
			LeaveRule("modify_expr", 41);
			LeaveRule_modify_expr();
		}
		DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:357:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 42);
		TraceIn("cond_expr_item", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr221 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(357, 26);
		try
		{
			// SugarCpp.g:357:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:357:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(357, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item2182);
			cond_expr221=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr221.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 42);
			LeaveRule("cond_expr_item", 42);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(357, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:358:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 43);
		TraceIn("cond_expr", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal222 = default(IToken);
		IToken string_literal223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree string_literal223_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(358, 1);
		try
		{
			// SugarCpp.g:359:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:359:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(359, 4);
			// SugarCpp.g:359:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:359:5: a= or_expr
			{
			DebugLocation(359, 6);
			PushFollow(Follow._or_expr_in_cond_expr2194);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 359:15: -> $a
			{
				DebugLocation(359, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(359, 22);
			// SugarCpp.g:359:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==116))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:359:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(359, 23);
				string_literal222=(IToken)Match(input,116,Follow._116_in_cond_expr2203);  
				stream_116.Add(string_literal222);

				DebugLocation(359, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr2207);
				a=cond_expr_item();
				PopFollow();

				stream_cond_expr_item.Add(a.Tree);
				DebugLocation(359, 45);
				string_literal223=(IToken)Match(input,112,Follow._112_in_cond_expr2209);  
				stream_112.Add(string_literal223);

				DebugLocation(359, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr2213);
				b=cond_expr_item();
				PopFollow();

				stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cond_expr, b, a
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 359:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(359, 72);
					// SugarCpp.g:359:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(359, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(359, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(359, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(359, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 43);
			LeaveRule("cond_expr", 43);
			LeaveRule_cond_expr();
		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:362:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 44);
		TraceIn("or_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal224 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal224_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(362, 1);
		try
		{
			// SugarCpp.g:363:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:363:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(363, 4);
			// SugarCpp.g:363:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:363:5: a= and_expr
			{
			DebugLocation(363, 6);
			PushFollow(Follow._and_expr_in_or_expr2244);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 363:16: -> $a
			{
				DebugLocation(363, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(363, 23);
			// SugarCpp.g:363:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==132))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:363:24: '||' b= and_expr
					{
					DebugLocation(363, 24);
					string_literal224=(IToken)Match(input,132,Follow._132_in_or_expr2253);  
					stream_132.Add(string_literal224);

					DebugLocation(363, 30);
					PushFollow(Follow._and_expr_in_or_expr2257);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, 132
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 363:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(363, 43);
						// SugarCpp.g:363:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(363, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(363, 54);
						adaptor.AddChild(root_1, stream_132.NextNode());
						DebugLocation(363, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(363, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 44);
			LeaveRule("or_expr", 44);
			LeaveRule_or_expr();
		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:366:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 45);
		TraceIn("and_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal225 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal225_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(366, 1);
		try
		{
			// SugarCpp.g:367:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:367:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(367, 4);
			// SugarCpp.g:367:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:367:5: a= bit_or
			{
			DebugLocation(367, 6);
			PushFollow(Follow._bit_or_in_and_expr2287);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 367:14: -> $a
			{
				DebugLocation(367, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(367, 21);
			// SugarCpp.g:367:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==68))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:367:22: '&&' b= bit_or
					{
					DebugLocation(367, 22);
					string_literal225=(IToken)Match(input,68,Follow._68_in_and_expr2296);  
					stream_68.Add(string_literal225);

					DebugLocation(367, 28);
					PushFollow(Follow._bit_or_in_and_expr2300);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 68, and_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 367:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(367, 39);
						// SugarCpp.g:367:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(367, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(367, 50);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(367, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(367, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 45);
			LeaveRule("and_expr", 45);
			LeaveRule_and_expr();
		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:370:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 46);
		TraceIn("bit_or", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal226 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(370, 1);
		try
		{
			// SugarCpp.g:371:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:371:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(371, 4);
			// SugarCpp.g:371:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:371:5: a= bit_xor
			{
			DebugLocation(371, 6);
			PushFollow(Follow._bit_xor_in_bit_or2330);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 371:15: -> $a
			{
				DebugLocation(371, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(371, 22);
			// SugarCpp.g:371:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==130))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:371:23: '|' b= bit_xor
					{
					DebugLocation(371, 23);
					char_literal226=(IToken)Match(input,130,Follow._130_in_bit_or2339);  
					stream_130.Add(char_literal226);

					DebugLocation(371, 28);
					PushFollow(Follow._bit_xor_in_bit_or2343);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 130, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 371:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(371, 40);
						// SugarCpp.g:371:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(371, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(371, 51);
						adaptor.AddChild(root_1, stream_130.NextNode());
						DebugLocation(371, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(371, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 46);
			LeaveRule("bit_or", 46);
			LeaveRule_bit_or();
		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:374:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 47);
		TraceIn("bit_xor", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal227 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal227_tree = default(CommonTree);
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(374, 1);
		try
		{
			// SugarCpp.g:375:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:375:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(375, 4);
			// SugarCpp.g:375:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:375:5: a= bit_and
			{
			DebugLocation(375, 6);
			PushFollow(Follow._bit_and_in_bit_xor2373);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 375:15: -> $a
			{
				DebugLocation(375, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(375, 22);
			// SugarCpp.g:375:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==106))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:375:23: '^' b= bit_and
					{
					DebugLocation(375, 23);
					char_literal227=(IToken)Match(input,106,Follow._106_in_bit_xor2382);  
					stream_106.Add(char_literal227);

					DebugLocation(375, 28);
					PushFollow(Follow._bit_and_in_bit_xor2386);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 106, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 375:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(375, 40);
						// SugarCpp.g:375:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(375, 51);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(375, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(375, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 47);
			LeaveRule("bit_xor", 47);
			LeaveRule_bit_xor();
		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:378:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 48);
		TraceIn("bit_and", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal228_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(378, 1);
		try
		{
			// SugarCpp.g:379:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:379:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(379, 4);
			// SugarCpp.g:379:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:379:5: a= cmp_equ_expr
			{
			DebugLocation(379, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and2416);
			a=cmp_equ_expr();
			PopFollow();

			stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 379:20: -> $a
			{
				DebugLocation(379, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(379, 27);
			// SugarCpp.g:379:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==69))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:379:28: '&' b= cmp_equ_expr
					{
					DebugLocation(379, 28);
					char_literal228=(IToken)Match(input,69,Follow._69_in_bit_and2425);  
					stream_69.Add(char_literal228);

					DebugLocation(379, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and2429);
					b=cmp_equ_expr();
					PopFollow();

					stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, b, 69
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 379:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(379, 50);
						// SugarCpp.g:379:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(379, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(379, 61);
						adaptor.AddChild(root_1, stream_69.NextNode());
						DebugLocation(379, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(379, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 48);
			LeaveRule("bit_and", 48);
			LeaveRule_bit_and();
		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:382:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 49);
		TraceIn("cmp_equ_expr_op", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set229 = default(IToken);

		CommonTree set229_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(382, 29);
		try
		{
			// SugarCpp.g:382:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(382, 16);

			set229=(IToken)input.LT(1);
			if (input.LA(1)==65||input.LA(1)==97)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set229));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 49);
			LeaveRule("cmp_equ_expr_op", 49);
			LeaveRule_cmp_equ_expr_op();
		}
		DebugLocation(382, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:383:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 50);
		TraceIn("cmp_equ_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op230 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(383, 1);
		try
		{
			// SugarCpp.g:384:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:384:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			{
			DebugLocation(384, 4);
			// SugarCpp.g:384:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:384:5: a= cmp_expr
			{
			DebugLocation(384, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr2470);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 384:16: -> $a
			{
				DebugLocation(384, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(384, 23);
			// SugarCpp.g:384:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==65||LA78_0==97))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:384:24: cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(384, 24);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr2479);
				cmp_equ_expr_op230=cmp_equ_expr_op();
				PopFollow();

				stream_cmp_equ_expr_op.Add(cmp_equ_expr_op230.Tree);
				DebugLocation(384, 41);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr2483);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_equ_expr, cmp_equ_expr_op, b
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 384:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
				{
					DebugLocation(384, 54);
					// SugarCpp.g:384:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(384, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(384, 65);
					adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
					DebugLocation(384, 82);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(384, 96);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 50);
			LeaveRule("cmp_equ_expr", 50);
			LeaveRule_cmp_equ_expr();
		}
		DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:387:1: cmp_expr : (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= shift_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= shift_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= shift_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 51);
		TraceIn("cmp_expr", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal231 = default(IToken);
		IToken char_literal233 = default(IToken);
		IToken char_literal234 = default(IToken);
		IToken char_literal236 = default(IToken);
		IToken string_literal237 = default(IToken);
		IToken char_literal238 = default(IToken);
		IToken string_literal239 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list235 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal231_tree = default(CommonTree);
		CommonTree char_literal233_tree = default(CommonTree);
		CommonTree char_literal234_tree = default(CommonTree);
		CommonTree char_literal236_tree = default(CommonTree);
		CommonTree string_literal237_tree = default(CommonTree);
		CommonTree char_literal238_tree = default(CommonTree);
		CommonTree string_literal239_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(387, 1);
		try
		{
			// SugarCpp.g:388:2: ( (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= shift_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= shift_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= shift_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:388:4: (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= shift_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= shift_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= shift_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )?
			{
			DebugLocation(388, 4);
			// SugarCpp.g:388:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:388:5: a= shift_expr
			{
			DebugLocation(388, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr2514);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 388:18: -> $a
			{
				DebugLocation(388, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(388, 25);
			// SugarCpp.g:388:25: ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= shift_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= shift_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= shift_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )?
			int alt82=5;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			switch (input.LA(1))
			{
			case 92:
				{
				alt82 = 1;
				}
				break;
			case 95:
				{
				alt82 = 2;
				}
				break;
			case 99:
				{
				alt82 = 3;
				}
				break;
			case 100:
				{
				alt82 = 4;
				}
				break;
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:388:27: '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(388, 27);
				char_literal231=(IToken)Match(input,92,Follow._92_in_cmp_expr2524);  
				stream_92.Add(char_literal231);

				DebugLocation(388, 32);
				PushFollow(Follow._shift_expr_in_cmp_expr2528);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(388, 44);
				// SugarCpp.g:388:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==IDENT||LA81_0==99))
				{
					alt81 = 1;
				}
				else if ((LA81_0==NEWLINE||LA81_0==65||(LA81_0>=67 && LA81_0<=70)||LA81_0==72||LA81_0==74||(LA81_0>=77 && LA81_0<=78)||LA81_0==81||LA81_0==87||(LA81_0>=90 && LA81_0<=91)||LA81_0==94||(LA81_0>=96 && LA81_0<=97)||LA81_0==102||(LA81_0>=105 && LA81_0<=107)||LA81_0==112||LA81_0==116||(LA81_0>=118 && LA81_0<=119)||LA81_0==124||LA81_0==128||(LA81_0>=130 && LA81_0<=132)))
				{
					alt81 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:388:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(388, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(388, 76);
					// SugarCpp.g:388:76: ( ident )*
					try { DebugEnterSubRule(79);
					while (true)
					{
						int alt79=2;
						try { DebugEnterDecision(79, false);
						int LA79_0 = input.LA(1);

						if ((LA79_0==IDENT))
						{
							alt79 = 1;
						}


						} finally { DebugExitDecision(79); }
						switch ( alt79 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:388:76: ident
							{
							DebugLocation(388, 76);
							PushFollow(Follow._ident_in_cmp_expr2534);
							ident232=ident();
							PopFollow();

							stream_ident.Add(ident232.Tree);

							}
							break;

						default:
							goto loop79;
						}
					}

					loop79:
						;

					} finally { DebugExitSubRule(79); }

					DebugLocation(388, 83);
					char_literal233=(IToken)Match(input,99,Follow._99_in_cmp_expr2537);  
					stream_99.Add(char_literal233);

					DebugLocation(388, 87);
					char_literal234=(IToken)Match(input,71,Follow._71_in_cmp_expr2539);  
					stream_71.Add(char_literal234);

					DebugLocation(388, 91);
					// SugarCpp.g:388:91: ( expr_list )?
					int alt80=2;
					try { DebugEnterSubRule(80);
					try { DebugEnterDecision(80, false);
					int LA80_0 = input.LA(1);

					if ((LA80_0==IDENT||LA80_0==NUMBER||LA80_0==STRING||LA80_0==64||LA80_0==69||LA80_0==71||LA80_0==73||(LA80_0>=75 && LA80_0<=76)||(LA80_0>=79 && LA80_0<=80)||LA80_0==104||LA80_0==122||LA80_0==133))
					{
						alt80 = 1;
					}
					} finally { DebugExitDecision(80); }
					switch (alt80)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:388:91: expr_list
						{
						DebugLocation(388, 91);
						PushFollow(Follow._expr_list_in_cmp_expr2541);
						expr_list235=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list235.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(80); }

					DebugLocation(388, 102);
					char_literal236=(IToken)Match(input,72,Follow._72_in_cmp_expr2544);  
					stream_72.Add(char_literal236);



					{
					// AST REWRITE
					// elements: cmp_expr, b, expr_list, ident
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 388:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(388, 109);
						// SugarCpp.g:388:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(388, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(388, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(388, 131);
						// SugarCpp.g:388:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(388, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(388, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(388, 155);
						// SugarCpp.g:388:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(388, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(388, 163);
						// SugarCpp.g:388:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(388, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:389:46: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, b, 92
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 389:46: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(389, 49);
						// SugarCpp.g:389:49: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 51);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(389, 60);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(389, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(389, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(81); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:390:27: '<=' b= shift_expr
				{
				DebugLocation(390, 27);
				string_literal237=(IToken)Match(input,95,Follow._95_in_cmp_expr2654);  
				stream_95.Add(string_literal237);

				DebugLocation(390, 33);
				PushFollow(Follow._shift_expr_in_cmp_expr2658);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_expr, 95, b
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 390:45: -> ^( Expr_Bin '<=' $cmp_expr $b)
				{
					DebugLocation(390, 48);
					// SugarCpp.g:390:48: ^( Expr_Bin '<=' $cmp_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(390, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(390, 59);
					adaptor.AddChild(root_1, stream_95.NextNode());
					DebugLocation(390, 65);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(390, 75);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:391:12: '>' b= shift_expr
				{
				DebugLocation(391, 12);
				char_literal238=(IToken)Match(input,99,Follow._99_in_cmp_expr2685);  
				stream_99.Add(char_literal238);

				DebugLocation(391, 17);
				PushFollow(Follow._shift_expr_in_cmp_expr2689);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, 99, cmp_expr
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 391:29: -> ^( Expr_Bin '>' $cmp_expr $b)
				{
					DebugLocation(391, 32);
					// SugarCpp.g:391:32: ^( Expr_Bin '>' $cmp_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(391, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(391, 43);
					adaptor.AddChild(root_1, stream_99.NextNode());
					DebugLocation(391, 48);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(391, 58);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:392:12: '>=' b= shift_expr
				{
				DebugLocation(392, 12);
				string_literal239=(IToken)Match(input,100,Follow._100_in_cmp_expr2716);  
				stream_100.Add(string_literal239);

				DebugLocation(392, 18);
				PushFollow(Follow._shift_expr_in_cmp_expr2720);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_expr, 100
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 392:30: -> ^( Expr_Bin '>=' $cmp_expr $b)
				{
					DebugLocation(392, 33);
					// SugarCpp.g:392:33: ^( Expr_Bin '>=' $cmp_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(392, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(392, 44);
					adaptor.AddChild(root_1, stream_100.NextNode());
					DebugLocation(392, 50);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(392, 60);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 51);
			LeaveRule("cmp_expr", 51);
			LeaveRule_cmp_expr();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:395:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 52);
		TraceIn("shift_expr_op", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set240 = default(IToken);

		CommonTree set240_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(395, 27);
		try
		{
			// SugarCpp.g:395:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(395, 14);

			set240=(IToken)input.LT(1);
			if (input.LA(1)==93||input.LA(1)==101)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set240));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 52);
			LeaveRule("shift_expr_op", 52);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(395, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:396:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 53);
		TraceIn("shift_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op241 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(396, 1);
		try
		{
			// SugarCpp.g:397:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:397:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(397, 4);
			// SugarCpp.g:397:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:397:5: a= add_expr
			{
			DebugLocation(397, 6);
			PushFollow(Follow._add_expr_in_shift_expr2761);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 397:16: -> $a
			{
				DebugLocation(397, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(397, 23);
			// SugarCpp.g:397:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==93||LA83_0==101))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:397:24: shift_expr_op b= add_expr
					{
					DebugLocation(397, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr2770);
					shift_expr_op241=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op241.Tree);
					DebugLocation(397, 39);
					PushFollow(Follow._add_expr_in_shift_expr2774);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 397:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(397, 52);
						// SugarCpp.g:397:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(397, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(397, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(397, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 53);
			LeaveRule("shift_expr", 53);
			LeaveRule_shift_expr();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:400:1: add_expr : (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 54);
		TraceIn("add_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal242 = default(IToken);
		IToken char_literal243 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal242_tree = default(CommonTree);
		CommonTree char_literal243_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(400, 1);
		try
		{
			// SugarCpp.g:401:2: ( (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:401:4: (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(401, 4);
			// SugarCpp.g:401:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:401:5: a= infix_expr
			{
			DebugLocation(401, 6);
			PushFollow(Follow._infix_expr_in_add_expr2804);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 401:18: -> $a
			{
				DebugLocation(401, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(401, 25);
			// SugarCpp.g:401:25: ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=3;
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==75))
				{
					alt84 = 1;
				}
				else if ((LA84_0==79))
				{
					alt84 = 2;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:401:27: '+' b= infix_expr
					{
					DebugLocation(401, 27);
					char_literal242=(IToken)Match(input,75,Follow._75_in_add_expr2814);  
					stream_75.Add(char_literal242);

					DebugLocation(401, 32);
					PushFollow(Follow._infix_expr_in_add_expr2818);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 75, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 401:44: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(401, 47);
						// SugarCpp.g:401:47: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(401, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(401, 58);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(401, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(401, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:402:12: '-' b= infix_expr
					{
					DebugLocation(402, 12);
					char_literal243=(IToken)Match(input,79,Follow._79_in_add_expr2845);  
					stream_79.Add(char_literal243);

					DebugLocation(402, 17);
					PushFollow(Follow._infix_expr_in_add_expr2849);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 79, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 402:29: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(402, 32);
						// SugarCpp.g:402:32: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(402, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(402, 43);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(402, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(402, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 54);
			LeaveRule("add_expr", 54);
			LeaveRule_add_expr();
		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:406:1: infix_expr : (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 55);
		TraceIn("infix_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(406, 1);
		try
		{
			// SugarCpp.g:407:2: ( (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:407:4: (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(407, 4);
			// SugarCpp.g:407:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:407:5: a= mul_expr
			{
			DebugLocation(407, 6);
			PushFollow(Follow._mul_expr_in_infix_expr2889);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 407:16: -> $a
			{
				DebugLocation(407, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(407, 23);
			// SugarCpp.g:407:23: ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==108))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:407:25: infix_func b= mul_expr
					{
					DebugLocation(407, 25);
					PushFollow(Follow._infix_func_in_infix_expr2899);
					infix_func244=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func244.Tree);
					DebugLocation(407, 37);
					PushFollow(Follow._mul_expr_in_infix_expr2903);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_expr, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 407:48: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(407, 51);
						// SugarCpp.g:407:51: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(407, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(407, 64);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(407, 76);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(407, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 55);
			LeaveRule("infix_expr", 55);
			LeaveRule_infix_expr();
		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:410:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 56);
		TraceIn("mul_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal245 = default(IToken);
		IToken char_literal246 = default(IToken);
		IToken char_literal247 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal245_tree = default(CommonTree);
		CommonTree char_literal246_tree = default(CommonTree);
		CommonTree char_literal247_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(410, 1);
		try
		{
			// SugarCpp.g:411:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:411:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(411, 4);
			// SugarCpp.g:411:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:411:5: a= selector_expr
			{
			DebugLocation(411, 6);
			PushFollow(Follow._selector_expr_in_mul_expr2935);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 411:21: -> $a
			{
				DebugLocation(411, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(411, 28);
			// SugarCpp.g:411:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=4;
				try { DebugEnterDecision(86, false);
				switch (input.LA(1))
				{
				case 73:
					{
					alt86 = 1;
					}
					break;
				case 86:
					{
					alt86 = 2;
					}
					break;
				case 66:
					{
					alt86 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:411:30: '*' b= selector_expr
					{
					DebugLocation(411, 30);
					char_literal245=(IToken)Match(input,73,Follow._73_in_mul_expr2945);  
					stream_73.Add(char_literal245);

					DebugLocation(411, 35);
					PushFollow(Follow._selector_expr_in_mul_expr2949);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 73, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 411:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(411, 53);
						// SugarCpp.g:411:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(411, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(411, 64);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(411, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(411, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:412:15: '/' b= selector_expr
					{
					DebugLocation(412, 15);
					char_literal246=(IToken)Match(input,86,Follow._86_in_mul_expr2979);  
					stream_86.Add(char_literal246);

					DebugLocation(412, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2983);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 86, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 412:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(412, 38);
						// SugarCpp.g:412:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(412, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(412, 49);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(412, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(412, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:413:15: '%' b= selector_expr
					{
					DebugLocation(413, 15);
					char_literal247=(IToken)Match(input,66,Follow._66_in_mul_expr3013);  
					stream_66.Add(char_literal247);

					DebugLocation(413, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3017);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 66, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 413:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(413, 38);
						// SugarCpp.g:413:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(413, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(413, 49);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(413, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(413, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 56);
			LeaveRule("mul_expr", 56);
			LeaveRule_mul_expr();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:417:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 57);
		TraceIn("selector_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal248 = default(IToken);
		IToken string_literal249 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal248_tree = default(CommonTree);
		CommonTree string_literal249_tree = default(CommonTree);
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(417, 1);
		try
		{
			// SugarCpp.g:418:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:418:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(418, 4);
			// SugarCpp.g:418:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:418:5: a= prefix_expr
			{
			DebugLocation(418, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr3060);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 418:19: -> $a
			{
				DebugLocation(418, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(418, 26);
			// SugarCpp.g:418:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=3;
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==83))
				{
					alt87 = 1;
				}
				else if ((LA87_0==85))
				{
					alt87 = 2;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:418:28: '->*' b= ident
					{
					DebugLocation(418, 28);
					string_literal248=(IToken)Match(input,83,Follow._83_in_selector_expr3070);  
					stream_83.Add(string_literal248);

					DebugLocation(418, 35);
					PushFollow(Follow._ident_in_selector_expr3074);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 83, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 418:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(418, 45);
						// SugarCpp.g:418:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(418, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(418, 59);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(418, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(418, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:419:13: '.*' b= ident
					{
					DebugLocation(419, 13);
					string_literal249=(IToken)Match(input,85,Follow._85_in_selector_expr3102);  
					stream_85.Add(string_literal249);

					DebugLocation(419, 20);
					PushFollow(Follow._ident_in_selector_expr3107);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, 85, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 419:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(419, 30);
						// SugarCpp.g:419:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(419, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(419, 44);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(419, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(419, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 57);
			LeaveRule("selector_expr", 57);
			LeaveRule_selector_expr();
		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:423:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 58);
		TraceIn("prefix_expr_op", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set250 = default(IToken);

		CommonTree set250_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(423, 64);
		try
		{
			// SugarCpp.g:423:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(423, 15);

			set250=(IToken)input.LT(1);
			if (input.LA(1)==64||input.LA(1)==69||input.LA(1)==73||(input.LA(1)>=75 && input.LA(1)<=76)||(input.LA(1)>=79 && input.LA(1)<=80)||input.LA(1)==133)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set250));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 58);
			LeaveRule("prefix_expr_op", 58);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(423, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:424:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 59);
		TraceIn("prefix_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal253 = default(IToken);
		IToken char_literal255 = default(IToken);
		IToken char_literal257 = default(IToken);
		IToken char_literal258 = default(IToken);
		IToken char_literal260 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list256 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr261 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal253_tree = default(CommonTree);
		CommonTree char_literal255_tree = default(CommonTree);
		CommonTree char_literal257_tree = default(CommonTree);
		CommonTree char_literal258_tree = default(CommonTree);
		CommonTree char_literal260_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(424, 1);
		try
		{
			// SugarCpp.g:425:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt90=3;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case 64:
			case 69:
			case 73:
			case 75:
			case 76:
			case 79:
			case 80:
			case 133:
				{
				alt90 = 1;
				}
				break;
			case 122:
				{
				alt90 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 71:
				{
				alt90 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:425:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(425, 4);
				// SugarCpp.g:425:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:425:5: prefix_expr_op prefix_expr
				{
				DebugLocation(425, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr3182);
				prefix_expr_op251=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op251.Tree);
				DebugLocation(425, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr3184);
				prefix_expr252=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr252.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 425:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(425, 36);
					// SugarCpp.g:425:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(425, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(425, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(425, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:426:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(426, 4);
				string_literal253=(IToken)Match(input,122,Follow._122_in_prefix_expr3200);  
				stream_122.Add(string_literal253);

				DebugLocation(426, 10);
				PushFollow(Follow._type_name_in_prefix_expr3202);
				type_name254=type_name();
				PopFollow();

				stream_type_name.Add(type_name254.Tree);
				DebugLocation(426, 20);
				// SugarCpp.g:426:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==71))
				{
					alt89 = 1;
				}
				else if ((LA89_0==103))
				{
					alt89 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:426:22: '(' ( expr_list )? ')'
					{
					DebugLocation(426, 22);
					char_literal255=(IToken)Match(input,71,Follow._71_in_prefix_expr3206);  
					stream_71.Add(char_literal255);

					DebugLocation(426, 26);
					// SugarCpp.g:426:26: ( expr_list )?
					int alt88=2;
					try { DebugEnterSubRule(88);
					try { DebugEnterDecision(88, false);
					int LA88_0 = input.LA(1);

					if ((LA88_0==IDENT||LA88_0==NUMBER||LA88_0==STRING||LA88_0==64||LA88_0==69||LA88_0==71||LA88_0==73||(LA88_0>=75 && LA88_0<=76)||(LA88_0>=79 && LA88_0<=80)||LA88_0==104||LA88_0==122||LA88_0==133))
					{
						alt88 = 1;
					}
					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:426:26: expr_list
						{
						DebugLocation(426, 26);
						PushFollow(Follow._expr_list_in_prefix_expr3208);
						expr_list256=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list256.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(88); }

					DebugLocation(426, 37);
					char_literal257=(IToken)Match(input,72,Follow._72_in_prefix_expr3211);  
					stream_72.Add(char_literal257);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 426:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(426, 44);
						// SugarCpp.g:426:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(426, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(426, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(426, 70);
						// SugarCpp.g:426:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(426, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:427:10: '[' expr_list ']'
					{
					DebugLocation(427, 10);
					char_literal258=(IToken)Match(input,103,Follow._103_in_prefix_expr3233);  
					stream_103.Add(char_literal258);

					DebugLocation(427, 14);
					PushFollow(Follow._expr_list_in_prefix_expr3235);
					expr_list259=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list259.Tree);
					DebugLocation(427, 24);
					char_literal260=(IToken)Match(input,105,Follow._105_in_prefix_expr3237);  
					stream_105.Add(char_literal260);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 427:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(427, 31);
						// SugarCpp.g:427:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(427, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(427, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(427, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(89); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:428:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(428, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr3253);
				suffix_expr261=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr261.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 59);
			LeaveRule("prefix_expr", 59);
			LeaveRule_prefix_expr();
		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:431:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 60);
		TraceIn("expr_list", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal263 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr264 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal263_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(431, 1);
		try
		{
			// SugarCpp.g:432:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:432:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(432, 4);
			PushFollow(Follow._expr_in_expr_list3265);
			expr262=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr262.Tree);
			DebugLocation(432, 9);
			// SugarCpp.g:432:9: ( ',' ! expr )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==78))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:432:10: ',' ! expr
					{
					DebugLocation(432, 13);
					char_literal263=(IToken)Match(input,78,Follow._78_in_expr_list3268); 
					DebugLocation(432, 15);
					PushFollow(Follow._expr_in_expr_list3271);
					expr264=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr264.Tree);

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 60);
			LeaveRule("expr_list", 60);
			LeaveRule_expr_list();
		}
		DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:435:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 61);
		TraceIn("suffix_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal265 = default(IToken);
		IToken string_literal266 = default(IToken);
		IToken char_literal267 = default(IToken);
		IToken string_literal269 = default(IToken);
		IToken char_literal271 = default(IToken);
		IToken char_literal273 = default(IToken);
		IToken char_literal274 = default(IToken);
		IToken char_literal276 = default(IToken);
		IToken char_literal277 = default(IToken);
		IToken char_literal279 = default(IToken);
		IToken char_literal281 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident278 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list280 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		CommonTree char_literal267_tree = default(CommonTree);
		CommonTree string_literal269_tree = default(CommonTree);
		CommonTree char_literal271_tree = default(CommonTree);
		CommonTree char_literal273_tree = default(CommonTree);
		CommonTree char_literal274_tree = default(CommonTree);
		CommonTree char_literal276_tree = default(CommonTree);
		CommonTree char_literal277_tree = default(CommonTree);
		CommonTree char_literal279_tree = default(CommonTree);
		CommonTree char_literal281_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(435, 1);
		try
		{
			// SugarCpp.g:436:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:436:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			{
			DebugLocation(436, 4);
			// SugarCpp.g:436:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:436:5: a= atom_expr
			{
			DebugLocation(436, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr3287);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 436:17: -> $a
			{
				DebugLocation(436, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(436, 24);
			// SugarCpp.g:436:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=8;
				try { DebugEnterDecision(95, false);
				switch (input.LA(1))
				{
				case 76:
					{
					alt95 = 1;
					}
					break;
				case 80:
					{
					alt95 = 2;
					}
					break;
				case 84:
					{
					alt95 = 3;
					}
					break;
				case 82:
					{
					alt95 = 4;
					}
					break;
				case 71:
					{
					alt95 = 5;
					}
					break;
				case 103:
					{
					alt95 = 6;
					}
					break;
				case 88:
					{
					alt95 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:436:26: '++'
					{
					DebugLocation(436, 26);
					string_literal265=(IToken)Match(input,76,Follow._76_in_suffix_expr3297);  
					stream_76.Add(string_literal265);



					{
					// AST REWRITE
					// elements: suffix_expr, 76
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 436:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(436, 34);
						// SugarCpp.g:436:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(436, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(436, 48);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(436, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:437:14: '--'
					{
					DebugLocation(437, 14);
					string_literal266=(IToken)Match(input,80,Follow._80_in_suffix_expr3323);  
					stream_80.Add(string_literal266);



					{
					// AST REWRITE
					// elements: suffix_expr, 80
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 437:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(437, 22);
						// SugarCpp.g:437:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(437, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(437, 36);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(437, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:438:11: '.' ident
					{
					DebugLocation(438, 11);
					char_literal267=(IToken)Match(input,84,Follow._84_in_suffix_expr3346);  
					stream_84.Add(char_literal267);

					DebugLocation(438, 15);
					PushFollow(Follow._ident_in_suffix_expr3348);
					ident268=ident();
					PopFollow();

					stream_ident.Add(ident268.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 84
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 438:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(438, 24);
						// SugarCpp.g:438:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(438, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(438, 38);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(438, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(438, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:439:11: '->' ident
					{
					DebugLocation(439, 11);
					string_literal269=(IToken)Match(input,82,Follow._82_in_suffix_expr3373);  
					stream_82.Add(string_literal269);

					DebugLocation(439, 16);
					PushFollow(Follow._ident_in_suffix_expr3375);
					ident270=ident();
					PopFollow();

					stream_ident.Add(ident270.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 82
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 439:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(439, 25);
						// SugarCpp.g:439:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(439, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(439, 39);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(439, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(439, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:440:11: '(' ( expr_list )? ')'
					{
					DebugLocation(440, 11);
					char_literal271=(IToken)Match(input,71,Follow._71_in_suffix_expr3400);  
					stream_71.Add(char_literal271);

					DebugLocation(440, 15);
					// SugarCpp.g:440:15: ( expr_list )?
					int alt92=2;
					try { DebugEnterSubRule(92);
					try { DebugEnterDecision(92, false);
					int LA92_0 = input.LA(1);

					if ((LA92_0==IDENT||LA92_0==NUMBER||LA92_0==STRING||LA92_0==64||LA92_0==69||LA92_0==71||LA92_0==73||(LA92_0>=75 && LA92_0<=76)||(LA92_0>=79 && LA92_0<=80)||LA92_0==104||LA92_0==122||LA92_0==133))
					{
						alt92 = 1;
					}
					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:440:15: expr_list
						{
						DebugLocation(440, 15);
						PushFollow(Follow._expr_list_in_suffix_expr3402);
						expr_list272=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list272.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(92); }

					DebugLocation(440, 26);
					char_literal273=(IToken)Match(input,72,Follow._72_in_suffix_expr3405);  
					stream_72.Add(char_literal273);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 440:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(440, 33);
						// SugarCpp.g:440:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(440, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(440, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(440, 58);
						// SugarCpp.g:440:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(440, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:441:11: '[' ( expr_list )? ']'
					{
					DebugLocation(441, 11);
					char_literal274=(IToken)Match(input,103,Follow._103_in_suffix_expr3429);  
					stream_103.Add(char_literal274);

					DebugLocation(441, 15);
					// SugarCpp.g:441:15: ( expr_list )?
					int alt93=2;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, false);
					int LA93_0 = input.LA(1);

					if ((LA93_0==IDENT||LA93_0==NUMBER||LA93_0==STRING||LA93_0==64||LA93_0==69||LA93_0==71||LA93_0==73||(LA93_0>=75 && LA93_0<=76)||(LA93_0>=79 && LA93_0<=80)||LA93_0==104||LA93_0==122||LA93_0==133))
					{
						alt93 = 1;
					}
					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:441:15: expr_list
						{
						DebugLocation(441, 15);
						PushFollow(Follow._expr_list_in_suffix_expr3431);
						expr_list275=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list275.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(93); }

					DebugLocation(441, 26);
					char_literal276=(IToken)Match(input,105,Follow._105_in_suffix_expr3434);  
					stream_105.Add(char_literal276);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(441, 33);
						// SugarCpp.g:441:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(441, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(441, 58);
						// SugarCpp.g:441:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(441, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:442:11: ':' ident '(' ( expr_list )? ')'
					{
					DebugLocation(442, 11);
					char_literal277=(IToken)Match(input,88,Follow._88_in_suffix_expr3458);  
					stream_88.Add(char_literal277);

					DebugLocation(442, 15);
					PushFollow(Follow._ident_in_suffix_expr3460);
					ident278=ident();
					PopFollow();

					stream_ident.Add(ident278.Tree);
					DebugLocation(442, 21);
					char_literal279=(IToken)Match(input,71,Follow._71_in_suffix_expr3462);  
					stream_71.Add(char_literal279);

					DebugLocation(442, 25);
					// SugarCpp.g:442:25: ( expr_list )?
					int alt94=2;
					try { DebugEnterSubRule(94);
					try { DebugEnterDecision(94, false);
					int LA94_0 = input.LA(1);

					if ((LA94_0==IDENT||LA94_0==NUMBER||LA94_0==STRING||LA94_0==64||LA94_0==69||LA94_0==71||LA94_0==73||(LA94_0>=75 && LA94_0<=76)||(LA94_0>=79 && LA94_0<=80)||LA94_0==104||LA94_0==122||LA94_0==133))
					{
						alt94 = 1;
					}
					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:442:25: expr_list
						{
						DebugLocation(442, 25);
						PushFollow(Follow._expr_list_in_suffix_expr3464);
						expr_list280=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list280.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(94); }

					DebugLocation(442, 36);
					char_literal281=(IToken)Match(input,72,Follow._72_in_suffix_expr3467);  
					stream_72.Add(char_literal281);



					{
					// AST REWRITE
					// elements: ident, suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 442:40: -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
					{
						DebugLocation(442, 43);
						// SugarCpp.g:442:43: ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(442, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(442, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(442, 73);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(442, 79);
						// SugarCpp.g:442:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(442, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 61);
			LeaveRule("suffix_expr", 61);
			LeaveRule_suffix_expr();
		}
		DebugLocation(444, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:446:1: atom_expr : ( NUMBER | ident | STRING | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 62);
		TraceIn("atom_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER282 = default(IToken);
		IToken STRING284 = default(IToken);
		IToken char_literal285 = default(IToken);
		IToken char_literal287 = default(IToken);
		IToken char_literal289 = default(IToken);
		IToken char_literal290 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr286 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr288 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER282_tree = default(CommonTree);
		CommonTree STRING284_tree = default(CommonTree);
		CommonTree char_literal285_tree = default(CommonTree);
		CommonTree char_literal287_tree = default(CommonTree);
		CommonTree char_literal289_tree = default(CommonTree);
		CommonTree char_literal290_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(446, 1);
		try
		{
			// SugarCpp.g:447:2: ( NUMBER | ident | STRING | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt98=4;
			try { DebugEnterDecision(98, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt98 = 1;
				}
				break;
			case IDENT:
				{
				alt98 = 2;
				}
				break;
			case STRING:
				{
				alt98 = 3;
				}
				break;
			case 71:
				{
				alt98 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:447:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(447, 4);
				NUMBER282=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr3506); 
				NUMBER282_tree = (CommonTree)adaptor.Create(NUMBER282);
				adaptor.AddChild(root_0, NUMBER282_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:448:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(448, 4);
				PushFollow(Follow._ident_in_atom_expr3511);
				ident283=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident283.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:449:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(449, 4);
				STRING284=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr3516); 
				STRING284_tree = (CommonTree)adaptor.Create(STRING284);
				adaptor.AddChild(root_0, STRING284_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:450:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(450, 4);
				char_literal285=(IToken)Match(input,71,Follow._71_in_atom_expr3521);  
				stream_71.Add(char_literal285);

				DebugLocation(450, 8);
				PushFollow(Follow._expr_in_atom_expr3523);
				expr286=expr();
				PopFollow();

				stream_expr.Add(expr286.Tree);
				DebugLocation(450, 13);
				// SugarCpp.g:450:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==78))
				{
					alt97 = 1;
				}
				else if ((LA97_0==72))
				{
					alt97 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:450:15: ( ',' expr )+ ')'
					{
					DebugLocation(450, 15);
					// SugarCpp.g:450:15: ( ',' expr )+
					int cnt96=0;
					try { DebugEnterSubRule(96);
					while (true)
					{
						int alt96=2;
						try { DebugEnterDecision(96, false);
						int LA96_0 = input.LA(1);

						if ((LA96_0==78))
						{
							alt96 = 1;
						}


						} finally { DebugExitDecision(96); }
						switch (alt96)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:450:16: ',' expr
							{
							DebugLocation(450, 16);
							char_literal287=(IToken)Match(input,78,Follow._78_in_atom_expr3528);  
							stream_78.Add(char_literal287);

							DebugLocation(450, 20);
							PushFollow(Follow._expr_in_atom_expr3530);
							expr288=expr();
							PopFollow();

							stream_expr.Add(expr288.Tree);

							}
							break;

						default:
							if (cnt96 >= 1)
								goto loop96;

							EarlyExitException eee96 = new EarlyExitException( 96, input );
							DebugRecognitionException(eee96);
							throw eee96;
						}
						cnt96++;
					}
					loop96:
						;

					} finally { DebugExitSubRule(96); }

					DebugLocation(450, 27);
					char_literal289=(IToken)Match(input,72,Follow._72_in_atom_expr3534);  
					stream_72.Add(char_literal289);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 450:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(450, 34);
						// SugarCpp.g:450:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(450, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(450, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(450, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:451:15: ')'
					{
					DebugLocation(451, 15);
					char_literal290=(IToken)Match(input,72,Follow._72_in_atom_expr3559);  
					stream_72.Add(char_literal290);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 451:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(451, 22);
						// SugarCpp.g:451:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(451, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(451, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(97); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 62);
			LeaveRule("atom_expr", 62);
			LeaveRule_atom_expr();
		}
		DebugLocation(453, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:455:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 63);
		TraceIn("lvalue_item", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal291 = default(IToken);
		IToken string_literal292 = default(IToken);
		IToken char_literal293 = default(IToken);
		IToken string_literal295 = default(IToken);
		IToken char_literal298 = default(IToken);
		IToken char_literal300 = default(IToken);
		IToken char_literal301 = default(IToken);
		IToken char_literal303 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident294 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident296 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter297 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list299 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list302 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal291_tree = default(CommonTree);
		CommonTree string_literal292_tree = default(CommonTree);
		CommonTree char_literal293_tree = default(CommonTree);
		CommonTree string_literal295_tree = default(CommonTree);
		CommonTree char_literal298_tree = default(CommonTree);
		CommonTree char_literal300_tree = default(CommonTree);
		CommonTree char_literal301_tree = default(CommonTree);
		CommonTree char_literal303_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(455, 1);
		try
		{
			// SugarCpp.g:456:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:456:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(456, 4);
			// SugarCpp.g:456:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:456:5: a= lvalue_atom
			{
			DebugLocation(456, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item3589);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 456:19: -> $a
			{
				DebugLocation(456, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(456, 26);
			// SugarCpp.g:456:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=7;
				try { DebugEnterDecision(102, false);
				switch (input.LA(1))
				{
				case 76:
					{
					alt102 = 1;
					}
					break;
				case 80:
					{
					alt102 = 2;
					}
					break;
				case 84:
					{
					alt102 = 3;
					}
					break;
				case 82:
					{
					alt102 = 4;
					}
					break;
				case 71:
				case 92:
					{
					alt102 = 5;
					}
					break;
				case 103:
					{
					alt102 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:456:28: '++'
					{
					DebugLocation(456, 28);
					string_literal291=(IToken)Match(input,76,Follow._76_in_lvalue_item3599);  
					stream_76.Add(string_literal291);



					{
					// AST REWRITE
					// elements: lvalue_item, 76
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 456:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(456, 36);
						// SugarCpp.g:456:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(456, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(456, 50);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(456, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:457:16: '--'
					{
					DebugLocation(457, 16);
					string_literal292=(IToken)Match(input,80,Follow._80_in_lvalue_item3627);  
					stream_80.Add(string_literal292);



					{
					// AST REWRITE
					// elements: lvalue_item, 80
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 457:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(457, 24);
						// SugarCpp.g:457:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(457, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(457, 38);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(457, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:458:13: '.' ident
					{
					DebugLocation(458, 13);
					char_literal293=(IToken)Match(input,84,Follow._84_in_lvalue_item3652);  
					stream_84.Add(char_literal293);

					DebugLocation(458, 17);
					PushFollow(Follow._ident_in_lvalue_item3654);
					ident294=ident();
					PopFollow();

					stream_ident.Add(ident294.Tree);


					{
					// AST REWRITE
					// elements: lvalue_item, 84, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 458:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(458, 26);
						// SugarCpp.g:458:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(458, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(458, 40);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(458, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(458, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:459:13: '->' ident
					{
					DebugLocation(459, 13);
					string_literal295=(IToken)Match(input,82,Follow._82_in_lvalue_item3681);  
					stream_82.Add(string_literal295);

					DebugLocation(459, 18);
					PushFollow(Follow._ident_in_lvalue_item3683);
					ident296=ident();
					PopFollow();

					stream_ident.Add(ident296.Tree);


					{
					// AST REWRITE
					// elements: lvalue_item, ident, 82
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 459:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(459, 27);
						// SugarCpp.g:459:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(459, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(459, 41);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(459, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(459, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:460:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(460, 13);
					// SugarCpp.g:460:13: ( generic_parameter )?
					int alt99=2;
					try { DebugEnterSubRule(99);
					try { DebugEnterDecision(99, false);
					int LA99_0 = input.LA(1);

					if ((LA99_0==92))
					{
						alt99 = 1;
					}
					} finally { DebugExitDecision(99); }
					switch (alt99)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:460:13: generic_parameter
						{
						DebugLocation(460, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item3710);
						generic_parameter297=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter297.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(99); }

					DebugLocation(460, 32);
					char_literal298=(IToken)Match(input,71,Follow._71_in_lvalue_item3713);  
					stream_71.Add(char_literal298);

					DebugLocation(460, 36);
					// SugarCpp.g:460:36: ( expr_list )?
					int alt100=2;
					try { DebugEnterSubRule(100);
					try { DebugEnterDecision(100, false);
					int LA100_0 = input.LA(1);

					if ((LA100_0==IDENT||LA100_0==NUMBER||LA100_0==STRING||LA100_0==64||LA100_0==69||LA100_0==71||LA100_0==73||(LA100_0>=75 && LA100_0<=76)||(LA100_0>=79 && LA100_0<=80)||LA100_0==104||LA100_0==122||LA100_0==133))
					{
						alt100 = 1;
					}
					} finally { DebugExitDecision(100); }
					switch (alt100)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:460:36: expr_list
						{
						DebugLocation(460, 36);
						PushFollow(Follow._expr_list_in_lvalue_item3715);
						expr_list299=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list299.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(100); }

					DebugLocation(460, 47);
					char_literal300=(IToken)Match(input,72,Follow._72_in_lvalue_item3718);  
					stream_72.Add(char_literal300);



					{
					// AST REWRITE
					// elements: expr_list, generic_parameter, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 460:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(460, 54);
						// SugarCpp.g:460:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(460, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(460, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(460, 79);
						// SugarCpp.g:460:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(460, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(460, 98);
						// SugarCpp.g:460:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(460, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:461:13: '[' ( expr_list )? ']'
					{
					DebugLocation(461, 13);
					char_literal301=(IToken)Match(input,103,Follow._103_in_lvalue_item3747);  
					stream_103.Add(char_literal301);

					DebugLocation(461, 17);
					// SugarCpp.g:461:17: ( expr_list )?
					int alt101=2;
					try { DebugEnterSubRule(101);
					try { DebugEnterDecision(101, false);
					int LA101_0 = input.LA(1);

					if ((LA101_0==IDENT||LA101_0==NUMBER||LA101_0==STRING||LA101_0==64||LA101_0==69||LA101_0==71||LA101_0==73||(LA101_0>=75 && LA101_0<=76)||(LA101_0>=79 && LA101_0<=80)||LA101_0==104||LA101_0==122||LA101_0==133))
					{
						alt101 = 1;
					}
					} finally { DebugExitDecision(101); }
					switch (alt101)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:461:17: expr_list
						{
						DebugLocation(461, 17);
						PushFollow(Follow._expr_list_in_lvalue_item3749);
						expr_list302=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list302.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(101); }

					DebugLocation(461, 28);
					char_literal303=(IToken)Match(input,105,Follow._105_in_lvalue_item3752);  
					stream_105.Add(char_literal303);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 461:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(461, 35);
						// SugarCpp.g:461:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(461, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(461, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(461, 60);
						// SugarCpp.g:461:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(461, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 63);
			LeaveRule("lvalue_item", 63);
			LeaveRule_lvalue_item();
		}
		DebugLocation(463, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:465:1: lvalue_atom : ident ;
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 64);
		TraceIn("lvalue_atom", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> ident304 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(465, 1);
		try
		{
			// SugarCpp.g:466:2: ( ident )
			DebugEnterAlt(1);
			// SugarCpp.g:466:4: ident
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(466, 4);
			PushFollow(Follow._ident_in_lvalue_atom3791);
			ident304=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident304.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 64);
			LeaveRule("lvalue_atom", 64);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:469:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 65);
		TraceIn("lvalue", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal305 = default(IToken);
		IToken char_literal307 = default(IToken);
		IToken char_literal309 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item306 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item308 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item310 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal305_tree = default(CommonTree);
		CommonTree char_literal307_tree = default(CommonTree);
		CommonTree char_literal309_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(469, 1);
		try
		{
			// SugarCpp.g:470:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt104=2;
			try { DebugEnterDecision(104, false);
			int LA104_0 = input.LA(1);

			if ((LA104_0==71))
			{
				alt104 = 1;
			}
			else if ((LA104_0==IDENT))
			{
				alt104 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:470:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(470, 4);
				char_literal305=(IToken)Match(input,71,Follow._71_in_lvalue3802);  
				stream_71.Add(char_literal305);

				DebugLocation(470, 8);
				PushFollow(Follow._lvalue_item_in_lvalue3804);
				lvalue_item306=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item306.Tree);
				DebugLocation(470, 20);
				// SugarCpp.g:470:20: ( ',' lvalue_item )+
				int cnt103=0;
				try { DebugEnterSubRule(103);
				while (true)
				{
					int alt103=2;
					try { DebugEnterDecision(103, false);
					int LA103_0 = input.LA(1);

					if ((LA103_0==78))
					{
						alt103 = 1;
					}


					} finally { DebugExitDecision(103); }
					switch (alt103)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:470:21: ',' lvalue_item
						{
						DebugLocation(470, 21);
						char_literal307=(IToken)Match(input,78,Follow._78_in_lvalue3807);  
						stream_78.Add(char_literal307);

						DebugLocation(470, 25);
						PushFollow(Follow._lvalue_item_in_lvalue3809);
						lvalue_item308=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item308.Tree);

						}
						break;

					default:
						if (cnt103 >= 1)
							goto loop103;

						EarlyExitException eee103 = new EarlyExitException( 103, input );
						DebugRecognitionException(eee103);
						throw eee103;
					}
					cnt103++;
				}
				loop103:
					;

				} finally { DebugExitSubRule(103); }

				DebugLocation(470, 39);
				char_literal309=(IToken)Match(input,72,Follow._72_in_lvalue3813);  
				stream_72.Add(char_literal309);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 470:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(470, 46);
					// SugarCpp.g:470:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(470, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(470, 60);
					// SugarCpp.g:470:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(470, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:471:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(471, 4);
				PushFollow(Follow._lvalue_item_in_lvalue3827);
				lvalue_item310=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item310.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 65);
			LeaveRule("lvalue", 65);
			LeaveRule_lvalue();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:474:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 66);
		TraceIn("ident", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT311 = default(IToken);
		IToken string_literal312 = default(IToken);
		IToken IDENT313 = default(IToken);

		CommonTree IDENT311_tree = default(CommonTree);
		CommonTree string_literal312_tree = default(CommonTree);
		CommonTree IDENT313_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(474, 1);
		try
		{
			// SugarCpp.g:475:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:475:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(475, 4);
			IDENT311=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3838); 
			IDENT311_tree = (CommonTree)adaptor.Create(IDENT311);
			adaptor.AddChild(root_0, IDENT311_tree);
			DebugLocation(475, 10);
			// SugarCpp.g:475:10: ( '::' IDENT )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==89))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:475:11: '::' IDENT
					{
					DebugLocation(475, 11);
					string_literal312=(IToken)Match(input,89,Follow._89_in_ident3841); 
					string_literal312_tree = (CommonTree)adaptor.Create(string_literal312);
					adaptor.AddChild(root_0, string_literal312_tree);
					DebugLocation(475, 16);
					IDENT313=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3843); 
					IDENT313_tree = (CommonTree)adaptor.Create(IDENT313);
					adaptor.AddChild(root_0, IDENT313_tree);

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 66);
			LeaveRule("ident", 66);
			LeaveRule_ident();
		}
		DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:478:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 67);
		TraceIn("infix_func", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal314 = default(IToken);
		IToken char_literal316 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident315 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal314_tree = default(CommonTree);
		CommonTree char_literal316_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(478, 1);
		try
		{
			// SugarCpp.g:479:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:479:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(479, 7);
			char_literal314=(IToken)Match(input,108,Follow._108_in_infix_func3856); 
			DebugLocation(479, 9);
			PushFollow(Follow._ident_in_infix_func3859);
			ident315=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident315.Tree);
			DebugLocation(479, 18);
			char_literal316=(IToken)Match(input,108,Follow._108_in_infix_func3861); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 67);
			LeaveRule("infix_func", 67);
			LeaveRule_infix_func();
		}
		DebugLocation(480, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA15 dfa15;
	private DFA21 dfa21;
	private DFA34 dfa34;
	private DFA43 dfa43;
	private DFA53 dfa53;
	private DFA67 dfa67;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa15 = new DFA15( this );
		dfa21 = new DFA21( this );
		dfa34 = new DFA34( this );
		dfa43 = new DFA43( this );
		dfa53 = new DFA53( this );
		dfa67 = new DFA67( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x30\xFFFF";
		private const string DFA4_eofS =
			"\x30\xFFFF";
		private const string DFA4_minS =
			"\x3\x1F\x7\xFFFF\x1\x47\x1\x1F\x1\xFFFF\x3\x1F\x1\x2A\x1\x1F\x1\x47\x3"+
			"\x48\x1\x47\x2\x1F\x1\x4E\x3\x1F\x4\x48\x1\x47\x3\x48\x2\x1F\x1\x4E\x1"+
			"\x1F\x5\x48\x1\x1F\x1\x48";
		private const string DFA4_maxS =
			"\x1\x85\x1\x1F\x1\x85\x7\xFFFF\x1\x69\x1\x1F\x1\xFFFF\x1\x1F\x1\x30\x1"+
			"\x1F\x1\x2A\x1\x85\x1\x69\x2\x4E\x1\x59\x1\x69\x1\x85\x1\x30\x1\x69\x2"+
			"\x1F\x1\x30\x2\x4E\x2\x59\x1\x69\x2\x4E\x1\x59\x1\x1F\x1\x30\x1\x69\x1"+
			"\x1F\x1\x59\x2\x4E\x2\x59\x1\x1F\x1\x59";
		private const string DFA4_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x2\xFFFF\x1\x4\x23"+
			"\xFFFF";
		private const string DFA4_specialS =
			"\x30\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x2\x47\xFFFF\x1\x1\x6\xFFFF\x1\x4\x2\xFFFF\x1\x5\x3\xFFFF\x1\x8"+
				"\x3\xFFFF\x1\x9\x4\xFFFF\x1\x7\x1\x6\x5\xFFFF\x1\x3",
				"\x1\xA",
				"\x1\x3\x25\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\xC"+
				"\x9\xFFFF\x1\xC\x1\xB\x1\xC\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x1D\xFFFF"+
				"\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xE\x6\xFFFF\x1\xF\xA\xFFFF\x1\xD\xF\xFFFF\x1\x10",
				"\x1\x11",
				"",
				"\x1\x12",
				"\x1\x15\xB\xFFFF\x1\x13\x4\xFFFF\x1\x14",
				"\x1\x16",
				"\x1\x17",
				"\x1\x3\x25\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\xC"+
				"\x9\xFFFF\x1\xC\x1\xB\x1\xC\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x1D\xFFFF"+
				"\x1\x3",
				"\x1\xE\x6\xFFFF\x1\xF\xA\xFFFF\x1\xD\xF\xFFFF\x1\x10",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x1A",
				"\x1\x1C\x6\xFFFF\x1\xF\xA\xFFFF\x1\x1B\xF\xFFFF\x1\x10",
				"\x1\x2\xA\xFFFF\x1\x17\x3C\xFFFF\x1\x1\x6\xFFFF\x1\x4\x2\xFFFF\x1\x5"+
				"\x13\xFFFF\x1\x3",
				"\x1\x1F\xB\xFFFF\x1\x1D\x4\xFFFF\x1\x1E",
				"\x1\xF\x1A\xFFFF\x1\x10",
				"\x1\x20",
				"\x1\x21",
				"\x1\x24\xB\xFFFF\x1\x22\x4\xFFFF\x1\x23",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x25",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x1A",
				"\x1\x1C\x6\xFFFF\x1\xF\xA\xFFFF\x1\x1B\xF\xFFFF\x1\x10",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x28",
				"\x1\x29",
				"\x1\x2C\xB\xFFFF\x1\x2A\x4\xFFFF\x1\x2B",
				"\x1\xF\x1A\xFFFF\x1\x10",
				"\x1\x2D",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x25",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x2E",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x28",
				"\x1\x2F",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x2E"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "172:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA15 : DFA
	{
		private const string DFA15_eotS =
			"\x2A\xFFFF";
		private const string DFA15_eofS =
			"\x2A\xFFFF";
		private const string DFA15_minS =
			"\x2\x1F\x1\x4E\x1\x47\x1\x1F\x2\xFFFF\x3\x1F\x1\x2A\x1\x4E\x1\x47\x3"+
			"\x48\x1\x47\x2\x1F\x1\x4E\x3\x1F\x4\x48\x1\x47\x3\x48\x2\x1F\x1\x4E\x1"+
			"\x1F\x5\x48\x1\x1F\x1\x48";
		private const string DFA15_maxS =
			"\x1\x67\x1\x1F\x1\x5A\x1\x69\x1\x1F\x2\xFFFF\x1\x1F\x1\x30\x1\x1F\x1"+
			"\x2A\x1\x5A\x1\x69\x2\x4E\x1\x59\x1\x69\x1\x67\x1\x30\x1\x69\x2\x1F\x1"+
			"\x30\x2\x4E\x2\x59\x1\x69\x2\x4E\x1\x59\x1\x1F\x1\x30\x1\x69\x1\x1F\x1"+
			"\x59\x2\x4E\x2\x59\x1\x1F\x1\x59";
		private const string DFA15_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2\x23\xFFFF";
		private const string DFA15_specialS =
			"\x2A\xFFFF}>";
		private static readonly string[] DFA15_transitionS =
			{
				"\x1\x2\x47\xFFFF\x1\x1",
				"\x1\x3",
				"\x1\x5\x9\xFFFF\x1\x5\x1\x4\x1\x6",
				"\x1\x8\x6\xFFFF\x1\x9\xA\xFFFF\x1\x7\xF\xFFFF\x1\xA",
				"\x1\xB",
				"",
				"",
				"\x1\xC",
				"\x1\xF\xB\xFFFF\x1\xD\x4\xFFFF\x1\xE",
				"\x1\x10",
				"\x1\x11",
				"\x1\x5\x9\xFFFF\x1\x5\x1\x4\x1\x6",
				"\x1\x8\x6\xFFFF\x1\x9\xA\xFFFF\x1\x7\xF\xFFFF\x1\xA",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x14",
				"\x1\x16\x6\xFFFF\x1\x9\xA\xFFFF\x1\x15\xF\xFFFF\x1\xA",
				"\x1\x2\xA\xFFFF\x1\x11\x3C\xFFFF\x1\x1",
				"\x1\x19\xB\xFFFF\x1\x17\x4\xFFFF\x1\x18",
				"\x1\x9\x1A\xFFFF\x1\xA",
				"\x1\x1A",
				"\x1\x1B",
				"\x1\x1E\xB\xFFFF\x1\x1C\x4\xFFFF\x1\x1D",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x1F",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x14",
				"\x1\x16\x6\xFFFF\x1\x9\xA\xFFFF\x1\x15\xF\xFFFF\x1\xA",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x22",
				"\x1\x23",
				"\x1\x26\xB\xFFFF\x1\x24\x4\xFFFF\x1\x25",
				"\x1\x9\x1A\xFFFF\x1\xA",
				"\x1\x27",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x1F",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x28",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x22",
				"\x1\x29",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x28"
			};

		private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
		private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
		private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
		private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
		private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
		private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
		private static readonly short[][] DFA15_transition;

		static DFA15()
		{
			int numStates = DFA15_transitionS.Length;
			DFA15_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
			}
		}

		public DFA15( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 15;
			this.eot = DFA15_eot;
			this.eof = DFA15_eof;
			this.min = DFA15_min;
			this.max = DFA15_max;
			this.accept = DFA15_accept;
			this.special = DFA15_special;
			this.transition = DFA15_transition;
		}

		public override string Description { get { return "197:1: global_alloc : ( ( attribute )? ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA21 : DFA
	{
		private const string DFA21_eotS =
			"\x4\xFFFF";
		private const string DFA21_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA21_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA21_maxS =
			"\x1\x2A\x1\x85\x2\xFFFF";
		private const string DFA21_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA21_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA21_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x16\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x3C\xFFFF\x1\x3\x6\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x2\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA21_eot = DFA.UnpackEncodedString(DFA21_eotS);
		private static readonly short[] DFA21_eof = DFA.UnpackEncodedString(DFA21_eofS);
		private static readonly char[] DFA21_min = DFA.UnpackEncodedStringToUnsignedChars(DFA21_minS);
		private static readonly char[] DFA21_max = DFA.UnpackEncodedStringToUnsignedChars(DFA21_maxS);
		private static readonly short[] DFA21_accept = DFA.UnpackEncodedString(DFA21_acceptS);
		private static readonly short[] DFA21_special = DFA.UnpackEncodedString(DFA21_specialS);
		private static readonly short[][] DFA21_transition;

		static DFA21()
		{
			int numStates = DFA21_transitionS.Length;
			DFA21_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA21_transition[i] = DFA.UnpackEncodedString(DFA21_transitionS[i]);
			}
		}

		public DFA21( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 21;
			this.eot = DFA21_eot;
			this.eof = DFA21_eof;
			this.min = DFA21_min;
			this.max = DFA21_max;
			this.accept = DFA21_accept;
			this.special = DFA21_special;
			this.transition = DFA21_transition;
		}

		public override string Description { get { return "214:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\x4\xFFFF";
		private const string DFA34_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA34_minS =
			"\x1\x2A\x1\x8\x2\xFFFF";
		private const string DFA34_maxS =
			"\x1\x2A\x1\x85\x2\xFFFF";
		private const string DFA34_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA34_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x16\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x3C\xFFFF\x1\x3\x6\xFFFF"+
				"\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x2\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "226:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA43 : DFA
	{
		private const string DFA43_eotS =
			"\xF\xFFFF";
		private const string DFA43_eofS =
			"\xF\xFFFF";
		private const string DFA43_minS =
			"\x2\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x1\x1F\x1\x45\x3\x1F\x2\x45\x1\x1F\x1"+
			"\x45";
		private const string DFA43_maxS =
			"\x2\x85\x1\xFFFF\x1\x1F\x1\x63\x1\xFFFF\x1\x85\x1\x67\x2\x1F\x1\x85\x2"+
			"\x67\x1\x1F\x1\x67";
		private const string DFA43_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x1\x9\xFFFF";
		private const string DFA43_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA43_transitionS =
			{
				"\x1\x1\x65\xFFFF\x1\x2",
				"\x1\x5\x25\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\xF\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x4\xA\xFFFF\x1\x5\x1D\xFFFF\x1\x5",
				"",
				"\x1\x6",
				"\x1\x7\x43\xFFFF\x1\x5",
				"",
				"\x1\x5\x25\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\xF\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x4\xA\xFFFF\x1\x5\x1D\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\xB",
				"\x1\xC",
				"\x1\x5\x25\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\x1D\xFFFF\x1\x5"+
				"\x1D\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\xE",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5"
			};

		private static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
		private static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
		private static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
		private static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
		private static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
		private static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
		private static readonly short[][] DFA43_transition;

		static DFA43()
		{
			int numStates = DFA43_transitionS.Length;
			DFA43_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA43_transition[i] = DFA.UnpackEncodedString(DFA43_transitionS[i]);
			}
		}

		public DFA43( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}

		public override string Description { get { return "247:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\x9\xFFFF";
		private const string DFA53_eofS =
			"\x9\xFFFF";
		private const string DFA53_minS =
			"\x1\x1F\x1\x2A\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x2A";
		private const string DFA53_maxS =
			"\x1\x7F\x1\x83\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x83";
		private const string DFA53_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA53_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x1\x27\xFFFF\x1\x5\x33\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\x3",
				"\x1\x5\x18\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x2\x5\x3\xFFFF"+
				"\x1\x5\x17\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x18\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x2\x5\x3\xFFFF"+
				"\x1\x5\x17\xFFFF\x1\x5"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "265:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA67 : DFA
	{
		private const string DFA67_eotS =
			"\x6\xFFFF";
		private const string DFA67_eofS =
			"\x6\xFFFF";
		private const string DFA67_minS =
			"\x1\x1F\x1\x4E\x1\x1F\x2\xFFFF\x1\x4E";
		private const string DFA67_maxS =
			"\x1\x1F\x1\x5A\x1\x1F\x2\xFFFF\x1\x5A";
		private const string DFA67_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA67_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA67_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x9\xFFFF\x1\x3\x1\x2\x1\x4",
				"\x1\x5",
				"",
				"",
				"\x1\x3\x9\xFFFF\x1\x3\x1\x2\x1\x4"
			};

		private static readonly short[] DFA67_eot = DFA.UnpackEncodedString(DFA67_eotS);
		private static readonly short[] DFA67_eof = DFA.UnpackEncodedString(DFA67_eofS);
		private static readonly char[] DFA67_min = DFA.UnpackEncodedStringToUnsignedChars(DFA67_minS);
		private static readonly char[] DFA67_max = DFA.UnpackEncodedStringToUnsignedChars(DFA67_maxS);
		private static readonly short[] DFA67_accept = DFA.UnpackEncodedString(DFA67_acceptS);
		private static readonly short[] DFA67_special = DFA.UnpackEncodedString(DFA67_specialS);
		private static readonly short[][] DFA67_transition;

		static DFA67()
		{
			int numStates = DFA67_transitionS.Length;
			DFA67_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA67_transition[i] = DFA.UnpackEncodedString(DFA67_transitionS[i]);
			}
		}

		public DFA67( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 67;
			this.eot = DFA67_eot;
			this.eof = DFA67_eof;
			this.min = DFA67_min;
			this.max = DFA67_max;
			this.accept = DFA67_accept;
			this.special = DFA67_special;
			this.transition = DFA67_transition;
		}

		public override string Description { get { return "331:1: stmt_alloc : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' expr ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ident ':=' ^ modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root455 = new BitSet(new ulong[]{0x40080000000UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _global_block_in_root458 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block480 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block482 = new BitSet(new ulong[]{0x40080000002UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _func_def_in_node505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item573 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _71_in_attribute_item576 = new BitSet(new ulong[]{0x1080080000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item578 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_attribute_item581 = new BitSet(new ulong[]{0x1080080000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item583 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_attribute_item587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_attribute612 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _attribute_item_in_attribute614 = new BitSet(new ulong[]{0x0UL,0x20000004000UL});
		public static readonly BitSet _78_in_attribute617 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _attribute_item_in_attribute619 = new BitSet(new ulong[]{0x0UL,0x20000004000UL});
		public static readonly BitSet _105_in_attribute623 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute625 = new BitSet(new ulong[]{0x40000000002UL,0x8000000000UL});
		public static readonly BitSet _attribute_in_global_alloc644 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_list_in_global_alloc647 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_global_alloc649 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_global_alloc651 = new BitSet(new ulong[]{0x2UL,0x104000080UL});
		public static readonly BitSet _96_in_global_alloc656 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _90_in_global_alloc660 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_global_alloc663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_global_alloc722 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_global_alloc724 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_global_alloc726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_global_alloc788 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_global_alloc791 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_global_alloc793 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _modify_expr_in_global_alloc795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_import_def841 = new BitSet(new ulong[]{0x1040000000002UL});
		public static readonly BitSet _STRING_in_import_def843 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def847 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_import_def850 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def852 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _STRING_in_import_def857 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def859 = new BitSet(new ulong[]{0x1040000000100UL});
		public static readonly BitSet _DEDENT_in_import_def864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def886 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_enum_def889 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def891 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_enum_def893 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _ident_in_enum_def896 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_enum_def899 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def901 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _121_in_namespace_def934 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_namespace_def936 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def938 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_namespace_def941 = new BitSet(new ulong[]{0x40080000100UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_namespace_def943 = new BitSet(new ulong[]{0x40080000100UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _global_block_in_namespace_def946 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def970 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_class_def973 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def975 = new BitSet(new ulong[]{0x40000000002UL,0x11000080UL});
		public static readonly BitSet _generic_parameter_in_class_def978 = new BitSet(new ulong[]{0x40000000002UL,0x1000080UL});
		public static readonly BitSet _71_in_class_def983 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _func_args_in_class_def985 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_class_def987 = new BitSet(new ulong[]{0x40000000002UL,0x1000000UL});
		public static readonly BitSet _88_in_class_def992 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def994 = new BitSet(new ulong[]{0x40000000002UL,0x4000UL});
		public static readonly BitSet _78_in_class_def997 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def999 = new BitSet(new ulong[]{0x40000000002UL,0x4000UL});
		public static readonly BitSet _NEWLINE_in_class_def1006 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _INDENT_in_class_def1009 = new BitSet(new ulong[]{0x40080000100UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_class_def1011 = new BitSet(new ulong[]{0x40080000100UL,0xC222408000000000UL,0x20UL});
		public static readonly BitSet _global_block_in_class_def1014 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_type_name_op1057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_type_name_op1061 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_type_name_op1063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_type_name_op1067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_type_name1076 = new BitSet(new ulong[]{0x2UL,0x8010000220UL});
		public static readonly BitSet _92_in_type_name1079 = new BitSet(new ulong[]{0x80000000UL,0x800000000UL});
		public static readonly BitSet _type_name_in_type_name1082 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _78_in_type_name1085 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_type_name1087 = new BitSet(new ulong[]{0x0UL,0x800004000UL});
		public static readonly BitSet _99_in_type_name1093 = new BitSet(new ulong[]{0x2UL,0x8000000220UL});
		public static readonly BitSet _type_name_op_in_type_name1097 = new BitSet(new ulong[]{0x2UL,0x8000000220UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1131 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_generic_parameter_inside1134 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1136 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _92_in_generic_parameter1158 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1160 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_generic_parameter1162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_func_args1177 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_func_args1180 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args1182 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _attribute_in_func_def1204 = new BitSet(new ulong[]{0x80000000UL,0x0UL,0x20UL});
		public static readonly BitSet _type_name_in_func_def1207 = new BitSet(new ulong[]{0x80000000UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_func_def1210 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_func_def1213 = new BitSet(new ulong[]{0x0UL,0x10000080UL});
		public static readonly BitSet _generic_parameter_in_func_def1215 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_func_def1218 = new BitSet(new ulong[]{0x80000000UL,0x100UL});
		public static readonly BitSet _func_args_in_func_def1220 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_func_def1223 = new BitSet(new ulong[]{0x40000000000UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1226 = new BitSet(new ulong[]{0x40100000000UL});
		public static readonly BitSet _stmt_block_in_func_def1229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_func_def1278 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_func_def1280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1321 = new BitSet(new ulong[]{0x40080000100UL,0xF994800000000080UL,0x3UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1323 = new BitSet(new ulong[]{0x40080000100UL,0xF994800000000080UL,0x3UL});
		public static readonly BitSet _stmt_in_stmt_block1328 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1330 = new BitSet(new ulong[]{0x40080000100UL,0xF994800000000080UL,0x3UL});
		public static readonly BitSet _DEDENT_in_stmt_block1335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr1396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr1401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr1416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_stmt_defer1427 = new BitSet(new ulong[]{0x80000000UL,0xF994800000000080UL,0x3UL});
		public static readonly BitSet _stmt_in_stmt_defer1429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_stmt_typedef1448 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1450 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_stmt_typedef1452 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_stmt_using_item1477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_stmt_using1485 = new BitSet(new ulong[]{0x80000002UL,0x200000000000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1487 = new BitSet(new ulong[]{0x80000002UL,0x200000000000000UL});
		public static readonly BitSet _123_in_stmt_return1508 = new BitSet(new ulong[]{0x1080080000002UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_return1510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_if1531 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stmt_if1533 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_if1535 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_if1537 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1539 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_stmt_if1542 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_while1570 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stmt_while1572 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_while1574 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_while1576 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_stmt_while1593 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_stmt_for1619 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stmt_for1621 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_for1623 = new BitSet(new ulong[]{0x0UL,0x40000008000000UL});
		public static readonly BitSet _91_in_stmt_for1626 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_for1628 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_stmt_for1630 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_for1632 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _118_in_stmt_for1638 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_for1640 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_for1645 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_stmt_try1692 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1694 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_stmt_try1696 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_stmt_try1698 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_try1700 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_try1702 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_linq_item1727 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_linq_item1729 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_linq_item1731 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_linq_item1733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_linq_item1748 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_linq_item1750 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_linq_item1752 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_linq_item1754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_linq_item1769 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_linq_item1771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _linq_item_in_linq_prefix1791 = new BitSet(new ulong[]{0x40000000000UL,0x1080000000000000UL,0x1UL});
		public static readonly BitSet _linq_item_in_linq_prefix1793 = new BitSet(new ulong[]{0x40000000000UL,0x1080000000000000UL,0x1UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix1796 = new BitSet(new ulong[]{0x40000000002UL,0x1080000000000000UL,0x1UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq1819 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq1821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list1842 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_ident_list1845 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_ident_list1847 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc1869 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_stmt_alloc1871 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_stmt_alloc1873 = new BitSet(new ulong[]{0x2UL,0x104000080UL});
		public static readonly BitSet _96_in_stmt_alloc1878 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _90_in_stmt_alloc1882 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_alloc1885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_stmt_alloc1931 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_stmt_alloc1933 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_stmt_alloc1935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_alloc1988 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_stmt_alloc1990 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc1993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify2004 = new BitSet(new ulong[]{0x2UL,0x84140822448UL,0x8UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify2007 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _cond_expr_in_stmt_modify2010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_lambda_expr2034 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_lambda_expr2036 = new BitSet(new ulong[]{0x80000000UL,0x100UL});
		public static readonly BitSet _func_args_in_lambda_expr2038 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_lambda_expr2041 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_lambda_expr2043 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _lambda_expr_in_lambda_expr2045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr2061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr2119 = new BitSet(new ulong[]{0x2UL,0x84144822448UL,0x8UL});
		public static readonly BitSet _set_in_modify_expr2122 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _modify_expr_in_modify_expr2171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item2182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr2194 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _116_in_cond_expr2203 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2207 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_cond_expr2209 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr2244 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_or_expr2253 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _and_expr_in_or_expr2257 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _bit_or_in_and_expr2287 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _68_in_and_expr2296 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _bit_or_in_and_expr2300 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _bit_xor_in_bit_or2330 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_bit_or2339 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _bit_xor_in_bit_or2343 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _bit_and_in_bit_xor2373 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _106_in_bit_xor2382 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _bit_and_in_bit_xor2386 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2416 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_bit_and2425 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and2429 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2470 = new BitSet(new ulong[]{0x2UL,0x200000002UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr2479 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_cmp_expr2514 = new BitSet(new ulong[]{0x2UL,0x1890000000UL});
		public static readonly BitSet _92_in_cmp_expr2524 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _shift_expr_in_cmp_expr2528 = new BitSet(new ulong[]{0x80000002UL,0x800000000UL});
		public static readonly BitSet _ident_in_cmp_expr2534 = new BitSet(new ulong[]{0x80000000UL,0x800000000UL});
		public static readonly BitSet _99_in_cmp_expr2537 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_cmp_expr2539 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019BA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_cmp_expr2541 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_cmp_expr2544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_cmp_expr2654 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _shift_expr_in_cmp_expr2658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_cmp_expr2685 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _shift_expr_in_cmp_expr2689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_cmp_expr2716 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _shift_expr_in_cmp_expr2720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr2761 = new BitSet(new ulong[]{0x2UL,0x2020000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr2770 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _add_expr_in_shift_expr2774 = new BitSet(new ulong[]{0x2UL,0x2020000000UL});
		public static readonly BitSet _infix_expr_in_add_expr2804 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _75_in_add_expr2814 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _infix_expr_in_add_expr2818 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _79_in_add_expr2845 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _infix_expr_in_add_expr2849 = new BitSet(new ulong[]{0x2UL,0x8800UL});
		public static readonly BitSet _mul_expr_in_infix_expr2889 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr2899 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _mul_expr_in_infix_expr2903 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _selector_expr_in_mul_expr2935 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _73_in_mul_expr2945 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _selector_expr_in_mul_expr2949 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _86_in_mul_expr2979 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _selector_expr_in_mul_expr2983 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _66_in_mul_expr3013 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _selector_expr_in_mul_expr3017 = new BitSet(new ulong[]{0x2UL,0x400204UL});
		public static readonly BitSet _prefix_expr_in_selector_expr3060 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _83_in_selector_expr3070 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_selector_expr3074 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _85_in_selector_expr3102 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_selector_expr3107 = new BitSet(new ulong[]{0x2UL,0x280000UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr3182 = new BitSet(new ulong[]{0x1080080000000UL,0x400000000019AA1UL,0x20UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr3184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_prefix_expr3200 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_prefix_expr3202 = new BitSet(new ulong[]{0x0UL,0x8000000080UL});
		public static readonly BitSet _71_in_prefix_expr3206 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019BA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_prefix_expr3208 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_prefix_expr3211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_prefix_expr3233 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_prefix_expr3235 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_prefix_expr3237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr3253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list3265 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _78_in_expr_list3268 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_expr_list3271 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr3287 = new BitSet(new ulong[]{0x2UL,0x8001151080UL});
		public static readonly BitSet _76_in_suffix_expr3297 = new BitSet(new ulong[]{0x2UL,0x8001151080UL});
		public static readonly BitSet _80_in_suffix_expr3323 = new BitSet(new ulong[]{0x2UL,0x8001151080UL});
		public static readonly BitSet _84_in_suffix_expr3346 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr3348 = new BitSet(new ulong[]{0x2UL,0x8001151080UL});
		public static readonly BitSet _82_in_suffix_expr3373 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr3375 = new BitSet(new ulong[]{0x2UL,0x8001151080UL});
		public static readonly BitSet _71_in_suffix_expr3400 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019BA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_suffix_expr3402 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_suffix_expr3405 = new BitSet(new ulong[]{0x2UL,0x8001151080UL});
		public static readonly BitSet _103_in_suffix_expr3429 = new BitSet(new ulong[]{0x1080080000000UL,0x400030000019AA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_suffix_expr3431 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_suffix_expr3434 = new BitSet(new ulong[]{0x2UL,0x8001151080UL});
		public static readonly BitSet _88_in_suffix_expr3458 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr3460 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_suffix_expr3462 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019BA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_suffix_expr3464 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_suffix_expr3467 = new BitSet(new ulong[]{0x2UL,0x8001151080UL});
		public static readonly BitSet _NUMBER_in_atom_expr3506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr3511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr3516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_atom_expr3521 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_atom_expr3523 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _78_in_atom_expr3528 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019AA1UL,0x20UL});
		public static readonly BitSet _expr_in_atom_expr3530 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_atom_expr3534 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_atom_expr3559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item3589 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _76_in_lvalue_item3599 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _80_in_lvalue_item3627 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _84_in_lvalue_item3652 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_lvalue_item3654 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _82_in_lvalue_item3681 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_lvalue_item3683 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item3710 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _71_in_lvalue_item3713 = new BitSet(new ulong[]{0x1080080000000UL,0x400010000019BA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_lvalue_item3715 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _72_in_lvalue_item3718 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _103_in_lvalue_item3747 = new BitSet(new ulong[]{0x1080080000000UL,0x400030000019AA1UL,0x20UL});
		public static readonly BitSet _expr_list_in_lvalue_item3749 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_lvalue_item3752 = new BitSet(new ulong[]{0x2UL,0x8010151080UL});
		public static readonly BitSet _ident_in_lvalue_atom3791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_lvalue3802 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue3804 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_lvalue3807 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue3809 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _72_in_lvalue3813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue3827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident3838 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_ident3841 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident3843 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _108_in_infix_func3856 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_infix_func3859 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_infix_func3861 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
