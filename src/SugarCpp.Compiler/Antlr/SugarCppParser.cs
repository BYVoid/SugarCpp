//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-02 13:23:02

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'in'", "'namespace'", "'new'", "'return'", "'try'", "'typedef'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc=12;
	public const int Expr_Bin=13;
	public const int Expr_Bracket=14;
	public const int Expr_Call=15;
	public const int Expr_Call_With=16;
	public const int Expr_Cond=17;
	public const int Expr_Dict=18;
	public const int Expr_Infix=19;
	public const int Expr_Lambda=20;
	public const int Expr_New_Array=21;
	public const int Expr_New_Type=22;
	public const int Expr_Prefix=23;
	public const int Expr_Return=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int IDENT=29;
	public const int INDENT=30;
	public const int Ident_List=31;
	public const int Import=32;
	public const int Left_Bracket=33;
	public const int LineComment=34;
	public const int Match_Tuple=35;
	public const int NEWLINE=36;
	public const int NUMBER=37;
	public const int Namespace=38;
	public const int Right_Bracket=39;
	public const int Root=40;
	public const int SP=41;
	public const int STRING=42;
	public const int Stmt_Block=43;
	public const int Stmt_For=44;
	public const int Stmt_ForEach=45;
	public const int Stmt_If=46;
	public const int Stmt_Try=47;
	public const int Stmt_Typedef=48;
	public const int Stmt_Using=49;
	public const int Stmt_While=50;
	public const int Type_IDENT=51;
	public const int Type_Ref=52;
	public const int Type_Tuple=53;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[197+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:146:8: public root : overall_block ( NEWLINE )* EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int root_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE2 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE2_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(146, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// SugarCpp.g:147:2: ( overall_block ( NEWLINE )* EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:147:4: overall_block ( NEWLINE )* EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(147, 4);
			PushFollow(Follow._overall_block_in_root400);
			overall_block1=overall_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, overall_block1.Tree);
			DebugLocation(147, 19);
			// SugarCpp.g:147:19: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:147:19: NEWLINE
					{
					DebugLocation(147, 19);
					NEWLINE2=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root403); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NEWLINE2_tree = (CommonTree)adaptor.Create(NEWLINE2);
					adaptor.AddChild(root_0, NEWLINE2_tree);
					}

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(147, 28);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root406); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF3_tree = (CommonTree)adaptor.Create(EOF3);
			adaptor.AddChild(root_0, EOF3_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
			if (state.backtracking > 0) { Memoize(input, 1, root_StartIndex); }

		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_overall_block();
	partial void LeaveRule_overall_block();

	// $ANTLR start "overall_block"
	// SugarCpp.g:150:1: overall_block : ( ( NEWLINE )* node )+ ;
	[GrammarRule("overall_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> overall_block()
	{
		EnterRule_overall_block();
		EnterRule("overall_block", 2);
		TraceIn("overall_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int overall_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE4 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE4_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "overall_block");
		DebugLocation(150, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// SugarCpp.g:151:2: ( ( ( NEWLINE )* node )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:151:4: ( ( NEWLINE )* node )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(151, 4);
			// SugarCpp.g:151:4: ( ( NEWLINE )* node )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:151:5: ( NEWLINE )* node
					{
					DebugLocation(151, 5);
					// SugarCpp.g:151:5: ( NEWLINE )*
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch ( alt2 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:151:5: NEWLINE
							{
							DebugLocation(151, 5);
							NEWLINE4=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_overall_block418); if (state.failed) return retval;
							if (state.backtracking == 0) {
							NEWLINE4_tree = (CommonTree)adaptor.Create(NEWLINE4);
							adaptor.AddChild(root_0, NEWLINE4_tree);
							}

							}
							break;

						default:
							goto loop2;
						}
					}

					loop2:
						;

					} finally { DebugExitSubRule(2); }

					DebugLocation(151, 14);
					PushFollow(Follow._node_in_overall_block421);
					node5=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, node5.Tree);

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overall_block", 2);
			LeaveRule("overall_block", 2);
			LeaveRule_overall_block();
			if (state.backtracking > 0) { Memoize(input, 2, overall_block_StartIndex); }

		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "overall_block"); }
		return retval;

	}
	// $ANTLR end "overall_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:154:1: node : ( func_def | import_def | enum_def | class_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(154, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// SugarCpp.g:155:2: ( func_def | import_def | enum_def | class_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:155:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(155, 4);
				PushFollow(Follow._func_def_in_node434);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:156:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(156, 4);
				PushFollow(Follow._import_def_in_node439);
				import_def7=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:157:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 4);
				PushFollow(Follow._enum_def_in_node444);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:158:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(158, 4);
				PushFollow(Follow._class_def_in_node449);
				class_def9=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:159:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._namespace_def_in_node454);
				namespace_def10=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:160:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._stmt_alloc_in_node459);
				stmt_alloc11=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:161:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._stmt_using_in_node464);
				stmt_using12=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:162:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._stmt_typedef_in_node469);
				stmt_typedef13=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
			if (state.backtracking > 0) { Memoize(input, 3, node_StartIndex); }

		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:165:1: import_def : 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 4);
		TraceIn("import_def", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int import_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal14 = default(IToken);
		IToken STRING15 = default(IToken);
		IToken INDENT16 = default(IToken);
		IToken NEWLINE17 = default(IToken);
		IToken STRING18 = default(IToken);
		IToken NEWLINE19 = default(IToken);
		IToken DEDENT20 = default(IToken);

		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		CommonTree INDENT16_tree = default(CommonTree);
		CommonTree NEWLINE17_tree = default(CommonTree);
		CommonTree STRING18_tree = default(CommonTree);
		CommonTree NEWLINE19_tree = default(CommonTree);
		CommonTree DEDENT20_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(165, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// SugarCpp.g:166:2: ( 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:166:4: 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			{
			DebugLocation(166, 4);
			string_literal14=(IToken)Match(input,104,Follow._104_in_import_def480); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_104.Add(string_literal14);

			DebugLocation(166, 13);
			// SugarCpp.g:166:13: ( STRING )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==STRING))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:166:13: STRING
				{
				DebugLocation(166, 13);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_import_def482); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING15);


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(166, 21);
			// SugarCpp.g:166:21: ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==INDENT))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:166:22: INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT
				{
				DebugLocation(166, 22);
				INDENT16=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def486); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT16);

				DebugLocation(166, 29);
				// SugarCpp.g:166:29: ( ( NEWLINE )+ STRING )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					try
					{
						alt7 = dfa7.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:166:30: ( NEWLINE )+ STRING
						{
						DebugLocation(166, 30);
						// SugarCpp.g:166:30: ( NEWLINE )+
						int cnt6=0;
						try { DebugEnterSubRule(6);
						while (true)
						{
							int alt6=2;
							try { DebugEnterDecision(6, false);
							int LA6_0 = input.LA(1);

							if ((LA6_0==NEWLINE))
							{
								alt6 = 1;
							}


							} finally { DebugExitDecision(6); }
							switch (alt6)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:166:30: NEWLINE
								{
								DebugLocation(166, 30);
								NEWLINE17=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def489); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE17);


								}
								break;

							default:
								if (cnt6 >= 1)
									goto loop6;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee6 = new EarlyExitException( 6, input );
								DebugRecognitionException(eee6);
								throw eee6;
							}
							cnt6++;
						}
						loop6:
							;

						} finally { DebugExitSubRule(6); }

						DebugLocation(166, 39);
						STRING18=(IToken)Match(input,STRING,Follow._STRING_in_import_def492); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING18);


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(166, 48);
				// SugarCpp.g:166:48: ( NEWLINE )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0==NEWLINE))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:166:48: NEWLINE
						{
						DebugLocation(166, 48);
						NEWLINE19=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def496); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE19);


						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(166, 57);
				DEDENT20=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def499); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT20);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 166:66: -> ^( Import ( STRING )* )
			{
				DebugLocation(166, 69);
				// SugarCpp.g:166:69: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(166, 71);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(166, 78);
				// SugarCpp.g:166:78: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(166, 78);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 4);
			LeaveRule("import_def", 4);
			LeaveRule_import_def();
			if (state.backtracking > 0) { Memoize(input, 4, import_def_StartIndex); }

		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:169:1: enum_def : 'enum' ident '=' ident ( '|' ident )* -> ^( Enum ( ident )+ ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 5);
		TraceIn("enum_def", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enum_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal21 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken char_literal25 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident22 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal21_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(169, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// SugarCpp.g:170:2: ( 'enum' ident '=' ident ( '|' ident )* -> ^( Enum ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:170:4: 'enum' ident '=' ident ( '|' ident )*
			{
			DebugLocation(170, 4);
			string_literal21=(IToken)Match(input,101,Follow._101_in_enum_def521); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(string_literal21);

			DebugLocation(170, 11);
			PushFollow(Follow._ident_in_enum_def523);
			ident22=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident22.Tree);
			DebugLocation(170, 17);
			char_literal23=(IToken)Match(input,86,Follow._86_in_enum_def525); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_86.Add(char_literal23);

			DebugLocation(170, 21);
			PushFollow(Follow._ident_in_enum_def527);
			ident24=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident24.Tree);
			DebugLocation(170, 27);
			// SugarCpp.g:170:27: ( '|' ident )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==113))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:170:28: '|' ident
					{
					DebugLocation(170, 28);
					char_literal25=(IToken)Match(input,113,Follow._113_in_enum_def530); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(char_literal25);

					DebugLocation(170, 32);
					PushFollow(Follow._ident_in_enum_def532);
					ident26=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident26.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 170:40: -> ^( Enum ( ident )+ )
			{
				DebugLocation(170, 43);
				// SugarCpp.g:170:43: ^( Enum ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(170, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(170, 50);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(170, 50);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 5);
			LeaveRule("enum_def", 5);
			LeaveRule_enum_def();
			if (state.backtracking > 0) { Memoize(input, 5, enum_def_StartIndex); }

		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:173:1: namespace_def : 'namespace' ident INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace ident overall_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 6);
		TraceIn("namespace_def", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int namespace_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal27 = default(IToken);
		IToken INDENT29 = default(IToken);
		IToken NEWLINE31 = default(IToken);
		IToken DEDENT32 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident28 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal27_tree = default(CommonTree);
		CommonTree INDENT29_tree = default(CommonTree);
		CommonTree NEWLINE31_tree = default(CommonTree);
		CommonTree DEDENT32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_overall_block=new RewriteRuleSubtreeStream(adaptor,"rule overall_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(173, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// SugarCpp.g:174:2: ( 'namespace' ident INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace ident overall_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:174:4: 'namespace' ident INDENT overall_block ( NEWLINE )* DEDENT
			{
			DebugLocation(174, 4);
			string_literal27=(IToken)Match(input,106,Follow._106_in_namespace_def554); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_106.Add(string_literal27);

			DebugLocation(174, 16);
			PushFollow(Follow._ident_in_namespace_def556);
			ident28=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident28.Tree);
			DebugLocation(174, 22);
			INDENT29=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def558); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT29);

			DebugLocation(174, 29);
			PushFollow(Follow._overall_block_in_namespace_def560);
			overall_block30=overall_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_overall_block.Add(overall_block30.Tree);
			DebugLocation(174, 43);
			// SugarCpp.g:174:43: ( NEWLINE )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:174:43: NEWLINE
					{
					DebugLocation(174, 43);
					NEWLINE31=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def562); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE31);


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(174, 52);
			DEDENT32=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def565); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT32);



			{
			// AST REWRITE
			// elements: overall_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 174:59: -> ^( Namespace ident overall_block )
			{
				DebugLocation(174, 62);
				// SugarCpp.g:174:62: ^( Namespace ident overall_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(174, 64);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(174, 74);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(174, 80);
				adaptor.AddChild(root_1, stream_overall_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 6);
			LeaveRule("namespace_def", 6);
			LeaveRule_namespace_def();
			if (state.backtracking > 0) { Memoize(input, 6, namespace_def_StartIndex); }

		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:177:1: class_def : ( attribute )? 'class' ident INDENT class_block ( NEWLINE )* DEDENT -> ^( Class ( attribute )? ident class_block ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 7);
		TraceIn("class_def", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal34 = default(IToken);
		IToken INDENT36 = default(IToken);
		IToken NEWLINE38 = default(IToken);
		IToken DEDENT39 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute33 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_block37 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal34_tree = default(CommonTree);
		CommonTree INDENT36_tree = default(CommonTree);
		CommonTree NEWLINE38_tree = default(CommonTree);
		CommonTree DEDENT39_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_class_block=new RewriteRuleSubtreeStream(adaptor,"rule class_block");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(177, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// SugarCpp.g:178:2: ( ( attribute )? 'class' ident INDENT class_block ( NEWLINE )* DEDENT -> ^( Class ( attribute )? ident class_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:178:4: ( attribute )? 'class' ident INDENT class_block ( NEWLINE )* DEDENT
			{
			DebugLocation(178, 4);
			// SugarCpp.g:178:4: ( attribute )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==93))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:178:4: attribute
				{
				DebugLocation(178, 4);
				PushFollow(Follow._attribute_in_class_def586);
				attribute33=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(178, 15);
			string_literal34=(IToken)Match(input,99,Follow._99_in_class_def589); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_99.Add(string_literal34);

			DebugLocation(178, 23);
			PushFollow(Follow._ident_in_class_def591);
			ident35=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident35.Tree);
			DebugLocation(178, 29);
			INDENT36=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def593); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT36);

			DebugLocation(178, 36);
			PushFollow(Follow._class_block_in_class_def595);
			class_block37=class_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_class_block.Add(class_block37.Tree);
			DebugLocation(178, 48);
			// SugarCpp.g:178:48: ( NEWLINE )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==NEWLINE))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:178:48: NEWLINE
					{
					DebugLocation(178, 48);
					NEWLINE38=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def597); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE38);


					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(178, 57);
			DEDENT39=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def600); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT39);



			{
			// AST REWRITE
			// elements: ident, attribute, class_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 178:64: -> ^( Class ( attribute )? ident class_block )
			{
				DebugLocation(178, 67);
				// SugarCpp.g:178:67: ^( Class ( attribute )? ident class_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(178, 69);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(178, 75);
				// SugarCpp.g:178:75: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(178, 75);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(178, 86);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(178, 92);
				adaptor.AddChild(root_1, stream_class_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 7);
			LeaveRule("class_def", 7);
			LeaveRule_class_def();
			if (state.backtracking > 0) { Memoize(input, 7, class_def_StartIndex); }

		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_class_block();
	partial void LeaveRule_class_block();

	// $ANTLR start "class_block"
	// SugarCpp.g:181:1: class_block : ( ( NEWLINE )* class_node )+ ;
	[GrammarRule("class_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_block()
	{
		EnterRule_class_block();
		EnterRule("class_block", 8);
		TraceIn("class_block", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE40 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> class_node41 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE40_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "class_block");
		DebugLocation(181, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// SugarCpp.g:182:2: ( ( ( NEWLINE )* class_node )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:182:4: ( ( NEWLINE )* class_node )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(182, 4);
			// SugarCpp.g:182:4: ( ( NEWLINE )* class_node )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				try
				{
					alt15 = dfa15.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:182:5: ( NEWLINE )* class_node
					{
					DebugLocation(182, 5);
					// SugarCpp.g:182:5: ( NEWLINE )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if ((LA14_0==NEWLINE))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:182:5: NEWLINE
							{
							DebugLocation(182, 5);
							NEWLINE40=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_block625); if (state.failed) return retval;
							if (state.backtracking == 0) {
							NEWLINE40_tree = (CommonTree)adaptor.Create(NEWLINE40);
							adaptor.AddChild(root_0, NEWLINE40_tree);
							}

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }

					DebugLocation(182, 14);
					PushFollow(Follow._class_node_in_class_block628);
					class_node41=class_node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_node41.Tree);

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_block", 8);
			LeaveRule("class_block", 8);
			LeaveRule_class_block();
			if (state.backtracking > 0) { Memoize(input, 8, class_block_StartIndex); }

		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "class_block"); }
		return retval;

	}
	// $ANTLR end "class_block"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:185:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 9);
		TraceIn("attribute_args", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER42 = default(IToken);
		IToken STRING43 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident44 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER42_tree = default(CommonTree);
		CommonTree STRING43_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(185, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// SugarCpp.g:186:2: ( NUMBER | STRING | ident )
			int alt16=3;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt16 = 1;
				}
				break;
			case STRING:
				{
				alt16 = 2;
				}
				break;
			case IDENT:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:186:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				NUMBER42=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args642); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER42_tree = (CommonTree)adaptor.Create(NUMBER42);
				adaptor.AddChild(root_0, NUMBER42_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:187:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				STRING43=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args647); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING43_tree = (CommonTree)adaptor.Create(STRING43);
				adaptor.AddChild(root_0, STRING43_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:188:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				PushFollow(Follow._ident_in_attribute_args652);
				ident44=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident44.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 9);
			LeaveRule("attribute_args", 9);
			LeaveRule_attribute_args();
			if (state.backtracking > 0) { Memoize(input, 9, attribute_args_StartIndex); }

		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:191:1: attribute_item : ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 10);
		TraceIn("attribute_item", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal46 = default(IToken);
		IToken char_literal48 = default(IToken);
		IToken char_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident45 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal46_tree = default(CommonTree);
		CommonTree char_literal48_tree = default(CommonTree);
		CommonTree char_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(191, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// SugarCpp.g:192:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:192:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
			{
			DebugLocation(192, 4);
			PushFollow(Follow._ident_in_attribute_item663);
			ident45=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident45.Tree);
			DebugLocation(192, 10);
			// SugarCpp.g:192:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==61))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:192:11: '(' attribute_args ( ',' attribute_args )* ')'
				{
				DebugLocation(192, 11);
				char_literal46=(IToken)Match(input,61,Follow._61_in_attribute_item666); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal46);

				DebugLocation(192, 15);
				PushFollow(Follow._attribute_args_in_attribute_item668);
				attribute_args47=attribute_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute_args.Add(attribute_args47.Tree);
				DebugLocation(192, 30);
				// SugarCpp.g:192:30: ( ',' attribute_args )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==68))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:192:31: ',' attribute_args
						{
						DebugLocation(192, 31);
						char_literal48=(IToken)Match(input,68,Follow._68_in_attribute_item671); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_68.Add(char_literal48);

						DebugLocation(192, 35);
						PushFollow(Follow._attribute_args_in_attribute_item673);
						attribute_args49=attribute_args();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_attribute_args.Add(attribute_args49.Tree);

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(192, 52);
				char_literal50=(IToken)Match(input,62,Follow._62_in_attribute_item677); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal50);


				}
				break;

			}
			} finally { DebugExitSubRule(18); }



			{
			// AST REWRITE
			// elements: ident, attribute_args
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 192:58: -> ^( Attribute ident ( attribute_args )* )
			{
				DebugLocation(192, 61);
				// SugarCpp.g:192:61: ^( Attribute ident ( attribute_args )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(192, 63);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

				DebugLocation(192, 73);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(192, 79);
				// SugarCpp.g:192:79: ( attribute_args )*
				while ( stream_attribute_args.HasNext )
				{
					DebugLocation(192, 79);
					adaptor.AddChild(root_1, stream_attribute_args.NextTree());

				}
				stream_attribute_args.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 10);
			LeaveRule("attribute_item", 10);
			LeaveRule_attribute_item();
			if (state.backtracking > 0) { Memoize(input, 10, attribute_item_StartIndex); }

		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:195:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 11);
		TraceIn("attribute", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal51 = default(IToken);
		IToken char_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		IToken NEWLINE56 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item54 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree NEWLINE56_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(195, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// SugarCpp.g:196:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:196:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(196, 4);
			// SugarCpp.g:196:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt21=0;
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==93))
				{
					int LA21_2 = input.LA(2);

					if ((EvaluatePredicate(synpred28_SugarCpp_fragment)))
					{
						alt21 = 1;
					}


				}


				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:196:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(196, 5);
					char_literal51=(IToken)Match(input,93,Follow._93_in_attribute702); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal51);

					DebugLocation(196, 9);
					PushFollow(Follow._attribute_item_in_attribute704);
					attribute_item52=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item52.Tree);
					DebugLocation(196, 24);
					// SugarCpp.g:196:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(19);
					while (true)
					{
						int alt19=2;
						try { DebugEnterDecision(19, false);
						int LA19_0 = input.LA(1);

						if ((LA19_0==68))
						{
							alt19 = 1;
						}


						} finally { DebugExitDecision(19); }
						switch ( alt19 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:196:25: ',' attribute_item
							{
							DebugLocation(196, 25);
							char_literal53=(IToken)Match(input,68,Follow._68_in_attribute707); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_68.Add(char_literal53);

							DebugLocation(196, 29);
							PushFollow(Follow._attribute_item_in_attribute709);
							attribute_item54=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item54.Tree);

							}
							break;

						default:
							goto loop19;
						}
					}

					loop19:
						;

					} finally { DebugExitSubRule(19); }

					DebugLocation(196, 46);
					char_literal55=(IToken)Match(input,94,Follow._94_in_attribute713); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal55);

					DebugLocation(196, 50);
					// SugarCpp.g:196:50: ( NEWLINE )+
					int cnt20=0;
					try { DebugEnterSubRule(20);
					while (true)
					{
						int alt20=2;
						try { DebugEnterDecision(20, false);
						int LA20_0 = input.LA(1);

						if ((LA20_0==NEWLINE))
						{
							alt20 = 1;
						}


						} finally { DebugExitDecision(20); }
						switch (alt20)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:196:50: NEWLINE
							{
							DebugLocation(196, 50);
							NEWLINE56=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute715); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE56);


							}
							break;

						default:
							if (cnt20 >= 1)
								goto loop20;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee20 = new EarlyExitException( 20, input );
							DebugRecognitionException(eee20);
							throw eee20;
						}
						cnt20++;
					}
					loop20:
						;

					} finally { DebugExitSubRule(20); }


					}
					break;

				default:
					if (cnt21 >= 1)
						goto loop21;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee21 = new EarlyExitException( 21, input );
					DebugRecognitionException(eee21);
					throw eee21;
				}
				cnt21++;
			}
			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 196:61: -> ( attribute_item )+
			{
				DebugLocation(196, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(196, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 11);
			LeaveRule("attribute", 11);
			LeaveRule_attribute();
			if (state.backtracking > 0) { Memoize(input, 11, attribute_StartIndex); }

		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_class_node();
	partial void LeaveRule_class_node();

	// $ANTLR start "class_node"
	// SugarCpp.g:199:1: class_node : ( attribute )? node ;
	[GrammarRule("class_node")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_node()
	{
		EnterRule_class_node();
		EnterRule("class_node", 12);
		TraceIn("class_node", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> node58 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "class_node");
		DebugLocation(199, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// SugarCpp.g:200:2: ( ( attribute )? node )
			DebugEnterAlt(1);
			// SugarCpp.g:200:4: ( attribute )? node
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(200, 4);
			// SugarCpp.g:200:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			try
			{
				alt22 = dfa22.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:200:4: attribute
				{
				DebugLocation(200, 4);
				PushFollow(Follow._attribute_in_class_node734);
				attribute57=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(200, 15);
			PushFollow(Follow._node_in_class_node737);
			node58=node();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, node58.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_node", 12);
			LeaveRule("class_node", 12);
			LeaveRule_class_node();
			if (state.backtracking > 0) { Memoize(input, 12, class_node_StartIndex); }

		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "class_node"); }
		return retval;

	}
	// $ANTLR end "class_node"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:203:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 13);
		TraceIn("type_name_op", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal59 = default(IToken);
		IToken char_literal60 = default(IToken);
		IToken char_literal61 = default(IToken);
		IToken char_literal62 = default(IToken);

		CommonTree char_literal59_tree = default(CommonTree);
		CommonTree char_literal60_tree = default(CommonTree);
		CommonTree char_literal61_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(203, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// SugarCpp.g:203:13: ( '*' | '[' ']' | '&' )
			int alt23=3;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case 63:
				{
				alt23 = 1;
				}
				break;
			case 93:
				{
				alt23 = 2;
				}
				break;
			case 59:
				{
				alt23 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:203:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(203, 15);
				char_literal59=(IToken)Match(input,63,Follow._63_in_type_name_op746); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal59_tree = (CommonTree)adaptor.Create(char_literal59);
				adaptor.AddChild(root_0, char_literal59_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:203:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(203, 21);
				char_literal60=(IToken)Match(input,93,Follow._93_in_type_name_op750); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal60_tree = (CommonTree)adaptor.Create(char_literal60);
				adaptor.AddChild(root_0, char_literal60_tree);
				}
				DebugLocation(203, 25);
				char_literal61=(IToken)Match(input,94,Follow._94_in_type_name_op752); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal61_tree = (CommonTree)adaptor.Create(char_literal61);
				adaptor.AddChild(root_0, char_literal61_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:203:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(203, 31);
				char_literal62=(IToken)Match(input,59,Follow._59_in_type_name_op756); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal62_tree = (CommonTree)adaptor.Create(char_literal62);
				adaptor.AddChild(root_0, char_literal62_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 13);
			LeaveRule("type_name_op", 13);
			LeaveRule_type_name_op();
			if (state.backtracking > 0) { Memoize(input, 13, type_name_op_StartIndex); }

		}
		DebugLocation(203, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:204:1: type_name : ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal64 = default(IToken);
		IToken char_literal66 = default(IToken);
		IToken char_literal68 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op69 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal64_tree = default(CommonTree);
		CommonTree char_literal66_tree = default(CommonTree);
		CommonTree char_literal68_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(204, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// SugarCpp.g:205:2: ( ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:205:4: ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(205, 4);
			PushFollow(Follow._ident_in_type_name765);
			ident63=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident63.Tree);
			DebugLocation(205, 10);
			// SugarCpp.g:205:10: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==82))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:205:11: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(205, 11);
				char_literal64=(IToken)Match(input,82,Follow._82_in_type_name768); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_82.Add(char_literal64);

				DebugLocation(205, 15);
				// SugarCpp.g:205:15: ( type_name ( ',' type_name )* )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==IDENT))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:205:16: type_name ( ',' type_name )*
					{
					DebugLocation(205, 16);
					PushFollow(Follow._type_name_in_type_name771);
					type_name65=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name65.Tree);
					DebugLocation(205, 26);
					// SugarCpp.g:205:26: ( ',' type_name )*
					try { DebugEnterSubRule(24);
					while (true)
					{
						int alt24=2;
						try { DebugEnterDecision(24, false);
						int LA24_0 = input.LA(1);

						if ((LA24_0==68))
						{
							alt24 = 1;
						}


						} finally { DebugExitDecision(24); }
						switch ( alt24 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:205:27: ',' type_name
							{
							DebugLocation(205, 27);
							char_literal66=(IToken)Match(input,68,Follow._68_in_type_name774); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_68.Add(char_literal66);

							DebugLocation(205, 31);
							PushFollow(Follow._type_name_in_type_name776);
							type_name67=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name67.Tree);

							}
							break;

						default:
							goto loop24;
						}
					}

					loop24:
						;

					} finally { DebugExitSubRule(24); }


					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(205, 45);
				char_literal68=(IToken)Match(input,89,Follow._89_in_type_name782); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal68);


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(205, 51);
			// SugarCpp.g:205:51: ( type_name_op )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==93))
				{
					int LA27_2 = input.LA(2);

					if ((LA27_2==94))
					{
						alt27 = 1;
					}


				}
				else if ((LA27_0==59||LA27_0==63))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:205:51: type_name_op
					{
					DebugLocation(205, 51);
					PushFollow(Follow._type_name_op_in_type_name786);
					type_name_op69=type_name_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name_op.Add(type_name_op69.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: type_name, 89, type_name_op, ident, 82
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 205:65: -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(205, 68);
				// SugarCpp.g:205:68: ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(205, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(205, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(205, 87);
				// SugarCpp.g:205:87: ( '<' ( type_name )* '>' )?
				if (stream_type_name.HasNext||stream_89.HasNext||stream_82.HasNext)
				{
					DebugLocation(205, 88);
					adaptor.AddChild(root_1, stream_82.NextNode());
					DebugLocation(205, 92);
					// SugarCpp.g:205:92: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(205, 92);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(205, 103);
					adaptor.AddChild(root_1, stream_89.NextNode());

				}
				stream_type_name.Reset();
				stream_89.Reset();
				stream_82.Reset();
				DebugLocation(205, 110);
				// SugarCpp.g:205:110: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(205, 110);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 14, type_name_StartIndex); }

		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:208:1: generic_parameter : '<' ident ( ',' ! ident )* '>' ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 15);
		TraceIn("generic_parameter", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int generic_parameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal70 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken char_literal74 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal70_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		CommonTree char_literal74_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(208, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// SugarCpp.g:209:2: ( '<' ident ( ',' ! ident )* '>' )
			DebugEnterAlt(1);
			// SugarCpp.g:209:4: '<' ident ( ',' ! ident )* '>'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(209, 4);
			char_literal70=(IToken)Match(input,82,Follow._82_in_generic_parameter820); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal70_tree = (CommonTree)adaptor.Create(char_literal70);
			adaptor.AddChild(root_0, char_literal70_tree);
			}
			DebugLocation(209, 8);
			PushFollow(Follow._ident_in_generic_parameter822);
			ident71=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident71.Tree);
			DebugLocation(209, 14);
			// SugarCpp.g:209:14: ( ',' ! ident )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==68))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:209:15: ',' ! ident
					{
					DebugLocation(209, 18);
					char_literal72=(IToken)Match(input,68,Follow._68_in_generic_parameter825); if (state.failed) return retval;
					DebugLocation(209, 20);
					PushFollow(Follow._ident_in_generic_parameter828);
					ident73=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ident73.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }

			DebugLocation(209, 28);
			char_literal74=(IToken)Match(input,89,Follow._89_in_generic_parameter832); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal74_tree = (CommonTree)adaptor.Create(char_literal74);
			adaptor.AddChild(root_0, char_literal74_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 15);
			LeaveRule("generic_parameter", 15);
			LeaveRule_generic_parameter();
			if (state.backtracking > 0) { Memoize(input, 15, generic_parameter_StartIndex); }

		}
		DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:212:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 16);
		TraceIn("func_args", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal76 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc77 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(212, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// SugarCpp.g:213:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:213:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(213, 4);
			PushFollow(Follow._stmt_alloc_in_func_args843);
			stmt_alloc75=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc75.Tree);
			DebugLocation(213, 15);
			// SugarCpp.g:213:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==68))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:213:16: ',' stmt_alloc
					{
					DebugLocation(213, 16);
					char_literal76=(IToken)Match(input,68,Follow._68_in_func_args846); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(char_literal76);

					DebugLocation(213, 20);
					PushFollow(Follow._stmt_alloc_in_func_args848);
					stmt_alloc77=stmt_alloc();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc77.Tree);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 213:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(213, 36);
				// SugarCpp.g:213:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(213, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(213, 48);
				// SugarCpp.g:213:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(213, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 16);
			LeaveRule("func_args", 16);
			LeaveRule_func_args();
			if (state.backtracking > 0) { Memoize(input, 16, func_args_StartIndex); }

		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:216:1: func_def : type_name ident ( generic_parameter )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 17);
		TraceIn("func_def", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal81 = default(IToken);
		IToken char_literal83 = default(IToken);
		IToken char_literal85 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter80 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr86 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal81_tree = default(CommonTree);
		CommonTree char_literal83_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(216, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// SugarCpp.g:217:2: ( type_name ident ( generic_parameter )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:217:4: type_name ident ( generic_parameter )? '(' ( func_args )? ')' ( stmt_block | '=' expr )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(217, 4);
			PushFollow(Follow._type_name_in_func_def870);
			type_name78=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name78.Tree);
			DebugLocation(217, 14);
			PushFollow(Follow._ident_in_func_def872);
			ident79=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident79.Tree);
			DebugLocation(217, 20);
			// SugarCpp.g:217:20: ( generic_parameter )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==82))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:217:20: generic_parameter
				{
				DebugLocation(217, 20);
				PushFollow(Follow._generic_parameter_in_func_def874);
				generic_parameter80=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_parameter80.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(217, 39);
			char_literal81=(IToken)Match(input,61,Follow._61_in_func_def877); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal81_tree = (CommonTree)adaptor.Create(char_literal81);
			adaptor.AddChild(root_0, char_literal81_tree);
			}
			DebugLocation(217, 43);
			// SugarCpp.g:217:43: ( func_args )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==IDENT))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:217:43: func_args
				{
				DebugLocation(217, 43);
				PushFollow(Follow._func_args_in_func_def879);
				func_args82=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_args82.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(217, 54);
			char_literal83=(IToken)Match(input,62,Follow._62_in_func_def882); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal83_tree = (CommonTree)adaptor.Create(char_literal83);
			adaptor.AddChild(root_0, char_literal83_tree);
			}
			DebugLocation(217, 58);
			// SugarCpp.g:217:58: ( stmt_block | '=' expr )
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==INDENT))
			{
				alt32 = 1;
			}
			else if ((LA32_0==86))
			{
				alt32 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:217:60: stmt_block
				{
				DebugLocation(217, 60);
				PushFollow(Follow._stmt_block_in_func_def886);
				stmt_block84=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_block84.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:217:73: '=' expr
				{
				DebugLocation(217, 73);
				char_literal85=(IToken)Match(input,86,Follow._86_in_func_def890); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal85_tree = (CommonTree)adaptor.Create(char_literal85);
				adaptor.AddChild(root_0, char_literal85_tree);
				}
				DebugLocation(217, 77);
				PushFollow(Follow._expr_in_func_def892);
				expr86=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expr86.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 17);
			LeaveRule("func_def", 17);
			LeaveRule_func_def();
			if (state.backtracking > 0) { Memoize(input, 17, func_def_StartIndex); }

		}
		DebugLocation(218, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:220:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 18);
		TraceIn("stmt_block", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INDENT87 = default(IToken);
		IToken NEWLINE88 = default(IToken);
		IToken NEWLINE90 = default(IToken);
		IToken DEDENT91 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt89 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT87_tree = default(CommonTree);
		CommonTree NEWLINE88_tree = default(CommonTree);
		CommonTree NEWLINE90_tree = default(CommonTree);
		CommonTree DEDENT91_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(220, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// SugarCpp.g:221:2: ( INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:221:4: INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(221, 4);
			INDENT87=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block908); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT87);

			DebugLocation(221, 11);
			// SugarCpp.g:221:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				try
				{
					alt34 = dfa34.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:221:12: ( NEWLINE )+ stmt
					{
					DebugLocation(221, 12);
					// SugarCpp.g:221:12: ( NEWLINE )+
					int cnt33=0;
					try { DebugEnterSubRule(33);
					while (true)
					{
						int alt33=2;
						try { DebugEnterDecision(33, false);
						int LA33_0 = input.LA(1);

						if ((LA33_0==NEWLINE))
						{
							alt33 = 1;
						}


						} finally { DebugExitDecision(33); }
						switch (alt33)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:221:12: NEWLINE
							{
							DebugLocation(221, 12);
							NEWLINE88=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block911); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE88);


							}
							break;

						default:
							if (cnt33 >= 1)
								goto loop33;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee33 = new EarlyExitException( 33, input );
							DebugRecognitionException(eee33);
							throw eee33;
						}
						cnt33++;
					}
					loop33:
						;

					} finally { DebugExitSubRule(33); }

					DebugLocation(221, 21);
					PushFollow(Follow._stmt_in_stmt_block914);
					stmt89=stmt();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt.Add(stmt89.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }

			DebugLocation(221, 28);
			// SugarCpp.g:221:28: ( NEWLINE )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==NEWLINE))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:221:28: NEWLINE
					{
					DebugLocation(221, 28);
					NEWLINE90=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block918); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE90);


					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }

			DebugLocation(221, 37);
			DEDENT91=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block921); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT91);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 221:44: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(221, 47);
				// SugarCpp.g:221:47: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(221, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(221, 60);
				// SugarCpp.g:221:60: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(221, 60);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 18);
			LeaveRule("stmt_block", 18);
			LeaveRule_stmt_block();
			if (state.backtracking > 0) { Memoize(input, 18, stmt_block_StartIndex); }

		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:224:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 19);
		TraceIn("stmt", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if93 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try96 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(224, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// SugarCpp.g:225:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try )
			int alt36=5;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 61:
			case 108:
			case 110:
			case 111:
				{
				alt36 = 1;
				}
				break;
			case 103:
				{
				alt36 = 2;
				}
				break;
			case 102:
				{
				alt36 = 3;
				}
				break;
			case 112:
				{
				alt36 = 4;
				}
				break;
			case 109:
				{
				alt36 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:225:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._stmt_expr_in_stmt941);
				stmt_expr92=stmt_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr92.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:226:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._stmt_if_in_stmt946);
				stmt_if93=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if93.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:227:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._stmt_for_in_stmt951);
				stmt_for94=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for94.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:228:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._stmt_while_in_stmt956);
				stmt_while95=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while95.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:229:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				PushFollow(Follow._stmt_try_in_stmt961);
				stmt_try96=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try96.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 19);
			LeaveRule("stmt", 19);
			LeaveRule_stmt();
			if (state.backtracking > 0) { Memoize(input, 19, stmt_StartIndex); }

		}
		DebugLocation(230, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:232:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 20);
		TraceIn("stmt_expr", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return98 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(232, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// SugarCpp.g:233:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt37=5;
			try { DebugEnterDecision(37, false);
			try
			{
				alt37 = dfa37.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:233:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(233, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr972);
				stmt_alloc97=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc97.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:234:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr977);
				stmt_return98=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return98.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:235:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr982);
				stmt_using99=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using99.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:236:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(236, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr987);
				stmt_typedef100=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef100.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:237:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(237, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr992);
				stmt_modify101=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify101.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 20);
			LeaveRule("stmt_expr", 20);
			LeaveRule_stmt_expr();
			if (state.backtracking > 0) { Memoize(input, 20, stmt_expr_StartIndex); }

		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:240:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 21);
		TraceIn("stmt_typedef", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_typedef_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal102 = default(IToken);
		IToken char_literal104 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name105 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal102_tree = default(CommonTree);
		CommonTree char_literal104_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(240, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// SugarCpp.g:241:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: 'typedef' ident '=' type_name
			{
			DebugLocation(241, 4);
			string_literal102=(IToken)Match(input,110,Follow._110_in_stmt_typedef1003); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_110.Add(string_literal102);

			DebugLocation(241, 14);
			PushFollow(Follow._ident_in_stmt_typedef1005);
			ident103=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident103.Tree);
			DebugLocation(241, 20);
			char_literal104=(IToken)Match(input,86,Follow._86_in_stmt_typedef1007); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_86.Add(char_literal104);

			DebugLocation(241, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1009);
			type_name105=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name105.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 241:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(241, 37);
				// SugarCpp.g:241:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(241, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(241, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(241, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 21);
			LeaveRule("stmt_typedef", 21);
			LeaveRule_stmt_typedef();
			if (state.backtracking > 0) { Memoize(input, 21, stmt_typedef_StartIndex); }

		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:244:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 22);
		TraceIn("stmt_using_item", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal107_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(244, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// SugarCpp.g:244:16: ( ident | 'namespace' )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==IDENT))
			{
				alt38 = 1;
			}
			else if ((LA38_0==106))
			{
				alt38 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(244, 18);
				PushFollow(Follow._ident_in_stmt_using_item1028);
				ident106=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident106.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:244:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(244, 26);
				string_literal107=(IToken)Match(input,106,Follow._106_in_stmt_using_item1032); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal107_tree = (CommonTree)adaptor.Create(string_literal107);
				adaptor.AddChild(root_0, string_literal107_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 22);
			LeaveRule("stmt_using_item", 22);
			LeaveRule_stmt_using_item();
			if (state.backtracking > 0) { Memoize(input, 22, stmt_using_item_StartIndex); }

		}
		DebugLocation(244, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:245:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 23);
		TraceIn("stmt_using", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal108 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item109 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal108_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(245, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// SugarCpp.g:246:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:246:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(246, 4);
			string_literal108=(IToken)Match(input,111,Follow._111_in_stmt_using1040); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_111.Add(string_literal108);

			DebugLocation(246, 12);
			// SugarCpp.g:246:12: ( stmt_using_item )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				try
				{
					alt39 = dfa39.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:246:12: stmt_using_item
					{
					DebugLocation(246, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1042);
					stmt_using_item109=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item109.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 246:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(246, 32);
				// SugarCpp.g:246:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(246, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(246, 45);
				// SugarCpp.g:246:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(246, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 23);
			LeaveRule("stmt_using", 23);
			LeaveRule_stmt_using();
			if (state.backtracking > 0) { Memoize(input, 23, stmt_using_StartIndex); }

		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:249:1: stmt_return : 'return' ( expr )? -> ^( Expr_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 24);
		TraceIn("stmt_return", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_return_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal110 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr111 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal110_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(249, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// SugarCpp.g:250:2: ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:250:4: 'return' ( expr )?
			{
			DebugLocation(250, 4);
			string_literal110=(IToken)Match(input,108,Follow._108_in_stmt_return1063); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_108.Add(string_literal110);

			DebugLocation(250, 13);
			// SugarCpp.g:250:13: ( expr )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==IDENT||LA40_0==NUMBER||LA40_0==STRING||LA40_0==54||LA40_0==59||LA40_0==61||LA40_0==63||(LA40_0>=65 && LA40_0<=66)||(LA40_0>=69 && LA40_0<=70)||LA40_0==107||LA40_0==116))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:250:13: expr
				{
				DebugLocation(250, 13);
				PushFollow(Follow._expr_in_stmt_return1065);
				expr111=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr111.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 250:19: -> ^( Expr_Return ( expr )? )
			{
				DebugLocation(250, 22);
				// SugarCpp.g:250:22: ^( Expr_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(250, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Return, "Expr_Return"), root_1);

				DebugLocation(250, 36);
				// SugarCpp.g:250:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(250, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 24);
			LeaveRule("stmt_return", 24);
			LeaveRule_stmt_return();
			if (state.backtracking > 0) { Memoize(input, 24, stmt_return_StartIndex); }

		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:253:1: stmt_if : 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 25);
		TraceIn("stmt_if", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_if_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal112 = default(IToken);
		IToken char_literal113 = default(IToken);
		IToken char_literal115 = default(IToken);
		IToken string_literal117 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block118 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree char_literal113_tree = default(CommonTree);
		CommonTree char_literal115_tree = default(CommonTree);
		CommonTree string_literal117_tree = default(CommonTree);
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(253, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// SugarCpp.g:254:2: ( 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:254:4: 'if' '(' expr ')' stmt_block ( 'else' stmt_block )?
			{
			DebugLocation(254, 4);
			string_literal112=(IToken)Match(input,103,Follow._103_in_stmt_if1086); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_103.Add(string_literal112);

			DebugLocation(254, 9);
			char_literal113=(IToken)Match(input,61,Follow._61_in_stmt_if1088); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal113);

			DebugLocation(254, 13);
			PushFollow(Follow._expr_in_stmt_if1090);
			expr114=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr114.Tree);
			DebugLocation(254, 18);
			char_literal115=(IToken)Match(input,62,Follow._62_in_stmt_if1092); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal115);

			DebugLocation(254, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1094);
			stmt_block116=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block116.Tree);
			DebugLocation(254, 33);
			// SugarCpp.g:254:33: ( 'else' stmt_block )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==100))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:254:34: 'else' stmt_block
				{
				DebugLocation(254, 34);
				string_literal117=(IToken)Match(input,100,Follow._100_in_stmt_if1097); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_100.Add(string_literal117);

				DebugLocation(254, 41);
				PushFollow(Follow._stmt_block_in_stmt_if1099);
				stmt_block118=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block118.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 254:54: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(254, 57);
				// SugarCpp.g:254:57: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(254, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(254, 67);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(254, 72);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(254, 83);
				// SugarCpp.g:254:83: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(254, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 25);
			LeaveRule("stmt_if", 25);
			LeaveRule_stmt_if();
			if (state.backtracking > 0) { Memoize(input, 25, stmt_if_StartIndex); }

		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:257:1: stmt_while : 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 26);
		TraceIn("stmt_while", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_while_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal119 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken char_literal122 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block123 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal119_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(257, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// SugarCpp.g:258:2: ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:258:4: 'while' '(' expr ')' stmt_block
			{
			DebugLocation(258, 4);
			string_literal119=(IToken)Match(input,112,Follow._112_in_stmt_while1125); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_112.Add(string_literal119);

			DebugLocation(258, 12);
			char_literal120=(IToken)Match(input,61,Follow._61_in_stmt_while1127); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal120);

			DebugLocation(258, 16);
			PushFollow(Follow._expr_in_stmt_while1129);
			expr121=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr121.Tree);
			DebugLocation(258, 21);
			char_literal122=(IToken)Match(input,62,Follow._62_in_stmt_while1131); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal122);

			DebugLocation(258, 25);
			PushFollow(Follow._stmt_block_in_stmt_while1133);
			stmt_block123=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block123.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 258:36: -> ^( Stmt_While expr stmt_block )
			{
				DebugLocation(258, 39);
				// SugarCpp.g:258:39: ^( Stmt_While expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(258, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

				DebugLocation(258, 52);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(258, 57);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 26);
			LeaveRule("stmt_while", 26);
			LeaveRule_stmt_while();
			if (state.backtracking > 0) { Memoize(input, 26, stmt_while_StartIndex); }

		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:261:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 27);
		TraceIn("stmt_for", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_for_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal124 = default(IToken);
		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken string_literal131 = default(IToken);
		IToken char_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal124_tree = default(CommonTree);
		CommonTree char_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree string_literal131_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(261, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// SugarCpp.g:266:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:266:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(266, 4);
			string_literal124=(IToken)Match(input,102,Follow._102_in_stmt_for1159); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_102.Add(string_literal124);

			DebugLocation(266, 10);
			char_literal125=(IToken)Match(input,61,Follow._61_in_stmt_for1161); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal125);

			DebugLocation(266, 14);
			PushFollow(Follow._expr_in_stmt_for1163);
			expr126=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr126.Tree);
			DebugLocation(266, 19);
			// SugarCpp.g:266:19: ( ';' expr ';' expr | 'in' expr )
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==81))
			{
				alt42 = 1;
			}
			else if ((LA42_0==105))
			{
				alt42 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:20: ';' expr ';' expr
				{
				DebugLocation(266, 20);
				char_literal127=(IToken)Match(input,81,Follow._81_in_stmt_for1166); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_81.Add(char_literal127);

				DebugLocation(266, 24);
				PushFollow(Follow._expr_in_stmt_for1168);
				expr128=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr128.Tree);
				DebugLocation(266, 29);
				char_literal129=(IToken)Match(input,81,Follow._81_in_stmt_for1170); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_81.Add(char_literal129);

				DebugLocation(266, 33);
				PushFollow(Follow._expr_in_stmt_for1172);
				expr130=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr130.Tree);
				DebugLocation(266, 38);
				if (state.backtracking == 0)
				{
					type=0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:266:50: 'in' expr
				{
				DebugLocation(266, 50);
				string_literal131=(IToken)Match(input,105,Follow._105_in_stmt_for1178); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_105.Add(string_literal131);

				DebugLocation(266, 55);
				PushFollow(Follow._expr_in_stmt_for1180);
				expr132=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr132.Tree);
				DebugLocation(266, 60);
				if (state.backtracking == 0)
				{
					type=1;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(266, 71);
			char_literal133=(IToken)Match(input,62,Follow._62_in_stmt_for1185); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal133);

			DebugLocation(266, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1187);
			stmt_block134=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block134.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, stmt_block, expr, expr, expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 267:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(267, 18);
				// SugarCpp.g:267:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(267, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(267, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(267, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(267, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(267, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 268:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(268, 7);
				// SugarCpp.g:268:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(268, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(268, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(268, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(268, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 27);
			LeaveRule("stmt_for", 27);
			LeaveRule_stmt_for();
			if (state.backtracking > 0) { Memoize(input, 27, stmt_for_StartIndex); }

		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:271:1: stmt_try : 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 28);
		TraceIn("stmt_try", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_try_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal135 = default(IToken);
		IToken string_literal137 = default(IToken);
		IToken char_literal138 = default(IToken);
		IToken char_literal140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal135_tree = default(CommonTree);
		CommonTree string_literal137_tree = default(CommonTree);
		CommonTree char_literal138_tree = default(CommonTree);
		CommonTree char_literal140_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(271, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// SugarCpp.g:272:2: ( 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:272:4: 'try' stmt_block 'catch' '(' expr ')' stmt_block
			{
			DebugLocation(272, 4);
			string_literal135=(IToken)Match(input,109,Follow._109_in_stmt_try1232); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_109.Add(string_literal135);

			DebugLocation(272, 10);
			PushFollow(Follow._stmt_block_in_stmt_try1234);
			stmt_block136=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block136.Tree);
			DebugLocation(272, 21);
			string_literal137=(IToken)Match(input,98,Follow._98_in_stmt_try1236); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_98.Add(string_literal137);

			DebugLocation(272, 29);
			char_literal138=(IToken)Match(input,61,Follow._61_in_stmt_try1238); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_61.Add(char_literal138);

			DebugLocation(272, 33);
			PushFollow(Follow._expr_in_stmt_try1240);
			expr139=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr139.Tree);
			DebugLocation(272, 38);
			char_literal140=(IToken)Match(input,62,Follow._62_in_stmt_try1242); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_62.Add(char_literal140);

			DebugLocation(272, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1244);
			stmt_block141=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block141.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 272:53: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(272, 56);
				// SugarCpp.g:272:56: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(272, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(272, 67);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(272, 78);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(272, 83);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 28);
			LeaveRule("stmt_try", 28);
			LeaveRule_stmt_try();
			if (state.backtracking > 0) { Memoize(input, 28, stmt_try_StartIndex); }

		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:275:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 29);
		TraceIn("ident_list", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal143 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident144 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal143_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(275, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// SugarCpp.g:276:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:276:4: ident ( ',' ident )*
			{
			DebugLocation(276, 4);
			PushFollow(Follow._ident_in_ident_list1267);
			ident142=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident142.Tree);
			DebugLocation(276, 10);
			// SugarCpp.g:276:10: ( ',' ident )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==68))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:11: ',' ident
					{
					DebugLocation(276, 11);
					char_literal143=(IToken)Match(input,68,Follow._68_in_ident_list1270); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(char_literal143);

					DebugLocation(276, 15);
					PushFollow(Follow._ident_in_ident_list1272);
					ident144=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident144.Tree);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 276:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(276, 26);
				// SugarCpp.g:276:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(276, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(276, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(276, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 29);
			LeaveRule("ident_list", 29);
			LeaveRule_ident_list();
			if (state.backtracking > 0) { Memoize(input, 29, ident_list_StartIndex); }

		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:279:1: stmt_alloc : ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 30);
		TraceIn("stmt_alloc", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_alloc_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal146 = default(IToken);
		IToken char_literal148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal146_tree = default(CommonTree);
		CommonTree char_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(279, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// SugarCpp.g:280:2: ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:280:4: ident_list ':' type_name ( '=' expr )?
			{
			DebugLocation(280, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc1294);
			ident_list145=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list145.Tree);
			DebugLocation(280, 15);
			char_literal146=(IToken)Match(input,78,Follow._78_in_stmt_alloc1296); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_78.Add(char_literal146);

			DebugLocation(280, 19);
			PushFollow(Follow._type_name_in_stmt_alloc1298);
			type_name147=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name147.Tree);
			DebugLocation(280, 29);
			// SugarCpp.g:280:29: ( '=' expr )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==86))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:280:30: '=' expr
				{
				DebugLocation(280, 30);
				char_literal148=(IToken)Match(input,86,Follow._86_in_stmt_alloc1301); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_86.Add(char_literal148);

				DebugLocation(280, 34);
				PushFollow(Follow._expr_in_stmt_alloc1303);
				expr149=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr149.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: ident_list, expr, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 280:41: -> ^( Expr_Alloc type_name ident_list ( expr )? )
			{
				DebugLocation(280, 44);
				// SugarCpp.g:280:44: ^( Expr_Alloc type_name ident_list ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(280, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

				DebugLocation(280, 57);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(280, 67);
				adaptor.AddChild(root_1, stream_ident_list.NextTree());
				DebugLocation(280, 78);
				// SugarCpp.g:280:78: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(280, 78);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 30);
			LeaveRule("stmt_alloc", 30);
			LeaveRule_stmt_alloc();
			if (state.backtracking > 0) { Memoize(input, 30, stmt_alloc_StartIndex); }

		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:283:1: stmt_modify : lvalue ( modify_expr_op ^ cond_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 31);
		TraceIn("stmt_modify", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_modify_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr152 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(283, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// SugarCpp.g:284:2: ( lvalue ( modify_expr_op ^ cond_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:284:4: lvalue ( modify_expr_op ^ cond_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(284, 4);
			PushFollow(Follow._lvalue_in_stmt_modify1329);
			lvalue150=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue150.Tree);
			DebugLocation(284, 11);
			// SugarCpp.g:284:11: ( modify_expr_op ^ cond_expr )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==57||LA45_0==60||LA45_0==64||LA45_0==67||LA45_0==71||LA45_0==77||LA45_0==80||LA45_0==84||LA45_0==86||LA45_0==92||LA45_0==96||LA45_0==114))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:284:12: modify_expr_op ^ cond_expr
				{
				DebugLocation(284, 26);
				PushFollow(Follow._modify_expr_op_in_stmt_modify1332);
				modify_expr_op151=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op151.Tree, root_0);
				DebugLocation(284, 28);
				PushFollow(Follow._cond_expr_in_stmt_modify1335);
				cond_expr152=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr152.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 31);
			LeaveRule("stmt_modify", 31);
			LeaveRule_stmt_modify();
			if (state.backtracking > 0) { Memoize(input, 31, stmt_modify_StartIndex); }

		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:287:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 32);
		TraceIn("expr", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr153 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(287, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// SugarCpp.g:288:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:288:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(288, 4);
			PushFollow(Follow._lambda_expr_in_expr1348);
			lambda_expr153=lambda_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr153.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 32);
			LeaveRule("expr", 32);
			LeaveRule_expr();
			if (state.backtracking > 0) { Memoize(input, 32, expr_StartIndex); }

		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:291:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 33);
		TraceIn("lambda_expr", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lambda_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal154 = default(IToken);
		IToken char_literal156 = default(IToken);
		IToken string_literal157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr159 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal154_tree = default(CommonTree);
		CommonTree char_literal156_tree = default(CommonTree);
		CommonTree string_literal157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(291, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// SugarCpp.g:292:2: ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr )
			int alt46=2;
			try { DebugEnterDecision(46, false);
			try
			{
				alt46 = dfa46.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:292:4: '(' func_args ')' '=>' modify_expr
				{
				DebugLocation(292, 4);
				char_literal154=(IToken)Match(input,61,Follow._61_in_lambda_expr1359); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal154);

				DebugLocation(292, 8);
				PushFollow(Follow._func_args_in_lambda_expr1361);
				func_args155=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args155.Tree);
				DebugLocation(292, 18);
				char_literal156=(IToken)Match(input,62,Follow._62_in_lambda_expr1363); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal156);

				DebugLocation(292, 22);
				string_literal157=(IToken)Match(input,88,Follow._88_in_lambda_expr1365); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(string_literal157);

				DebugLocation(292, 27);
				PushFollow(Follow._modify_expr_in_lambda_expr1367);
				modify_expr158=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(modify_expr158.Tree);


				{
				// AST REWRITE
				// elements: modify_expr, func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:39: -> ^( Expr_Lambda func_args modify_expr )
				{
					DebugLocation(292, 42);
					// SugarCpp.g:292:42: ^( Expr_Lambda func_args modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(292, 56);
					adaptor.AddChild(root_1, stream_func_args.NextTree());
					DebugLocation(292, 66);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:293:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(293, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr1382);
				modify_expr159=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr159.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 33);
			LeaveRule("lambda_expr", 33);
			LeaveRule_lambda_expr();
			if (state.backtracking > 0) { Memoize(input, 33, lambda_expr_StartIndex); }

		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:296:1: modify_expr_op : ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 34);
		TraceIn("modify_expr_op", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set160 = default(IToken);

		CommonTree set160_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(296, 99);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// SugarCpp.g:296:15: ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(296, 15);

			set160=(IToken)input.LT(1);
			if (input.LA(1)==57||input.LA(1)==60||input.LA(1)==64||input.LA(1)==67||input.LA(1)==71||input.LA(1)==77||input.LA(1)==80||input.LA(1)==84||input.LA(1)==86||input.LA(1)==92||input.LA(1)==96||input.LA(1)==114)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set160));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 34);
			LeaveRule("modify_expr_op", 34);
			LeaveRule_modify_expr_op();
			if (state.backtracking > 0) { Memoize(input, 34, modify_expr_op_StartIndex); }

		}
		DebugLocation(296, 99);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:297:1: modify_expr : cond_expr ( modify_expr_op ^ modify_expr )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 35);
		TraceIn("modify_expr", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(297, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// SugarCpp.g:298:2: ( cond_expr ( modify_expr_op ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:298:4: cond_expr ( modify_expr_op ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(298, 4);
			PushFollow(Follow._cond_expr_in_modify_expr1444);
			cond_expr161=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr161.Tree);
			DebugLocation(298, 14);
			// SugarCpp.g:298:14: ( modify_expr_op ^ modify_expr )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==57||LA47_0==60||LA47_0==64||LA47_0==67||LA47_0==71||LA47_0==77||LA47_0==80||LA47_0==84||LA47_0==86||LA47_0==92||LA47_0==96||LA47_0==114))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:298:15: modify_expr_op ^ modify_expr
				{
				DebugLocation(298, 29);
				PushFollow(Follow._modify_expr_op_in_modify_expr1447);
				modify_expr_op162=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op162.Tree, root_0);
				DebugLocation(298, 31);
				PushFollow(Follow._modify_expr_in_modify_expr1450);
				modify_expr163=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr163.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 35);
			LeaveRule("modify_expr", 35);
			LeaveRule_modify_expr();
			if (state.backtracking > 0) { Memoize(input, 35, modify_expr_StartIndex); }

		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:301:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 36);
		TraceIn("cond_expr_item", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr164 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(301, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// SugarCpp.g:301:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:301:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(301, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item1461);
			cond_expr164=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr164.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 36);
			LeaveRule("cond_expr_item", 36);
			LeaveRule_cond_expr_item();
			if (state.backtracking > 0) { Memoize(input, 36, cond_expr_item_StartIndex); }

		}
		DebugLocation(301, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:302:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 37);
		TraceIn("cond_expr", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal165 = default(IToken);
		IToken string_literal166 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal165_tree = default(CommonTree);
		CommonTree string_literal166_tree = default(CommonTree);
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(302, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// SugarCpp.g:303:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:303:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(303, 4);
			// SugarCpp.g:303:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:303:5: a= or_expr
			{
			DebugLocation(303, 6);
			PushFollow(Follow._or_expr_in_cond_expr1473);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 303:15: -> $a
			{
				DebugLocation(303, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(303, 22);
			// SugarCpp.g:303:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==103))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:303:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(303, 23);
				string_literal165=(IToken)Match(input,103,Follow._103_in_cond_expr1482); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_103.Add(string_literal165);

				DebugLocation(303, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr1486);
				a=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
				DebugLocation(303, 45);
				string_literal166=(IToken)Match(input,100,Follow._100_in_cond_expr1488); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_100.Add(string_literal166);

				DebugLocation(303, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr1492);
				b=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: a, b, cond_expr
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 303:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(303, 72);
					// SugarCpp.g:303:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(303, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(303, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(303, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(303, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 37);
			LeaveRule("cond_expr", 37);
			LeaveRule_cond_expr();
			if (state.backtracking > 0) { Memoize(input, 37, cond_expr_StartIndex); }

		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:306:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 38);
		TraceIn("or_expr", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int or_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal167 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal167_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(306, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// SugarCpp.g:307:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:307:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(307, 4);
			// SugarCpp.g:307:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:307:5: a= and_expr
			{
			DebugLocation(307, 6);
			PushFollow(Follow._and_expr_in_or_expr1523);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 307:16: -> $a
			{
				DebugLocation(307, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(307, 23);
			// SugarCpp.g:307:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==115))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:307:24: '||' b= and_expr
					{
					DebugLocation(307, 24);
					string_literal167=(IToken)Match(input,115,Follow._115_in_or_expr1532); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_115.Add(string_literal167);

					DebugLocation(307, 30);
					PushFollow(Follow._and_expr_in_or_expr1536);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 115, or_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 307:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(307, 43);
						// SugarCpp.g:307:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(307, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(307, 54);
						adaptor.AddChild(root_1, stream_115.NextNode());
						DebugLocation(307, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(307, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 38);
			LeaveRule("or_expr", 38);
			LeaveRule_or_expr();
			if (state.backtracking > 0) { Memoize(input, 38, or_expr_StartIndex); }

		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:310:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 39);
		TraceIn("and_expr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int and_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(310, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// SugarCpp.g:311:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(311, 4);
			// SugarCpp.g:311:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:311:5: a= bit_or
			{
			DebugLocation(311, 6);
			PushFollow(Follow._bit_or_in_and_expr1566);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 311:14: -> $a
			{
				DebugLocation(311, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(311, 21);
			// SugarCpp.g:311:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==58))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:311:22: '&&' b= bit_or
					{
					DebugLocation(311, 22);
					string_literal168=(IToken)Match(input,58,Follow._58_in_and_expr1575); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_58.Add(string_literal168);

					DebugLocation(311, 28);
					PushFollow(Follow._bit_or_in_and_expr1579);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, 58, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 311:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(311, 39);
						// SugarCpp.g:311:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(311, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(311, 50);
						adaptor.AddChild(root_1, stream_58.NextNode());
						DebugLocation(311, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(311, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 39);
			LeaveRule("and_expr", 39);
			LeaveRule_and_expr();
			if (state.backtracking > 0) { Memoize(input, 39, and_expr_StartIndex); }

		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:314:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 40);
		TraceIn("bit_or", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_or_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal169 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal169_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(314, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// SugarCpp.g:315:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:315:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(315, 4);
			// SugarCpp.g:315:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:315:5: a= bit_xor
			{
			DebugLocation(315, 6);
			PushFollow(Follow._bit_xor_in_bit_or1609);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 315:15: -> $a
			{
				DebugLocation(315, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(315, 22);
			// SugarCpp.g:315:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==113))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:315:23: '|' b= bit_xor
					{
					DebugLocation(315, 23);
					char_literal169=(IToken)Match(input,113,Follow._113_in_bit_or1618); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(char_literal169);

					DebugLocation(315, 28);
					PushFollow(Follow._bit_xor_in_bit_or1622);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 113, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 315:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(315, 40);
						// SugarCpp.g:315:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(315, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(315, 51);
						adaptor.AddChild(root_1, stream_113.NextNode());
						DebugLocation(315, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(315, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 40);
			LeaveRule("bit_or", 40);
			LeaveRule_bit_or();
			if (state.backtracking > 0) { Memoize(input, 40, bit_or_StartIndex); }

		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:318:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 41);
		TraceIn("bit_xor", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_xor_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal170 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal170_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(318, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// SugarCpp.g:319:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:319:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(319, 4);
			// SugarCpp.g:319:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:319:5: a= bit_and
			{
			DebugLocation(319, 6);
			PushFollow(Follow._bit_and_in_bit_xor1652);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 319:15: -> $a
			{
				DebugLocation(319, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(319, 22);
			// SugarCpp.g:319:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==95))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:319:23: '^' b= bit_and
					{
					DebugLocation(319, 23);
					char_literal170=(IToken)Match(input,95,Follow._95_in_bit_xor1661); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal170);

					DebugLocation(319, 28);
					PushFollow(Follow._bit_and_in_bit_xor1665);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, 95, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 319:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(319, 40);
						// SugarCpp.g:319:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(319, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(319, 51);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(319, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(319, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 41);
			LeaveRule("bit_xor", 41);
			LeaveRule_bit_xor();
			if (state.backtracking > 0) { Memoize(input, 41, bit_xor_StartIndex); }

		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:322:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 42);
		TraceIn("bit_and", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_and_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal171 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal171_tree = default(CommonTree);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(322, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// SugarCpp.g:323:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:323:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(323, 4);
			// SugarCpp.g:323:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:323:5: a= cmp_equ_expr
			{
			DebugLocation(323, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and1695);
			a=cmp_equ_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 323:20: -> $a
			{
				DebugLocation(323, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(323, 27);
			// SugarCpp.g:323:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==59))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:323:28: '&' b= cmp_equ_expr
					{
					DebugLocation(323, 28);
					char_literal171=(IToken)Match(input,59,Follow._59_in_bit_and1704); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_59.Add(char_literal171);

					DebugLocation(323, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and1708);
					b=cmp_equ_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, b, 59
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 323:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(323, 50);
						// SugarCpp.g:323:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(323, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(323, 61);
						adaptor.AddChild(root_1, stream_59.NextNode());
						DebugLocation(323, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(323, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 42);
			LeaveRule("bit_and", 42);
			LeaveRule_bit_and();
			if (state.backtracking > 0) { Memoize(input, 42, bit_and_StartIndex); }

		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:326:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 43);
		TraceIn("cmp_equ_expr_op", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set172 = default(IToken);

		CommonTree set172_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(326, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// SugarCpp.g:326:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(326, 16);

			set172=(IToken)input.LT(1);
			if (input.LA(1)==55||input.LA(1)==87)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set172));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 43);
			LeaveRule("cmp_equ_expr_op", 43);
			LeaveRule_cmp_equ_expr_op();
			if (state.backtracking > 0) { Memoize(input, 43, cmp_equ_expr_op_StartIndex); }

		}
		DebugLocation(326, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:327:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 44);
		TraceIn("cmp_equ_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op173 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(327, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// SugarCpp.g:328:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:328:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			{
			DebugLocation(328, 4);
			// SugarCpp.g:328:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:328:5: a= cmp_expr
			{
			DebugLocation(328, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr1749);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 328:16: -> $a
			{
				DebugLocation(328, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(328, 23);
			// SugarCpp.g:328:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==55||LA54_0==87))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:328:24: cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(328, 24);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr1758);
				cmp_equ_expr_op173=cmp_equ_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_equ_expr_op.Add(cmp_equ_expr_op173.Tree);
				DebugLocation(328, 41);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr1762);
				b=cmp_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_equ_expr, cmp_equ_expr_op, b
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 328:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
				{
					DebugLocation(328, 54);
					// SugarCpp.g:328:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(328, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(328, 65);
					adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
					DebugLocation(328, 82);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(328, 96);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 44);
			LeaveRule("cmp_equ_expr", 44);
			LeaveRule_cmp_equ_expr();
			if (state.backtracking > 0) { Memoize(input, 44, cmp_equ_expr_StartIndex); }

		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr_op();
	partial void LeaveRule_cmp_expr_op();

	// $ANTLR start "cmp_expr_op"
	// SugarCpp.g:331:1: cmp_expr_op : ( '<' | '<=' | '>' | '>=' );
	[GrammarRule("cmp_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op()
	{
		EnterRule_cmp_expr_op();
		EnterRule("cmp_expr_op", 45);
		TraceIn("cmp_expr_op", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set174 = default(IToken);

		CommonTree set174_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_expr_op");
		DebugLocation(331, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// SugarCpp.g:331:12: ( '<' | '<=' | '>' | '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(331, 12);

			set174=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==85||(input.LA(1)>=89 && input.LA(1)<=90))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set174));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr_op", 45);
			LeaveRule("cmp_expr_op", 45);
			LeaveRule_cmp_expr_op();
			if (state.backtracking > 0) { Memoize(input, 45, cmp_expr_op_StartIndex); }

		}
		DebugLocation(331, 37);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_expr_op"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:332:1: cmp_expr : (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 46);
		TraceIn("cmp_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op175 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(332, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// SugarCpp.g:333:2: ( (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:333:4: (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			{
			DebugLocation(333, 4);
			// SugarCpp.g:333:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:333:5: a= shift_expr
			{
			DebugLocation(333, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr1812);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 333:18: -> $a
			{
				DebugLocation(333, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(333, 25);
			// SugarCpp.g:333:25: ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==82||LA55_0==85||(LA55_0>=89 && LA55_0<=90)))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:333:26: cmp_expr_op b= shift_expr
				{
				DebugLocation(333, 26);
				PushFollow(Follow._cmp_expr_op_in_cmp_expr1821);
				cmp_expr_op175=cmp_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr_op.Add(cmp_expr_op175.Tree);
				DebugLocation(333, 39);
				PushFollow(Follow._shift_expr_in_cmp_expr1825);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_expr, b, cmp_expr_op
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 333:51: -> ^( Expr_Bin cmp_expr_op $cmp_expr $b)
				{
					DebugLocation(333, 54);
					// SugarCpp.g:333:54: ^( Expr_Bin cmp_expr_op $cmp_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(333, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(333, 65);
					adaptor.AddChild(root_1, stream_cmp_expr_op.NextTree());
					DebugLocation(333, 78);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(333, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 46);
			LeaveRule("cmp_expr", 46);
			LeaveRule_cmp_expr();
			if (state.backtracking > 0) { Memoize(input, 46, cmp_expr_StartIndex); }

		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:336:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 47);
		TraceIn("shift_expr_op", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set176 = default(IToken);

		CommonTree set176_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(336, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// SugarCpp.g:336:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(336, 14);

			set176=(IToken)input.LT(1);
			if (input.LA(1)==83||input.LA(1)==91)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set176));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 47);
			LeaveRule("shift_expr_op", 47);
			LeaveRule_shift_expr_op();
			if (state.backtracking > 0) { Memoize(input, 47, shift_expr_op_StartIndex); }

		}
		DebugLocation(336, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:337:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 48);
		TraceIn("shift_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op177 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(337, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// SugarCpp.g:338:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:338:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(338, 4);
			// SugarCpp.g:338:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:338:5: a= add_expr
			{
			DebugLocation(338, 6);
			PushFollow(Follow._add_expr_in_shift_expr1866);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 338:16: -> $a
			{
				DebugLocation(338, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(338, 23);
			// SugarCpp.g:338:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==83||LA56_0==91))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:338:24: shift_expr_op b= add_expr
					{
					DebugLocation(338, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr1875);
					shift_expr_op177=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op177.Tree);
					DebugLocation(338, 39);
					PushFollow(Follow._add_expr_in_shift_expr1879);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr_op, b, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 338:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(338, 52);
						// SugarCpp.g:338:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(338, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(338, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(338, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(338, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 48);
			LeaveRule("shift_expr", 48);
			LeaveRule_shift_expr();
			if (state.backtracking > 0) { Memoize(input, 48, shift_expr_StartIndex); }

		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:341:1: add_expr : (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 49);
		TraceIn("add_expr", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int add_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal178 = default(IToken);
		IToken char_literal179 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal178_tree = default(CommonTree);
		CommonTree char_literal179_tree = default(CommonTree);
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(341, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// SugarCpp.g:342:2: ( (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:342:4: (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(342, 4);
			// SugarCpp.g:342:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:342:5: a= infix_expr
			{
			DebugLocation(342, 6);
			PushFollow(Follow._infix_expr_in_add_expr1909);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 342:18: -> $a
			{
				DebugLocation(342, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(342, 25);
			// SugarCpp.g:342:25: ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=3;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==65))
				{
					alt57 = 1;
				}
				else if ((LA57_0==69))
				{
					alt57 = 2;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:342:27: '+' b= infix_expr
					{
					DebugLocation(342, 27);
					char_literal178=(IToken)Match(input,65,Follow._65_in_add_expr1919); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_65.Add(char_literal178);

					DebugLocation(342, 32);
					PushFollow(Follow._infix_expr_in_add_expr1923);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 65, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 342:44: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(342, 47);
						// SugarCpp.g:342:47: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(342, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(342, 58);
						adaptor.AddChild(root_1, stream_65.NextNode());
						DebugLocation(342, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(342, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:343:12: '-' b= infix_expr
					{
					DebugLocation(343, 12);
					char_literal179=(IToken)Match(input,69,Follow._69_in_add_expr1950); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_69.Add(char_literal179);

					DebugLocation(343, 17);
					PushFollow(Follow._infix_expr_in_add_expr1954);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, 69, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 343:29: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(343, 32);
						// SugarCpp.g:343:32: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(343, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(343, 43);
						adaptor.AddChild(root_1, stream_69.NextNode());
						DebugLocation(343, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(343, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 49);
			LeaveRule("add_expr", 49);
			LeaveRule_add_expr();
			if (state.backtracking > 0) { Memoize(input, 49, add_expr_StartIndex); }

		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:347:1: infix_expr : (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 50);
		TraceIn("infix_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func180 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(347, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// SugarCpp.g:348:2: ( (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:348:4: (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(348, 4);
			// SugarCpp.g:348:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:348:5: a= mul_expr
			{
			DebugLocation(348, 6);
			PushFollow(Follow._mul_expr_in_infix_expr1994);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 348:16: -> $a
			{
				DebugLocation(348, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(348, 23);
			// SugarCpp.g:348:23: ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==97))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:348:25: infix_func b= mul_expr
					{
					DebugLocation(348, 25);
					PushFollow(Follow._infix_func_in_infix_expr2004);
					infix_func180=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func180.Tree);
					DebugLocation(348, 37);
					PushFollow(Follow._mul_expr_in_infix_expr2008);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_func, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 348:48: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(348, 51);
						// SugarCpp.g:348:51: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(348, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(348, 64);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(348, 76);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(348, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 50);
			LeaveRule("infix_expr", 50);
			LeaveRule_infix_expr();
			if (state.backtracking > 0) { Memoize(input, 50, infix_expr_StartIndex); }

		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:351:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 51);
		TraceIn("mul_expr", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int mul_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal181 = default(IToken);
		IToken char_literal182 = default(IToken);
		IToken char_literal183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal181_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(351, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// SugarCpp.g:352:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:352:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(352, 4);
			// SugarCpp.g:352:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:352:5: a= selector_expr
			{
			DebugLocation(352, 6);
			PushFollow(Follow._selector_expr_in_mul_expr2040);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 352:21: -> $a
			{
				DebugLocation(352, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(352, 28);
			// SugarCpp.g:352:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=4;
				try { DebugEnterDecision(59, false);
				switch (input.LA(1))
				{
				case 63:
					{
					alt59 = 1;
					}
					break;
				case 76:
					{
					alt59 = 2;
					}
					break;
				case 56:
					{
					alt59 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:352:30: '*' b= selector_expr
					{
					DebugLocation(352, 30);
					char_literal181=(IToken)Match(input,63,Follow._63_in_mul_expr2050); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_63.Add(char_literal181);

					DebugLocation(352, 35);
					PushFollow(Follow._selector_expr_in_mul_expr2054);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 63, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 352:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(352, 53);
						// SugarCpp.g:352:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(352, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(352, 64);
						adaptor.AddChild(root_1, stream_63.NextNode());
						DebugLocation(352, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(352, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:353:15: '/' b= selector_expr
					{
					DebugLocation(353, 15);
					char_literal182=(IToken)Match(input,76,Follow._76_in_mul_expr2084); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_76.Add(char_literal182);

					DebugLocation(353, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2088);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 76, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 353:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(353, 38);
						// SugarCpp.g:353:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(353, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(353, 49);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(353, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(353, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:354:15: '%' b= selector_expr
					{
					DebugLocation(354, 15);
					char_literal183=(IToken)Match(input,56,Follow._56_in_mul_expr2118); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_56.Add(char_literal183);

					DebugLocation(354, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2122);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 56, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 354:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(354, 38);
						// SugarCpp.g:354:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(354, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(354, 49);
						adaptor.AddChild(root_1, stream_56.NextNode());
						DebugLocation(354, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(354, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 51);
			LeaveRule("mul_expr", 51);
			LeaveRule_mul_expr();
			if (state.backtracking > 0) { Memoize(input, 51, mul_expr_StartIndex); }

		}
		DebugLocation(356, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:358:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 52);
		TraceIn("selector_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int selector_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal184 = default(IToken);
		IToken string_literal185 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal184_tree = default(CommonTree);
		CommonTree string_literal185_tree = default(CommonTree);
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(358, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// SugarCpp.g:359:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:359:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(359, 4);
			// SugarCpp.g:359:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:359:5: a= prefix_expr
			{
			DebugLocation(359, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr2165);
			a=prefix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 359:19: -> $a
			{
				DebugLocation(359, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(359, 26);
			// SugarCpp.g:359:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=3;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==73))
				{
					alt60 = 1;
				}
				else if ((LA60_0==75))
				{
					alt60 = 2;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:359:28: '->*' b= ident
					{
					DebugLocation(359, 28);
					string_literal184=(IToken)Match(input,73,Follow._73_in_selector_expr2175); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_73.Add(string_literal184);

					DebugLocation(359, 35);
					PushFollow(Follow._ident_in_selector_expr2179);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 73, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 359:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(359, 45);
						// SugarCpp.g:359:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(359, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(359, 59);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(359, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(359, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:360:13: '.*' b= ident
					{
					DebugLocation(360, 13);
					string_literal185=(IToken)Match(input,75,Follow._75_in_selector_expr2207); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_75.Add(string_literal185);

					DebugLocation(360, 20);
					PushFollow(Follow._ident_in_selector_expr2212);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, 75, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 360:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(360, 30);
						// SugarCpp.g:360:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(360, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(360, 44);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(360, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(360, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 52);
			LeaveRule("selector_expr", 52);
			LeaveRule_selector_expr();
			if (state.backtracking > 0) { Memoize(input, 52, selector_expr_StartIndex); }

		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:364:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 53);
		TraceIn("prefix_expr_op", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set186 = default(IToken);

		CommonTree set186_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(364, 64);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// SugarCpp.g:364:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(364, 15);

			set186=(IToken)input.LT(1);
			if (input.LA(1)==54||input.LA(1)==59||input.LA(1)==63||(input.LA(1)>=65 && input.LA(1)<=66)||(input.LA(1)>=69 && input.LA(1)<=70)||input.LA(1)==116)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set186));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 53);
			LeaveRule("prefix_expr_op", 53);
			LeaveRule_prefix_expr_op();
			if (state.backtracking > 0) { Memoize(input, 53, prefix_expr_op_StartIndex); }

		}
		DebugLocation(364, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:365:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 54);
		TraceIn("prefix_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal189 = default(IToken);
		IToken char_literal191 = default(IToken);
		IToken char_literal193 = default(IToken);
		IToken char_literal194 = default(IToken);
		IToken char_literal196 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op187 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr197 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal189_tree = default(CommonTree);
		CommonTree char_literal191_tree = default(CommonTree);
		CommonTree char_literal193_tree = default(CommonTree);
		CommonTree char_literal194_tree = default(CommonTree);
		CommonTree char_literal196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(365, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// SugarCpp.g:366:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt63=3;
			try { DebugEnterDecision(63, false);
			switch (input.LA(1))
			{
			case 54:
			case 59:
			case 63:
			case 65:
			case 66:
			case 69:
			case 70:
			case 116:
				{
				alt63 = 1;
				}
				break;
			case 107:
				{
				alt63 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 61:
				{
				alt63 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(366, 4);
				// SugarCpp.g:366:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:366:5: prefix_expr_op prefix_expr
				{
				DebugLocation(366, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr2287);
				prefix_expr_op187=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op187.Tree);
				DebugLocation(366, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr2289);
				prefix_expr188=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr188.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 366:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(366, 36);
					// SugarCpp.g:366:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(366, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(366, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(366, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:367:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(367, 4);
				string_literal189=(IToken)Match(input,107,Follow._107_in_prefix_expr2305); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_107.Add(string_literal189);

				DebugLocation(367, 10);
				PushFollow(Follow._type_name_in_prefix_expr2307);
				type_name190=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name190.Tree);
				DebugLocation(367, 20);
				// SugarCpp.g:367:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==61))
				{
					alt62 = 1;
				}
				else if ((LA62_0==93))
				{
					alt62 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:367:22: '(' ( expr_list )? ')'
					{
					DebugLocation(367, 22);
					char_literal191=(IToken)Match(input,61,Follow._61_in_prefix_expr2311); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal191);

					DebugLocation(367, 26);
					// SugarCpp.g:367:26: ( expr_list )?
					int alt61=2;
					try { DebugEnterSubRule(61);
					try { DebugEnterDecision(61, false);
					int LA61_0 = input.LA(1);

					if ((LA61_0==IDENT||LA61_0==NUMBER||LA61_0==STRING||LA61_0==54||LA61_0==59||LA61_0==61||LA61_0==63||(LA61_0>=65 && LA61_0<=66)||(LA61_0>=69 && LA61_0<=70)||LA61_0==107||LA61_0==116))
					{
						alt61 = 1;
					}
					} finally { DebugExitDecision(61); }
					switch (alt61)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:367:26: expr_list
						{
						DebugLocation(367, 26);
						PushFollow(Follow._expr_list_in_prefix_expr2313);
						expr_list192=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list192.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(61); }

					DebugLocation(367, 37);
					char_literal193=(IToken)Match(input,62,Follow._62_in_prefix_expr2316); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal193);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 367:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(367, 44);
						// SugarCpp.g:367:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(367, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(367, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(367, 70);
						// SugarCpp.g:367:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(367, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:368:10: '[' expr_list ']'
					{
					DebugLocation(368, 10);
					char_literal194=(IToken)Match(input,93,Follow._93_in_prefix_expr2338); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal194);

					DebugLocation(368, 14);
					PushFollow(Follow._expr_list_in_prefix_expr2340);
					expr_list195=expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr_list.Add(expr_list195.Tree);
					DebugLocation(368, 24);
					char_literal196=(IToken)Match(input,94,Follow._94_in_prefix_expr2342); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal196);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 368:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(368, 31);
						// SugarCpp.g:368:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(368, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(368, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(62); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:369:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(369, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr2358);
				suffix_expr197=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr197.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 54);
			LeaveRule("prefix_expr", 54);
			LeaveRule_prefix_expr();
			if (state.backtracking > 0) { Memoize(input, 54, prefix_expr_StartIndex); }

		}
		DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:372:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 55);
		TraceIn("expr_list", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal199 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal199_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(372, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// SugarCpp.g:373:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:373:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(373, 4);
			PushFollow(Follow._expr_in_expr_list2370);
			expr198=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr198.Tree);
			DebugLocation(373, 9);
			// SugarCpp.g:373:9: ( ',' ! expr )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==68))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:373:10: ',' ! expr
					{
					DebugLocation(373, 13);
					char_literal199=(IToken)Match(input,68,Follow._68_in_expr_list2373); if (state.failed) return retval;
					DebugLocation(373, 15);
					PushFollow(Follow._expr_in_expr_list2376);
					expr200=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr200.Tree);

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 55);
			LeaveRule("expr_list", 55);
			LeaveRule_expr_list();
			if (state.backtracking > 0) { Memoize(input, 55, expr_list_StartIndex); }

		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:376:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 56);
		TraceIn("suffix_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int suffix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal201 = default(IToken);
		IToken string_literal202 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken string_literal205 = default(IToken);
		IToken string_literal207 = default(IToken);
		IToken char_literal210 = default(IToken);
		IToken char_literal212 = default(IToken);
		IToken char_literal213 = default(IToken);
		IToken char_literal215 = default(IToken);
		IToken char_literal216 = default(IToken);
		IToken char_literal218 = default(IToken);
		IToken char_literal220 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident206 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list219 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal201_tree = default(CommonTree);
		CommonTree string_literal202_tree = default(CommonTree);
		CommonTree char_literal203_tree = default(CommonTree);
		CommonTree string_literal205_tree = default(CommonTree);
		CommonTree string_literal207_tree = default(CommonTree);
		CommonTree char_literal210_tree = default(CommonTree);
		CommonTree char_literal212_tree = default(CommonTree);
		CommonTree char_literal213_tree = default(CommonTree);
		CommonTree char_literal215_tree = default(CommonTree);
		CommonTree char_literal216_tree = default(CommonTree);
		CommonTree char_literal218_tree = default(CommonTree);
		CommonTree char_literal220_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(376, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// SugarCpp.g:377:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:377:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			{
			DebugLocation(377, 4);
			// SugarCpp.g:377:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:377:5: a= atom_expr
			{
			DebugLocation(377, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr2392);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 377:17: -> $a
			{
				DebugLocation(377, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(377, 24);
			// SugarCpp.g:377:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=9;
				try { DebugEnterDecision(69, false);
				switch (input.LA(1))
				{
				case 82:
					{
					int LA69_10 = input.LA(2);

					if ((EvaluatePredicate(synpred114_SugarCpp_fragment)))
					{
						alt69 = 6;
					}


					}
					break;
				case 93:
					{
					int LA69_25 = input.LA(2);

					if ((EvaluatePredicate(synpred116_SugarCpp_fragment)))
					{
						alt69 = 7;
					}


					}
					break;
				case 66:
					{
					alt69 = 1;
					}
					break;
				case 70:
					{
					alt69 = 2;
					}
					break;
				case 74:
					{
					alt69 = 3;
					}
					break;
				case 72:
					{
					alt69 = 4;
					}
					break;
				case 79:
					{
					alt69 = 5;
					}
					break;
				case 61:
					{
					alt69 = 6;
					}
					break;
				case 78:
					{
					alt69 = 8;
					}
					break;
				}

				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:377:26: '++'
					{
					DebugLocation(377, 26);
					string_literal201=(IToken)Match(input,66,Follow._66_in_suffix_expr2402); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_66.Add(string_literal201);



					{
					// AST REWRITE
					// elements: suffix_expr, 66
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 377:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(377, 34);
						// SugarCpp.g:377:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(377, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(377, 48);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(377, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:378:14: '--'
					{
					DebugLocation(378, 14);
					string_literal202=(IToken)Match(input,70,Follow._70_in_suffix_expr2428); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(string_literal202);



					{
					// AST REWRITE
					// elements: suffix_expr, 70
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 378:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(378, 22);
						// SugarCpp.g:378:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(378, 36);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(378, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:379:11: '.' ident
					{
					DebugLocation(379, 11);
					char_literal203=(IToken)Match(input,74,Follow._74_in_suffix_expr2451); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_74.Add(char_literal203);

					DebugLocation(379, 15);
					PushFollow(Follow._ident_in_suffix_expr2453);
					ident204=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident204.Tree);


					{
					// AST REWRITE
					// elements: 74, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 379:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(379, 24);
						// SugarCpp.g:379:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(379, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(379, 38);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(379, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(379, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:380:11: '->' ident
					{
					DebugLocation(380, 11);
					string_literal205=(IToken)Match(input,72,Follow._72_in_suffix_expr2478); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(string_literal205);

					DebugLocation(380, 16);
					PushFollow(Follow._ident_in_suffix_expr2480);
					ident206=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident206.Tree);


					{
					// AST REWRITE
					// elements: 72, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 380:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(380, 25);
						// SugarCpp.g:380:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(380, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(380, 39);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(380, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(380, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:381:11: '::' ident
					{
					DebugLocation(381, 11);
					string_literal207=(IToken)Match(input,79,Follow._79_in_suffix_expr2505); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_79.Add(string_literal207);

					DebugLocation(381, 16);
					PushFollow(Follow._ident_in_suffix_expr2507);
					ident208=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident208.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, 79, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 381:22: -> ^( Expr_Access '::' $suffix_expr ident )
					{
						DebugLocation(381, 25);
						// SugarCpp.g:381:25: ^( Expr_Access '::' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(381, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(381, 39);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(381, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(381, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:382:11: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(382, 11);
					// SugarCpp.g:382:11: ( generic_parameter )?
					int alt65=2;
					try { DebugEnterSubRule(65);
					try { DebugEnterDecision(65, false);
					int LA65_0 = input.LA(1);

					if ((LA65_0==82))
					{
						alt65 = 1;
					}
					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:382:11: generic_parameter
						{
						DebugLocation(382, 11);
						PushFollow(Follow._generic_parameter_in_suffix_expr2532);
						generic_parameter209=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter209.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(65); }

					DebugLocation(382, 30);
					char_literal210=(IToken)Match(input,61,Follow._61_in_suffix_expr2535); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal210);

					DebugLocation(382, 34);
					// SugarCpp.g:382:34: ( expr_list )?
					int alt66=2;
					try { DebugEnterSubRule(66);
					try { DebugEnterDecision(66, false);
					int LA66_0 = input.LA(1);

					if ((LA66_0==IDENT||LA66_0==NUMBER||LA66_0==STRING||LA66_0==54||LA66_0==59||LA66_0==61||LA66_0==63||(LA66_0>=65 && LA66_0<=66)||(LA66_0>=69 && LA66_0<=70)||LA66_0==107||LA66_0==116))
					{
						alt66 = 1;
					}
					} finally { DebugExitDecision(66); }
					switch (alt66)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:382:34: expr_list
						{
						DebugLocation(382, 34);
						PushFollow(Follow._expr_list_in_suffix_expr2537);
						expr_list211=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list211.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(66); }

					DebugLocation(382, 45);
					char_literal212=(IToken)Match(input,62,Follow._62_in_suffix_expr2540); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal212);



					{
					// AST REWRITE
					// elements: expr_list, generic_parameter, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 382:49: -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(382, 52);
						// SugarCpp.g:382:52: ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(382, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(382, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(382, 77);
						// SugarCpp.g:382:77: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(382, 77);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(382, 96);
						// SugarCpp.g:382:96: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(382, 96);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:383:11: '[' ( expr_list )? ']'
					{
					DebugLocation(383, 11);
					char_literal213=(IToken)Match(input,93,Follow._93_in_suffix_expr2567); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal213);

					DebugLocation(383, 15);
					// SugarCpp.g:383:15: ( expr_list )?
					int alt67=2;
					try { DebugEnterSubRule(67);
					try { DebugEnterDecision(67, false);
					int LA67_0 = input.LA(1);

					if ((LA67_0==IDENT||LA67_0==NUMBER||LA67_0==STRING||LA67_0==54||LA67_0==59||LA67_0==61||LA67_0==63||(LA67_0>=65 && LA67_0<=66)||(LA67_0>=69 && LA67_0<=70)||LA67_0==107||LA67_0==116))
					{
						alt67 = 1;
					}
					} finally { DebugExitDecision(67); }
					switch (alt67)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:383:15: expr_list
						{
						DebugLocation(383, 15);
						PushFollow(Follow._expr_list_in_suffix_expr2569);
						expr_list214=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list214.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(67); }

					DebugLocation(383, 26);
					char_literal215=(IToken)Match(input,94,Follow._94_in_suffix_expr2572); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal215);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 383:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(383, 33);
						// SugarCpp.g:383:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(383, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(383, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(383, 58);
						// SugarCpp.g:383:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(383, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// SugarCpp.g:384:11: ':' ident '(' ( expr_list )? ')'
					{
					DebugLocation(384, 11);
					char_literal216=(IToken)Match(input,78,Follow._78_in_suffix_expr2596); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_78.Add(char_literal216);

					DebugLocation(384, 15);
					PushFollow(Follow._ident_in_suffix_expr2598);
					ident217=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident217.Tree);
					DebugLocation(384, 21);
					char_literal218=(IToken)Match(input,61,Follow._61_in_suffix_expr2600); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal218);

					DebugLocation(384, 25);
					// SugarCpp.g:384:25: ( expr_list )?
					int alt68=2;
					try { DebugEnterSubRule(68);
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==IDENT||LA68_0==NUMBER||LA68_0==STRING||LA68_0==54||LA68_0==59||LA68_0==61||LA68_0==63||(LA68_0>=65 && LA68_0<=66)||(LA68_0>=69 && LA68_0<=70)||LA68_0==107||LA68_0==116))
					{
						alt68 = 1;
					}
					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:384:25: expr_list
						{
						DebugLocation(384, 25);
						PushFollow(Follow._expr_list_in_suffix_expr2602);
						expr_list219=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list219.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(68); }

					DebugLocation(384, 36);
					char_literal220=(IToken)Match(input,62,Follow._62_in_suffix_expr2605); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal220);



					{
					// AST REWRITE
					// elements: expr_list, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 384:40: -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
					{
						DebugLocation(384, 43);
						// SugarCpp.g:384:43: ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(384, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(384, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(384, 73);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(384, 79);
						// SugarCpp.g:384:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(384, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 56);
			LeaveRule("suffix_expr", 56);
			LeaveRule_suffix_expr();
			if (state.backtracking > 0) { Memoize(input, 56, suffix_expr_StartIndex); }

		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:388:1: atom_expr : ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 57);
		TraceIn("atom_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atom_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER221 = default(IToken);
		IToken STRING223 = default(IToken);
		IToken char_literal224 = default(IToken);
		IToken char_literal226 = default(IToken);
		IToken char_literal228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER221_tree = default(CommonTree);
		CommonTree STRING223_tree = default(CommonTree);
		CommonTree char_literal224_tree = default(CommonTree);
		CommonTree char_literal226_tree = default(CommonTree);
		CommonTree char_literal228_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			bool more_than_one = false;

		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(388, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// SugarCpp.g:393:2: ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) )
			int alt71=4;
			try { DebugEnterDecision(71, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt71 = 1;
				}
				break;
			case IDENT:
				{
				alt71 = 2;
				}
				break;
			case STRING:
				{
				alt71 = 3;
				}
				break;
			case 61:
				{
				alt71 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:393:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(393, 4);
				NUMBER221=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr2649); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER221_tree = (CommonTree)adaptor.Create(NUMBER221);
				adaptor.AddChild(root_0, NUMBER221_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:394:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(394, 4);
				PushFollow(Follow._ident_in_atom_expr2654);
				ident222=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident222.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:395:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(395, 4);
				STRING223=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr2659); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING223_tree = (CommonTree)adaptor.Create(STRING223);
				adaptor.AddChild(root_0, STRING223_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:396:4: '(' expr ( ',' expr )* ')'
				{
				DebugLocation(396, 4);
				char_literal224=(IToken)Match(input,61,Follow._61_in_atom_expr2664); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal224);

				DebugLocation(396, 8);
				PushFollow(Follow._expr_in_atom_expr2666);
				expr225=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr225.Tree);
				DebugLocation(396, 13);
				// SugarCpp.g:396:13: ( ',' expr )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_0 = input.LA(1);

					if ((LA70_0==68))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:396:14: ',' expr
						{
						DebugLocation(396, 14);
						char_literal226=(IToken)Match(input,68,Follow._68_in_atom_expr2669); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_68.Add(char_literal226);

						DebugLocation(396, 18);
						PushFollow(Follow._expr_in_atom_expr2671);
						expr227=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr227.Tree);
						DebugLocation(396, 23);
						if (state.backtracking == 0)
						{
							 more_than_one = true; 
						}

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }

				DebugLocation(396, 52);
				char_literal228=(IToken)Match(input,62,Follow._62_in_atom_expr2678); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal228);



				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 397:3: -> { more_than_one }? ^( Expr_Tuple ( expr )+ )
				if ( more_than_one )
				{
					DebugLocation(397, 25);
					// SugarCpp.g:397:25: ^( Expr_Tuple ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(397, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

					DebugLocation(397, 38);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(397, 38);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 398:3: -> ^( Expr_Bracket expr )
				{
					DebugLocation(398, 6);
					// SugarCpp.g:398:6: ^( Expr_Bracket expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(398, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

					DebugLocation(398, 21);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 57);
			LeaveRule("atom_expr", 57);
			LeaveRule_atom_expr();
			if (state.backtracking > 0) { Memoize(input, 57, atom_expr_StartIndex); }

		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:401:1: lvalue : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* ;
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 58);
		TraceIn("lvalue", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal229 = default(IToken);
		IToken string_literal230 = default(IToken);
		IToken char_literal231 = default(IToken);
		IToken string_literal233 = default(IToken);
		IToken string_literal235 = default(IToken);
		IToken char_literal238 = default(IToken);
		IToken char_literal240 = default(IToken);
		IToken char_literal241 = default(IToken);
		IToken char_literal243 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list239 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list242 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal229_tree = default(CommonTree);
		CommonTree string_literal230_tree = default(CommonTree);
		CommonTree char_literal231_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree string_literal235_tree = default(CommonTree);
		CommonTree char_literal238_tree = default(CommonTree);
		CommonTree char_literal240_tree = default(CommonTree);
		CommonTree char_literal241_tree = default(CommonTree);
		CommonTree char_literal243_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(401, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// SugarCpp.g:402:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:402:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			{
			DebugLocation(402, 4);
			// SugarCpp.g:402:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:402:5: a= lvalue_atom
			{
			DebugLocation(402, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue2715);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 402:19: -> $a
			{
				DebugLocation(402, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(402, 26);
			// SugarCpp.g:402:26: ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=8;
				try { DebugEnterDecision(75, false);
				switch (input.LA(1))
				{
				case 66:
					{
					alt75 = 1;
					}
					break;
				case 70:
					{
					alt75 = 2;
					}
					break;
				case 74:
					{
					alt75 = 3;
					}
					break;
				case 72:
					{
					alt75 = 4;
					}
					break;
				case 79:
					{
					alt75 = 5;
					}
					break;
				case 61:
				case 82:
					{
					alt75 = 6;
					}
					break;
				case 93:
					{
					alt75 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:402:28: '++'
					{
					DebugLocation(402, 28);
					string_literal229=(IToken)Match(input,66,Follow._66_in_lvalue2725); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_66.Add(string_literal229);



					{
					// AST REWRITE
					// elements: lvalue, 66
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 402:33: -> ^( Expr_Suffix '++' $lvalue)
					{
						DebugLocation(402, 36);
						// SugarCpp.g:402:36: ^( Expr_Suffix '++' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(402, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(402, 50);
						adaptor.AddChild(root_1, stream_66.NextNode());
						DebugLocation(402, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:403:16: '--'
					{
					DebugLocation(403, 16);
					string_literal230=(IToken)Match(input,70,Follow._70_in_lvalue2753); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(string_literal230);



					{
					// AST REWRITE
					// elements: 70, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 403:21: -> ^( Expr_Suffix '--' $lvalue)
					{
						DebugLocation(403, 24);
						// SugarCpp.g:403:24: ^( Expr_Suffix '--' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(403, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(403, 38);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(403, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:404:13: '.' ident
					{
					DebugLocation(404, 13);
					char_literal231=(IToken)Match(input,74,Follow._74_in_lvalue2778); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_74.Add(char_literal231);

					DebugLocation(404, 17);
					PushFollow(Follow._ident_in_lvalue2780);
					ident232=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident232.Tree);


					{
					// AST REWRITE
					// elements: 74, ident, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 404:23: -> ^( Expr_Access '.' $lvalue ident )
					{
						DebugLocation(404, 26);
						// SugarCpp.g:404:26: ^( Expr_Access '.' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(404, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(404, 40);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(404, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(404, 52);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:405:13: '->' ident
					{
					DebugLocation(405, 13);
					string_literal233=(IToken)Match(input,72,Follow._72_in_lvalue2807); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(string_literal233);

					DebugLocation(405, 18);
					PushFollow(Follow._ident_in_lvalue2809);
					ident234=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident234.Tree);


					{
					// AST REWRITE
					// elements: ident, 72, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 405:24: -> ^( Expr_Access '->' $lvalue ident )
					{
						DebugLocation(405, 27);
						// SugarCpp.g:405:27: ^( Expr_Access '->' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(405, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(405, 41);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(405, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(405, 54);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:406:13: '::' ident
					{
					DebugLocation(406, 13);
					string_literal235=(IToken)Match(input,79,Follow._79_in_lvalue2836); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_79.Add(string_literal235);

					DebugLocation(406, 18);
					PushFollow(Follow._ident_in_lvalue2838);
					ident236=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident236.Tree);


					{
					// AST REWRITE
					// elements: lvalue, ident, 79
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 406:24: -> ^( Expr_Access '::' $lvalue ident )
					{
						DebugLocation(406, 27);
						// SugarCpp.g:406:27: ^( Expr_Access '::' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(406, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(406, 41);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(406, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(406, 54);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:407:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(407, 13);
					// SugarCpp.g:407:13: ( generic_parameter )?
					int alt72=2;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, false);
					int LA72_0 = input.LA(1);

					if ((LA72_0==82))
					{
						alt72 = 1;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:407:13: generic_parameter
						{
						DebugLocation(407, 13);
						PushFollow(Follow._generic_parameter_in_lvalue2865);
						generic_parameter237=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter237.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(72); }

					DebugLocation(407, 32);
					char_literal238=(IToken)Match(input,61,Follow._61_in_lvalue2868); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal238);

					DebugLocation(407, 36);
					// SugarCpp.g:407:36: ( expr_list )?
					int alt73=2;
					try { DebugEnterSubRule(73);
					try { DebugEnterDecision(73, false);
					int LA73_0 = input.LA(1);

					if ((LA73_0==IDENT||LA73_0==NUMBER||LA73_0==STRING||LA73_0==54||LA73_0==59||LA73_0==61||LA73_0==63||(LA73_0>=65 && LA73_0<=66)||(LA73_0>=69 && LA73_0<=70)||LA73_0==107||LA73_0==116))
					{
						alt73 = 1;
					}
					} finally { DebugExitDecision(73); }
					switch (alt73)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:407:36: expr_list
						{
						DebugLocation(407, 36);
						PushFollow(Follow._expr_list_in_lvalue2870);
						expr_list239=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list239.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(73); }

					DebugLocation(407, 47);
					char_literal240=(IToken)Match(input,62,Follow._62_in_lvalue2873); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_62.Add(char_literal240);



					{
					// AST REWRITE
					// elements: generic_parameter, lvalue, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 407:51: -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(407, 54);
						// SugarCpp.g:407:54: ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(407, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(407, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(407, 74);
						// SugarCpp.g:407:74: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(407, 74);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(407, 93);
						// SugarCpp.g:407:93: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(407, 93);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:408:13: '[' ( expr_list )? ']'
					{
					DebugLocation(408, 13);
					char_literal241=(IToken)Match(input,93,Follow._93_in_lvalue2902); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal241);

					DebugLocation(408, 17);
					// SugarCpp.g:408:17: ( expr_list )?
					int alt74=2;
					try { DebugEnterSubRule(74);
					try { DebugEnterDecision(74, false);
					int LA74_0 = input.LA(1);

					if ((LA74_0==IDENT||LA74_0==NUMBER||LA74_0==STRING||LA74_0==54||LA74_0==59||LA74_0==61||LA74_0==63||(LA74_0>=65 && LA74_0<=66)||(LA74_0>=69 && LA74_0<=70)||LA74_0==107||LA74_0==116))
					{
						alt74 = 1;
					}
					} finally { DebugExitDecision(74); }
					switch (alt74)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:408:17: expr_list
						{
						DebugLocation(408, 17);
						PushFollow(Follow._expr_list_in_lvalue2904);
						expr_list242=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list242.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(74); }

					DebugLocation(408, 28);
					char_literal243=(IToken)Match(input,94,Follow._94_in_lvalue2907); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal243);



					{
					// AST REWRITE
					// elements: lvalue, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 408:32: -> ^( Expr_Dict $lvalue ( expr_list )? )
					{
						DebugLocation(408, 35);
						// SugarCpp.g:408:35: ^( Expr_Dict $lvalue ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(408, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(408, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(408, 55);
						// SugarCpp.g:408:55: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(408, 55);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 58);
			LeaveRule("lvalue", 58);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 58, lvalue_StartIndex); }

		}
		DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:412:1: lvalue_atom : ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 59);
		TraceIn("lvalue_atom", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_atom_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal244 = default(IToken);
		IToken char_literal246 = default(IToken);
		IToken char_literal248 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue247 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident249 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal244_tree = default(CommonTree);
		CommonTree char_literal246_tree = default(CommonTree);
		CommonTree char_literal248_tree = default(CommonTree);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(412, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// SugarCpp.g:413:2: ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==61))
			{
				alt78 = 1;
			}
			else if ((LA78_0==IDENT))
			{
				alt78 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:413:4: '(' ( lvalue ( ',' lvalue )* )? ')'
				{
				DebugLocation(413, 4);
				char_literal244=(IToken)Match(input,61,Follow._61_in_lvalue_atom2946); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_61.Add(char_literal244);

				DebugLocation(413, 8);
				// SugarCpp.g:413:8: ( lvalue ( ',' lvalue )* )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==IDENT||LA77_0==61))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:413:9: lvalue ( ',' lvalue )*
					{
					DebugLocation(413, 9);
					PushFollow(Follow._lvalue_in_lvalue_atom2949);
					lvalue245=lvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lvalue.Add(lvalue245.Tree);
					DebugLocation(413, 16);
					// SugarCpp.g:413:16: ( ',' lvalue )*
					try { DebugEnterSubRule(76);
					while (true)
					{
						int alt76=2;
						try { DebugEnterDecision(76, false);
						int LA76_0 = input.LA(1);

						if ((LA76_0==68))
						{
							alt76 = 1;
						}


						} finally { DebugExitDecision(76); }
						switch ( alt76 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:413:17: ',' lvalue
							{
							DebugLocation(413, 17);
							char_literal246=(IToken)Match(input,68,Follow._68_in_lvalue_atom2952); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_68.Add(char_literal246);

							DebugLocation(413, 21);
							PushFollow(Follow._lvalue_in_lvalue_atom2954);
							lvalue247=lvalue();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_lvalue.Add(lvalue247.Tree);

							}
							break;

						default:
							goto loop76;
						}
					}

					loop76:
						;

					} finally { DebugExitSubRule(76); }


					}
					break;

				}
				} finally { DebugExitSubRule(77); }

				DebugLocation(413, 32);
				char_literal248=(IToken)Match(input,62,Follow._62_in_lvalue_atom2960); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_62.Add(char_literal248);



				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 413:36: -> ^( Match_Tuple ( lvalue )* )
				{
					DebugLocation(413, 39);
					// SugarCpp.g:413:39: ^( Match_Tuple ( lvalue )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(413, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(413, 53);
					// SugarCpp.g:413:53: ( lvalue )*
					while ( stream_lvalue.HasNext )
					{
						DebugLocation(413, 53);
						adaptor.AddChild(root_1, stream_lvalue.NextTree());

					}
					stream_lvalue.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:414:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(414, 4);
				PushFollow(Follow._ident_in_lvalue_atom2974);
				ident249=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident249.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 59);
			LeaveRule("lvalue_atom", 59);
			LeaveRule_lvalue_atom();
			if (state.backtracking > 0) { Memoize(input, 59, lvalue_atom_StartIndex); }

		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:417:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 60);
		TraceIn("ident", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT250 = default(IToken);
		IToken string_literal251 = default(IToken);
		IToken IDENT252 = default(IToken);

		CommonTree IDENT250_tree = default(CommonTree);
		CommonTree string_literal251_tree = default(CommonTree);
		CommonTree IDENT252_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(417, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// SugarCpp.g:418:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:418:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(418, 4);
			IDENT250=(IToken)Match(input,IDENT,Follow._IDENT_in_ident2985); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT250_tree = (CommonTree)adaptor.Create(IDENT250);
			adaptor.AddChild(root_0, IDENT250_tree);
			}
			DebugLocation(418, 10);
			// SugarCpp.g:418:10: ( '::' IDENT )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==79))
				{
					int LA79_2 = input.LA(2);

					if ((LA79_2==IDENT))
					{
						int LA79_3 = input.LA(3);

						if ((EvaluatePredicate(synpred136_SugarCpp_fragment)))
						{
							alt79 = 1;
						}


					}


				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:418:11: '::' IDENT
					{
					DebugLocation(418, 11);
					string_literal251=(IToken)Match(input,79,Follow._79_in_ident2988); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal251_tree = (CommonTree)adaptor.Create(string_literal251);
					adaptor.AddChild(root_0, string_literal251_tree);
					}
					DebugLocation(418, 16);
					IDENT252=(IToken)Match(input,IDENT,Follow._IDENT_in_ident2990); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT252_tree = (CommonTree)adaptor.Create(IDENT252);
					adaptor.AddChild(root_0, IDENT252_tree);
					}

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 60);
			LeaveRule("ident", 60);
			LeaveRule_ident();
			if (state.backtracking > 0) { Memoize(input, 60, ident_StartIndex); }

		}
		DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:421:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 61);
		TraceIn("infix_func", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_func_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal253 = default(IToken);
		IToken char_literal255 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident254 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal253_tree = default(CommonTree);
		CommonTree char_literal255_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(421, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// SugarCpp.g:422:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:422:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(422, 7);
			char_literal253=(IToken)Match(input,97,Follow._97_in_infix_func3003); if (state.failed) return retval;
			DebugLocation(422, 9);
			PushFollow(Follow._ident_in_infix_func3006);
			ident254=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident254.Tree);
			DebugLocation(422, 18);
			char_literal255=(IToken)Match(input,97,Follow._97_in_infix_func3008); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 61);
			LeaveRule("infix_func", 61);
			LeaveRule_infix_func();
			if (state.backtracking > 0) { Memoize(input, 61, infix_func_StartIndex); }

		}
		DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred28_SugarCpp_fragment();
	partial void LeaveRule_synpred28_SugarCpp_fragment();

	// $ANTLR start synpred28_SugarCpp
	public void synpred28_SugarCpp_fragment()
	{
		EnterRule_synpred28_SugarCpp_fragment();
		EnterRule("synpred28_SugarCpp_fragment", 89);
		TraceIn("synpred28_SugarCpp_fragment", 89);
		try
		{
			// SugarCpp.g:196:5: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:196:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
			{
			DebugLocation(196, 5);
			Match(input,93,Follow._93_in_synpred28_SugarCpp702); if (state.failed) return;
			DebugLocation(196, 9);
			PushFollow(Follow._attribute_item_in_synpred28_SugarCpp704);
			attribute_item();
			PopFollow();
			if (state.failed) return;
			DebugLocation(196, 24);
			// SugarCpp.g:196:24: ( ',' attribute_item )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==68))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:196:25: ',' attribute_item
					{
					DebugLocation(196, 25);
					Match(input,68,Follow._68_in_synpred28_SugarCpp707); if (state.failed) return;
					DebugLocation(196, 29);
					PushFollow(Follow._attribute_item_in_synpred28_SugarCpp709);
					attribute_item();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }

			DebugLocation(196, 46);
			Match(input,94,Follow._94_in_synpred28_SugarCpp713); if (state.failed) return;
			DebugLocation(196, 50);
			// SugarCpp.g:196:50: ( NEWLINE )+
			int cnt88=0;
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==NEWLINE))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:196:50: NEWLINE
					{
					DebugLocation(196, 50);
					Match(input,NEWLINE,Follow._NEWLINE_in_synpred28_SugarCpp715); if (state.failed) return;

					}
					break;

				default:
					if (cnt88 >= 1)
						goto loop88;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee88 = new EarlyExitException( 88, input );
					DebugRecognitionException(eee88);
					throw eee88;
				}
				cnt88++;
			}
			loop88:
				;

			} finally { DebugExitSubRule(88); }


			}

		}
		finally
		{
			TraceOut("synpred28_SugarCpp_fragment", 89);
			LeaveRule("synpred28_SugarCpp_fragment", 89);
			LeaveRule_synpred28_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred28_SugarCpp

	partial void EnterRule_synpred29_SugarCpp_fragment();
	partial void LeaveRule_synpred29_SugarCpp_fragment();

	// $ANTLR start synpred29_SugarCpp
	public void synpred29_SugarCpp_fragment()
	{
		EnterRule_synpred29_SugarCpp_fragment();
		EnterRule("synpred29_SugarCpp_fragment", 90);
		TraceIn("synpred29_SugarCpp_fragment", 90);
		try
		{
			// SugarCpp.g:200:4: ( attribute )
			DebugEnterAlt(1);
			// SugarCpp.g:200:4: attribute
			{
			DebugLocation(200, 4);
			PushFollow(Follow._attribute_in_synpred29_SugarCpp734);
			attribute();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred29_SugarCpp_fragment", 90);
			LeaveRule("synpred29_SugarCpp_fragment", 90);
			LeaveRule_synpred29_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred29_SugarCpp

	partial void EnterRule_synpred114_SugarCpp_fragment();
	partial void LeaveRule_synpred114_SugarCpp_fragment();

	// $ANTLR start synpred114_SugarCpp
	public void synpred114_SugarCpp_fragment()
	{
		EnterRule_synpred114_SugarCpp_fragment();
		EnterRule("synpred114_SugarCpp_fragment", 175);
		TraceIn("synpred114_SugarCpp_fragment", 175);
		try
		{
			// SugarCpp.g:382:11: ( ( generic_parameter )? '(' ( expr_list )? ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:382:11: ( generic_parameter )? '(' ( expr_list )? ')'
			{
			DebugLocation(382, 11);
			// SugarCpp.g:382:11: ( generic_parameter )?
			int alt96=2;
			try { DebugEnterSubRule(96);
			try { DebugEnterDecision(96, false);
			int LA96_0 = input.LA(1);

			if ((LA96_0==82))
			{
				alt96 = 1;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:382:11: generic_parameter
				{
				DebugLocation(382, 11);
				PushFollow(Follow._generic_parameter_in_synpred114_SugarCpp2532);
				generic_parameter();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(96); }

			DebugLocation(382, 30);
			Match(input,61,Follow._61_in_synpred114_SugarCpp2535); if (state.failed) return;
			DebugLocation(382, 34);
			// SugarCpp.g:382:34: ( expr_list )?
			int alt97=2;
			try { DebugEnterSubRule(97);
			try { DebugEnterDecision(97, false);
			int LA97_0 = input.LA(1);

			if ((LA97_0==IDENT||LA97_0==NUMBER||LA97_0==STRING||LA97_0==54||LA97_0==59||LA97_0==61||LA97_0==63||(LA97_0>=65 && LA97_0<=66)||(LA97_0>=69 && LA97_0<=70)||LA97_0==107||LA97_0==116))
			{
				alt97 = 1;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:382:34: expr_list
				{
				DebugLocation(382, 34);
				PushFollow(Follow._expr_list_in_synpred114_SugarCpp2537);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(97); }

			DebugLocation(382, 45);
			Match(input,62,Follow._62_in_synpred114_SugarCpp2540); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred114_SugarCpp_fragment", 175);
			LeaveRule("synpred114_SugarCpp_fragment", 175);
			LeaveRule_synpred114_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred114_SugarCpp

	partial void EnterRule_synpred116_SugarCpp_fragment();
	partial void LeaveRule_synpred116_SugarCpp_fragment();

	// $ANTLR start synpred116_SugarCpp
	public void synpred116_SugarCpp_fragment()
	{
		EnterRule_synpred116_SugarCpp_fragment();
		EnterRule("synpred116_SugarCpp_fragment", 177);
		TraceIn("synpred116_SugarCpp_fragment", 177);
		try
		{
			// SugarCpp.g:383:11: ( '[' ( expr_list )? ']' )
			DebugEnterAlt(1);
			// SugarCpp.g:383:11: '[' ( expr_list )? ']'
			{
			DebugLocation(383, 11);
			Match(input,93,Follow._93_in_synpred116_SugarCpp2567); if (state.failed) return;
			DebugLocation(383, 15);
			// SugarCpp.g:383:15: ( expr_list )?
			int alt98=2;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			int LA98_0 = input.LA(1);

			if ((LA98_0==IDENT||LA98_0==NUMBER||LA98_0==STRING||LA98_0==54||LA98_0==59||LA98_0==61||LA98_0==63||(LA98_0>=65 && LA98_0<=66)||(LA98_0>=69 && LA98_0<=70)||LA98_0==107||LA98_0==116))
			{
				alt98 = 1;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:383:15: expr_list
				{
				DebugLocation(383, 15);
				PushFollow(Follow._expr_list_in_synpred116_SugarCpp2569);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(98); }

			DebugLocation(383, 26);
			Match(input,94,Follow._94_in_synpred116_SugarCpp2572); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred116_SugarCpp_fragment", 177);
			LeaveRule("synpred116_SugarCpp_fragment", 177);
			LeaveRule_synpred116_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred116_SugarCpp

	partial void EnterRule_synpred136_SugarCpp_fragment();
	partial void LeaveRule_synpred136_SugarCpp_fragment();

	// $ANTLR start synpred136_SugarCpp
	public void synpred136_SugarCpp_fragment()
	{
		EnterRule_synpred136_SugarCpp_fragment();
		EnterRule("synpred136_SugarCpp_fragment", 197);
		TraceIn("synpred136_SugarCpp_fragment", 197);
		try
		{
			// SugarCpp.g:418:11: ( '::' IDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:418:11: '::' IDENT
			{
			DebugLocation(418, 11);
			Match(input,79,Follow._79_in_synpred136_SugarCpp2988); if (state.failed) return;
			DebugLocation(418, 16);
			Match(input,IDENT,Follow._IDENT_in_synpred136_SugarCpp2990); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred136_SugarCpp_fragment", 197);
			LeaveRule("synpred136_SugarCpp_fragment", 197);
			LeaveRule_synpred136_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred136_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA3 dfa3;
	private DFA4 dfa4;
	private DFA7 dfa7;
	private DFA15 dfa15;
	private DFA22 dfa22;
	private DFA34 dfa34;
	private DFA37 dfa37;
	private DFA39 dfa39;
	private DFA46 dfa46;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa4 = new DFA4( this );
		dfa7 = new DFA7( this );
		dfa15 = new DFA15( this );
		dfa22 = new DFA22( this, SpecialStateTransition22 );
		dfa34 = new DFA34( this );
		dfa37 = new DFA37( this );
		dfa39 = new DFA39( this );
		dfa46 = new DFA46( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA3_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x38\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x38\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()+ loopback of 151:4: ( ( NEWLINE )* node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\xC\xFFFF";
		private const string DFA4_eofS =
			"\xC\xFFFF";
		private const string DFA4_minS =
			"\x2\x1D\x6\xFFFF\x1\x1D\x2\xFFFF\x1\x1D";
		private const string DFA4_maxS =
			"\x1\x6F\x1\x5D\x6\xFFFF\x1\x1D\x2\xFFFF\x1\x5D";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x7\x1\x8\x1\xFFFF\x1\x1\x1\x6\x1"+
			"\xFFFF";
		private const string DFA4_specialS =
			"\xC\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x1\x3F\xFFFF\x1\x4\x5\xFFFF\x1\x4\x1\xFFFF\x1\x3\x2\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x5\x3\xFFFF\x1\x7\x1\x6",
				"\x1\x9\x1D\xFFFF\x1\x9\x3\xFFFF\x1\x9\x4\xFFFF\x1\xA\x9\xFFFF\x1\xA"+
				"\x1\x8\x2\xFFFF\x1\x9\xA\xFFFF\x1\x9",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xB",
				"",
				"",
				"\x1\x9\x1D\xFFFF\x1\x9\x3\xFFFF\x1\x9\x4\xFFFF\x1\xA\x9\xFFFF\x1\xA"+
				"\x1\x8\x2\xFFFF\x1\x9\xA\xFFFF\x1\x9"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "154:1: node : ( func_def | import_def | enum_def | class_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x4\xFFFF";
		private const string DFA7_eofS =
			"\x4\xFFFF";
		private const string DFA7_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA7_maxS =
			"\x1\x24\x1\x2A\x2\xFFFF";
		private const string DFA7_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA7_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x1B\xFFFF\x1\x1\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "()* loopback of 166:29: ( ( NEWLINE )+ STRING )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA15 : DFA
	{
		private const string DFA15_eotS =
			"\x4\xFFFF";
		private const string DFA15_eofS =
			"\x4\xFFFF";
		private const string DFA15_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA15_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA15_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA15_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA15_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x38\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x38\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
		private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
		private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
		private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
		private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
		private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
		private static readonly short[][] DFA15_transition;

		static DFA15()
		{
			int numStates = DFA15_transitionS.Length;
			DFA15_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
			}
		}

		public DFA15( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 15;
			this.eot = DFA15_eot;
			this.eof = DFA15_eof;
			this.min = DFA15_min;
			this.max = DFA15_max;
			this.accept = DFA15_accept;
			this.special = DFA15_special;
			this.transition = DFA15_transition;
		}

		public override string Description { get { return "()+ loopback of 182:4: ( ( NEWLINE )* class_node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA22 : DFA
	{
		private const string DFA22_eotS =
			"\x27\xFFFF";
		private const string DFA22_eofS =
			"\x27\xFFFF";
		private const string DFA22_minS =
			"\x2\x1D\x1\xFFFF\x1\x3D\x3\x1D\x1\x24\x1\x3D\x3\x3E\x1\x3D\x1\x0\x1\x1D"+
			"\x1\x44\x3\x1D\x1\xFFFF\x4\x3E\x1\x3D\x3\x3E\x2\x1D\x1\x44\x1\x1D\x5"+
			"\x3E\x1\x1D\x1\x3E";
		private const string DFA22_maxS =
			"\x1\x6F\x1\x1D\x1\xFFFF\x1\x5E\x1\x1D\x1\x2A\x1\x1D\x1\x24\x1\x5E\x2"+
			"\x44\x1\x4F\x1\x5E\x1\x0\x1\x2A\x1\x5E\x2\x1D\x1\x2A\x1\xFFFF\x2\x44"+
			"\x2\x4F\x1\x5E\x2\x44\x1\x4F\x1\x1D\x1\x2A\x1\x5E\x1\x1D\x1\x4F\x2\x44"+
			"\x2\x4F\x1\x1D\x1\x4F";
		private const string DFA22_acceptS =
			"\x2\xFFFF\x1\x2\x10\xFFFF\x1\x1\x13\xFFFF";
		private const string DFA22_specialS =
			"\xD\xFFFF\x1\x0\x19\xFFFF}>";
		private static readonly string[] DFA22_transitionS =
			{
				"\x1\x2\x3F\xFFFF\x1\x1\x5\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x3\xFFFF\x2\x2",
				"\x1\x3",
				"",
				"\x1\x5\x6\xFFFF\x1\x6\xA\xFFFF\x1\x4\xE\xFFFF\x1\x7",
				"\x1\x8",
				"\x1\xB\x7\xFFFF\x1\x9\x4\xFFFF\x1\xA",
				"\x1\xC",
				"\x1\xD",
				"\x1\x5\x6\xFFFF\x1\x6\xA\xFFFF\x1\x4\xE\xFFFF\x1\x7",
				"\x1\xF\x5\xFFFF\x1\xE",
				"\x1\xF\x5\xFFFF\x1\xE",
				"\x1\xF\x5\xFFFF\x1\xE\xA\xFFFF\x1\x10",
				"\x1\x12\x6\xFFFF\x1\x6\xA\xFFFF\x1\x11\xE\xFFFF\x1\x7",
				"\x1\xFFFF",
				"\x1\x16\x7\xFFFF\x1\x14\x4\xFFFF\x1\x15",
				"\x1\x6\x19\xFFFF\x1\x7",
				"\x1\x17",
				"\x1\x18",
				"\x1\x1B\x7\xFFFF\x1\x19\x4\xFFFF\x1\x1A",
				"",
				"\x1\xF\x5\xFFFF\x1\xE",
				"\x1\xF\x5\xFFFF\x1\xE",
				"\x1\xF\x5\xFFFF\x1\xE\xA\xFFFF\x1\x1C",
				"\x1\xF\x5\xFFFF\x1\xE\xA\xFFFF\x1\x10",
				"\x1\x12\x6\xFFFF\x1\x6\xA\xFFFF\x1\x11\xE\xFFFF\x1\x7",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x1F",
				"\x1\x20",
				"\x1\x23\x7\xFFFF\x1\x21\x4\xFFFF\x1\x22",
				"\x1\x6\x19\xFFFF\x1\x7",
				"\x1\x24",
				"\x1\xF\x5\xFFFF\x1\xE\xA\xFFFF\x1\x1C",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x1E\x5\xFFFF\x1\x1D",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x25",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x1F",
				"\x1\x26",
				"\x1\x1E\x5\xFFFF\x1\x1D\xA\xFFFF\x1\x25"
			};

		private static readonly short[] DFA22_eot = DFA.UnpackEncodedString(DFA22_eotS);
		private static readonly short[] DFA22_eof = DFA.UnpackEncodedString(DFA22_eofS);
		private static readonly char[] DFA22_min = DFA.UnpackEncodedStringToUnsignedChars(DFA22_minS);
		private static readonly char[] DFA22_max = DFA.UnpackEncodedStringToUnsignedChars(DFA22_maxS);
		private static readonly short[] DFA22_accept = DFA.UnpackEncodedString(DFA22_acceptS);
		private static readonly short[] DFA22_special = DFA.UnpackEncodedString(DFA22_specialS);
		private static readonly short[][] DFA22_transition;

		static DFA22()
		{
			int numStates = DFA22_transitionS.Length;
			DFA22_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA22_transition[i] = DFA.UnpackEncodedString(DFA22_transitionS[i]);
			}
		}

		public DFA22( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 22;
			this.eot = DFA22_eot;
			this.eof = DFA22_eof;
			this.min = DFA22_min;
			this.max = DFA22_max;
			this.accept = DFA22_accept;
			this.special = DFA22_special;
			this.transition = DFA22_transition;
		}

		public override string Description { get { return "200:4: ( attribute )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition22(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA22_13 = input.LA(1);


				int index22_13 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred29_SugarCpp_fragment))) {s = 19;}

				else if ((true)) {s = 2;}


				input.Seek(index22_13);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 22, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\x4\xFFFF";
		private const string DFA34_eofS =
			"\x4\xFFFF";
		private const string DFA34_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA34_maxS =
			"\x1\x24\x1\x70\x2\xFFFF";
		private const string DFA34_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA34_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x2\x1B\xFFFF\x1\x1",
				"\x1\x2\x14\xFFFF\x1\x3\x6\xFFFF\x1\x1\x18\xFFFF\x1\x3\x28\xFFFF\x2"+
				"\x3\x4\xFFFF\x5\x3",
				"",
				""
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "()* loopback of 221:11: ( ( NEWLINE )+ stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\xB\xFFFF";
		private const string DFA37_eofS =
			"\x1\xFFFF\x1\x5\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5";
		private const string DFA37_minS =
			"\x1\x1D\x1\x8\x4\xFFFF\x1\x1D\x1\xFFFF\x1\x8\x1\x1D\x1\x8";
		private const string DFA37_maxS =
			"\x1\x6F\x1\x72\x4\xFFFF\x1\x1D\x1\xFFFF\x1\x72\x1\x1D\x1\x72";
		private const string DFA37_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x3\xFFFF";
		private const string DFA37_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x1\x1\x1F\xFFFF\x1\x5\x2E\xFFFF\x1\x2\x1\xFFFF\x1\x4\x1\x3",
				"\x1\x5\x1B\xFFFF\x1\x5\x14\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF"+
				"\x2\x5\x2\xFFFF\x1\x5\x11\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x1B\xFFFF\x1\x5\x14\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x9\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF"+
				"\x2\x5\x2\xFFFF\x1\x5\x11\xFFFF\x1\x5",
				"\x1\xA",
				"\x1\x5\x1B\xFFFF\x1\x5\x14\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x9\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF"+
				"\x2\x5\x2\xFFFF\x1\x5\x11\xFFFF\x1\x5"
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "232:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA39 : DFA
	{
		private const string DFA39_eotS =
			"\x17\xFFFF";
		private const string DFA39_eofS =
			"\x1\x1\x1\xFFFF\x2\x7\x2\xFFFF\x1\x7\x1\xFFFF\x2\x7\x3\xFFFF\x1\x7\x1"+
			"\xFFFF\x1\x7\x7\xFFFF";
		private const string DFA39_minS =
			"\x1\x8\x1\xFFFF\x2\x8\x2\x1D\x1\x8\x1\xFFFF\x2\x8\x3\x1D\x1\x8\x1\x3B"+
			"\x1\x8\x3\x1D\x2\x3B\x1\x1D\x1\x3B";
		private const string DFA39_maxS =
			"\x1\x6F\x1\xFFFF\x2\x6F\x1\x1D\x1\x5E\x1\x6F\x1\xFFFF\x2\x6F\x1\x1D\x1"+
			"\x59\x1\x1D\x1\x6F\x1\x5D\x1\x6F\x2\x1D\x3\x5D\x1\x1D\x1\x5D";
		private const string DFA39_acceptS =
			"\x1\xFFFF\x1\x2\x5\xFFFF\x1\x1\xF\xFFFF";
		private const string DFA39_specialS =
			"\x17\xFFFF}>";
		private static readonly string[] DFA39_transitionS =
			{
				"\x1\x1\x14\xFFFF\x1\x2\x6\xFFFF\x1\x1\x38\xFFFF\x1\x1\x5\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x3\x3\xFFFF\x2\x1",
				"",
				"\x1\x7\x14\xFFFF\x1\x6\x6\xFFFF\x1\x7\x16\xFFFF\x1\x1\x3\xFFFF\x1\x1"+
				"\x4\xFFFF\x1\x1\x9\xFFFF\x1\x1\x1\x4\x2\xFFFF\x1\x1\xA\xFFFF\x1\x5\x5"+
				"\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x3\xFFFF\x2"+
				"\x7",
				"\x1\x7\x14\xFFFF\x1\x8\x6\xFFFF\x1\x7\x38\xFFFF\x1\x7\x5\xFFFF\x1\x7"+
				"\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x3\xFFFF\x2\x7",
				"\x1\x9",
				"\x1\x7\x40\xFFFF\x1\x1",
				"\x1\x7\x14\xFFFF\x1\x7\x6\xFFFF\x1\x7\x16\xFFFF\x1\x7\x1\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x7\x4\xFFFF\x1\x7\x9\xFFFF\x1\x7\x1\xA\x2\xFFFF\x1\xB\xA"+
				"\xFFFF\x1\x7\x5\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1"+
				"\x7\x3\xFFFF\x2\x7",
				"",
				"\x1\x7\x14\xFFFF\x1\x7\x1\x1\x5\xFFFF\x1\x7\x16\xFFFF\x1\x7\x3\xFFFF"+
				"\x1\x7\x4\xFFFF\x1\x7\x9\xFFFF\x1\x7\x1\xC\x2\xFFFF\x1\x7\xA\xFFFF\x1"+
				"\x7\x5\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x3\xFFFF"+
				"\x2\x7",
				"\x1\x7\x14\xFFFF\x1\x6\x6\xFFFF\x1\x7\x16\xFFFF\x1\x1\x3\xFFFF\x1\x1"+
				"\x4\xFFFF\x1\x1\x9\xFFFF\x1\x1\x1\x4\x2\xFFFF\x1\x1\xA\xFFFF\x1\x5\x5"+
				"\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x3\xFFFF\x2"+
				"\x7",
				"\x1\xD",
				"\x1\xE\x3B\xFFFF\x1\x7",
				"\x1\xF",
				"\x1\x7\x14\xFFFF\x1\x7\x6\xFFFF\x1\x7\x16\xFFFF\x1\x7\x1\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x7\x4\xFFFF\x1\x7\x9\xFFFF\x1\x7\x1\xA\x2\xFFFF\x1\xB\xA"+
				"\xFFFF\x1\x7\x5\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1"+
				"\x7\x3\xFFFF\x2\x7",
				"\x1\x7\x3\xFFFF\x1\x7\x4\xFFFF\x1\x11\xA\xFFFF\x1\x10\x2\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x12\x3\xFFFF\x1\x7",
				"\x1\x7\x14\xFFFF\x1\x7\x1\x1\x5\xFFFF\x1\x7\x16\xFFFF\x1\x7\x3\xFFFF"+
				"\x1\x7\x4\xFFFF\x1\x7\x9\xFFFF\x1\x7\x1\xC\x2\xFFFF\x1\x7\xA\xFFFF\x1"+
				"\x7\x5\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x3\xFFFF"+
				"\x2\x7",
				"\x1\x13",
				"\x1\x14",
				"\x1\x7\x1D\xFFFF\x1\x7\x1\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1D\xFFFF\x1\x7",
				"\x1\x7\x3\xFFFF\x1\x7\x4\xFFFF\x1\x11\xA\xFFFF\x1\x10\x2\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x12\x3\xFFFF\x1\x7",
				"\x1\x7\x3\xFFFF\x1\x7\x4\xFFFF\x1\x11\xA\xFFFF\x1\x15\x2\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x12\x3\xFFFF\x1\x7",
				"\x1\x16",
				"\x1\x7\x3\xFFFF\x1\x7\x4\xFFFF\x1\x11\xA\xFFFF\x1\x15\x2\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x12\x3\xFFFF\x1\x7"
			};

		private static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
		private static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
		private static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
		private static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
		private static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
		private static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
		private static readonly short[][] DFA39_transition;

		static DFA39()
		{
			int numStates = DFA39_transitionS.Length;
			DFA39_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA39_transition[i] = DFA.UnpackEncodedString(DFA39_transitionS[i]);
			}
		}

		public DFA39( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 39;
			this.eot = DFA39_eot;
			this.eof = DFA39_eof;
			this.min = DFA39_min;
			this.max = DFA39_max;
			this.accept = DFA39_accept;
			this.special = DFA39_special;
			this.transition = DFA39_transition;
		}

		public override string Description { get { return "()* loopback of 246:12: ( stmt_using_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA46 : DFA
	{
		private const string DFA46_eotS =
			"\x17\xFFFF";
		private const string DFA46_eofS =
			"\x17\xFFFF";
		private const string DFA46_minS =
			"\x2\x1D\x1\xFFFF\x1\x37\x3\x1D\x2\x37\x1\x3B\x4\x1D\x1\xFFFF\x2\x37\x2"+
			"\x3B\x2\x1D\x1\x37\x1\x3B";
		private const string DFA46_maxS =
			"\x2\x74\x1\xFFFF\x1\x73\x1\x1D\x1\x74\x1\x1D\x2\x73\x1\x5D\x4\x1D\x1"+
			"\xFFFF\x2\x73\x2\x5D\x2\x1D\x1\x73\x1\x5D";
		private const string DFA46_acceptS =
			"\x2\xFFFF\x1\x2\xB\xFFFF\x1\x1\x8\xFFFF";
		private const string DFA46_specialS =
			"\x17\xFFFF}>";
		private static readonly string[] DFA46_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x24\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2",
				"\x1\x3\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x24\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x5\x9\x2\x1\x6\x1\x4\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\x1\x7",
				"\x1\x8\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x24\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2",
				"\x1\x9",
				"\xD\x2\x1\x5\x9\x2\x1\x6\x1\xA\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\xD\x2\x1\x5\x9\x2\x1\xC\x1\xB\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\x1\xE\x1\xFFFF\x1\x2\x2\xE\x4\xFFFF\x1\xE\xA\xFFFF\x1\xD\x2\xFFFF"+
				"\x1\xE\x3\xFFFF\x1\xE\x6\xFFFF\x1\xE",
				"\x1\xF",
				"\x1\x10",
				"\x1\x11",
				"\x1\x12",
				"",
				"\xD\x2\x1\x5\x9\x2\x1\x6\x1\xA\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\xD\x2\x1\x5\x9\x2\x1\xC\x1\x13\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\x1\xE\x1\xFFFF\x1\x2\x2\xE\x4\xFFFF\x1\xE\xA\xFFFF\x1\x14\x2\xFFFF"+
				"\x1\xE\x3\xFFFF\x1\xE\x6\xFFFF\x1\xE",
				"\x1\xE\x1\xFFFF\x1\x2\x2\xE\x4\xFFFF\x1\xE\xA\xFFFF\x1\xD\x2\xFFFF"+
				"\x1\xE\x3\xFFFF\x1\xE\x6\xFFFF\x1\xE",
				"\x1\x15",
				"\x1\x16",
				"\xD\x2\x1\x5\x9\x2\x1\xC\x1\x13\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\x1\xE\x1\xFFFF\x1\x2\x2\xE\x4\xFFFF\x1\xE\xA\xFFFF\x1\x14\x2\xFFFF"+
				"\x1\xE\x3\xFFFF\x1\xE\x6\xFFFF\x1\xE"
			};

		private static readonly short[] DFA46_eot = DFA.UnpackEncodedString(DFA46_eotS);
		private static readonly short[] DFA46_eof = DFA.UnpackEncodedString(DFA46_eofS);
		private static readonly char[] DFA46_min = DFA.UnpackEncodedStringToUnsignedChars(DFA46_minS);
		private static readonly char[] DFA46_max = DFA.UnpackEncodedStringToUnsignedChars(DFA46_maxS);
		private static readonly short[] DFA46_accept = DFA.UnpackEncodedString(DFA46_acceptS);
		private static readonly short[] DFA46_special = DFA.UnpackEncodedString(DFA46_specialS);
		private static readonly short[][] DFA46_transition;

		static DFA46()
		{
			int numStates = DFA46_transitionS.Length;
			DFA46_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA46_transition[i] = DFA.UnpackEncodedString(DFA46_transitionS[i]);
			}
		}

		public DFA46( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 46;
			this.eot = DFA46_eot;
			this.eof = DFA46_eof;
			this.min = DFA46_min;
			this.max = DFA46_max;
			this.accept = DFA46_accept;
			this.special = DFA46_special;
			this.transition = DFA46_transition;
		}

		public override string Description { get { return "291:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _overall_block_in_root400 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_root403 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _EOF_in_root406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_overall_block418 = new BitSet(new ulong[]{0x1020000000UL,0xC52820000000UL});
		public static readonly BitSet _node_in_overall_block421 = new BitSet(new ulong[]{0x1020000002UL,0xC52820000000UL});
		public static readonly BitSet _func_def_in_node434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_node459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_node464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_node469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_import_def480 = new BitSet(new ulong[]{0x40040000002UL});
		public static readonly BitSet _STRING_in_import_def482 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _INDENT_in_import_def486 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def489 = new BitSet(new ulong[]{0x41000000000UL});
		public static readonly BitSet _STRING_in_import_def492 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def496 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _DEDENT_in_import_def499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_enum_def521 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_enum_def523 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_enum_def525 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_enum_def527 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_enum_def530 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_enum_def532 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _106_in_namespace_def554 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_namespace_def556 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _INDENT_in_namespace_def558 = new BitSet(new ulong[]{0x1020000000UL,0xC52820000000UL});
		public static readonly BitSet _overall_block_in_namespace_def560 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_namespace_def562 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _DEDENT_in_namespace_def565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def586 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_class_def589 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_class_def591 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _INDENT_in_class_def593 = new BitSet(new ulong[]{0x1020000000UL,0xC52820000000UL});
		public static readonly BitSet _class_block_in_class_def595 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_class_def597 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _DEDENT_in_class_def600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_class_block625 = new BitSet(new ulong[]{0x1020000000UL,0xC52820000000UL});
		public static readonly BitSet _class_node_in_class_block628 = new BitSet(new ulong[]{0x1020000002UL,0xC52820000000UL});
		public static readonly BitSet _NUMBER_in_attribute_args642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item663 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_attribute_item666 = new BitSet(new ulong[]{0x42020000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item668 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _68_in_attribute_item671 = new BitSet(new ulong[]{0x42020000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item673 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _62_in_attribute_item677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_attribute702 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _attribute_item_in_attribute704 = new BitSet(new ulong[]{0x0UL,0x40000010UL});
		public static readonly BitSet _68_in_attribute707 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _attribute_item_in_attribute709 = new BitSet(new ulong[]{0x0UL,0x40000010UL});
		public static readonly BitSet _94_in_attribute713 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute715 = new BitSet(new ulong[]{0x1000000002UL,0x20000000UL});
		public static readonly BitSet _attribute_in_class_node734 = new BitSet(new ulong[]{0x20000000UL,0xC52820000000UL});
		public static readonly BitSet _node_in_class_node737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_type_name_op746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name_op750 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_type_name_op752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_type_name_op756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_type_name765 = new BitSet(new ulong[]{0x8800000000000002UL,0x20040000UL});
		public static readonly BitSet _82_in_type_name768 = new BitSet(new ulong[]{0x20000000UL,0x2000000UL});
		public static readonly BitSet _type_name_in_type_name771 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _68_in_type_name774 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _type_name_in_type_name776 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _89_in_type_name782 = new BitSet(new ulong[]{0x8800000000000002UL,0x20000000UL});
		public static readonly BitSet _type_name_op_in_type_name786 = new BitSet(new ulong[]{0x8800000000000002UL,0x20000000UL});
		public static readonly BitSet _82_in_generic_parameter820 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_generic_parameter822 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _68_in_generic_parameter825 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_generic_parameter828 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _89_in_generic_parameter832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_func_args843 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _68_in_func_args846 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args848 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _type_name_in_func_def870 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_func_def872 = new BitSet(new ulong[]{0x2000000000000000UL,0x40000UL});
		public static readonly BitSet _generic_parameter_in_func_def874 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_func_def877 = new BitSet(new ulong[]{0x4000000020000000UL});
		public static readonly BitSet _func_args_in_func_def879 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_func_def882 = new BitSet(new ulong[]{0x40000000UL,0x400000UL});
		public static readonly BitSet _stmt_block_in_func_def886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_func_def890 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_func_def892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block908 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_block911 = new BitSet(new ulong[]{0x2000001020000000UL,0x1F0C000000000UL});
		public static readonly BitSet _stmt_in_stmt_block914 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_block918 = new BitSet(new ulong[]{0x1000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_block921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_stmt_typedef1003 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1005 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_stmt_typedef1007 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_stmt_using_item1032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_stmt_using1040 = new BitSet(new ulong[]{0x20000002UL,0x40000000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1042 = new BitSet(new ulong[]{0x20000002UL,0x40000000000UL});
		public static readonly BitSet _108_in_stmt_return1063 = new BitSet(new ulong[]{0xA840042020000002UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_return1065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_stmt_if1086 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_if1088 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_if1090 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_stmt_if1092 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1094 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_stmt_if1097 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_while1125 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_while1127 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_while1129 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_stmt_while1131 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_stmt_for1159 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_for1161 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_for1163 = new BitSet(new ulong[]{0x0UL,0x20000020000UL});
		public static readonly BitSet _81_in_stmt_for1166 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_for1168 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_stmt_for1170 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_for1172 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _105_in_stmt_for1178 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_for1180 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_stmt_for1185 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_stmt_try1232 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1234 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_try1236 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_stmt_try1238 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_try1240 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_stmt_try1242 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list1267 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _68_in_ident_list1270 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_ident_list1272 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _ident_list_in_stmt_alloc1294 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_stmt_alloc1296 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _type_name_in_stmt_alloc1298 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_stmt_alloc1301 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_stmt_alloc1303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify1329 = new BitSet(new ulong[]{0x1200000000000002UL,0x4000110512089UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify1332 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _cond_expr_in_stmt_modify1335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_lambda_expr1359 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _func_args_in_lambda_expr1361 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_lambda_expr1363 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_lambda_expr1365 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr1444 = new BitSet(new ulong[]{0x1200000000000002UL,0x4000110512089UL});
		public static readonly BitSet _modify_expr_op_in_modify_expr1447 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _modify_expr_in_modify_expr1450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item1461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr1473 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_cond_expr1482 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1486 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_cond_expr1488 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr1523 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _115_in_or_expr1532 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _and_expr_in_or_expr1536 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _bit_or_in_and_expr1566 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_and_expr1575 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _bit_or_in_and_expr1579 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _bit_xor_in_bit_or1609 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_bit_or1618 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _bit_xor_in_bit_or1622 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor1652 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_bit_xor1661 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _bit_and_in_bit_xor1665 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1695 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _59_in_bit_and1704 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1708 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1749 = new BitSet(new ulong[]{0x80000000000002UL,0x800000UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr1758 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1812 = new BitSet(new ulong[]{0x2UL,0x6240000UL});
		public static readonly BitSet _cmp_expr_op_in_cmp_expr1821 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr1866 = new BitSet(new ulong[]{0x2UL,0x8080000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr1875 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _add_expr_in_shift_expr1879 = new BitSet(new ulong[]{0x2UL,0x8080000UL});
		public static readonly BitSet _infix_expr_in_add_expr1909 = new BitSet(new ulong[]{0x2UL,0x22UL});
		public static readonly BitSet _65_in_add_expr1919 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _infix_expr_in_add_expr1923 = new BitSet(new ulong[]{0x2UL,0x22UL});
		public static readonly BitSet _69_in_add_expr1950 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _infix_expr_in_add_expr1954 = new BitSet(new ulong[]{0x2UL,0x22UL});
		public static readonly BitSet _mul_expr_in_infix_expr1994 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _infix_func_in_infix_expr2004 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _mul_expr_in_infix_expr2008 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _selector_expr_in_mul_expr2040 = new BitSet(new ulong[]{0x8100000000000002UL,0x1000UL});
		public static readonly BitSet _63_in_mul_expr2050 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _selector_expr_in_mul_expr2054 = new BitSet(new ulong[]{0x8100000000000002UL,0x1000UL});
		public static readonly BitSet _76_in_mul_expr2084 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _selector_expr_in_mul_expr2088 = new BitSet(new ulong[]{0x8100000000000002UL,0x1000UL});
		public static readonly BitSet _56_in_mul_expr2118 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _selector_expr_in_mul_expr2122 = new BitSet(new ulong[]{0x8100000000000002UL,0x1000UL});
		public static readonly BitSet _prefix_expr_in_selector_expr2165 = new BitSet(new ulong[]{0x2UL,0xA00UL});
		public static readonly BitSet _73_in_selector_expr2175 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_selector_expr2179 = new BitSet(new ulong[]{0x2UL,0xA00UL});
		public static readonly BitSet _75_in_selector_expr2207 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_selector_expr2212 = new BitSet(new ulong[]{0x2UL,0xA00UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr2287 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr2289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_prefix_expr2305 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _type_name_in_prefix_expr2307 = new BitSet(new ulong[]{0x2000000000000000UL,0x20000000UL});
		public static readonly BitSet _61_in_prefix_expr2311 = new BitSet(new ulong[]{0xE840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_prefix_expr2313 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_prefix_expr2316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_prefix_expr2338 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_prefix_expr2340 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_prefix_expr2342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr2358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list2370 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _68_in_expr_list2373 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_expr_list2376 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _atom_expr_in_suffix_expr2392 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _66_in_suffix_expr2402 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _70_in_suffix_expr2428 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _74_in_suffix_expr2451 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_suffix_expr2453 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _72_in_suffix_expr2478 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_suffix_expr2480 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _79_in_suffix_expr2505 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_suffix_expr2507 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _generic_parameter_in_suffix_expr2532 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_suffix_expr2535 = new BitSet(new ulong[]{0xE840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_suffix_expr2537 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_suffix_expr2540 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _93_in_suffix_expr2567 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080040000066UL});
		public static readonly BitSet _expr_list_in_suffix_expr2569 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_suffix_expr2572 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _78_in_suffix_expr2596 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_suffix_expr2598 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_suffix_expr2600 = new BitSet(new ulong[]{0xE840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_suffix_expr2602 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_suffix_expr2605 = new BitSet(new ulong[]{0x2000000000000002UL,0x2004C544UL});
		public static readonly BitSet _NUMBER_in_atom_expr2649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr2654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr2659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_atom_expr2664 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_atom_expr2666 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _68_in_atom_expr2669 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_in_atom_expr2671 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _62_in_atom_expr2678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue2715 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _66_in_lvalue2725 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _70_in_lvalue2753 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _74_in_lvalue2778 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_lvalue2780 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _72_in_lvalue2807 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_lvalue2809 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _79_in_lvalue2836 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_lvalue2838 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _generic_parameter_in_lvalue2865 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_lvalue2868 = new BitSet(new ulong[]{0xE840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_lvalue2870 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_lvalue2873 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _93_in_lvalue2902 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080040000066UL});
		public static readonly BitSet _expr_list_in_lvalue2904 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_lvalue2907 = new BitSet(new ulong[]{0x2000000000000002UL,0x20048544UL});
		public static readonly BitSet _61_in_lvalue_atom2946 = new BitSet(new ulong[]{0x6000000020000000UL});
		public static readonly BitSet _lvalue_in_lvalue_atom2949 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _68_in_lvalue_atom2952 = new BitSet(new ulong[]{0x2000000020000000UL});
		public static readonly BitSet _lvalue_in_lvalue_atom2954 = new BitSet(new ulong[]{0x4000000000000000UL,0x10UL});
		public static readonly BitSet _62_in_lvalue_atom2960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_lvalue_atom2974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident2985 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _79_in_ident2988 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _IDENT_in_ident2990 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _97_in_infix_func3003 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _ident_in_infix_func3006 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_infix_func3008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_synpred28_SugarCpp702 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _attribute_item_in_synpred28_SugarCpp704 = new BitSet(new ulong[]{0x0UL,0x40000010UL});
		public static readonly BitSet _68_in_synpred28_SugarCpp707 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _attribute_item_in_synpred28_SugarCpp709 = new BitSet(new ulong[]{0x0UL,0x40000010UL});
		public static readonly BitSet _94_in_synpred28_SugarCpp713 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_synpred28_SugarCpp715 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _attribute_in_synpred29_SugarCpp734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_parameter_in_synpred114_SugarCpp2532 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _61_in_synpred114_SugarCpp2535 = new BitSet(new ulong[]{0xE840042020000000UL,0x10080000000066UL});
		public static readonly BitSet _expr_list_in_synpred114_SugarCpp2537 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _62_in_synpred114_SugarCpp2540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_synpred116_SugarCpp2567 = new BitSet(new ulong[]{0xA840042020000000UL,0x10080040000066UL});
		public static readonly BitSet _expr_list_in_synpred116_SugarCpp2569 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_synpred116_SugarCpp2572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_synpred136_SugarCpp2988 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _IDENT_in_synpred136_SugarCpp2990 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
